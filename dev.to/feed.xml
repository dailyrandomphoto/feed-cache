<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 useful sections to improve your Github README files</title>
      <author>Saurabh Mhatre</author>
      <pubDate>Thu, 16 Sep 2021 15:41:16 +0000</pubDate>
      <link>https://dev.to/saurabhnative/10-useful-sections-to-improve-your-github-readme-files-3hgj</link>
      <guid>https://dev.to/saurabhnative/10-useful-sections-to-improve-your-github-readme-files-3hgj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone
&lt;/h2&gt;

&lt;p&gt;Today we are going to cover a list of 10 important sections you can add to your GitHub projects for improving your README files.&lt;/p&gt;

&lt;p&gt;So let's begin...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-1-add-title-description-and-socialify-imageoptional"&gt;
  &lt;/a&gt;
  Section 1: Add title, description and socialify image(optional)
&lt;/h3&gt;

&lt;p&gt;The title and description for a Github project can provide the user with basic information about the project.&lt;br&gt;
Additionally, we can create a project info image using  &lt;a href="https://socialify.git.ci/"&gt;socialify&lt;/a&gt;  service to improve project presentation.&lt;br&gt;&lt;br&gt;
Example:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_OpkMEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131413287/MVYBKNtuBk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_OpkMEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131413287/MVYBKNtuBk.png" alt="Screenshot 2021-08-28 at 11.46.29 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://socialify.git.ci/"&gt;Socialify&lt;/a&gt;  helps you showcase your project to the world by generating a beautiful project image that can be used in Github README&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-2-add-shields-io-badges"&gt;
  &lt;/a&gt;
  Section 2: Add shields io badges
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://shields.io/"&gt;Shields.io&lt;/a&gt; is a service for creating legible badges in SVG format, which can easily be included in GitHub readmes or any other web page.&lt;br&gt;
This will help to provide project information in a condensed manner:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBIfPxau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131526957/3a8IXbWEV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBIfPxau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131526957/3a8IXbWEV.png" alt="Screenshot 2021-08-28 at 11.48.42 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-3-project-demo"&gt;
  &lt;/a&gt;
  Section 3: Project Demo
&lt;/h3&gt;

&lt;p&gt;Project demo URL helps the viewer to see live projects easily. We can also use this to show live previews to prospective interviewers quickly during interviews.&lt;br&gt;&lt;br&gt;
Example:- &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aj7eE7TT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131664193/_Or-vf2UJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aj7eE7TT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131664193/_Or-vf2UJ.png" alt="Screenshot 2021-08-28 at 11.50.58 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-4-project-screenshots"&gt;
  &lt;/a&gt;
  Section 4: Project Screenshots
&lt;/h3&gt;

&lt;p&gt;Project screenshots help users to see the product even before opening the live demo link. For frontend/full-stack projects this is a must-have section.&lt;br&gt;&lt;br&gt;
Example:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXei085H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131727261/FViueK3qH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXei085H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131727261/FViueK3qH.png" alt="Screenshot 2021-08-28 at 11.52.01 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-5-features"&gt;
  &lt;/a&gt;
  Section 5: Features
&lt;/h3&gt;

&lt;p&gt;Features section can be used to list down all the advantages end users will have while using our project as well as some technical plus points for dev interviews.&lt;br&gt;&lt;br&gt;
Example:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLQUTADI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131829985/75MnZh9pC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLQUTADI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131829985/75MnZh9pC.png" alt="Screenshot 2021-08-28 at 11.53.45 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-6-installation-steps"&gt;
  &lt;/a&gt;
  Section 6: Installation Steps
&lt;/h3&gt;

&lt;p&gt;If someone wants to use our project for their own software development purposes, then installation instructions can help them in setting up the project correctly.&lt;br&gt;&lt;br&gt;
Example:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nl2fthwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131921478/xon1CCzrl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nl2fthwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630131921478/xon1CCzrl.png" alt="Screenshot 2021-08-28 at 11.55.16 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-7-contribution-guidelinesoptional"&gt;
  &lt;/a&gt;
  Section 7: Contribution Guidelines(Optional)
&lt;/h3&gt;

&lt;p&gt;If someone wants to contribute to our project in some way via pull requests or feature recommendations they will first go through contribution guidelines listed in the project.&lt;br&gt;&lt;br&gt;
Example:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IuHXJavN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132001913/Xys47zoBR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IuHXJavN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132001913/Xys47zoBR.png" alt="Screenshot 2021-08-28 at 11.56.36 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-8-technologies-usedoptional"&gt;
  &lt;/a&gt;
  Section 8: Technologies used(Optional)
&lt;/h3&gt;

&lt;p&gt;In this section, we can list down technologies or modules which we used while building the project to help others understand the creation components in a better manner.&lt;br&gt;&lt;br&gt;
Example:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6bzxSN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132101901/VKlqdn97K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6bzxSN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132101901/VKlqdn97K.png" alt="Screenshot 2021-08-28 at 11.58.14 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-9-license-informationoptional"&gt;
  &lt;/a&gt;
  Section 9: License Information(Optional)
&lt;/h3&gt;

&lt;p&gt;Here we can provide information about the licenses used in the project for others to know the usage guidelines.&lt;br&gt;&lt;br&gt;
Example:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xo3cvSiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132157776/Ou2Am-udT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xo3cvSiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132157776/Ou2Am-udT.png" alt="Screenshot 2021-08-28 at 11.59.13 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-10-enter-support-informationoptional"&gt;
  &lt;/a&gt;
  Section 10: Enter Support Information(Optional)
&lt;/h3&gt;

&lt;p&gt;Here we can add links for asking people to star the project or support our efforts via donations.&lt;br&gt;
Example:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jf74q-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132236432/mdA86aIZ8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jf74q-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630132236432/mdA86aIZ8.png" alt="Screenshot 2021-08-28 at 12.00.31 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can a sample repo with all this sections added here:-  &lt;a href="https://github.com/saurabhnative/storiesfeedapp"&gt;Stories Feed Github&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Hope this article was helpful to you all. Follow me for more such articles in future.&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>We didn't start the fire(break)</title>
      <author>Georgia</author>
      <pubDate>Thu, 16 Sep 2021 15:33:31 +0000</pubDate>
      <link>https://dev.to/digital-theatre/we-didn-t-start-the-fire-break-16mi</link>
      <guid>https://dev.to/digital-theatre/we-didn-t-start-the-fire-break-16mi</guid>
      <description>&lt;p&gt;The team at Digital Theatre+ have just completed our first firebreak, and so it felt like a good time to scribble down a few reflections, discuss how successful it was for our team and whether it's something we'll be repeating in the future.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-a-firebreak"&gt;
  &lt;/a&gt;
  So, what's a firebreak?
&lt;/h2&gt;

&lt;p&gt;A firebreak is an opportunity for a development team to take some time out of business as usual and flex their creative coding muscles. By the time we took our firebreak, the tech team at Digital Theatre+, had been working on the rebuild of our product for the past year and a bit, so for us a firebreak was a chance to take some wacky, outlandish product ideas that had been floating around in our heads and actually throw some time and resources into bringing them to life. Firebreak was an opportunity, to get creative, be innovative and have some fun without worrying about the pressures of delivering features and addressing bugs or tech debt.&lt;/p&gt;

&lt;p&gt;You may or may not know that the title of this article is inspired by a song (We Didn't Start The Fire) in which singer Billy Joel provides his listeners with everything they need to know about history and popular culture from the twentieth century (I owe that A* in History GCSE to you, Bill). But, as the title also suggests, the idea of a firebreak didn't start with us. It's something teams have been practicing for many years, in many different forms. During my time at &lt;a href="https://www.foundersandcoders.com/"&gt;Founders &amp;amp; Coders&lt;/a&gt; our weekly project sprints were structured really similarly to how our team at Digital Theatre+ organised this firebreak.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want a more eloquent, descriptive summary of what a firebreak is, visit &lt;a href="https://www.scouts.org.uk/news/2019/july/planning-a-firebreak-beta-website-development/"&gt;this link&lt;/a&gt; for an article ghost written by DT+ dev &lt;a href="https://dev.to/jamescalmusdt"&gt;James Calmus&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-was-the-structure-like"&gt;
  &lt;/a&gt;
  What was the structure like?
&lt;/h2&gt;

&lt;p&gt;It's well accepted that without a set of clear rules, fun just gets out of control. So, we started the week by outlining two key guidelines for our firebreak. First, whatever the team decides to work on must be linked to the general scope and vision of the Digital Theatre+ product. Secondly, all work must be completed within the allotted firebreak time - no crazy late evenings or weekend work allowed!&lt;/p&gt;

&lt;p&gt;We decided to give ourselves a week for the firebreak, beginning on a Monday morning with idea generation at our usual stand up time. James, our dev facilitator, had prepared a Miro board where we could throw ideas onto a shared screen. Once we'd gathered enough project suggestions, we talked through them briefly and went on to vote on our top three. Votes collated, we had a really informal chat in between the four of us developers about what we'd each like to work on, and what style of work we'd like to do - mobbing, pairing or working solo. &lt;/p&gt;

&lt;p&gt;We settled on working in two separate pairs. One pair worked on a synchronised video experience that allows users to play, pause and scrub videos in unison, which would be complimented by a chat room where users could discuss the videos they watch. The other (and my pair) decided to build a 'rich guide'. This was an opportunity to take the PDFs we have on our website and turn their content into rich text, which we could pop into HTML on a web page - similar to long reads that you find in most of the major news and journalism outlets. &lt;/p&gt;

&lt;p&gt;Our other ideas are too good to share so we're keeping them under wraps - come back in six months or so and see if they made it into firebreak number two!&lt;/p&gt;

&lt;p&gt;The rest of the week we kept meetings to a minimum. We started each day with a quick stand up to talk through the yesterday's achievements and today's plans, and then got back to work on our projects. We ended the week with a demo to the wider company and a firebreak retro, but more on that later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-we-produce"&gt;
  &lt;/a&gt;
  What did we produce?
&lt;/h2&gt;

&lt;p&gt;Our first pair built a video and chat room feature, with the idea of giving users control over videos in real time, while also being able to discuss content as you watch. Not only did they manage to allow users to play, pause and scrub video for themselves and everyone else watching, but they also were able to create what we called a 'teacher/student' relationship, where an admin user can control the video, but other users don't have permission to perform any actions on the video they're watching. This would be perfect for teachers assigning videos to students who are learning remotely, creating a allowing Oh, and they even had time to add a Giphy bot to the chat room, too. &lt;/p&gt;

&lt;p&gt;The second pair took existing Digital Theatre+ content from PDFs and reframed them as rich text on a simple, HTML page. We had a hero image at the top of the article, with parallax scrolling of the overlaid title. Underneath that, we included a table of contents with sticky scroll, that also jumped smoothly to each heading within the piece of content. We included social media icons to allow teachers and students to share content easily. Within the body of the content, we added drop caps, indented our images with a negative margin so that they sat slightly outside of the text and also embedded video resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-was-the-feedback-like"&gt;
  &lt;/a&gt;
  What was the feedback like?
&lt;/h2&gt;

&lt;p&gt;We ended our firebreak week with two events. The first was a demo to the rest of our company - we hold a fortnightly demo during business as usual times anyway, so we used this recurring slot to show off our firebreak work. As most people on the call are non technical, we started with an explanation of what a firebreak is, its benefits, and also a huge disclaimer that none of the work they were about to see would be making its way into production anytime soon. We showed off the video and chat feature, and the rich guides, and both were a roaring success and received fantastic feedback from excited colleagues. The firebreak work got the wider company thinking about new ways to engage with and present our content, which is exactly what we'd hoped would happen. Our colleagues hit us with really insightful questions, ranging from child protection issues surrounding chat rooms to how teachers might use the rich guides for in-classroom discussions. It was great to see them so excited about our work, and we'll definitely be looking for ways to involve the rest of the company in future firebreaks. &lt;/p&gt;

&lt;p&gt;Our second wrap up event was a closing ceremony retrospective just for the tech team, a chance to reflect on how the week had gone, and what we would do again or do differently next time we held a firebreak. We also used this time to discuss some of the more technical parts of each pair's projects, things we'd left out of the high level presentation we did to the wider company in our demo. It was really valuable to have this time to ask each other questions about the work, and take a closer look at the code, gawk at the lack of testing, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-we-do-it-again"&gt;
  &lt;/a&gt;
  Would we do it again?
&lt;/h2&gt;

&lt;p&gt;Hell, yes! All four members of the DT+ dev team agreed that firebreak was a great chance to play around with our codebase and most importantly, a fun, relaxing way to spend a week after 14 months of focusing on the delivery of our rebuild MVP. Removing the pressures of business as usual and letting some creativity flow refreshed us as we prepared to enter a new stage in our team journey - post MVP feature development! A week was a good amount of time to spend on firebreak, and if (when) we repeat it in the future, I believe we'd want to stick with a week long event. As mentioned above, we'd love to get other members of the company involved in the future, especially as the ideas generation and design stage. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Big thanks to my colleague Kalle for loving my original title for this article (Relight my firebreak) and for also coming up with the even better one that I eventually used.&lt;/em&gt;  &lt;/p&gt;

</description>
      <category>agile</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>motivation</category>
    </item>
    <item>
      <title>How to create a Smart Contract to mint a NFT</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Thu, 16 Sep 2021 15:33:02 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-mint-a-nft-2bbn</link>
      <guid>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-mint-a-nft-2bbn</guid>
      <description>&lt;p&gt;In this article we are going to create a smart contract to mint an NFT on Ethereum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-project"&gt;
  &lt;/a&gt;
  Setup the project
&lt;/h2&gt;

&lt;p&gt;To start the project we will use the hardhat that will provide us with a boilerplate to deploy the contract, do tests, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-hardhat"&gt;
  &lt;/a&gt;
  Installing the hardhat
&lt;/h3&gt;

&lt;p&gt;We will install hardhat as development dependency using the yarn.&lt;/p&gt;

&lt;p&gt;Open a new terminal and run these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;nft-token
&lt;span class="nb"&gt;cd &lt;/span&gt;nft-token
yarn init &lt;span class="nt"&gt;-y&lt;/span&gt;
yarn add hardhat &lt;span class="nt"&gt;-D&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In the same directory where you installed Hardhat run:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Select Create an empty hardhat.config.js with your keyboard and hit enter.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;888    888                      888 888               888
888    888                      888 888               888
888    888                      888 888               888
8888888888  8888b.  888d888 .d88888 88888b.   8888b.  888888
888    888     &lt;span class="s2"&gt;"88b 888P"&lt;/span&gt;  d88&lt;span class="s2"&gt;" 888 888 "&lt;/span&gt;88b     &lt;span class="s2"&gt;"88b 888
888    888 .d888888 888    888  888 888  888 .d888888 888
888    888 888  888 888    Y88b 888 888  888 888  888 Y88b.
888    888 "&lt;/span&gt;Y888888 888     &lt;span class="s2"&gt;"Y88888 888  888 "&lt;/span&gt;Y888888  &lt;span class="s2"&gt;"Y888

👷 Welcome to Hardhat v2.6.4 👷‍

? What do you want to do? … 
  Create a basic sample project
  Create an advanced sample project
❯ Create an empty hardhat.config.js
  Quit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-files-and-directories"&gt;
  &lt;/a&gt;
  Creating the files and directories
&lt;/h2&gt;

&lt;p&gt;Let's start by creating a directory called contracts in the root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules
/contracts
hardhat.config.js
package.json
yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the folder we can create our first file of our contract inside the directory, let's call it: &lt;code&gt;factoryNFT.sol&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules
/contracts
 | - factoryNFT.sol
hardhat.config.js
package.json
yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-the-smart-contract"&gt;
  &lt;/a&gt;
  Writing the smart contract
&lt;/h2&gt;

&lt;p&gt;Now we go to the most anticipated part of the article, writing our contract.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can review the basics in my other article: &lt;a href="https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-receive-donations-using-solidity-4k8"&gt;How to create a smart contract to receive donations using Solidity&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#lets-start-defining-the-pragma-version"&gt;
  &lt;/a&gt;
  Let's start defining the pragma version:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;factoryNFT.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To help us, we will install the openzeppelin contracts package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @openzeppelin/contracts  @openzeppelin/hardhat-upgrades
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import it into the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;factoryNFT.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We made 3 imports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Counters&lt;/strong&gt;: is a useful one that will help us increment a tokenId for each new token.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ERC721URIStorage&lt;/strong&gt;: we will provide some functions to handle our tokenURI, which contains metadata and image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ERC721&lt;/strong&gt;: will we provide some basic functions of the ERC721;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#inheriting-the-openzeppelin-contract"&gt;
  &lt;/a&gt;
  Inheriting the OpenZeppelin contract
&lt;/h3&gt;

&lt;p&gt;Now we can start by defining the name of our contract and inheriting the OpenZeppelin contracts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;factoryNFT.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721URIStorage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Factory NFT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FTN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-our-mint-function"&gt;
  &lt;/a&gt;
  Creating our Mint function
&lt;/h3&gt;

&lt;p&gt;Let's start by creating our function calling createToken, where it will receive as a parameter, our tokenURI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;factoryNFT.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721URIStorage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Factory NFT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FTN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;tokenURI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's increment the amount of token in storage and save it in a variable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;factoryNFT.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721URIStorage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Factory NFT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FTN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;tokenURI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can put the main function of the contract which is to mint our NFT and set its tokenURI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;factoryNFT.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721URIStorage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Factory NFT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FTN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;tokenURI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_setTokenURI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenURI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compiling-and-testing-the-contract"&gt;
  &lt;/a&gt;
  Compiling and testing the Contract
&lt;/h2&gt;

&lt;p&gt;Now to test the contract, we are going to compile it and write a test for it.&lt;/p&gt;

&lt;p&gt;First of all let's go to the &lt;code&gt;hardhat.config.js&lt;/code&gt; file and change the solidity version to ^0.8.3.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hardhat.config.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @type import('hardhat/config').HardhatUserConfig
 */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^0.8.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;Now to test our contract we need to install some plugins for hardhat to help us interact with Ethereum and test our contracts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the plugins we need to add a line in &lt;code&gt;hardhat.config.js&lt;/code&gt; to setup the plugins.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hardhat.config.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nomiclabs/hardhat-waffle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * @type import('hardhat/config').HardhatUserConfig
 */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^0.8.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#writing-the-test"&gt;
  &lt;/a&gt;
  Writing the test
&lt;/h3&gt;

&lt;p&gt;Now create a directory called &lt;code&gt;test&lt;/code&gt; in the root folder and add called: &lt;code&gt;factoryNFT.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules
/contracts
/test
 |- factoryNFT.js
hardhat.config.js
package.json
yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I am going to put the test below and explain each line to understand it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Minting the token and returning it&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should the contract be able to mint a function and return it&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://opensea-creatures-api.herokuapp.com/api/creature/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;//Random metadata url&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FactoryContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FactoryNFT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Getting the contract&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;FactoryContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Deploying the Contract&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;factoryContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Minting the token&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Waiting for the token to be minted&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Getting the tokenID&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenURI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;factoryContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenURI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Using the tokenURI from ERC721 to retrieve de metadata&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenURI&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Comparing and testing&lt;/span&gt;

  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now just compile and run the test and we will have the result!.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we come to the end, soon we will have a tutorial on how to get up to rinkeby testnet.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Dev Spotlights: From serving ice cream to managing servers</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 16 Sep 2021 15:20:26 +0000</pubDate>
      <link>https://dev.to/codesphere/dev-spotlights-from-serving-ice-cream-to-managing-servers-4d3g</link>
      <guid>https://dev.to/codesphere/dev-spotlights-from-serving-ice-cream-to-managing-servers-4d3g</guid>
      <description>&lt;p&gt;Roman is our Senior Software Engineer here at Codesphere, he was recently interviewed on the Ironhack podcast, where he shared his journey from working in his mom's ice cream shop to becoming the award-winning, self-taught dev he is today - and it's a story worth hearing so we thought we'd share it with you too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-wc6nn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymxs2t1hvvs2wkth9ul7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-wc6nn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymxs2t1hvvs2wkth9ul7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After an 8 year career in the service industry, Roman decided to teach himself computer science while working full time as a bartender. Writing code on the back of cheques during his 14 hours shifts and watching course material on his days off eventually paid off, but not without some hard work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKyjK-_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjdfnyabxhaif5ix7uye.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKyjK-_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjdfnyabxhaif5ix7uye.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having entrepreneurial parents, Roman always thought he would follow in their footsteps in some way but never considered a career in software engineering. Roman had a life-long love for physics and space but he was never good at the sciences at school so he didn't think IT would be a path for him.&lt;/p&gt;

&lt;p&gt;That was not until he came across a presentation given by Elon Musk talking about his plan to colonize Mars and that he started doing some digging. Finding that Musk had coded and sold his first game at the age of 13 was all the excuses Roman needed to prove to himself he could do it too.&lt;/p&gt;

&lt;p&gt;Learning any skill part-time, around your otherwise busy schedule is always a big ask, but this kind of passion and drive is a sought-after skill in today's industry and it's becoming a common story for new devs.&lt;/p&gt;

&lt;p&gt;The conversation of self-taught vs college or bootcamp is still an interesting debate and each path has its own merits. Whichever route someone chooses requires you to learn on your own, make mistakes, try things and grow at your own pace. It's not an easy road to become a coding master, but nothing worth doing is right?&lt;/p&gt;

&lt;p&gt;Roman, while still working full time as a bartender in a restaurant, started learning to code with youtube tutorials. He eventually enrolled in the famous &lt;a href="https://www.edx.org/course/introduction-computer-science-harvardx-cs50x"&gt;CS50&lt;/a&gt; course to hone his skills - Computer Science 50 is Harvard University's introduction to the intellectual enterprises of computer science and the art of programming - but soon switched courses to take the class in English, instead of his native Russian.&lt;/p&gt;

&lt;p&gt;Spending his free time doing the course and his work time practicing on his own between serving customers he found his talent for coding and never looked back. His career didn't take off until about 18 months after he started when he found his first job working in the Blockchain. After finding his feet, Roman also went on to win some coding competitions including &lt;a href="https://hack.moscow/"&gt;Hack. Moscow&lt;/a&gt;, in which he was the only person to enter as a solo competitor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw8vyS5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usy3tkryvjnt8alihgc2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw8vyS5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usy3tkryvjnt8alihgc2.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The drive to do more and improve where you're at is admirable, but it's arguably essential if you want to move into a new industry or even pivot in the one you're in. Learning doesn't end when you leave school, it never ends, and its stories like Roman's remind us that it's worth putting the hard work in if you want to take that next step.&lt;/p&gt;

&lt;p&gt;If you're thinking about starting your journey into tech, there are so many tools and resources to help you get started. There are schools and courses you can enroll in, but ultimately it will always come down to your own dedication and willingness to learn. You have to be comfortable with not knowing and smart enough to be taught. Not everyone's journey needs to start with working 40 hour weeks and learning with every minute of spare time until you discover your hidden talent, but ending every day better than the one before is a great way to start.&lt;/p&gt;

&lt;p&gt;Roman's path eventually led him to &lt;a href="https://link.codesphere.com/DN"&gt;Codesphere&lt;/a&gt;, where he is helping us shape the future of cloud IDEs. His story is an inspiration to anyone thinking of starting their journey, and we hope some of you are inspired to do more.&lt;/p&gt;

&lt;p&gt;Just remember that we all start somewhere and passion and hard work can get you where you want to be. Maybe we'll see you at Codesphere somewhere down the line… or maybe you're already a tech guru and you have your own story of success? We'd love to hear it.&lt;/p&gt;

&lt;p&gt;The podcast that interviewed Roman is part of a tech bootcamp that teaches programs in web development, UX/UI design, cyber security, and data analytics. They additionally spotlight some inspirational stories from the world of tech. You can check out the full interview here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3XQDIjfuenwESk7A7n7Dpd"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>spotify</category>
      <category>voiceautomating</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What Is Inside My Vimrc</title>
      <author>Igor Irianto</author>
      <pubDate>Thu, 16 Sep 2021 14:55:08 +0000</pubDate>
      <link>https://dev.to/iggredible/what-is-inside-my-vimrc-3ob7</link>
      <guid>https://dev.to/iggredible/what-is-inside-my-vimrc-3ob7</guid>
      <description>&lt;p&gt;A vimrc is an important file for us Vim users.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: My Vimrc has changed since I began writing this article (it is now 7 lines long), but the principle is still the same. If you want to look at the state of the Vimrc at the time I wrote this article, check out &lt;a href="https://github.com/iggredible/dotfiles/tree/691af3370c9914cdbb36f05af57d6c163ef5ed62"&gt;this link&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you're like me, you probably have spent an ungodly amount of time tinkering with it until it grows massive. At some point, it is a good idea to split your vimrc into multiple parts for maintainability. Plus, if you want to share your vimrc to the world, splitting it into an organized structure will help clarify with other devs who are looking at your vimrc.&lt;/p&gt;

&lt;p&gt;In this article, I will share how I organize my vimrc. Everything here is a matter of personal preference. There is no objectively right or wrong way to organize a vimrc. I hope that by sharing what's inside my vimrc, you will gain insight into how you can organize your own vimrc to meet your needs. Don't put down any line in your vimrc that you don't understand.&lt;/p&gt;

&lt;p&gt;Lastly, this article makes the assumption that your default vimrc file and Vim files directory are in the root directory, &lt;code&gt;~/.vimrc&lt;/code&gt; and &lt;code&gt;~/.vim/&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-the-secret-sauce"&gt;
  &lt;/a&gt;
  Source, The Secret Sauce
&lt;/h2&gt;

&lt;p&gt;The secret sauce of a modular vimrc is the &lt;code&gt;source&lt;/code&gt; Vimrscript command. Think of it like the &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, or &lt;code&gt;import&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you have this inside your &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source '~/my-script.vim'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside &lt;code&gt;~/my-script.vim&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "Hello from outside yo vimrc"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next time you open Vim, it will output "Hello from outside yo vimrc". Great! This is how you can split your vimrc into multiple parts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotfiles"&gt;
  &lt;/a&gt;
  Dotfiles
&lt;/h2&gt;

&lt;p&gt;My Vim configs are stored inside my &lt;a href="https://github.com/iggredible/dotfiles"&gt;dotfiles repository&lt;/a&gt; - this way I can access them when I'm away from my computer. So if I have to login from a foreign computer, all I need to do is symlink the Vim files from the dotfiles repository, install the dependencies (I have a script for that too, but that's for another time), and I'm set to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure"&gt;
  &lt;/a&gt;
  The Structure
&lt;/h2&gt;

&lt;p&gt;This is the structure for my Vim-related files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotfiles/
├─ vim/
│  ├─ custom-functions/
│  │  ├─ function1.vim
│  │  ├─ function2.vim
│  │  ├─ function-N.vim
│  ├─ custom-plugins/
│  │  ├─ ale.vim
│  │  ├─ fzf.vim
│  │  ├─ plugin-N.vim
│  ├─ main/
│  │  ├─ settings.vim
│  │  ├─ themes.vim
│  │  ├─ keymaps.vim
│  ├─ UltiSnips/
│  │  ├─ javascript.snippets
│  │  ├─ ruby.snippets
│  ├─ vimspector.json
├─ vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important ones are the &lt;code&gt;vimrc&lt;/code&gt; file and the &lt;code&gt;vim/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Note that I name them without the dot (&lt;code&gt;vimrc&lt;/code&gt; and &lt;code&gt;vim/&lt;/code&gt; as opposed to &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.vim/&lt;/code&gt;). This is so that when I clone it, they won't be invisible. It's easier to deal with visible files than invisible ones.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;vim/&lt;/code&gt; directory, I divide them into multiple sub-directories. The three important ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;custom-functions/&lt;/code&gt; where I store my own custom functions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;custom-plugins/&lt;/code&gt; where I store configs specific for Vim plugins&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;main/&lt;/code&gt; where I store the main Vim configurations and basic keymaps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you notice, I also have a &lt;code&gt;vimspector.json&lt;/code&gt; file and a &lt;code&gt;UltiSnips/&lt;/code&gt; directory. I use the &lt;a href="https://github.com/puremourning/vimspector"&gt;Vimspector&lt;/a&gt; plugin and it requires a config file. I also use the &lt;a href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt; plugin. It uses&lt;code&gt;UltiSnips/&lt;/code&gt; directory to store custom snippets. If you don't use any of these plugins, just ignore them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vimrc"&gt;
  &lt;/a&gt;
  Vimrc
&lt;/h2&gt;

&lt;p&gt;The vimrc file is called first whenever you launch Vim. Inside it, we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
  Plug 'iggredible/totitle-vim'
  Plug 'tpope/vim-sensible'
  Plug 'sjl/badwolf'
  Plug 'itchyny/lightline.vim'
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/fzf', { 'do': { -&amp;gt; fzf#install() } }
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'tomtom/tcomment_vim'
  Plug 'mattn/emmet-vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-fugitive'
  Plug 'Yggdroot/indentLine'
  Plug 'preservim/nerdtree'
  Plug 'luochen1990/rainbow'
  Plug 'tpope/vim-dispatch'
  Plug 'junegunn/vim-peekaboo'
  Plug 'machakann/vim-sandwich'
  Plug 'simnalamburt/vim-mundo'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-unimpaired'
  Plug 'godlygeek/tabular'
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
  Plug 'ryanoasis/vim-devicons'
  Plug 'dense-analysis/ale'
  Plug 'szw/vim-maximizer'
  Plug 't9md/vim-choosewin'
  Plug 'Shougo/unite.vim'
  Plug 'puremourning/vimspector'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
call plug#end()

let b:fileList = split(globpath('~/.vim/main', '*.vim'), '\n')
let b:fileList += split(globpath('~/.vim/custom-functions', '*.vim'), '\n')
let b:fileList += split(globpath('~/.vim/custom-plugins', '*.vim'), '\n')

for fpath in b:fileList
  exe 'source' fpath
endfor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My vimrc is less than 50 lines long, including empty lines. Hey, that's pretty readable! Let's go over what they do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatically-installing-vim-plug"&gt;
  &lt;/a&gt;
  Automatically Installing Vim Plug
&lt;/h3&gt;

&lt;p&gt;I use &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt; as my plugin manager. The code below checks for the existence of &lt;code&gt;~/.vim/autoload/plug.vim&lt;/code&gt; when you start Vim. The plugin manager uses that file to read the plugin files. If &lt;code&gt;plug.vim&lt;/code&gt; doesn't already exist, then it will download the &lt;code&gt;plug.vim&lt;/code&gt; file and create the &lt;code&gt;~/.vim/autoload/plug.vim&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also find the automatic install script above in the &lt;a href="https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation"&gt;vim-plug tips page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I haven't really looked at other plugin managers, but I'm confident that you can pull something similar with other plugin managers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;The next line lists a list of plugins I use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;call plug#begin('~/.vim/plugged')
  Plug 'iggredible/totitle-vim'
  Plug 'tpope/vim-sensible'
  Plug 'sjl/badwolf'
  Plug 'itchyny/lightline.vim'
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/fzf', { 'do': { -&amp;gt; fzf#install() } }
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'tomtom/tcomment_vim'
  Plug 'mattn/emmet-vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-fugitive'
  Plug 'Yggdroot/indentLine'
  Plug 'preservim/nerdtree'
  Plug 'luochen1990/rainbow'
  Plug 'tpope/vim-dispatch'
  Plug 'junegunn/vim-peekaboo'
  Plug 'machakann/vim-sandwich'
  Plug 'simnalamburt/vim-mundo'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-unimpaired'
  Plug 'godlygeek/tabular'
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
  Plug 'ryanoasis/vim-devicons'
  Plug 'dense-analysis/ale'
  Plug 'szw/vim-maximizer'
  Plug 't9md/vim-choosewin'
  Plug 'Shougo/unite.vim'
  " Plug 'puremourning/vimspector'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
call plug#end()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part is totally up to you. Use whatever plugins that &lt;em&gt;you need&lt;/em&gt;, not what you see other people use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sourcing-stuff"&gt;
  &lt;/a&gt;
  Sourcing Stuff
&lt;/h3&gt;

&lt;p&gt;Here's what the next 3 lines look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let b:fileList = split(globpath('~/.vim/main', '*.vim'), '\n')
let b:fileList += split(globpath('~/.vim/custom-functions', '*.vim'), '\n')
let b:fileList += split(globpath('~/.vim/custom-plugins', '*.vim'), '\n')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are creating an array named &lt;code&gt;fileList&lt;/code&gt; and appending it with the paths for all the files inside &lt;code&gt;main/&lt;/code&gt;, &lt;code&gt;custom-functions/&lt;/code&gt;, and &lt;code&gt;custom-plugins/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we have this loop. This is where the magic happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for fpath in b:fileList
  exe 'source' fpath
endfor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It iterates through the &lt;code&gt;fileList&lt;/code&gt; array and calls &lt;code&gt;source&lt;/code&gt; on each file. This keeps my vimrc to be concise and spark joy :D.&lt;/p&gt;

&lt;p&gt;Next, let's explore some contents of my &lt;code&gt;main/&lt;/code&gt;, &lt;code&gt;custom-functions/&lt;/code&gt;, and &lt;code&gt;custom-plugins/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-main-directory"&gt;
  &lt;/a&gt;
  the Main Directory
&lt;/h3&gt;

&lt;p&gt;The main directory contains the base vimrc configs that don't depend on any custom plugin.&lt;/p&gt;

&lt;p&gt;Inside, I sub-divide them into three files: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;settings.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keymaps.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes.vim&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#main-settings"&gt;
  &lt;/a&gt;
  Main Settings
&lt;/h3&gt;

&lt;p&gt;This is what's inside the &lt;code&gt;settings.vim&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set clipboard=unnamed
set noswapfile
set relativenumber number
set tabstop=2
set shiftwidth=2
set expandtab
set ignorecase
set smartcase
set hlsearch
set confirm
set hidden
set shortmess-=S

let s:english_dict = "/usr/share/dict/words"

if filereadable(s:english_dict)
  let &amp;amp;dictionary=s:english_dict
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file primarily deals with base settings (if you're curious what they do, consult &lt;code&gt;:help&lt;/code&gt;). The last command with the &lt;code&gt;english_dict&lt;/code&gt; adds a dictionary autocompletion (&lt;code&gt;CTRL-X CTRL-K&lt;/code&gt;), if a dictionary exists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-keymaps"&gt;
  &lt;/a&gt;
  Main Keymaps
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;keymaps.vim&lt;/code&gt; file contains key mappings independent from plugins. For plugin-specific maps, they are inside &lt;code&gt;custom-plugins/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside my &lt;code&gt;keymaps.vim&lt;/code&gt;, I have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let mapleader = "\&amp;lt;Space&amp;gt;"

nnoremap &amp;lt;Leader&amp;gt;vs :source ~/.vimrc&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;ve :vsplit ~/.vimrc&amp;lt;CR&amp;gt;

nnoremap &amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt; :noh&amp;lt;Return&amp;gt;&amp;lt;Esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like to use &lt;code&gt;Space&lt;/code&gt; as the leader - but you can use whatever leader key you feel comfortable with.&lt;/p&gt;

&lt;p&gt;I have three custom maps. The first two, &lt;code&gt;&amp;lt;Leader&amp;gt;vs&lt;/code&gt; and &lt;code&gt;&amp;lt;Leader&amp;gt;ve&lt;/code&gt;, are to quickly open  and source (vs mnemonic: Vimrc Source) Vimrc (mnemonics: &lt;strong&gt;V&lt;/strong&gt;imrc &lt;strong&gt;E&lt;/strong&gt;dit and &lt;strong&gt;V&lt;/strong&gt;imrc &lt;strong&gt;Source&lt;/strong&gt;). I've used this countless times.&lt;/p&gt;

&lt;p&gt;I also have a &lt;code&gt;&amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; mapped to &lt;code&gt;:noh&lt;/code&gt; (nohighlight). This is used to remove the highlights after searching for keywords.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-themes"&gt;
  &lt;/a&gt;
  Main Themes
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;themes.vim&lt;/code&gt; file contain configurations for the color schemes and various UI-related settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;silent! colorscheme evening
silent! colorscheme badwolf

highlight CursorColumn guibg=#ecf0c1
highlight CursorLine guibg=#ecf0c1

set termguicolors
set background=dark
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you notice, I use &lt;em&gt;two&lt;/em&gt; color schemes. What's up with that?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sjl/badwolf"&gt;badwolf&lt;/a&gt; is a custom color scheme plugin. When I launch Vim for the first time on a new machine, I won't have the plugins installed yet, using &lt;code&gt;badwolf&lt;/code&gt; immediately will cause it to fail on that first Vim run. &lt;code&gt;evening&lt;/code&gt; is a built-in Vim color scheme. By putting &lt;code&gt;silent! colorscheme evening&lt;/code&gt; followed by &lt;code&gt;silent! colorscheme badwolf&lt;/code&gt;, if &lt;code&gt;badwolf&lt;/code&gt; isn't available, it will, in effect, &lt;em&gt;falls back&lt;/em&gt; to &lt;code&gt;evening&lt;/code&gt;. &lt;code&gt;silent!&lt;/code&gt; will also omit the error message (otherwise you'll see an error message when Vim couldn't find &lt;code&gt;badwolf&lt;/code&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-functions"&gt;
  &lt;/a&gt;
  Custom Functions
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;custom-functions/&lt;/code&gt; directory is where all the custom functions live. These are user-specific functions. What I need might be different from yours. But I'll go over some of mine anyway. Feel free to take them, modify them, and steal them (I stole two of them somewhere sometime ago :P).&lt;/p&gt;

&lt;p&gt;I have four custom functions. Here are some of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-functions-to-delete-buffers"&gt;
  &lt;/a&gt;
  Custom Functions to Delete Buffers
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! DeleteAllBuffers()
  let l:current_pos = getpos('.')
  execute "%bd | e# | echo 'Buffers Deleted'"
  call setpos('.', l:current_pos)
endfunc

function! DeleteMatchingBuffers(pattern)
    let l:bufferList = filter(range(1, bufnr('$')), 'buflisted(v:val)')
    let l:matchingBuffers = filter(bufferList, 'bufname(v:val) =~ a:pattern')
    if len(l:matchingBuffers) &amp;lt; 1
        echo 'No buffers found matching pattern ' . a:pattern
        return
    endif
    exec 'bd ' . join(l:matchingBuffers, ' ')
endfunction

command! -nargs=1 DelBuf call DeleteMatchingBuffers('&amp;lt;args&amp;gt;')

nnoremap &amp;lt;silent&amp;gt; &amp;lt;Leader&amp;gt;bD :call DeleteAllBuffers()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;Leader&amp;gt;bd :DelBuf&amp;lt;Space&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I won't go into how Vimscript works. If you want to learn Vimscript, check out &lt;a href="https://github.com/iggredible/Learn-Vim"&gt;my Learn Vim book&lt;/a&gt; (free to read).&lt;/p&gt;

&lt;p&gt;The main point is, I have a target-delete &lt;code&gt;&amp;lt;Leader&amp;gt;bd&lt;/code&gt; to delete a specific buffer(s) and mass-delete &lt;code&gt;&amp;lt;Leader&amp;gt;bD&lt;/code&gt; to delete all buffers except the current one. &lt;/p&gt;

&lt;p&gt;After coding for a few hours, my buffer list would usually balloon and get convoluted. I'd need to clear them up.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;&amp;lt;Leader&amp;gt;bD&lt;/code&gt;, it will indiscriminately delete all items in the buffer list (&lt;code&gt;:ls&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;&amp;lt;Leader&amp;gt;bd&lt;/code&gt;, it will ask for a pattern. Vim will delete all buffers matching the pattern. So if you have &lt;code&gt;users_controller.rb&lt;/code&gt;, &lt;code&gt;packages_controller.rb&lt;/code&gt;, &lt;code&gt;user_model.rb&lt;/code&gt;, and &lt;code&gt;package_model.rb&lt;/code&gt; and you enter "controller" as pattern, it will delete the controller buffers and keep the model buffers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-functions-to-open-url-under-cursor"&gt;
  &lt;/a&gt;
  Custom Functions to Open Url Under Cursor
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! OpenURLUnderCursor()
  let l:uri = expand('&amp;lt;cWORD&amp;gt;')
  silent exec "!open '" . l:uri . "'"
  redraw!
endfunction

nnoremap gx :call OpenURLUnderCursor()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is actually a native feature of Vim (NETRW actually - &lt;code&gt;:help netrw-gx&lt;/code&gt;). By pressing &lt;code&gt;gx&lt;/code&gt; while your cursor is inside a URL, Vim will open that document. However, in Mac, that behavior doesn't work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-functions-to-toggle-cursor-display"&gt;
  &lt;/a&gt;
  Custom Functions to Toggle Cursor Display
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! ToggleCursor()
  if(&amp;amp;cursorcolumn == 1)
    set nocursorcolumn
  elseif (&amp;amp;cursorcolumn == 0)
    set cursorcolumn
  endif

  if(&amp;amp;cursorline == 1)
    set nocursorline
  elseif (&amp;amp;cursorline == 0)
    set cursorline
  endif
endfunction

nnoremap &amp;lt;leader&amp;gt;tc :call ToggleCursor()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can toggle the horizontal cursor highlight with &lt;code&gt;:set cursorline&lt;/code&gt; / &lt;code&gt;:set nocursorline&lt;/code&gt; and the vertical cursor highlight with &lt;code&gt;:set cursorcolumn&lt;/code&gt; / &lt;code&gt;:set nocursorcolumn&lt;/code&gt;. This can be useful if you need a makeshift straight edge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-functions-to-toggle-numbers"&gt;
  &lt;/a&gt;
  Custom Functions to Toggle Numbers
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! ToggleNumber()
  if(&amp;amp;relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap &amp;lt;leader&amp;gt;tn :call ToggleNumber()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like using &lt;code&gt;relativenumber&lt;/code&gt; to see how far apart a text is from the cursor. However, there are times when I need to see the absolute line number instead. This allows me to quickly toggle the number setting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-plugins"&gt;
  &lt;/a&gt;
  Custom Plugins
&lt;/h2&gt;

&lt;p&gt;Finally, the &lt;code&gt;custom-plugins/&lt;/code&gt; section is where the settings for each plugin is.&lt;/p&gt;

&lt;p&gt;Since there are so many of them, I will only cover one or two in this article. If you're curious, feel free to check out my &lt;a href="https://github.com/iggredible/dotfiles"&gt;dotfiles repository&lt;/a&gt; and see what else I have.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;custom-plugins/&lt;/code&gt; directory, I have files named after the plugin itself (you can name them anything you want).&lt;/p&gt;

&lt;p&gt;For example, inside &lt;code&gt;ale.vim&lt;/code&gt; (ale is a linting engine for Vim):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" -------------------------
" Configs
" -------------------------

let g:ale_linters = {
      \   'javascript': ['eslint'],
      \   'ruby': ['rubocop'],
      \}

let g:ale_fixers = {
      \   'javascript': ['eslint'],
      \   'ruby': ['rubocop'],
      \}
let g:ale_linters_explicit = 1 " Only run linters named in ale_linters settings.
let g:ale_sign_column_always = 1

" -------------------------
" Keymaps
" -------------------------

nmap &amp;lt;silent&amp;gt; &amp;lt;C-k&amp;gt; &amp;lt;Plug&amp;gt;(ale_previous_wrap)
nmap &amp;lt;silent&amp;gt; &amp;lt;C-j&amp;gt; &amp;lt;Plug&amp;gt;(ale_next_wrap)

nnoremap &amp;lt;Leader&amp;gt;at :ALEToggle&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I have &lt;a href="https://github.com/iggredible/dotfiles"&gt;ale&lt;/a&gt; configured for Javascript and Ruby (using eslint and rubocop) - because I mainly work with Ruby and Javascript. Finally, I also have some keymaps related to the ale plugin.&lt;/p&gt;

&lt;p&gt;Many of the plugins that I use don't need any configurations, like &lt;code&gt;emmet-vim&lt;/code&gt;, &lt;code&gt;tcomment_vim&lt;/code&gt;, &lt;code&gt;vim-sandwich&lt;/code&gt;, etc. You'll find that you don't need as many custom-plugin files as you have plugins installed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-next"&gt;
  &lt;/a&gt;
  What Is Next?
&lt;/h2&gt;

&lt;p&gt;This concludes this article. I hope that you learned a thing or two. Make your vimrc uniquely yours. Keep improving everyday.&lt;/p&gt;

&lt;p&gt;For max usage, I strongly recommend you reading this in conjunction with my dotfiles article for a complete guide on portability.&lt;/p&gt;

&lt;p&gt;If you're still hungry for more, I suggest looking up other people's Vimrcs. Here are a few that I can think of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Some great resources to learn and steal (&lt;em&gt;cough&lt;/em&gt;) Vimrcs (and dotfiles):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/amix/vimrc"&gt;amix's vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/skwp/dotfiles"&gt;skwp's dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattjmorrison/dotfiles"&gt;mattjmorrison's dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thoughtbot/dotfiles"&gt;Thougtbot's dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/square/maximum-awesome"&gt;Square's dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mmphego/how-i-increased-my-productivity-using-dotfiles-2f4m"&gt;How I increased my productivity using dotfiles [updated]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dougblack.io/words/a-good-vimrc.html"&gt;A Good Vimrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vim</category>
      <category>vimrc</category>
      <category>editor</category>
      <category>ide</category>
    </item>
    <item>
      <title>NodeJs - Static site generator Release 0.1</title>
      <author>Minh Hang Nguyen</author>
      <pubDate>Thu, 16 Sep 2021 14:31:32 +0000</pubDate>
      <link>https://dev.to/minhhang107/nodejs-static-site-generator-release-0-1-oel</link>
      <guid>https://dev.to/minhhang107/nodejs-static-site-generator-release-0-1-oel</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C5MkyJVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01mwin4xkgghedq8fpat.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C5MkyJVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01mwin4xkgghedq8fpat.jpg" alt="mh-ssg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mhssg"&gt;
  &lt;/a&gt;
  mh-ssg
&lt;/h1&gt;

&lt;p&gt;mh-ssg is a simple static site generator that allows users to convert text files into HTML files. The tool is written in NodeJs with 4 main features. New features will be added on later. Visit the repo on &lt;a href="https://github.com/minhhang107/mh-ssg"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href="https://github.com/minhhang107/mh-ssg"&gt;repo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Redirect to project directory&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;mh-ssg&lt;/code&gt; globally with &lt;code&gt;npm i -g .&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Creates HTML files from specified file/directory&lt;/li&gt;
&lt;li&gt;Allows users to specify an output folder or use folder &lt;code&gt;dist&lt;/code&gt; as default&lt;/li&gt;
&lt;li&gt;Allows users to specify a stylesheet&lt;/li&gt;
&lt;li&gt;Detects and sets the title of the file into the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;h1&lt;/code&gt; of the HTML file (if any)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;

&lt;p&gt;To use the tool, users can specify 3 options&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#i-input"&gt;
  &lt;/a&gt;
  -i --input
&lt;/h6&gt;

&lt;p&gt;The tool accepts input as a single text file or or directory. If a directory is specified, the tool will ignore other file types and only process text files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mh-ssg -i &amp;lt;file.txt&amp;gt;
mh-ssg -i &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#o-output"&gt;
  &lt;/a&gt;
  -o --output
&lt;/h6&gt;

&lt;p&gt;Users can specify an output directory where they want to save the HTML files to. If the specified directory is not found, the tool will display an error message and will not process the input file. If no directory is given, the tool will use the default &lt;code&gt;./dist/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mh-ssg -i &amp;lt;file.txt&amp;gt; -o &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#s-stylesheet"&gt;
  &lt;/a&gt;
  -s --stylesheet
&lt;/h6&gt;

&lt;p&gt;To use a custom stylesheet, simply pass in the link to the stylesheet to stylesheet option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mh-ssg -i &amp;lt;file.txt&amp;gt; -s &amp;lt;link-to-stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mh-ssg -i file.txt -o folder -s https://cdn.jsdelivr.net/npm/water.css@2/out/water.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will convert&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#filetxt"&gt;
  &lt;/a&gt;
  ./file.txt
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Silver Blaze


I am afraid, Watson, that I shall have to go,” said Holmes, as we
sat down together to our breakfast one morning.

“Go! Where to?”

“To Dartmoor; to King’s Pyland.”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#folderfilehtml"&gt;
  &lt;/a&gt;
  ./folder/file.html
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Silver Blaze&amp;lt;/title&amp;gt;
&amp;lt;meta charset="utf-8"&amp;gt;

&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"/&amp;gt;
&amp;lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css"&amp;gt;


&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Silver Blaze&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;I am afraid, Watson, that I shall have to go,” said Holmes, as we sat down together to our breakfast one morning.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;“Go! Where to?”&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;“To Dartmoor; to King’s Pyland.”&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Enable Real-Time Merge Conflict Detection in WebStorm</title>
      <author>Fred</author>
      <pubDate>Thu, 16 Sep 2021 14:30:10 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-webstorm-59mk</link>
      <guid>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-webstorm-59mk</guid>
      <description>&lt;p&gt;Ah, the dreaded &lt;em&gt;resolve conflicts&lt;/em&gt; popup. You've finished crafting the perfect code, just a quick merge in of master (ahem, &lt;em&gt;main&lt;/em&gt;) before you submit your PR, and then... 💥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnrfzObL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105453895/YWXZ2S8AY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnrfzObL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105453895/YWXZ2S8AY.png" alt="img-1-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If only there was an early warning system for merge conflicts so you could be better prepared or even avoid the conflicts in the first place I hear you say? Well if you are a WebStorm user today is your lucky day!&lt;/p&gt;

&lt;p&gt;Firstly, you'll need to install and set up &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;GitLive&lt;/a&gt;. Then if you right click the gutter on WebStorm, you will see the option to “Show Other's Changes”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7SvJwkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105494603/8m0GvqeVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7SvJwkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105494603/8m0GvqeVw.png" alt="img-2-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be disabled if the file open in the editor is not from git or there are no other changes to it from contributors working on other branches (aka you are safe from conflicts). If it's enabled there will be one or more change indicators in the gutter of the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhIL0-RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109508311/p5BwXJ3fc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhIL0-RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109508311/p5BwXJ3fc.png" alt="img-3.3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These will show you where your teammates have made changes compared to your version of the file and even update in real-time as you and your teammates are editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szMZgrkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105477371/nVpMNFsi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szMZgrkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105477371/nVpMNFsi2.png" alt="key indicators-dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've made a conflicting change you will see the bright red conflict indicator. These conflicts can be uncommitted local changes you have not pushed yet or existing changes on your branch that conflict with your teammates’ changes.&lt;/p&gt;

&lt;p&gt;Click your teammate’s icon in the gutter to see the diff between your version and theirs, the branch the offending changes are from, and the issue connected to that branch if there is one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VpTCcUgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109501287/HjovOjeE8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VpTCcUgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109501287/HjovOjeE8.png" alt="img-5.3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this popup you can also cherry-pick your teammate’s change directly from their local version of the file. For simple conflicts this can be a quick way to resolve them as identical changes on different branches will merge cleanly.&lt;/p&gt;

&lt;p&gt;Unfortunately, it's not always possible to resolve a conflict straight away but with the early warning, you'll be better prepared, avoiding any nasty surprises at merge time!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://blog.git.live/gitlive-11.0-Real-time-merge-conflict-detection"&gt;this blog post&lt;/a&gt; or the &lt;a href="https://docs.git.live/docs/mergeconflicts/"&gt;GitLive docs&lt;/a&gt; if you want to learn more.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>git</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Notion receiver data Immunizations from Nodejs</title>
      <author>Thinh Nguyen</author>
      <pubDate>Thu, 16 Sep 2021 14:17:42 +0000</pubDate>
      <link>https://dev.to/qt91/notion-receiver-data-immunizations-from-nodejs-4e07</link>
      <guid>https://dev.to/qt91/notion-receiver-data-immunizations-from-nodejs-4e07</guid>
      <description>&lt;p&gt;Today we will learning send data to Notion by API&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-new-project"&gt;
  &lt;/a&gt;
  Setup new project
&lt;/h2&gt;

&lt;p&gt;At here I use "Express application generator" for fastest setup new project&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;p&gt;1/ Install express-generator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; express-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2/ New project with name &lt;strong&gt;InjectionRegistrationNotion&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;express &lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="nt"&gt;--view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ejs&lt;span class="k"&gt;**&lt;/span&gt; &lt;span class="k"&gt;**&lt;/span&gt;InjectionRegistrationNotion&lt;span class="k"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8D56G1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8km73cbb62dr4281zxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8D56G1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8km73cbb62dr4281zxe.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;InjectionRegistrationNotion
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAyRNawZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izmbw7s3zgda5hbyalcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAyRNawZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izmbw7s3zgda5hbyalcy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3/ Start server and get ready for write code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start // &lt;span class="k"&gt;for &lt;/span&gt;start server this project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access to localhost:3000&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYKOqRYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zonqcjzl7da702g6xitm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYKOqRYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zonqcjzl7da702g6xitm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Everything ready for next step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-make-a-form-injection-registration"&gt;
  &lt;/a&gt;
  Let's make a Form Injection Registration
&lt;/h2&gt;

&lt;p&gt;For write User Interface, I used &lt;strong&gt;ejs engine&lt;/strong&gt; because it friendly with HTML native&lt;/p&gt;

&lt;p&gt;Let's make a Form Injection Registration&lt;/p&gt;

&lt;p&gt;At file &lt;strong&gt;index.jes&lt;/strong&gt; in &lt;strong&gt;views&lt;/strong&gt; folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;title&amp;gt;&amp;lt;%&lt;span class="o"&gt;=&lt;/span&gt; title %&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://use.fontawesome.com/releases/v5.5.0/css/all.css"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"./stylesheets/style.css"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"testbox"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;form &lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"post"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"banner"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;h1&amp;gt;&amp;lt;%&lt;span class="o"&gt;=&lt;/span&gt; title %&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Name&amp;lt;/p&amp;gt;
      &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"name-item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;/&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Email&amp;lt;/p&amp;gt;
      &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Phone&amp;lt;/p&amp;gt;
      &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"phone"&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Address&amp;lt;/p&amp;gt;
      &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"address"&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"question"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Gender&amp;lt;/p&amp;gt;
      &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"question-answer"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;div&amp;gt;
          &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_2"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sex"&lt;/span&gt;/&amp;gt;
          &amp;lt;label &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_2"&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;span&amp;gt;Female&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_1"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sex"&lt;/span&gt;/&amp;gt;
          &amp;lt;label &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_1"&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;span&amp;gt;Male&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Note&amp;lt;/p&amp;gt;
      &amp;lt;textarea &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"note"&lt;/span&gt; &lt;span class="nv"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"btn-block"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;button &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"submit"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;Send&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At file "public/stylesheets/style.css"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;html, body &lt;span class="o"&gt;{&lt;/span&gt;
    min-height: 100%&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

body, div, form, input, &lt;span class="k"&gt;select&lt;/span&gt;, textarea, p &lt;span class="o"&gt;{&lt;/span&gt;
    padding: 0&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 0&lt;span class="p"&gt;;&lt;/span&gt;
    outline: none&lt;span class="p"&gt;;&lt;/span&gt;
    font-family: Roboto, Arial, sans-serif&lt;span class="p"&gt;;&lt;/span&gt;
    font-size: 14px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#666;&lt;/span&gt;
    line-height: 22px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

h1 &lt;span class="o"&gt;{&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 0&lt;span class="p"&gt;;&lt;/span&gt;
    font-size: 36px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#fff;&lt;/span&gt;
    z-index: 2&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.testbox &lt;span class="o"&gt;{&lt;/span&gt;
    display: flex&lt;span class="p"&gt;;&lt;/span&gt;
    justify-content: center&lt;span class="p"&gt;;&lt;/span&gt;
    align-items: center&lt;span class="p"&gt;;&lt;/span&gt;
    height: inherit&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 20px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

form &lt;span class="o"&gt;{&lt;/span&gt;
    width: 100%&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 20px&lt;span class="p"&gt;;&lt;/span&gt;
    border-radius: 6px&lt;span class="p"&gt;;&lt;/span&gt;
    background: &lt;span class="c"&gt;#fff;&lt;/span&gt;
    box-shadow: 0 0 20px 0 &lt;span class="c"&gt;#333;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.banner &lt;span class="o"&gt;{&lt;/span&gt;
    position: relative&lt;span class="p"&gt;;&lt;/span&gt;
    height: 210px&lt;span class="p"&gt;;&lt;/span&gt;
    background-size: cover&lt;span class="p"&gt;;&lt;/span&gt;
    display: flex&lt;span class="p"&gt;;&lt;/span&gt;
    justify-content: center&lt;span class="p"&gt;;&lt;/span&gt;
    align-items: center&lt;span class="p"&gt;;&lt;/span&gt;
    text-align: center&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.banner::after &lt;span class="o"&gt;{&lt;/span&gt;
    content: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    background-color: rgba&lt;span class="o"&gt;(&lt;/span&gt;0, 0, 0, 0.4&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    width: 100%&lt;span class="p"&gt;;&lt;/span&gt;
    height: 100%&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input, textarea, &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    margin-bottom: 10px&lt;span class="p"&gt;;&lt;/span&gt;
    border: 1px solid &lt;span class="c"&gt;#ccc;&lt;/span&gt;
    border-radius: 3px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input &lt;span class="o"&gt;{&lt;/span&gt;
    width: calc&lt;span class="o"&gt;(&lt;/span&gt;100% - 10px&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 5px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    width: 100%&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 7px 0&lt;span class="p"&gt;;&lt;/span&gt;
    background: transparent&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

textarea &lt;span class="o"&gt;{&lt;/span&gt;
    width: calc&lt;span class="o"&gt;(&lt;/span&gt;100% - 12px&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 5px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item:hover p, .item:hover i, .question:hover p, .question label:hover, input:hover::placeholder &lt;span class="o"&gt;{&lt;/span&gt;
    color: &lt;span class="c"&gt;#333;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item input:hover, .item &lt;span class="k"&gt;select&lt;/span&gt;:hover, .item textarea:hover &lt;span class="o"&gt;{&lt;/span&gt;
    border: 1px solid transparent&lt;span class="p"&gt;;&lt;/span&gt;
    box-shadow: 0 0 6px 0 &lt;span class="c"&gt;#333;&lt;/span&gt;
    color: &lt;span class="c"&gt;#333;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item &lt;span class="o"&gt;{&lt;/span&gt;
    position: relative&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 10px 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-inner-spin-button &lt;span class="o"&gt;{&lt;/span&gt;
    display: none&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item i, input[type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-calendar-picker-indicator &lt;span class="o"&gt;{&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    font-size: 20px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#a9a9a9;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item i &lt;span class="o"&gt;{&lt;/span&gt;
    right: 1%&lt;span class="p"&gt;;&lt;/span&gt;
    top: 30px&lt;span class="p"&gt;;&lt;/span&gt;
    z-index: 1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-calendar-picker-indicator &lt;span class="o"&gt;{&lt;/span&gt;
    right: 0&lt;span class="p"&gt;;&lt;/span&gt;
    z-index: 2&lt;span class="p"&gt;;&lt;/span&gt;
    opacity: 0&lt;span class="p"&gt;;&lt;/span&gt;
    cursor: pointer&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"time"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-inner-spin-button &lt;span class="o"&gt;{&lt;/span&gt;
    margin: 2px 22px 0 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;radio], input.other &lt;span class="o"&gt;{&lt;/span&gt;
    display: none&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

label.radio &lt;span class="o"&gt;{&lt;/span&gt;
    position: relative&lt;span class="p"&gt;;&lt;/span&gt;
    display: inline-block&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 5px 20px 10px 0&lt;span class="p"&gt;;&lt;/span&gt;
    cursor: pointer&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.question span &lt;span class="o"&gt;{&lt;/span&gt;
    margin-left: 30px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

label.radio:before &lt;span class="o"&gt;{&lt;/span&gt;
    content: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    top: 2px&lt;span class="p"&gt;;&lt;/span&gt;
    left: 0&lt;span class="p"&gt;;&lt;/span&gt;
    width: 15px&lt;span class="p"&gt;;&lt;/span&gt;
    height: 15px&lt;span class="p"&gt;;&lt;/span&gt;
    border-radius: 50%&lt;span class="p"&gt;;&lt;/span&gt;
    border: 2px solid &lt;span class="c"&gt;#ccc;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;#radio_5:checked ~ input.other {&lt;/span&gt;
    display: block&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;radio]:checked + label.radio:before &lt;span class="o"&gt;{&lt;/span&gt;
    border: 2px solid &lt;span class="c"&gt;#444;&lt;/span&gt;
    background: &lt;span class="c"&gt;#444;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

label.radio:after &lt;span class="o"&gt;{&lt;/span&gt;
    content: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    top: 7px&lt;span class="p"&gt;;&lt;/span&gt;
    left: 5px&lt;span class="p"&gt;;&lt;/span&gt;
    width: 7px&lt;span class="p"&gt;;&lt;/span&gt;
    height: 4px&lt;span class="p"&gt;;&lt;/span&gt;
    border: 3px solid &lt;span class="c"&gt;#fff;&lt;/span&gt;
    border-top: none&lt;span class="p"&gt;;&lt;/span&gt;
    border-right: none&lt;span class="p"&gt;;&lt;/span&gt;
    transform: rotate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-45deg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    opacity: 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;radio]:checked + label:after &lt;span class="o"&gt;{&lt;/span&gt;
    opacity: 1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.btn-block &lt;span class="o"&gt;{&lt;/span&gt;
    margin-top: 10px&lt;span class="p"&gt;;&lt;/span&gt;
    text-align: center&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

button &lt;span class="o"&gt;{&lt;/span&gt;
    width: 150px&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 10px&lt;span class="p"&gt;;&lt;/span&gt;
    border: none&lt;span class="p"&gt;;&lt;/span&gt;
    border-radius: 5px&lt;span class="p"&gt;;&lt;/span&gt;
    background: &lt;span class="c"&gt;#444;&lt;/span&gt;
    font-size: 16px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#fff;&lt;/span&gt;
    cursor: pointer&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

button:hover &lt;span class="o"&gt;{&lt;/span&gt;
    background: &lt;span class="c"&gt;#666;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, We can check UI will be update in browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6yRvHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3u6tu0d25rvy36fppb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6yRvHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3u6tu0d25rvy36fppb0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-server-side-with-api-notion"&gt;
  &lt;/a&gt;
  Process Server Side With API Notion
&lt;/h2&gt;

&lt;p&gt;Because this is a small example. So I will write all code in "routes/index.js" for everyone easy follow&lt;/p&gt;

&lt;p&gt;We need to make a new router for handle when Form submit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;router.post&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;, async &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;req, res, next&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
//To be get parameter before Form submit and send data to server. We can use
const &lt;span class="o"&gt;{&lt;/span&gt;name, email, phone, address, sex, note&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; req.body&lt;span class="p"&gt;;&lt;/span&gt;
//Just &lt;span class="k"&gt;for &lt;/span&gt;debug
console.table&lt;span class="o"&gt;({&lt;/span&gt;name, email, phone, address, sex, note&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
//Redirect to form when before submit
res.redirect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check data before submit&lt;/p&gt;

&lt;p&gt;In web&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iRRGEyp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws2jlv3pqdmzwbmma3a3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRRGEyp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws2jlv3pqdmzwbmma3a3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terminal be for click to "button Send"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXr_MkPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd0ezqrwrxfhihtraz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXr_MkPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd0ezqrwrxfhihtraz4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have done for get data from Form submit to Server, The next step we will send this data to Notion&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-data-to-notion-by-api"&gt;
  &lt;/a&gt;
  Send data to Notion by API
&lt;/h2&gt;

&lt;p&gt;First step we can install package "&lt;a href="https://www.npmjs.com/package/@notionhq/client"&gt;@notionhq/client&lt;/a&gt;"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @notionhq/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OngZqkuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz1qha49v8uxnal4ky3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OngZqkuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz1qha49v8uxnal4ky3e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Register to use the package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//Required package
const &lt;span class="o"&gt;{&lt;/span&gt;Client&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@notionhq/client"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
//Setup config
const notion &lt;span class="o"&gt;=&lt;/span&gt; new Client&lt;span class="o"&gt;({&lt;/span&gt;
    auth: process.env.NOTION_TOKEN,
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send data to Notion by API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;await notion.pages.create&lt;span class="o"&gt;({&lt;/span&gt;
        parent: &lt;span class="o"&gt;{&lt;/span&gt;
            database_id: process.env.NOTION_DATABASE_ID,
        &lt;span class="o"&gt;}&lt;/span&gt;,
        properties: &lt;span class="o"&gt;{&lt;/span&gt;
            Name: &lt;span class="o"&gt;{&lt;/span&gt;
                title: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: name,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Email: &lt;span class="o"&gt;{&lt;/span&gt;
                email: email,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            PhoneNumber: &lt;span class="o"&gt;{&lt;/span&gt;
                rich_text: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: phone,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Address: &lt;span class="o"&gt;{&lt;/span&gt;
                rich_text: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: address,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Gender: &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;select&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                    name: gender
                &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Note: &lt;span class="o"&gt;{&lt;/span&gt;
                rich_text: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: note,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setup file .env&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;NOTION_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;secret_heBrP3242423424322iHM8UzmjnALYvJ4WoeLA
&lt;span class="nv"&gt;NOTION_DATABASE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ccfe5824942343224aa20ec85e1c2f7e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We wrote the code&lt;/p&gt;

&lt;p&gt;Access to link &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and fill data click button "Send"&lt;/p&gt;

&lt;p&gt;Result &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMw9WNuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dfuy5llo6tnddo9x86x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMw9WNuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dfuy5llo6tnddo9x86x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-repository"&gt;
  &lt;/a&gt;
  Git repository
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/qt91/InjectionRegistrationNotion"&gt;https://github.com/qt91/InjectionRegistrationNotion&lt;/a&gt;&lt;/p&gt;

</description>
      <category>notion</category>
      <category>node</category>
      <category>express</category>
      <category>api</category>
    </item>
    <item>
      <title>GetX: A Superior State Management in Flutter</title>
      <author>Hashan Gunathilaka</author>
      <pubDate>Thu, 16 Sep 2021 13:39:17 +0000</pubDate>
      <link>https://dev.to/gunathilakahashan10/getx-a-superior-state-management-in-flutter-4jcl</link>
      <guid>https://dev.to/gunathilakahashan10/getx-a-superior-state-management-in-flutter-4jcl</guid>
      <description>&lt;p&gt;Flutter is without a doubt the best framework for developing cross-platform applications. Application development with Flutter is truly awesome and easy because it provides a rich set of customizable widgets. However, some state management options won't allow you to feel the true power of the flutter framework, since you have to waste your development time to implement unnecessary boilerplate. When I started to learn the Bloc pattern, I was confused by the bloc concepts. It was difficult to understand. On the other hand, the provider is easy to understand, but we have to be very careful when avoiding the unnecessary rebuilds. Since It directly affects your application's performance. However, all the state management options have their pros and cons.&lt;/p&gt;

&lt;p&gt;GetX has a different philosophy. It wants to manage your application state in a simple and well organized fashion while improving performance. So let’s see how GetX has achieved it.&lt;/p&gt;

&lt;p&gt;In the article, I will discuss,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why is GetX so special?&lt;/li&gt;
&lt;li&gt;State management using GetX&lt;/li&gt;
&lt;li&gt;GetxController&lt;/li&gt;
&lt;li&gt;The Reactive State Manager in GetX&lt;/li&gt;
&lt;li&gt;The Simple State Manager in GetX&lt;/li&gt;
&lt;li&gt;MixinBuilder : Mix your both state managers&lt;/li&gt;
&lt;li&gt;StateMixin&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-is-getx-so-special"&gt;
  &lt;/a&gt;
  Why is GetX so special?
&lt;/h2&gt;

&lt;p&gt;GetX is more than just a state management library. It is, in fact, a small flutter framework capable of handling route management and dependency injection in flutter applications. But in this article, I will only discuss its state management capabilities. &lt;br&gt;
GetX is a very lightweight and powerful state management solution for flutter. So why is GetX so superior?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High performance:&lt;/strong&gt; GetX uses fewer resources as possible. It does not depend on Streams or ChangeNotifier. Instead, it uses low latency GetValue and GetStream to improve performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Less code:&lt;/strong&gt; You may be tired of implementing boilerplate in the bloc pattern and waste development time on unnecessary codes. Time is money, right? In GetX, you are not going to write any boilerplate. You can achieve the same thing much faster, with less code in GetX. No need to create classes for the state and event, since these boilerplates do not exist in GetX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No code generation:&lt;/strong&gt; There is no need to use code generators at all. So your valuable development time is not going to waste any more on running code generators(build_runner) every single time when you change your code. cool right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't worry about context:&lt;/strong&gt; Your application context is very important. But sending the context from your view to the controller can be, sometimes cumbersome. In GetX, you don't need to do this. You can access controllers within another controller without any context. cool right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No unnecessary rebuilds:&lt;/strong&gt; Unwanted rebuilds are a problem of state managers based on ChangeNotifier. When you make a change in your ChangeNotifier class, all widgets that depend on that ChangeNotifier class are rebuilt. Some rebuilds may be unnecessary and costly.  It may also reduce the application's performance as well. You don't have to worry about this in GetX since it does not use the ChangeNotifier at all. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code organization is simple:&lt;/strong&gt;  Bloc's popularity comes from its superior code organizing capabilities. It makes it easier to separate your business logic from the presentation layer. GetX is a natural evolution for this as official documentation says. In GetX, you can separate not just the business logic but also the presentation layer. Powerful right?&lt;/p&gt;

&lt;p&gt;So, what do you think about GetX? Can I say superior for it? I think I can.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#state-management-using-getx"&gt;
  &lt;/a&gt;
  State management using GetX
&lt;/h2&gt;

&lt;p&gt;GetX provides two kinds of state managers: The reactive state manager and the simple state manager. If you have used Bloc before, then you should have some experience in reactive programming. In GetX, you can have far more superior and easier reactive experience, unlike Bloc. The simple state manager is just like using setState in StatefulWidget, but in a cleaner way. Before discussing these two state managers, it is essential to know about &lt;code&gt;GetxController&lt;/code&gt; in GetX.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getxcontroller"&gt;
  &lt;/a&gt;
  GetxController
&lt;/h2&gt;

&lt;p&gt;Your controllers contain all of your business logic. GetX has an important class called &lt;code&gt;GetxController&lt;/code&gt;. It is useful to enable reactive and simple state manager functionality in your controllers. All you have to do is to extend your controllers from GetxController. &lt;/p&gt;

&lt;p&gt;Let's take a simple example from your shopping app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ProductController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;GetxController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your state variables&lt;/span&gt;
    &lt;span class="c1"&gt;// your methods&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can completely remove StatefulWidget by using GetxController. Since GetxController has &lt;code&gt;onInit()&lt;/code&gt; and &lt;code&gt;onClose()&lt;/code&gt; methods. So you can replace &lt;code&gt;initState()&lt;/code&gt; and &lt;code&gt;dispose()&lt;/code&gt; methods in StatefulWidget. Pretty clever  right? When your controller is created in memory, the onInit() method is called immediately, and the onClose() method is called when it is removed from memory.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;onReady()&lt;/code&gt; method in GetxController. The onReady() method will be called soon after the widget has been rendered on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

     &lt;span class="nd"&gt;@override&lt;/span&gt; 
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onInit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// Here you can fetch you product from server&lt;/span&gt;
       &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onInit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@override&lt;/span&gt; 
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onReady&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onReady&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@override&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
          &lt;span class="c1"&gt;// Here, you can dispose your StreamControllers&lt;/span&gt;
          &lt;span class="c1"&gt;// you can cancel timers&lt;/span&gt;
          &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to the &lt;code&gt;DisposableInterface&lt;/code&gt;, GetxController can dispose of your controllers from memory on its own. So you don't need to dispose of anything  manually anymore. GetxContoller will take care of it for you.  As a result, it will help to reduce the memory consumption and improve the application performance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-reactive-state-manager-in-getx"&gt;
  &lt;/a&gt;
  The Reactive State Manager in GetX
&lt;/h2&gt;

&lt;p&gt;The reactive state manager implements reactive programming in an easier and cleaner way. You may have used StreamContollers and StreamBuilder in your reactive programming approaches. But in GetX, you won't need to create such things. Furthermore, unlike Bloc, there is no need to create separate classes for each state. You can remove these boilerplates and do the same thing with just a few lines of code using Getx.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-reactive-variables"&gt;
  &lt;/a&gt;
  Create Reactive Variables
&lt;/h3&gt;

&lt;p&gt;In the Reactive approach of GetX, first you need to create observable variables(reactive variables). In simple terms, your widgets can watch changes of your variables. And widgets can update their UI according to these changes in variables. There are three different ways to create reactive variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Attaching Rx to variable type,&lt;/strong&gt; &lt;code&gt;Rx{Type}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RxInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// You can add 0 as the initial value&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Using Rx and Dart Generics,&lt;/strong&gt; &lt;code&gt;Rx&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rx&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// You can add 0 as the initial value&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Adding &lt;code&gt;.obs&lt;/code&gt; to the end&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Simple right, You can use any approach you like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-getx-endraw-and-raw-obx-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;GetX&lt;/code&gt;  and &lt;code&gt;Obx&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;GetX&lt;/code&gt; or &lt;code&gt;Obx&lt;/code&gt; to listen to changes of your reactive variables from your widgets. &lt;br&gt;
&lt;code&gt;GetX&amp;lt;Controller&amp;gt;&lt;/code&gt; is just like StreamBuilder, but without a boilerplate.&lt;br&gt;
&lt;code&gt;Obx&lt;/code&gt; is much more simple than GetX. You just have to wrap your widget from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using GetX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GetX&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;init:&lt;/span&gt; &lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
         &lt;span class="s"&gt;'Counter is &lt;/span&gt;&lt;span class="si"&gt;${controller.counter.value}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using Obx:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Obx&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'Counter is &lt;/span&gt;&lt;span class="si"&gt;${controller.counter.value}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to use the &lt;code&gt;value&lt;/code&gt; property in the reactive variable when accessing its value, like &lt;code&gt;controller.counter.value&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CounterController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;


     &lt;span class="nd"&gt;@override&lt;/span&gt;
     &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
             &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Obx&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                      &lt;span class="s"&gt;'Counter is &lt;/span&gt;&lt;span class="si"&gt;${controller.counter.value}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                    &lt;span class="o"&gt;),&lt;/span&gt;
                    &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
           &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using the Obx, you can take advantage of GetX dependency injection. The &lt;code&gt;Put&lt;/code&gt; method in GetX is used to manage your dependencies in your flutter project. And it will help you to use the same controller instance across all your child routes. After getting your CounterController instance into your widget, you can use it as the controller for the Obx.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-simple-state-manager-in-getx"&gt;
  &lt;/a&gt;
  The Simple State Manager in GetX
&lt;/h2&gt;

&lt;p&gt;The Simple state manager uses extremely low resources, since it does not use Streams or ChangeNotifier. But your widgets can listen to changes of your state, thanks to the &lt;code&gt;update()&lt;/code&gt; method. After doing some changes to your state in your controller, you have to call the update method  to notify the widgets, which are listening to the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
       &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Tell your widgets that you have changed the counter&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see, we have to simply declare the state variable as we normally do. Unlike reactive variables, you don't need to transform your state variables into something else (In reactive approach we need to declare reactive variables using .obs). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getbuilder"&gt;
  &lt;/a&gt;
  GetBuilder
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;GetBuilder&lt;/code&gt; widget will update your view based on your state changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GetBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;init:&lt;/span&gt; &lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
             &lt;span class="s"&gt;'Counter: &lt;/span&gt;&lt;span class="si"&gt;${controller.counter.value}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;),&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use a controller for the first time in your GetBuilder, then you have to initialize it first. After that you don't have to start the same controller again in another GetBuilder. Because all GetBuilders that depend on the same controller will share the same controller instance across your application. This is how the simple state manager consumes extremely less memory. In simple terms, if 100 GetBuilders use the same controller, they will share the same controller instance. There won't be 100 instances for the same controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;incrementCounter1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;counter1&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;incrementCounter2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;counter2&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GetBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;init:&lt;/span&gt; &lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="cm"&gt;/* initialize CounterController if you use 
                                     it first time in your views */&lt;/span&gt;
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Counter 1: &lt;/span&gt;&lt;span class="si"&gt;${controller.counter1.value}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
       &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;



   &lt;span class="cm"&gt;/* No need to initialize CounterController again here, since it is 
      already initialized in the previous GetBuilder */&lt;/span&gt;
&lt;span class="n"&gt;GetBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;                            
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Counter 2: &lt;/span&gt;&lt;span class="si"&gt;${controller.counter2.value}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
       &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use GetBuilder, you no longer need to use StatefulWidgets in your application. You can handle your ephemeral state(UI state) in a cleaner and easy way using GetBuilder than SetState.  In simple terms, you can make your class as StatelessWidget and update the specific components by only wrapping them in GetBuilder. That's all. You don't need to waste your resources by making the whole class as a StatefulWidget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mixinbuilder-mix-your-both-state-managers"&gt;
  &lt;/a&gt;
  MixinBuilder : Mix your both state managers
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;MixinBuilder&lt;/code&gt; mixes the both state managers. So you can use both &lt;code&gt;Obx&lt;/code&gt; and &lt;code&gt;GetBuilder&lt;/code&gt; together. But keep it mind, MixinBuilder consumes more resources than the other two approaches. If you really care about your application performance, try to use the MixinBuilder as little as possible. The use cases of MixinBuilder, on the other hand, are rare.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// For reactive approach&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// For simple state management approach&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;incrementCounter1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

   &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;incrementCounter2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;counter2&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
       &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;MixinBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;init:&lt;/span&gt; &lt;span class="n"&gt;CounterController&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
       &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
           &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Counter 1: &lt;/span&gt;&lt;span class="si"&gt;${controller.counter1.value}&lt;/span&gt;&lt;span class="s"&gt;), 
                         // For reactive approach

           Text('&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;counter2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;') 
                       // For simple state management approach
        ]
    ),
),
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#statemixin"&gt;
  &lt;/a&gt;
  StateMixin
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;StateMixin&lt;/code&gt; to handle your UI state in a more efficient and clean way, when you perform asynchronous tasks.&lt;br&gt;
Let's say your application is going to fetch some products from a cloud server. So this asynchronous task will take a certain amount of time to complete. So your application status and the state will be changed according to the response of your asynchronous task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading status :&lt;/strong&gt; Until you get the response, you have to wait.&lt;br&gt;
&lt;strong&gt;Success status :&lt;/strong&gt; You get the expected response.&lt;br&gt;
&lt;strong&gt;Error status :&lt;/strong&gt; Some errors can be happened when performing the asynchronous task&lt;/p&gt;

&lt;p&gt;These are the main status of your application when performing an asynchronous task. So the StateMixin helps to update your UI according to these status and state changes.&lt;/p&gt;

&lt;p&gt;You have to simply add StateMixin to your controller using &lt;code&gt;with&lt;/code&gt; keyword. You should also specify the type of state to be handled by the StateMixin, such as &lt;code&gt;StateMixin&amp;lt;List&amp;lt;Product&amp;gt;&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;StateMixin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also &lt;code&gt;RxStatus&lt;/code&gt; class provides defined status to use with the StateMixin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'error message'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The StateMixin provides the &lt;code&gt;Change()&lt;/code&gt; method and it changes the State according to our asynchronous task response. You have to just pass the new state and the status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newState&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;status:&lt;/span&gt; &lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GetxController&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;StateMixin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@override&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onInit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fetchProducts&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onInit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fetchProducts&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// You can  fetch products from remote server&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;fetchProductsFromRemoteServer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; 

        &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
           &lt;span class="c1"&gt;//..&lt;/span&gt;
              &lt;span class="c1"&gt;// Successfully fetched products data&lt;/span&gt;
          &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;status:&lt;/span&gt; &lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;     

          &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// Error occurred while fetching data&lt;/span&gt;
          &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;status:&lt;/span&gt; &lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Something went wrong'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; 

          &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// No products data&lt;/span&gt;
          &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;status:&lt;/span&gt; &lt;span class="n"&gt;RxStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, after getting a successful response with data, I have changed the state by passing the response &lt;code&gt;data&lt;/code&gt; and the &lt;code&gt;RxStatus.success&lt;/code&gt; to the change() method. Likewise I have changed the state according to error response and empty response data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductsPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;


    &lt;span class="c1"&gt;// Get a ProductController instance&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ProductController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProductController&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;


    &lt;span class="nd"&gt;@override&lt;/span&gt; 
    &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;// app bar&lt;/span&gt;

            &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obx&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;

                &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productsState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ShowProductList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productsState&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;

            &lt;span class="nl"&gt;onLoading:&lt;/span&gt; &lt;span class="n"&gt;CustomLoadingIndicator&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;

            &lt;span class="nl"&gt;onEmpty:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'No products available'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;

            &lt;span class="nl"&gt;onError:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;

            &lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;controller.obx()&lt;/code&gt; widget will change your UI according to the changes of the status and the state. &lt;br&gt;
When an asynchronous task starts (fetching products from the server), the &lt;code&gt;obx&lt;/code&gt; widget will show the default loading indicator. You can also set the &lt;code&gt;CustomLoadingIndicator()&lt;/code&gt; to the &lt;code&gt;onLoading&lt;/code&gt; property. &lt;br&gt;
After successfully fetching data, the &lt;code&gt;obx&lt;/code&gt; widget will render the data to the UI using the &lt;code&gt;ShowProductList()&lt;/code&gt; custom widget. &lt;br&gt;
If something goes wrong, by default &lt;code&gt;obx&lt;/code&gt; widget will render a Text widget to show the error. And also you can provide the custom error widget to the &lt;code&gt;onError&lt;/code&gt; property. (Note that the &lt;code&gt;controller.obx()&lt;/code&gt; widget in here is completely different from what you have learned in reactive &lt;code&gt;Obx()&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you use GetX in your next project, you will realize how awesome it is. The primary goal of this article is to provide a quick overview of GetX.  The top priority of the GetX is to improve your application performance while managing the state in a simple and well organized way. &lt;/p&gt;

&lt;p&gt;You can read more about Getx from &lt;a href="https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>mobileappdev</category>
      <category>statemangement</category>
    </item>
    <item>
      <title>Handling Forms in ReactJS the right way</title>
      <author>Abhishek Agrawal</author>
      <pubDate>Thu, 16 Sep 2021 13:37:36 +0000</pubDate>
      <link>https://dev.to/fazer1929/handling-forms-in-reactjs-the-right-way-3glp</link>
      <guid>https://dev.to/fazer1929/handling-forms-in-reactjs-the-right-way-3glp</guid>
      <description>&lt;p&gt;Hello everyone, recently I came across a new way to handle React forms, maybe its something you know, maybe you've been doing this for years and think I am an Idiot for not knowing this earlier, but it is what it is so let's go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-react-forms-the-old-way"&gt;
  &lt;/a&gt;
  Using react forms the old way
&lt;/h2&gt;

&lt;p&gt;Let's consider a simple signup form that contains only 3 fields namely username, email, and password. Here's how I used to use forms earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleEmailChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleUsernameChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleUsernameChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleEmailChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe you think wtf is this guy and why is the code is so bad. There's only one thing I can say to you, &lt;strong&gt;sorry&lt;/strong&gt;. To the other people who think there's nothing wrong with the code, prepare to get your mind blown.&lt;/p&gt;

&lt;p&gt;Let's look at the problems with the code first- &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Its a lot of state variables for handling a form, especially if you think about bigger forms with 10s of fields.&lt;/li&gt;
&lt;li&gt;The handleChange functions are totally redundant and can be easily refactored.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, now let's look at the amazing code to handle forms -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newFormData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFormData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleUsernameChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleEmailChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beautiful code, Right? Well, when I found it I thought it was amazing and worth sharing.&lt;br&gt;
But before you leave, &lt;strong&gt;make sure that the &lt;code&gt;formData&lt;/code&gt;'s keys are same as the input's &lt;code&gt;name&lt;/code&gt;, else you're code won't work properly&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;That's pretty much it.&lt;br&gt;
Thank you for reading. Bye &lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>forms</category>
    </item>
    <item>
      <title>Introduction to typescript with React</title>
      <author>Antoine Muller</author>
      <pubDate>Thu, 16 Sep 2021 13:30:28 +0000</pubDate>
      <link>https://dev.to/towaanu/introduction-to-typescript-with-react-57m7</link>
      <guid>https://dev.to/towaanu/introduction-to-typescript-with-react-57m7</guid>
      <description>&lt;p&gt;In this article, I would like to share with you how I use typescript to improve my react code.&lt;br&gt;
First we are going to see what is typescript and why it is used ?&lt;br&gt;
Then, how we can use typescript with react ( components, hooks, extern libs ).&lt;br&gt;
Finally, I will sum up what is the pros and cons using typescript in a react app .&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typescript-"&gt;
  &lt;/a&gt;
  Typescript ?
&lt;/h2&gt;

&lt;p&gt;A common critic about javascript is that javascript is untyped. It means that you can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Here we substract a number to a string&lt;/span&gt;
    &lt;span class="c1"&gt;// Javascript does not warn us even if we try to substract a number to a string&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hello&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see javascript is very permissive which can lead to unexpected behaviors and bugs.&lt;br&gt;
Another recurrent critic is that, we don't know fields of objects in javascript.&lt;br&gt;
Sometime we get an object and we are not sure what is the structure of this object.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eikichi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Onizuka&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// user.name does not exist.&lt;/span&gt;
&lt;span class="c1"&gt;// Javascript is unable to tell us field name does not exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These 2 samples can potentially provide error at runtime. It would be great to have hints before trying the code about potential error like ones above.&lt;br&gt;
Typescript tries to address those issues by adding types to javascript.&lt;br&gt;
Typescript is a programming language. By adding types, typescript is able to give some hints before running the code.&lt;br&gt;
Typescript is not executed in the browser directly, typescript is first transformed into javascript code.&lt;br&gt;
In the end, only javascript is executed in the browser when using typescript.&lt;/p&gt;

&lt;p&gt;Now, let's see how we can use typescript alongside React ! &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;I am going to use some code sample from a basic todo list app using react and typescript.&lt;br&gt;
In the app, we can add todo and toggle todo to make them done. &lt;br&gt;
Todos will have 3 fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id: a &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;universally unique identifier&lt;/a&gt; (uuid)&lt;/li&gt;
&lt;li&gt;label: label of the todo&lt;/li&gt;
&lt;li&gt;isDone: a boolean, true if todo is done
Here is an example of the app:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project is created using &lt;a href="https://create-react-app.dev/"&gt;create react app&lt;/a&gt;.&lt;br&gt;
Create react app provides a template using react and typescript to get started quickly.&lt;br&gt;
The goal of the project is to provide some react/typescript example in a little project. Styling is not important.&lt;br&gt;
You can find the code of the project &lt;a href="https://github.com/towaanu/typescript-react-todo-example"&gt;here&lt;/a&gt;.&lt;br&gt;
Here is a screenshot of the todos app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhniY0f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yox2h7xhp9sjvbdegt7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhniY0f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yox2h7xhp9sjvbdegt7d.png" alt="todos preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-with-typescript"&gt;
  &lt;/a&gt;
  React with Typescript
&lt;/h2&gt;

&lt;p&gt;In this part we will see how we can use typescript with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;components&lt;/li&gt;
&lt;li&gt;hooks&lt;/li&gt;
&lt;li&gt;external libs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#shared-types"&gt;
  &lt;/a&gt;
  Shared types
&lt;/h3&gt;

&lt;p&gt;Usually, there are types you need in several parts of your application. For example, a Todo type might be used in several components.&lt;br&gt;
I define these types in a &lt;em&gt;types.ts&lt;/em&gt; file at the root of the project. This way, we can access shared types easily across the app.&lt;br&gt;
To define types, we use the &lt;code&gt;interface&lt;/code&gt; keyword in typescript. Let's analyze how it's done in the todo app!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#todo-app"&gt;
  &lt;/a&gt;
  Todo app
&lt;/h3&gt;

&lt;p&gt;As I said in the previous section todos have the following fields : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id: uuid. A &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;uuid&lt;/a&gt; is a 128 bit number. &lt;/li&gt;
&lt;li&gt;label: The label corresponding to the todo. This is represented as a &lt;strong&gt;string&lt;/strong&gt; in our app.&lt;/li&gt;
&lt;li&gt;isDone: A &lt;strong&gt;boolean&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how we can define the Todo type to use it later in our react app.&lt;br&gt;
As I said before, all shared types are in the &lt;a href="https://github.com/towaanu"&gt;types.ts&lt;/a&gt; file.&lt;br&gt;
Here is a sample of types.ts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We named this new type &lt;code&gt;Todo&lt;/code&gt;.&lt;br&gt;
Finaly we assign fields with their respective types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id : string, uuid will be represented as a string (example: "123e4567-e89b-12d3-a456-426614174000")&lt;/li&gt;
&lt;li&gt;label: string, the label will be represented as a string (example: "Cook")&lt;/li&gt;
&lt;li&gt;isDone: boolean (example: true)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great ! We have our Todo interface. We can now use it in the code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123e4567-e89b-12d3-a456-426614174000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can specify the type of a variable using &lt;code&gt;:&lt;/code&gt; in typescript.&lt;br&gt;
If we try to access or to add a non present field, typescript will display an error.&lt;/p&gt;

&lt;p&gt;We also need a NewTodo type. This type will be used to add a new todo in the list.&lt;br&gt;
It is the same type as the Todo above except it does not have an id yet.&lt;br&gt;
Here is the code behind in &lt;code&gt;types.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;NewTodo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use our todos types inside components.&lt;br&gt;
Let's see how we can organize our components! &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-components"&gt;
  &lt;/a&gt;
  React components
&lt;/h2&gt;

&lt;p&gt;In React components, I like to define a Props interface before declaring the component. &lt;br&gt;
This Props interface contains every property of the component.&lt;/p&gt;

&lt;p&gt;In my opinion, here are the pros of writing the Props interface : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces us to think about what properties our component needs&lt;/li&gt;
&lt;li&gt;If you open the file, you can quickly find out the parameters of the component ( you don't have to look at the component code to know what parameters it can take ) &lt;/li&gt;
&lt;li&gt;When we use the component in our App, typescript can warn us if we pass wrong parameters to our component. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see a concrete example from the todo app!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#todo-app"&gt;
  &lt;/a&gt;
  Todo app
&lt;/h3&gt;

&lt;p&gt;We are going to analyze the TodosList component. Its role is to display a list of todos.&lt;br&gt;
It takes 2 parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;todos: This is the list of todos that will be displayed.&lt;/li&gt;
&lt;li&gt;onTodoClick: A callback called when a todo is clicked. This callback takes a todo as a parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how we can define this React component with typescript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// import the Todo type&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./TodoItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// TodoItem is the component used to display one todo on the screen&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * We define our Props type
 * It is used to define the props our TodosList will take in parameter
 */&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * The TodosList component.
 * We are using our Props type to tell typescript "This component uses the Props type for its parameter".
 * This way, when we use our component, typescript is able to tell you if we try to use a non existing property. 
 * Or if we try to give a bad type to a props.
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodosList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* 
     * Now we can use todos and the onTodoClick
     * if we try to write : `todos.foo`, typescript can tell us that an array of todos has no "foo" property
     * Same things apply to onTodoClick. If we try to call onTodoClick like this : onTodoClick(10)
     * Typescript is able to say "10 is not a todo, onTodoClick takes a todo as a parameter not a number"
     */&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoItem&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onTodoClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TodosList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: You can notice we have added a "?" to onTodoClick. It means that onTodoClick is optional.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's see what happens now if we try to use our component in another file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Typescript warns us, because hello does not exist as a parameter for our TodosList */&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodosList&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; 

&lt;span class="cm"&gt;/* Typescript warns us, because badTodos are missing id and label. */&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;badTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodosList&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;badTodos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, typescript can help us avoid bugs before running the code.&lt;br&gt;
You can find another example of a component in the &lt;a href="https://github.com/towaanu/typescript-react-todo-example/blob/main/src/TodoItem.tsx"&gt;TodoItem.tsx&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;Now let's see how we can use typescript with hooks!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;There is several hooks. I will focus on useState for this article.&lt;br&gt;
&lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;The useState hook&lt;/a&gt; enables us to keep a state in our component.&lt;br&gt;
With typescript we can define what state we want to store with useState.&lt;br&gt;
Typescript will then use this information to prevent us from setting a state with a wrong type.&lt;br&gt;
Let's see an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
 * Typescript now knows that num is a number and setNum takes a number as a parameter.
 * Typescript will warn us if we try to call setNum("a"), for example.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example in the todo App!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-app"&gt;
  &lt;/a&gt;
  Todo app
&lt;/h2&gt;

&lt;p&gt;In the todo app, we need the &lt;code&gt;useState&lt;/code&gt; hook to manage todos.&lt;/p&gt;

&lt;p&gt;Let's see the &lt;a href="https://github.com/towaanu/typescript-react-todo-example/blob/main/src/App.tsx"&gt;App.tsx&lt;/a&gt; code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NewTodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TodosList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./TodosList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./AddTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="cm"&gt;/*
   * With useState&amp;lt;Todo[]&amp;gt;, typescript knows: 
   * - todos is an Array of todos 
   * - setTodos takes an array of todos as parameter
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cleaning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cooking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NewTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
     * If we try to pass a non todos array, typescript will tell us
     */&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Since useState is typed, typescript knows that we are passing a todos array in TodosList */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodosList&lt;/span&gt; &lt;span class="na"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleTodo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddTodo&lt;/span&gt; &lt;span class="na"&gt;onNewTodoSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since useState is typed, typescript makes sure, we are not using todos and setTodos wrongfully. &lt;/p&gt;

&lt;p&gt;Notice that we use an external library ( &lt;a href="https://github.com/uuidjs/uuid"&gt;uuid&lt;/a&gt; ) for generating todo ids.&lt;br&gt;
By default typescript does not know the v4 function returns a string.&lt;br&gt;
Let's see how we can help typescript understand external libraries !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#external-libraries"&gt;
  &lt;/a&gt;
  External libraries
&lt;/h2&gt;

&lt;p&gt;For external libraries, there are usually 3 scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The library is written in typescript. When this is the case, most of the time we just need to &lt;code&gt;npm install&lt;/code&gt; the library and we have types. It is the best case scenario.&lt;/li&gt;
&lt;li&gt;The library does not ship directly with types. By default typescript does not know any types about the library. However, most of the time there is types written alongside the project. Usually, we can install those types using &lt;code&gt;npm install @types/[LIB_NAME]&lt;/code&gt;. This is the case for react.For example, there is a &lt;code&gt;@types/react&lt;/code&gt; package to add types with react.&lt;/li&gt;
&lt;li&gt;The library is not written with typescript and there is no types. This is the worst case scenario. You have to either write types yourself or use the &lt;code&gt;any&lt;/code&gt; types in typescript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: As typescript is getting more and more popular, most of the time you will find types when using external libraries&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-app"&gt;
  &lt;/a&gt;
  Todo app
&lt;/h2&gt;

&lt;p&gt;Let's get back to the &lt;a href="https://github.com/uuidjs/uuid"&gt;uuid&lt;/a&gt; package. uuid package is not written in typescript.&lt;br&gt;
However, there is a &lt;code&gt;@types/uuid&lt;/code&gt; package for it. The package is installed using &lt;code&gt;npm install --save-dev @types/uuid&lt;/code&gt;.&lt;br&gt;
This way when we assign an uuid to a todo's id, typescript knows, we are assigning a string to id.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In my opinion, here are the pros and cons of using typescript with react.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By writing types when we writing components it forces us to think a more about our components and how it should be used&lt;/li&gt;
&lt;li&gt;If you have a compatible editor, typescript can give you error and autocompletion when you write code (even in JSX !)&lt;/li&gt;
&lt;li&gt;When you use or open a component file, you can see easily its parameters. You don't have to ask yourself "what is the name of this property, or if this property takes a string or a number"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt; : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It makes the code a bit more verbose. Since we need to specify types.&lt;/li&gt;
&lt;li&gt;It adds some complexity to build the project. We now need to transform typescript to javascript before running the apps. Hopefully tools like &lt;a href="https://create-react-app.dev/"&gt;cra&lt;/a&gt; provide a ready to use react/typescript template&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I said, you can find the code of the todo app in &lt;a href="https://github.com/towaanu/typescript-react-todo-example/"&gt;this repo&lt;/a&gt;.&lt;br&gt;
I hope you like this little introduction to typescript with react! :) &lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Meet The Tanukis: Michael Friedrich</title>
      <author>Pj Metz</author>
      <pubDate>Thu, 16 Sep 2021 13:24:05 +0000</pubDate>
      <link>https://dev.to/metzinaround/meet-the-tanukis-michael-friedrich-3dkj</link>
      <guid>https://dev.to/metzinaround/meet-the-tanukis-michael-friedrich-3dkj</guid>
      <description>&lt;p&gt;Meet the Tanukis is a stream about the amazing Team members at GitLab. Each episode focuses on a team member discussing issues in tech that are important to them. This episode features Michael Friedrich, Senior Developer Evangelist&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/388JTsYAh9g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Links: &lt;br&gt;
&lt;a href="https://everyonecancontribute.com/"&gt;Everyone can Contribute Cafe!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.google.com/presentation/d/1ydGggxiD7U1UcwVdr2Rz3ERl0UU19wsAeRmct5tcUN0/edit?usp=sharing"&gt;Michael's presentation at 55:04&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.google.com/presentation/d/1HnciJEQ8dDiHMaq1APg5WXA4mvcYQd9fdtvHicf-JyU/edit#slide=id.gdb238ed7ab_1_1"&gt;Michael's OSS journey&lt;/a&gt;&lt;br&gt;
&lt;a href="https://about.gitlab.com/blog/2021/07/19/teams-gitpod-integration-gitlab-speed-up-development/"&gt;GitPod&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://about.gitlab.com/solutions/education/join"&gt;Free Licenses for Education/Research Institutions!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>community</category>
      <category>gitlab</category>
      <category>techtalks</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
