<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Doctoring your application configuration</title>
      <author>/dev/dull/alastair</author>
      <pubDate>Sat, 01 Jan 2022 02:15:00 +0000</pubDate>
      <link>https://dev.to/dev_dull/doctoring-your-application-configuration-31f</link>
      <guid>https://dev.to/dev_dull/doctoring-your-application-configuration-31f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#opinion-code-for-configuration-handling-is-ugly"&gt;
  &lt;/a&gt;
  Opinion: Code for configuration handling is ugly
&lt;/h2&gt;

&lt;p&gt;If you've ever written a statement that looks something like &lt;code&gt;my_setting = config.value if config.value else some_default&lt;/code&gt; and hated it, then I expect we can agree that handling application configuration is a miserable thing to code for. Its boring to write, ugly to read, and annoying to ensure that all user configuration options have sane default values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clIyUXmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17p2cpia2j16hao3cnw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clIyUXmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17p2cpia2j16hao3cnw.gif" alt="Oscar the Grouch - I'll be miserable here in my trash can" width="640" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;argparse&lt;/code&gt; library can go a long way to making things better, but if you need to set dozens of options, or if your application supports plugins with configuration requirements unknown to the main program, it becomes harder to simply &lt;code&gt;add_argument&lt;/code&gt; our way back to sanity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYKzaszq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9kj8qn2yxout70uujl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYKzaszq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9kj8qn2yxout70uujl.gif" alt="Mad scientist (black and white) - We'll see if I'm crazy or not!" width="640" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In these cases, it makes more sense to opt for a configuration file. Also, it would be nice if our application code didn't care about the configuration file at all, where we had a single source of truth to count on being correct.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-classy"&gt;
  &lt;/a&gt;
  Getting Classy
&lt;/h2&gt;

&lt;p&gt;When I've hit the point in my development process where I have the basic functionality working and I've settled on the basics of how the program will flow, I like to create a new python file &lt;code&gt;constfig.py&lt;/code&gt; and define the class &lt;code&gt;_C&lt;/code&gt; where the 'C' stands for both "constants" and "config" (🎶 and that's good enough for me. Both config and constants start with C 🎶). By convention, I lead the with an underscore to signal to the other developers on the project that the class isn't intended to be implemented directly, and at the end of the file I create an instance of &lt;code&gt;_C()&lt;/code&gt; called &lt;code&gt;C&lt;/code&gt; which can be imported and will contain all the information needed by the application.&lt;/p&gt;

&lt;p&gt;For example, let's implement a simple dice rolling API endpoint using Flask which returns a JSON formatted string. For this type of application we would want to be able to easily configure the IP address and port that the service listens on, so let's define our &lt;code&gt;_C&lt;/code&gt; class, establish the variable names, pre-populate the variables with some reasonable default values, and then create an instance of our class named &lt;code&gt;C&lt;/code&gt; which the user is meant to import from our file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have certain values which will never change at runtime, but if our specification changes later, we don't want to have to hunt down all instances of that value in our code, so let's also add our constant values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_roll'&lt;/span&gt;

        &lt;span class="c1"&gt;# User configurable values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our constant values and our configurable variables with sane defaults, let's import &lt;code&gt;C&lt;/code&gt; (the instance of &lt;code&gt;_C&lt;/code&gt;) into our main Flask application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;constfig&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="c1"&gt;# Our constants + config = constfig
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/rolld6'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;roll_d6&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now give it a quick run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"roll"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
INFO:werkzeug: &lt;span class="k"&gt;*&lt;/span&gt; Running on http://0.0.0.0:8080/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and test to make sure all looks good so far.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; localhost:8080/rolld6 | python3 &lt;span class="nt"&gt;-m&lt;/span&gt; json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"d6_value"&lt;/span&gt;: 3
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#operate-on-your-raw-self-endraw-"&gt;
  &lt;/a&gt;
  🧑‍⚕️ Operate on your &lt;code&gt;self&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have our application and our &lt;code&gt;_C&lt;/code&gt; class, we're ready for it to poke at its own guts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqKyG-jC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09jhssp7r21n4woz0izi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqKyG-jC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09jhssp7r21n4woz0izi.gif" alt="Characters from the TV show Scrubs in an operating room. One of them is asking what is going on" width="466" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add the function &lt;code&gt;load_config&lt;/code&gt; which will open up our configuration file &lt;code&gt;config.yaml&lt;/code&gt;, and then use the &lt;code&gt;setattr&lt;/code&gt; function to update our own values at startup (when Python runs &lt;code&gt;from constfig import C&lt;/code&gt;). Python's ability to alter its own state is knows as "reflection" or "reflective programming".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values - and a "gotcha!"
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_roll'&lt;/span&gt;

        &lt;span class="c1"&gt;# User configurable values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

        &lt;span class="c1"&gt;# Load user config (override defaults above)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'config.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;config_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SafeLoader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Don't handle badly formatted YAML. Let the parser inform the user of the error.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScannerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The file config.yaml should be structured as type dict, but got type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Configuration file config.yaml is missing. Using default values.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now create our &lt;code&gt;config.yaml&lt;/code&gt; file containing key:value pairs where the key matches the name of our configuration items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's fire up the service again...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"roll"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:32000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and this time we see that the default values have been overridden by those in the configuration file. Specifically, we're now listening on the loopback IP, and that our port number has changed as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotta-catch-that-gotcha"&gt;
  &lt;/a&gt;
  Gotta' catch that "gotcha!"
&lt;/h2&gt;

&lt;p&gt;The problem with this method is that we open ourselves up to having the configuration file change values that should not be changed. For example, if we set &lt;code&gt;JSON_RESPONSE_KEYWORD_D6ROLL: this is bad&lt;/code&gt; in &lt;code&gt;config.yaml&lt;/code&gt; then make a request to our endpoint, we see that we've indirectly altered our application's response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; http://127.0.0.1:32000/rolld6 | python3 &lt;span class="nt"&gt;-m&lt;/span&gt; json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"this is bad"&lt;/span&gt;: 4
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QeRbZlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbn0etfi9pgpegsvi0aj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QeRbZlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbn0etfi9pgpegsvi0aj.gif" alt="American Psycho - I know my behavior can be erratic sometimes" width="500" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the fix here isn't hard, this bad behavior underscores the importance of the order in which we set out values. Let's move our constant values to where they are being set &lt;em&gt;after&lt;/em&gt; the values in our configuration file by adding a &lt;code&gt;finally&lt;/code&gt; clause to our try/except block on &lt;code&gt;load_config()&lt;/code&gt; and call our new method &lt;code&gt;set_constants()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# User configurable values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

        &lt;span class="c1"&gt;# Load user config (override defaults above)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_value'&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'config.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;config_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SafeLoader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Don't handle badly formatted YAML. Let the parser inform the user of the error.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScannerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The file config.yaml should be structured as type dict, but got type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Configuration file config.yaml is missing. Using default values.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...then launch again using our "bad" (which tries to set &lt;code&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/code&gt;) configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"roll"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:32000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and of course test the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; http://127.0.0.1:32000/rolld6 | python3 &lt;span class="nt"&gt;-m&lt;/span&gt; json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"d6_value"&lt;/span&gt;: 5
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada! A single source of truth for your Python application!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7vpcng7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1ray01bjhblp10j7grl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7vpcng7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1ray01bjhblp10j7grl.gif" alt="The Yellow Ranger from the 90s TV show Power Rangers does a dance move and then a yellow explosion happens in the background (...and frankly, it looks like she farted). I have probably accidentally spent an hour of my life watching this gif while editing this post" width="400" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-hate-this-but-i-need-validation"&gt;
  &lt;/a&gt;
  You hate this, but I need validation
&lt;/h2&gt;

&lt;p&gt;Yes, I hear you bemoan, "I've got a children's song about cookies stuck in my head, I'm half way through a pack of Oreos, and this seems like an abstraction that makes it harder to see how the configuration is loaded."&lt;/p&gt;

&lt;p&gt;Yeah, this solution is probably not for everyone, but I've hidden the superpower of this method behind a mild mannered alter-ego.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WoLXBJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ife9ar06iqdh8oryrb4p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WoLXBJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ife9ar06iqdh8oryrb4p.gif" alt="Actor Christopher Reeve playing Clark Kent takes off his glasses, only to realize that he might be giving himself away as Superman" width="640" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real power is automatic validation of your configuration simply by importing &lt;code&gt;C&lt;/code&gt;. To do this, let's define the function &lt;code&gt;validate_config()&lt;/code&gt;, write some basic assertions to validate the configuration, and then call the function after we have successfully loaded the yaml file and set the constant values in our class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Default values for user configurable items
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

        &lt;span class="c1"&gt;# Load user config (override defaults above)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_value'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'config.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;config_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SafeLoader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Don't handle badly formatted YAML. Let the parser inform the user of the error.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScannerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The file config.yaml should be structured as type dict, but got type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Configuration file config.yaml is missing. Using default values.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Validate our config file
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Validate LISTEN_IP
&lt;/span&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP is not a string value'&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP has an unexpected number of octets'&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnumeric&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;

        &lt;span class="c1"&gt;# Validate LISTEN_PORT
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnumeric&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_PORT must be a whole number.'&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_PORT is outside expected range.'&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and just as an example, let's put a deliberate typo in our configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1x&lt;/span&gt;  &lt;span class="c1"&gt;# My fingers are fat :-(&lt;/span&gt;
&lt;span class="na"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, have a couple of opportunities to validate our configuration.&lt;/p&gt;

&lt;p&gt;For example, at runtime...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"roll.py"&lt;/span&gt;, line 1, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    from constfig import C  &lt;span class="c"&gt;# Our constants + config = constfig&lt;/span&gt;
  File &lt;span class="s2"&gt;"/Users/adrong/PycharmProjects/constfig/constfig.py"&lt;/span&gt;, line 33, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    validate_config&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;"/Users/adrong/PycharmProjects/constfig/constfig.py"&lt;/span&gt;, line 14, &lt;span class="k"&gt;in &lt;/span&gt;validate_config
    assert all&lt;span class="o"&gt;([&lt;/span&gt;a.isnumeric&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;a &lt;span class="k"&gt;in &lt;/span&gt;C.LISTEN_IP.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;, &lt;span class="s1"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;
AssertionError: LISTEN_IP is not a valid IP address.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or run &lt;code&gt;constfig.py&lt;/code&gt; directly to validate your configuration in your test or deployment pipelines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 constfig.py 
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"constfig.py"&lt;/span&gt;, line 33, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    validate_config&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;"constfig.py"&lt;/span&gt;, line 14, &lt;span class="k"&gt;in &lt;/span&gt;validate_config
    assert all&lt;span class="o"&gt;([&lt;/span&gt;a.isnumeric&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;a &lt;span class="k"&gt;in &lt;/span&gt;C.LISTEN_IP.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;, &lt;span class="s1"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;
AssertionError: LISTEN_IP is not a valid IP address.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#small-but-mighty"&gt;
  &lt;/a&gt;
  Small, but mighty
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGR0eE3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q02hnor9agpbcqvdb3il.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGR0eE3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q02hnor9agpbcqvdb3il.gif" alt="The cartoon character Mighty Mouse eating a hole into a wheel of cheese, crawling into it, then eating it so fast it becomes a whirlwind that transforms into the hero mouse" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a relatively small amount of code that, with some tweaks, can source configuration from a database, from environment variables, from command line arguments, and can have validation code that can reconcile configuration from any combination of those sources. This pattern for handling configuration has enabled me to quickly create configuration handling in a standardized way, across multiple tools , that members of other teams have found approachable and easy to manage.&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>React Js roadmap - 2022</title>
      <author>Samuel Lucas</author>
      <pubDate>Sat, 01 Jan 2022 01:55:34 +0000</pubDate>
      <link>https://dev.to/sam_lukaa/react-js-roadmap-2022-4p96</link>
      <guid>https://dev.to/sam_lukaa/react-js-roadmap-2022-4p96</guid>
      <description>&lt;p&gt;It's so exhausting trying to figure out where to start or head to while learning something, something like React Js, so much tutorials(videos and PDFs) out there but where exactly is the starting point and what are the things needed to learn so that I can be very good at React Js?&lt;/p&gt;

&lt;p&gt;Hello 👋, I'm Lucas and I'll be walking you through the React Js roadmap for 2022 - here you'll know so what you should learn to become a real react developer, and what you need to apply for the next job.&lt;/p&gt;

&lt;p&gt;The best way to become a pro in this profession is by constantly keeping yourself up-to-date by reading docs of whatever technology you wish to learn. Take for example, if I were to post a tutorial on React, in the next few months it will be outdated because a newer version would be out and surely better, but then the docs would be updated. That's why you should learn to read docs first.&lt;/p&gt;

&lt;p&gt;To develop yourself in React Js, you need certain level of knowledge in JavaScript itself. Let's see what you should know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Data Types(objects &amp;amp; arrays)&lt;/li&gt;
&lt;li&gt;Dom manipulation&lt;/li&gt;
&lt;li&gt;Asynchronous&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Knowing these I can assure you success on your journey to learning React Js.&lt;/p&gt;

&lt;p&gt;One of the best places to learn all these from is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you're expected to know as a React Js developer are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Props&lt;/li&gt;
&lt;li&gt;States&lt;/li&gt;
&lt;li&gt;Inspecting/developer's tools&lt;/li&gt;
&lt;li&gt;Hooks(useState, useEffect, useContext...)&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Styling UI (chakra UI, tailwind...)&lt;/li&gt;
&lt;li&gt;Testing(jest...)&lt;/li&gt;
&lt;li&gt;API consumption (a good &lt;a href="https://www.robinwieruch.de/react-hooks-fetch-data/"&gt;recommendation&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A very good place to learn is from the &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ensure you add every of your project to github.&lt;/p&gt;

&lt;p&gt;Some cool projects you can work on are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Weather app (teaches you to fetch api)&lt;/li&gt;
&lt;li&gt;To-do app(teaches you how to pass props and other things)&lt;/li&gt;
&lt;li&gt;E-commerce(teaches you to fetch api and use stores - such as redux. Instead of writing the backend, simply use &lt;a href="https://commercejs.com/"&gt;Commerce Js&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While doing all these, don't be afraid of applying for jobs. Do not be afraid. Follow good resumẹ́ template. No matter how many times you get turned down, &lt;strong&gt;DO NOT GIVE UP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't be afraid to take on projects(not free, but paid). Why should I take paid projects/contract offers? The moment you collect part payment upon accepting the project, you'll know you've got to just finish it. But if it's unpaid, you might never complete or do it as supposed.&lt;/p&gt;

&lt;p&gt;Talking about projects, how do you start building one? Consider this: I'm a react js developer but projects always seem complex to me, how do I go about with that? &lt;/p&gt;

&lt;p&gt;The most important thing is this; no matter how small or huge the project is, always break it down into components. Example, let's create our very own Facebook.&lt;/p&gt;

&lt;p&gt;What are the features you'll ask? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;View posts&lt;/li&gt;
&lt;li&gt;Create post&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's assume this is all what it does.&lt;/p&gt;

&lt;p&gt;Knowing this info already, all you need to do is very simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a component that fetches (GET) from the API and display the results.&lt;/li&gt;
&lt;li&gt;Create a component that sends (POST) via API - within that component, you'll have input button for the post and send button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Building with react is very easy if you learn to break things down into components&lt;/p&gt;

&lt;p&gt;Quickly, take this test. Break Twitter home page into components and comment your answer.&lt;/p&gt;

&lt;p&gt;If this post really does help, kindly leave a like and share. Thanks.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Software Design</title>
      <author>jptkao</author>
      <pubDate>Sat, 01 Jan 2022 00:39:55 +0000</pubDate>
      <link>https://dev.to/jptkao/software-design-2i83</link>
      <guid>https://dev.to/jptkao/software-design-2i83</guid>
      <description>&lt;p&gt;What’s a certain constant about technology ? &lt;/p&gt;

&lt;p&gt;It is CHANGES! A lot of them. Those changes keep changing our lives, sometimes slowly sometimes fast, blazing fast. (Respond to change)&lt;/p&gt;

&lt;p&gt;Imagine the lovers of bread and butter before the glorious arrival of the toaster, with their little pans heat up one side them the other, all that time spent. Suddenly one day technology comes and gives them the perfect equal heated sides on a toast. What a beauty, life has finally meaning!&lt;/p&gt;

&lt;p&gt;Our designs are always being influenced by new frameworks, new libraries, new requisites. We’re always learning all those new things that seem to never end. If there existed some constant on our designs other than new things to learn life would be easier.&lt;/p&gt;

&lt;p&gt;I’m starting a series of single page articles to create a common ground for people interested in software design study what can always be used while coding. &lt;/p&gt;

&lt;p&gt;We start discussing a set of ideas used to avoid code that slows us down. The goal is to respond to change instead of adding unnecessary complexity on our designs. Those concepts are everywhere so why bother to read it here ?&lt;/p&gt;

&lt;p&gt;My main objective is that we can always remember those ideas in a structured and hierarchically organized matter. And as soon as knew ideas appear the articles are going to be improved. For this I’m counting on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual representation of the ideias.&lt;/li&gt;
&lt;li&gt;Repo with every version of the articles.&lt;/li&gt;
&lt;li&gt;Code exemples for each main idea.&lt;/li&gt;
&lt;li&gt;Engagement of the readers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As developers we want to move deliberately instead of rushing aimlessly, following good disciplines that have proven efficient short and long term. Make each side of the toast perfectly crunchy.&lt;/p&gt;

&lt;p&gt;The first series is about Object Oriented Programming and the SOLID principles. &lt;/p&gt;

&lt;p&gt;Finally a visual representation to organize our studies.&lt;br&gt;
In the next post, we're going to discuss &lt;a href=""&gt;the "Pillars" of OOP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb5r40_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwjeux59f553p0git5yl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb5r40_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwjeux59f553p0git5yl.png" alt="OOP and SOLID Principles" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Post on the &lt;a href="https://github.com/jptkao/Blog_posts/blob/main/Software_Design/OO/Openning_Software_Design.md"&gt;repo&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>agile</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Lessons Learned from Advent of Code (in JavaScript and Haskell)</title>
      <author>Caleb Weeks</author>
      <pubDate>Fri, 31 Dec 2021 23:10:32 +0000</pubDate>
      <link>https://dev.to/sethcalebweeks/lessons-learned-from-aoc-2021-2b3b</link>
      <guid>https://dev.to/sethcalebweeks/lessons-learned-from-aoc-2021-2b3b</guid>
      <description>&lt;p&gt;This year, I tried doing &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; for the first time. My goal was to write code solutions in Haskell and JavaScript with more or less equivalent implementations. I have been learning functional programming academically for five or six years, so Advent of Code gave me an opportunity to practice what I have been learning. Unfortunately, things didn't go exactly as planned, so here are some of the lessons I learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#lesson-1"&gt;Don't rush learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-2"&gt;Just start somewhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-3"&gt;Functional programming has different flavors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-4"&gt;Functional programming in JavaScript is meh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-5"&gt;Use the strengths of the language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dont-rush-learning"&gt;
  &lt;/a&gt;
  Don't rush learning &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The first two days of Advent of Code went according to plan. I came up with relatively concise solutions in Haskell that translated to idiomatic JavaScript, then wrote blog posts summarizing my approach. Day three took me significantly longer to solve, and I was spending too much time coding and writing at the neglect of my family. I took a break for a couple weeks before finally solving day four.&lt;/p&gt;

&lt;p&gt;Although I have spent a lot of time learning functional programming from an academic perspective, putting it into practice with real problems required more deliberation. I am certainly not going to give up, but I recognize that forcing myself to solve a problem each day with a difficulty growth rate that was larger than my learning growth rate was unhealthy. My plan is to continue practicing Haskell using &lt;a href="https://exercism.org/"&gt;Exercism&lt;/a&gt;, which makes learning pretty much any language an exciting journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#just-start-somewhere"&gt;
  &lt;/a&gt;
  Just start somewhere &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Part of the reason that I hadn't started programming in Haskell earlier was that I was unsure about what it would take to get started. I was amazed at how easy it was to install the necessary tooling. The &lt;a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell"&gt;VSCode Extension&lt;/a&gt; that I installed enables inline code evaluation using a certain comment syntax that made it really easy to test small parts of my code. Truthfully, I avoided any IO or other side effect producing code in Haskell and just focused on the data processing and algorithmic sections of the problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functional-programming-has-different-flavors"&gt;
  &lt;/a&gt;
  Functional programming has different flavors &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;My definition of functional programming has been shaped by my studies on category theory, particularly through the writings and videos of &lt;a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Bartosz Milewski&lt;/a&gt; and others. I enjoyed learning about monoids, functors, monads, algebraic data types, typeclasses, currying, and more. Haskell has been the quintessential functional programming language in my view, and if a language claimed to support functional programming, there were certain features that it needed to have.&lt;/p&gt;

&lt;p&gt;JavaScript in particular supports many of the features I considered to be essential to functional programming. ES6 arrow functions make writing curried and higher order functions a breeze. But for many programmers, the lack of algebraic data types, persistent data structures, or pattern matching disqualify JavaScript as a real functional programming language.&lt;/p&gt;

&lt;p&gt;I recently started learning Elixir, and it has many amazing features I would want in a language. All data structures are immutable, there are no statements only expressions, and there is both literal and structural pattern matching. Unfortunately, currying is very difficult to write idiomatically, and the dearly loved pipe operator passes data as the first parameter to a function instead of the last (both resulting from the dynamic type system combined with the support of pattern matching).&lt;/p&gt;

&lt;p&gt;I think the essence of functional programming can be summarized as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discouraged use of mutability&lt;/li&gt;
&lt;li&gt;Encouraged use of higher order functions&lt;/li&gt;
&lt;li&gt;Support for composition of effects and data
More on this topic in the near future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#functional-programming-in-javascript-is-meh"&gt;
  &lt;/a&gt;
  Functional programming in JavaScript is meh &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have been a huge proponent of functional programming in JavaScript. As seen throughout this series, the Haskell solutions can almost always be translated into decent looking JavaScript code. But as some have pointed out, the lack of certain features such as persistent data structures or tail call optimization makes it impossible to implement many real world applications. Using something like &lt;a href="https://immutable-js.com/"&gt;ImmutableJS&lt;/a&gt; would probably help, but replacing every single data structure with something from a library is objectionable.&lt;/p&gt;

&lt;p&gt;If you are stuck writing JavaScript, I would still encourage the functional programming approach, but you'll have to watch out for certain strategies that just won't work because the language does not support them. (By the way, TypeScript does not solve any of these issues and makes some of them worse.) Elitist functional programmers would disallow the use of chainable/fluent code, but I personally think that is the best approach to writing clean code in JavaScript. I certainly wouldn't go out of my way to implement method chains for every object in my code, but any library that adheres to the &lt;a href="https://github.com/fantasyland/fantasy-land"&gt;Fantasy Land spec&lt;/a&gt; (including &lt;a href="https://ramdajs.com/"&gt;Ramda&lt;/a&gt;) already provides some great chainable methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-strengths-of-the-language"&gt;
  &lt;/a&gt;
  Use the strengths of the language &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As already mentioned in the previous section, a certain flavor of functional programming can be quite elegant in JavaScript. The simplicity of the object model makes it very convenient to organize and operate on data. Dynamic typing and type coercion allows you to take certain shortcuts (unless you are trying to sort a list of numbers...). Use the strengths of whatever language you are using to your advantage. It is good to push the boundaries of the language to create new things. For example, &lt;a href="https://styled-components.com/"&gt;styled components&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/graphql-request"&gt;GraphQL&lt;/a&gt; have normalized the use of tagged template literals for domain specific languages (DSLs). But in general, you'll have a much better time working with the grain of the language than against it.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>javascript</category>
      <category>haskell</category>
    </item>
    <item>
      <title>React Local State and Redux State (Without Hooks)</title>
      <author>Katie Hodgkinson</author>
      <pubDate>Fri, 31 Dec 2021 23:10:27 +0000</pubDate>
      <link>https://dev.to/chdev/react-local-state-and-redux-state-without-hooks-25f2</link>
      <guid>https://dev.to/chdev/react-local-state-and-redux-state-without-hooks-25f2</guid>
      <description>&lt;p&gt;I was recently tasked with adding a feature to an existing original application. The application, however, largely uses a Redux store for state management. So, given the nature of the feature that was added, here's how I used local state in a Redux-managed application:&lt;/p&gt;

&lt;p&gt;The project is a basic savings calculator that logs transactions (both deposits and withdraws) and tallies the total amount saved at all times. Each transaction is associated with a goal, or reason for allocating the funds. The app also contains a search page, among other attributes. &lt;/p&gt;

&lt;p&gt;Through use of React Router, I have all of the transactions logged displayed under the "Transaction History" page, a.k.a. the route "/transactions" in the url. The task given to me was to add a button to this page that would sort the transactions by amount when clicked, and when clicked again, re-displays the transaction list as it originally appeared. &lt;/p&gt;

&lt;p&gt;Like I mentioned, the app's state is being managed by a Redux store, with the exception of a controlled form for adding a transaction, which uses local state. I knew that adding this button should also be something that has its own local state because the list being displayed is directly dependent on whether or not the button has been clicked to sort. In other words, the local state being used only in the button is what determines the list being rendered in the browser. So, I added this short declaration of local state inside of a component that is also tied to state being managed by the Redux store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;state = {
      sorted: false
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we have a baseline for the state to use in the context of this sort button.&lt;/p&gt;

&lt;p&gt;Now of course it's important we actually have a button to work with, so I set the button up as follows (again, within the context of a larger component):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onClick={() =&amp;gt; this.setState({sorted: !this.state.sorted})}&amp;gt;Click to Sort&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I'm allowing the button to be toggled, by clicking, to change the value of "sorted" from state from "true" to "false" and display the data accordingly. &lt;/p&gt;

&lt;p&gt;Further, I then implemented a ternary statement testing the condition of state in order to know what should be rendered. The ternary basically states that if the value of "sorted" from state is equal to "false," the data should display as it normally does. However, on the inverse, when the button is clicked, the local state is set opposite and the data is displayed, sorted by amount from least to greatest. Here is what the ternary looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{this.state.sorted ? sortedTransactions.map(t =&amp;gt; &amp;lt;TransactionCard key={t.id} {...t} /&amp;gt; )  : this.props.transactions.map(t =&amp;gt; &amp;lt;TransactionCard key={t.id} {...t} /&amp;gt; )}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using the return value of sortedTransactions if the value of "sorted" is true, whereas otherwise I am pulling the transactions from the Redux store by way of both the connect() function and mapStateToProps and displaying them as they do by default. Here is what the sortedTransactions variable looks like, for reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sortedTransactions = [...this.props.transactions].sort((a, b) =&amp;gt; (a.amount - b.amount))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these steps I was able to successfully implement the sort button and complete the task, which strengthened my confidence in mixing local state with Redux state in a React application. It also never hurts to brush up on using the sort() function, in fact I had to read up on the documentation for the function while completing this feature to figure out how to sort the data in the way I was being asked, which was from lowest amount to greatest. &lt;/p&gt;

&lt;p&gt;It was also with this project in general that I realized how local and Redux state can be mixed in an application. What I've deduced, is that deciding whether or not to use Redux versus local state can sometimes come down to just preference or importance/weight of the feature, among plenty of other things. &lt;/p&gt;

&lt;p&gt;Here are the links to both the front end repository as well as the Rails back end repository:&lt;br&gt;
&lt;a href="https://github.com/katiekatiekatiee/banking-frontend"&gt;Front&lt;/a&gt; | &lt;a href="https://github.com/katiekatiekatiee/banking-backend"&gt;Back&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to make a Nuxt.Js application SEO friendly</title>
      <author>David Emaye</author>
      <pubDate>Fri, 31 Dec 2021 22:34:51 +0000</pubDate>
      <link>https://dev.to/davidemaye/how-to-make-a-nuxtjs-application-seo-friendly-132a</link>
      <guid>https://dev.to/davidemaye/how-to-make-a-nuxtjs-application-seo-friendly-132a</guid>
      <description>&lt;p&gt;If you want to use Nuxt.js for your web application's quick and responsive UI, you need also know how to use Nuxt.js to create an SEO-friendly application. In this article, we'll look at how we can improve the SEO performance of our Nuxtjs website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO
&lt;/h2&gt;

&lt;p&gt;SEO (Search Engine Optimization) is the process of taking efforts to improve the ranking of a website or piece of content on Google.&lt;br&gt;
The main distinction between SEO and sponsored content is that SEO involves "organic" ranking, which means you don't have to pay to be in that spot. To put it another way, search engine optimization is the process of improving a piece of online material so that it appears near the top of a search engine's page when someone searches for something.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nuxtjs-and-seo"&gt;
  &lt;/a&gt;
  Nuxt.js and SEO
&lt;/h2&gt;

&lt;p&gt;Nuxt, one of the most popular Vue frameworks for new web apps, can greatly improve your app performance and SEO. One of the most important Nuxt configurations is the mode, as it determines how your app is built, deployed, and served. There are three main types of web apps out there today:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Classic Single-Page App (SPA)&lt;/li&gt;
&lt;li&gt;Universal/Isomorphic Web App (UWA)&lt;/li&gt;
&lt;li&gt;Pre-Rendered Single-Page App&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is important to use the Universal mode for SEO and here is why:&lt;br&gt;
In a classic SPA, the HTML served to the client is relatively empty, and JavaScript dynamically renders HTML once it gets to the client. Because of this, you may see a "white flicker" before the webpage is fully loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAxDyLFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xil6y2wwslh2xwukt9zi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAxDyLFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xil6y2wwslh2xwukt9zi.jpg" alt="Classic SPA" width="880" height="348"&gt;&lt;/a&gt;&lt;br&gt;
While in a UWA, JavaScript renders the initial HTML the same way SPAs do, but now the JavaScript runs on your Nuxt server before the content is sent back to the client. This way, the client receives the rendered HTML immediately, and will behave like a classic SPA afterwards. This is done so that search engine crawlers can interpret and index our website's pages. As a result, Universal mode is important for SEO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ytbi-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q5zuafbw6n6usr5pn3k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ytbi-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q5zuafbw6n6usr5pn3k.jpg" alt="UWA" width="880" height="348"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;New App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that our setup is complete, we should install some npm packages to improve our SEO by &lt;strong&gt;adding a Dynamic Sitemap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A sitemap is a blueprint of your website that help search engines find, crawl and index all of your website’s content. Sitemaps also tell search engines which pages on your site are most important. We will include a sitemap in our app, but first we must install the nuxt module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @nuxtjs/sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nuxtjs/sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only need to add an entry to our nuxt.config.js file after installing the sitemap module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/sitemap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Next we Add Google Analytics.&lt;/strong&gt;&lt;br&gt;
Google Analytics is a web analytics service that provides statistics and basic analytical tools for search engine optimization (SEO) and marketing purposes.To use Google Analytics with Nuxtjs, simply install the following module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @nuxtjs/google-analytics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @nuxtjs/google-analytics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;If you are using Nuxt &amp;lt; v2.9, you have to install the module as dependency (without --dev or --save-dev)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We also need to add an entry to our nuxt.config.js file after installing the Google Analytics module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/google-analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we must link this nuxt application to our Google Analytics account. To do so, we must include the Google Analytics ID in nuxt.config.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;googleAnalytics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UA-XXX-X&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we Add Meta Tags&lt;/strong&gt;&lt;br&gt;
Nuxt lets you define all default  tags for your application inside the nuxt.config.js file using the head property. This is very useful for adding a default title and description tag for SEO purposes or for setting the viewport or adding the favicon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my website title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;viewport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width=device-width, initial-scale=1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;hid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my website description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/x-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note that this code above will give you the same title and description on every page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Adding titles and meta for each page can be done by setting the &lt;code&gt;head&lt;/code&gt; property inside your script tag on every page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;hid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Use &lt;code&gt;head&lt;/code&gt; as an object to set a title and description only for the home page&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;hid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all there is to it; these steps will undoubtedly boost your SEO performance. However, keep in mind that this isn't all there is to SEO; there are many other factors to consider.&lt;/p&gt;

&lt;p&gt;Thank you for Reading&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>nuxt</category>
      <category>seo</category>
    </item>
    <item>
      <title>Self-Taught Developer Journal, Day 29: TOP JavaScript Fundamentals Part 2 - Practice and Knowledge Check</title>
      <author>Jennifer Tieu</author>
      <pubDate>Fri, 31 Dec 2021 22:12:18 +0000</pubDate>
      <link>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-29-top-javascript-fundamentals-part-2-practice-and-knowledge-check-10e0</link>
      <guid>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-29-top-javascript-fundamentals-part-2-practice-and-knowledge-check-10e0</guid>
      <description>&lt;p&gt;Today I completed The Odin Project JS Fundamentals Part 2 Knowledge Check Section after reviewing all of the materials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowledge-check"&gt;
  &lt;/a&gt;
  Knowledge Check
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;What are the eight data types in JavaScript?&lt;/strong&gt;
Numbers, BigInt, Strings, null, undefined, Boolean, Objects, Symbols&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Which data type is NOT primitive?&lt;/strong&gt;
Objects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the relationship between null and undefined?&lt;/strong&gt;
The expression, &lt;code&gt;null == undefined&lt;/code&gt;, returns true when using the loose equality operator, "==", but not for, "==="&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the difference between single, double, and backtick quotes for strings?&lt;/strong&gt;
Single and double both behave the same. Backtick quotes can format strings with variables and expressions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the term for embedding variables/expressions in a string?&lt;/strong&gt;
Template literals&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Which type of quote lets you embed variables/expressions in a string?&lt;/strong&gt;
Backticks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How do you embed variables/expressions in a string?&lt;/strong&gt;
${...}&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How do you escape characters in a string?&lt;/strong&gt;
Put a blackslash, "\", in front of a character&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are methods?&lt;/strong&gt;
Actions performed on Objects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the difference between slice/substring/substr?&lt;/strong&gt;
Slice extracts a part of a string and returns the extracted part in a new string.
Substring is similar to slice, but can't use negatives indices
Substr is similar to slice, but the second parameter specifies the length of the extracted part.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are the three logical operators and what do they stand for?&lt;/strong&gt;
&amp;amp;&amp;amp; (AND), || (OR), ! (NOT) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are the comparison operators?&lt;/strong&gt;
Operators that compare values between operands&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are truthy and falsy values?&lt;/strong&gt;
Values that return the boolean value true or false&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are the falsy values in JavaScript?&lt;/strong&gt;
0, empty string, null, NaN, and undefined&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are conditionals?&lt;/strong&gt;
evaluates whether a statement/expression is true or false&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the syntax for an if/else conditional?&lt;/strong&gt;
Refer to end&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the syntax for a switch statement?&lt;/strong&gt;
Refer to end&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the syntax for a ternary operator?&lt;/strong&gt;
&lt;code&gt;condition ? value1: value2;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is nesting?&lt;/strong&gt;
Putting a statement inside of another statement, therefore nesting them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Question 16:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if {
  ...
} else {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For Question 17:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (condition) {&lt;br&gt;
  case a:&lt;br&gt;
    code block&lt;br&gt;
    break&lt;br&gt;
  default:&lt;br&gt;
    code block&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#resources"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Resources&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/landing-page"&gt;The Odin Project Landing Page Project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Module.createRequire is not a function</title>
      <author>Anayo Oleru</author>
      <pubDate>Fri, 31 Dec 2021 22:07:07 +0000</pubDate>
      <link>https://dev.to/anayooleru/modulecreaterequire-is-not-a-function-345a</link>
      <guid>https://dev.to/anayooleru/modulecreaterequire-is-not-a-function-345a</guid>
      <description>&lt;p&gt;&lt;em&gt;Anayo Debugging 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is one simpler issue, but the simplest bug can be the biggest at times, so I made sure I document it and can help anyone out there too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bug"&gt;
  &lt;/a&gt;
  Bug
&lt;/h1&gt;

&lt;p&gt;In my react project's root I have a GitLab-ci.yml file that automatically runs whenever I push a commit to the server. It triggers a notification to the runner I specified, and then it processes the series of tasks I specified.&lt;/p&gt;

&lt;p&gt;Which involves building and deploying.&lt;/p&gt;

&lt;p&gt;This is a legacy React project, and had long been updated. After upgrading the packages I git committed. Build built successfully but deployment failed. With the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUHPQ91I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2zgkx89i7undg7bpd0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUHPQ91I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2zgkx89i7undg7bpd0i.png" alt="Image description" width="869" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h1&gt;

&lt;p&gt;I read through the error to understand what the problem really was, and I found it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Module.createRequire is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was the only error that was reasonably clear indeed and meant something.&lt;/p&gt;

&lt;p&gt;So I Googled it, and I found out that it's an issue with Create React App, it's always on or looking for the latest, which means the Node engine version has to always be the latest and that includes my npm version, else some things might break.&lt;/p&gt;

&lt;p&gt;So in essence whatever machine running that project has to have Node &amp;gt;= 14.0.0 and npm &amp;gt;= 5.6&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;My GitLab-ci.yml contains a Docker image with a node version of 10.15.3, so there is a need to upgrade.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;image: giona69/node-10.15.3-aws-eb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;And I temporarily replaced the docker image with the latest node.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;image: node:14.18.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Rebuilt Node-Sass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I added &lt;br&gt;
&lt;code&gt;npm rebuild node-sass&lt;/code&gt; &lt;br&gt;
to the deploy script&lt;/p&gt;

&lt;p&gt;And Voila!! That fixed the issue. These weeks has been simple, this is the issues I have been experiencing.&lt;/p&gt;




&lt;p&gt;My name is Anayo Oleru, I specialise in Backend Development(NodeJS &amp;amp; ExpressJS), but I am experienced with Web frontend(ReactJS) and mobile(React-native). And I am open to offers in these fields.&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at &lt;a class="mentioned-user" href="https://dev.to/anayooleru"&gt;@anayooleru&lt;/a&gt; or send an email to: &lt;a href="mailto:anayo_oleru@outlook.com"&gt;anayo_oleru@outlook.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers and take care.&lt;/p&gt;

</description>
      <category>react</category>
      <category>gitlap</category>
      <category>deployment</category>
      <category>nodeversion</category>
    </item>
    <item>
      <title>DEV3L on DevOps Handbook</title>
      <author>Justin Beall</author>
      <pubDate>Fri, 31 Dec 2021 21:38:27 +0000</pubDate>
      <link>https://dev.to/dev3l/dev3l-on-devops-handbook-257m</link>
      <guid>https://dev.to/dev3l/dev3l-on-devops-handbook-257m</guid>
      <description>&lt;p&gt;DevOps is good for business - this is undeniable. Elite performers consistently outperform their peers in the market - regardless of the market segment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DevOps Handbook, Second Edition - How to Create World-Class Agility, Reliability, &amp;amp; Security in Technology Organizations&lt;/strong&gt;, by &lt;em&gt;&lt;a href="https://twitter.com/RealGeneKim"&gt;Gene Kim&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="https://twitter.com/jezhumble"&gt;Jez Humble&lt;/a&gt;&lt;/em&gt;, is a guided tour through the world of DevOps. The book provides principles, proven practices, and case studies for organizations that want to build safe and resilient systems, with minimal maintenance cost, and unimaginable levels of business agility.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ER6OKPCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez9f2lrudpd2c75ifu6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ER6OKPCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez9f2lrudpd2c75ifu6n.png" alt="" width="880" height="888"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DevOps isn't about automation,
just as astronomy isn't about telescopes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fast flow of planned work to production&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How technology work is managed and perform as leading indicator of market success&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4fDZF69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbsb14jd565mpvp0vkge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4fDZF69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbsb14jd565mpvp0vkge.png" alt="" width="861" height="756"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downward Spiral&lt;/strong&gt; - traditional goals of operations (stability) and development (change) in opposition&lt;br&gt;
Cannot see the big picture when pickled&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g1eER8rH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsfzhfh1oiyietm5zjoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g1eER8rH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsfzhfh1oiyietm5zjoi.png" alt="" width="880" height="657"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating systems that cause feelings of powerlessness is one of the most damaging things we can do to fellow human beings&lt;/p&gt;

&lt;p&gt;Deploy during business hours,&lt;br&gt;
lead times in minutes to hours&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Empirically great for business&lt;/em&gt;&lt;br&gt;
Proven better business outcomes &lt;a href="https://itrevolution.com/accelerate-book/"&gt;Accelerate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Loosely coupled teams scale&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZVJmsIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u628fz0uenzhkqhww4wj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZVJmsIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u628fz0uenzhkqhww4wj.png" alt="" width="799" height="638"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#part-i-the-three-ways"&gt;
  &lt;/a&gt;
  Part I - The Three Ways
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Flow (capabilities and practices)&lt;/li&gt;
&lt;li&gt;Feedback and monitoring&lt;/li&gt;
&lt;li&gt;Continuous learning (generative culture)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jh0LsHLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5ykt4hdp9hkhs8ghn1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jh0LsHLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5ykt4hdp9hkhs8ghn1t.png" alt="" width="736" height="759"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=LdOe18KhtT4"&gt;10+ Deploys Per Day&lt;/a&gt; - 2009 &lt;em&gt;&lt;a href="https://twitter.com/allspaw"&gt;John Allspaw&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuration-and-infrastructure-managed-using-craftsmanship-principles"&gt;
  &lt;/a&gt;
  Configuration and Infrastructure managed using craftsmanship principles
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Improvement Kata&lt;/strong&gt; - daily practice improves outcomes...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Avoid cargo cult Lean/Agile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ceyvwgaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edxe2xmbl1u46tumnp7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceyvwgaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edxe2xmbl1u46tumnp7f.png" alt="" width="656" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value Stream&lt;/strong&gt; - sequence of activities necessary to produce value&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FuGiN0Hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl8f53t2uw4bkjptjm3d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FuGiN0Hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl8f53t2uw4bkjptjm3d.png" alt="" width="876" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment Lead Time&lt;/strong&gt; - time from &lt;em&gt;Dev Complete&lt;/em&gt; to &lt;em&gt;Production&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shift Quality Left&lt;/strong&gt; - build quality in, not tacked on at the end&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Process Time (Touch Time) = Lead Time - Wait Time&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRwxWq5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gbjwwwfdinis0l440hp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRwxWq5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gbjwwwfdinis0l440hp.png" alt="" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flowframework.org/"&gt;Flow Framework&lt;/a&gt; by &lt;em&gt;&lt;a href="https://twitter.com/mik_kersten"&gt;Mik Kersten&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-lLmrag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlr643n2126r8dve88ny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-lLmrag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlr643n2126r8dve88ny.png" alt="" width="880" height="924"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-first-way"&gt;
  &lt;/a&gt;
  The First Way
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;increase flow&lt;/li&gt;
&lt;li&gt;make work visible - &lt;a href="https://prokanban.org/"&gt;Kanban&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;theory of constraints &lt;a href="https://www.goodreads.com/book/show/113934.The_Goal"&gt;Goal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;reduce batch size&lt;/li&gt;
&lt;li&gt;eliminate waste&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3IK0X02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lqgn62zotkyxoellv4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3IK0X02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lqgn62zotkyxoellv4i.png" alt="" width="861" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c-BIp_xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofwi9h7jowd7xxxrjwwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-BIp_xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofwi9h7jowd7xxxrjwwx.png" alt="" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuLRaiA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg2l2tuo9bbg89edfo71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuLRaiA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg2l2tuo9bbg89edfo71.png" alt="" width="596" height="842"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-second-way"&gt;
  &lt;/a&gt;
  The Second Way
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fast feedback loops&lt;/li&gt;
&lt;li&gt;establish cause and effect&lt;/li&gt;
&lt;li&gt;enables learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1ID6mr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v155q8wz6ro9vfh8dohl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1ID6mr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v155q8wz6ro9vfh8dohl.png" alt="" width="781" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Continually automate manual tasks - self service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Andon Cord&lt;/strong&gt; - defect / second opinion - safety culture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TERKbLX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a897eij26hsd1ml06mh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TERKbLX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a897eij26hsd1ml06mh4.png" alt="" width="822" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Push decision making down to where work is&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-third-way"&gt;
  &lt;/a&gt;
  The Third Way
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;continuous learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Transform local discoveries into global improvements&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blameless Post Mortem&lt;/strong&gt; - learn from failures, not blame&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;More important than daily work,
Improvement of daily work 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1ty4Nja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma0t3k5geihwz1ori1mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1ty4Nja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma0t3k5geihwz1ori1mw.png" alt="" width="851" height="911"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resilience through anti-fragility&lt;br&gt;
Experiment iteratively towards True North goal&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#part-ii-where-to-start"&gt;
  &lt;/a&gt;
  Part II - Where to Start
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuN-0iXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/479e7g45g3m6hhji2fsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuN-0iXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/479e7g45g3m6hhji2fsz.png" alt="" width="820" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thought process to guide decisions, actual steps to be taken, and case studies to visualize&lt;/p&gt;

&lt;p&gt;Start with &lt;strong&gt;enthusiastic early adopters&lt;/strong&gt; - find early winds - land and expand&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59v03gPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcmkk0cc3wljhp3fqtzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59v03gPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcmkk0cc3wljhp3fqtzb.png" alt="" width="876" height="696"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Little fish learn to be big fish in little ponds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Focus on wait times and rework&lt;br&gt;
Invest 20% (at least) in the "ilities" (NFRs)&lt;br&gt;
Shared pain reinforces shared goals&lt;/p&gt;

&lt;p&gt;Design systems with &lt;strong&gt;Conway's Law&lt;/strong&gt; in mind&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I19jKR7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgwmad4b6mwdlhy9jnvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I19jKR7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgwmad4b6mwdlhy9jnvt.png" alt="" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#part-iii-technical-practices-of-flow"&gt;
  &lt;/a&gt;
  Part III - Technical Practices of Flow
&lt;/h1&gt;

&lt;p&gt;Environments like cattle, not snowflakes&lt;br&gt;
Production like on demand&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Design systems/architecture for testability&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Immutable Infrastructure&lt;/strong&gt; - all artifacts, source, and configuration in version control - removes variance &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Done"&lt;/em&gt; includes potentially shippable code deployed in a production-like environment&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automated testing is principle/foundational&lt;/strong&gt; - manual testing cannot scale&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cf4dXmJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgoqdcp1ma8g9yv838r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cf4dXmJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgoqdcp1ma8g9yv838r2.png" alt="" width="813" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CI+&lt;/strong&gt; - Continuous Integration built upon DevOps practices&lt;/p&gt;

&lt;p&gt;Slow and periodic feedback kills development effectiveness&lt;br&gt;
... especially at scale&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCqNvKfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc0wbyujezldcfau7k3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCqNvKfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc0wbyujezldcfau7k3z.png" alt="" width="878" height="310"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Non-idempotent test should be rewritten, or removed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#optimize-for-team-productivity"&gt;
  &lt;/a&gt;
  Optimize for team productivity
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;li&gt;Trunk Based Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Deploy to production as frequently as possible&lt;/em&gt;&lt;br&gt;
Every commit for single piece flow&lt;br&gt;
Boring deployments lead to high agility&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#decouple-deployment-and-release"&gt;
  &lt;/a&gt;
  Decouple deployment and release
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;blue/green (environment)&lt;/li&gt;
&lt;li&gt;feature flags (code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ugrUbKv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37e3xgplwqam3ydmhni5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ugrUbKv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37e3xgplwqam3ydmhni5.png" alt="" width="880" height="345"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Continuous Integration &amp;lt;
Continuous Delivery    &amp;lt;
Continuous Deployment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://youtu.be/CostXs2p6r0"&gt;Resource Utilization Trap&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Flow Efficiency&lt;/strong&gt; over&lt;br&gt;
&lt;em&gt;Resource Efficiency&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwabQQCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/civ7qiusqrb4xr0zblr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwabQQCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/civ7qiusqrb4xr0zblr7.png" alt="" width="795" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't Rewrite,&lt;br&gt;
Delegate and Decommission&lt;br&gt;
&lt;strong&gt;Strangler Fig Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNET69KV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn7ky6kexfp691la8z3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNET69KV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn7ky6kexfp691la8z3l.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#part-iv-the-second-way-technical-practices-of-feedback"&gt;
  &lt;/a&gt;
  Part IV - The Second Way - Technical practices of feedback
&lt;/h1&gt;

&lt;p&gt;Logging, monitoring, and visualizing telemetry/events as a first principle&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Make tracking anything easy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application Performance Monitoring&lt;/strong&gt; - if it's important enough to implement, it's important enough to instrument&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1gu_ckZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v6vbcgq8fgqwx2rlx88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1gu_ckZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v6vbcgq8fgqwx2rlx88.png" alt="" width="568" height="735"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allow self service of metrics&lt;/p&gt;

&lt;p&gt;Overlay system events - such as deployments, incidents, and/or maintenance periods - on top of business metrics&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQNsCNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzqj3xmmr4fkpntifw5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQNsCNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzqj3xmmr4fkpntifw5v.png" alt="Image description" width="872" height="749"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use means and standard deviations to detect anomalies in clusters - do not need to know what normal is, just what it is not&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K_5PB8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ijfqzmbudue6e7k3bty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K_5PB8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ijfqzmbudue6e7k3bty.png" alt="" width="821" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CweBYN-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cr9v3rswemkl09d5rp44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CweBYN-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cr9v3rswemkl09d5rp44.png" alt="" width="840" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rotate Pager Duty&lt;/strong&gt; through the entire team - empathy and visualization - Goldilocks alerting (just right)&lt;/p&gt;

&lt;p&gt;Validate assumptions empirically in lowest fidelity possible&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#part-v-the-third-way-the-technical-practices-of-continual-learning-and-experimentation"&gt;
  &lt;/a&gt;
  Part V - The Third Way - The Technical Practices of Continual Learning and Experimentation
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Pair programming is live peer review&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one repository to rule them all&lt;/li&gt;
&lt;li&gt;codify non-functional requirements&lt;/li&gt;
&lt;li&gt;create run books for manual operations&lt;/li&gt;
&lt;li&gt;guidance over Governance on architectural decisions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In complex systems errors are inevitable&lt;/strong&gt;, utilize resilience engineering practices to accommodate - enable chat rooms to trigger events, notify status/results, and alerts&lt;/p&gt;

&lt;p&gt;Perform &lt;strong&gt;Blameless Postmortems&lt;/strong&gt; after production incidents (and near misses) - lower failure signals as error detection decreases&lt;/p&gt;

&lt;p&gt;Retrospect Early, Retrospect Often&lt;br&gt;
Make results globally available&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBl8TEDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l96nh47cegyfjf879eb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBl8TEDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l96nh47cegyfjf879eb2.png" alt="" width="605" height="689"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transform documented knowledge, processes, and design standards into reusable code&lt;/p&gt;

&lt;p&gt;Create regular space for improvement blitzes - explicit time dedicated to learning and/or improvement of daily work - ensure cross pollination of teams/business units&lt;/p&gt;

&lt;p&gt;Allow everyone to teach and learn - most valuable thing employee can do is teach someone  or learn something new&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QwiQSBZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt4ysxwudbwjltfvr0tp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QwiQSBZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt4ysxwudbwjltfvr0tp.png" alt="" width="841" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remove "I do not have time to test" as an excuse - &lt;a href="https://www.youtube.com/watch?v=Jtt7PAejrFA"&gt;Make It Easy&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Make the change easy,
Then make the easy change
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Automated testing, and automation in general, is foundational to all other DevOps practices&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#part-vi-the-technical-practices-of-integrating-information-security-change-management-and-compliance"&gt;
  &lt;/a&gt;
  Part VI - The Technical Practices of Integrating Information Security,  Change Management, and Compliance
&lt;/h1&gt;

&lt;p&gt;Integrate information security practices into daily work - shift left - &lt;em&gt;compliance by demonstration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Spread &lt;strong&gt;&lt;a href="https://owasp.org/Top10/"&gt;OWASP&lt;/a&gt;&lt;/strong&gt; Top 10 throughout organization - create security learning opportunities&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slDwykvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf67guohl5piev64zcet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slDwykvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf67guohl5piev64zcet.png" alt="" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Utilize static/dynamic security analysis inside delivery pipeline - source, dependencies, and sub-dependencies are scanned for vulnerabilities&lt;/p&gt;

&lt;p&gt;Create paved road for developers to follow - all necessary information security checks - internal package management&lt;/p&gt;

&lt;p&gt;Classify &lt;em&gt;Change Types&lt;/em&gt; by risk&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;routine&lt;/li&gt;
&lt;li&gt;standard&lt;/li&gt;
&lt;li&gt;urgent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Change Management Traceability&lt;/strong&gt; - link deployments to commits, and commits to work tickets&lt;/p&gt;

&lt;p&gt;Physically and logically separate components that require special compliance - do not force strict policies where not needed&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lk6KXG52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1elfacqh8jt71scqik5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lk6KXG52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1elfacqh8jt71scqik5.png" alt="" width="225" height="225"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Reference Journal Events: &lt;a href="https://twitter.com/dev3l_/status/1476242693311410176"&gt;Start&lt;/a&gt;, &lt;a href="https://twitter.com/dev3l_/status/1476779918335881223"&gt;Finish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>agile</category>
      <category>craftsmanship</category>
    </item>
    <item>
      <title>The best SDLC Model to deploy in Software Dev.</title>
      <author>Azubuike Duru </author>
      <pubDate>Fri, 31 Dec 2021 21:30:21 +0000</pubDate>
      <link>https://dev.to/azubuikeduru/the-best-sdlc-model-to-deploy-in-software-dev-3ek</link>
      <guid>https://dev.to/azubuikeduru/the-best-sdlc-model-to-deploy-in-software-dev-3ek</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;IT Project Managers often times get confused of the best tools to help ensure satisfaction and successful implementation of software products. Well, this article provides a visible design, implementation and development steps needed for quick project delivery with a low cost budget. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;The goal of each stages/phases in SDLC are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide a framework for developing quality system and software products. &lt;/li&gt;
&lt;li&gt;Specify the activities to be performed in the next phase.&lt;/li&gt;
&lt;li&gt;Ensure that system development requirements are well defined and subsequently satisfied.&lt;/li&gt;
&lt;li&gt;Delivering quality and cost efficient systems which meets Costumers wants and specifications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://dev.tourl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objective"&gt;
  &lt;/a&gt;
  Objective
&lt;/h2&gt;

&lt;p&gt;The SDLC methodology will help to achieve this goals by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Establishing appropriate levels of management authority to provide timely direction, coordination, control, review, and approval of the system development project.&lt;/li&gt;
&lt;li&gt;Ensuring project management accountability.&lt;/li&gt;
&lt;li&gt;Documenting requirements and maintaining trace ability of those requirements throughout the development and implementation process.&lt;/li&gt;
&lt;li&gt;Ensuring that projects are developed within the current and planned information technology infrastructure.&lt;/li&gt;
&lt;li&gt;Identifying project risks early.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-sdlc"&gt;
  &lt;/a&gt;
  What is SDLC?
&lt;/h2&gt;

&lt;p&gt;SDLC stands for Software Development Life Cycle and it is defined as a methodology that aims at software production with well-structured phases that help an organization with the highest quality and lowest cost in the shortest time possible. Software Development Life Cycle (SDLC) is a process used by the software industry to design, develop and test high quality softwares. Every IT firm need to deploy one suitable software technique in building any software production at all times. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phases-of-sdlc"&gt;
  &lt;/a&gt;
  Phases of SDLC
&lt;/h2&gt;

&lt;p&gt;The common Software Development Life Cycle are arranged in different phases of processes which include: &lt;br&gt;
Phase1 -Requirement analysis and specification.&lt;br&gt;
Phase2 -Design.&lt;br&gt;
Phase3 -Implementation and integration. &lt;br&gt;
Phase4 -Testing(quality assurance).&lt;br&gt;
Phase5 -Operation and &lt;br&gt;
Phase6 -maintenance. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IsEkx8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ubbafaqc84gpqlcbmgk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IsEkx8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ubbafaqc84gpqlcbmgk.jpeg" alt="Image description" width="783" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase1: Requirement analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Requirement analysis is the first and fundamental stage in software development. It involves a lot of  meetings. It is where documentation and researches are carried out and we find out what we are trying to build, what our client needs are and the purpose of building it. It involves interaction with the managers, consultants and people in charge. In this stage, all the planning that needs to be done are done and a feasibility(possibility) test is carried out to check if the product or software is profitable or worth venturing into in the first place. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase2: Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next phase is the design stage. During this phase, the software is designed to satisfy the functional requirements identified in the previous phase. It purely depends on how things was planned out to be or look like, the features to render, the architecture and environment/layout of the product to produce. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase3: Implementation and integration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implementation and integration is after the layout has been done. It takes whatever that’s been designed and try to put them into coding. The software programmers come into play and codes are been written in whatever programming language that is necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase4: Testing (quality assurance)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Testing is as important as the requirements stage. It is where things are ascertain and errors are corrected and functional requirements are met by the newly developed or modified software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase5: Operation, deployment and maintenance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the last phase of SDLC. After which the software has deployed, there is a need to monitor for continue functioning and operation of the software. Maintenance does the trick. It makes sure software products keep to date and functionalities keep improving. It is the phase that enables the sustenance of a product out there.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-sdlc-models"&gt;
  &lt;/a&gt;
  Types of SDLC Models
&lt;/h2&gt;

&lt;p&gt;There are different types of models that can be implemented when choosing the kind of software to build. They include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The Water-fall model&lt;/li&gt;
&lt;li&gt; The Agile model&lt;/li&gt;
&lt;li&gt; The Incremental model&lt;/li&gt;
&lt;li&gt; The Re-use oriented software dev. cycle &lt;/li&gt;
&lt;li&gt; The Prototyping model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqDuT2sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5af6ra8hw5kjuinkmnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqDuT2sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5af6ra8hw5kjuinkmnn.png" alt="Image description" width="766" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the models go through the same phase in software production but have different approaches to each phase/stage. And we won’t be able to cover all the available models in details. Our main focus is the Agile Model SDLC. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation-sdlc-models"&gt;
  &lt;/a&gt;
  EXPLANATION: SDLC Models
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTVfIHNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxx0ds2kvvkenw78sahl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTVfIHNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxx0ds2kvvkenw78sahl.png" alt="Image description" width="637" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The Water-fall model: is the most common SDLC model approach to be introduced. Waterfall software development is dependent on phases. Simple to understand because it explains the process of software development in a linear progressive format. That means it moves to the next phase/stage only when its current phase is over. It is usually only good for short term project. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbY9icSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeqyopm2y3wv77fcgkej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbY9icSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeqyopm2y3wv77fcgkej.png" alt="Image description" width="614" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The incremental model: this kind of model achieve task by deploying finished versions of the whole entity one after the other until the task is completed. It is generally fast because of this method it uses and cost effective.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Sam3mlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr2ghwdfqxt579j4entf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Sam3mlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr2ghwdfqxt579j4entf.png" alt="Image description" width="810" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The Prototyping model: prototyping is used when the client or customer don’t have the full idea of what they need. It is a way of cross-checking what the desire of the customer is. In prototyping model, prototypes or demo of the intended software is built so that the customer or client can check if it is what he/she wanted initially or Changes where need be. Client feedback is really of essence in this model type. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKGH8Ido--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkoqvylu3v78ilt5opnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKGH8Ido--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkoqvylu3v78ilt5opnw.png" alt="Image description" width="691" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The Agile model:   Agile kind of software development model is a set of values, beliefs and principles that aims at focusing on the benefits and what users want and need. It is an approach to help organization respond quicker to changes with rules and methodology and not just blindly following a given plan set to constrain flexibility at work. Agile is best for long term projects because it is more focused on Customer satisfaction over processes and tools. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#agile-manifesto-set-of-rules"&gt;
  &lt;/a&gt;
  AGILE MANIFESTO (SET OF RULES)
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Individuals and interactions over processes or tools: Agile modeling puts talking and discussion about the whole processes over just working and coding about it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working software over comprehensive documentation: the experience the users gets by using the product is more important than how detailed the planning or requirement stage may sound or was. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customer collaboration over contract negotiation: making sure the product is perfectly working first over worrying about what was said or signed initially in the requirement stage. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Responding to changes over following a plan: Agile kind of model want you to run the plan and not the plan running you. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-agile-model"&gt;
  &lt;/a&gt;
  Advantages Of Agile Model
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Increased Flexibility with a Fast Failure Mindset.&lt;/li&gt;
&lt;li&gt;Improved Team interaction and communication during work.&lt;/li&gt;
&lt;li&gt;Release of efficient softwares at a quicker time rate.&lt;/li&gt;
&lt;li&gt;Honesty and transparency.&lt;/li&gt;
&lt;li&gt;Late changes in requirements are welcomed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-agile-model"&gt;
  &lt;/a&gt;
  Disadvantages Of Agile Model
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There is lack of emphasis on necessary designing and documentation.&lt;/li&gt;
&lt;li&gt;The project can easily get taken off track if the customer representative is not clear on what final outcome that they want.&lt;/li&gt;
&lt;li&gt;Only senior programmers are capable of taking the kind of decisions required during the development process. Hence it has no place for newbie programmers, unless combined with experienced resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Many contradictions have been raised over the years of the best kind of model to deploy in SDLC. Well, all models are useful depending on what you want to achieve and how fast you want to go about it at the time. But for the purpose of this writing. I will say Agile SDLC is the best, because it has the customers needs and satisfaction at mind first before any other plan or agreement which is what every customer would want to go for. It surpasses all kind of models because good product at the end is more needful than set of rigid rules or plan. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>My 2021 Review: The Growing Pains</title>
      <author>Ayu Adiati</author>
      <pubDate>Fri, 31 Dec 2021 20:38:38 +0000</pubDate>
      <link>https://dev.to/adiatiayu/my-2021-review-the-growing-pains-1j84</link>
      <guid>https://dev.to/adiatiayu/my-2021-review-the-growing-pains-1j84</guid>
      <description>&lt;p&gt;Hello Everyone 👋,&lt;/p&gt;

&lt;p&gt;We will leave 2021 in a few more hours. Is it just me? I feel like 2021 is much shorter than the previous years.&lt;br&gt;
How time flies!&lt;/p&gt;

&lt;p&gt;I participated in Polywork's #My2021Highlights and created &lt;a href="https://www.polywork.com/adiatiayu/collections/853188"&gt;My 2021 Highlights collection&lt;/a&gt;. And that's when I realize (again) how I grow so much within 1 year!&lt;/p&gt;

&lt;p&gt;I had ups and downs, but all of those were worth it.&lt;br&gt;
Maybe this is what people called &lt;em&gt;growing pains&lt;/em&gt;. 😄&lt;/p&gt;

&lt;p&gt;I'm writing this post to remind me of what I achieved and overcame throughout this year. It will be something that I will look back to when I have hard times and keep me motivated.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/yaR8Dux1s0fAI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yaR8Dux1s0fAI/giphy.gif" alt="let's go gif" width="500" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  Blogging
&lt;/h2&gt;

&lt;p&gt;I started to write in November 2020, but not until 2021 when my articles and me, as a writer, started to get recognized. How I achieved so much within one year:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My articles got into CodeNewbie's newsletter several times throughout the year since January.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/hashnode/status/1366715534142812166"&gt;Spotlight of The Week&lt;/a&gt; on Hashnode.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://community.codenewbie.org/codenewbie/codenewbie-writers-of-the-month-february-2021-kb7"&gt;CodeNewbie Writers of The Month — February 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Top 7 on DEV in &lt;a href="https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-5h5d"&gt;March&lt;/a&gt;, &lt;a href="https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3h2i"&gt;August&lt;/a&gt;, and &lt;a href="https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-35fb"&gt;November&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.codenewbie.org/codenewbie/ayu-polyglot-latte-lover-codenewbie-149m"&gt;CodeNewbie Community Spotlight — April 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/must-read/45"&gt;Must Read Developer Articles #45&lt;/a&gt; on Hashnode.&lt;/li&gt;
&lt;li&gt;Earned &lt;strong&gt;OSS Documentarian&lt;/strong&gt;, &lt;strong&gt;OSS Mentor&lt;/strong&gt;, &lt;strong&gt;Talk of the Town&lt;/strong&gt;, &lt;strong&gt;Article picked as "Must Read" on Hashnode&lt;/strong&gt;, and &lt;strong&gt;Featured On Hashnode&lt;/strong&gt; &lt;a href="https://adiati.com/badges"&gt;badges&lt;/a&gt; on Hashnode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I love writing and will keep writing even though as I mentioned in &lt;a href="https://dev.to/adiatiayu/i-have-been-writing-a-blog-for-10-months-here-is-my-story-401a"&gt;one of my posts&lt;/a&gt; that I will post one to two articles per month for a while.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h2&gt;

&lt;p&gt;This year I didn't have any goal to complete Hacktoberfest because I started the collaboration program with &lt;a href="https://the-collab-lab.codes/about-us/"&gt;The Collab Lab&lt;/a&gt;. My goal was I would be very happy to submit at least one pull request.&lt;/p&gt;

&lt;p&gt;But I ended up submitting &lt;em&gt;eight&lt;/em&gt; pull requests and completed the Hacktoberfest!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n99kH4Va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640973778602/A-KL6-k1l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n99kH4Va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640973778602/A-KL6-k1l.jpeg" alt="hacktoberfest2021.jpeg" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This experience leads me to a new interest in contributing to open source (and diving more into accessibility)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;I can go for hours when I'm talking about community. I love my communities! 💙&lt;br&gt;
I'm very blessed to be in such supportive communities and be an active member of &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt;, &lt;a href="https://the-collab-lab.codes/who-we-are/"&gt;The Collab Lab&lt;/a&gt;, &lt;a href="https://community.codenewbie.org/adiatiayu"&gt;CodeNewbie&lt;/a&gt;, &lt;a href="https://dev.to/adiatiayu"&gt;DEV&lt;/a&gt; and &lt;a href="https://hashnode.com/@ayuadiati"&gt;Hashnode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I won't be where I am now if it's not because of them who always support and push me to be a better developer, to be a better writer, to be a better person.&lt;/p&gt;

&lt;p&gt;Even in the wildest dream, I never thought that I could be part of these before:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://virtualcoffee.io/podcast/0303-ayu-adiati/"&gt;Guest at Virtual Coffee Community podcast&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Documentation Lead&lt;/strong&gt; at Virtual Coffee.&lt;/li&gt;
&lt;li&gt;One of program committees (proposals reviewer) for &lt;a href="https://codelandconf.com/"&gt;CodeLand Conference 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Created a &lt;a href="https://www.youtube.com/watch?t=3788&amp;amp;v=4pI7miwXwY0&amp;amp;feature=youtu.be"&gt;short recess video for CodeLand Conference 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Moderator for CodeLand Conference 2021 and &lt;a href="https://community.codenewbie.org/codenewbie/announcing-cnc2021-codenewbie-challenge-2021-1jbh"&gt;CodeNewbie Challenge 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Got accepted and finished strong the collaboration program to create a &lt;a href="https://tcl-35-smart-shopping-list.web.app/"&gt;React project&lt;/a&gt; at The Collab Lab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm very grateful to have had these experiences this year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/7IuhBVrwctAtuPPXLk/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/7IuhBVrwctAtuPPXLk/giphy.gif" alt="but gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, those achievements didn't come without challenges.&lt;br&gt;
And these are actually what shaped me to grow and be who I am today.&lt;br&gt;
I learned a lot from them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#burnouts-and-imposter-syndromes"&gt;
  &lt;/a&gt;
  Burnout(s) and imposter syndrome(s)
&lt;/h2&gt;

&lt;p&gt;I had a massive burnout sometime this year. It was huge until it made me want to quit my journey, completely.&lt;br&gt;
Thankfully, I have genuinely lovely and supportive people around me at &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt;. Because of them, I overcame the burnout and got back on my feet.&lt;br&gt;
I wrote about that experience &lt;a href="https://dev.to/adiatiayu/lesson-learned-massive-burnout-in-learning-web-development-2kcg"&gt;in this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also faced countless imposter syndromes. Again, thanks to my communities, I become more and more confident in myself and in my abilities. If it's not because of them, I would not even dare to apply for &lt;a href="https://the-collab-lab.codes/about-us/"&gt;The Collab Lab&lt;/a&gt; program because I always thought that I could never get accepted. If I didn't apply, I would never have had that precious experience to learn to collaborate with other developers at The Collab Lab and be in another awesome and supportive community! ❤&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned-in-2021"&gt;
  &lt;/a&gt;
  What I learned in 2021
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;It's okay to not be okay.&lt;/li&gt;
&lt;li&gt;Take a break regularly, take care of yourself, and keep moving forward.&lt;/li&gt;
&lt;li&gt;Don't play too many scenarios in your head. You never know what will happen unless you try and do it.&lt;/li&gt;
&lt;li&gt;Surround yourself with positive and supportive people and communities.&lt;/li&gt;
&lt;li&gt;The growth process is extremely uncomfortable and sometimes painful, but it's totally worth it!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;Thank you for all the lessons, 2021! 💖&lt;br&gt;
Cheers to 2022 and happy new year, everyone!!! 🥂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" alt="i'm ready gif" width="480" height="452"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thank you for reading!&lt;br&gt;
Last but not least, you can find me on &lt;a href="https://twitter.com/AdiatiAyu"&gt;Twitter&lt;/a&gt;. Let's connect! 😊&lt;/p&gt;

</description>
      <category>yearinreview</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Setup NAS on Raspberry Pi 4 - Part 1</title>
      <author>Vedant</author>
      <pubDate>Fri, 31 Dec 2021 20:22:55 +0000</pubDate>
      <link>https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-4-part-1-1pp6</link>
      <guid>https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-4-part-1-1pp6</guid>
      <description>&lt;p&gt;This will be multi part post where I will take you through understanding what is NAS? How to setup NAS on your own using Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-4-52ck-temp-slug-2046292"&gt;Part 1: Motivation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-part-2-fe9-temp-slug-8521520"&gt;Part 2: Bake the Pi&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-part-3-4ndg-temp-slug-6892512"&gt;Part 3: Install OpenMediaVault&lt;/a&gt;&lt;br&gt;
Part 4: Setup OpenMediaVault &lt;strong&gt;(coming soon...)&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#part-1-motivation"&gt;
  &lt;/a&gt;
  Part 1: Motivation
&lt;/h2&gt;

&lt;p&gt;Recently I felt a need to have NAS which I can access on my local network and eventually expose it over internet for things like backing up my photos, videos, backups etc. &lt;/p&gt;

&lt;p&gt;But I was hoping it to be more than just a regular NAS. I want it to run other services likes password manager, media player server which I can access on my mobile phone, tv and other devices.&lt;/p&gt;

&lt;p&gt;Buying NAS is a good option but it is very costly. So I decided to build one myself. &lt;/p&gt;

&lt;p&gt;This multi-part post is share my experience and steps I followed to setup one for myself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-nas-server"&gt;
  &lt;/a&gt;
  What is a NAS Server?
&lt;/h3&gt;

&lt;p&gt;A (Network Attached Storage) NAS Server is a network storage system to serve and share files to other client computers in a local area network. This enables multiple users to access and share the same file storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-nas-server-on-raspberry-pi"&gt;
  &lt;/a&gt;
  Why NAS Server on Raspberry Pi?
&lt;/h3&gt;

&lt;p&gt;Raspberry Pi is a mini-computer with the full performance of a Linux-based operating system and contains almost all functions of a large server system.&lt;/p&gt;

&lt;p&gt;The Raspberry Pi saves a lot of money because it consumes a very small amount of energy. Due to its small size, the Raspberry Pi can be placed on nearly any place.&lt;/p&gt;

&lt;p&gt;There are various solutions present which can help you build your NAS. I will be using openmediavault.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-openmediavault"&gt;
  &lt;/a&gt;
  What is OpenMediaVault?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5E42sWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9ohfm2e6z8yu4kuiixj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5E42sWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9ohfm2e6z8yu4kuiixj.png" alt="open media vault logo" width="330" height="42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;openmediavault is the next generation network attached storage (NAS) solution based on Debian Linux. It contains services like SSH, (S)FTP, SMB/CIFS, DAAP media server, RSync, BitTorrent client and many more. &lt;/p&gt;

&lt;p&gt;openmediavault is primarily designed to be used in small offices or home offices, but is not limited to those scenarios. It is a simple and easy to use out-of-the-box solution that will allow everyone to install and administrate a Network Attached Storage without deeper knowledge.&lt;/p&gt;

&lt;p&gt;You can read about the features provided by OpenMediaVault &lt;a href="https://www.openmediavault.org/?page_id=1562"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;That is it for this part you can continue with the reading the rest of parts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-4-52ck-temp-slug-2046292"&gt;Part 1: Motivation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-part-2-fe9-temp-slug-8521520"&gt;Part 2: Bake the Pi&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/koditkarvedant/setup-nas-on-raspberry-pi-part-3-4ndg-temp-slug-6892512"&gt;Part 3: Install OpenMediaVault&lt;/a&gt;&lt;br&gt;
Part 4: Setup OpenMediaVault &lt;strong&gt;(coming soon...)&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>nas</category>
      <category>raspberrypi</category>
      <category>linux</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
