<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Python Frameworks for Game development</title>
      <author>Ashish Yadav</author>
      <pubDate>Wed, 05 May 2021 13:06:48 +0000</pubDate>
      <link>https://dev.to/expoashish/top-5-python-frameworks-for-game-development-44jk</link>
      <guid>https://dev.to/expoashish/top-5-python-frameworks-for-game-development-44jk</guid>
      <description>&lt;p&gt;Python language is one of the most popular programming language for game development because Python provides huge and useful libraries for game development. In this article, we have listed down the top 5 frameworks of Python used for game development one must know. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-such-a-amazing-blogs-heregt"&gt;
  &lt;/a&gt;
  &lt;a href="https://expoashish.blogspot.com/2021/05/top-5-python-frameworks-for-game.html"&gt;Read Such a Amazing Blogs here---&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-pygame"&gt;
  &lt;/a&gt;
  1. Pygame
&lt;/h2&gt;

&lt;p&gt;Pygame is an open-source Python library which is used to create video games. This library is a combination of C, Python and Native. Pygame was written by Pete Shinners to replace PySDL. Pygame adds functionality on top of the excellent SDL library. Pygame allows you to create fully featured games and multimedia programs in the Python language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pygame"&gt;
  &lt;/a&gt;
  Features of Pygame:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Multicore CPUs can be used easily.&lt;/li&gt;
&lt;li&gt;Uses optimised C and Assembly code for core functions.&lt;/li&gt;
&lt;li&gt;Simple and Portable.&lt;/li&gt;
&lt;li&gt;A small amount of code is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-pyglet"&gt;
  &lt;/a&gt;
  2. Pyglet
&lt;/h2&gt;

&lt;p&gt;pyglet is a cross-platform windowing and multimedia library for Python. Pyglet is one of the most powerful Python library that can be used for developing games. Pyglet supports windowing, user interface event handling, Joysticks, OpenGL graphics, loading images and videos, and playing sounds and music. pyglet works on Windows, OS X and Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pyglet"&gt;
  &lt;/a&gt;
  Features of Pyglet:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No external dependencies or installation requirements.&lt;/li&gt;
&lt;li&gt;pyglet is provided under the BSD open-source license.&lt;/li&gt;
&lt;li&gt;pyglet is written entirely in pure Python.&lt;/li&gt;
&lt;li&gt;Load images, sound, music and video in almost any format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-panda3d"&gt;
  &lt;/a&gt;
  3. Panda3D
&lt;/h2&gt;

&lt;p&gt;Panda3D is a powerful 3D engine written in C++, with a complete set of Python bindings. Panda3D is a modern engine supporting advanced features such as shaders, stencil, and render-to-texture. Panda3D is free software that runs under Windows, Linux, or macOS. Game development with Panda3D usually consists of writing a Python or C++ program that controls the Panda3D library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-panda3d"&gt;
  &lt;/a&gt;
  Features of Panda3D:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Platform Portability.&lt;/li&gt;
&lt;li&gt;Flexible Asset Handling.&lt;/li&gt;
&lt;li&gt;Library Bindings.&lt;/li&gt;
&lt;li&gt;Extensibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-pykyra"&gt;
  &lt;/a&gt;
  4. PyKyra
&lt;/h2&gt;

&lt;p&gt;Pyglet library is a cross-platform windowing and multimedia library for creating games using Python. PyKyra is one of the fastest game development frameworks for Python that is based on both SDL and the Kyra engine. it also supports MPEG video, sound such as MP3, Ogg Vorbis, Wav, etc., direct images reading, and much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pyopengl"&gt;
  &lt;/a&gt;
  Features of pyOpenGL:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simple and Portable.&lt;/li&gt;
&lt;li&gt;It has no dependencies outside of the built-in Python modules.&lt;/li&gt;
&lt;li&gt;The framework supports top-down, side, and symmetric translation.&lt;/li&gt;
&lt;li&gt;It has a sophisticated toolchain, which includes a sprite editor and encoder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-ursina-engine"&gt;
  &lt;/a&gt;
  5. Ursina Engine
&lt;/h2&gt;

&lt;p&gt;Ursina makes it easier to develop games, visualizations and other kinds of software.The concise API combined with the power of the Python programming language, makes life easier for the developer so they can focus on what they are making.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-ursina-engine"&gt;
  &lt;/a&gt;
  Features of Ursina Engine:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reload code/textures/models while in-game.&lt;/li&gt;
&lt;li&gt;Automatic import of .psd and .blend files.&lt;/li&gt;
&lt;li&gt;Play in fullscreen while developing.&lt;/li&gt;
&lt;li&gt;Lots of included procedural 3D primitives.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#and-subscribe-to-our-youtube-channel-bestcodecreator"&gt;
  &lt;/a&gt;
  🎥💡🔥AND Subscribe to Our YouTube Channel &lt;a href="https://www.youtube.com/bestcodecreator"&gt;bestcodecreator&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#and-support-our-blogging-site-myblogs"&gt;
  &lt;/a&gt;
  🎥💡🔥AND Support Our Blogging site &lt;a href="https://expoashish.blogspot.com/2021/04/machine-learning-complete-roadmap.html"&gt;myblogs&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thank you for reading this blog. I wish you the best in your journey in learning and mastering in Python Game Development🔥🔥.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Ilia Kiselevich, Founder &amp; CEO at SolveIt | Interview For TopDevelopers</title>
      <author>SolveIt</author>
      <pubDate>Wed, 05 May 2021 13:03:16 +0000</pubDate>
      <link>https://dev.to/solveit/ilia-kiselevich-founder-ceo-at-solveit-interview-for-topdevelopers-mm3</link>
      <guid>https://dev.to/solveit/ilia-kiselevich-founder-ceo-at-solveit-interview-for-topdevelopers-mm3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgAy4asq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2ckul6yw8imc7e6uibf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgAy4asq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2ckul6yw8imc7e6uibf.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#give-us-a-quick-overview-on-solveit-when-and-how-did-you-begin-this-journey-and-what-were-your-motives-to-be-successful-in-app-development"&gt;
  &lt;/a&gt;
  Give us a quick overview on SolveIt. When and how did you begin this journey and what were your motives to be successful in app development?
&lt;/h4&gt;

&lt;p&gt;Our journey started small in scale, I was a developer and already knew everything inside out. More projects came up, clients liked our approach to business and the quality of our services. I gathered a team of the most experienced developers and founded SolveIt. Initially, we were only doing mobile apps, now we have a team of 51 professionals and 18 services to effectively solve customer problems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-your-role-in-the-management-and-development-of-solveit"&gt;
  &lt;/a&gt;
  What is your role in the management and development of SolveIt?
&lt;/h4&gt;

&lt;p&gt;As a CEO and Founder at SolveIt, I am responsible for crucial decisions, long-term development strategies, and the company’s overall performance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tell-us-about-your-biggest-achievement-in-the-industry"&gt;
  &lt;/a&gt;
  Tell us about your biggest achievement in the industry
&lt;/h4&gt;

&lt;p&gt;I believe the biggest achievement for our company and for me personally is that along the way our clients stop being clients and become our friends, and that’s something you can’t put a price on. We still communicate with all of our clients and the retention rate is more than 85%. They don’t just come back for software development and support, but for product launch and promotion.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-schedule-the-development-phases-of-the-apps-to-promise-the-timeline-to-your-clients"&gt;
  &lt;/a&gt;
  How do you schedule the development phases of the apps to promise the timeline to your clients?
&lt;/h4&gt;

&lt;p&gt;If you look at a high-level project, we usually distinguish between stages: specification/design; development; testing and QA and launch. We actively use Agile and Scrum methodologies for projects. By dividing the project into small iterations (2-week sprints) we ensure a controlled project development process. We pride ourselves in knowing that our clients always know what the team is working on and when the next version of the application will be released. It ensures high customer involvement. With every milestone we report to the client, gain their valuable feedback, and act upon it before taking up the next task. Our focus on quality and a transparent iterative work model has built confidence in us as a strategic and long-term technology partner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-help-your-clients-in-choosing-the-right-yet-profitable-platform-for-app-development"&gt;
  &lt;/a&gt;
  How do you help your clients in choosing the right yet profitable platform for app development?
&lt;/h4&gt;

&lt;p&gt;On each project, we try to fully understand the business processes, the specifics of the subject matter and plans for the project’s development. After that, we give recommendations to the client based on our experience and expertise about how to proceed with their launch.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#which-would-you-suggest-for-a-successful-and-profitable-business-progression-native-or-hybrid-apps-how-do-you-define-the-factors-that-influenced-you-to-make-this-choice"&gt;
  &lt;/a&gt;
  Which would you suggest for a successful and profitable business progression, Native or hybrid apps? How do you define the factors that influenced you to make this choice?
&lt;/h4&gt;

&lt;p&gt;Each of these approaches has its own pros and cons. Hybrid development works best for projects where it is important to be cost-effective and quickly implement new features. However, Hybrid development has a number of drawbacks, in particular, it is less supported and when new versions of Android and IOS are released, the application can be unstable. Native development, in turn, is much more stable, the application runs smoother and there are many more possibilities for making complex animations and UI elements. The disadvantages of native development can be attributed to the high price due to the fact that each platform needs to be developed separately, and in this regard, the speed and cost of introducing new functionality is higher.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-scheme-your-pricing-model-how-do-you-fix-your-budget"&gt;
  &lt;/a&gt;
  How do you scheme your pricing model? How do you fix your budget?
&lt;/h4&gt;

&lt;p&gt;We work on three different engagement models: Time&amp;amp;Material, which means that at the start of the project, we work on pre-estimation and carry out work in sprints with preliminary approval of the scope of work and tasks performed. Payment is made based on the hours worked in the reporting period (2–4 weeks). This model lets you maintain the flexibility of the project and its functionality. Each stage of planning the next sprint, its content, and user-stories will be approved by our customer. Then there’s the Fixed Price model. We estimate the project and its parts and fix the cost. Until the first stage is completed, the next stage does not start. Payment, timeframes, and the scope of work are fixed and are specified in the contract. A contract with a fixed price is most often used for small projects with strictly limited functionality, which will definitely not be changed or supplemented. Finally, we offer the ability to use us as an Offshore Development Centre or Offshore Dedicated Team if you will. This kind of operation is a perfect solution for businesses wishing to augment their software development productivity without bearing too much additional expenses such as hiring extra staff or investing in other resources.&lt;/p&gt;

&lt;p&gt;First, we conduct several interviews with the client and form a commercial proposal, where we show him all the options and our team offers the best way for the customer to develop and evaluate the project based on the requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-helpful-are-the-mobile-apps-developed-by-your-team-for-enhancing-your-clients-business"&gt;
  &lt;/a&gt;
  How helpful are the mobile apps developed by your team, for enhancing your clients’ business?
&lt;/h4&gt;

&lt;p&gt;Each mobile application is unique and useful. We make the product as usable as possible through design, high-quality development and strict testing. Our products have 1M+ end-users worldwide and help clients increase profits and customer loyalty, and open additional paths of monetization for their business.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-according-to-you-are-the-best-practices-to-attain-client-satisfaction"&gt;
  &lt;/a&gt;
  What according to you are the best practices to attain client satisfaction?
&lt;/h4&gt;

&lt;p&gt;The best practices to attain client satisfaction are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsible work approach&lt;/li&gt;
&lt;li&gt;Transparent reports&lt;/li&gt;
&lt;li&gt;Support client’s product during and after development&lt;/li&gt;
&lt;li&gt;High quality for a good price&lt;/li&gt;
&lt;li&gt;Finding an individual approach to each client&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-update-your-business-system-to-be-in-pace-with-the-technological-advancements"&gt;
  &lt;/a&gt;
  How do you update your business system to be in pace with the technological advancements?
&lt;/h4&gt;

&lt;p&gt;I think IT companies have to keep up with technological progress. We actively work with existing customers and offer them the ability to implement innovative solutions, improving their products. We also develop new products, constantly monitoring for technological advancements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-your-thoughts-about-ar-vr-and-internet-of-things-iot"&gt;
  &lt;/a&gt;
  What are your thoughts about AR, VR and Internet of Things (IoT)?
&lt;/h4&gt;

&lt;p&gt;AR, VR, IoT are actively developing areas now and according to analytics and investments in this area still have huge potential for explosive growth. The current market has many industries that are yet to disintegrate into smaller sub-sectors. In the foreseeable future, these technologies will be in the home of every human being on the planet and become an integral part of our lives as the Internet has become nowadays. We as a company are staying on top of it and are developing these areas by introducing advanced developments, frameworks, libraries and methodologies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-you-think-will-be-the-future-of-mobile-technology"&gt;
  &lt;/a&gt;
  What do you think will be the future of Mobile technology?
&lt;/h4&gt;

&lt;p&gt;Every year Google and Apple present new versions of their operating systems which are closer and closer to the features provided by desktop platforms, and sometimes even superior. Qualcomm, Mediatek, Exynos (Samsung) continually update the line of processors constantly raising the bar of performance and energy efficiency, which together with the OS makes for a great user experience. More and more often I, as well as I think you, can see that phones handle a large part of our interactions with the Internet. In line with this vision, we as a company see a great demand from society to innovate and create products on mobile platforms and this demand will increase more and more as it becomes an integral part of our lives.&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://solveit.dev"&gt;https://solveit.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>interview</category>
      <category>ceo</category>
      <category>development</category>
      <category>developer</category>
    </item>
    <item>
      <title>#30DaysofAppwrite : Your First Request</title>
      <author>Damodar Lohani</author>
      <pubDate>Wed, 05 May 2021 12:58:52 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-your-first-request-4oco</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-your-first-request-4oco</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focussed at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#your-first-request"&gt;
  &lt;/a&gt;
  Your First Request
&lt;/h1&gt;

&lt;p&gt;Over the last few days, we've covered Appwrite's admin console, microservices layout, and installation. It's finally time to start a new project! Today, we're going to discuss beginning both web and Flutter applications, so let us get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-platforms-to-project"&gt;
  &lt;/a&gt;
  Adding Platforms to Project
&lt;/h2&gt;

&lt;p&gt;Adding platforms to the project helps us validate requests that come from clients. We validate the origin of the request against the platforms added in the project in the console. Any origin not matching the available platforms will be rejected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-platform"&gt;
  &lt;/a&gt;
  Adding platform
&lt;/h2&gt;

&lt;p&gt;On the console home page below the Usage graph, you can find the list of platforms and the &lt;strong&gt;Add Platform&lt;/strong&gt; button. In order to add a new platform, you can simply tap the &lt;strong&gt;Add Platform&lt;/strong&gt; button and select one of the available options. As of writing this tutorial, &lt;code&gt;Web&lt;/code&gt; and &lt;code&gt;Flutter&lt;/code&gt; platforms are the available options ( with more coming soon! ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVEg1_BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/un3hhnc9p5h7mgfs3nka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVEg1_BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/un3hhnc9p5h7mgfs3nka.png" alt="Add Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;

&lt;p&gt;To add a web platform, all you need is a &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;host&lt;/strong&gt;. &lt;strong&gt;Name&lt;/strong&gt; can be anything you want to name your platform and the &lt;strong&gt;Host&lt;/strong&gt; can be the domain under which your web project is running. For building and testing web projects locally, the host can be &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ePOvma-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8ncjkw8k46nrpr79vn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ePOvma-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8ncjkw8k46nrpr79vn3.png" alt="Add Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;When adding a Flutter Platform, you have two options: Android and iOS. You can add either Android or iOS or both based on what platforms you're building for. You will be able to add other platforms like desktop once they are available.&lt;br&gt;
Once you've selected Android or iOS, all you need is a &lt;strong&gt;name&lt;/strong&gt; and the &lt;strong&gt;application id&lt;/strong&gt;. &lt;strong&gt;Name&lt;/strong&gt; can be anything you want to name your platform and the &lt;strong&gt;Application Id&lt;/strong&gt; can be found in your project. For Android, it's found in your Flutter project's &lt;code&gt;android/app/build.gradle&lt;/code&gt; file. For iOS, it can be found by opening your iOS app in XCode. Usually, by default, if you have not changed, it will be the same for both Android and iOS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6bUYDCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s71q2x3nr3vqplhl66ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6bUYDCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s71q2x3nr3vqplhl66ph.png" alt="Add Platform"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For Flutter web, you add the platform as Web as described above.&lt;/p&gt;

&lt;p&gt;Well now you know what platforms are and how you can add them. Now you are ready to make valid requests to your Appwrite server and get back response. Let's look at how we can do that in both Web and Flutter projects.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-requests-to-appwrite-server"&gt;
  &lt;/a&gt;
  Making Requests to Appwrite Server
&lt;/h2&gt;

&lt;p&gt;Though we can make request to Appwrite server with direct REST API calls, using SDKs will make it a lot more structured and easier. So we will look into how we can make request to Appwrite server using Appwrite's official SDKs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;

&lt;p&gt;Appwrite's &lt;a href="https://github.com/appwrite/sdk-for-web"&gt;Web SDK&lt;/a&gt; is very simple to use. You can add it to your project  using a package manager like &lt;a href="https://npmjs.org"&gt;NPM&lt;/a&gt; or &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt;. The following command adds the Appwrite Web SDK to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can install directly from CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/appwrite@2.0.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you add the dependency, you can now use the Appwrite SDK on your project. In order to make the request, we first need to initialize the SDK with endpoint and project details as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;appwrite&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Set your endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;455x34dfkj&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Project UID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make a request using our SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Register User&lt;/span&gt;
&lt;span class="nx"&gt;appwrite&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;me@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jane Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found on our &lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;Getting Started for Web&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;Appwrite's Flutter SDK is super easy to get started with. First you need to add the Appwrite's SDK as a dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;appwrite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.5.0-dev.1&lt;/span&gt; &lt;span class="c1"&gt;#use the latest version available&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the dependency is added and &lt;code&gt;flutter pub get&lt;/code&gt; is run, you can import and use the Appwrite SDK in your project. Before making a request you must first initialize the SDK with the required endpoint and project ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://localhost/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5e8cf4f46b5e8'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSelfSigned&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Remove in production&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can make requests and handle responses easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Register User&lt;/span&gt;
&lt;span class="n"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;email:&lt;/span&gt; &lt;span class="s"&gt;'me@appwrite.io'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;password:&lt;/span&gt; &lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s"&gt;'My Name'&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found on our &lt;a href="https://appwrite.io/docs/getting-started-for-flutter"&gt;Getting Started for Flutter&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>30daysofappwrite</category>
      <category>javascript</category>
      <category>flutter</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Boger - my new React project, an alternative to Omegle </title>
      <author>Sebastian Korotkiewicz</author>
      <pubDate>Wed, 05 May 2021 12:21:21 +0000</pubDate>
      <link>https://dev.to/skorotkiewicz/boger-my-new-react-project-an-alternative-to-omegle-1m91</link>
      <guid>https://dev.to/skorotkiewicz/boger-my-new-react-project-an-alternative-to-omegle-1m91</guid>
      <description>&lt;p&gt;Hello, dev comunity! :)&lt;br&gt;
Today I wanted to show my new project created in React, Redux and NodeJS, it's a quite unusual alternative to the popular Omegle.&lt;/p&gt;

&lt;p&gt;You can not only talk via text or video chat, but you can also randomize the topic of conversation by pressing the "Break the Ice" button or send each other photos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMOd5mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlwwnyyfvsqzhvxvp3ei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMOd5mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlwwnyyfvsqzhvxvp3ei.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The site always tries to choose first a random stranger who speaks the same language as you, you can change the language in the settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg4aoAJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm6vh1ew925ayt292ot5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg4aoAJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm6vh1ew925ayt292ot5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently I added also creation of Space rooms, where you can talk with chosen person after giving link, as well as creation of Space groups, where there can be many strangers in one group.&lt;/p&gt;

&lt;p&gt;In settings you can also change displaying messages style from text to bubbles or turn off automatic changing of smileys to Emoji :)&lt;/p&gt;

&lt;p&gt;Both photo and video chat are sent via WebRTC, which means that no server is affected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--64HLuYXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h7s8xrmklc462gya4wt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--64HLuYXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h7s8xrmklc462gya4wt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think about my little project? &lt;br&gt;
Any suggestions what I can change, add or improve?&lt;br&gt;
If you have found a bug, please report it to me here, or in the form on the site.&lt;/p&gt;

&lt;p&gt;My project can be found at: &lt;a href="https://boger.js.org/"&gt;boger.js.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If anyone wants to help translate the site, they can do so via Pull Request to GitHub:&lt;br&gt;
&lt;a href="https://github.com/skorotkiewicz/Boger-Translations"&gt;https://github.com/skorotkiewicz/Boger-Translations&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cypress Assertions</title>
      <author>Automation Bro</author>
      <pubDate>Wed, 05 May 2021 12:13:51 +0000</pubDate>
      <link>https://dev.to/automationbro/cypress-assertions-3iac</link>
      <guid>https://dev.to/automationbro/cypress-assertions-3iac</guid>
      <description>&lt;p&gt;In this tutorial, we will cover different types of Cypress Assertions such as the default, implicit and explicit assertions and talk about the difference between the should and the expect assertions.&lt;/p&gt;

&lt;p&gt;Cypress uses the Chai assertion library as well as the extensions of Sinon &amp;amp; jQuery to provide you with dozens of powerful assertions for free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-assertions"&gt;
  &lt;/a&gt;
  Default Assertions
&lt;/h3&gt;

&lt;p&gt;Cypress comes with many default assertions that can be used without having to explicitly define assertions, such as –&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cy.visit():&lt;/strong&gt; every-time you visit a page, Cypress expects the page to return with a 200 status code&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cy.get():&lt;/strong&gt; the get command expects the element to exist in the DOM first before trying to access it&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#implicit-assertions"&gt;
  &lt;/a&gt;
  Implicit Assertions
&lt;/h3&gt;

&lt;p&gt;The implicit assertions used the &lt;code&gt;should()&lt;/code&gt; or the &lt;code&gt;and()&lt;/code&gt; commands when making assertions. This is the preferable way of making assertions in Cypress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92qF1des--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpubgtovgebjau12s4lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92qF1des--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpubgtovgebjau12s4lm.png" alt="implicit1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even chain multiple assertions together –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0oeaqUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prx9fdg9170of87kf87q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0oeaqUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prx9fdg9170of87kf87q.png" alt="implicit2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#explicit-assertions"&gt;
  &lt;/a&gt;
  Explicit Assertions
&lt;/h3&gt;

&lt;p&gt;You should use Explicit assertions when you would like to make multiple assertions for the same subject or when you would like to manipulate your subject before making your assertion. For explicit assertions, you will use the &lt;code&gt;expect&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7tS2ygA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0li96lq70o3xxbmbuqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7tS2ygA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0li96lq70o3xxbmbuqc.png" alt="explicit"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-see-learn-more-about-cypress-assertions-"&gt;
  &lt;/a&gt;
  Check out the video below to see learn more about Cypress Assertions –
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/naTXinVm58Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;👍 Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build your Responsive website without media query</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 05 May 2021 12:04:48 +0000</pubDate>
      <link>https://dev.to/afif/build-your-responsive-website-without-media-query-omj</link>
      <guid>https://dev.to/afif/build-your-responsive-website-without-media-query-omj</guid>
      <description>&lt;p&gt;We cannot talk about web development without talking about Reponsive Design. The latter is now a must and everyone will use Media Queries to build a responsive website.&lt;/p&gt;

&lt;p&gt;Since the introduction of media queries (before 2000), CSS has evolved and now (in 2021) there are a lot of tricks that can help you drastically reduce the usage of media queries and create an optimized code. I will even show you how to replace multiple media queries with only one CSS declaration. &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;strong&gt;PS:&lt;/strong&gt; you have to run all the examples outside DEV to better see the results since the embeded version is very small&lt;/sup&gt;&lt;/p&gt;




&lt;p&gt;I will start with the trivial examples that are widely used but still limited:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-flex-endraw-amp-raw-flexwrap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;flex&lt;/code&gt; &amp;amp; &lt;code&gt;flex-wrap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/zYNggoq"&gt;https://codepen.io/t_afif/pen/zYNggoq&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex: 400px&lt;/code&gt; will set a base width equal to &lt;code&gt;400px&lt;/code&gt;. The items will then wrap if there isn't enough space for the &lt;code&gt;400px&lt;/code&gt;. They will grow to fill the empty spaces and will shrink if the container width is bigger than &lt;code&gt;400px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;✔️ Easy to use, only 2 lines of code are required&lt;br&gt;
❌ We cannot control when the items will wrap&lt;br&gt;
❌ We cannot control the number of items per row&lt;br&gt;
❌ The items of the last row will have a different width&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#-raw-autofit-endraw-amp-raw-minmax-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;auto-fit&lt;/code&gt; &amp;amp; &lt;code&gt;minmax&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvgVVPN"&gt;https://codepen.io/t_afif/pen/wvgVVPN&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Similar to the previous example, the &lt;code&gt;repeat(auto-fit,minmax(400px,1fr))&lt;/code&gt; will define the base width and we will have a similar wrapping behavior.&lt;/p&gt;

&lt;p&gt;✔️ Easy to use, only 1 line of code is required&lt;br&gt;
✔️ The items of the last row will keep the same width&lt;br&gt;
❌ We cannot control when the items will wrap&lt;br&gt;
❌ We cannot control the number of items per row&lt;br&gt;
❌ We don't have the shrink effect of the flexbox so we may face overflow&lt;/p&gt;



&lt;p&gt;We will try to optimize the above examples with some CSS tricks in order to overcome the drawbacks.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-number-of-items"&gt;
  &lt;/a&gt;
  Controling the number of items
&lt;/h3&gt;

&lt;p&gt;In our first example, let's change &lt;code&gt;flex: 400px&lt;/code&gt; to &lt;code&gt;flex: max(400px, 100%/3 - 20px)&lt;/code&gt;. Resize the screen and you will notice that each row will not have more than 3 items (even for a large screen width). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/abpeeeV"&gt;https://codepen.io/t_afif/pen/abpeeeV&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The logic is easy. When the screen width increase, &lt;code&gt;100%/3&lt;/code&gt; will be bigger than &lt;code&gt;400px&lt;/code&gt; so it's the max value that will get used. We cannot have more than 3 items per row if all them have a width equal to &lt;code&gt;100%/3&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-the-hell-is-the-raw-20px-endraw-"&gt;
  &lt;/a&gt;
  What the hell is the &lt;code&gt;20px&lt;/code&gt;??
&lt;/h4&gt;

&lt;p&gt;It's twice the gap we defined. For 3 items we will have 2 gaps so for N items we should use &lt;code&gt;max(400px, 100%/N - (N - 1)*gap)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We can still optimize the formula to remove the gap and use &lt;code&gt;max(400px, 100%/(N + 1) + 0.1%)&lt;/code&gt;. We tell the browser that each item will be equal to &lt;code&gt;100%/(N + 1)&lt;/code&gt; so &lt;code&gt;N + 1&lt;/code&gt; items per row but we add a tiny percentage (the &lt;code&gt;0.1%&lt;/code&gt;) thus one of the items will wrap and we end with only &lt;code&gt;N&lt;/code&gt; items per row! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvJwzbL"&gt;https://codepen.io/t_afif/pen/wvJwzbL&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✔️ Now we can control the maximum number of items per row.&lt;/p&gt;

&lt;p&gt;The same can also be applied to the CSS grid example as well: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/BaWBLge"&gt;https://codepen.io/t_afif/pen/BaWBLge&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I have added CSS variables to easily control the different values.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-shrink-effect"&gt;
  &lt;/a&gt;
  Controling the shrink effect
&lt;/h3&gt;

&lt;p&gt;Using CSS grid we may have overflow if the base width is bigger than the container width unlike with flexbox where we have the &lt;code&gt;flex-shrink&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To overcome this we change &lt;code&gt;max(400px, 100%/(N + 1) + 0.1%)&lt;/code&gt; to &lt;code&gt;clamp(100%/(N + 1) + 0.1%, 400px, 100%)&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a large screen width, the &lt;code&gt;100%/(N + 1) + 0.1%&lt;/code&gt; will be bigger than &lt;code&gt;400px&lt;/code&gt; and we will get our maximum number of items. &lt;/li&gt;
&lt;li&gt;For a small screen width, the &lt;code&gt;100%&lt;/code&gt; will be smaller than &lt;code&gt;400px&lt;/code&gt; and our items will not exceed the container width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/ZEezBGL"&gt;https://codepen.io/t_afif/pen/ZEezBGL&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✔️ We have our shrink effect and no more overflow&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-wrap"&gt;
  &lt;/a&gt;
  Controling the wrap
&lt;/h3&gt;

&lt;p&gt;In all the previous examples, we have no control over the wrap. We don't really know when it will happen. It depends on the base width, the gap, the container width, etc &lt;/p&gt;

&lt;p&gt;To control this we will change our base width (the &lt;code&gt;400px&lt;/code&gt;) with &lt;code&gt;(400px - 100vw)*1000&lt;/code&gt; to get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(100%/(N + 1) + 0.1%, (400px - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks a bit strange but easy to understand. The &lt;code&gt;100vw&lt;/code&gt; is our screen width and logically this value will change on screen resize while the &lt;code&gt;400px&lt;/code&gt; will remain fixed. This will lead us to the following logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;screen width (100vw) &amp;gt; 400px&lt;/code&gt; the difference will be &lt;strong&gt;negative&lt;/strong&gt; so it will get clamped to the &lt;code&gt;100%/(N + 1) + 0.1%&lt;/code&gt; which is a positive value: We have N items per row&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;screen width (100vw) &amp;lt; 400px&lt;/code&gt; the difference will be &lt;strong&gt;positive&lt;/strong&gt;, we multiply with a big value (the &lt;code&gt;1000&lt;/code&gt;) so it will get clamped to the &lt;code&gt;100%&lt;/code&gt;: We have 1 item per row&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/BaWBQqK"&gt;https://codepen.io/t_afif/pen/BaWBQqK&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We did our first media query!&lt;/p&gt;

&lt;p&gt;We were able to move &lt;strong&gt;from N columns to 1 column&lt;/strong&gt; without using &lt;code&gt;@media&lt;/code&gt; and with only one CSS declaration. Our base width has become a breakpoint.&lt;/p&gt;

&lt;p&gt;✔️ We can control when the items will wrap&lt;br&gt;
✔️ We can control the number of items per row&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-about-moving-from-n-columns-to-m-columns"&gt;
  &lt;/a&gt;
  What about moving from N columns to M columns?
&lt;/h3&gt;

&lt;p&gt;We simply update our &lt;code&gt;clamp()&lt;/code&gt; function like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(100%/(N + 1) + 0.1%, (400px - 100vw)*1000, 100%/(M + 1) + 0.1%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think everyone got the trick now. When the screen width is bigger than &lt;code&gt;400px&lt;/code&gt; we fall into the first rule (N items per row). When the screen width is samller than &lt;code&gt;400px&lt;/code&gt; we fall into the second one (M items per row).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/ZEezBgo"&gt;https://codepen.io/t_afif/pen/ZEezBgo&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can easily control the number of items per row and we can decide when to change that number. All this using only one CSS declaration!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-about-moving-from-n-columns-to-m-columns-to-1-column-"&gt;
  &lt;/a&gt;
  What about moving from N columns to M columns to 1 column ?
&lt;/h3&gt;

&lt;p&gt;We can do this by nesting &lt;code&gt;clamp()&lt;/code&gt; functions like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(clamp(100%/(N + 1) + 0.1%, (W1 - 100vw)*1000,100%/(M + 1) + 0.1%), (W2 - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two breakpoints so we will logically need two width (&lt;code&gt;W1&lt;/code&gt; and &lt;code&gt;W2&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;We can see our function like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(clamp( .. ), (W2 - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When the screen width is smaller than &lt;code&gt;W2&lt;/code&gt; we fall into &lt;code&gt;100%&lt;/code&gt;: one item per row&lt;/li&gt;
&lt;li&gt;When the screen width is bigger than &lt;code&gt;W2&lt;/code&gt; we fall into the first &lt;code&gt;clamp()&lt;/code&gt;: We do the logic there

&lt;ul&gt;
&lt;li&gt;when the screen width is smaller than &lt;code&gt;W1&lt;/code&gt; we fall into &lt;code&gt;100%/(M + 1) + 0.1%)&lt;/code&gt;: M items per row&lt;/li&gt;
&lt;li&gt;when the screen width is bigger than &lt;code&gt;W1&lt;/code&gt; we fall into &lt;code&gt;100%/(N + 1) + 0.1%)&lt;/code&gt;: N items per row&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see this in play:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/xxqKgZe"&gt;https://codepen.io/t_afif/pen/xxqKgZe&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We did 2 media queries using only one CSS declaration! Not only this, but we can easily adjust that declaration using CSS variables which means that we can update the logic for different containers easily&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/mdWbRRE"&gt;https://codepen.io/t_afif/pen/mdWbRRE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How many media queries until now? well, I stopped the count ...&lt;/p&gt;

&lt;p&gt;You want more breakpoints? You simply nest another &lt;code&gt;clamp()&lt;/code&gt; function and you have&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-n-columns-to-m-columns-to-p-columns-to-1-column"&gt;
  &lt;/a&gt;
  From N columns to M columns to P columns to 1 column
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/bGqbgYY"&gt;https://codepen.io/t_afif/pen/bGqbgYY&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We have our responsive design without any single media queries&lt;/p&gt;

&lt;p&gt;✔️ Only one line of code&lt;br&gt;
✔️ Easy to update using CSS variables&lt;br&gt;
✔️ We can control the number of items per row&lt;br&gt;
✔️ We can control when the items will wrap&lt;br&gt;
✔️ We don't have overflow on small screens&lt;br&gt;
✔️ All the items have the same width&lt;br&gt;
✔️ Each container can have its own breakpoints&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#container-queries"&gt;
  &lt;/a&gt;
  Container Queries
&lt;/h3&gt;

&lt;p&gt;Everyone is excited to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries"&gt;this new feature&lt;/a&gt; that consider the width of element instead of the screen to create media queries but no need to wait for it. &lt;/p&gt;

&lt;p&gt;The trick I made already cover this feature. We simply change &lt;code&gt;100vw&lt;/code&gt; with &lt;code&gt;100%&lt;/code&gt; and all the logic we made previously will now consider the container width instead of the screen width.&lt;/p&gt;

&lt;p&gt;Resize the below containers and see the magic in play&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/gOmYmgz"&gt;https://codepen.io/t_afif/pen/gOmYmgz&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;I will end this post with a last trick that allow you to change the coloration of your items without using media queries as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;purple&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;green&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We consider 3 gradient layers plus a &lt;code&gt;background-color&lt;/code&gt;. The size of each gradient is defined using one of the breakpoints. If &lt;code&gt;calc()&lt;/code&gt; is negative then the gradient will not show. If &lt;code&gt;calc()&lt;/code&gt; is positive then the size will also be positive and thanks to the repeat feature, it will cover all the area.&lt;/p&gt;

&lt;p&gt;The order is very important. Below a table to better understand:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[0 W3[&lt;/th&gt;
&lt;th&gt;[W3 W2[&lt;/th&gt;
&lt;th&gt;[W2 W1[&lt;/th&gt;
&lt;th&gt;[W1 infinity[&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;✔️purple&lt;/td&gt;
&lt;td&gt;❌purple&lt;/td&gt;
&lt;td&gt;❌purple&lt;/td&gt;
&lt;td&gt;❌purple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✔️blue&lt;/td&gt;
&lt;td&gt;✔️blue&lt;/td&gt;
&lt;td&gt;❌blue&lt;/td&gt;
&lt;td&gt;❌blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✔️green&lt;/td&gt;
&lt;td&gt;✔️green&lt;/td&gt;
&lt;td&gt;✔️green&lt;/td&gt;
&lt;td&gt;❌green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✔️red&lt;/td&gt;
&lt;td&gt;✔️red&lt;/td&gt;
&lt;td&gt;✔️red&lt;/td&gt;
&lt;td&gt;✔️red&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The red color is always shown and at each breakpoint one of the gradient is displayed covering the bottom layer.&lt;/p&gt;

&lt;p&gt;Here is a demo with all the features together. Run at full screen and resize:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvJwdRW"&gt;https://codepen.io/t_afif/pen/wvJwdRW&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To make the coloration work based on the container width, we update the code slightly and we use pseudo element that we position relatively to the container and we clip the overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/zYZOwQJ"&gt;https://codepen.io/t_afif/pen/zYZOwQJ&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A related Stack Overflow question where I am using such trick: &lt;a href="https://stackoverflow.com/q/56669587/8620333"&gt;How to change the color of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; Element depending on its height or width?&lt;/a&gt;. I am also changing the text coloration and the borders based on the width or the height.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Now you have a good trick that allow you to control your responsive layout without using media queries and with only few lines of code. Of course, this is not a replacement to media queries. It's an optimization that can help you reduce the amount of code.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>UI Dev Newsletter #55</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Wed, 05 May 2021 11:23:29 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-55-7mb</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-55-7mb</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3tceHl0"&gt;The Humble img Element And Core Web Vitals&lt;/a&gt;&lt;br&gt;
Addy Osmani describes how images impact Core Web Vitals and how to improve them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3xHzdh9"&gt;Advanced Core Web Vitals: A Technical SEO Guide&lt;/a&gt;&lt;br&gt;
Jamie Indigo writes an in-depth guide on Core Web Vitals from SEO perspective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3e8vGAp"&gt;CSS Flexbox Tutorial with Flexbox Properties Cheat Sheet&lt;/a&gt;&lt;br&gt;
Joy Shaheb explains how CSS Flexbox works and describes the CSS Flexbox basics for responsive sites. Cute animal graphics included.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3e9TyDM"&gt;Windows 10 grid hover effect using HTML, CSS, and vanilla JS&lt;/a&gt;&lt;br&gt;
Jash Gopani explains the process of recreating the Windows 10 grid hover effect with CSS and JS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3h0lWKJ"&gt;Identify and Extract Pseudo-Element Selectors from built-in HTML Elements using DevTools&lt;/a&gt;&lt;br&gt;
Bramus Van Damme shows how to use DevTools to dissect and peek inside HTML elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3uhdKcQ"&gt;How to disable scaling for stroke width&lt;/a&gt;&lt;br&gt;
Stefan Judis shows how to use a vector-effect attribute to control how transformations affect stroke width.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/333wG2y"&gt;Exploring color-contrast() for the First Time&lt;/a&gt;&lt;br&gt;
Chris Coyier shares impressions on a color-contrast() function and shares a video for easier understanding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3gQGZ29"&gt;165+ Developer Resources I Discovered in 2020-2021&lt;/a&gt;&lt;br&gt;
Gedalya Krycer shares a comprehensive, well-organized list of helpful web dev resources—from HTML, CSS, and JavaScript to WordPress, Git, and design.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top WordPress Plugins to Pass the Google Core Web Vitals Test– 2021</title>
      <author>Christa Elrod</author>
      <pubDate>Wed, 05 May 2021 11:06:38 +0000</pubDate>
      <link>https://dev.to/christaelrod/top-wordpress-plugins-to-pass-the-google-core-web-vitals-test-2021-4jpg</link>
      <guid>https://dev.to/christaelrod/top-wordpress-plugins-to-pass-the-google-core-web-vitals-test-2021-4jpg</guid>
      <description>&lt;p&gt;This article discusses about Google Core Web Vitals and helps readers to understand how their websites can pass the Core Web Vitals test and get optimized for better performance. Core Web Vitals influences a website’s search engine ranking and so if your website fails to pass this test, it won’t get a higher  rank in search engine results.&lt;/p&gt;

&lt;p&gt;Most websites fail to abide by the standards set by the Core Web Vitals and the prime reasons for this are CSS issues, hosting problems, large-sized images, JavaScripts, and web fonts.&lt;/p&gt;

&lt;p&gt;This article explains how you can pass Core Web Vitals test using popular WordPress Plugins. These plugins are available for free and they will help you boost your website’s rank in the search engine results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-google-core-web-vitals"&gt;
  &lt;/a&gt;
  Understanding Google Core Web Vitals
&lt;/h2&gt;

&lt;p&gt;Google defines Core Web Vitals as a division of Web Vitals that remains relevant for all website pages and it should be taken into consideration by website owners. Every element of the Core Web Vitals stands for a separate user-experience aspect and it symbolizes realistic experience of a user-oriented outcome.&lt;/p&gt;

&lt;p&gt;In simple terms, Core Web Vitals refers to an evaluation system that emphasizes on user experience, site performance, and on page loading time. If your website has a low speed, the performance will be undesirable and the site will lack user-friendliness. Visitors want to view the content as fast as they can and any delay might make your visitors to leave your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-core-web-vitals"&gt;
  &lt;/a&gt;
  How to Improve Core Web Vitals
&lt;/h2&gt;

&lt;p&gt;The Google makes use of 3 chief metrics to assign Core Web Vitals score:&lt;/p&gt;

&lt;p&gt;• &lt;em&gt;Largest Contentful Paint (LCP)&lt;/em&gt;: This provides a measure of loading performance. To deliver an excellent user experience, LCP must appear within 2.5 seconds of the initial page loading time. &lt;br&gt;
• &lt;em&gt;First Input Delay (FID)&lt;/em&gt;: This is a measure of interactivity. Web pages should ideally have less than 100 milliseconds of FID for delivering desired user experience. &lt;br&gt;
• &lt;em&gt;Cumulative Layout Shift (CLS)&lt;/em&gt;: This is a measure of visual stability. To generate a positive user experience, the CLS for pages needs to be less than 0.1.&lt;/p&gt;

&lt;p&gt;Tools that would help you evaluate compliance with Core Web Vitals would consider a web page to be qualifying if it fulfills 75 percent of the targets for the three abovementioned parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-core-web-vitals"&gt;
  &lt;/a&gt;
  Testing Core Web Vitals
&lt;/h2&gt;

&lt;p&gt;So if you need to check if your website can pass the Google PageSpeed Insights test, you should test if your website adheres to the standards for Google speed Core Web Vitals and optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-pagespeed-insights"&gt;
  &lt;/a&gt;
  Google PageSpeed Insights
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xT6_TJZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6b4lwyhaprgml47k8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xT6_TJZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6b4lwyhaprgml47k8l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You need not be concerned if you fail to get your website optimized or if you fail to qualify for the &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Google Pagespeed&lt;/a&gt; test. It is quite surprising to note that only a handful of websites are qualified to pass Google’s mobile and desktop Speed Test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boosting-the-performance-of-your-wordpress-sites-core-web-vitals-with-plugins"&gt;
  &lt;/a&gt;
  Boosting the performance of Your WordPress Site’s Core Web Vitals with Plugins
&lt;/h2&gt;

&lt;p&gt;In case your website fails at the &lt;a href="https://web.dev/vitals/"&gt;Google Core Web Vitals&lt;/a&gt; PageSpeed test, we have listed some really awesome WordPress plugins that would promote better website optimization. With Core Web Vitals being a critical SEO ranking factor, these plugins would help your website to rank high on search engine results.&lt;/p&gt;

&lt;p&gt;Before discussing about optimization plugins for WordPress, one of the critical factors in qualifying for the Core Web Vitals is a dependable WordPress hosting provider. Reputed hosting service providers would ensure that your website optimized and managed to deliver the highest standard of performance.&lt;/p&gt;

&lt;p&gt;Free WordPress plugins For Adhering to the Requirements of Google Core Web Vitals&lt;/p&gt;

&lt;p&gt;We have listed some of the most efficient WordPress plugins that would help you to adhere to the requirements of the Core Web Vitals. You may consider installing this plugins to &lt;a href="https://www.proglobalbusinesssolutions.com/wordpress-website-speed-optimization/"&gt;boost the speed of your WordPress site&lt;/a&gt; and to decrease the load time to just 2 seconds.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Autoptimize&lt;br&gt;
With Autoptimize, you can optimize your WordPress site very easily. This tool can cache styles and scripts, puts in CSS at the head of the page, put off the aggregated CSS, minimizes HTML and moves the scripts to the footer. Images can be optimized using this tool and lazy-loading is possible too. It is compatible with AVIF and WebP formats and supports optimization of Google fonts. You can make use of the API to customize this tool to serve the specific needs of websites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jetpack Boost&lt;br&gt;
This plugin facilitates single-click optimization that would boost your website’s performance while increasing the web vitals scores for better page ranking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hummingbird &lt;br&gt;
You can optimize website speed, activate cache, and lessen CSS. By installing this plugin in your Wordpress site, you can increase page speed and get your website’s performance optimized. It provides ground-breaking caching abilities, promotes lazy load integration, and performs excellent file compression function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smush &lt;br&gt;
This plugin allows for image optimization, resizing, and compression, which, in turn, boosts page speed. Developed by WPMU DEV, this tool is completely free to use and it can compress images without compromising on the image quality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WP-Optimize &lt;br&gt;
This is a cutting-edge plugin that boosts the performance of WordPress sites. You can use this tool for database-cleaning, image compression, and caching. The cache capability is based on the capabilities of the fastest cache engine of the world. This is a simple and easy-to-use tool that can make your website load fast and run optimally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LiteSpeed Cache&lt;br&gt;
The LiteSpeed Cache is an acceleration tool that comprises of a special server-specific cache and a host of optimization capabilities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ShortPixel Image Optimizer&lt;br&gt;
ShortPixel is a very efficient image optimization tool that can compress old images and PDF documents with just a one-click approach. It can be used easily and it is a lightweight tool that can boost a website’s search engine ranking, website traffic, and consequently sales. This plugin allows new photos to be resized and optimized automatically when they are being uploaded on the website. This plugin works well with various sliders, galleries, and Ecommerce plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AMP&lt;br&gt;
The AMP plugin is a very effective tool which leads to the creation of secure, fast, accessible, and engaging websites. It would help your website to load fast and improve visitor engagement. Previously, AMP, which is the short-form of Accelerated Mobile Pages, was useful only for mobile websites. Today, AMP has evolved as a useful, responsive plugin for mobile as well as desktop systems. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WP-Rocket&lt;br&gt;
WP Rocket is recognized as a very powerful caching plugin in the present-day market. It would boost your WordPress site’s speed while creating a positive impact on Google rankings and sales conversions. You do not need coding in order to be able to use it. This plugin operates on the basis of best practices on web performance. You do not require high level of technical knowledge in order to be able to use it optimally.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Google Core Web Vital is a crucial factor influencing SEO ranking to a great extent. You should ensure that your website is optimized to deliver excellent user experience and that it gets loaded fast on desktop as well as mobile devices. The free WordPress plugins that we discussed about would promote perfect optimization of your website, allowing your website to load and run faster. In case you still find your website to be slow, consider switching to a reliable hosting service provider that delivers cache optimization service as well.&lt;/p&gt;

&lt;p&gt;Need support? PGBS is a reputed web design company that delivers world-class &lt;a href="https://dev.toweb%20design%20services"&gt;https://www.proglobalbusinesssolutions.com/web-design-services/&lt;/a&gt; and Wordpress site optimization support, allowing websites to rank high in search engine results. Call us now for a free quote. &lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>pagespeed</category>
      <category>corewebvitals</category>
    </item>
    <item>
      <title>Shell Script Basics</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 05 May 2021 10:54:06 +0000</pubDate>
      <link>https://dev.to/siddharth2016/shell-script-basics-1jnk</link>
      <guid>https://dev.to/siddharth2016/shell-script-basics-1jnk</guid>
      <description>&lt;p&gt;The best thing about GNU/Linux is that it’s packed with utilities that improve productivity immensely. One such utility is a shell that can help accomplish complex tasks with just a few sequences of commands. Most of the time, users operate shell in an interactive way. &lt;/p&gt;

&lt;p&gt;However, it becomes really productive when we leverage the scripting capabilities of the shell.&lt;/p&gt;

&lt;p&gt;In this article, we are going to explore the basics of shell scripting, how simple &lt;code&gt;echo&lt;/code&gt; command can be used in a shell script file, how to write comments, working with variables and conditionals.&lt;/p&gt;

&lt;p&gt;Keeping it short and simple, let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#shell-script-printing"&gt;
  &lt;/a&gt;
  Shell Script Printing
&lt;/h3&gt;

&lt;p&gt;When we are working with shell scripts printing on the output screen is called echoing which can be done using &lt;code&gt;echo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Shell"&lt;/span&gt;
Hello Shell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's do this inside a shell script file. Follow the below steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a file, name it whatever you want with the &lt;code&gt;.sh&lt;/code&gt; extension. Let's say &lt;code&gt;echo_script.sh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add following inside the file - &lt;code&gt;echo "Hello Shell"&lt;/code&gt;, hit &lt;code&gt;Save&lt;/code&gt; and open a terminal on the file location.&lt;/li&gt;
&lt;li&gt;On the terminal, write - &lt;code&gt;$ bash echo_script.sh&lt;/code&gt; and hit enter, you should be able to see - &lt;code&gt;Hello Shell&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#shell-script-comments"&gt;
  &lt;/a&gt;
  Shell Script Comments
&lt;/h3&gt;

&lt;p&gt;Comments are used to improve the readability of the script. Shell uses the pound &lt;code&gt;#&lt;/code&gt; symbol for comments. A line beginning with the pound &lt;code&gt;#&lt;/code&gt; symbol is ignored by the shell interpreter during execution. &lt;/p&gt;

&lt;p&gt;The script given below shows the usage of the comment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Display Hello Shell using echo command of shell, filename.sh&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Shell"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to terminal and type - &lt;code&gt;$ bash filename.sh&lt;/code&gt; (replace &lt;code&gt;filename&lt;/code&gt; with whatever name you have given) and hit enter. You should be able to see - &lt;code&gt;Hello Shell&lt;/code&gt; without printing anything given after the &lt;code&gt;#&lt;/code&gt; symbol.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shell-script-variables"&gt;
  &lt;/a&gt;
  Shell Script Variables
&lt;/h3&gt;

&lt;p&gt;We can define variables to store information, which can be accessed within the shell script. There are certain rules we need to follow while defining variables:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The variable name can contain any combination of letters from A-Z or a-z, digits from 0-9 or an underscore (_) character.&lt;/li&gt;
&lt;li&gt;The variable name should start with a letter or an underscore character.&lt;/li&gt;
&lt;li&gt;Variables are case sensitive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By convention, shell variables are defined in the upper case. Given below is a simple script, which shows the usage of a variable within it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;hello.sh
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"CodeKaro"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; command is used to display the content of a file given after that. Try your hands on it.&lt;/p&gt;

&lt;p&gt;So, we have a file &lt;code&gt;hello.sh&lt;/code&gt; which contains a variable &lt;code&gt;NAME&lt;/code&gt; which we used in the &lt;code&gt;echo&lt;/code&gt; statement as &lt;code&gt;$NAME&lt;/code&gt; that is after the &lt;code&gt;$&lt;/code&gt; symbol. Here we saw variable declaration and how inside double quotes a variable can be used.&lt;/p&gt;

&lt;p&gt;If you hit - &lt;code&gt;$ bash hello.sh&lt;/code&gt; and hit enter, you should be able to see - &lt;code&gt;Hello CodeKaro&lt;/code&gt; on the terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shell-script-conditionals"&gt;
  &lt;/a&gt;
  Shell Script Conditionals
&lt;/h3&gt;

&lt;p&gt;Like other programming languages, shell supports conditional expressions like – &lt;em&gt;if&lt;/em&gt;, &lt;em&gt;if-else&lt;/em&gt; and &lt;em&gt;case&lt;/em&gt;. Let us understand this with simple examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt; expression: In case we want to verify whether a file exists or not, we can use the if expression, as follows:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;file.txt &lt;span class="c"&gt;#this creates a file&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;file_existance.sh
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; file.txt &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; “file.txt file exists”
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script given above generates the following output when it is executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash file_existance.sh
file.txt file exists
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;if-else&lt;/code&gt; expression: Let us modify the above script to generate output when the file does not exist:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;file.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;file_existance.sh
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; file.txt &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; “file.txt file exists”
&lt;span class="k"&gt;else
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; “file.txt file does not exists”
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type following and hit enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash file_existance.sh
file.txt file does not exists
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;case&lt;/code&gt; statement: Shell provides a switch statement-like functionality using the case statement. Let us understand this with the example given below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;case_statement.sh
&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; “Enter the day: “ DAY

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$DAY&lt;/span&gt; &lt;span class="k"&gt;in
&lt;/span&gt;Mon&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; “Today is Monday”
&lt;span class="p"&gt;;;&lt;/span&gt;

Tue&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; “Today is Tuesday”
&lt;span class="p"&gt;;;&lt;/span&gt;

Wed&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; “Today is Wednesday”
&lt;span class="p"&gt;;;&lt;/span&gt;

&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; “Unknown day”
&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script given above generates the following output when it is executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash case_statement.sh
Enter the day: Mon
Today is Monday
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash case_statement.sh
Enter the day: Tue
Today is Tuesday
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash case_statement.sh
Enter the day: Invalid
Unknown day
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;case&lt;/code&gt; statement, an asterisk (*) denotes a default case.&lt;/p&gt;

&lt;p&gt;Well, that's it from me. &lt;/p&gt;

&lt;p&gt;We covered printing, variables, comments and conditionals, not too much, right? &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Image Credits - &lt;a href="https://www.freepik.com/vectors/book"&gt;pch.vector&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>shell</category>
      <category>scripting</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Twinkle, twinkle Web Component star</title>
      <author>Danny Engelman</author>
      <pubDate>Wed, 05 May 2021 10:05:51 +0000</pubDate>
      <link>https://dev.to/dannyengelman/twinkle-twinkle-web-component-star-23d7</link>
      <guid>https://dev.to/dannyengelman/twinkle-twinkle-web-component-star-23d7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#twinkle-twinkle-web-component-star"&gt;
  &lt;/a&gt;
  &lt;em&gt;Twinkle, twinkle, Web Component star&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#how-i-wonder-what-you-are"&gt;
  &lt;/a&gt;
  &lt;em&gt;How I wonder what you are&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#often-you-keep-me-so-dry"&gt;
  &lt;/a&gt;
  &lt;em&gt;often you keep me so DRY&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#or-you-chart-an-easy-pie"&gt;
  &lt;/a&gt;
  &lt;em&gt;or you chart an easy pie*&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#twinkle-twinkle-web-component-star"&gt;
  &lt;/a&gt;
  &lt;em&gt;Twinkle, twinkle, Web Component star&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-am-learning-what-you-are"&gt;
  &lt;/a&gt;
  &lt;em&gt;I am learning what you are&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#to-react-i-say-bye-bye"&gt;
  &lt;/a&gt;
  &lt;em&gt;To React I say bye, bye&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-will-be-a-happy-frontend-guy"&gt;
  &lt;/a&gt;
  &lt;em&gt;I will be a happy Front-End guy&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#twinkle-twinkle-web-component-star"&gt;
  &lt;/a&gt;
  &lt;em&gt;Twinkle, twinkle Web Component star&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#now-i-know-how-great-you-are"&gt;
  &lt;/a&gt;
  &lt;em&gt;Now I know how great you are&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;(*) See Dev.to post: &lt;a href="https://fiddle.jshell.net/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;What web technologies are required to draw a pie-chart in 2021&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#learning-web-components"&gt;
  &lt;/a&gt;
  Learning Web Components
&lt;/h1&gt;

&lt;p&gt;I learned Web Components by &lt;em&gt;&lt;strong&gt;asking&lt;/strong&gt;&lt;/em&gt; loads of questions on StackOverflow.&lt;/p&gt;

&lt;p&gt;Now I learn more and more about Web Components, &lt;br&gt;
by &lt;em&gt;&lt;strong&gt;answering&lt;/strong&gt;&lt;/em&gt; questions on Stack Overflow.&lt;/p&gt;

&lt;p&gt;Last year, in the SVG topic, someone asked how to do a &lt;strong&gt;half-star&lt;/strong&gt; Rating&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like many I started by drawing &lt;strong&gt;half&lt;/strong&gt; star icons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;then realised it is easier to draw &lt;strong&gt;all 5 stars&lt;/strong&gt; &lt;br&gt;
by &lt;em&gt;cutting them &lt;strong&gt;out&lt;/strong&gt;&lt;/em&gt; the green &lt;em&gt;&lt;strong&gt;foreground&lt;/strong&gt;&lt;/em&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A gold rectangle &lt;em&gt;&lt;strong&gt;behind&lt;/strong&gt;&lt;/em&gt; the green foreground then indicates the value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#dry-dont-repeat-yourself"&gt;
  &lt;/a&gt;
  DRY (Don't Repeat Yourself)
&lt;/h3&gt;

&lt;p&gt;For full explanation on how the SVG and Web Component work see: &lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/65366162/is-it-possible-to-only-show-half-of-a-svg-icon"&gt;https://stackoverflow.com/questions/65366162/is-it-possible-to-only-show-half-of-a-svg-icon&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#a-ltstarratinggt-web-component"&gt;
  &lt;/a&gt;
  A &amp;lt;star-rating&amp;gt; Web Component
&lt;/h1&gt;

&lt;p&gt;All the Web Component then has to do is draw &lt;strong&gt;&lt;em&gt;double&lt;/em&gt; the amount of &lt;em&gt;invisible&lt;/em&gt; rectangles&lt;/strong&gt; to capture the mouse position &lt;strong&gt;over&lt;/strong&gt; the "half-stars".&lt;/p&gt;

&lt;p&gt;A fully configurable &amp;lt;star-rating&amp;gt; Web Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;star-rating&lt;/span&gt; &lt;span class="na"&gt;stars=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt; &lt;span class="na"&gt;rating=&lt;/span&gt;&lt;span class="s"&gt;"3.5"&lt;/span&gt;
             &lt;span class="na"&gt;bgcolor=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt; &lt;span class="na"&gt;nocolor=&lt;/span&gt;&lt;span class="s"&gt;"grey"&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"gold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/star-rating&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;star-rating&lt;/span&gt; &lt;span class="na"&gt;stars=&lt;/span&gt;&lt;span class="s"&gt;7&lt;/span&gt; &lt;span class="na"&gt;rating=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt;
             &lt;span class="na"&gt;bgcolor=&lt;/span&gt;&lt;span class="s"&gt;"rebeccapurple"&lt;/span&gt; &lt;span class="na"&gt;nocolor=&lt;/span&gt;&lt;span class="s"&gt;"beige"&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"goldenrod"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/star-rating&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHJ65-zQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/A4C5aox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHJ65-zQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/A4C5aox.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can then be created with &lt;strong&gt;22 lines &lt;em&gt;vanilla&lt;/em&gt; JavaScript code&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Play with the code, tweak it, break it, mend it again, enhance it, learn!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/jv8feugr/embedded/js,result,html,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;br&gt;
&lt;br&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/62f1eLay/embedded/result,html,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>webdev</category>
      <category>svg</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Performance Testing with k6 - 02 - Multiple Tasks</title>
      <author>Hari Bhandari</author>
      <pubDate>Wed, 05 May 2021 09:35:22 +0000</pubDate>
      <link>https://dev.to/jankaritech/performance-testing-with-k6-02-multiple-tasks-2im1</link>
      <guid>https://dev.to/jankaritech/performance-testing-with-k6-02-multiple-tasks-2im1</guid>
      <description>&lt;p&gt;In the first part of this series we learnt about creating a very basic k6 test. In this tutorial we will create some more realistic and interesting tests.&lt;br&gt;
 For that we better have a real App to test. For simplicity and because I'm familiar with it I've chosen &lt;a href="https://owncloud.com/"&gt;ownCloud&lt;/a&gt;, a file hosting and sharing &lt;br&gt;
 solution similar to Dropbox.&lt;/p&gt;

&lt;p&gt;The easiest way to get a test ownCloud instance up and running is to use docker.&lt;/p&gt;

&lt;p&gt;Just run: &lt;code&gt;docker run -p 8080:8080 --name owncloud owncloud/server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This magic &lt;code&gt;docker run&lt;/code&gt; command should give you a fresh ownCloud installation that can be reached at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is one user pre-setup called &lt;code&gt;admin&lt;/code&gt; with the super-secure password &lt;code&gt;admin&lt;/code&gt;. You can login into the UI and upload files, create new users, share files and folders, etc.&lt;br&gt;
After having played a bit with ownCloud itself, let's get back to k6.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-creating-file"&gt;
  &lt;/a&gt;
  Test Creating file
&lt;/h3&gt;

&lt;p&gt;Create a file (&lt;code&gt;script.js&lt;/code&gt;) and add the following contents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import http from 'k6/http'
import encoding from 'k6/encoding'
import { check } from 'k6'
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.0.0/index.js'

export let options = {
  iterations: 100,
  vus: 10
}

export default function() {
  const fileName = `${uuidv4()}.txt`
  const url = `http://localhost:8080/remote.php/webdav/${fileName}`
  const body = 'some content'
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin'),
    'Content-Type': 'application/x-www-form-urlencoded'
  }

  const response = http.request('PUT', url, body, { headers: headers })
  check(response, {
    'status is 201': (r) =&amp;gt; r.status === 201 || 204
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Here, in the &lt;code&gt;options&lt;/code&gt; object we are providing &lt;code&gt;iterations: 100&lt;/code&gt; and &lt;code&gt;vus: 10&lt;/code&gt; i.e. 100 test runs will be divided among 10 vus. To specify how &lt;code&gt;iterations&lt;/code&gt; is divided among &lt;code&gt;vus&lt;/code&gt; we can provide &lt;code&gt;executor&lt;/code&gt; options. For more details about executors check &lt;a href="https://k6.io/docs/using-k6/scenarios/executors/"&gt;https://k6.io/docs/using-k6/scenarios/executors/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are sending a &lt;code&gt;PUT&lt;/code&gt; request to the owncloud endpoint to create a file. For authorization header we are using user &lt;code&gt;admin&lt;/code&gt; with password &lt;code&gt;admin&lt;/code&gt; that we created. So, basically the &lt;code&gt;10 vus&lt;/code&gt; in options will be using &lt;code&gt;admin&lt;/code&gt; user authorization&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since it's not possible to create multiple files with the same name in owncloud, we are using &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;uuid&lt;/a&gt; in &lt;code&gt;fileName&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#test-deleting-file"&gt;
  &lt;/a&gt;
  Test deleting file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import http from 'k6/http'
import encoding from 'k6/encoding'
import { check } from 'k6'
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.0.0/index.js'

export let options = {
  iterations: 100,
  vus: 10
}

const createFile = url =&amp;gt; {
  const body = 'some content'
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin'),
    'Content-Type': 'application/x-www-form-urlencoded'
  }

  const response = http.request('PUT', url, body, { headers: headers })
  check(response, {
    'status is 201': (r) =&amp;gt; r.status === 201 || 204
  })
}

const deleteFile = (url) =&amp;gt; {
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin')
  }
  const response = http.request('DELETE', url, undefined, { headers: headers })
  check(response, {
    'status is 204': (r) =&amp;gt; r.status === 204
  })
}

export default function() {
  const fileName = `${uuidv4()}.txt`
  const url = `http://localhost:8080/remote.php/webdav/${fileName}`
  createFile(url)
  deleteFile(url)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are adding code to delete a file. Also, I have separated the logic for file creation and deletion into two separate functions &lt;code&gt;createFile&lt;/code&gt; and &lt;code&gt;deleteFile&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settings-stages"&gt;
  &lt;/a&gt;
  Settings Stages
&lt;/h3&gt;

&lt;p&gt;We can ramp up/down the VU level during the test using &lt;code&gt;stages&lt;/code&gt;  The &lt;code&gt;options.stages&lt;/code&gt; property allows you to configure ramping behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
export let options = {
  stages: [
    { duration: '30s', target: 20 },
    { duration: '1m30s', target: 10 },
    { duration: '20s', target: 0 }
  ]
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;First Stage(30s duration): Initially at the start will have 1 VU and then k6 will linearly ramp up from 1VU to 20VUs during the span of 30 seconds.&lt;/li&gt;
&lt;li&gt;Second Stage(1m30s duration): At the start of this stage we will have 20Vus from the first stage, but it will linearly ramp down to 10Vus at the end of the duration of this stage.&lt;/li&gt;
&lt;li&gt;Third Stage(20s duration): During this stage 10Vus from the second stage will linearly ramp down to zero at the end of 20 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if we run the test using &lt;code&gt;k6 run script.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqAS3EV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34328907/116341872-6baf0d00-a801-11eb-97a4-340fbeb165ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqAS3EV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34328907/116341872-6baf0d00-a801-11eb-97a4-340fbeb165ee.png" alt="Screenshot from 2021-04-28 09-08-56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in above screenshot our test runs for a total duration of &lt;code&gt;2m20s&lt;/code&gt;(30s + 1m30s + 20s), while &lt;code&gt;vus&lt;/code&gt; &lt;code&gt;max&lt;/code&gt; is &lt;code&gt;20&lt;/code&gt; (end of the first stage) and it's &lt;code&gt;min&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; which happens at the beginning of the first stage.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Multilingual Markdown Documentations and Posts in Seconds</title>
      <author>Denis Augsburger</author>
      <pubDate>Wed, 05 May 2021 09:30:56 +0000</pubDate>
      <link>https://dev.to/denisaugsburger/multilingual-markdown-documentations-and-posts-in-seconds-4d3e</link>
      <guid>https://dev.to/denisaugsburger/multilingual-markdown-documentations-and-posts-in-seconds-4d3e</guid>
      <description>&lt;p&gt;The translation of Markdown files is commonly needed in technical documentations and headless content management systems, where you want to reach a target audience that speaks different languages. I'm gonna show you how you can translate Markdown easy and fast without compromising on quality. If you'd like to get a head start and try out the Markdown Translator just &lt;a href="https://simpleen.io/signup"&gt;sign up&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markdown-translation-tool"&gt;
  &lt;/a&gt;
  Markdown Translation Tool
&lt;/h2&gt;

&lt;p&gt;More and more tools use Markdown to structure their content. Some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docusaurus, Gitbook for documentations&lt;/li&gt;
&lt;li&gt;Hugo, Jekyll, GatsbyJS as static site generators (SSG)&lt;/li&gt;
&lt;li&gt;Contentful, Strapi, SquareSpace as content management systems (CMS) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the project, it is necessary to generate multilingual content and update it regularly. The traditional translation process can be time-consuming and waiting on (human) translations can block your release cycles. Therefore we were looking for a fast and reliable solution. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-challenges"&gt;
  &lt;/a&gt;
  Common Challenges
&lt;/h3&gt;

&lt;p&gt;We've tried out several translation tools and inserted Markdown but we were not satisfied with the translation results they provided.&lt;br&gt;
Common problems we encountered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Broken Markdown Syntax&lt;/li&gt;
&lt;li&gt;Translation of things that should not be translated, like Code Snippets, Emoji's&lt;/li&gt;
&lt;li&gt;Different styles in translation results&lt;/li&gt;
&lt;li&gt;Setup/Installion necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at how a simple Markdown file is translated from English to German if you use it directly in DeepL or Google Translate and compare it to the Simpleen Markdown Translator &lt;/p&gt;

&lt;p&gt;The file contains a list, some emoji's and headers. Dev.to doesn't support fenced code within their blog posts, therefore the tripple ticks are substituted by html code tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Setup&lt;/span&gt;

Install the CLI to &lt;span class="gs"&gt;**translate**&lt;/span&gt; files from source to target path.

&lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
yarn add simpleen
yarn run simpleen init
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;

You can search for files in &lt;span class="sb"&gt;`./blog/posts/en/*.md`&lt;/span&gt; and translate them to &lt;span class="sb"&gt;`./blog/posts/$locale/$FILE.md`&lt;/span&gt;.

&lt;span class="gu"&gt;## Additional support :smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Files
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deepl-markdown-example"&gt;
  &lt;/a&gt;
  DeepL Markdown Example
&lt;/h3&gt;

&lt;p&gt;With DeepL the result looks like the following.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Einrichtung&lt;/span&gt;

Installieren Sie die CLI zum &lt;span class="gs"&gt;**Übersetzen**&lt;/span&gt; von Dateien vom Quell- in den Zielpfad.

&lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"Shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
yarn add simpleen
yarn run simpleen init
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;

Sie können nach Dateien in &lt;span class="sb"&gt;`./blog/posts/de/*.md`&lt;/span&gt; suchen und sie in &lt;span class="sb"&gt;`./blog/posts/$locale/$FILE.md`&lt;/span&gt; übersetzen.

&lt;span class="gu"&gt;## Zusätzliche Unterstützung :smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Dateien
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As you can see the code snippet is broken because the fenced code block now starts with two backticks instead of three. Also, the name of the language Shell is now upper-cased. The list, the emoji and the paths are handled correctly in this simple case. The bold text is also marked correctly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-translate-markdown-example"&gt;
  &lt;/a&gt;
  Google Translate Markdown Example
&lt;/h3&gt;

&lt;p&gt;Let's compare this with Google Translate:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Einrichten&lt;/span&gt;

Installieren Sie die CLI, um Dateien von der Quelle in den Zielpfad zu übersetzen.

&lt;span class="nt"&gt;&amp;lt;brokencode&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Garn hinzufügen einfach
Garn laufen einfach init
&lt;span class="nt"&gt;&amp;lt;/brokencode&amp;gt;&lt;/span&gt;

Sie können nach Dateien in "./blog/posts/en / &lt;span class="err"&gt;*&lt;/span&gt;. Md" suchen und diese in ". / Blog / posts / $ locale / $ FILE.md" übersetzen.

&lt;span class="gu"&gt;## Zusätzliche Unterstützung: smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Dateien
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result with Google Translate is worse than DeepL. The code snippet is broken because the backticks of the code snippet are seperated with a space. Also, the content is translated with is not desirable. The paths are splitted and differently marked. The Emoji is also broken. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simpleen-markdown-translator"&gt;
  &lt;/a&gt;
  Simpleen Markdown Translator
&lt;/h3&gt;

&lt;p&gt;Let's see how Simpleen handles this Markdown example in comparison to DeepL and Google Translate (in this case with DeepL).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Einrichtung&lt;/span&gt;

Installieren Sie die CLI, um Dateien vom Quell- in den Zielpfad &lt;span class="gs"&gt;**zu übersetzen**&lt;/span&gt;.

&lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
yarn add simpleen
yarn run simpleen init
&lt;span class="nt"&gt;&amp;lt;/code&lt;/span&gt; &lt;span class="err"&gt;language="shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

Sie können nach Dateien in &lt;span class="sb"&gt;`./blog/posts/de/*.md`&lt;/span&gt; suchen und sie in &lt;span class="sb"&gt;`./blog/posts/$locale/$FILE.md`&lt;/span&gt; übersetzen.

&lt;span class="gu"&gt;## Zusätzliche Unterstützung :smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Dateien
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Because we love Markdown we wanted to deliver better and more consistent results with an online translator that let's you translate Markdown into many languages. &lt;/p&gt;

&lt;p&gt;Simpleen provides better results because we handle Markdown differently than other services. Instead of just handling Markdown as Text or convert it to HTML, which is supported by most MT services, we go deeper to understand the whole document structure of your Markdown files. &lt;/p&gt;

&lt;p&gt;Furthermore, Simpleen understands the most common Markdown extensions and flavors and applies the provided styles from your file to the translation result. For example, if you use two spaces at the end of a line to break a line, we also use two spaces in the translated result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supported-flavors-amp-extensions"&gt;
  &lt;/a&gt;
  Supported Flavors &amp;amp; Extensions
&lt;/h2&gt;

&lt;p&gt;Markdown comes in different flavors, and therefore supports different syntax to write your documentations, blog posts and more.&lt;br&gt;
The most common flavors that are used and supported for translations by Simpleen are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommonMark&lt;/li&gt;
&lt;li&gt;GFM &lt;a href="https://github.github.com/gfm/"&gt;Github Flavor Markdown&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with the following extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emoji's (😄 or 👍)&lt;/li&gt;
&lt;li&gt;Footnotes (partial)&lt;/li&gt;
&lt;li&gt;Frontmatter&lt;/li&gt;
&lt;li&gt;Math&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt; is a Markdown flavor that many frameworks and libraries support or build upon, for example &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/"&gt;GatsbyJS&lt;/a&gt; with their remark transformer. Also many headless content management system do support CommonMark.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#better-style-support"&gt;
  &lt;/a&gt;
  Better Style Support
&lt;/h3&gt;

&lt;p&gt;There are different valid ways to mark your headers, bold text, lists and more. Simpleen detects your style and reproduces the translated&lt;br&gt;
Markdown file in a consistent way. For example if you use a dash for your lists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;My shopping list:
&lt;span class="p"&gt;
-&lt;/span&gt; Dictionary
&lt;span class="p"&gt;-&lt;/span&gt; Paper
&lt;span class="p"&gt;-&lt;/span&gt; Pencil
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then this Markdown example is translated to German like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Meine Einkaufsliste:
&lt;span class="p"&gt;
-&lt;/span&gt; Wörterbuch
&lt;span class="p"&gt;-&lt;/span&gt; Papier
&lt;span class="p"&gt;-&lt;/span&gt; Bleistift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you use a star for your list instead it's getting translated to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Meine Einkaufsliste:
&lt;span class="p"&gt;
*&lt;/span&gt; Wörterbuch
&lt;span class="p"&gt;*&lt;/span&gt; Papier
&lt;span class="p"&gt;*&lt;/span&gt; Bleistift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both results are valid in most Markdown flavors, but we want to consistently apply the styles from the provided Markdown file.&lt;br&gt;
As a result you can use the translated Markdown file directly in your Markdown documentation tool. Furthermore, the editor or human translator is not getting confused by different styles in case of post-editing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translate-mdmdx-files"&gt;
  &lt;/a&gt;
  Translate .md/.mdx Files
&lt;/h2&gt;

&lt;p&gt;A Markdown file contains multiple parts that need to be localized. Other parts - like code segments and frontmatter fragments (meta data) - need to be excluded from translation.&lt;/p&gt;

&lt;p&gt;Not translated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Fences &lt;/li&gt;
&lt;li&gt;Emoji's&lt;/li&gt;
&lt;li&gt;Frontmatter&lt;/li&gt;
&lt;li&gt;Math Expressions&lt;/li&gt;
&lt;li&gt;MDX (not yet supported, drop us a line if you like to use it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Translated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Headers (atx, setext)&lt;/li&gt;
&lt;li&gt;Paragraphs with bold, italic styles, links, images&lt;/li&gt;
&lt;li&gt;List Items&lt;/li&gt;
&lt;li&gt;Table Headers&lt;/li&gt;
&lt;li&gt;Table Entries&lt;/li&gt;
&lt;li&gt;ToDo List Entries&lt;/li&gt;
&lt;li&gt;Footnotes (partial, #fn-1 instead of ^1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have plans to improve the Markdown translation tool even more. Quick Roadmap: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We want to handle internal links correctly (adapt to translated result)&lt;/li&gt;
&lt;li&gt;Handle footnote links&lt;/li&gt;
&lt;li&gt;Adapt the Simpleen CLI to support Markdown files in your local project&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>markdown</category>
      <category>tooling</category>
      <category>localization</category>
      <category>internationalization</category>
    </item>
  </channel>
</rss>
