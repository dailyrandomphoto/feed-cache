<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Share your salary and see what everyone else is making in InfoSec / the Cyber Security space</title>
      <author>infosec-jobs.com</author>
      <pubDate>Tue, 27 Jul 2021 06:33:03 +0000</pubDate>
      <link>https://dev.to/infosec_jobscom/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space-4man</link>
      <guid>https://dev.to/infosec_jobscom/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space-4man</guid>
      <description>&lt;p&gt;We were wondering quite recently what the global salary landscape in the InfoSec world would look like. Searching around for some data provided few results and basically all of them didn‚Äôt provide a full dataset for us to play around with and use freely.&lt;/p&gt;

&lt;p&gt;So we decided to set up our own survey, ask the global InfoSec scene what they‚Äôre making anually, and then release all the data for free afterwards in the public domain under &lt;a href="https://creativecommons.org/share-your-work/public-domain/cc0/"&gt;CC0 license terms&lt;/a&gt;. Which literally means global salary data from the public, for the public.&lt;/p&gt;

&lt;p&gt;We went on quickly by defining some generalized attributes that would make a really simplistic survey everyone can fill it out in under a minute and don‚Äôt have to think too hard while doing it, but would still provide as much valuable information as possible so you can derive real insights from it. All of this in an anonymized fashion, of course. We don‚Äôt like touching PII anyways ‚Äì &lt;a href="https://infosec-jobs.com/about/"&gt;not really our business üòâ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It took almost two weeks of deliberations about what to ask for ‚Äì yeah it gets quite difficult when you start thinking about what makes sense and trying not to mess it up completely ‚Äì and in roughly a weekend our little salaries app (Django + SQLite are your friends, yay) was built and ready to launch.&lt;/p&gt;

&lt;p&gt;üéâ Released a few days ago you can check (and fill) it out here: &lt;a href="https://salaries.infosec-jobs.com/"&gt;https://salaries.infosec-jobs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As soon as we have a little valid dataset and solved some open issues along the way (noticed we provide a selection of the 30 most used currencies in global trade? Probably some averaged conversion into USD for all non-USD salaries would be nice having added to the data as well ü§î) we‚Äôll release a first dump of the data here.&lt;/p&gt;

&lt;p&gt;In the end we think it would be great if we can manage to create a sort of rolling survey throughout the year with a constantly updated dataset that everyone can use as they wish ‚Äì candidates, recruiters, hr departments, startup founders, data scientists, you name it‚Ä¶&lt;/p&gt;

&lt;p&gt;We made everything a select/choice field to avoid free-form input in general, except for the salary value of course. The job titles are the ones that are popular on our InfoSec job board, just to stay real and not list decades old jobs that practially don‚Äôt mean anything and aren‚Äôt even hired for anymore. We provide an open API for this too (see &lt;a href="https://infosec-jobs.com/api/list-job-titles/"&gt;https://infosec-jobs.com/api/list-job-titles/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you like the idea and want to help us to gather a free and open database of InfoSec / Cyber Security salary information, feel free to share this survey with anyone who likes to fill out salary surveys ‚Äì just kidding ‚Äì the more data the better obviously üòâ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post appeared first on &lt;a href="https://insights.infosec-jobs.com/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space/"&gt;https://insights.infosec-jobs.com/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>career</category>
      <category>hiring</category>
      <category>insights</category>
    </item>
    <item>
      <title>The 10 most in-demand jobs in AI/ML and Big Data</title>
      <author>ai-jobs.net</author>
      <pubDate>Tue, 27 Jul 2021 06:23:40 +0000</pubDate>
      <link>https://dev.to/ai_jobsnet/the-10-most-in-demand-jobs-in-ai-ml-and-big-data-3394</link>
      <guid>https://dev.to/ai_jobsnet/the-10-most-in-demand-jobs-in-ai-ml-and-big-data-3394</guid>
      <description>&lt;p&gt;We thought it would be interesting to go deeper into the analytics part of running our AI/ML/DS job board ‚Äì in the most privacy focused way for our users, of course. So here we are now starting to expose some of our aggregated internal job data in a systematic fashion through a simple REST API with a list of generalized job titles that are posted on ai-jobs.net.&lt;/p&gt;

&lt;p&gt;The cool thing with this is that we are able to see what‚Äôs popular in terms of the roles employers are hiring for most often in the AI/ML and Big Data space.&lt;/p&gt;

&lt;p&gt;Our ‚Äúmethodology‚Äù here is quite simple: we‚Äôre primarily counting the occurence of job titles over the last 12 months, cleaned and adjusted for certain specialties that some companies like to do, e.g. inventing their own stuff that‚Äôs not being used by anyone else or adding crazy super-specific details to a vacancy title and so on. We also left out many titles with indicators regarding seniority or other requirements as we already have dedicated attributes for these. More on that probably in a future post.&lt;/p&gt;

&lt;p&gt;So here it is, our current (as of June 2021) top list of the ten AI/ML/Big Data roles with the highest demand from employers on our site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Engineer&lt;/li&gt;
&lt;li&gt;Data Scientist&lt;/li&gt;
&lt;li&gt;Data Analyst&lt;/li&gt;
&lt;li&gt;Machine Learning Engineer&lt;/li&gt;
&lt;li&gt;Big Data Engineer&lt;/li&gt;
&lt;li&gt;Principal Data Scientist&lt;/li&gt;
&lt;li&gt;Staff Data Engineer&lt;/li&gt;
&lt;li&gt;Marketing Data Analyst&lt;/li&gt;
&lt;li&gt;Data Engineering Manager&lt;/li&gt;
&lt;li&gt;Lead Data Scientist&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your interested in the raw JSON data you can find the endpoint here: &lt;a href="https://ai-jobs.net/api/list-job-titles/"&gt;https://ai-jobs.net/api/list-job-titles/&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results there are updated every 6 hours, although it won‚Äôt really change that much anytime soon. And if it does we‚Äôll maybe write about it üòâ&lt;/p&gt;

&lt;p&gt;We also use all the job titles from that list for our brand new salaries survey to have a ‚Äústandardized‚Äù selection of positions to choose from and attach salaries to. You can check out the survey ‚Äì and the resulting dataset being released in the public domain ‚Äì here: &lt;a href="https://salaries.ai-jobs.net/"&gt;https://salaries.ai-jobs.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published on June 1, 2021 under &lt;a href="https://insights.ai-jobs.net/the-10-most-in-demand-jobs-in-ai-ml-and-big-data/"&gt;https://insights.ai-jobs.net/the-10-most-in-demand-jobs-in-ai-ml-and-big-data/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>machinelearning</category>
      <category>ai</category>
      <category>hiring</category>
    </item>
    <item>
      <title>6 Tools to write an eye-catching article</title>
      <author>Unclebigbay</author>
      <pubDate>Tue, 27 Jul 2021 06:23:00 +0000</pubDate>
      <link>https://dev.to/unclebigbay/6-tools-to-write-an-eye-catching-article-299</link>
      <guid>https://dev.to/unclebigbay/6-tools-to-write-an-eye-catching-article-299</guid>
      <description>&lt;p&gt;Hello beautiful bloggers üë®‚Äçüíª, below I will be sharing the list of tools that I make use while writing an article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-carbon"&gt;
  &lt;/a&gt;
  1. Carbon
&lt;/h3&gt;

&lt;p&gt;Link :  &lt;a href="https://carbon.now.sh/"&gt;carbon.now.sh&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Most of the technical articles you will probably write will come with code fragments attached to them, and readers will not find it too easy and attractive to view codes as plain text, carbon allows us to make an image of our code snippets and can be downloaded as &lt;strong&gt;PNG or SVG&lt;/strong&gt; for use as an attachment in our blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlkUJird--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332083691/UrWftwaLs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlkUJird--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332083691/UrWftwaLs.png" alt="carbon (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-grammarly"&gt;
  &lt;/a&gt;
  2. Grammarly
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://grammarly.com/"&gt;grammarly.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We are humans after all, which means we cannot notice all the errors in our articles before publications, but  &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt; can help identify typographical errors and provide suggestions on how to improve our sentences.&lt;/p&gt;

&lt;p&gt;My favorite Grammarly feature is the emoji prediction, which shows how the whole article will sound to the readers, I found this to be useful as it helps to adjust and be within the desired prediction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am a big fan of emoji&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RndGn1xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332977346/86wODetlF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RndGn1xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332977346/86wODetlF.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-browserframe"&gt;
  &lt;/a&gt;
  3. BrowserFrame
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://browserframe.com/"&gt;browserframe.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;No doubts, images add to the beaut of an article when they are used properly, browser frames consist of both mobile and desktop browser frames to present the images better on articles.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#without-browserframecom"&gt;
  &lt;/a&gt;
  Without &lt;a href="https://browserframe.com/"&gt;browserframe.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8S5f-_0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333314964/gejMyVVag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8S5f-_0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333314964/gejMyVVag.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#with-browserframecom"&gt;
  &lt;/a&gt;
  With &lt;a href="https://browserframe.com/"&gt;browserframe.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYuYv22w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333375753/lGZHO6Gna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYuYv22w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333375753/lGZHO6Gna.png" alt="frame_generic_dark (20).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-ray"&gt;
  &lt;/a&gt;
  4. Ray
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://ray.so/"&gt;ray.so&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Ray is my second goto after &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;, ray features include, linear-gradient background for code snippets and also provide a share link for the generated images.&lt;/p&gt;

&lt;p&gt;I found this to be really cool üòé&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pC9qaeZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333693068/lt7CEmkTT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pC9qaeZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333693068/lt7CEmkTT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-canva"&gt;
  &lt;/a&gt;
  5. Canva
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://www.canva.com/"&gt;www.canva.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of &lt;a href="https://unclebigbay.com/"&gt;my blog&lt;/a&gt; cover images are made using &lt;a href="https://www.canva.com/"&gt;canva&lt;/a&gt;, canva has several free design templates for both presentation and article cover images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-google-gifs"&gt;
  &lt;/a&gt;
  6. Google Gifs
&lt;/h3&gt;

&lt;p&gt;Link: google anything gif üòõ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0l-TYPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335514814/MFtqXDKD2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0l-TYPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335514814/MFtqXDKD2.gif" alt="200 (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I personally enjoy adding gifs to my articles, I believe technical articles should not be boring.&lt;/p&gt;

&lt;p&gt;I think you might want to add some to your next articleüòç, you can get your preferred gif by visiting google and searching say &lt;strong&gt;"laughing coding gifs"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BRI2TXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335605771/af_sqp7Cg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BRI2TXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335605771/af_sqp7Cg.png" alt="frame_generic_dark (21).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;@&lt;a href="https://dev.to@DThompsonDev"&gt;Danny Thompson&lt;/a&gt; is also rocking some gif tooü§©&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vqxKoiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335666379/4zmDrubKf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vqxKoiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335666379/4zmDrubKf.gif" alt="tenor (2).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for this article, I hope you have learned something new from this article, feel free to share your favorite tools in the comment section and which of the above tools is actually new to you.&lt;/p&gt;




&lt;p&gt;Wow, what a journey, I am glad you made it to the end of this article, if you enjoyed and learned from this article, I will like to connect with you.&lt;/p&gt;

&lt;p&gt;Let's connect on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=unclebigbay143"&gt;Twitter @unclebigbay143&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.linkedin.com/in/unclebigbay/"&gt;LinkedIn @unclebigbay&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My friend and I are holding a meetup every Saturday to discuss JavaScript and other programming tips and to support ourselves.&lt;/p&gt;

&lt;p&gt;You can be a part üëá of the community by &lt;a href="https://unclebigbayandfriends.netlify.app/"&gt; visiting our website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;See you in the next article. Bye Bye üôã‚Äç‚ôÇÔ∏è&lt;br&gt;
also buy me a coffee below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 22, String Methods Part-1</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 27 Jul 2021 06:21:47 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-22-string-methods-part-1-9j8</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-22-string-methods-part-1-9j8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-string-functions"&gt;
  &lt;/a&gt;
  Today we will learn about string functions
&lt;/h2&gt;




&lt;p&gt;Till now, we were using strings for various programs. We used them both as input and output parameters. But now we will learn how to modify them.&lt;br&gt;
This week, we will do operations like break a sentence into words, break strings into letters, capitalize them without using the &lt;code&gt;ord()&lt;/code&gt; hack or count number of vowels in a sentence.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#string-as-a-list"&gt;
  &lt;/a&gt;
  String as a list
&lt;/h2&gt;

&lt;p&gt;In Python, we can easily interpret a string as a list of characters. In the example below, we can apply the &lt;code&gt;len()&lt;/code&gt; function to the string txt, or iterate the for loop. &lt;br&gt;
But we cannot treat it as a list and do opertions like pop or append()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Interpreting the string as an array of characters.
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Length of the txt = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;#display string using in keyword
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#display the string in original form using range()
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#to display in reverse order
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#We cannot append a character or pop using the standered length functions.
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python
Length of the txt =  6
P
y
t
h
o
n
P y t h o n 
nohtyPTraceback (most recent call last):
  File "C:/Users/aatma/Downloads/Example 1 .py", line 21, in &amp;lt;module&amp;gt;
    txt.append("a")
AttributeError: 'str' object has no attribute 'append'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#case-changing"&gt;
  &lt;/a&gt;
  Case changing
&lt;/h2&gt;

&lt;p&gt;We will now see how to handel upper and small cases in Python without any direct use of UNICODE characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#1. Upper case the first letter in this sentence:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello, AND Welcome"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : Hello, and welcome
&lt;/span&gt;
&lt;span class="c1"&gt;#2. Make the string lower case:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, And Welcome!@#$"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : hello, and welcome
&lt;/span&gt;
&lt;span class="c1"&gt;#3. Make the string upper case:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, And Welcome"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : HELLO, AND WELCOME
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, and welcome
hello, and welcome!@#$
HELLO, AND WELCOME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#word-specific-methods"&gt;
  &lt;/a&gt;
  Word specific methods
&lt;/h2&gt;

&lt;p&gt;Now let's have a look at more string functions via a program. Comments are there whenever necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="c1"&gt;#1.Print the word "computer", taking up the space of 25 characters,
#with "computer" in the middle:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"computer"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 2 default spaces+25 total characters. so distance between hello and world must be 27 characters.
&lt;/span&gt;
&lt;span class="c1"&gt;#2. Return the number of times the value "act" appears in the string:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"I love programming, programming is my favorite activity"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Frequency of the value ="&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#case matters. Capital I and small i are treated differently.
&lt;/span&gt;
&lt;span class="c1"&gt;#3. Check if the string ends with a punctuation sign .
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, welcome to my world."&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my world."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#4. Set the tab size to 5 whitespaces:
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"First&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;second"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;txt1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ACADEMY"&lt;/span&gt;              

&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"A&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;C&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;A&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;DE&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;M Y"&lt;/span&gt; &lt;span class="c1"&gt;# backslah t (i.e. \t) represents tab space. 
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expandtabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#expands the tab spaces
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#5. Locates the word "welcome" in the string and returns the index:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, welcome to my world."&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"welcome"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : 7
#if the result is -1, string does not exist in the sentence
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello          computer         world
I love programming, programming is my favorite activity
Frequency of the value = 6
True
First   second
A     C     A     DE    M Y
Hello, welcome to my world.
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises
&lt;/h2&gt;

&lt;p&gt;1)- Write a program to change the capitalization of a user input string and add full stop at the end if it isn't present.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a string: a QUick Brown FOX jumps OVer the Lazy doG
A quick brown fox jumps over the lazy dog.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2)- Write a program to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a string: Python
P 
P y 
P y t 
P y t h 
P y t h o 
P y t h o n 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>learningpython</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>tmux new-window</title>
      <author>Waylon Walker</author>
      <pubDate>Tue, 27 Jul 2021 05:23:06 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-new-window-2cpc</link>
      <guid>https://dev.to/waylonwalker/tmux-new-window-2cpc</guid>
      <description>&lt;p&gt;New window as it sounds makes new windows in tmux.  Windows are kind of like tabs.  They are another screen within your sessions that you can name and make&lt;br&gt;
new panes in.&lt;/p&gt;

&lt;p&gt;Default key bindings for creating and navigating windows in tmux.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key          c new-window
bind-key          p previous-window
bind-key          n next-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As always I have rebound these keys because I generally prefer a single keystroke over the prefix plus keybinding approach that tmux gives by default.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#‚Äï‚Äïwindows‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-c new-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-p previous-window
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-n next-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When I started using tmux I did almost everything in one giant session with many panes and windows.  It became a nightmare to manage and quickly get between two sets work efficiently.  This year I leaned in on sessions quite heavily.  Checkout this üëá post to see that workflow in depth.&lt;/p&gt;



&lt;p&gt;Be sure to check out the full youtube playlist and subscribe if you like it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr"&gt;https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/how-i-navigate-tmux-in-2021-2ina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I navigate tmux in 2021&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker „Éª May 12 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also check out this long form post for more about how I use tmux.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>Everything You Ever Wanted to Know About WebRTC</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Tue, 27 Jul 2021 05:15:57 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/everything-you-ever-wanted-to-know-about-webrtc-341m</link>
      <guid>https://dev.to/asayerio_techblog/everything-you-ever-wanted-to-know-about-webrtc-341m</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/arek-nawo"&gt;Arek Nawo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Live messaging, streaming, Torrents, and other similar &lt;strong&gt;real-time data transfer&lt;/strong&gt; techniques have greatly affected and improved our virtual experiences. First, they were available natively, now through the web, bringing an impressive amount of possibilities to this universal platform. That's all thanks to APIs known as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"&gt;WebSocket&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;WebRTC&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#websocket-revision"&gt;
  &lt;/a&gt;
  WebSocket revision
&lt;/h2&gt;

&lt;p&gt;Now, I bet that you've heard of WebSocket. In fact, you've likely used it in some of your previous projects. Still, if not, here's a brief overview.&lt;/p&gt;

&lt;p&gt;WebSocket is a simple API that allows you to connect your clients &lt;strong&gt;indirectly&lt;/strong&gt;, i.e., through a server. Basically, if one user wants to send some data to the other one, they both need to be &lt;strong&gt;connected with the server&lt;/strong&gt; first and then pass the data through it. This approach naturally comes with some pros and cons. While it allows you to optionally process data on the server-side and assures the completeness of sent information (through &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;TCP protocol&lt;/a&gt;), it isn't really fast. Because of the proxy-like server, a generic transfer can take up to 1 second, which isn't much, but can make a huge difference in use-cases like audio and video calls.&lt;/p&gt;

&lt;p&gt;That's why WebRTC was introduced back in 2011. And, even if quite a lot of time has passed since then, its complexity and cross-browser support concerns result in beginners still having a hard time learning and using it. That's why, in this post, we'll go through the basics of WebRTC and explaining everything as simply as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webrtc"&gt;
  &lt;/a&gt;
  &lt;a href="https://webrtc.io/"&gt;WebRTC&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;WebRTC stands for &lt;strong&gt;Web Real-Time Communication&lt;/strong&gt;. The key concept to understand about it is that it's meant for &lt;strong&gt;direct connection&lt;/strong&gt;. This means that after the connection has been established (more on that later), in most cases, you don't need any sort of server being involved in data transfer. That translates to, of course, faster transfer speeds. This fact makes it the best choice right now for audio/video streaming or creating P2P networks like &lt;a href="https://webtorrent.io/"&gt;Torrent&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#servers-in-webrtc"&gt;
  &lt;/a&gt;
  Servers in WebRTC
&lt;/h3&gt;

&lt;p&gt;Don't get me wrong tho. You still need a server - even when working with WebRTC. It'll be used in a process called &lt;em&gt;"signaling"&lt;/em&gt;, where the &lt;strong&gt;peers&lt;/strong&gt; will be connected to each other. After that, all the data will be transferred directly between the peers in an encrypted state. This means that a WebRTC connection is &lt;strong&gt;secure by default&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other than that, keep in mind that servers can still play other roles in a WebRTC connection. For example, they can serve as an always-online peers, ready to transfer or backup data at any time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h3&gt;

&lt;p&gt;Because WebRTC is newer than e.g. WebSocket, it isn't really backward-compatible, resulting in no support for IE and all older browsers. Still, according to &lt;a href="https://caniuse.com/#feat=rtcpeerconnection"&gt;&lt;em&gt;caniuse.com&lt;/em&gt;&lt;/a&gt;, it's supported by more than &lt;strong&gt;94%&lt;/strong&gt; of the reported browsers, so no worries here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-in-one"&gt;
  &lt;/a&gt;
  Three in one
&lt;/h2&gt;

&lt;p&gt;WebRTC is, in fact, a &lt;strong&gt;collection of different APIs&lt;/strong&gt; rather than a single one. That's why we're not going to cover all but only the core parts of WebRTC. These are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MediaStream API&lt;/strong&gt; - for getting access to user's camera and audio (media);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RTCPeerConnection&lt;/strong&gt; &amp;amp; &lt;strong&gt;RTCDataChannel&lt;/strong&gt; - for actual WebRTC connection;
# &lt;a href="https://www.tutorialspoint.com/webrtc/webrtc_media_stream_apis.htm"&gt;MediaStream API&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While not being a part of the WebRTC connection process per se, MediaStream API, with its capabilities of capturing &lt;strong&gt;video&lt;/strong&gt; and &lt;strong&gt;audio&lt;/strong&gt; data through user's device, is vital to one of WebRTC's main use-cases - video/audio streaming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-and-audio"&gt;
  &lt;/a&gt;
  Video and audio
&lt;/h3&gt;

&lt;p&gt;At the heart of MediaStream API is the &lt;code&gt;getUserMedia()&lt;/code&gt; method of the &lt;code&gt;navigator.mediaDevices&lt;/code&gt; object. Note that this object will only be available when you're working in an &lt;strong&gt;HTTPS&lt;/strong&gt; ****(secured) context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getMedia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// use the stream&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle the error - user's rejection or no media available&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;getMedia&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method takes what's called a &lt;em&gt;constraints&lt;/em&gt; object and returns a promise that resolves to a new &lt;code&gt;MediaStream&lt;/code&gt; instance. Such an interface is a representation of currently streamed media. It consists of zero or more separate &lt;code&gt;MediaStreamTrack&lt;/code&gt;s, each representing video or audio track, from which audio tracks consist of right and left channels (for stereo and stuff). These tracks also provide some special methods and events if you need further control.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  Constraints
&lt;/h3&gt;

&lt;p&gt;Let's now talk about our &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints"&gt;constraints object&lt;/a&gt;, as this is a very important piece. It's used to &lt;strong&gt;configure&lt;/strong&gt; our &lt;code&gt;getUserMedia()&lt;/code&gt; request and the resulting stream. This object can have two properties of either boolean or object value - &lt;code&gt;audio&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By setting both of them to true, we're requesting access to the user's default video and audio input devices, with default settings applied. Know that for &lt;code&gt;getUserMedia()&lt;/code&gt; to work, you have to set at least one of those two properties.&lt;/p&gt;

&lt;p&gt;If you want to configure your media source device settings further, you'll need to pass an object. The list of properties available here is quite long and differs based on the type of track it's applied to (video, audio). You can see a complete list of those &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints"&gt;here&lt;/a&gt; and check for the available ones with the &lt;code&gt;getSupportedConstraints()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;So, let's say that we want to be a bit more specific this time, and specify some additional configuration for our video track. That'll be its width, height, and input device.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supportedConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSupportedConstraints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;supportedConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;supportedConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;supportedConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enumerateDevices&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;videoinput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we check if the given constraint is supported (although all used above should always be - unless there's no input device), and use the &lt;code&gt;enumerateDevices()&lt;/code&gt; method to check for &lt;strong&gt;available input devices&lt;/strong&gt;, together with setting the video's resolution. It returns a promise which resolves to an array of &lt;code&gt;MediaDeviceInfo&lt;/code&gt; objects, which we later use, to select the first one in line for video input.&lt;/p&gt;

&lt;p&gt;Then, a simple edit to our &lt;code&gt;getMedia()&lt;/code&gt; function, and we're good to go!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getConstraints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#screen-capture"&gt;
  &lt;/a&gt;
  Screen capture
&lt;/h3&gt;

&lt;p&gt;You might be interested in hearing that's there's also a method for accessing the device screen (and even sound in the latest browsers), called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API"&gt;Screen Capture API&lt;/a&gt;, which consists of a single &lt;code&gt;getDisplayMedia()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot of &lt;strong&gt;potential&lt;/strong&gt; in using the &lt;code&gt;getUserMedia()&lt;/code&gt; and &lt;code&gt;getDisplayMedia()&lt;/code&gt; methods. Especially when combined with, e.g., Canvas and Web Audio APIs. But, as this is a topic for another day, we're only interested in previewing our streams with simple &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;audio&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for actually using those from JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// inside getMedia() after successfully retrieving MediaStream&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;audio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#webrtcbased-interaction-openreplay-assist"&gt;
  &lt;/a&gt;
  WebRTC-based interaction: OpenReplay Assist
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming, however through the use of &lt;strong&gt;&lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay‚Äôs Assist&lt;/a&gt;&lt;/strong&gt;, you can see the live screen of your users and even jump on a quick call with them. All thanks to the power of WebRTC.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybmGvs0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybmGvs0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/overview.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rtcpeerconnection"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection"&gt;RTCPeerConnection&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The RTCPeerConnection is the main interface behind any WebRTC connection. It hides a lot of complex stuff like data encoding, encryption, processing and more, in a small and somewhat user-friendly API.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#signaling"&gt;
  &lt;/a&gt;
  Signaling
&lt;/h3&gt;

&lt;p&gt;Before we start sending data, we need to first connect the two or more peers in the signaling process. As more than 2 peers would require special handling and a &lt;a href="https://webrtc.org/getting-started/turn-server#:~:text=The%20term%20stands%20for%20Traversal,and%20as%20cloud%20provided%20services."&gt;TURN server&lt;/a&gt;, we‚Äôll stick to the basics and work with only 2.&lt;/p&gt;

&lt;p&gt;As the &lt;code&gt;RTCPeerConnection&lt;/code&gt; relies on events, we'll use these and something called &lt;code&gt;RTCIceCandidate&lt;/code&gt; to set up our connection. ICE stands for &lt;strong&gt;Internet Connectivity Establishment&lt;/strong&gt; and indicates the established protocol and routing used throughout the connection. Here you can, e.g., decide between the UDP and TCP protocols, depending on whether you need your data to be delivered fast with some possible losses or otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// One RTCPeerConnection instance for each side&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// On the remote side:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remoteConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because demonstrating snippets with the involvement of server code can be tough, we'll work with two connections created in the same environment. Don't worry - if you already know WebSocket or any other form of data transfer for that matter, you should be able to use the herein code for real-world scenarios relatively easily.&lt;/p&gt;

&lt;p&gt;After creating our connections, we'll need to set up their respective &lt;code&gt;icecandidate&lt;/code&gt; event handlers to listen for possible offers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icecandidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Send event.candidate to the other side through e.g. WebSocket&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// On the remote side:&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle error&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// On the remote side:&lt;/span&gt;
&lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icecandidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Send event.candidate to the other side through e.g. WebSocket&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// On the local side:&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle error&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code above, we listen to new ICE candidates and accept them immediately on both sides. In reality, this process can take a bit longer. Generally, the whole idea behind it is that the users will offer each other different connection configurations, until both sides settle on one, and the connection will start. It's at that time that you will need the server to exchange the offers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* Send offer to the other side through e.g. WebSocket
            Then, on the remote side: */&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localDescription&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnswer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* Send offer to the other side through e.g. WebSocket
            Then, on the local side: */&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localDescription&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle errors&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we move onto creating an offer. You can do just that with the &lt;code&gt;createOffer()&lt;/code&gt; call, to then use it to configure the local connection. After that, we have to send this configuration to the remote connection, where it'll be either accepted or rejected. Here, as we don't do any decision-making process, we're accepting any configuration up-front. We do this using the &lt;code&gt;setRemoteDescription()&lt;/code&gt;, and then we send the return information to be accepted again on the local side.&lt;/p&gt;

&lt;p&gt;After all the "negotiations" are done, the &lt;code&gt;icecandidate&lt;/code&gt; event will be fired, and the signaling process is complete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streaming"&gt;
  &lt;/a&gt;
  Streaming
&lt;/h3&gt;

&lt;p&gt;So, with signaling done - somewhat of the toughest part of the process - we can now go straight to streaming.&lt;/p&gt;

&lt;p&gt;I've already shown you how to get a &lt;code&gt;MediaStream&lt;/code&gt; object from one of the user's input devices. We‚Äôll use that for this demo.&lt;/p&gt;

&lt;p&gt;Let's assume that we have a &lt;code&gt;MediaStream&lt;/code&gt; object ready to go. In this case, you can use the &lt;code&gt;addTrack()&lt;/code&gt; method to start transmitting individual tracks. It's worth noting that there used to be an &lt;code&gt;addStream()&lt;/code&gt; method to add whole &lt;code&gt;MediaStream&lt;/code&gt;s at once, but it's now obsolete and you shouldn‚Äôt use it (although some browsers might still support it).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startStreaming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTracks&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the receiving side, create a new &lt;code&gt;MediaStream&lt;/code&gt; with its constructor, and listen for &lt;code&gt;track&lt;/code&gt; events. Add all incoming tracks to the stream, and attach the stream itself to a video element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startReceiving&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;track&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to make the system work, you need to remember to set up streaming and receiving &lt;strong&gt;before&lt;/strong&gt; you make an offer. In our case, this translates to before the &lt;code&gt;connect()&lt;/code&gt; call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;startStreaming&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
    &lt;span class="c1"&gt;// On the remote side:&lt;/span&gt;
    &lt;span class="nx"&gt;startReceiving&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// On both sides:&lt;/span&gt;
    &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you‚Äôd like to update the streamed tracks down the line, you‚Äôll need to handle &lt;code&gt;negotiationneeded&lt;/code&gt; event on the &lt;code&gt;RTCPeerConnection&lt;/code&gt; and renegotiate the offer there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rtcdatachannel"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel"&gt;RTCDataChannel&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Apart from streams, you can also use WebRTC for transferring arbitrary data. That‚Äôs thanks to &lt;code&gt;RTCDataChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To create a data channel, you have to use the &lt;code&gt;createDataChannel()&lt;/code&gt; method of &lt;code&gt;RTCPeerConnection&lt;/code&gt;, passing the channel‚Äôs name as a parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startSendingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-data-channel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other side, listen for &lt;code&gt;datachannel&lt;/code&gt; events, and extract &lt;code&gt;channel&lt;/code&gt; property from the event object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startReceivingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datachannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To actually use the channel, you need first to wait for it to open, using the &lt;code&gt;open&lt;/code&gt; event listener. After that‚Äôs done, you can use the &lt;code&gt;send()&lt;/code&gt; method to send &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send#parameters"&gt;all kinds of data&lt;/a&gt; and receive it on the other side within the &lt;code&gt;message&lt;/code&gt; event handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we‚Äôve got a simple React Hook-like wrapper around &lt;code&gt;RTCDataChannel&lt;/code&gt;. Its Promise resolves on &lt;code&gt;open&lt;/code&gt;, returning a function for sending data and allowing for an optional callback to handle &lt;code&gt;message&lt;/code&gt; events coming from the other side.&lt;/p&gt;

&lt;p&gt;You can use the wrapper like so in the original connection functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startSendingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-data-channel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Local:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message from local&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startReceivingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;remoteConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datachannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Remote:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message from remote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can initiate the system similarly to how it was done for streaming - with &lt;code&gt;connect()&lt;/code&gt; function called last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;startSendingData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// On the remote side:&lt;/span&gt;
    &lt;span class="nx"&gt;startReceivingData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// On both sides:&lt;/span&gt;
    &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you shouldn‚Äôt &lt;code&gt;await&lt;/code&gt; for the channel to open - it‚Äôll happen after the connection is made. To avoid confusion and illustrate this intention in both &lt;code&gt;startSendingData()&lt;/code&gt; and &lt;code&gt;startReceivingData()&lt;/code&gt; I‚Äôve used the &lt;code&gt;then()&lt;/code&gt; instead of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, working with WebRTC API isn‚Äôt that hard. Furthermore, with additional help from WebSocket, or a public TURN server, you shouldn‚Äôt have much problem with establishing production-ready connections for 2 or more peers.&lt;/p&gt;

&lt;p&gt;With the ability to both stream video and audio and exchange any arbitrary data directly between peers, WebRTC is a powerful tool for building performant, cost-efficient real-time applications.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webrtc</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CRUD model class</title>
      <author>alexdodonov</author>
      <pubDate>Tue, 27 Jul 2021 04:58:17 +0000</pubDate>
      <link>https://dev.to/alexdodonov/crud-model-class-5an1</link>
      <guid>https://dev.to/alexdodonov/crud-model-class-5an1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#crud-model"&gt;
  &lt;/a&gt;
  CRUD model
&lt;/h1&gt;

&lt;p&gt;This model will help you to create CRUD models for your entitites, and provides you a huge set of methods after a simpe setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Just print in console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require mezon/crud-service-model
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all )&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First steps
&lt;/h2&gt;

&lt;p&gt;Let's define a new class for your DB entity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EntityModel&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrudServiceModel&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Constructor
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'entity_table_name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this exact line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'entity_table_name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have specified that we need &lt;code&gt;'*'&lt;/code&gt; (all fields) from the table with name &lt;code&gt;'entity_table_name'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need only some fields from your database, just list them in the first parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id,field1,field2,field3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'entity_table_name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when you have done this, you will get the following methods.&lt;/p&gt;

&lt;p&gt;But before using these methods note that you will need to meet the requirements for some naming conventions.&lt;/p&gt;

&lt;p&gt;Field with the primary key must be named as &lt;code&gt;id&lt;/code&gt;. I shall add setting to use another name.&lt;/p&gt;

&lt;p&gt;Some methods reqire field &lt;code&gt;creation_date&lt;/code&gt; for fetching new records for example.&lt;/p&gt;

&lt;p&gt;You may add to the table field &lt;code&gt;domain_id&lt;/code&gt; for implementing multy instancing out of the box.&lt;/p&gt;

&lt;p&gt;Now lets look at available methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method fetches all new records since the $date&lt;/span&gt;
&lt;span class="c1"&gt;// For example $model-&amp;gt;newRecordsSince($domainId, '2021-01-01');&lt;/span&gt;
&lt;span class="nf"&gt;newRecordsSince&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method calculates count of records fetched by filter&lt;/span&gt;
&lt;span class="c1"&gt;// For example $model-&amp;gt;recordsCount(false, ['field1 = 1', 'field2 = 2']);&lt;/span&gt;
&lt;span class="nf"&gt;recordsCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1=1'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method returns data as is without any transformations&lt;/span&gt;
&lt;span class="nf"&gt;getSimpleRecords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method returns records wich are transformed by method getRecordsTransformer wuch &lt;/span&gt;
&lt;span class="c1"&gt;// you can override in your subclass&lt;/span&gt;
&lt;span class="nf"&gt;getRecords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1=1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method returns the last $count records filtered by where&lt;/span&gt;
&lt;span class="nf"&gt;lastRecords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method returns records by their ids&lt;/span&gt;
&lt;span class="nf"&gt;fetchRecordsByIds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method calculates count of records grouped by fieldName and filtered by where&lt;/span&gt;
&lt;span class="nf"&gt;recordsCountByField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$fieldName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method updates records with values record&lt;/span&gt;
&lt;span class="nf"&gt;updateBasicFields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method inserts record record&lt;/span&gt;
&lt;span class="nf"&gt;insertBasicFields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$domainId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method deletes all records filtered by where&lt;/span&gt;
&lt;span class="nf"&gt;deleteFiltered&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$domainId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$where&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#it-will-be-great-if-you-will-contribute-something-to-this-project-documentation-sharing-the-project-in-your-social-media-bug-fixing-refactoring-or-even-submitting-issue-with-question-or-feature-request-thanks-anyway-"&gt;
  &lt;/a&gt;
  It will be great if you will contribute something to this project. Documentation, sharing the project in your social media, bug fixing, refactoring, or even &lt;strong&gt;&lt;a href="https://github.com/alexdodonov/mezon-crud-service"&gt;submitting issue with question or feature request&lt;/a&gt;&lt;/strong&gt;. Thanks anyway )
&lt;/h1&gt;

</description>
      <category>php</category>
      <category>mezon</category>
      <category>crud</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Web Development: Build your Portfolio Website Design using HTML
</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Tue, 27 Jul 2021 04:55:28 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/web-development-build-your-portfolio-website-design-using-html-3d5b</link>
      <guid>https://dev.to/muthuannamalai12/web-development-build-your-portfolio-website-design-using-html-3d5b</guid>
      <description>&lt;p&gt;Being a web developer and having a portfolio helps a lot while applying for opportunities and acts as a showcase of our talent, so in this article, we will learn how to make a simple portfolio by just using HTML. This portfolio might contain &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An image displayed as a profile photo&lt;/li&gt;
&lt;li&gt;Uses emphasis and strong tags for formatting&lt;/li&gt;
&lt;li&gt;Has tables to better display data&lt;/li&gt;
&lt;li&gt;Links to other pages like Hobbies and Contact(displayed at bottom of the page) &lt;/li&gt;
&lt;li&gt;A contact form that emails details.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;File structure&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;hobbies.html &lt;/li&gt;
&lt;li&gt;contact.html&lt;/li&gt;
&lt;li&gt;images folder(You will put your photo into this folder and use it as your profile photo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code Implementation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1- For index.html file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="utf-8"&amp;gt;
  &amp;lt;title&amp;gt;Muthu Annamalai Venkatachalam's Personal Site&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;table cellspacing="20"&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;img src="images/Muthu Profile Photo.jpeg" alt="Profile Picture" width="200" height="200" /&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;
        &amp;lt;h1&amp;gt;Muthu Annamalai Venkatachalam&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;An Aspiring Software Developer | Student | &amp;lt;strong&amp;gt;Web Developer&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;A Engineer who works 24/7 to improve himself. I'm a problem-solver at heart, highly teachable and eager to learn new skills, fun to work with, have a killer work ethic, and above all, extremely curious and ask a lot of questions.My Motto is to Aspire To Inspire Before we Expire&amp;lt;/p&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;hr /&amp;gt;
  &amp;lt;h3&amp;gt;My Education&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Srimathi Sundaravalli Memorial School&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;NSN Matriculation Higher Secondary School&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Panimalar Engineering College&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;hr /&amp;gt;
  &amp;lt;h3&amp;gt;Work Experience&amp;lt;/h3&amp;gt;
  &amp;lt;table border="1px"&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Dates&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Work&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;July2020 To July2020&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Campus Ambassador at IMUN&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;August2020 To August 2020&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Campus Ambassador at TechieGen&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;February2021 To May2021&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Open Source Contributor at GSSOC'21&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;hr /&amp;gt;
  &amp;lt;h3&amp;gt;Skills&amp;lt;/h3&amp;gt;
  &amp;lt;table cellspacing="10"&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;HTML&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;‚≠ê‚≠ê‚≠ê&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;CSS&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;‚≠ê‚≠ê‚≠ê&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;Java&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;‚≠ê‚≠ê‚≠ê&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;JavaScript&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;‚≠ê‚≠ê‚≠ê&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;hr /&amp;gt;
  &amp;lt;a href="hobbies.html"&amp;gt;My Hobbies&amp;lt;/a&amp;gt;
  &amp;lt;a href="contact.html"&amp;gt;Contact Me&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2- For hobbies.html file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="utf-8"&amp;gt;
  &amp;lt;title&amp;gt;My Hobbies&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h3&amp;gt;My Hobbies&amp;lt;/h3&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href="https://www.telegraph.co.uk/content/dam/cricket/2019/04/01/TELEMMGLPICT000192546944_trans_NvBQzQNjv4Bq900leoZVuq6ru6F43OqP_mjnRw13ichYxOyPsROrpNM.jpeg"&amp;gt;I love Playing Cricket&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href="https://filmdaily.co/wp-content/uploads/2020/05/cbd-lede-1300x813.jpg"&amp;gt;I love Watching Movies&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href="https://static.toiimg.com/photo/67625374.cms"&amp;gt;I love Listening To Music&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3-  For the contact.html file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="utf-8"&amp;gt;
  &amp;lt;title&amp;gt;My Contact&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;My Contact Details&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;My Address: No:63(A) , Ground Floor, Ramani Illam,2nd Cross Street, Chandran Nagar, Chromepet,Chennai-44&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;My Phone Number: 7358833533&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;My Gmail: muthuannamalai2002@gmail.com&amp;lt;/p&amp;gt;
  &amp;lt;form class="" action="mailto:muthuannamalai2002@gmail.com" method="post" enctype="text/plain"&amp;gt;
    &amp;lt;label&amp;gt;Your Name&amp;lt;/label&amp;gt;
    &amp;lt;input type="text" name="Your Name" value=""&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;label&amp;gt;Your email&amp;lt;/label&amp;gt;
    &amp;lt;input type="email" name="Your Email" value="" /&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;label&amp;gt;Your Message&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;textarea name="Your Message" rows="10" columns="30"&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;input type="submit" name="" /&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the project is ready!&lt;/p&gt;

&lt;p&gt;This is the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf4t-SRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623473693265/3I4BhSR6y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf4t-SRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623473693265/3I4BhSR6y.png" alt="Screenshot (1192).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See it live: &lt;a href="https://muthuannamalai12.github.io/CV/"&gt;https://muthuannamalai12.github.io/CV/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link To GitHub Repository: &lt;a href="https://github.com/muthuannamalai12/CV"&gt;https://github.com/muthuannamalai12/CV&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I hope you found this article valuable. If yes do let me know in the comments üòä&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.üòäüëá&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading üòä &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>C++ Project For Beginners</title>
      <author>Bikaah324</author>
      <pubDate>Tue, 27 Jul 2021 04:55:19 +0000</pubDate>
      <link>https://dev.to/coderzways/c-project-for-beginners-19f6</link>
      <guid>https://dev.to/coderzways/c-project-for-beginners-19f6</guid>
      <description>&lt;h3&gt;C++ Project For Beginners&lt;/h3&gt;
&lt;p&gt;C++ was built as an extension to C and gave programmers a high control over memory and system resources. If you know any other programming language, C++ will be easy to learn. Even otherwise, C++ is a friendly language, and you can learn it through some hands-on projects and practice.&lt;/p&gt;
&lt;p&gt;This article lists 10 C++ projects of different levels, which will help you appreciate the language more. You can also try many other similar projects. For example, one of our projects is Bookshop inventory management. You can try a library management system as well on the same lines. Again, similar to the railway ticket reservation system, you can try out the Bus ticket reservation system.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-c-project-for-beginners/"&gt;C++ Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; 

</description>
    </item>
    <item>
      <title>üöÄ20 Best CSS3 Library For Developers.</title>
      <author>Chetan AtrawalkarüëâCA.</author>
      <pubDate>Tue, 27 Jul 2021 04:53:29 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p</link>
      <guid>https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;

&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-css-libraries-work"&gt;
  &lt;/a&gt;
  ü§î How do CSS libraries work?
&lt;/h2&gt;

&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;

&lt;p&gt;Here we have put together &lt;strong&gt;20 best CSS libraries.&lt;/strong&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Let's go....ü§©
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#1-animatecss"&gt;
  &lt;/a&gt;
  &lt;a href="https://animate.style/"&gt;1. Animate.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltn1wg8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br2ezgehow3il2jwe2cf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltn1wg8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br2ezgehow3il2jwe2cf.jpg" alt="Animate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Animate.css&lt;/strong&gt; is a library of ready-to-use, cross-browser animations for use in your web projects.&lt;/li&gt;
&lt;li&gt;Great for emphasis, home pages, sliders, and attention-guiding hints.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-picniccss"&gt;
  &lt;/a&gt;
  &lt;a href="https://picnicss.com/"&gt;2. Picnic.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzOtDZ1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru2qnnfalbjfniu94hb1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzOtDZ1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru2qnnfalbjfniu94hb1.jpg" alt="picnic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Picnic CSS&lt;/strong&gt; is a lightweight and beautiful CSS library.&lt;/li&gt;
&lt;li&gt;Picnic is completely modular so you can easily modify and test each part.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-magic-animation"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.minimamente.com/project/magic/"&gt;3. Magic Animation&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DF1l-C3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixqpj5rc6hpurl1xdiay.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DF1l-C3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixqpj5rc6hpurl1xdiay.jpg" alt="magic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Magic CSS&lt;/strong&gt; are a set of simple animations to include in your web or app project's.&lt;/li&gt;
&lt;li&gt;Provide CSS3 Animations with special effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-cirruscss"&gt;
  &lt;/a&gt;
  &lt;a href="https://cirrus-ui.netlify.app/"&gt;4. Cirrus.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYr9yQ02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q348t7pyi4fz66iberv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYr9yQ02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q348t7pyi4fz66iberv.jpg" alt="cirrus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cirrus.CSS&lt;/strong&gt; a component and utility centric SCSS framework
designed for rapid prototyping.&lt;/li&gt;
&lt;li&gt;A fully responsive and comprehensive SCSS framework with beautiful controls and simplistic structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-halfmooncss"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.gethalfmoon.com/docs/introduction/"&gt;5. Halfmoon.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edOJ0Z7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od7siqxp2frx2gxy7t6b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edOJ0Z7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od7siqxp2frx2gxy7t6b.jpeg" alt="halfmoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Halfmoon is a responsive front-end framework with a lot of useful and interesting qualities to help you build websites.&lt;/li&gt;
&lt;li&gt;It comes with a built-in dark mode, which is one of its most important and defining features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-the-css-cascade"&gt;
  &lt;/a&gt;
  &lt;a href="https://wattenberger.com/blog/css-cascade"&gt;6. The CSS Cascade&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7m1jPwFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik4d9ig6wq0t8t81t44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7m1jPwFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik4d9ig6wq0t8t81t44d.png" alt="cascade"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The CSS Cascade is one of the most powerful parts of CSS.&lt;/li&gt;
&lt;li&gt;The CSS Cascade is the way our browsers resolve competing CSS declarations.&lt;/li&gt;
&lt;li&gt;We style our websites using CSS, which stands for Cascading Style Sheets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-cube-css"&gt;
  &lt;/a&gt;
  &lt;a href="https://piccalil.li/blog/cube-css/"&gt;7. CUBE CSS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0odsF_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ruowf0j017e3r18dplm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0odsF_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ruowf0j017e3r18dplm.jpg" alt="cube"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A CSS methodology oriented towards simplicity and consistency with a heavy dosage of pragmatism.&lt;/li&gt;
&lt;li&gt;The focus of the methodology is utilising the power of CSS and the web platform as a whole, with some added controls and structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-98css"&gt;
  &lt;/a&gt;
  &lt;a href="https://jdan.github.io/98.css/"&gt;8. 98.CSS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwmhAdgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydruhb2h889jt58i0ox7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwmhAdgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydruhb2h889jt58i0ox7.jpg" alt="98"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;98.css&lt;/strong&gt; is a CSS library for building interfaces that look like Windows 98.&lt;/li&gt;
&lt;li&gt;Missing the good old days of computing? Use this design system to recreate those classic UIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-fluiditype"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.fluiditype.com/"&gt;9. Fluiditype&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TwqHHQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4kqvle39vmmnwx219eu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TwqHHQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4kqvle39vmmnwx219eu.jpg" alt="fluid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fluiditype&lt;/strong&gt; CSS library serves to avoid the responsive web by focusing on pure fluidity in which the system communicates what size to be rendered.&lt;/li&gt;
&lt;li&gt;Recommend to be used for blogs, portfolios and documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-nescss"&gt;
  &lt;/a&gt;
  &lt;a href="https://nostalgic-css.github.io/NES.css/"&gt;10. NES.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdcjoErz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mll9wkgrw66qqfw834o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdcjoErz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mll9wkgrw66qqfw834o.jpg" alt="nes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NES.css&lt;/strong&gt; is NES-style (8bit-like) CSS Framework.&lt;/li&gt;
&lt;li&gt;NES.css only provides components. You will need to define your own layout.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#11-primer-css"&gt;
  &lt;/a&gt;
  &lt;a href="https://primer.style/css/"&gt;11. Primer CSS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPTIf8im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il7e5494mm22ql7v5ci5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPTIf8im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il7e5494mm22ql7v5ci5.jpg" alt="Primer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Primer CSS&lt;/strong&gt; is built upon systems that form the foundation of our styles such as spacing, typography, and color.&lt;/li&gt;
&lt;li&gt;Utility-centric and BEM-style components to give you the building blocks for any web project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#12-semantic-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://semantic-ui.com/"&gt;12. Semantic UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IP_ZTOuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jprfr0241enui6yvdku.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IP_ZTOuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jprfr0241enui6yvdku.jpg" alt="semantic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Semantic UI&lt;/strong&gt; is a front-end development framework similar to bootstrap designed for theming.&lt;/li&gt;
&lt;li&gt;It is a development framework that helps create beautiful, responsive layouts using human-friendly HTML.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#13-milligram"&gt;
  &lt;/a&gt;
  &lt;a href="https://milligram.io/"&gt;13. Milligram&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VU5P8l2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzf0whhm4g5zio2t7wcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VU5P8l2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzf0whhm4g5zio2t7wcx.png" alt="milligrams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Milligram&lt;/strong&gt; provides a minimal setup of styles for a fast and clean starting point. Just it! Only 2kb gzipped! It's not about a UI framework.&lt;/li&gt;
&lt;li&gt;Specially designed for better performance and higher productivity with fewer properties to reset resulting in cleaner code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#14-spectrecss"&gt;
  &lt;/a&gt;
  &lt;a href="https://picturepan2.github.io/spectre/"&gt;14. Spectre.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RklsvCTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihv0t627cubibxss5ht5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RklsvCTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihv0t627cubibxss5ht5.png" alt="spectre"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Spectre.css&lt;/strong&gt; CSS Framework is a lightweight, responsive and modern CSS framework for faster and extensible development.&lt;/li&gt;
&lt;li&gt;Spectre covers all of the basic CSS expectations from Bootstrap, such as buttons, forms, icons, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#15-foundation"&gt;
  &lt;/a&gt;
  &lt;a href="https://get.foundation/"&gt;15. Foundation&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LIQKyqVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/906h13er59h413hcs8ie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LIQKyqVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/906h13er59h413hcs8ie.png" alt="foundation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Foundation&lt;/strong&gt; is a most advanced responsive front-end framework.&lt;/li&gt;
&lt;li&gt;Foundation is a family of responsive front-end frameworks that make it easy to design beautiful responsive websites, apps and emails that look amazing on any device.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#16-skeleton"&gt;
  &lt;/a&gt;
  &lt;a href="http://getskeleton.com/"&gt;16. Skeleton&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mzsx6zIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpxovwyw22t8kdllzhyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mzsx6zIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpxovwyw22t8kdllzhyi.png" alt="skeleton"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Skeleton&lt;/strong&gt; is a light-weight, responsive, and highly customizable CSS library built with mobile in mind.&lt;/li&gt;
&lt;li&gt;There‚Äôs zero compiling or installing necessary, and it works well with additional CSS stylesheets and front-end Frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#17-uikit"&gt;
  &lt;/a&gt;
  &lt;a href="https://getuikit.com/"&gt;17. UIkit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfXj_QGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s04d0dugsnkqbh1b6n88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfXj_QGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s04d0dugsnkqbh1b6n88.png" alt="uikit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;UIkit&lt;/strong&gt; is a lightweight and modular front-end framework for developing fast and powerful web interfaces.&lt;/li&gt;
&lt;li&gt;UIkit gives you a comprehensive collection of HTML, CSS, and JS components. It can be extended with themes and is easy to customize to create your own look.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#18-bulma"&gt;
  &lt;/a&gt;
  &lt;a href="https://bulma.io/"&gt;18. Bulma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9RefRKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eaaay76931pwzgm060d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9RefRKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eaaay76931pwzgm060d.png" alt="bulma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bulma&lt;/strong&gt; is a free, open source framework that provides ready-to-use frontend components that you can easily combine to build responsive web interfaces.&lt;/li&gt;
&lt;li&gt;No CSS knowledge required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#19-bootstrap"&gt;
  &lt;/a&gt;
  &lt;a href="https://getbootstrap.com/"&gt;19. Bootstrap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2BThNKRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bydcucvbl5wbsjvojskc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2BThNKRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bydcucvbl5wbsjvojskc.png" alt="bootstrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bootstrap&lt;/strong&gt; is a potent front-end framework used to create modern websites and web apps.&lt;/li&gt;
&lt;li&gt;It's open-source and free to use, yet features numerous HTML and CSS templates for UI interface elements such as buttons and forms. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#20-tailwind-css"&gt;
  &lt;/a&gt;
  &lt;a href="https://tailwindcss.com/"&gt;20. Tailwind CSS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRUnljmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwfwpqtlohyncgc8jvwz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRUnljmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwfwpqtlohyncgc8jvwz.jpg" alt="tailwind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tailwind CSS&lt;/strong&gt; is a utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.&lt;/li&gt;
&lt;li&gt;Tailwind offers predesigned widgets to build a site from scratch with fast UI development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-"&gt;
  &lt;/a&gt;
  Conclusion üëã.
&lt;/h2&gt;

&lt;p&gt;There are many CSS libraries that can be implemented on your projects. Those listed above are a few with the best combination of complexity, ease, and stability. Each CSS library differs from others and each fit different situations.&lt;/p&gt;

&lt;p&gt;üôè Please share your valuable feedback in comment section which is yours favourite library and which library you used in daily basis to improve your UI and productivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it"&gt;
  &lt;/a&gt;
  üòé Keep Claim And Just Code It!
&lt;/h3&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How did I publish my 1st NPM package.</title>
      <author>Md Amir Gauhar</author>
      <pubDate>Tue, 27 Jul 2021 04:05:49 +0000</pubDate>
      <link>https://dev.to/mdamirgauhar/how-did-i-publish-my-1st-npm-package-25h5</link>
      <guid>https://dev.to/mdamirgauhar/how-did-i-publish-my-1st-npm-package-25h5</guid>
      <description>&lt;p&gt;Hello fellow developers! &lt;br&gt;
We have came across various npm packages which had made our lives more simpler and easier. If you don‚Äôt know what NPM is then let me help you to know a little bit about it. NPM is package manager for NodeJS which was created in 2009 as an open source project to help JavaScript Developers easily share their codes in form of packages.&lt;/p&gt;

&lt;p&gt;So in this article I‚Äôll talk about how I published my 1st NPM package. Creating your first NPM package may seem incredibly intimidating but it is actually surprisingly easy. The main focus of this articles isn‚Äôt to build a bad-ass npm package but to explain how to build and publish a npm package.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs get started...&lt;br&gt;
To publish a NPM package, all we need is the NPM command Line tool which is also called &lt;em&gt;npm&lt;/em&gt;. When we install NodeJS in our system, we automatically get npm installed in our computer. To download NodeJS visit &lt;a href="https://nodejs.org"&gt;here&lt;/a&gt;.&lt;br&gt;
After installing &lt;em&gt;npm&lt;/em&gt;, we can go ahead and start creating our package. Now in the terminal we‚Äôll do the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;
  &lt;a href="#creating-the-project-directory"&gt;
  &lt;/a&gt;
  creating the project directory
&lt;/h6&gt;

&lt;p&gt;mkdir reverse-string &lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#change-into-the-project-directory"&gt;
  &lt;/a&gt;
  change into the project directory
&lt;/h6&gt;

&lt;p&gt;cd reverse-string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we start writing our code, we need to add a &lt;strong&gt;package.json&lt;/strong&gt; file to our project. For that run we need to run the following command in the terminal :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm init&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ghBrpyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voggngswmsh2jyu53oyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ghBrpyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voggngswmsh2jyu53oyj.png" alt="npm init"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we need to answer some questions which is basically about the package we are creating. After answering the questions, the &lt;strong&gt;package.json&lt;/strong&gt; will be created in the root of the project and will look like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34_ktNkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xywzelvvss1h7e3fmvbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34_ktNkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xywzelvvss1h7e3fmvbv.png" alt="package.json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let‚Äôs start writing our code. We are going to create a package to reverse a string.&lt;br&gt;
Create an &lt;em&gt;index.js&lt;/em&gt; file in the root of the project and add the following code for reversing the string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function reverse(string) {
  return string
    .toLowerCase()
    .split("")
    .reverse()
    .join("");
};

module.exports = reverse;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let‚Äôs publish the package‚Ä¶&lt;br&gt;
In order to publish the package to NPM registry we need to create an account in the NPM registry. After creating the account go to the email we provided to verify our account. Then we'll go to the terminal and authenticate ourselves using:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm login.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After entering all the credentials, we can now publish our package using the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm publish &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that we may not be able to publish the package if someone else already has a package with same name in the registry. We can simply change the package name  to some unique name or simply change it to @username/package-name.&lt;br&gt;
In my case I‚Äôll rename my package name to &lt;strong&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/mdamirgauhar"&gt;@mdamirgauhar&lt;/a&gt;
/reverse-string&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we have a name-spaced package, NPM tries to make it a private package instead of public. In order to publish our package we need to run the following command in the terminal:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm publish --access=public.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Voila&lt;/strong&gt;, we have created our first npm package. Hope you liked it..&lt;/p&gt;

</description>
      <category>npm</category>
      <category>node</category>
    </item>
    <item>
      <title>Find Social Media Accounts in 5 Minutes with Sherlock</title>
      <author>Suhail Kakar</author>
      <pubDate>Tue, 27 Jul 2021 04:01:29 +0000</pubDate>
      <link>https://dev.to/suhailkakar/find-social-media-accounts-in-5-minutes-with-sherlock-4h57</link>
      <guid>https://dev.to/suhailkakar/find-social-media-accounts-in-5-minutes-with-sherlock-4h57</guid>
      <description>&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;Don't do this to anyone with ill intent, this is a legit hacking tool part of the hacking process called osens, where we gather information about our hacking targets. What we're doing is not technically illegal we're just gathering publicly available information on the internet but the lines can blur based on your intentions so just be careful use this as a learning tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Sherlock is a powerful command line tool supplied by the Sherlock Project that may be used to locate usernames across a variety of social media platforms. It is a python open-source project available at GitHub. You just need to input the username and Sherlock will return all the social media account url of that username&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirement"&gt;
  &lt;/a&gt;
  Requirement
&lt;/h3&gt;

&lt;p&gt;This best thing about this project is that you don't need any extra thing, You just need a web browser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-"&gt;
  &lt;/a&gt;
  How To Use ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open this  &lt;a href="https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/sherlock-project/sherlock&amp;amp;tutorial=README.md"&gt;link&lt;/a&gt;  in your browser. This will open Google Cloud Console which we can use its shell to install Sherlock&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to check the Trust checkbox and click on Confirm and wait for 10 seconds &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4W0gd3E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356069411/sx6yI9aqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4W0gd3E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356069411/sx6yI9aqt.png" alt="screely-1627356052231.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once everything is done, go a head and paste the below code in the Cloud Shell
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If all the packages are installed successfully, you should see something similar to below picture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svNuMVjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356959209/be5HQdOdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svNuMVjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356959209/be5HQdOdb.png" alt="image (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we can start using Sherlock, you just need to a username to get the social media account. In the Cloud Shell paste the below code and click enter ( change username with the account you want to get information, In my case suhailkakar) and will get all the social media profile of the username
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 sherlock &lt;span class="nt"&gt;--timeout&lt;/span&gt; 1 username
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CgHiX9qy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627357833292/qgItNii3M.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgHiX9qy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627357833292/qgItNii3M.gif" alt="Sherlock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope you found this articles helpful. If you need any help please let me know at comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;üëã Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>hacking</category>
      <category>datascience</category>
    </item>
  </channel>
</rss>
