<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Competitive self-play with Unity ML-Agents</title>
      <author>Joy</author>
      <pubDate>Fri, 22 Oct 2021 06:47:04 +0000</pubDate>
      <link>https://dev.to/joooyz/competitive-self-play-with-unity-ml-agents-1nh6</link>
      <guid>https://dev.to/joooyz/competitive-self-play-with-unity-ml-agents-1nh6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#an-overview-of-selfplay"&gt;
  &lt;/a&gt;
  An overview of self-play
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openai.com/blog/competitive-self-play/"&gt;Competitive self-play&lt;/a&gt; involves training an agent against itself. It was used in famous systems such as &lt;a href="https://deepmind.com/research/case-studies/alphago-the-story-so-far"&gt;AlphaGo&lt;/a&gt; and &lt;a href="https://openai.com/blog/dota-2/"&gt;OpenAI Five (Dota 2)&lt;/a&gt;. By playing increasingly stronger versions of itself, agents can discover new and better strategies.&lt;/p&gt;

&lt;p&gt;In this post, we walk through using competitive self-play in Unity ML-Agents to train agents to play volleyball. This article is also part 5 of the series '&lt;strong&gt;&lt;a href="https://dev.to/joooyz/a-hands-on-introduction-to-deep-reinforcement-learning-using-unity-ml-agents-4f8i"&gt;A hands-on introduction to deep reinforcement learning using Unity ML-Agents&lt;/a&gt;&lt;/strong&gt;'. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-selfplay"&gt;
  &lt;/a&gt;
  The case for self-play
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/joooyz/how-to-train-agents-to-play-volleyball-using-deep-reinforcement-learning-417b"&gt;We previously trained agents using PPO&lt;/a&gt; with the following setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Symmetric environment&lt;/li&gt;
&lt;li&gt;Both agents shared the same policy&lt;/li&gt;
&lt;li&gt;Observations: velocity, rotation, and position vectors of the agent and ball&lt;/li&gt;
&lt;li&gt;Reward function: +1 for hitting the ball over the net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This resulted in agents that were able to successfully volley the ball back-and-forth after ~20M training steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5M0puDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmoyaw03cwnheu96dk3f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5M0puDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmoyaw03cwnheu96dk3f.gif" alt="PPO trained agents" title="Trained agents playing volleyball"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that the agents make 'easy' passes by aiming the ball towards the centre of the court. This is because we set the reward function to incentivize keeping the ball in play.&lt;/p&gt;

&lt;p&gt;Our aim now is to train &lt;em&gt;competitive&lt;/em&gt; agents that are rewarded for &lt;em&gt;winning&lt;/em&gt; (i.e. landing the ball in the opponent's court). We expect this will lead to agents that learn interesting strategies and make passes that are harder to return.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfplay-setup-in-mlagents"&gt;
  &lt;/a&gt;
  Self-play setup in ML-Agents
&lt;/h2&gt;

&lt;p&gt;To follow along this section, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity ML-Agents Release 18+ (&lt;a href="https://dev.to/joooyz/an-introduction-to-machine-learning-with-unity-ml-agents-3an5"&gt;getting started instructions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The latest version of the &lt;a href="https://github.com/CoderOneHQ/ultimate-volleyball"&gt;Ultimate Volleyball repo&lt;/a&gt; (or, you can use your own volleyball environment if you've been following the tutorial series)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-put-the-agents-on-opposing-teams"&gt;
  &lt;/a&gt;
  Step 1: Put the agents on opposing teams
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the Ultimate Volleyball environment in Unity&lt;/li&gt;
&lt;li&gt;Open &lt;strong&gt;Assets&lt;/strong&gt; &amp;gt; &lt;strong&gt;Prefabs&lt;/strong&gt; &amp;gt; &lt;code&gt;2PVolleyballArea.prefab&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Select either the &lt;code&gt;PurpleAgent&lt;/code&gt; or &lt;code&gt;BlueAgent&lt;/code&gt;  object&lt;/li&gt;
&lt;li&gt;In Inspector &amp;gt; Behavior Parameters, set &lt;code&gt;TeamId&lt;/code&gt; to 1 (the actual value doesn't matter, as long as the PurpleAgent and BlueAgent have different Team ID's):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpYnme_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bofa2dc0j4uagfiybfiw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpYnme_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bofa2dc0j4uagfiybfiw.jpg" alt="ML-Agents Team ID" title="Team ID setting in ML-Agents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-set-up-the-selfplay-reward-function"&gt;
  &lt;/a&gt;
  Step 2:  Set up the self-play reward function
&lt;/h3&gt;

&lt;p&gt;Our previous reward function was +1 for hitting the ball over the net.&lt;/p&gt;

&lt;p&gt;For self-play, we'll switch to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;+1 to the winning team&lt;/li&gt;
&lt;li&gt;-1 to the losing team&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;VolleyballEnvController.cs&lt;/code&gt; and add the rewards to the &lt;code&gt;ResolveEvent()&lt;/code&gt; method:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HitBlueGoal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// blue wins&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// turn floor blue&lt;/span&gt;
    &lt;span class="nf"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GoalScoredSwapGroundMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volleyballSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blueGoalMaterial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// end episode&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ResetScene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HitPurpleGoal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// purple wins&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// turn floor purple&lt;/span&gt;
    &lt;span class="nf"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GoalScoredSwapGroundMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volleyballSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purpleGoalMaterial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// end episode&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ResetScene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Remove &lt;code&gt;AddReward&lt;/code&gt; from the other cases&lt;/li&gt;
&lt;li&gt;You can also set penalties for hitting the ball out of the court (in &lt;code&gt;case Event.HitOutOfBounds&lt;/code&gt;). From my experience, this may take longer for the agents to learn to hit the ball.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-selfplay-training-parameters-to-the-trainer-config"&gt;
  &lt;/a&gt;
  Step 3: Add self-play training parameters to the trainer config
&lt;/h3&gt;

&lt;p&gt;Create a new &lt;code&gt;.yaml&lt;/code&gt; file and copy in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;behaviors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Volleyball&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;trainer_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ppo&lt;/span&gt;
    &lt;span class="na"&gt;hyperparameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;batch_size&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt;
      &lt;span class="na"&gt;buffer_size&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20480&lt;/span&gt;
      &lt;span class="na"&gt;learning_rate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.0002&lt;/span&gt;
      &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.003&lt;/span&gt;
      &lt;span class="na"&gt;epsilon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;
      &lt;span class="na"&gt;lambd&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.93&lt;/span&gt;
      &lt;span class="na"&gt;num_epoch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
      &lt;span class="na"&gt;learning_rate_schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;constant&lt;/span&gt;
    &lt;span class="na"&gt;network_settings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;normalize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;hidden_units&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;
      &lt;span class="na"&gt;num_layers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
      &lt;span class="na"&gt;vis_encode_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple&lt;/span&gt;
    &lt;span class="na"&gt;reward_signals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;extrinsic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;gamma&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.96&lt;/span&gt;
        &lt;span class="na"&gt;strength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;
    &lt;span class="na"&gt;keep_checkpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
    &lt;span class="na"&gt;max_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80000000&lt;/span&gt;
    &lt;span class="na"&gt;time_horizon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
    &lt;span class="na"&gt;summary_freq&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
    &lt;span class="na"&gt;self_play&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
      &lt;span class="na"&gt;play_against_latest_model_ratio&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;
      &lt;span class="na"&gt;save_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
      &lt;span class="na"&gt;swap_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
      &lt;span class="na"&gt;team_change&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaining-selfplay-parameters"&gt;
  &lt;/a&gt;
  Explaining self-play parameters
&lt;/h3&gt;

&lt;p&gt;During self-play, one of the agents will be set as the &lt;em&gt;learning agent&lt;/em&gt; and the other as the fixed policy &lt;em&gt;opponent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;save_steps=20000&lt;/code&gt; steps, a snapshot of the learning agent's existing policy will be taken. Up to &lt;code&gt;window=10&lt;/code&gt; snapshots will be stored. When a new snapshot is taken, the oldest one is discarded. These past versions of itself become the 'opponents' that the learning agent trains against. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7sDCCuqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq14ashtaitzhhgchknw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sDCCuqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq14ashtaitzhhgchknw.jpg" alt="Self-play hyperparameters" title="Self-play hyperparameters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;swap_steps=10000&lt;/code&gt; steps, the opponent's policy will be swapped with a different snapshot. The snapshot is sampled with a probability of &lt;code&gt;play_against_latest_model_ratio=0.5&lt;/code&gt; that it will play against the &lt;strong&gt;latest&lt;/strong&gt; &lt;strong&gt;policy&lt;/strong&gt; (i.e. the &lt;strong&gt;strongest&lt;/strong&gt; opponent). This helps to prevent &lt;strong&gt;overfitting&lt;/strong&gt; to a single opponent playstyle.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;team_change=100000&lt;/code&gt; steps, the learning agent and opponent teams will be switched. &lt;/p&gt;

&lt;p&gt;Feel free to play around with these default hyperparameters (more information available in the official &lt;a href="https://github.com/Unity-Technologies/ml-agents/blob/main/docs/Training-Configuration-File.md#self-play"&gt;ML-Agents documentation&lt;/a&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-with-selfplay"&gt;
  &lt;/a&gt;
  Training with self-play
&lt;/h2&gt;

&lt;p&gt;Training with self-play in ML-Agents is done the same way as any other form of training:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activate the virtual environment containing your installation of &lt;code&gt;ml-agents&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to your working directory, and run in the terminal:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;mlagents-learn &amp;lt;path to config file&amp;gt; --run-id=VB_1 --time-scale=1&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you see the message "Start training by pressing the Play button in the Unity Editor", click ▶ within the Unity GUI.&lt;/li&gt;
&lt;li&gt;In another terminal window, run &lt;code&gt;tensorboard --logdir&lt;/code&gt; results from your working directory to observe the training process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#selfplay-training-results"&gt;
  &lt;/a&gt;
  Self-play training results
&lt;/h2&gt;

&lt;p&gt;In a stable training run, you should see the ELO gradually increase. &lt;/p&gt;

&lt;p&gt;In the diagram below, the three inflexion points correspond to the agent:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learning to serve &lt;/li&gt;
&lt;li&gt;Learning to return the ball&lt;/li&gt;
&lt;li&gt;Learning more competitive shots&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIdtbzri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szk3gdbjlwmodfdki1j5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIdtbzri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szk3gdbjlwmodfdki1j5.jpg" alt="Tensorboard results" title="ELO and Episode Length"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joooyz/how-to-train-agents-to-play-volleyball-using-deep-reinforcement-learning-417b"&gt;Compared to our previous training results&lt;/a&gt;, I found that even after ~80M steps, the agents trained using self-play don't serve or return the ball as reliably. However, they do learn to hit some interesting shots, like hitting the ball towards the edge of the court:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcCgN1o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mejlpcsil20efq9faj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcCgN1o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mejlpcsil20efq9faj4.gif" alt="Trained agents using self-play playing volleyball" title="Volleyball agents trained using PPO self-play after 80M steps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you discover any other interesting playstyles, let me know!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! I hope you found this post useful.&lt;/p&gt;

&lt;p&gt;If you have any feedback or questions, feel free to post them on the &lt;a href="https://github.com/CoderOneHQ/ultimate-volleyball"&gt;Ultimate Volleyball Repo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>unity3d</category>
    </item>
    <item>
      <title>Enlist major features of Kotlin?</title>
      <author>mayank chaurasiya</author>
      <pubDate>Fri, 22 Oct 2021 06:33:17 +0000</pubDate>
      <link>https://dev.to/mayankquora/enlist-major-features-of-kotlin-4akb</link>
      <guid>https://dev.to/mayankquora/enlist-major-features-of-kotlin-4akb</guid>
      <description>&lt;p&gt;Kotlin was developed to make it feature-rich in mind, so there are many features that make Kotlin a unique programming language.&lt;/p&gt;

&lt;p&gt;Below are some major Features of &lt;a href="https://www.courseya.com/kotlin-interview-questions/"&gt;Kotlin Programming Language:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1.Extension functions:&lt;/b&gt; In Kotlin, you can add some extra functionality to the existing component to make it much more versatile.&lt;br&gt;
&lt;b&gt;2.Higher-Order Function:&lt;/b&gt; You can pass a function as an argument to a method or return a function as a result of the method in Kotlin.&lt;br&gt;
&lt;b&gt;3.Smart Cast:&lt;/b&gt; Smart Cast checks for some type, and then it will allow performing all the operations allowed for that particular type.&lt;br&gt;
&lt;b&gt;4.Destruction Declaration:&lt;/b&gt; With this, it is possible to return more than one value from a function.&lt;br&gt;
&lt;b&gt;5.Default and Named arguments:&lt;/b&gt; You can assign a default value to the parameter whom you want to make optional, and while calling that method, there is no bound on giving values to the default parameters. You can easily change the sequence of the parameter at the time of calling with Named arguments. It is done by writing the name of the argument and then assigning the value to it.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>java</category>
      <category>interview</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Testing - Setting up API Tests for different environments like Dev, Prod,...</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Fri, 22 Oct 2021 06:29:10 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-setting-up-api-tests-for-different-environments-like-dev-prod-h69</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-setting-up-api-tests-for-different-environments-like-dev-prod-h69</guid>
      <description>&lt;p&gt;This video #tutorial explains how you may set up multiple test environments for the same set of API tests in the vREST NG Application.&lt;/p&gt;

&lt;p&gt;vREST NG is a script less API test automation tool. It helps you to write maintainable test cases quickly for functional and regression testing of APIs. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link:&lt;/strong&gt; &lt;a href="https://youtu.be/1bhpENPenJY"&gt;https://youtu.be/1bhpENPenJY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Testing Tutorials Playlist:&lt;/strong&gt; &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>apitesting</category>
      <category>vrest</category>
    </item>
    <item>
      <title>1 simple way to implement variable-Length Pattern Matching</title>
      <author>lisahui</author>
      <pubDate>Fri, 22 Oct 2021 06:06:50 +0000</pubDate>
      <link>https://dev.to/lisahui/nebula-graph-how-variable-length-pattern-matching-is-implemented-1pb5</link>
      <guid>https://dev.to/lisahui/nebula-graph-how-variable-length-pattern-matching-is-implemented-1pb5</guid>
      <description>&lt;p&gt;At the very heart of openCypher, the MATCH clause allows you to specify simple query patterns to retrieve the relationships from a graph database. A variable-length pattern is commonly used to describe paths and it is Nebula Graph’s first try to get nGQL compatible with openCypher in the MATCH clause.&lt;/p&gt;

&lt;p&gt;As can be seen from the previous articles of this series, an execution plan is composed of physical operators. Each operator is responsible for executing unique computational logics. To implement the MATCH clause, the operators such as GetNeighbors, GetVertices, Join, Project, Filter, and Loop, which have been introduced in the previous articles, are needed. Unlike the tree structure in a relational database, the execution process expressed by an execution plan in Nebula Graph is a cyclic graph. How to transform a variable-length pattern into a physical plan in Nebula Graph is the focus of the Planner. In this article, we will introduce how variable-length pattern matching is implemented in Nebula Graph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-analysis"&gt;
  &lt;/a&gt;
  Problem Analysis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fixedlength-pattern"&gt;
  &lt;/a&gt;
  Fixed-Length Pattern
&lt;/h3&gt;

&lt;p&gt;In a MATCH clause, a fixed-length pattern is commonly used to search for a relationship. If a fixed-length pattern is considered a special case of the variable-length pattern, that is, a pattern describing a path of a specified length, the implementations of both can be unified. Here are the examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Fixed-length pattern MATCH (v)-[e]-(v2)
// Variable-length pattern MATCH (v)-[e*1..1]-(v2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The preceding examples differ from each other in the type of the e variable. In the fixed-length pattern, e represents an edge, while in the variable-length one, e represents a list of edges of length 1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-variablelength-patterns"&gt;
  &lt;/a&gt;
  Connecting Variable-Length Patterns
&lt;/h3&gt;

&lt;p&gt;According to the syntax of openCypher, a MATCH clause allows you to specify a combination of various patterns for describing complicated paths. For example, two variable-length patterns can be connected as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MATCH (v)-[e*1..3]-(v2)-[ee*2..4]-(v3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pattern combination in the preceding example is extendable, which means by connecting variable-length and fixed-length patterns in different ways, various complicated paths can be queried. Therefore, we must find a pattern to generate an execution plan to iterate the whole process recursively. The following conditions must be considered:&lt;/p&gt;

&lt;p&gt;The following variable-length path depends on the preceding one.&lt;br&gt;
The variables in the following pattern depend on the preceding pattern.&lt;br&gt;
Before the next traversal step, the starting vertex must be de-duplicated.&lt;br&gt;
From the following example, you can see that as long as an execution plan can be generated for the part of ()-[:like*m..n]-, combinations and iterations may be applied to generate plans for the subsequent parts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;()-[:like*m..n]- ()-[:like*k..l]- ()
 \____________/   \____________/   \_/
    Pattern1         Pattern2       Pattern3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execution-plan"&gt;
  &lt;/a&gt;
  Execution Plan
&lt;/h2&gt;

&lt;p&gt;In this section, we will introduce how the ()-[:like*m..n]- part in the preceding example is transformed into a physical execution plan in Nebula Graph. This pattern describes a graph of a minimum of m hops and a maximum of n hops. In Nebula Graph, a one-step traversal is completed by the GetNeighbors operator. To implement a multi-step traversal, each traversal step must call the GetNeighbors operator again on the basis of the previous step, and when the traversal of all the steps are completed, all the retrieved vertices and edges are connected end to end to form a single path. What users need is the paths of m to n relationships. However, in the execution process, paths of length 1 to length n are queried and are stored for output or for the next traversal, but only the paths of length m to n are retrieved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onestep-traversal"&gt;
  &lt;/a&gt;
  One-Step Traversal
&lt;/h3&gt;

&lt;p&gt;Let’s see what the one-step traversal looks like. In Nebula Graph, the source vertex is stored together with its outgoing edges, so retrieving them does not need to access data across partitions. However, the destination vertex and its incoming edges are stored in different partitions, so GetVertices is necessary for retrieving the properties of the vertex. In addition, to avoid replicated scanning of Storage, the source vertices must be de-duplicated before the traversal. The execution plan of a one-step traversal is shown as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJ_RVjed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244211-8f1aaec3-b1f4-4e52-b74c-7d547b4f350f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJ_RVjed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244211-8f1aaec3-b1f4-4e52-b74c-7d547b4f350f.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multistep-traversal"&gt;
  &lt;/a&gt;
  Multi-Step Traversal
&lt;/h3&gt;

&lt;p&gt;The process of a multi-step traversal is the repetition of one-step traversal. However, we can see that the GetNeighbors operator can retrieve the properties of an edge’s source vertex, so the GetVertices operator can be omitted in the previous step. Here is an execution plan of a two-step traversal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUbdh4ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244372-74619d76-8b10-481a-9dde-d065d801f847.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUbdh4ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244372-74619d76-8b10-481a-9dde-d065d801f847.png" alt="Multi-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-paths"&gt;
  &lt;/a&gt;
  Storing Paths
&lt;/h3&gt;

&lt;p&gt;The paths retrieved in each traversal step may be needed at the end of the traversal, so all the paths must be stored. The paths for a two-step traversal are connected by the Join operator. In the result of the example ()-[e:like*m..n]-, e represents a list of data (edges), so Union is needed to merge the results of each traversal step. The execution plan will be evolved further as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbJSdFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138245877-36d53b4a-0643-4058-8ffb-23502edc0901.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbJSdFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138245877-36d53b4a-0643-4058-8ffb-23502edc0901.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-variablelength-patterns"&gt;
  &lt;/a&gt;
  Connecting Variable-Length Patterns
&lt;/h3&gt;

&lt;p&gt;After the implementations of the preceding process, a physical plan will be generated for the ()-[e:like*m..n]- pattern. If multiple similar patterns are connected together, such a process is iterated. However, before the iteration, the results of the previous process must be filtered to get the paths of length m to length n. The retrieved dataset of the previous process involves the paths of length 1 to length n, so filtering them by path length is needed. When the variable-length patterns are connected together, the execution plan becomes as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS16LRwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138246601-acec9a6e-07b7-4f2d-ba0e-40850dabb63c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS16LRwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138246601-acec9a6e-07b7-4f2d-ba0e-40850dabb63c.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the step-by-step decomposition of the patterns, the expected execution plan for the MATCH clause is finally generated. As you can see, it takes a lot of effort to transform a complicated pattern into the underlying interfaces for a traversal. Of course, the execution plan can be optimized, such as the multi-step traversal can be encapsulated by using the Loop operator and the sub-plan of a one-step traversal can be reused, which will not be detailed in this article. If you are interested, please refer to &lt;a href="https://github.com/vesoft-inc/nebula/blob/master/src/graph/planner/match/Expand.cpp"&gt;the source code of Nebula Graph&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This article demonstrated the process of generating an execution plan for a MATCH clause with a variable-length pattern. While reading the article, you may have this question: Why such a basic and simple path query will generate such a complicated execution plan in Nebula Graph? It’s not like Neo4j, where only a few operators are needed to complete the same job. In Nebula Graph, complicated directed acyclic graphs (DAG) are generated.&lt;/p&gt;

&lt;p&gt;The answer is that in Nebula Graph, the operators are closer to the underlying interfaces and there is a lack of semantic abstractions for higher-level graph operations. The operator granularity is too fine, so too many details need to be considered to implement the optimization of the upper layer. We will further study the execution operators to gradually improve the functionality and the performance of the MATCH clause.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
    </item>
    <item>
      <title>5 proverbs for rapid development</title>
      <author>Aatmaj</author>
      <pubDate>Fri, 22 Oct 2021 06:06:40 +0000</pubDate>
      <link>https://dev.to/aatmaj/5-proverbs-for-rapid-development-2o4o</link>
      <guid>https://dev.to/aatmaj/5-proverbs-for-rapid-development-2o4o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#let-us-see-five-proverbs-which-fit-perfectly-to-the-rapid-development-scenario"&gt;
  &lt;/a&gt;
  Let us see five proverbs which fit perfectly to the rapid development scenario.
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#an-ounce-of-protection-is-worth-a-pound-of-cure"&gt;
  &lt;/a&gt;
  An ounce of protection is worth a pound of cure.
&lt;/h3&gt;

&lt;p&gt;A little precaution before a crisis hits is better than lot of firefighting afterwards.&lt;br&gt;
Many times, developers neglect risk management. Risk management, identification and prevention are more critical than we think. Unidentified risks cause a lot of trouble in the later stages of software development. This is why, preventing such risks is wiser than to fix them after they get worsened. Identifying risks and taking precautions against them, that is protecting the project against the risk is a key to rapid development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-stich-in-time-saves-nine"&gt;
  &lt;/a&gt;
  A stich in time saves nine
&lt;/h3&gt;

&lt;p&gt;Correction at early stages saves work later.&lt;br&gt;
In a software development lifecycle, doing right things at the right time is very important. If work is delayed in the earlier stages, it can causes much trouble afterward. Example a flaw in the design time is not fixed is bound to cause a disaster. And one flaw in the implementation time if not fixed will take almost triple the time to fix at the debugging phase. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-the-stream-where-it-is-shallowest"&gt;
  &lt;/a&gt;
  Cross the stream where it is shallowest.
&lt;/h3&gt;

&lt;p&gt;Don't complicate things unnecessarily.&lt;br&gt;
Many developers believe that the more complicated things will be made, the better the project will execute. But that's not the case. In reality complicated practices, stringent methodologies actually lengthen the process rather than  making it faster. This is why many times the simple is the best. Complex design patters, complex code leads only to increasing the clutter of the program. Yes, this doesnt mean that one must nor use complex patterns or code. This means that one must always strive for a simpler solution to the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-the-doughnut-and-not-the-hole"&gt;
  &lt;/a&gt;
  Watch the doughnut, and not the hole.
&lt;/h3&gt;

&lt;p&gt;Focus on what you have rather than at what you don't.&lt;br&gt;
In a software development lifecycle, one cannot get all the aspects perfect. In that case, you need to maximize what you have over what you don't. For example you might not have trained personnel, or say might not have enough time. But in such cases, you must focus on what you have and try to give the best possible. Focus on your strengths and try to win the match.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#too-many-cooks-spoil-the-broth"&gt;
  &lt;/a&gt;
  Too many cooks spoil the broth.
&lt;/h3&gt;

&lt;p&gt;If too many people are involved in a task or activity, it will not be done well.&lt;br&gt;
This is often the case with software development scenarios. Too many people who are experienced and have their own different viewpoints. While difference in perspectives always leads to better ideas, there must be only one decision maker whome everyone  must follow. Disagree but commit must be the case with those who are the subordinates. If too many people are decision makers, then it will lead to chaos.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Branching and working with remotes in git</title>
      <author>s-heins</author>
      <pubDate>Fri, 22 Oct 2021 05:50:23 +0000</pubDate>
      <link>https://dev.to/sheins/branching-and-working-with-remotes-1a9k</link>
      <guid>https://dev.to/sheins/branching-and-working-with-remotes-1a9k</guid>
      <description>&lt;p&gt;In this article, we will have a look at how to work with remotes in order to work together with collaborators, how to work with branches, how to resolve conflicts between two sets of changes (aka "Why does git reject my push?"), and finally, how to merge and delete branches using the CLI or the GitHub UI.&lt;/p&gt;

&lt;p&gt;(Cover image by &lt;a href="https://freeimages.com/photographer/zirak-34282"&gt;fabrizio turco&lt;/a&gt; from &lt;a href="https://freeimages.com"&gt;FreeImages&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56"&gt;Introduction article&lt;/a&gt;, we looked at how to set up a local git repository, how to configure git and create aliases, and how to add and commit files on the example of creating an encyclopedia with articles and a list of topics to write about. We have also added some aliases to our gitconfig file at &lt;code&gt;~/.gitconfig&lt;/code&gt;, such as this one that lets us print a neat-looking tree in the command line to show us the git history. I'm adding it here again since we will keep using it throughout this article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
lg &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;clear &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git log &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'format:%C(auto)%h%d %s  %C(magenta)[%an] (%ad)%C(reset)'&lt;/span&gt; &lt;span class="nt"&gt;--date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;'%d.%m.%y %H:%M'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will look at how to save our work remotely so that we won't only have access to it locally on our machine but also on other machines and can work on changes together with collaborators. Our encyclopedia is going places and at any rate, we wouldn't want to do it all by ourselves. It's time to give this thing called balance a go and let other people join in on our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-remotes"&gt;
  &lt;/a&gt;
  Working with remotes
&lt;/h2&gt;

&lt;p&gt;All we have for now is our changes on our own machine. Anything that we commit will not be lost as long as our machine is working, but we can't share it with anyone else easily nor will it be safe if our device decides to stop working (as they tend to do in the most inopportune moments).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-remote-repository"&gt;
  &lt;/a&gt;
  Creating a remote repository
&lt;/h3&gt;

&lt;p&gt;Firstly, we need to settle on a place to host our repository. This could be GitHub or GitLab, for example.&lt;br&gt;
After creating an account, we can create our repository.&lt;br&gt;
On how to set up a repository, please see these articles in their respective documentation pages: &lt;a href="https://docs.github.com/en/get-started/quickstart/create-a-repo"&gt;GitHub&lt;/a&gt;, &lt;a href="https://docs.gitlab.com/ee/user/project/repository/"&gt;GitLab&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pushing-our-existing-changes-to-the-remote"&gt;
  &lt;/a&gt;
  Pushing our existing changes to the remote
&lt;/h3&gt;

&lt;p&gt;After creating a new repository on GitHub, it already shows us some instructions on how to push an existing git repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dm20rdmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbzm33rbwdn9ar1u0ysl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dm20rdmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbzm33rbwdn9ar1u0ysl.png" alt="GitHub instructions on how to push an existing repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first line is adding a so-called &lt;code&gt;origin&lt;/code&gt; to our local repository. This is referencing our new repo on github. In this example you can see that I have chosen to use SSH but this can be switched with a button further on top if you want to use HTTP. Using SSH will require you to set up a private and public SSH key pair whereas you will only have to authenticate with your username and password or access key if you use HTTP, so it will be easier if you have never done this before.&lt;br&gt;
Since I had previously connected to GitHub on my machine, I was not prompted for my login credentials here. If you are, enter the credentials you are prompted for and then you are able to push to your remote repository, to your origin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_O40ur5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exiljbj6jndw9rk0vs1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O40ur5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exiljbj6jndw9rk0vs1x.png" alt="Pushing to a remote repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pushing, we can now see our changes on the site we have chosen as a host for our repo after refreshing in the browser. It will also show the last commit message, "Add a house cat" in this example, along with our files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNqEWa7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eia07zdzfs44e8l3d7ps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNqEWa7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eia07zdzfs44e8l3d7ps.png" alt="Github overview over repository"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cloning-a-remote"&gt;
  &lt;/a&gt;
  Cloning a remote
&lt;/h3&gt;

&lt;p&gt;For now, we have worked alone on our encyclopedia, or rather, the list of animals we want to write about.&lt;br&gt;
Our git history will look something like this; it's a single line since we have only worked on one branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLTcIjGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niksi4rudyb0xlbi38ny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLTcIjGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niksi4rudyb0xlbi38ny.png" alt="Git history with single branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our editor tells us to get cracking since so far, we have only made one measly list of animals to write about, it's not quite an encyclopedia. We have already pushed our repo, so we're ready to have collaborators join us in this project!&lt;br&gt;
We have managed to recruit Anna Animallover and Wolfgang Wanderlust to join us. Anna is going to help us complete our list of animals and then write articles on them and Wolfgang will write about cities of interest.&lt;/p&gt;

&lt;p&gt;You can find the address for your repository on the site you have chosen to host it – you will need this so that Anna and Wolfgang can clone your repository.\&lt;br&gt;
On GitHub, it looks like below. As before, you can choose either HTTP or SSH which will change the link. In this example, it is &lt;code&gt;https://github.com/s-heins/git-encyclopedia-example.git&lt;/code&gt; for HTTP and &lt;code&gt;git@github.com:s-heins/git-encyclopedia-example.git&lt;/code&gt; for SSH.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_HOTW8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ykc3i2e4dbc9wfdbeu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_HOTW8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ykc3i2e4dbc9wfdbeu.png" alt="Github UI cloning repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anna and Wolfgang can then clone our repository by running &lt;code&gt;git clone &amp;lt;repository-address&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JVxsReX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if0xm2e4mif34zrw8vel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JVxsReX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if0xm2e4mif34zrw8vel.png" alt="Cloning the remote"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#branching"&gt;
  &lt;/a&gt;
  Branching
&lt;/h2&gt;

&lt;p&gt;The first thing Anna wants to do is create a new branch. This way we can keep the main branch for things that have already been reviewed and we can have our in-progress work in the other branches of our project.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-new-branch"&gt;
  &lt;/a&gt;
  Creating a new branch
&lt;/h3&gt;

&lt;p&gt;To create a new branch and switch to it, use &lt;code&gt;git checkout -b my-branch-name&lt;/code&gt;. In case you are working with tickets on Jira, for example, prefixing your branch with the ticket name enables your team to get a good overview on what tickets are currently in progress. We could name our branch "ENC-001_add-animal-articles" if our ticket number is "ENC-001", for example.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pushing-a-new-branch-to-origin"&gt;
  &lt;/a&gt;
  Pushing a new branch to origin
&lt;/h3&gt;

&lt;p&gt;After Anna has added some articles (&lt;code&gt;git add .&lt;/code&gt;) and committed them to her local repository (&lt;code&gt;git commit -m "My message"&lt;/code&gt;), she wants to push those changes to the remote.&lt;br&gt;
She can do so by running &lt;code&gt;git push -u origin my-branch-name&lt;/code&gt;. With this, her local changes are propagated to our origin (also called &lt;em&gt;upstream&lt;/em&gt;), our repository on GitHub. Now it is possible for others to see Anna's changes and add their own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ID0dvyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1com8n5xsg4pvkbrags.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ID0dvyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1com8n5xsg4pvkbrags.png" alt="Pushing a new branch to the remote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From our machine, we can now &lt;code&gt;git pull&lt;/code&gt; and git will tell us that a new branch has been created. We can check it out by running &lt;code&gt;git checkout articles-on-animals-from-list&lt;/code&gt;. This will switch our working branch to Anna's branch and since we just pulled, we will also have her latest committed changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2RslZ5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dprtizf1e5yxii1zj97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2RslZ5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dprtizf1e5yxii1zj97.png" alt="Git pull shows me that a new branch has been created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After we have created articles for the animals that are still missing from the list, we can add those changes to a commit and push them. This time, git already knows the upstream branch (namely, &lt;code&gt;origin/articles-on-animals-from-list&lt;/code&gt;), and thus we can just use &lt;code&gt;git push&lt;/code&gt; without any arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t1cy3diX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yq1jq07ky86g2gxh3pm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1cy3diX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yq1jq07ky86g2gxh3pm.png" alt="Adding more files and pushing to the new branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Anna pulls again, she will also have our changes.&lt;/p&gt;

&lt;p&gt;By using the same branch and adding our commits, we can safely collaborate. Anna and me can both commit and push our changes as we go along. We just shouldn't both alter the same file at the same time or we will get conflicts that we will need to resolve.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resolving-conflicts"&gt;
  &lt;/a&gt;
  Resolving conflicts
&lt;/h2&gt;

&lt;p&gt;Let's say we have the idea to add more animals to our list of animals to write about but Anna has the same idea. We add a gorilla and a chimpanzee, she adds an alligator and a crocodile. We push first so now the file will have updated without Anna knowing about it.&lt;/p&gt;

&lt;p&gt;When Anna tries to push her commit, git will not let her. It rejects her commit and tells her to pull first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aefWv559--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gh7rmpzhx5qcmmq79gx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aefWv559--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gh7rmpzhx5qcmmq79gx2.png" alt="Git has rejected Anna's push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once Anna pulls, git now tells her she has a conflict. If you use an IDE with version control functionality, you can also resolve any conflicts there and you normally would. Here, we will go the manual way for now because it will give us some insight into what happens in git behind the scenes without part of it being masked by IDE functionality.&lt;/p&gt;

&lt;p&gt;As you can see, the contents of the file have a line saying &lt;code&gt;HEAD&lt;/code&gt; that contain our changes where we added the gorilla and chimpanzee (the changes that we have already pushed to our branch on the remote), then another line of equals signs as separators, then her changes where she added the alligator and the crocodile, and then a line with the name of her commit, &lt;code&gt;7aaee11&lt;/code&gt;, and her commit message (&lt;code&gt;Add alligator and crocodile to the list&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oB0KMn1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpvt871rw9r3t5u3ac24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oB0KMn1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpvt871rw9r3t5u3ac24.png" alt="Git has rejected the pull since there were upstream changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look at the git tree in the console again, we can see that Anna's commit, &lt;code&gt;7aaee11&lt;/code&gt; and my commit that is pushed to the upstream, &lt;code&gt;ba9e8f3&lt;/code&gt; both have the same parent. We now have to resolve the conflicts so that Anna's changes can be propagated to our repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlOqMonj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jdaup7c2o6ftzthzrrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlOqMonj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jdaup7c2o6ftzthzrrp.png" alt="Git tree with conflict"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now edit the file to remove the three lines git has added to show us the parts of the file where we have conflicts. Since we want to retain all animals, we only need to delete these lines. As you can see on the screenshot, the file only has the list of animals afterwards, and the lines with the &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;====&lt;/code&gt; are no longer contained.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65VMJs_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myim51kzcbpgh2186lpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65VMJs_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myim51kzcbpgh2186lpb.png" alt="Resolving conflicts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After we have resolved the conflicts, we need to add the file so git knows that we can continue reconciling the changes that Anna and I have made.&lt;br&gt;
In this case, I have put a line in my &lt;code&gt;~/.gitconfig&lt;/code&gt; file telling git it should &lt;em&gt;rebase&lt;/em&gt; rather than try to &lt;em&gt;merge&lt;/em&gt; any conflicts. That means that it will try to make it as if Anna's changes had come after my own. We will go into the difference between merging and rebasing in a later article. For now, it doesn't matter that much which one you pick. If you look at the above screenshot, you will see git tells me to run &lt;code&gt;git rebase --continue&lt;/code&gt; once I am done resolving my conflicts. If you chose &lt;code&gt;merge&lt;/code&gt; as a pull strategy, it will tell you to run &lt;code&gt;git merge --continue&lt;/code&gt; instead. This will only have an impact on how our tree looks afterwards but it will not have any impact on our file changes.&lt;/p&gt;

&lt;p&gt;If we now look at the git tree after finishing the rebase, we can see that it looks as if Anna had done her changes after our own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UmTvR2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30gywqbpfvs0tv51464w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UmTvR2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30gywqbpfvs0tv51464w.png" alt="If we look at the git tree, Anna's changes will appear after our own"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#merging-and-deleting-branches-from-the-console"&gt;
  &lt;/a&gt;
  Merging and deleting branches from the console
&lt;/h2&gt;

&lt;p&gt;Let's say we have added articles on all animals we had on our list for now, have shown them to our editor, and they are happy with them. That means that we can now propagate those changes into our main branch and will no longer need our branch &lt;code&gt;articles-on-animals-from-list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, we'll want to &lt;code&gt;git pull&lt;/code&gt; on our article branch to make sure we have the latest changes. Then, we check out the main branch and run &lt;code&gt;git merge articles-on-animals-from-list&lt;/code&gt;. Afterwards, we push again to make sure those changes are also on our upstream main branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F41RicdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jusdz685c9u95fq8qsn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F41RicdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jusdz685c9u95fq8qsn0.png" alt="Merging our branch to main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Afterwards, we can delete the branch on your machine by running this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-D&lt;/span&gt; articles-on-animals-from-list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this command to delete the remote branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--delete&lt;/span&gt; articles-on-animals-from-list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#merging-and-deleting-branches-from-the-github-ui"&gt;
  &lt;/a&gt;
  Merging and deleting branches from the GitHub UI
&lt;/h2&gt;

&lt;p&gt;In practice, you will probably never run these commands from the CLI but rather use a version control provider such as GitHub or GitLab. Rather, you will create a request to propagate your changes into the main branch, called &lt;em&gt;pull request (PR)&lt;/em&gt; on GitHub, and &lt;em&gt;merge request (MR)&lt;/em&gt; on GitLab.&lt;/p&gt;

&lt;p&gt;On GitHub, click on the "Pull requests" tab and then on the button saying "Compare &amp;amp; pull request".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7fhv7zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e475k2i4eop4aufpr94d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7fhv7zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e475k2i4eop4aufpr94d.png" alt="Creating a pull request via the GitHub UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next dialogue window, click on "Create pull request".&lt;br&gt;
You will see an overview page where you can see how many commits will be added to main and what changes they will introduce.&lt;/p&gt;

&lt;p&gt;After it has been reviewed, it can be merged to main by clicking the "Merge pull request" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrQ9EcIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3c0fheax13uvhtuhk8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrQ9EcIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3c0fheax13uvhtuhk8w.png" alt='Click on "merge pull request" to merge your changes to main'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After confirming the merge, you also have the option to delete your old branch via the UI. However, this will only delete the remote branch and you will still have to run &lt;code&gt;git branch -D articles-on-animals-from-list&lt;/code&gt; to delete your local branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-command-summary"&gt;
  &lt;/a&gt;
  Conclusion and command summary
&lt;/h2&gt;

&lt;p&gt;We have looked at how to push our changes to a remote repository and have created our first branch, kept adding and committing and have resolved our first conflict!&lt;/p&gt;

&lt;p&gt;Here are some commands to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git clone &amp;lt;address&amp;gt;&lt;/code&gt; to clone a remote repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b my-branch-name&lt;/code&gt; to create a new branch and switch to it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git push -u origin my-branch-name&lt;/code&gt; to push a branch to a remote&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout my-branch-name&lt;/code&gt; to switch to an existing branch from the remote&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull&lt;/code&gt; to pull changes from the remote&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git rebase --continue&lt;/code&gt; or &lt;code&gt;git merge --continue&lt;/code&gt; to continue a rebase or merge after adding files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git merge my-branch&lt;/code&gt; to merge "my-branch" into the branch you have currently checked out&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git branch -D my-branch&lt;/code&gt; to delete "my-branch" locally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git push --delete my-branch&lt;/code&gt; to delete "my-branch" on the upstream&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Handful Github Repos for Full stack web developer</title>
      <author>rams codes</author>
      <pubDate>Fri, 22 Oct 2021 05:02:13 +0000</pubDate>
      <link>https://dev.to/code_rams/handful-github-repos-for-full-stack-web-developer-2625</link>
      <guid>https://dev.to/code_rams/handful-github-repos-for-full-stack-web-developer-2625</guid>
      <description>&lt;p&gt;This article contains a list of useful GitHub repositories to help full-stack web developers to improve their skills. &lt;/p&gt;

&lt;p&gt;It is structured in the following order,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Roadmap&lt;/li&gt;
&lt;li&gt;Front end developer resources&lt;/li&gt;
&lt;li&gt;Backend developer resources&lt;/li&gt;
&lt;li&gt;Full-stack developer resources&lt;/li&gt;
&lt;li&gt;Web development tools&lt;/li&gt;
&lt;li&gt;Projects based learning &lt;/li&gt;
&lt;li&gt;Free books and additional tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-web-developer-roadmap"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Web Developer Roadmap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The roadmap is a guided way to start your journey to become a full stack developer. This repo contains the roadmap for a complete front-end, back-end and dev-ops learning pathway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGOAEz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632930953254/VGpH7sz8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGOAEz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632930953254/VGpH7sz8f.png" alt="Screenshot 2021-09-29 at 9.25.28 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-design-resources-for-developers"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;Design resources for Developers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains the curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBUi-MW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931132372/h8H-XZ416l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBUi-MW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931132372/h8H-XZ416l.png" alt="Screenshot 2021-09-29 at 9.28.29 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-frontend-web-development-resources"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/RitikPatni/Front-End-Web-Development-Resources"&gt;Frontend Web Development Resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A practical journey of tools and resources to become front-end Web Developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJMn4-8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931187932/VKfWHtvsX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJMn4-8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931187932/VKfWHtvsX.png" alt="Screenshot 2021-09-29 at 9.29.32 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-frontend-dev-bookmarks"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/dypsilon/frontend-dev-bookmarks"&gt;Frontend Dev Bookmarks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The curated collection of resources for frontend web developers for appearance, architecture, compatibility, user interface and a lot more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QaweHA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931437119/VjcRZPEiS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QaweHA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931437119/VjcRZPEiS.png" alt="Screenshot 2021-09-29 at 9.33.43 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-frontend-interview-handbook"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/yangshun/front-end-interview-handbook"&gt;Frontend Interview Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Contains Front End interview preparation materials for developers includes - pop quizzes, coding, front end system design and more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x53CvQoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931521605/xiwdGndHV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x53CvQoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931521605/xiwdGndHV.png" alt="Screenshot 2021-09-29 at 9.35.08 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-awesome-backend-engineer"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/zhashkevych/awesome-backend"&gt;Awesome Backend Engineer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A curated and opinionated list of resources for backend developers includes resources for networking, databases, security, architecture and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZwRFRTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931639670/5QPWNuDY5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZwRFRTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931639670/5QPWNuDY5.png" alt="Screenshot 2021-09-29 at 9.37.00 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-ultimate-node-js-resources"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/DHANUSHXENO/Ultimate-NodeJs-Resources"&gt;Ultimate Node js resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This repo contains resources for Nodejs includes Github repos, books, blogs, youtube videos to refer and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QyDMzGgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931807823/Hqf9zL1Pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QyDMzGgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931807823/Hqf9zL1Pp.png" alt="Screenshot 2021-09-29 at 9.39.43 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-javascript-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms and Data Structures&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains Js based examples of many popular algorithms and data structures.&lt;/p&gt;

&lt;p&gt;Each algorithm and data structure has its own related explanations and links for further reading (including YouTube videos).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLXwiM44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931888084/3NVAfFPsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLXwiM44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931888084/3NVAfFPsQ.png" alt="Screenshot 2021-09-29 at 9.41.11 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-30-seconds-of-code"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains a wide variety of ES6 helper functions includes helpers for dealing with primitives, arrays and objects, as well as algorithms, DOM manipulation functions and Node.js utilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djQs5qou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931953290/abxRy3tza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djQs5qou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931953290/abxRy3tza.png" alt="Screenshot 2021-09-29 at 9.42.21 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-become-a-full-stack-web-developer"&gt;
  &lt;/a&gt;
  10. &lt;a href=""&gt;Become a Full Stack Web Developer &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains free resources for learning Full Stack Web Development which includes a complete learning journey to become a full-stack web developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2I-ScV06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932011333/YzXXn4fMq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2I-ScV06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932011333/YzXXn4fMq.png" alt="Screenshot 2021-09-29 at 9.43.20 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-web-development-resources"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://github.com/markodenic/web-development-resources"&gt;Web Development Resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tools for web development includes illustrations, icons, fonts, templates, libraries and a lot more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0G99u54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932082437/13A4HMokIp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0G99u54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932082437/13A4HMokIp.png" alt="Screenshot 2021-09-29 at 9.44.09 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-free-for-dev"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://github.com/ripienaar/free-for-dev"&gt;Free for Dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains a complete list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8A-N1Jvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932140332/q1FHMkJPp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8A-N1Jvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932140332/q1FHMkJPp.png" alt="Screenshot 2021-09-29 at 9.45.28 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-tech-interview-handbook"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Curated technical interview preparation materials to clear technical interviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EahORpDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932217084/8-wMVUWYI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EahORpDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932217084/8-wMVUWYI.png" alt="Screenshot 2021-09-29 at 9.46.44 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-projectbased-learning"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://github.com/practical-tutorials/project-based-learning"&gt;Project-Based Learning &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;"Learn by doing" is the best approach to learn to code. &lt;/p&gt;

&lt;p&gt;Here are programming tutorials in which you can learn to build an application from scratch. &lt;/p&gt;

&lt;p&gt;These tutorials are divided into different primary programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x1Sg-DLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932277599/iXjngmzkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1Sg-DLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932277599/iXjngmzkf.png" alt="Screenshot 2021-09-29 at 9.47.47 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-free-programming-books"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Contains the list of books and resources for all programming languages in many languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7aQteOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932346893/Yc8IBSdiI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7aQteOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932346893/Yc8IBSdiI.png" alt="Screenshot 2021-09-29 at 9.48.54 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-awesome"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains Awesome lists about all kinds of interesting topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh8KYUOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932402343/wE9by_g4M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh8KYUOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932402343/wE9by_g4M.png" alt="Screenshot 2021-09-29 at 9.49.51 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for taking your time and reading this article, it was originally written as Twitter &lt;a href="https://twitter.com/code_rams/status/1443211619090243590"&gt;thread&lt;/a&gt;, and posted in my personal blog &lt;a href="https://ramyachinnadurai.in/handful-github-repos-for-full-stack-web-developer"&gt;ramyachinnadurai.in&lt;/a&gt;. If you have any suggestions or ideas to share feel free to contact me on  &lt;a href="https://twitter.com/code_rams"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>fullstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Appwrite Users Services</title>
      <author>Asian Cat</author>
      <pubDate>Fri, 22 Oct 2021 04:59:09 +0000</pubDate>
      <link>https://dev.to/asiancat54x/appwrite-users-services-4ohk</link>
      <guid>https://dev.to/asiancat54x/appwrite-users-services-4ohk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pe1riDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9v7gap3s63m903rnn2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pe1riDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9v7gap3s63m903rnn2o.png" alt="Appwrite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appwrite"&gt;
  &lt;/a&gt;
  What is Appwrite?
&lt;/h2&gt;

&lt;p&gt;Appwrite is an end-to-end backend server for Web, Mobile, Native, or Backend apps packaged as a set of Docker microservices. Appwrite abstracts the complexity and repetitiveness required to build a modern backend API from scratch and allows you to build secure apps faster.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#how-will-this-post-be-help-to-you"&gt;
  &lt;/a&gt;
  How will this post be help to you?
&lt;/h2&gt;

&lt;p&gt;This post is for the beginners who are trying to get started with Appwrite. This post teaches you how you can use Appwrite user services in your Appwrite project.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-are-we-going-to-use"&gt;
  &lt;/a&gt;
  What are we going to use?
&lt;/h2&gt;

&lt;p&gt;We will be using:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/electron/electron"&gt;Electron&lt;/a&gt; as frontend&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/caroso1222/notyf"&gt;Notyf&lt;/a&gt; for displaying toast messages&lt;/li&gt;
&lt;/ol&gt;



&lt;h2&gt;
  &lt;a href="#what-we-will-do"&gt;
  &lt;/a&gt;
  What we will do
&lt;/h2&gt;

&lt;p&gt;We will be creating a simple login / signup form using Appwrite's users services. The registered user can see other users who are registered and check their username , email verification status , registeration date etc.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h2&gt;

&lt;p&gt;Now we will install all the required dependencies for out project&lt;/p&gt;

&lt;p&gt;package.json should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "appwrite-toturial",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "electron ."
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "appwrite": "^4.0.4",
    "dotenv": "^10.0.0",
    "electron": "^15.3.0",
    "moment": "^2.29.1",
    "node-appwrite": "^2.5.1"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h2&gt;

&lt;p&gt;Create three files - index.html , styles.css and app.js&lt;/p&gt;

&lt;p&gt;The code for the frontend (html and css) in the github repository.&lt;/p&gt;

&lt;p&gt;app.js should be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const notyf = new Notyf()

const loginText = document.querySelector(".title-text .login");
const loginForm = document.querySelector("form.login");
const loginBtn = document.querySelector("label.login");
const signupBtn = document.querySelector("label.signup");
const signupLink = document.querySelector("form .signup-link a");

signupBtn.onclick = ((e) =&amp;gt; {
    loginForm.style.marginLeft = "-50%";

    loginText.style.marginLeft = "-50%";
});

loginBtn.onclick = (() =&amp;gt; {
    loginForm.style.marginLeft = "0%";

    loginText.style.marginLeft = "0%";
});

signupLink.onclick = (() =&amp;gt; {
    signupBtn.click();

    return false;
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;index.js:&lt;/p&gt;

&lt;p&gt;This file will be our entrypoint for this application. We will initialize electron here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { app , BrowserWindow } = require("electron")
const path = require("path")

app.on("ready", () =&amp;gt; {
    const window = new BrowserWindow({
        "width": 500,
        "height": 500,
        "webPreferences": {
            "nodeIntegration": true,
            "contextIsolation": false,
        }
    })

    window.loadFile(path.join(__dirname, "index.html"))
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run &lt;code&gt;npm run start&lt;/code&gt; and you should see a login / signup form.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-application"&gt;
  &lt;/a&gt;
  Starting the application
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Gather all the input and buttons for getting the data from user&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will use JavaScript's &lt;code&gt;.querySelector&lt;/code&gt; method for selecting both the buttons and listen for each of them&lt;/p&gt;

&lt;p&gt;In app.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const loginText = document.querySelector(".title-text .login");
const loginForm = document.querySelector("form.login");
const loginBtn = document.querySelector("label.login");
const signupBtn = document.querySelector("label.signup");
const signupLink = document.querySelector("form .signup-link a");

signupBtn.onclick = (() =&amp;gt; {
    loginForm.style.marginLeft = "-50%";

    loginText.style.marginLeft = "-50%";

    signUp()
});

loginBtn.onclick = (() =&amp;gt; {
    loginForm.style.marginLeft = "0%";

    loginText.style.marginLeft = "0%";

    signIn()
});

signupLink.onclick = (() =&amp;gt; {
    signupBtn.click();

    return false;
});

document.addEventListener("keydown" , (e) =&amp;gt; {
    if(e.keyCode === 27){
        const target = document.querySelector(".userInfo")

        if(target.style.opacity == 1){
            target.classList.add("fade")

            target.style.display = "block"

            setTimeout(() =&amp;gt; {
                target.classList.remove("fade")

                target.style.opacity = 0

                target.style.display = "none"
            } , 599)

            notyf.success("Press ESC to close")
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will first start by creating a new user.&lt;/p&gt;

&lt;p&gt;To create a new user, firstly we will have to initialize all the required classes from appwrite.&lt;/p&gt;

&lt;p&gt;Gather projectId , endPoint and api Key from appwrite's dashboard and use them here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sdk = require("node-appwrite")

const client = new sdk.Client()

client.setEndpoint(apiEndPoint)
      .setProject(projectId)
      .setKey(projectAPiKey)

const users = new sdk.Users(client)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will listen for the click and add user to database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector(".signUp_button").addEventListener("click" , (e) =&amp;gt; {
    e.preventDefault()

    const username = document.querySelector(".sign_up_username").value

    const email = document.querySelector(".sign_up_email").value

    const password = document.querySelector(".sign_up_password").value

    if(password.length &amp;lt; 6){
        notyf.error("Password must be at least 6 characters")

        return
    }

    users.create(email , password , username).then((res) =&amp;gt; {
        notyf.success("Successfully Created A New User!")
    })
    .catch((err) =&amp;gt; {
        console.error(err)

        notyf.error("Error while creating a new user!")
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this is the function which will run on click of the sign up button&lt;/p&gt;

&lt;p&gt;The first line is pretty simple, it prevents the default behaviour. The next three lines are for the user's credentials. Next, we are checking if the length of the password is not less than 6. &lt;code&gt;Note: Appwrite raises an error if the password length is less that 6&lt;/code&gt;. Finally, creating users is pretty simple. The User class which we initiated, will be used to create the user. Now run the file and enter username , email address and password.&lt;/p&gt;

&lt;p&gt;Now, move to the appwrite's dashboard and click the Users button under Develop in left panel. &lt;/p&gt;

&lt;p&gt;Now, you will see that a new user is created and it should look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV17Q0gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnzmzlicydyv85vqabtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV17Q0gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnzmzlicydyv85vqabtw.png" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! We have successfully created sign up form!&lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;Making login form&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, making login form is as simple as creating user. Instead, it is done using a different module named &lt;code&gt;appwrite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is how you would do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Import the appwrite module
const { Appwrite } = require("appwrite")
const server = new Appwrite()

server.setEndpoint(endPoint)
      .setProject(projectID)

document.querySelector(".login_button").addEventListener("click" , (e) =&amp;gt; {
    e.preventDefault()

    const email = document.querySelector(".signin_email").value;

    const password = document.querySelector(".signin_password").value

    server.account.createSession(email, password).then((res) =&amp;gt; {
        notyf.success("Successfully logged in!")
    })
    .catch((err) =&amp;gt; {
        notyf.error("Username or password is incorrect!")
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, firstly we are listening for the click. On click, we are gathering username and password from input element in DOM. Next, we are creating a session for the user login. This session can be used for the next time whenever the users opens the app (The session is stored inside of the user's system and can be retrived any time). It would directly take them to dashboard instead to again doing login. So, if the account email and password are correct, we would send a message saying that there was a successful login. If the login email / password is incorrect, we will display invalid credentials message.&lt;/p&gt;

&lt;p&gt;Now, we have successfully created a working login / signup system!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#showing-a-list-of-users-available"&gt;
  &lt;/a&gt;
  Showing a list of users available
&lt;/h2&gt;

&lt;p&gt;Now that our login / signup system is complete, we will show the users, the names of all the other users registered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
users.list().then((users) =&amp;gt; {
    const parent = document.querySelector(".users")

    for(let user of users.users) {
        const card = document.createElement("div");

        card.addEventListener("click" , parseFunction(showUser , [user["$id"]]));

        card.classList.add("user-card")

        card.innerHTML = user.name;

        parent.appendChild(card);
    }
})
.catch((err) =&amp;gt; {})

const parseFunction = (name , args) =&amp;gt; {
    return () =&amp;gt; name(...args)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, here, firstly, we are requesting to the appwrite to send a list of all the users registered. &lt;code&gt;users.list&lt;/code&gt; returns a object with the list of users. &lt;code&gt;name&lt;/code&gt; gives the name of that specific user. There are other properties too which can be used. You can see them &lt;a href="https://appwrite.io/docs/models/userList"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you run this function, you will see a list of users logged in (even though at first, you will see your own username if you are the only one registered, you can try to sign up with multiple emails and test that out). &lt;/p&gt;

&lt;p&gt;Next, we are just creating a card for showing the user's name.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#show-users-profile"&gt;
  &lt;/a&gt;
  Show user's profile
&lt;/h2&gt;

&lt;p&gt;So, when we will click on a specific user's card, we should see his/her name, when they signed up , and their status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const showUser = (userId) =&amp;gt; {
    users.get(userId).then((user) =&amp;gt; {
        document.querySelector(".userName").innerHTML = "Username: " + user.name
        document.querySelector(".userVerified").innerHTML = "Email Verified: " + (user.emailVerification ? "Verified" : "Not verified")
        document.querySelector(".userRegistration").innerHTML = "Registration: " + moment(user.registration).format("DD/MM/YYYY")
        document.querySelector(".userStatus").innerHTML = "Status: " + (user.status === 0 ? "Unactivated" : user.status === 1 ? "Activated" : "Blocked")

        const target = document.querySelector(".userInfo")

        if(target.style.opacity == 0){
            target.classList.add("unfade")

            target.style.display = "block"

            setTimeout(() =&amp;gt; {
                target.classList.remove("unfade")

                target.style.opacity = 1
            } , 599)

            notyf.success("Press ESC to close")
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this function fetchs the user according to the user id. Then, we can use the data to show the user's name , whether their email is verified , the date when they registered and their status (whether thay are active, inactive or blocked). &lt;a href="https://appwrite.io/docs/models/user"&gt;Here&lt;/a&gt; is the list of the data that appwrite returns. Next lines are for animation. The block appears with a unfading animation.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#updating-users-credentials"&gt;
  &lt;/a&gt;
  Updating user's credentials
&lt;/h2&gt;

&lt;p&gt;Now that we have created a system for user sign up, we should also allow users to edit their crendentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
document.querySelector(".update").addEventListener("click", (e) =&amp;gt; {
    e.stopImmediatePropagation()

    var f = false

    users.updateEmail(currentUserId , document.querySelector(".editEmail").value).then((res) =&amp;gt; {})
        .catch((err) =&amp;gt; {
            notyf.error("Invalid email")

            f = true
        })

    if(f){
        return
    }

    f = false

    users.updateName(currentUserId , document.querySelector(".editName").value).then((res) =&amp;gt; {})
        .catch((err) =&amp;gt; {
            notyf.error("Invalid email")

            f = true
        })

    if(f){
        return
    }

    f = false

    users.updatePassword(currentUserId , document.querySelector(".editPassword").value).then((res) =&amp;gt; {})
        .catch((err) =&amp;gt; {
            notyf.error("Invalid email")

            f = true
        })

    if(f){
        return
    }

    notyf.success("Successfully changed the credentials")
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, here firstly we are listening for the update button click. On click, we would do the following things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update the email - Get the new email from the input and check if there wasnt any error while updating. If there was, send a toast notification&lt;/li&gt;
&lt;li&gt;Update the username - Get the new username from the input and check if there wasnt any error while updating. If there was, send a toast notification&lt;/li&gt;
&lt;li&gt;Update the password - Get the new password from the input and check if there wasnt any error while updating. If there was, send a toast notification&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-logouts"&gt;
  &lt;/a&gt;
  Creating logouts
&lt;/h2&gt;

&lt;p&gt;Now, the user should be able to logout. This should go like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
document.querySelector(".logout").addEventListener("click", (e) =&amp;gt; {
    server.account.deleteSession("current")

    const target = document.querySelector('.wrapper')

    const secondtarget = document.querySelector(".dashboard")

    secondtarget.classList.add("fade")

    target.classList.add("unfade")

    target.style.display = "block"

    setTimeout(() =&amp;gt; {
        target.classList.remove("unfade")

        target.style.opacity = 1

        secondtarget.classList.remove("fade")

        secondtarget.style.opacity = 0
    } , 599)

    notyf.success("Successfully logged out")
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we are listening for the click on the logout button. Whenever the user clicks the button, we will delete the session that we have created during login. "current" deletes the current session saved in the user's system. As the session is deleted, next time we open up the app, it will redirect to the login / signup page.&lt;/p&gt;

&lt;p&gt;Next lines are for fading and unfading effect for the dashboard and authentication page, respectively. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deleting-account"&gt;
  &lt;/a&gt;
  Deleting account
&lt;/h2&gt;

&lt;p&gt;Now that we have created all the elements, we will now allow users to delete their account.&lt;/p&gt;

&lt;p&gt;The code should go like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector(".delete").addEventListener("click" , (e) =&amp;gt; {
    users.delete(currentUserId)

    const target = document.querySelector('.wrapper')

    const secondtarget = document.querySelector(".dashboard")

    secondtarget.classList.add("fade")

    target.classList.add("unfade")

    target.style.display = "block"

    setTimeout(() =&amp;gt; {
        target.classList.remove("unfade")

        target.style.opacity = 1

        secondtarget.classList.remove("fade")

        secondtarget.style.opacity = 0
    } , 599)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we will listen for the click on the delete button. Whenever the user clicks it, we will run the function.&lt;/p&gt;

&lt;p&gt;The first line of the function deletes the user from the databse. The next lines are just for the animations just like we did in logout.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that you will have understood how to use Appwrite's Users Services. This tutorial uses all the services that appwrite provides and bundles them into a project.&lt;/p&gt;

&lt;p&gt;I found out about Appwrite from the Hacktoberfest event. I really love this project. Its simple, easy and most of all - secure and fast. It has a good UI for seeing the requests count, database collections and users. I would really recommend using Appwrite while creating a database application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github repository
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/AsianCat54x/Appwrite-Tutorial"&gt;Here&lt;/a&gt; is the full source code for this project:  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>appwrite</category>
    </item>
    <item>
      <title>Code that replicates itself(not recursion)</title>
      <author>Shuvo</author>
      <pubDate>Fri, 22 Oct 2021 04:57:58 +0000</pubDate>
      <link>https://dev.to/0shuvo0/code-that-replicates-itselfnot-recursion-4chf</link>
      <guid>https://dev.to/0shuvo0/code-that-replicates-itselfnot-recursion-4chf</guid>
      <description>&lt;p&gt;This thing called virus is crazy as hell, right? Like some dude out of nowhere got infected by COVID-19 virus. Now the world is going through this huge pandemic. That is due to their ability to replicate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hUStiyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs8f73t3692hejst4sug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hUStiyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs8f73t3692hejst4sug.png" alt="Computer virus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The situation is similar with digital virus aka computer virus. If somehow just one virus can enter your computer, in right condition it will create millions of copies of itself.&lt;br&gt;
So what is a computer virus? A computer is just some code that has the ability to replicate itself. &lt;strong&gt;Code that can output itself is called Quine&lt;/strong&gt;.&lt;br&gt;
However a code that simply just reads itself is not a Quine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#not a quine
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Code for a quine is made out of two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;code used to do the printing&lt;/li&gt;
&lt;li&gt;data representing textual form of the code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's an example of quine in Python&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'q=%r;print (q%%q)'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#output: q='q=%r;print (q%%q)';print (q%q)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And in JS:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;`($=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)()`&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;

&lt;span class="c1"&gt;//output in console: ($=_=&amp;gt;`($=${$})()`)()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can find more examples of quine by following these links: &lt;a href="//geeksforgeeks.org/quines-in-javascript/"&gt;JavaScript Quines&lt;/a&gt;, &lt;a href="https://www.geeksforgeeks.org/quine-in-python/"&gt;Python Quines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for now. Make sure you check out my other articles and YT tutorials.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;iframe&gt;
  width="710"&lt;br&gt;
  height="399"&lt;br&gt;
  src="https://www.youtube.com/embed/cyUsAFblyhc"&lt;br&gt;
  allowfullscreen&lt;br&gt;
  loading="lazy"&amp;gt;&lt;br&gt;
&lt;/iframe&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why should you opt for React Migration?</title>
      <author>olga white</author>
      <pubDate>Fri, 22 Oct 2021 04:39:55 +0000</pubDate>
      <link>https://dev.to/whiteeolgaa/why-should-you-opt-for-react-migration-2251</link>
      <guid>https://dev.to/whiteeolgaa/why-should-you-opt-for-react-migration-2251</guid>
      <description>&lt;p&gt;When organizations could depend upon their items' provisions and administrations' benefits for assuming control over the market. In any case, the ascent in digitization turned the assumptions for customers to an alternate degree. &lt;a href="https://www.mckinsey.com/business-functions/mckinsey-design/our-insights/the-business-value-of-design"&gt;McKinsey says today buyers&lt;/a&gt; hope to infer personalization, instantaneousness, and comfort from their computerized insight. &lt;/p&gt;

&lt;p&gt;That made customer commitment an eminent highlight focus on. Subsequently, significant associations are attempting to lift their client experience, putting more noteworthy accentuation on their UI plan that goes about as an impetus to draw in and hold customers. In one more report by McKinsey, client focused plans eliminate the mass of physical and computerized administration and in the end works on monetary execution. &lt;/p&gt;

&lt;p&gt;Configuration isn't just with regards to inventiveness, yet it centers around the requirements, inspirations, and worries of your shoppers, states BCG. This further assists organizations with staying ready for serious difficulties and openings. Deloitte demonstrates the above assertion by saying that almost 79% of business chiefs accept that human-focused plan believing is essential to defeat complex issues. &lt;/p&gt;

&lt;p&gt;Thus alongside firm client research, select the best instrument and innovation to foster an insight driven human-focused plan. That is one more motivation to pick React Consulting Services. &lt;/p&gt;

&lt;p&gt;What is React? &lt;/p&gt;

&lt;p&gt;Respond is a reusable part based, open-source, front-end JavaScript library made by Jordan Walke, a Facebook programmer to deal with advertisements, in 2011. While Angular and Vue are noticeable players on the lookout, as per Google Trends, React has beaten them in the game due to its: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Quick turn of events&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upgraded execution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unidirectional information stream&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;System adaptability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reusable parts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple expectation to learn and adapt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code steadiness&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple investigating&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast delivering&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, React assists with creating web and portable application client driven plans with more noteworthy UI control and the board.&lt;/p&gt;

&lt;p&gt;For what reason would it be a good idea for you to decide on React Migration?&lt;/p&gt;

&lt;p&gt;Respond relocation has acquired a lot of noticeable quality on account of its structure. The React structure empowers designers to chip away at enormous web and versatile applications without page reloading concerns.&lt;/p&gt;

&lt;p&gt;In addition, ReactJS movement administrations help to foster client driven at this point well disposed applications with best in class elements and configuration stream. Respond is acceptable on numerous stages, and gives improved code reusability to foster cutting edge web and portable applications on a low financial plan. Plus, with React movement support of these applications becomes simpler and practical.&lt;/p&gt;

&lt;p&gt;The main associations all throughout the planet join ReactJS movement administrations with React counseling administrations to get the top tier application improvement experience.&lt;/p&gt;

&lt;p&gt;Presently there are huge loads of &lt;a href="https://www.cronj.com/react/reactjs-consulting"&gt;react js consulting&lt;/a&gt; organizations on the lookout. You can check for yourself by basically composing "Respond JS Consulting Companies" on Google. You will undoubtedly get huge loads of results. In any case, how might you guarantee which is the best one for you? All things considered, just follow the given rundown to track down the able accomplice for your necessities!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Investigate organizations' position and notoriety on the lookout.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Waitlist React counseling firms dependent on their tributes, customers' audits, portfolio and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get a more profound understanding into their engineers' ranges of abilities and aptitude, relational abilities and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look at whether their security and protection consistence meet your nation's conventions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Examine inside and out their advancement system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get an unmistakable image of their correspondence and improvement following offices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Post with regards to their NDA and other proprietorship agreements to guarantee possession maintenance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>reactmigration</category>
    </item>
    <item>
      <title>How to use ::before and ::after in Tailwind CSS</title>
      <author>Jatin Sharma</author>
      <pubDate>Fri, 22 Oct 2021 04:29:33 +0000</pubDate>
      <link>https://dev.to/j471n/how-to-use-before-and-after-in-tailwind-css-1he</link>
      <guid>https://dev.to/j471n/how-to-use-before-and-after-in-tailwind-css-1he</guid>
      <description>&lt;p&gt;In this article we are going to learn that how you can use &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; selectors in Tailwind CSS. If you don't know what &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; is then you learn it because it is just awesome. And trust me If you got used to it then you could not leave.&lt;/p&gt;

&lt;p&gt;Now let's continue with this article. This feature is only available in &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;Just-in-Time (JIT)&lt;/a&gt; mode. Tailwind has first-party support for styling pseudo-elements like &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"before:absolute before:bg-blue-500 after:flex after:bg-blue-300"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has &lt;code&gt;content: ""&lt;/code&gt; by default so you don't need to worry about that. Any time you use a &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt; variant to make sure the elements are rendered, but you can override it using the content utilities which have full arbitrary value support:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"before:content-['hello'] before:block ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can even grab the content from an attribute using the CSS &lt;code&gt;attr()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;before=&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"before:content-[attr(before)] before:block ..."&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be super helpful when your content has spaces in it since spaces can't be used in CSS class names. You can use mostly any property with &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Tailwind is the super awesome framework of CSS. According to me, it's the best so far. Everyone should learn it and it is very easy to learn and use. For more such articles consider a Follow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/some-javascript-methods-you-should-know-i15"&gt;Some Javascript Methods you should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-git-commands-everybody-should-know-3322"&gt;10 Git Commands everybody should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/convert-nextjs-app-to-pwa-3fd"&gt;Convert Next.js app to PWA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Social Accounts</title>
      <author>Prakhar Doneria</author>
      <pubDate>Fri, 22 Oct 2021 04:22:22 +0000</pubDate>
      <link>https://dev.to/prakhardoneria/social-accounts-216l</link>
      <guid>https://dev.to/prakhardoneria/social-accounts-216l</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/PrakharDoneria/embed/vYJyJRz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
  </channel>
</rss>
