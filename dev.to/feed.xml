<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 03:56:56 +0000</pubDate>
      <link>https://dev.to/codingmania/10-vs-code-extensions-every-frontend-developer-should-use-5073</link>
      <guid>https://dev.to/codingmania/10-vs-code-extensions-every-frontend-developer-should-use-5073</guid>
      <description>&lt;p&gt;Hello everyone, my name is John and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in!¬†&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Understanding Constructor Functions in JavaScript </title>
      <author>Stacy Daniel </author>
      <pubDate>Mon, 18 Oct 2021 03:00:32 +0000</pubDate>
      <link>https://dev.to/stacytech/understanding-constructor-functions-in-javascript-3eal</link>
      <guid>https://dev.to/stacytech/understanding-constructor-functions-in-javascript-3eal</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-constructor-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a constructor ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;In Javascript, a &lt;strong&gt;constructor&lt;/strong&gt; is a special function which creates an instance of a class which is typically called an "object". They are technically regular functions, but What makes them special is that they are always invoked with a powerful operator in JavaScript called the &lt;strong&gt;new&lt;/strong&gt; operator. Constructors provide the means to create as many objects as needed, whilst attaching properties and behaviors to them as required. As convention, the constructor function name usually starts with a capital letter, to be easily recognizable in code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-when-a-constructor-gets-called-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What happens when a constructor gets called ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#when-a-constructor-is-invoked"&gt;
  &lt;/a&gt;
  When a Constructor is invoked:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A new empty object is created. &lt;/li&gt;
&lt;li&gt;The Javascript keyword  &lt;strong&gt;this&lt;/strong&gt;  starts to refer to the newly created object.&lt;/li&gt;
&lt;li&gt;The value of the newly created object &lt;strong&gt;this&lt;/strong&gt; is then returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;here is an example of a Bird constructor, which will allow us to create new objects:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     function Bird() {
       this.name = "Tweety";
       this.color = "blue";
     }      

  let blueBird = new Bird();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;this&lt;/strong&gt; &lt;code&gt;inside the constructor always refers to the object being created.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When calling a constructor, the &lt;strong&gt;new&lt;/strong&gt; operator is used to   tell Javascript to create a new instance of the Bird constructor that is called blueBird. &lt;code&gt;Note that the constructor function is not changed, the newly created new context is changed!&lt;/code&gt; Without the new operator, &lt;strong&gt;this&lt;/strong&gt; inside the constructor would not point to the newly created object, giving unexpected results. when a constructor is invoked without the new operator it is invoked as a regular JavaScript function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Summary&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Note the main purpose of constructors are to implement reusable object creation code. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Constructor functions are regular functions but with a common agreement to defined them with the first letter capitalized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constructors use the keyword &lt;strong&gt;this&lt;/strong&gt; to set properties of the object they will create. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constructor functions can be used to create multiple similar objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading this article, I hope you found it useful. Happy Coding üòÄ        &lt;/p&gt;

</description>
    </item>
    <item>
      <title>18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 02:53:23 +0000</pubDate>
      <link>https://dev.to/codingmania/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-5ap0</link>
      <guid>https://dev.to/codingmania/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-5ap0</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Display Hyperlinks Without An Underline In HTML</title>
      <author>Coder</author>
      <pubDate>Mon, 18 Oct 2021 02:51:38 +0000</pubDate>
      <link>https://dev.to/codehacker/how-to-display-hyperlinks-without-an-underline-in-html-lib</link>
      <guid>https://dev.to/codehacker/how-to-display-hyperlinks-without-an-underline-in-html-lib</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;&lt;span&gt;Looking for a way to remove the underline in hyperlinks in HTML then you are at the right place because today I will show you how to display hyperlinks without an underline in HTML.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It is just going to be one line of code which we are going to use it is going to be easy and simple so follow up with me.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-0"&gt;&lt;/span&gt;&lt;h2&gt;&lt;span&gt;Display Hyperlinks Without An Underline In HTML&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;As I have said it is very easy to remove the underline from the hyperlink which is automatically generated when you use the tag below is the example of how it looks.&lt;/p&gt;
&lt;p&gt;To remove that underline from the hyperlink we need to use CSS which is a styling language which makes HTML beautiful so put it in action.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-1"&gt;&lt;/span&gt;&lt;h3&gt;&lt;span&gt;Removing underline from hyperlink with internal CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;To remove the underline from the hyperlink you can use the below code instead of using the regular hyperlink tag.&lt;/p&gt;
&lt;pre class="highlight-height  language-javascript"&gt;&lt;code&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;a style&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;"text-decoration:none"&lt;/span&gt; href&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;"&lt;a href="https://coderzway.com"&gt;https://coderzway.com&lt;/a&gt;"&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;Coderzway&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;a&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;As you can see it is bit different from the regular tag because we have used CSS in the anchor tag this CSS¬†&lt;span&gt;style=‚Äùtext-decoration:none‚Äù.¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is inline css which we have used inside the html tag the better way for this is to use the external css in a seperate file.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-2"&gt;&lt;/span&gt;&lt;h3&gt;&lt;span&gt;Removing Underline from hyperlink with external CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We can create a seperate class for removing the underline and use it across the html instead of adding the long inline css and another option is use the global tag in CSS which will remove all the underline from the hyperlinks.&lt;/p&gt;
&lt;p&gt;I will show you both methods you can use any one of the method you find easy and simple so let‚Äôs how to do it.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-3"&gt;&lt;/span&gt;&lt;h4&gt;Using CSS class to remove underline from hyperlink&lt;/h4&gt;
&lt;pre class="highlight-height  language-css"&gt;&lt;code&gt;&lt;span class="token selector"&gt;.no-underline&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;br&gt;
    &lt;span class="token property"&gt;text-decoration&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;none&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;br&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;You can use the above class in the anchor tag and it will remove the underline from the hyperlink. You can create this class in the a seperate css file and remember to link this css file inside the head tag in your html file by using the below tag&lt;/p&gt;
&lt;pre class="highlight-height  language-html"&gt;&lt;code&gt;&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"&lt;/span&gt;stylesheet&lt;span&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"&lt;/span&gt;styles.css&lt;span&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;span id="elementor-toc__heading-anchor-4"&gt;&lt;/span&gt;&lt;h4&gt;Using global CSS to remove underline from all hyperlinks&lt;/h4&gt;
&lt;pre class="highlight-height  language-css"&gt;&lt;code&gt;&lt;span class="token selector"&gt;*&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;br&gt;
    &lt;span class="token property"&gt;text-decoration&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;none&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;br&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;If you don‚Äôt know about this global CSS property then everything we put inside it will apply to all the elements of the HTML so we set text decoration to none so it will remove the underlines from the hyperlinks you don‚Äôt have to manually add the class or css to each anchor tag.&lt;/p&gt;
&lt;p&gt;Another way of doing this is instead of adding css to the global tag we can just set the css to all the anchor tags like this&lt;/p&gt;
&lt;pre class="highlight-height  language-css"&gt;&lt;code&gt;&lt;span class="token selector"&gt;a&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;br&gt;
    &lt;span class="token property"&gt;text-decoration&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;none&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;br&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;Now this will only remove underline from the hyperlink or anchor tag it will not intefere with the CSS of other HTML elements this is a better approach you can use.&lt;/p&gt;
&lt;p&gt;If you are looking for more HTML solutions or guides then you can always find solutions on the¬†&lt;a href="https://www.w3schools.com/html/default.asp" rel="noopener"&gt;&lt;span&gt;w3schools website&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;span&gt;&lt;span id="elementor-toc__heading-anchor-5"&gt;&lt;/span&gt;&lt;/span&gt;&lt;h2&gt;&lt;span&gt;Summary&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;These were all the methods which you can use to remove an underline in a hyperlink you can use anyone which you find suitable and easy for you. I hope you find this guide helpful and you found what you were looking for .&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Want more solutions and guides like this then join our coding community on Instagram to get¬† updates and more ‚Äì¬†&lt;/span&gt;&lt;b&gt;&lt;a href="http://instagram.com/codelivly"&gt;&lt;span&gt;Join¬†&lt;/span&gt;Us at Instagram&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>10 Magical PHP Pro Tips &amp; Tricks</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 02:25:32 +0000</pubDate>
      <link>https://dev.to/codingmania/10-magical-php-pro-tips-tricks-1fp1</link>
      <guid>https://dev.to/codingmania/10-magical-php-pro-tips-tricks-1fp1</guid>
      <description>&lt;p&gt;PHP programming has climbed rapidly since its humble beginnings in 1995. Since then, PHP has become the most popular programming language for Web applications. Many popular websites are powered by PHP, and an overwhelming majority of scripts and Web projects are built with the popular language.&lt;/p&gt;
&lt;p&gt;Because of PHP‚Äôs huge popularity, it has become almost impossible for Web developers not to have at least a working knowledge of PHP. This tutorial is aimed at people who are just past the beginning stages of learning PHP and are ready to roll up their sleeves and get their hands dirty with the language. Listed below are 10 excellent techniques that PHP developers should learn and use every time they program. These tips will speed up proficiency and make the code much more responsive, cleaner and more optimized for performance.¬†&lt;/p&gt;

&lt;p&gt;Read More : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-magical-php-tips-tricks/&amp;amp;ved=2ahUKEwjLi93W4cbzAhU-4jgGHS7XCvcQFnoECAYQAQ&amp;amp;usg=AOvVaw1fVqnaHNRSL8dTmlcxHzSr"&gt;10 Magical PHP Tips &amp;amp; Tricks¬†&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



</description>
    </item>
    <item>
      <title>Solana NFTs: Everything you need  </title>
      <author>Hector Bardales</author>
      <pubDate>Mon, 18 Oct 2021 01:06:40 +0000</pubDate>
      <link>https://dev.to/hnbl/solana-nfts-everything-you-need-2llp</link>
      <guid>https://dev.to/hnbl/solana-nfts-everything-you-need-2llp</guid>
      <description>&lt;p&gt;I am still working on this, but decided to publish it hoping that it can help others.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-this-guide"&gt;
  &lt;/a&gt;
  What is this guide?
&lt;/h1&gt;

&lt;p&gt;The purpose of this guide to teach anyone, even if you have no knowledge of coding, to create and generate a collection of NFTs and upload them for people to mint them on your own website. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important"&gt;
  &lt;/a&gt;
  Important
&lt;/h3&gt;

&lt;p&gt;I did this on MacOs, but you can use this guide and follow similar steps if you're on Linux or Windows. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-navigate"&gt;
  &lt;/a&gt;
  How to navigate
&lt;/h3&gt;

&lt;p&gt;I will have five main sections here to make navigation easier: &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quick-navigation"&gt;
  &lt;/a&gt;
  Quick Navigation
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#create-a-collection"&gt;Create a Collection&lt;/a&gt; The first one will cover everything from how to make your images all the way to generating thousands of images with their json files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#upload-to-website"&gt;Upload to Website:&lt;/a&gt; The second will teach you everything about uploading that collection to the blockchain and be able to mint your NFT.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#website-appearance"&gt;Website Appearance:&lt;/a&gt; Edit the appearance of your website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#host-website"&gt;Host Website&lt;/a&gt;The third will teach you how to host this website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Resources"&gt;Resources&lt;/a&gt;Information about costs, importing wallet to phantom and other resources.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#create-a-collection"&gt;
  &lt;/a&gt;
  Create a Collection
&lt;/h1&gt;

&lt;p&gt;(Back to &lt;a href="#quick-navigation"&gt;Quick Navigation&lt;/a&gt;)&lt;br&gt;
Here you will learn how to make images, json files and generate thousands of them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#artwork"&gt;
  &lt;/a&gt;
  Artwork
&lt;/h3&gt;

&lt;p&gt;To generate hundreds or thousands of NFTs you will want use layers. You can make these images using any software you like. This includes: Photoshop, Procreate, MSPaint and many more.&lt;br&gt;
A popular type of NFT is the pfp (profile picture) such as the one below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAXDusE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jwydfpk4r4zvqgqbzx4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAXDusE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jwydfpk4r4zvqgqbzx4.jpg" alt="PFP Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this you will need to use layers. For a pfp type NFT, you can begin by creating the body of your character and then other things such as clothing and accessories. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#free-pngs-to-use-for-testing"&gt;
  &lt;/a&gt;
  Free Pngs to use for testing
&lt;/h4&gt;

&lt;p&gt;I created a file with examples and you can download them from &lt;a href="https://www.deviantart.com/hectornery"&gt;here&lt;/a&gt; to test out NFT generation.&lt;br&gt;
Now that you have your layers ready let's generate a few NFTs.&lt;/p&gt;

&lt;p&gt;If you are using this guide, after the name of each layer add #"a number from 1-100". The higher numbers make the trait more common the lower numbers less common.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generate-nfts"&gt;
  &lt;/a&gt;
  Generate NFTs
&lt;/h3&gt;

&lt;p&gt;Here you'll learn how to generate images and their json files.&lt;br&gt;
Install:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt;(I suggest the "current" version)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will now use the &lt;a href="https://github.com/HashLips/hashlips_art_engine"&gt;Haslips Art Egine&lt;/a&gt;. Open Visual Studio Code. Click Terminal-&amp;gt;New Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/HashLips/hashlips_art_engine.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Visual Studio click open folder and open the hashlips art engine folder. Click Terminal-&amp;gt;New Terminal. Click the config.js folder&lt;/p&gt;

&lt;p&gt;Here we will change several things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Description - The description of your collection.&lt;/li&gt;
&lt;li&gt;I suggest changing this line:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;growEditionSizeTo - The number of NFTs you want. (For testing I suggest starting with 10-100 max)&lt;/li&gt;
&lt;li&gt;layerOrders - Here you will choose the properties of you NFT. The name of each property should match the folder created for each one. Like this: 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9gVf9W---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j0om3evfgz98qbhgvie.png" alt="Layers' Names"&gt;
You can always add more layers with this line
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name of you layer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-metadata"&gt;
  &lt;/a&gt;
  Adding Metadata
&lt;/h4&gt;

&lt;p&gt;Look for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extraMetadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You will add it here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can copy/paste this metadata and edit it or go &lt;a href="https://medium.com/metaplex/metaplex-metadata-standard-45af3d04b541"&gt;here&lt;/a&gt; for more info:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of your Collection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;symbol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The description of your collection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;seller_fee_basis_points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;external_url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You can put the link to your website here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;attributes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trait_type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;attribute#1 ex: Background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Simple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trait_type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;attribute#2 ex: Clothes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trait_type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;attribute#3 ex: Hair&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Long Hair&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Collection Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;family&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Family Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;properties&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uri&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;creators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Solana address where you'll receive SOL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look for the main.js file and click on it. Now look for this part: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vM1UKFd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akmsbnum4f5o7tn4gmi0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vM1UKFd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akmsbnum4f5o7tn4gmi0.png" alt="Image main.js"&gt;&lt;/a&gt;&lt;br&gt;
I suggest leaving the image line like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a new terminal. Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now generate the images and json files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look for the folder called hashlips_art_engine, then build. Here you will see these two folders with your images and json files: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAhdjQ4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7aqyr72sksh2whdg3zv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAhdjQ4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7aqyr72sksh2whdg3zv.png" alt="Images and Json files"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#upload-to-website"&gt;
  &lt;/a&gt;
  Upload to Website
&lt;/h1&gt;

&lt;p&gt;(Back to &lt;a href="#quick-navigation"&gt;Quick Navigation&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies
&lt;/h3&gt;

&lt;p&gt;Once you have your collection of images and json files you can now upload them to your own website and mint them for free on the devnet (to test out everything) or the mainnet-beta (to allow others to mint them).&lt;/p&gt;

&lt;p&gt;We will begin by installing the following:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio&lt;/a&gt; (This will facilitate viewing some files.)&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; (I suggest dowloading the "Current" version)&lt;/p&gt;

&lt;p&gt;To check you did it: open Visual Studio Code and click on Terminal followed by New Terminal. Type in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#solana-cli"&gt;
  &lt;/a&gt;
  Solana Cli
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;Solana Cli&lt;/a&gt; (If you're not on MacOs click on the link and follow the steps there)&lt;br&gt;
For Mac users type the following into you terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$(curl -sSfL https://release.solana.com/v1.8.0/install)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To confirm you did it right type the following into you terminal and click enter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#metaplex"&gt;
  &lt;/a&gt;
  Metaplex
&lt;/h4&gt;

&lt;p&gt;Open Visual Studio Code and click Terminal-&amp;gt;New Terminal.&lt;br&gt;
Here is the link to their github page: &lt;a href="https://github.com/metaplex-foundation/metaplex"&gt;Metaplex&lt;/a&gt;&lt;br&gt;
In your terminal type the following a click enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/metaplex-foundation/metaplex.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are in Visual Studio Code, click on File-&amp;gt;Open Folder and choose the Metaplex folder. &lt;br&gt;
Click on Terminal-&amp;gt;New Terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to change directory so in the terminal type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the cli folder we will do two things. Click enter after each line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are done with this part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solana-file-system-wallet"&gt;
  &lt;/a&gt;
  Solana File System Wallet
&lt;/h3&gt;

&lt;p&gt;Open a new terminal. Now we will change to the Solana devnet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//api.devnet.solana.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then make a file system wallet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;solana&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;keygen&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/config/&lt;/span&gt;&lt;span class="nx"&gt;solana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;devnet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy and save the pubkey and seedphrase somewhere safe. &lt;br&gt;
Now set a keypair&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;keypair&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/config/&lt;/span&gt;&lt;span class="nx"&gt;solana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;devnet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your balance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be 0Sol. Let's add some:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="nx"&gt;airdrop&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#uploading-to-devnet"&gt;
  &lt;/a&gt;
  Uploading to Devnet
&lt;/h4&gt;

&lt;p&gt;We are now ready to upload our collection to the devnet. If this is your first time I suggest starting with just two NFTs to test everything. &lt;br&gt;
If you followed the guide you should have some images and json files ready. Create a folder called "assets". Insert two images and their respective json files. The image and json file names should start with 0 and count upwards. For example: 0.png, 0.json, 1.png, 1.json and so on. Move this folder into the Metaplex folder. Like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4zz4ZY1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvbdfihaogv7tyxr4b1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4zz4ZY1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvbdfihaogv7tyxr4b1u.png" alt="File Names"&gt;&lt;/a&gt;&lt;br&gt;
Now lets upload everything. Open a New Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/metaplex/&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;candy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/metaplex/&lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="nx"&gt;devnet&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;keypair&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/config/&lt;/span&gt;&lt;span class="nx"&gt;solana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;devnet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy and save the numbers and letters after "started at:" and "initialized config for a candy machine with publickey: "&lt;br&gt;
You should now have a file name .cache. Copy the contents, create a new file in visual studio code and paste. Right click and choose formate document.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#website-creation"&gt;
  &lt;/a&gt;
  Website Creation
&lt;/h3&gt;

&lt;p&gt;For this part we will use the &lt;a href="https://github.com/exiled-apes/candy-machine-mint"&gt;Exiled Apes Candy Machine&lt;/a&gt;&lt;br&gt;
Open a new terminal type in the following and click enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/exiled-apes/candy-machine-mint.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a folder called "candy-machine-mint"&lt;br&gt;
Install yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;candy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mint&lt;/span&gt;
&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the candy-machine-mint folder with Visual Studio Code. Rename the .env.example folder to .env Inside the .env file you should see this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;REACT_APP_CANDY_MACHINE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;__PLACEHOLDER__&lt;/span&gt;
&lt;span class="nx"&gt;REACT_APP_CANDY_MACHINE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;__PLACEHOLDER__&lt;/span&gt;
&lt;span class="nx"&gt;REACT_APP_TREASURY_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;__PLACEHOLDER__&lt;/span&gt;
&lt;span class="nx"&gt;REACT_APP_CANDY_START_DATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;__PLACEHOLDER__&lt;/span&gt;

&lt;span class="nx"&gt;REACT_APP_SOLANA_NETWORK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;devnet&lt;/span&gt;
&lt;span class="nx"&gt;REACT_APP_SOLANA_RPC_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//explorer-api.devnet.solana.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will replace the four "&lt;strong&gt;PLACEHOLDER&lt;/strong&gt;" with the following in this order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will now click Terminal-&amp;gt;New Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A website should open here: localhost:3000/&lt;br&gt;
Connect to Phantom, change to devenet in your wallet, and mint your NFT. (If you don't have Sol you can airdrop for free &lt;a href="https://solfaucet.com"&gt;here&lt;/a&gt;. Just copy/paste your phantom wallet address)&lt;br&gt;
If you succeeded it should show up in your collectibles.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#website-appearance"&gt;
  &lt;/a&gt;
  Website Appearance
&lt;/h1&gt;

&lt;p&gt;(Back to &lt;a href="#quick-navigation"&gt;Quick Navigation&lt;/a&gt;)&lt;br&gt;
//I will be adding this later&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#host-website"&gt;
  &lt;/a&gt;
  Host Website
&lt;/h1&gt;

&lt;p&gt;(Back to &lt;a href="#quick-navigation"&gt;Quick Navigation&lt;/a&gt;)&lt;br&gt;
We are now ready to host the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#costs-and-other-resources"&gt;
  &lt;/a&gt;
  Costs and other resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#costs"&gt;
  &lt;/a&gt;
  Costs
&lt;/h3&gt;

&lt;p&gt;(Back to &lt;a href="#quick-navigation"&gt;Quick Navigation&lt;/a&gt;)&lt;br&gt;
To put your NFTs on arweave, which is what we are using, you can calculate the costs in this &lt;a href="https://www.feecalc.live"&gt;calculator&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-wallets"&gt;
  &lt;/a&gt;
  Importing Wallets
&lt;/h3&gt;

&lt;p&gt;If you want to use your File System Wallet with phantom you can check out this &lt;a href="https://stackoverflow.com/questions/69245982/import-phantom-wallet-private-key-into-solana-cli"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;p&gt;Here are some useful videos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to generate 10,000NFTs: &lt;a href="https://www.youtube.com/watch?v=zLU9a4Gr-Dg&amp;amp;t=131s"&gt;By: Freedom Fishies&lt;/a&gt; (This is a very complete guide)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=4LLx7SMAOag&amp;amp;t=611s"&gt;Mint Website Creation&lt;/a&gt; (This is a good guide, but it doesn't mention a few things. I suggest watching it as a video guide to accompany this written one or any other)&lt;/li&gt;
&lt;li&gt;Spanish guide by Ahmed Castro: &lt;a href="https://dev.to/turupawn/solana-crea-una-coleccion-de-nfts-1kk0"&gt;Colecci√≥n de NFTs&lt;/a&gt; Una gu√≠a muy completa y concisa.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/v8mXxmkC"&gt;Metaplex Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/solana"&gt;Solana Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackmd.io/@levicook/HJcDneEWF"&gt;Levi Cook Metaplex Guide&lt;/a&gt;(Some things in this guide will be different for you. If you use it, I suggest reading the comments)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/metaplex/metaplex-metadata-standard-45af3d04b541"&gt;Metadata Standard&lt;/a&gt; This is all the metadata needed for a Solana NFT&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@archaeopteryx/By4bpbA4F"&gt;Solana and Metaplex FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>solana</category>
    </item>
    <item>
      <title>Periodic Table</title>
      <author>Scott Gordon</author>
      <pubDate>Mon, 18 Oct 2021 01:04:56 +0000</pubDate>
      <link>https://dev.to/sagordondev/periodic-table-4776</link>
      <guid>https://dev.to/sagordondev/periodic-table-4776</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVmSDUTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b74f60m5ods46l6kyau5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVmSDUTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b74f60m5ods46l6kyau5.png" alt="Console Output"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# periodic_table.py
#   This program display a periodic chart and allows you to pick an element
#   for a full description of the element chosen.
# by: Scott Gordon
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;

&lt;span class="c1"&gt;# Read data from periodictable.csv
&lt;/span&gt;&lt;span class="n"&gt;elements_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"periodictable.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elements_csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements_csv_reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elements_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;COLUMNS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"Atomic Number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Symbol"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Element"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Origin of name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Group"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Period"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Atomic weight"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Density"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Melting point"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Boiling point"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Specific heat capacity"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Electronegativity"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Abundance in earth's crust"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Find longest string in each column in order to justify text
&lt;/span&gt;&lt;span class="n"&gt;LONGEST_COLUMN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LONGEST_COLUMN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LONGEST_COLUMN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add elements into dictionary
&lt;/span&gt;&lt;span class="n"&gt;ELEMENTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"Atomic Number"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Symbol"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Element"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Origin of name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Group"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Period"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Atomic weight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" u"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Density"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" g/cm^3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Melting point"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" K"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Boiling point"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" K"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Specific heat capacity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" J/(g*K)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Electronegativity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"Abundance in earth's crust"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" mg/kg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Remove bracketed text from csv that was imported from Wikipedia
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# Remove [roman numeral] text
&lt;/span&gt;        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"\[(I|V|X)+\]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;  &lt;span class="c1"&gt;# Map atomic number to element
&lt;/span&gt;    &lt;span class="n"&gt;ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;  &lt;span class="c1"&gt;# Map symbol to element
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Periodic Table of Elements"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;""" Periodic Table of Elements
      1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18
    1 H                                                  He
    2 Li Be                               B  C  N  O  F  Ne
    3 Na Mg                               Al Si P  S  Cl Ar
    4 K  Ca Sc Ti V  Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr
    5 Rb Sr Y  Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I  Xe
    6 Cs Ba La Hf Ta W  Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn
    7 Fr Ra Ac Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og

            Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu
            Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr"""&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"Quit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Display element's data
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;key_justified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONGEST_COLUMN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key_justified&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Press Enter to continue..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a copy of the .csv file used in this program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1,H,Hydrogen,"Greek elements hydro- and -gen, meaning 'water-forming'",1,1,1.008[III][IV][V][VI],0.00008988,14.01,20.28,14.304,2.2,1400
2,He,Helium,"Greek h·∏ólios, 'sun'",18,1,4.002602(2)[III][V],0.0001785,‚Äî[VII],4.22,5.193,‚Äì,0.008
3,Li,Lithium,"Greek l√≠thos, 'stone'",1,2,6.94[III][IV][V][VIII][VI],0.534,453.69,1560,3.582,0.98,20
4,Be,Beryllium,"beryl, a mineral (ultimately from the name of Belur in southern India)",2,2,9.0121831(5),1.85,1560,2742,1.825,1.57,2.8
5,B,Boron,"borax, a mineral (from Arabic bawraq)",13,2,10.81[III][IV][V][VI],2.34,2349,4200,1.026,2.04,10
6,C,Carbon,"Latin carbo, 'coal'",14,2,12.011[III][V][VI],2.267,3800,4300,0.709,2.55,200
7,N,Nitrogen,"Greek n√≠tron and -gen, meaning 'niter-forming'",15,2,14.007[III][V][VI],0.0012506,63.15,77.36,1.04,3.04,19
8,O,Oxygen,"Greek oxy- and -gen, meaning 'acid-forming'",16,2,15.999[III][V][VI],0.001429,54.36,90.2,0.918,3.44,461000
9,F,Fluorine,"Latin fluere, 'to flow'",17,2,18.998403163(6),0.001696,53.53,85.03,0.824,3.98,585
10,Ne,Neon,"Greek n√©on, 'new'",18,2,20.1797(6)[III][IV],0.0008999,24.56,27.07,1.03,‚Äì,0.005
11,Na,Sodium,"English soda (the symbol Na is derived from New Latin natrium, coined from German Natron, 'natron')",1,3,22.98976928(2),0.971,370.87,1156,1.228,0.93,23600
12,Mg,Magnesium,"Magnesia, a district of Eastern Thessaly in Greece",2,3,24.305[VI],1.738,923,1363,1.023,1.31,23300
13,Al,Aluminium,"alumina, from Latin alumen (gen. aluminis), 'bitter salt, alum'",13,3,26.9815384(3),2.698,933.47,2792,0.897,1.61,82300
14,Si,Silicon,"Latin silex, 'flint' (originally silicium)",14,3,28.085[V][VI],2.3296,1687,3538,0.705,1.9,282000
15,P,Phosphorus,"Greek ph≈çsph√≥ros, 'light-bearing'",15,3,30.973761998(5),1.82,317.3,550,0.769,2.19,1050
16,S,Sulfur,"Latin sulphur, 'brimstone'",16,3,32.06[III][V][VI],2.067,388.36,717.87,0.71,2.58,350
17,Cl,Chlorine,"Greek chl≈çr√≥s, 'greenish yellow'",17,3,35.45[III][IV][V][VI],0.003214,171.6,239.11,0.479,3.16,145
18,Ar,Argon,"Greek arg√≥s, 'idle' (because of its inertness)",18,3,39.948[III][V][VI],0.0017837,83.8,87.3,0.52,‚Äì,3.5
19,K,Potassium,"New Latin potassa, 'potash' (the symbol K is derived from Latin kalium)",1,4,39.0983(1),0.862,336.53,1032,0.757,0.82,20900
20,Ca,Calcium,"Latin calx, 'lime'",2,4,40.078(4)[III],1.54,1115,1757,0.647,1,41500
21,Sc,Scandium,"Latin Scandia, 'Scandinavia'",3,4,44.955908(5),2.989,1814,3109,0.568,1.36,22
22,Ti,Titanium,"Titans, the sons of the Earth goddess of Greek mythology",4,4,47.867(1),4.54,1941,3560,0.523,1.54,5650
23,V,Vanadium,"Vanadis, an Old Norse name for the Scandinavian goddess Freyja",5,4,50.9415(1),6.11,2183,3680,0.489,1.63,120
24,Cr,Chromium,"Greek chr√≥ma, 'colour'",6,4,51.9961(6),7.15,2180,2944,0.449,1.66,102
25,Mn,Manganese,corrupted from magnesia negra; see Magnesium,7,4,54.938043(2),7.44,1519,2334,0.479,1.55,950
26,Fe,Iron,English word (the symbol Fe is derived from Latin ferrum),8,4,55.845(2),7.874,1811,3134,0.449,1.83,56300
27,Co,Cobalt,"German Kobold, 'goblin'",9,4,58.933194(3),8.86,1768,3200,0.421,1.88,25
28,Ni,Nickel,"Nickel, a mischievous sprite of German miner mythology",10,4,58.6934(4),8.912,1728,3186,0.444,1.91,84
29,Cu,Copper,"English word, from Latin cuprum, from Ancient Greek K√Ωpros 'Cyprus'",11,4,63.546(3)[V],8.96,1357.77,2835,0.385,1.9,60
30,Zn,Zinc,"Most likely from German Zinke, 'prong' or 'tooth', though some suggest Persian sang, 'stone'",12,4,65.38(2),7.134,692.88,1180,0.388,1.65,70
31,Ga,Gallium,"Latin Gallia, 'France'",13,4,69.723(1),5.907,302.9146,2673,0.371,1.81,19
32,Ge,Germanium,"Latin Germania, 'Germany'",14,4,72.630(8),5.323,1211.4,3106,0.32,2.01,1.5
33,As,Arsenic,"French arsenic, from Greek arsenik√≥n 'yellow arsenic' (influenced by arsenik√≥s, 'masculine' or 'virile'), from a West Asian wanderword ultimately from Old Iranian *zarniya-ka, 'golden'",15,4,74.921595(6),5.776,1090 [IX],887,0.329,2.18,1.8
34,Se,Selenium,"Greek sel·∏ónƒì, 'moon'",16,4,78.971(8)[V],4.809,453,958,0.321,2.55,0.05
35,Br,Bromine,"Greek br√¥mos, 'stench'",17,4,79.904[VI],3.122,265.8,332,0.474,2.96,2.4
36,Kr,Krypton,"Greek krypt√≥s, 'hidden'",18,4,83.798(2)[III][IV],0.003733,115.79,119.93,0.248,3,1√ó10‚àí4
37,Rb,Rubidium,"Latin rubidus, 'deep red'",1,5,85.4678(3)[III],1.532,312.46,961,0.363,0.82,90
38,Sr,Strontium,"Strontian, a village in Scotland",2,5,87.62(1)[III][V],2.64,1050,1655,0.301,0.95,370
39,Y,Yttrium,"Ytterby, a village in Sweden",3,5,88.90584(1),4.469,1799,3609,0.298,1.22,33
40,Zr,Zirconium,"zircon, a mineral",4,5,91.224(2)[III],6.506,2128,4682,0.278,1.33,165
41,Nb,Niobium,"Niobe, daughter of king Tantalus from Greek mythology",5,5,92.90637(1),8.57,2750,5017,0.265,1.6,20
42,Mo,Molybdenum,"Greek mol√Ωbdaina, 'piece of lead', from m√≥lybdos, 'lead'",6,5,95.95(1)[III],10.22,2896,4912,0.251,2.16,1.2
43,Tc,Technetium,"Greek tekhnƒìt√≥s, 'artificial'",7,5,[98][X],11.5,2430,4538,‚Äì,1.9,~ 3√ó10‚àí9[XI]
44,Ru,Ruthenium,"New Latin Ruthenia, 'Russia'",8,5,101.07(2)[III],12.37,2607,4423,0.238,2.2,0.001
45,Rh,Rhodium,"Greek rhod√≥eis, 'rose-coloured', from rh√≥don, 'rose'",9,5,102.90549(2),12.41,2237,3968,0.243,2.28,0.001
46,Pd,Palladium,"the asteroid Pallas, considered a planet at the time",10,5,106.42(1)[III],12.02,1828.05,3236,0.244,2.2,0.015
47,Ag,Silver,English word (The symbol derives from Latin argentum),11,5,107.8682(2)[III],10.501,1234.93,2435,0.235,1.93,0.075
48,Cd,Cadmium,"New Latin cadmia, from King Kadmos",12,5,112.414(4)[III],8.69,594.22,1040,0.232,1.69,0.159
49,In,Indium,"Latin indicum, 'indigo' (colour found in its spectrum)",13,5,114.818(1),7.31,429.75,2345,0.233,1.78,0.25
50,Sn,Tin,English word (The symbol derives from Latin stannum),14,5,118.710(7)[III],7.287,505.08,2875,0.228,1.96,2.3
51,Sb,Antimony,"Latin antimonium, the origin of which is uncertain: folk etymologies suggest it is derived from Greek ant√≠ ('against') + m√≥nos ('alone'), or Old French anti-moine, 'Monk's bane', but it could plausibly be from or related to Arabic  æi·πØmid, 'antimony', reformatted as a Latin word. (The symbol derives from Latin stibium 'stibnite'.)",15,5,121.760(1)[III],6.685,903.78,1860,0.207,2.05,0.2
52,Te,Tellurium,"Latin tellus, 'the ground, earth'",16,5,127.60(3)[III],6.232,722.66,1261,0.202,2.1,0.001
53,I,Iodine,"French iode, from Greek ioeid·∏ós, 'violet')",17,5,126.90447(3),4.93,386.85,457.4,0.214,2.66,0.45
54,Xe,Xenon,"Greek x√©non, neuter form of x√©nos 'strange'",18,5,131.293(6)[III][IV],0.005887,161.4,165.03,0.158,2.6,3√ó10‚àí5
55,Cs,Caesium,"Latin caesius, 'sky-blue'",1,6,132.90545196(6),1.873,301.59,944,0.242,0.79,3
56,Ba,Barium,"Greek bar√Ωs, 'heavy'",2,6,137.327(7),3.594,1000,2170,0.204,0.89,425
57,La,Lanthanum,"Greek lanth√°nein, 'to lie hidden'",3,6,138.90547(7)[III],6.145,1193,3737,0.195,1.1,39
58,Ce,Cerium,"the dwarf planet Ceres, considered a planet at the time",,6,140.116(1)[III],6.77,1068,3716,0.192,1.12,66.5
59,Pr,Praseodymium,"Greek pr√°sios d√≠dymos, 'green twin'",,6,140.90766(1),6.773,1208,3793,0.193,1.13,9.2
60,Nd,Neodymium,"Greek n√©os d√≠dymos, 'new twin'",,6,144.242(3)[III],7.007,1297,3347,0.19,1.14,41.5
61,Pm,Promethium,Prometheus of Greek mythology,,6,[145][X],7.26,1315,3273,‚Äì,1.13,2√ó10‚àí19[XI]
62,Sm,Samarium,"samarskite, a mineral named after Colonel Vasili Samarsky-Bykhovets, Russian mine official",,6,150.36(2)[III],7.52,1345,2067,0.197,1.17,7.05
63,Eu,Europium,Europe,,6,151.964(1)[III],5.243,1099,1802,0.182,1.2,2
64,Gd,Gadolinium,"gadolinite, a mineral named after Johan Gadolin, Finnish chemist, physicist and mineralogist",,6,157.25(3)[III],7.895,1585,3546,0.236,1.2,6.2
65,Tb,Terbium,"Ytterby, a village in Sweden",,6,158.925354(8),8.229,1629,3503,0.182,1.2,1.2
66,Dy,Dysprosium,"Greek dyspr√≥sitos, 'hard to get'",,6,162.500(1)[III],8.55,1680,2840,0.17,1.22,5.2
67,Ho,Holmium,"New Latin Holmia, 'Stockholm'",,6,164.930328(7),8.795,1734,2993,0.165,1.23,1.3
68,Er,Erbium,"Ytterby, a village in Sweden",,6,167.259(3)[III],9.066,1802,3141,0.168,1.24,3.5
69,Tm,Thulium,"Thule, the ancient name for an unclear northern location",,6,168.934218(6),9.321,1818,2223,0.16,1.25,0.52
70,Yb,Ytterbium,"Ytterby, a village in Sweden",,6,173.045(10)[III],6.965,1097,1469,0.155,1.1,3.2
71,Lu,Lutetium,"Latin Lutetia, 'Paris'",,6,174.9668(1)[III],9.84,1925,3675,0.154,1.27,0.8
72,Hf,Hafnium,"New Latin Hafnia, 'Copenhagen' (from Danish havn)",4,6,178.49(2),13.31,2506,4876,0.144,1.3,3
73,Ta,Tantalum,"King Tantalus, father of Niobe from Greek mythology",5,6,180.94788(2),16.654,3290,5731,0.14,1.5,2
74,W,Tungsten,"Swedish tung sten, 'heavy stone' (The symbol is from wolfram, the old name of the tungsten mineral wolframite)",6,6,183.84(1),19.25,3695,5828,0.132,2.36,1.3
75,Re,Rhenium,"Latin Rhenus, 'the Rhine'",7,6,186.207(1),21.02,3459,5869,0.137,1.9,7√ó10‚àí4
76,Os,Osmium,"Greek osm·∏ó, 'smell'",8,6,190.23(3)[III],22.61,3306,5285,0.13,2.2,0.002
77,Ir,Iridium,"Iris, the Greek goddess of the rainbow",9,6,192.217(2),22.56,2719,4701,0.131,2.2,0.001
78,Pt,Platinum,"Spanish platina, 'little silver', from plata 'silver'",10,6,195.084(9),21.46,2041.4,4098,0.133,2.28,0.005
79,Au,Gold,English word (The symbol derives from Latin aurum),11,6,196.966570(4),19.282,1337.33,3129,0.129,2.54,0.004
80,Hg,Mercury,"Mercury, Roman god of commerce, communication, and luck, known for his speed and mobility (The symbol is from the element's Latin name hydrargyrum, derived from Greek hydr√°rgyros, 'water-silver')",12,6,200.592(3),13.5336,234.43,629.88,0.14,2,0.085
81,Tl,Thallium,"Greek thall√≥s, 'green shoot or twig'",13,6,204.38[VI],11.85,577,1746,0.129,1.62,0.85
82,Pb,Lead,English word (The symbol derives from Latin plumbum),14,6,207.2(1)[III][V],11.342,600.61,2022,0.129,1.87,14
83,Bi,Bismuth,"German Wismut, from wei√ü Masse 'white mass', unless from Arabic",15,6,208.98040(1)[X],9.807,544.7,1837,0.122,2.02,0.009
84,Po,Polonium,"Latin Polonia, 'Poland' (the home country of Marie Curie)",16,6,[209][X],9.32,527,1235,‚Äì,2,2√ó10‚àí10[XI]
85,At,Astatine,"Greek √°statos, 'unstable'",17,6,[210][X],7,575,610,‚Äì,2.2,3√ó10‚àí20[XI]
86,Rn,Radon,radium,18,6,[222][X],0.00973,202,211.3,0.094,2.2,4√ó10‚àí13[XI]
87,Fr,Francium,France,1,7,[223][X],1.87,300,950,‚Äì,0.7,~ 1√ó10‚àí18[XI]
88,Ra,Radium,"French radium, from Latin radius, 'ray'",2,7,[226][X],5.5,973,2010,0.094,0.9,9√ó10‚àí7[XI]
89,Ac,Actinium,"Greek akt√≠s, 'ray'",3,7,[227][X],10.07,1323,3471,0.12,1.1,5.5√ó10‚àí10[XI]
90,Th,Thorium,"Thor, the Scandinavian god of thunder",,7,232.0377(4)[X][III],11.72,2115,5061,0.113,1.3,9.6
91,Pa,Protactinium,"proto- (from Greek pr√¥tos, 'first, before') + actinium, which is produced through the radioactive decay of protactinium",,7,231.03588(1)[X],15.37,1841,4300,‚Äì,1.5,1.4√ó10‚àí6[XI]
92,U,Uranium,"Uranus, the seventh planet in the Solar System",,7,238.02891(3)[X],18.95,1405.3,4404,0.116,1.38,2.7
93,Np,Neptunium,"Neptune, the eighth planet in the Solar System",,7,[237][X],20.45,917,4273,‚Äì,1.36,‚â§ 3√ó10‚àí12[XI]
94,Pu,Plutonium,"the dwarf planet Pluto, considered the ninth planet in the Solar System at the time",,7,[244][X],19.84,912.5,3501,‚Äì,1.28,‚â§ 3√ó10‚àí11[XI]
95,Am,Americium,"The Americas, as the element was first synthesised on the continent, by analogy with europium",,7,[243][X],13.69,1449,2880,‚Äì,1.13,0[XII]
96,Cm,Curium,"Pierre Curie and Marie Curie, French physicists and chemists",,7,[247][X],13.51,1613,3383,‚Äì,1.28,0[XII]
97,Bk,Berkelium,"Berkeley, California, where the element was first synthesised, by analogy with terbium",,7,[247][X],14.79,1259,2900,‚Äì,1.3,0[XII]
98,Cf,Californium,"California, where the element was first synthesised",,7,[251][X],15.1,1173,(1743)[XIII],‚Äì,1.3,0[XII]
99,Es,Einsteinium,"Albert Einstein, German physicist",,7,[252][X],8.84,1133,(1269)[XIII],‚Äì,1.3,0[XII]
100,Fm,Fermium,"Enrico Fermi, Italian physicist",,7,[257][X],(9.7)[XIII],(1125)[XIII],‚Äì,‚Äì,1.3,0[XII]
101,Md,Mendelevium,"Dmitri Mendeleev, Russian chemist and inventor who proposed the periodic table",,7,[258][X],(10.3)[XIII],(1100)[XIII],‚Äì,‚Äì,1.3,0[XII]
102,No,Nobelium,"Alfred Nobel, Swedish chemist and engineer",,7,[259][X],(9.9)[XIII],(1100)[XIII],‚Äì,‚Äì,1.3,0[XII]
103,Lr,Lawrencium,"Ernest O. Lawrence, American physicist",,7,[266][X],(15.6)[XIII],(1900)[XIII],‚Äì,‚Äì,1.3,0[XII]
104,Rf,Rutherfordium,"Ernest Rutherford, chemist and physicist from New Zealand",4,7,[267][X],(23.2)[XIII],(2400)[XIII],(5800)[XIII],‚Äì,‚Äì,0[XII]
105,Db,Dubnium,"Dubna, Russia, where the Joint Institute for Nuclear Research is located",5,7,[268][X],(29.3)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
106,Sg,Seaborgium,"Glenn T. Seaborg, American chemist",6,7,[269][X],(35.0)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
107,Bh,Bohrium,"Niels Bohr, Danish physicist",7,7,[270][X],(37.1)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
108,Hs,Hassium,"New Latin Hassia, 'Hesse' (a state in Germany)",8,7,[270][X],(40.7)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
109,Mt,Meitnerium,"Lise Meitner, Austrian physicist",9,7,[278][X],(37.4)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
110,Ds,Darmstadtium,"Darmstadt, Germany, where the element was first synthesised",10,7,[281][X],(34.8)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
111,Rg,Roentgenium,"Wilhelm Conrad R√∂ntgen, German physicist",11,7,[282][X],(28.7)[XIII],‚Äì,‚Äì,‚Äì,‚Äì,0[XII]
112,Cn,Copernicium,"Nicolaus Copernicus, Polish astronomer",12,7,[285][X],(23.7)[XIII],‚Äì,~357[XIV],‚Äì,‚Äì,0[XII]
113,Nh,Nihonium,"Japanese Nihon, 'Japan' (where the element was first synthesised)",13,7,[286][X],(16)[XIII],(700)[XIII],(1400)[XIII],‚Äì,‚Äì,0[XII]
114,Fl,Flerovium,"Flerov Laboratory of Nuclear Reactions, part of JINR, where the element was synthesised; itself named after Georgy Flyorov, Russian physicist",14,7,[289][X],(14)[XIII],‚Äì,~210,‚Äì,‚Äì,0[XII]
115,Mc,Moscovium,"Moscow Oblast, Russia, where the element was first synthesised",15,7,[290][X],(13.5)[XIII],(700)[XIII],(1400)[XIII],‚Äì,‚Äì,0[XII]
116,Lv,Livermorium,"Lawrence Livermore National Laboratory in Livermore, California, which collaborated with JINR on its synthesis",16,7,[293][X],(12.9)[XIII],(709)[XIII],(1085)[XIII],‚Äì,‚Äì,0[XII]
117,Ts,Tennessine,"Tennessee, United States",17,7,[294][X],(7.2)[XIII],(723)[XIII],(883)[XIII],‚Äì,‚Äì,0[XII]
118,Og,Oganesson,"Yuri Oganessian, Russian physicist",18,7,[294][X],(5.0)[XIII][XV],‚Äì,(350)[XIII],‚Äì,‚Äì,0[XII]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@vedranafilipovic?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Vedrana Filipoviƒá&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/periodic-elements?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title> Basic Concepts of OOP (Object-Oriented Programming) 
</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Mon, 18 Oct 2021 00:26:19 +0000</pubDate>
      <link>https://dev.to/mahmoudessam/basic-concepts-of-oop-object-oriented-programming-117</link>
      <guid>https://dev.to/mahmoudessam/basic-concepts-of-oop-object-oriented-programming-117</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-an-object-in-programming"&gt;
  &lt;/a&gt;
  What Is an Object in Programming?
&lt;/h3&gt;

&lt;p&gt;Object-oriented programming, or OOP, is an approach to problem-solving &lt;br&gt;
where all computations are carried out using objects. &lt;/p&gt;

&lt;p&gt;An object is a component of a program that knows how to perform certain actions and how &lt;br&gt;
to interact with other elements of the program. &lt;/p&gt;

&lt;p&gt;Objects are the basic units of object-oriented programming.&lt;br&gt;
A simple example of an object would be a person. &lt;/p&gt;

&lt;p&gt;Logically, you would expect a person to have a name. &lt;/p&gt;

&lt;p&gt;This would be considered the property of the person. &lt;/p&gt;

&lt;p&gt;You could also expect a person to be able to do something, such as walking or driving.&lt;/p&gt;

&lt;p&gt;This would be considered a method of the person.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-concepts"&gt;
  &lt;/a&gt;
  Basic Concepts:
&lt;/h4&gt;

&lt;p&gt;Class &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class is a model or blueprint or prototype of an object that defines or specifies all the properties &amp;amp; behavior of the objects. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;object &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An object is an entity or instance of a class. &lt;/li&gt;
&lt;li&gt;Each object has properties and behaviors. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Polymorphism &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polymorphism refers to the ability to process objects differently depending on their data type or class. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abstraction &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abstraction means hiding the implementation and showing only functionality to the user. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Encapsulation &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encapsulation is the process of binding the data by making it private and functions to process that data into a single unit. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pTB0EiLXUC8"&gt;Watch this video till the end&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding the Modern Web Stack: Prettier</title>
      <author>Alex E</author>
      <pubDate>Mon, 18 Oct 2021 00:20:35 +0000</pubDate>
      <link>https://dev.to/alexeagleson/understanding-the-modern-web-stack-prettier-214j</link>
      <guid>https://dev.to/alexeagleson/understanding-the-modern-web-stack-prettier-214j</guid>
      <description>&lt;p&gt;You can find the official repository for the &lt;em&gt;Understanding the Modern Web Stack&lt;/em&gt; tutorial series &lt;a href="https://github.com/alexeagleson/the-modern-web-stack"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This includes the final versions of the code examples from each tutorial to help make sure you haven't missed anything. You can also submit pull requests for any errors or corrections you may find (and I will update the blog posts accordingly).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#what-is-prettier"&gt;What is Prettier?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initializing-the-project"&gt;Initializing the Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-prettier"&gt;Installing Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-prettier"&gt;Running Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-eslint"&gt;Integration with ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#editor-integration-vs-code"&gt;Editor Integration (VS Code)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automation-and-hooks"&gt;Automation and Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping Up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prettier"&gt;
  &lt;/a&gt;
  What is Prettier?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; in their own words is an &lt;em&gt;opinionated&lt;/em&gt; code formatter for Javascript.  What this means is that although it is configurable to some degree, the majority of the decisions it makes about how your code should be formatted are automatic and built into the tool itself.&lt;/p&gt;

&lt;p&gt;Though this may sound like a downside, we should consider the benefits of this.  &lt;/p&gt;

&lt;p&gt;Being &lt;em&gt;consistent&lt;/em&gt; with coding style is significantly more important than the style you actually adopt.  Leveraging the existing work done by professional developers of the past allows you to focus your attention on the code itself, which is where your attention really belongs.  &lt;/p&gt;

&lt;p&gt;Code formatters differ from linters in that they are exclusively concerned with the syntax and appearance of the code on your screen, rather than the quality of the code itself.&lt;/p&gt;

&lt;p&gt;Another key difference is that linters are foremost concerned with identifying errors and communicating them, not fixing them for you (some exceptions for simple issues).  &lt;/p&gt;

&lt;p&gt;A formatter's primary function is handling those fixes and updating your code automatically so you don't have to.  &lt;/p&gt;

&lt;p&gt;Of course one of the best ways to learn how a formatter works is to use it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You will need to have &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; installed on your machine and available from your terminal. Installing Node will automatically install &lt;a href="https://en.wikipedia.org/wiki/Npm_(software)"&gt;npm&lt;/a&gt; as well, which is what you will use to install Babel.&lt;/p&gt;

&lt;p&gt;Open up your terminal of choice. If you see version numbers when running the two commands below (your numbers will likely be different than this example) then you are ready to go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v15.5.0

npm &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 7.16.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the Project
&lt;/h2&gt;

&lt;p&gt;Let's start by initializing a new &lt;code&gt;npm&lt;/code&gt; project. Run the following command to generate one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag will automatically select default values for everything, which is appropriate in our example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-prettier"&gt;
  &lt;/a&gt;
  Installing Prettier
&lt;/h2&gt;

&lt;p&gt;Run the following command in your project's root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;prettier &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next create a file called &lt;code&gt;script.js&lt;/code&gt; with the following code (including the obvious formatting issues):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this always runs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
     &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we run Prettier, we can configure it by creating a &lt;code&gt;.prettierrc.json&lt;/code&gt; file.  This is optional, and if you don't create one Prettier will simply use its own opinionated defaults.  &lt;/p&gt;

&lt;p&gt;For the sake of learning we will create the file in the root of our project with some of the &lt;a href="https://prettier.io/docs/en/options.html"&gt;options described here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.prettierrc.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;es5&lt;/code&gt; value of &lt;code&gt;trailingComma&lt;/code&gt; ensures that it will be included on code where it was valid as of ES5 (arrays and objects).  Modern Javascript supports it in more places (function arguments for example), so if you are targeting modern browsers you can use a value of &lt;code&gt;all&lt;/code&gt;.  Third option is &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The latter three config options should be self-explanatory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-prettier"&gt;
  &lt;/a&gt;
  Running Prettier
&lt;/h2&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prettier &lt;span class="nt"&gt;--write&lt;/span&gt; script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;script.js&lt;/code&gt; file will be updated automatically with Prettier's formatting options applied.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this always runs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ignoring-code"&gt;
  &lt;/a&gt;
  Ignoring Code
&lt;/h2&gt;

&lt;p&gt;You may have some files in your project that you don't want to waste resources on auto-formatting.  To handle these simply create a &lt;code&gt;.prettierignore&lt;/code&gt; file with the name (or pattern) of files you wish to ignore:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.prettierignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build
*.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above will ignore anything in the &lt;code&gt;build&lt;/code&gt; directory and all CSS files in the project.  &lt;/p&gt;

&lt;p&gt;Also you may have code within files that you intentionally have formatted in a certain way that you don't want Prettier to overwrite.  You can use a simple comment to keep Prettier for acting on that code like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// prettier-ignore&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works with any type of file that Prettier acts on, just use the appropriate type of comment.  For HTML as example it would be &lt;code&gt;&amp;lt;!-- prettier-ignore --&amp;gt;&lt;/code&gt;.  Find the full list &lt;a href="https://prettier.io/docs/en/ignore.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-with-eslint"&gt;
  &lt;/a&gt;
  Integration with ESLint
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(If you are unfamiliar with linters and ESLint, check out &lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-linters-eslint-59pm"&gt;Understanding the Modern Web Stack: ESLint&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are using ESLint you may have set up some linter rules that are based on formatting, or you might be extending existing configurations based on formatting.  &lt;/p&gt;

&lt;p&gt;For these formatting issues it's better to leave them to Prettier, since it will fix them automatically, you don't have to worry about your linter reporting errors or showing red lines for issues that are going to disappear anyway.&lt;/p&gt;

&lt;p&gt;To automatically disable all ESLint rules that conflict with prettier you can use &lt;a href="https://github.com/prettier/eslint-config-prettier"&gt;eslint-config-prettier&lt;/a&gt; as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.eslintrc.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the &lt;code&gt;...&lt;/code&gt; are the other configurations you are extending, and &lt;code&gt;prettier&lt;/code&gt; coming last will overwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#editor-integration-vs-code"&gt;
  &lt;/a&gt;
  Editor Integration (VS Code)
&lt;/h2&gt;

&lt;p&gt;Like many modern development tools, you can integrate Prettier into your IDE and have it run automatically in certain conditions.  The most popular of which is &lt;em&gt;on save&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Our example will show how to add Prettier to VS Code.  Begin by installing the &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier VS Code extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next we need to open VS Code's &lt;code&gt;settings.json&lt;/code&gt; file.  You can find it in the &lt;code&gt;File &amp;gt; Preferences &amp;gt; Settings&lt;/code&gt; menu (or &lt;code&gt;Code &amp;gt; Preferences &amp;gt; Settings&lt;/code&gt; on mac) there is a link within the settings menu to access &lt;code&gt;settings.json&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;You can also access it through the Command Palette with &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; and typing &lt;code&gt;settings.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"[javascript]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above config will set Prettier to automatically format all files it knows how to format &lt;code&gt;(Windows Shift + Alt + F, Mac Shift + Option + F, Linux Ctrl + Shift + I)&lt;/code&gt;.  For Javascript files it will format them automatically when you save.  For more fine grained customization options check the extension's &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Prettier extension will automatically use the version of &lt;code&gt;prettier&lt;/code&gt; you have installed in your NPM project in your workspace folder.  It will also use any &lt;code&gt;.prettierrc.json&lt;/code&gt; and &lt;code&gt;.prettierignore&lt;/code&gt; files it finds as the default config.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automation-and-hooks"&gt;
  &lt;/a&gt;
  Automation and Hooks
&lt;/h2&gt;

&lt;p&gt;You can implement Prettier into your CI workflow so that each member of your team has Prettier run automatically before code is committed.  This is a great way to reduce the number of reporting changes with commands like &lt;code&gt;git diff&lt;/code&gt; with merges and pull requests, since all code committed by all team members will match the same pattern.&lt;/p&gt;

&lt;p&gt;There are a number fo ways to implement this, and the best option depends on your workflow.  The specific details are beyond the scope of this tutorial but you can find all the details &lt;a href="https://prettier.io/docs/en/precommit.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;You should now have a good understanding about what code formatters are, and how Prettier helps to handle code formatting for you so that you can focus on the code itself.   &lt;/p&gt;

&lt;p&gt;Please check out the other entries in this series!  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Running a Local Web Server&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-linters-eslint-59pm"&gt;ESLint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=""&gt;Prettier&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Babel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-react-with-and-without-jsx-31c7"&gt;React &amp;amp; JSX&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Webpack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj"&gt;Loaders, Optimizations &amp;amp; Bundle Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-devserver-react-typescript-4b9b"&gt;DevServer, React &amp;amp; Typescript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;For more tutorials like this, follow me &lt;a href="https://twitter.com/eagleson_alex?ref_src=twsrc%5Etfw"&gt;@eagleson_alex&lt;/a&gt; on Twitter&lt;/p&gt;

&lt;p&gt;Thanks for reading, and stay tuned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Making the Parser</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 17 Oct 2021 22:58:58 +0000</pubDate>
      <link>https://dev.to/noriller/making-the-parser-32lp</link>
      <guid>https://dev.to/noriller/making-the-parser-32lp</guid>
      <description>&lt;p&gt;Continuing from &lt;a href="https://dev.to/noriller/how-to-make-a-parser-and-a-filter-4g98"&gt;last week&lt;/a&gt;, let's make a parser.&lt;/p&gt;

&lt;p&gt;It will be really simple and basically cover nothing, but it will do as an example.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article contains code snippets of Regex that may be disturbing for some programmers. &lt;br&gt;
Reader discretion is advised.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;First, you have to think what you want to cover with your parser.&lt;/p&gt;

&lt;p&gt;For this example it will be: single words, "quoted words" and tag:value.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-lets-make-a-draft-of-what-it-will-do"&gt;
  &lt;/a&gt;
  So, let's make a draft of what it will do:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singleValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-the-simplest-one"&gt;
  &lt;/a&gt;
  Let's start with the simplest one:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// lets just split by spaces!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some random string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns: [ 'some', 'random', 'string' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Nice, looking good and easy!&lt;br&gt;
(And we didn't even had to use Regex!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#next-is-the-quoted-values"&gt;
  &lt;/a&gt;
  Next is the quoted values:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotesRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;quote&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;"'&lt;/span&gt;&lt;span class="se"&gt;])&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?\k&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;quote&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="c1"&gt;// matches and returns everything that matched (this will include the quotes)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;quotesRegex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// we can clear the quotes by slicing the first and last character off the string&lt;/span&gt;
    &lt;span class="c1"&gt;// and since no matches means null, we use the optional chaining here&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`something "quoted here" not here 'here again'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns: [ 'quoted here', 'here again' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Ok... ok... don't fret now.&lt;/p&gt;

&lt;p&gt;First, the Regex:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(?&amp;lt;quote&amp;gt;["'])&lt;/code&gt; this will match either single or double quotes and give it a name (to easily reference later)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.*?&lt;/code&gt; match anything&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\k&amp;lt;quote&amp;gt;&lt;/code&gt; this will match the same as it did earlier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;g&lt;/code&gt; so it doesn't stop at the first match&lt;/p&gt;

&lt;p&gt;&lt;a href="https://regex101.com/r/VL4aij/1"&gt;Regex101 will explain it a lot better than me.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Regex alone, using the &lt;code&gt;.match&lt;/code&gt; function would return &lt;code&gt;[ '"quoted here"', '\'here again\'' ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we just slice the first and last and there you go!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finally-the-tags"&gt;
  &lt;/a&gt;
  Finally the tags!
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+:&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRegexInclusive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;*:&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;*/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="c1"&gt;// matches the quoted values&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagRegex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// split at the colon (if there were matches)&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tag:value something alone: and other:tag :value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns: [ [ 'tag', 'value' ], [ 'other', 'tag' ] ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Not so scary right?&lt;/p&gt;

&lt;p&gt;But why two you might ask?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\S&lt;/code&gt; this matches any non-white space character&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:&lt;/code&gt; matches the colon&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\S&lt;/code&gt; and another match of non-white space&lt;/p&gt;

&lt;p&gt;And the difference between them is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt; will match ONE or more of the token&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt; will match ZERO or more of the token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://regex101.com/r/cK81PA/1"&gt;Regex101 to the rescue again.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;+&lt;/code&gt; matches only &lt;code&gt;tag:value&lt;/code&gt; and &lt;code&gt;other:tag&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; will, in addition to those, also match &lt;code&gt;alone:&lt;/code&gt; and &lt;code&gt;:value&lt;/code&gt;. And for this example, I will just not treat those last two as tags.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#but-that-wont-do"&gt;
  &lt;/a&gt;
  But that won't do...
&lt;/h2&gt;

&lt;p&gt;Some of you might be already expecting this... but let's just show the others:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// let's call MyBasicParser with all the values we used&lt;/span&gt;
&lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`some random string something "quoted here" not here 'here again' tag:value something alone: and other:tag :value`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it returns:&lt;/span&gt;
&lt;span class="cm"&gt;/* 
    [
      [ 'some','random','string','something','"quoted','here"','not','here','\'here','again\'','tag:value','something','alone:','and','other:tag',':value' ],
      [ 'quoted here', 'here again' ],
      [['tag', 'value'], ['other', 'tag']]
    ]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OOPS!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-refactoring"&gt;
  &lt;/a&gt;
  The refactoring!
&lt;/h2&gt;

&lt;p&gt;For each piece, I will want to return the string without the part that was parsed.&lt;/p&gt;

&lt;p&gt;I also know that I will want to change the order, because as is it will just parse everything as "single values".&lt;/p&gt;

&lt;p&gt;This also means the order is important, so, I want the quotes to be parsed first.&lt;br&gt;
With the quotes parsed, it will need to parse the tags.&lt;br&gt;
And finally it will parse the rest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-the-code"&gt;
  &lt;/a&gt;
  Let's see the code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this now also returns the string after the parsing&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;afterQuotedString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// that the next one will use and will give the same&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;afterTagString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;afterQuotedString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// this one, being the last, will be the same&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singleValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;afterTagString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// I've just changed here so it would return an object &lt;/span&gt;
  &lt;span class="c1"&gt;// too many arrays were being returned and with the order changing... what was what?&lt;/span&gt;
  &lt;span class="c1"&gt;// now, the consumer of the parser will know exactly what is what&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know, I could make it even better, maybe with a Fluent Interface or something... but hey... just an example!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-as-for-the-methods"&gt;
  &lt;/a&gt;
  And as for the methods:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I've added here a filter to filter empty string values&lt;/span&gt;
  &lt;span class="c1"&gt;// because as we clean the strings, a lot of spaces will be left there&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// new helper function!&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tryRegexAndCleanTheString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// take the matches as before&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// clean the string by simply replacing the match value with an empty string&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// both are still the same, except that they use the helper function&lt;/span&gt;
&lt;span class="c1"&gt;// then they return an object with the matches (still dealing with each in their own way)&lt;/span&gt;
&lt;span class="c1"&gt;// and the cleaned string for the next step to use&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotesRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;quote&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;"'&lt;/span&gt;&lt;span class="se"&gt;])&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?\k&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;quote&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tryRegexAndCleanTheString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quotesRegex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="na"&gt;afterQuotedString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+:&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tryRegexAndCleanTheString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagRegex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="na"&gt;afterTagString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The end result
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`some random string something "quoted here" not here 'here again' tag:value something alone: and other:tag :value`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it returns:&lt;/span&gt;
&lt;span class="cm"&gt;/* 
    {
      singleValues:  [ 'some','random','string','something','not','here','something','alone:','and',':value' ],
      quotedValues: [ 'quoted here', 'here again' ],
      tagValues: [['tag', 'value'], ['other', 'tag']]
    }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#the-next-step"&gt;
  &lt;/a&gt;
  The next step
&lt;/h2&gt;

&lt;p&gt;This is but a really, REALLY simple version of my own parser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@noriller/easy-filter-parser"&gt;https://www.npmjs.com/package/@noriller/easy-filter-parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That I use in:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;https://www.npmjs.com/package/@noriller/easy-filter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that will use the "continuation" of them.&lt;/p&gt;

&lt;p&gt;As for today... that's all!&lt;/p&gt;

&lt;p&gt;Next time we will be doing a basic version of the filter!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bcfUlP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doa0qgukkst0ykgbtepb.png" alt="Buy Me A Coffe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@melwasser?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Melanie Wasser&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fear?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt; and badly edited by yours truly.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How does the Internet Work</title>
      <author>Josh</author>
      <pubDate>Sun, 17 Oct 2021 22:51:14 +0000</pubDate>
      <link>https://dev.to/jryther/how-does-the-internet-work-h65</link>
      <guid>https://dev.to/jryther/how-does-the-internet-work-h65</guid>
      <description>&lt;p&gt;One thing that many of us take for granted is the internet.  The internet is this vast distributed network that connects all of us in almost everything we do.  Probably like you, I had no idea how it worked, even at a high level overview.  Today I am going to go over the basics of how a system this vast and independent operates.&lt;/p&gt;

&lt;p&gt;First, what is a network?  A network is a group of computers that are connected to each other.  They can share information by passing parts of the whole called packets.  Sometimes the devices sharing packets of information with each other are different.  This required standardization that could be implemented into each device called protocols.  A protocol is a set way of performing certain actions or organizing the data.  Protocols exist for sending data between computers on a local network (IP), making sure they arrive in the right order (TCP), and to format them for websites and web applications (HTTP).&lt;/p&gt;

&lt;p&gt;Next I will describe some of the physical components that contribute to the internet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Routers: These forward packets to different networks based on their destination.  One way to think of them is if each time you passed through an intersection in your car there was a person there to tell you which direction to go in order to get home.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switches: These are similar to routers but they work on a local network.  They take information passed from one source and send it to the computer it was meant to go to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web Servers:  These are high-powered computers that take requests and serve information.  They may need to process requests and apply business logic before responding with the appropriate data which can be computationally intensive.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XN_SoGOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0mnanle9vy1xgyfs4r9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XN_SoGOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0mnanle9vy1xgyfs4r9.png" alt="Network diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have some of the basics understood lets look at the specific steps that go into displaying a website on your computer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DNS query: Computers use IP addresses to find where a website is located on the network.  IP addresses are long and hard to remember so we use DNS to apply an easier naming convention.  Think of it as a phone book for IP addresses.  So a DNS query is essentially looking up an IP address with the URL provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TCP handshake: This is the process of opening up a connection to the IP address with your browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TLS handshake: The browser encrypts the connection to try and prevent malicious individuals from being able to read the packets if they are intercepted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP request: The browser uses the HTTP protocol to ‚Äúask‚Äù for information from the web server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP response: The web server processes the request and provides a response for the browser to render on your computer.  For applications other than a browser it may just provide data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the basics for how the internet and local networks function.  I plan on going deeper in the future about DNS, TCP, TLS and maybe more.  Let me know in the comments if you would find that helpful or if you enjoyed this post.  I hope you all have a great week and happy coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cloudflare.com/learning/network-layer/how-does-the-internet-work/"&gt;https://www.cloudflare.com/learning/network-layer/how-does-the-internet-work/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hp.com/us-en/shop/tech-takes/how-does-the-internet-work"&gt;https://www.hp.com/us-en/shop/tech-takes/how-does-the-internet-work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work"&gt;https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Cyclomatic complexity: Why QAs (and Devs) should worry about it</title>
      <author>Rodrigo Matola</author>
      <pubDate>Sun, 17 Oct 2021 22:43:19 +0000</pubDate>
      <link>https://dev.to/rodmatola/cyclomatic-complexity-why-qas-and-devs-should-worry-about-it-1j1j</link>
      <guid>https://dev.to/rodmatola/cyclomatic-complexity-why-qas-and-devs-should-worry-about-it-1j1j</guid>
      <description>&lt;p&gt;This text will be the first of 3 and was inspired by a LinkedIn post, where a poll was made to know wether a developer should have a college degree. 90% voted no.&lt;/p&gt;

&lt;p&gt;I agree with the results, but there are some contents you learn in college that can be useful at some point, and can make a difference in decision making. Three of these contents will be the subject of this series:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cyclomatic complexity;&lt;/li&gt;
&lt;li&gt;asymptotic complexity;&lt;/li&gt;
&lt;li&gt;binary math (focus on float numbers).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The complexities I studied in Data Structure course, and binary math in Fundamentals of Digital Computing and Introduction to Informatics (I didn't complete my degree in Computer Science).&lt;/p&gt;

&lt;p&gt;In the texts, I'll give a straightforward and simplistic introduction to each subject, and how to use each to improve the quality of your application. At the end, I'll put links for those who want to go deeper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cyclomatic-complexity"&gt;
  &lt;/a&gt;
  What is cyclomatic complexity?
&lt;/h2&gt;

&lt;p&gt;Cyclomatic complexity, or conditional complexity, is the number of independent paths an algorithm can follow. It was developed by Thomas J. McCabe in 1976, published in the article ‚ÄúA Complexity Measure‚Äù. (Was nostalgic to see an Fortran example in the article. It was my first programming language and I used it practically all the 12 years I spent at university).&lt;/p&gt;

&lt;p&gt;In practical terms, it is the amount of ‚Äúifs‚Äù and ‚Äúelses‚Äù that a class, method, function or equivalent has.&lt;/p&gt;

&lt;p&gt;According to McCabe, the maximum acceptable cyclomatic complexity is 10, but searching the internet, several sources indicate the maximum between 5 and 6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cyclomatic-complexity-and-tests"&gt;
  &lt;/a&gt;
  Cyclomatic complexity and tests
&lt;/h2&gt;

&lt;p&gt;Cyclomatic complexity is the minimum number of tests that must be done. The greater the complexity, greater number of tests are needed, and greater the risk of bugs.&lt;/p&gt;

&lt;p&gt;On the internet there are websites that calculate the cyclomatic complexity of a piece of code. Just copy and paste. I'll leave these 2 here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jshint.com/"&gt;JSHint&lt;/a&gt; to JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.lizard.ws/"&gt;Lizard&lt;/a&gt; for several languages like Java, Ruby, Python and Swift&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Static analysis tools such as &lt;a href="https://docs.sonarqube.org/latest/user-guide/metric-definitions/#:~:text=It%20is%20the%20Cyclomatic%20Complexity,because%20keywords%20and%20functionalities%20do"&gt;SonarQube&lt;/a&gt; or SonarLint, &lt;a href="https://eslint.org/docs/rules/complexity"&gt;ESLint&lt;/a&gt;, &lt;a href="https://docs.rubocop.org/rubocop/cops_metrics.html"&gt;Rubocop&lt;/a&gt; also do this but you need to setup them in the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-practice"&gt;
  &lt;/a&gt;
  In practice
&lt;/h2&gt;

&lt;p&gt;On a team I belong, cyclomatic complexity was used as a reference for Planning Poker scores, because unit tests was required and the devs knew that the greater the complexity, the more tests they had to do, in addition to development.&lt;/p&gt;

&lt;p&gt;On another team, I used it as an argument for not implementing a feature. The functionality was if the person passed the number in the address search bar, the app would take that number and automatically fill in the number in field. Otherwise, the field would be empty for manual filling.&lt;/p&gt;

&lt;p&gt;When I said that this would increase complexity, I had to explain that it wasn't the complexity of development (be harder to implement) but of testing, and that would increase the risk of bugs. I explained two or three scenarios in which there could be an error and the PO agreed not to put it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Another point to worry about is performance. One developer I worked with always put the failure API return case in the first &lt;code&gt;if&lt;/code&gt;, even if it happened only a few times. I always thought about how it will affect performance, even it's minimal. A time to send the request, more time to respond, more time to compare, more time to render‚Ä¶ the person has already given up.&lt;/p&gt;

&lt;p&gt;Searching the internet, I saw that this was a ‚Äúgood practice‚Äù for JavaScript, but only in some cases and just to make the code more readable. Unfortunately I didn't find anything that spoke of the performance. Not in JavaScript.&lt;/p&gt;

&lt;p&gt;So, I found &lt;a href="https://www.c-sharpcorner.com/article/performance-consideration-for-c-sharp-conditional-statements/"&gt;Performance Consideration For C# Conditional Statements&lt;/a&gt;, as the title says, is for C#. In this article, Atul Sharma do some experiments with &lt;code&gt;ifs&lt;/code&gt;, &lt;code&gt;if-else&lt;/code&gt;, &lt;code&gt;switch-case&lt;/code&gt;, with match cases in the first and last statement. The experiment shows that the decision can be more than 6 times slower if &lt;code&gt;true&lt;/code&gt; only comes in the last if-else. Do the experiment in your language too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-practices"&gt;
  &lt;/a&gt;
  Good practices
&lt;/h2&gt;

&lt;p&gt;I found several articles that teach how to substitute if-else and switch-case. I'll leave 3 here below, for Java, Ruby and JavaScript respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/5-ways-to-replace-if-else-statements-857c0ff19357"&gt;https://medium.com/swlh/5-ways-to-replace-if-else-statements-857c0ff19357&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@qaschool/use-hashes-em-vez-de-case-statement-2316437470ea"&gt;https://medium.com/@qaschool/use-hashes-em-vez-de-case-statement-2316437470ea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/better-programming/why-you-should-use-enumerations-in-javascript-3cbb0d03b8de"&gt;https://medium.com/better-programming/why-you-should-use-enumerations-in-javascript-3cbb0d03b8de&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are QA, take a look at the code of the application you are testing. Suggest changes.&lt;/p&gt;

&lt;p&gt;If you are a Dev, try to implement best practices in your code. Use Linters and static analysis tools. And read the &lt;a href="https://amzn.to/3mX2Q9w"&gt;Clean Code&lt;/a&gt; book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-know-more"&gt;
  &lt;/a&gt;
  To know more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;https://en.wikipedia.org/wiki/Cyclomatic_complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://literateprogramming.com/mccabe.pdf"&gt;http://literateprogramming.com/mccabe.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/article/performance-consideration-for-c-sharp-conditional-statements/"&gt;https://www.c-sharpcorner.com/article/performance-consideration-for-c-sharp-conditional-statements/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appendix-real-production-code-with-complexity-12"&gt;
  &lt;/a&gt;
  Appendix: Real production code with complexity 12
&lt;/h2&gt;

&lt;p&gt;And another 50 warnings, measured in &lt;a href="https://jshint.com/"&gt;JSHint&lt;/a&gt;. Some words were removed and/or modified to not identify the product and translated to English.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkNavigation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_services&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typePos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hasTicket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You don't have any open invoice!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alertOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You don't have any open invoice!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propsNavigate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navigateTo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;propsNavigate--&amp;gt; 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propsNavigate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navigateTo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propsNavigate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alertOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;openAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasTicket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propsNavigate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navigateTo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;propsNavigate--&amp;gt; 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propsNavigate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navigateTo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propsNavigate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;extractPreReducer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You don't have any open debts!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Further informations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HowWorkScreen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navigateTo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>testing</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
