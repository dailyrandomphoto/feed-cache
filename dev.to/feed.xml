<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>𝐖𝐚𝐧𝐭𝐞𝐝 𝐭𝐨 𝐰𝐨𝐫𝐤 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐀𝐏𝐈𝐬 𝐢𝐧 𝐟𝐥𝐮𝐭𝐭𝐞𝐫?</title>
      <author>Balram Rathore</author>
      <pubDate>Tue, 01 Jun 2021 14:05:50 +0000</pubDate>
      <link>https://dev.to/devstack06/-1lea</link>
      <guid>https://dev.to/devstack06/-1lea</guid>
      <description>&lt;p&gt;This series can help you with the,&lt;br&gt;
📌📌 Getting the data through Rest API and using it on flutter&lt;br&gt;
📌📌 Model class Creation&lt;br&gt;
📌📌 Posting the data from the flutter app to the back end using Rest API.&lt;br&gt;
📌📌 It will help you handle all the types of JSON data like a single object, list object, nested objects, etc.&lt;/p&gt;

&lt;p&gt;Link of series: &lt;a href="https://youtube.com/playlist?list=PLtIU0BH0pkKpXE-1vC7NswofFPby1OYh-"&gt;https://youtube.com/playlist?list=PLtIU0BH0pkKpXE-1vC7NswofFPby1OYh-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;find the repo link in the description and subscribe to the channel for more awesome videos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYZyLNM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u46ssmglxgkl37cygz3b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYZyLNM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u46ssmglxgkl37cygz3b.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>restapi</category>
    </item>
    <item>
      <title>IF YOU'RE A BEGINNER IN CODING, READ THIS</title>
      <author>Tannu Daral</author>
      <pubDate>Tue, 01 Jun 2021 14:00:47 +0000</pubDate>
      <link>https://dev.to/tannudaral/if-you-re-a-beginner-in-coding-read-this-458m</link>
      <guid>https://dev.to/tannudaral/if-you-re-a-beginner-in-coding-read-this-458m</guid>
      <description>&lt;p&gt;DON'T FALL IN TUTORIAL HELL. And, if you haven't heard of it, then you're at the right place at the right time. When many start out, they keep on watching tutorials on Youtube, attend their classes for some online course they enrolled in etc. But do you think that will be worth it? Just learning the concepts? Understanding them, but not applying them anywhere? NO. Never. Until you apply your knowledge in a project, it's a waste. &lt;/p&gt;

&lt;p&gt;Computer Science is something that can be only learnt through practice and more practice. Start building something, do something. At first, you might make mistakes, make them, who's stopping you? If you feel like you need help, refer to StackOverflow or Youtube or your instructor. In these times, the best thing that has happened is that most of our doubts have already been someone else's doubts and therefore, there answers are readily available. You can easily find solution to your problems on the internet. If you need help with ideas, refer to google, &lt;a href="https://www.geeksforgeeks.org/computer-science-projects/"&gt;geeksforgeeks&lt;/a&gt; has some amazing project ideas too or BE CREATIVE and make something that's unthought of before!&lt;/p&gt;

&lt;p&gt;So, go on, build something! You can do this! &lt;br&gt;
Keep Learning! Keep Coding!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Frontend challenge - Car bidders dashboard.</title>
      <author>Rajesh Royal</author>
      <pubDate>Tue, 01 Jun 2021 13:28:09 +0000</pubDate>
      <link>https://dev.to/rajeshroyal/frontend-challenge-car-bidders-dashboard-mia</link>
      <guid>https://dev.to/rajeshroyal/frontend-challenge-car-bidders-dashboard-mia</guid>
      <description>&lt;p&gt;I had an Interview with &lt;strong&gt;Travclan&lt;/strong&gt; and for the technical round, I had to submit a solution for this frontend challenge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Front-end Test Task
## Task

Develop a Single page application with following mentioned features
but not necessarily limited to it.

#Must:

1. Display a list of customers (with pagination).
2. Each customer bas several bids, by default only the maximum bid
should be displayed. Also add a toggle button so that on switching
toggle only the minimum bid is displayed.
3. Enable sorting of customer list by bid amount.
4. Front-end part should be developed as SPA with ES6, React(Hooks).

#Good to have:

1. Using Context Api or Custom Hooks will be a big plus.
2. Clicking on any row should redirect to a separate url where all the
selected customer's bids should be displayed. (use your creativity on
how to display the data).

3. Styling is not a priority but using Material Ui(https://material-
ui.com) entirely will be a plus.

Use following API to retrieve the data - `https://intense-tor-
76305.herokuapp.com/merchants`

## Data structure example

Customer {
id: string,
firstname: string,
lastname: string,
avatarUrl: string,
email: string,
phone: string,
hasPremium: boolean,
bids: Array&amp;lt;Bid&amp;gt;
}

Bid {
id: string,
carTitle: string,
amount: number,
created: string
}

## Table expected
__________________________________________________________________
| Customer name (with avtar) | Email | Phone | Premium | Max/Min bid |
__________________________________________________________________

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;My solution: - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;live - &lt;a href="https://car-bidding.netlify.app/"&gt;Car Bidders Dashboard [Netlify]&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub - &lt;a href="https://github.com/Rajesh-Royal/car-bidding-system-react"&gt;Car Bidders List&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Rajesh-Royal"&gt;
        Rajesh-Royal
      &lt;/a&gt; / &lt;a href="https://github.com/Rajesh-Royal/car-bidding-system-react"&gt;
        car-bidding-system-react
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Car bidding system ReactJS. TravClan
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;div&gt; Car bidding web App  &lt;a rel="noopener noreferrer" href="https://github.com/Rajesh-Royal/car-bidding-system-react/blob/develop/src/assets/images/Car-bidder-logo-vertical.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXsq4gGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Rajesh-Royal/car-bidding-system-react/raw/develop/src/assets/images/Car-bidder-logo-vertical.png" width="50"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;/h1&gt;


&lt;div&gt;
&lt;p&gt;This project Is bootstrapped with &lt;a href="https://github.com/facebook/create-react-app"&gt;Create React App&lt;/a&gt; and using tailwindcss for UI library.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://app.netlify.com/sites/car-bidding/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08a5537e598164884e2ee29ce0a0da9a5e990f0f76cfbc9bfbaa6e6e7138e1f8/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f36616137343630632d353634662d343133612d386537322d3861346263316265613435352f6465706c6f792d737461747573" alt="Netlify Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Rajesh-Royal/car-bidding-system-react/blob/develop/src/assets/images/CarBiddingProjectImage.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjtsUJOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Rajesh-Royal/car-bidding-system-react/raw/develop/src/assets/images/CarBiddingProjectImage.png" alt="Project Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Available Scripts 🚁&lt;/p&gt;

&lt;p&gt;This project usages Yarn as package manager and in the project directory, you can run:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Script&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start:dev&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Starts the development server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Production build&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs unit tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;eject&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://create-react-app.dev/docs/available-scripts/#npm-run-eject" rel="nofollow"&gt;React Eject&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows all the linting errors in codebase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lint:fix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fix all the liting errors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Husky hooks will lint code before commiting it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
🧐 What's inside?&lt;/h2&gt;

&lt;p&gt;A quick look at the top-level files and directories you'll see in this project.&lt;/p&gt;

&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;├── .vscode
├── node_modules
├── public
├── src
    ├── assets
    ├── components
    ├── container
    ├── context
    ├── pages
    ├── routes
    ├── utils
├── _redirects
├── netlify.toml
├── .eslintrc.json
├── .gitignore
├── .prettierrc
├── craco.config.js
├── package.json
├── README.md
├── tailwind.config.js
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;.vscode/&lt;/code&gt;&lt;/strong&gt;: This directory contains all of the workspace setting for vscode.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
💫 Deploy&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://app.netlify.com/start/deploy?repository=https://github.com/Rajesh-Royal/car-bidding-system-react" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/417d890ba67c98ad5856b715343a61cdbf07d72b9bd5b79dd45d43de634c29ea/68747470733a2f2f7777772e6e65746c6966792e636f6d2f696d672f6465706c6f792f627574746f6e2e737667" alt="Deploy to Netlify"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Rajesh-Royal/car-bidding-system-react"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;  I was not selected for next round. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tailwindcss</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>A Vim Guide for Advanced Users</title>
      <author>Matthieu Cneude</author>
      <pubDate>Tue, 01 Jun 2021 13:27:48 +0000</pubDate>
      <link>https://dev.to/phantas0s/a-vim-guide-for-advanced-users-1ddk</link>
      <guid>https://dev.to/phantas0s/a-vim-guide-for-advanced-users-1ddk</guid>
      <description>&lt;p&gt;Welcome to the third part of this series aimed to help you unleash a power never seen on Earth using the Almighty Vim.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-beginner/"&gt;Vim for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;Vim for Intermediate Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-adept/"&gt;Vim for Adept Users&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll see together in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some nice keystrokes beginning with &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What ranges are and how to use them.&lt;/li&gt;
&lt;li&gt;The quickfix list and the location lists.&lt;/li&gt;
&lt;li&gt;The marvelous substitute command.&lt;/li&gt;
&lt;li&gt;The crazy useful &lt;code&gt;:global&lt;/code&gt; (or &lt;code&gt;:g&lt;/code&gt;) command.&lt;/li&gt;
&lt;li&gt;What marks are and what you can do with them.&lt;/li&gt;
&lt;li&gt;How to increase and decrease numbers with a single keystroke.&lt;/li&gt;
&lt;li&gt;How to sort text with a nice command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But before going into the juicy content of this article, I've some recommendations for you, dear reader:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fire up your Vim and play around with the commands and keystrokes while reading. It's the best way for you to remember everything which blew you away. You'll then be able to be blown away whenever you like for the rest of your life.&lt;/li&gt;
&lt;li&gt;Don't use a cheatsheet; write your own as you read. It will allow you to come back easily to the commands you find the most useful for &lt;em&gt;your own needs&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enough rambling. Let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-g-keystrokes"&gt;
  &lt;/a&gt;
  Useful "g" Keystrokes
&lt;/h2&gt;

&lt;p&gt;Let's begin gently with a mixed bag of keystrokes starting with &lt;code&gt;g&lt;/code&gt;. There are many of these "g" commands in Vim, and we already saw some of them in the previous articles. Can you recall them?&lt;/p&gt;

&lt;p&gt;You can use these keystrokes in NORMAL mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;gf&lt;/code&gt; - Edit the file located at the filepath under your cursor. 

&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;CTRL+W CTRL+F&lt;/code&gt; to open the file in a new window. &lt;/li&gt;
&lt;li&gt;It can open the URL under your cursor if you have the plugin &lt;code&gt;netrw&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gx&lt;/code&gt; - Open the file located at the filepath under your cursor. 

&lt;ul&gt;
&lt;li&gt;It will use the default application used by your OS for this filetype. &lt;/li&gt;
&lt;li&gt;It works with URLs too. It will open your favorite browser and load the website.&lt;/li&gt;
&lt;li&gt;It only works if you have the plugin &lt;code&gt;netrw&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gi&lt;/code&gt; - Move to the last insertion you did and switch to INSERT mode. 

&lt;ul&gt;
&lt;li&gt;Pretty useful if you stopped your editing to look at some other file. &lt;/li&gt;
&lt;li&gt;It uses marks under the hood: more on that later in this article.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gv&lt;/code&gt; - Start VISUAL mode and use the selection made during the last VISUAL mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gn&lt;/code&gt; - Select the match of your last search:

&lt;ol&gt;
&lt;li&gt;Move to the last searched match.&lt;/li&gt;
&lt;li&gt;Switch to VISUAL mode (if you weren't in VISUAL mode already).&lt;/li&gt;
&lt;li&gt;Select the match.&lt;/li&gt;
&lt;li&gt;You can continue to hit &lt;code&gt;n&lt;/code&gt; (or &lt;code&gt;gn&lt;/code&gt;) to select the area between the current match and the next match.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gI&lt;/code&gt; - Insert text at the beginning of the line, no matter what the first characters are.

&lt;ul&gt;
&lt;li&gt;The keystroke &lt;code&gt;I&lt;/code&gt; insert text &lt;em&gt;just before the first non-blank characters&lt;/em&gt; of the line.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ga&lt;/code&gt; - Print the &lt;code&gt;a&lt;/code&gt;scii value of the character under the cursor in decimal, hexadecimal or octal.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gu&lt;/code&gt; - Lowercase using a motion (for example, &lt;code&gt;guiw&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gU&lt;/code&gt; - Uppercase using a motion (for example, &lt;code&gt;gUiw&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To try out &lt;code&gt;gf&lt;/code&gt; and &lt;code&gt;gx&lt;/code&gt;, you can write for example &lt;code&gt;https://www.google.com/&lt;/code&gt; in Vim, place your cursor on it, and hit the keystrokes. Don't forget the trailing slash in your URL.&lt;/p&gt;

&lt;p&gt;You'll soon discover an inconvenience with &lt;code&gt;gx&lt;/code&gt;: when you use it on a filepath, Vim will hang till you close the file. That's why I've created the following mapping you can add to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap gX :silent :execute
            \ "!xdg-open" expand('%:p:h') . "/" . expand("&amp;lt;cfile&amp;gt;") " &amp;amp;"&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It maps the keystroke &lt;code&gt;gX&lt;/code&gt; to use &lt;code&gt;xdg-open&lt;/code&gt; with a relative filepath under your cursor. It will open the file with your favorite application &lt;em&gt;in the background&lt;/em&gt;. The program &lt;code&gt;xdg-open&lt;/code&gt; will only work on Linux-based systems; for MacOS, try &lt;code&gt;open&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help reference&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ranges"&gt;
  &lt;/a&gt;
  Ranges
&lt;/h2&gt;

&lt;p&gt;Now that we're done with the appetizers, let's discover the first real dish of our Vim feast: the ranges. You can apply them to many commands, making them terribly powerful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;In Vim's help, every command accepting a range will have the string of characters &lt;code&gt;[range]&lt;/code&gt; in front of them. Multiple line specifiers are possible, separated by commas &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are the most interesting ranges you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; - Any number &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; in your range refers to a line number.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; - Represent the current line (often the default range).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; - Represent the last line of the current buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; - Represent the entire file (same as &lt;code&gt;1,$&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; - Use the last selection you've made during the last VISUAL mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, using the command &lt;code&gt;:d&lt;/code&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:1,40d&lt;/code&gt; - Delete line 1 to 40 included.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:2,$d&lt;/code&gt; - Delete every line from the second one till the end of the file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:.,$d&lt;/code&gt; - Delete every line from the current one till the end of the file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:%d&lt;/code&gt; - Delete every line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also do some arithmetic with ranges if you want. For example, let's imagine your cursor is on the line 60: the range &lt;code&gt;.,.+10&lt;/code&gt; will be equivalent to the range &lt;code&gt;60,70&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-mode-and-range"&gt;
  &lt;/a&gt;
  Visual Mode and Range
&lt;/h3&gt;

&lt;p&gt;If you switch to COMMAND-LINE mode after doing some selection in VISUAL mode, you'll see these two symbols appearing: &lt;code&gt;'&amp;lt;&lt;/code&gt; and &lt;code&gt;'&amp;gt;&lt;/code&gt; with a comma &lt;code&gt;,&lt;/code&gt; in between. This is a range too!&lt;/p&gt;

&lt;p&gt;The symbols &lt;code&gt;'&amp;lt;&lt;/code&gt; represents the first line you've selected and &lt;code&gt;'&amp;gt;&lt;/code&gt; the last line. Each of these are marks; again, we'll see more about marks below.&lt;/p&gt;

&lt;p&gt;In practice, the ranges &lt;code&gt;'&amp;lt;,'&amp;gt;&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; are synonym, but you'll have more flexibility with the first. For example, you can execute a command from the first line you've selected till the end of the file with the range &lt;code&gt;'&amp;lt;,$&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help [range]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help v_:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help '&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help '&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vims-quickfix-and-location-list"&gt;
  &lt;/a&gt;
  Vim's Quickfix And Location List
&lt;/h2&gt;

&lt;p&gt;Now, let's talk about a very useful data structure available in Vim, the quickfix list. &lt;/p&gt;

&lt;p&gt;Don't confuse the quickfix list and the quickfix window: these are two different entities. The first is a data structure, the second can display this data structure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quickfix-lists"&gt;
  &lt;/a&gt;
  Quickfix Lists
&lt;/h3&gt;

&lt;p&gt;You can think of a quickfix list as a set of positions in one or multiple files.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h4&gt;

&lt;p&gt;Let's take an example: what happens if you run the command &lt;code&gt;:vimgrep hello *&lt;/code&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It will search the pattern "hello" in every file of your working directory.&lt;/li&gt;
&lt;li&gt;It will populate a quickfix list with every position matching your pattern "hello".&lt;/li&gt;
&lt;li&gt;It will move your cursor to the first position of the quickfix list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to know more about vimgrep and other tools you can search with, I &lt;a href="https://thevaluable.dev/vim-search-find-replace/"&gt;wrote an article about that&lt;/a&gt;. Other commands (like &lt;code&gt;:make&lt;/code&gt; or &lt;code&gt;:grep&lt;/code&gt;) also populate automatically a quickfix list.&lt;/p&gt;

&lt;p&gt;Let's expand the mystery around marks: these positions in the quickfix list are in fact hidden mark!&lt;/p&gt;

&lt;p&gt;The quickfix list is often used to display specific errors in a codebase, often spit out from a compiler or a linter (via the command &lt;code&gt;:make&lt;/code&gt; for example), but not only, as we just saw. I call the entries of a quickfix list "positions" to be more general, but sometimes Vim's help will refer to them as "errors". Don't be confused: it's the same idea.&lt;/p&gt;

&lt;p&gt;Among other conditions, a quickfix list entry needs to have a filename for you to be able to jump to its position. Otherwise, the entry doesn't point to anything. Difficult to move to anything.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#useful-commands"&gt;
  &lt;/a&gt;
  Useful Commands
&lt;/h4&gt;

&lt;p&gt;Here are the commands you can use to navigate through the current quickfix list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:cl&lt;/code&gt; or &lt;code&gt;:clist&lt;/code&gt; - Display all valid entries of the current quickfix list. You can add a range as argument (only numbers).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cc &amp;lt;number&amp;gt;&lt;/code&gt; - Move to the &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;th entry of the current quickfix list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cnext&lt;/code&gt; or &lt;code&gt;:cn&lt;/code&gt; - Move to the next entry of the current quickfix list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cprevious&lt;/code&gt; or &lt;code&gt;:cp&lt;/code&gt; - Move to the previous entry of the current quickfix list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cfirst&lt;/code&gt; or &lt;code&gt;:cfir&lt;/code&gt; - Move to the first entry of the current quickfix list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:clast&lt;/code&gt; or &lt;code&gt;:clas&lt;/code&gt; - Move to the last entry of the current quickfix list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are additional commands which make quickfix lists really powerful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:cdo &amp;lt;cmd&amp;gt;&lt;/code&gt; - Execute a command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; on each valid entry of the current quickfix list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cexpr &amp;lt;expr&amp;gt;&lt;/code&gt; or &lt;code&gt;:cex &amp;lt;expr&amp;gt;&lt;/code&gt; - Create a quickfix list using the result of evaluating the Vimscript expression &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:caddexpr &amp;lt;expr&amp;gt;&lt;/code&gt; or &lt;code&gt;:cadde &amp;lt;expr&amp;gt;&lt;/code&gt; - Appends the result of evaluating the Vimscript expression &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; to the current quickfix list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have no clue how to use the last two commands, you can do for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:cex []&lt;/code&gt; - Empty the current quickfix list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cex system("&amp;lt;cmd&amp;gt;")&lt;/code&gt; - Populate your quickfix list with any shell command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt;. You can try it with &lt;code&gt;ls&lt;/code&gt; for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-quickfix-window"&gt;
  &lt;/a&gt;
  The Quickfix Window
&lt;/h3&gt;

&lt;p&gt;What about displaying the current quickfix list in a new buffer? You can do that with the following command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:copen&lt;/code&gt; or &lt;code&gt;:cope&lt;/code&gt; - Open a window (with a special buffer) to show the current quickfix list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can only have one quickfix window open. To move to the position of the selected entry of the quickfix list in the quickfix window, hit &lt;code&gt;ENTER&lt;/code&gt; or &lt;code&gt;.cc&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#location-lists"&gt;
  &lt;/a&gt;
  Location Lists
&lt;/h3&gt;

&lt;p&gt;A location list is similar to a quickfix list, except that the first is local to a window and the second is global to your Vim instance. In other words, you can have multiple location lists available at the same time (one per window open), but you can only have access to one quickfix list.&lt;/p&gt;

&lt;p&gt;The commands for location lists are similar to the ones for the quickfix lists; often, you'll only have to replace the first &lt;code&gt;c&lt;/code&gt; (qui&lt;code&gt;c&lt;/code&gt;fix) of the command with &lt;code&gt;l&lt;/code&gt; (&lt;code&gt;l&lt;/code&gt;ocation). &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:lli&lt;/code&gt; or &lt;code&gt;:llist&lt;/code&gt; - Display all valid entries of the current location list. You can add a range as argument (only numbers).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:ll &amp;lt;number&amp;gt;&lt;/code&gt; - Move to the entry &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; of the current location list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:lnext&lt;/code&gt; or &lt;code&gt;:lne&lt;/code&gt; - Move to the next entry of the current quickfix list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To populate your location list you can also use the commands &lt;code&gt;:lvimgrep&lt;/code&gt; or &lt;code&gt;:lmake&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;Often, Vim users will use the quickfix list for anything related to errors in their codebase, and the location list for search results. But it's up to you at the end of the day. With Vim, you're the master of your destiny.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help quickfix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help quickfix-window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help location-list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help location-list-window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help system()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vims-registers"&gt;
  &lt;/a&gt;
  Vim's Registers
&lt;/h2&gt;

&lt;p&gt;The registers are another big dish in our Vim feast. You can think of registers as places where you can read or write some text. I like to think about them as Vim's clipboards. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#specifying-a-register"&gt;
  &lt;/a&gt;
  Specifying a Register
&lt;/h3&gt;

&lt;p&gt;Here's a command and a NORMAL mode keystroke to display and &lt;em&gt;specify&lt;/em&gt; registers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:registers&lt;/code&gt; or &lt;code&gt;:reg&lt;/code&gt; - Display the content of your registers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"&amp;lt;reg&amp;gt;&lt;/code&gt; - This keystroke &lt;em&gt;specifies&lt;/em&gt; the register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt; to be read or written.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you know when the register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt; is read or written using the keystroke &lt;code&gt;"&lt;/code&gt;? It depends of the keystroke you use afterward. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To write the register &lt;code&gt;a&lt;/code&gt;:

&lt;ol&gt;
&lt;li&gt;Hit &lt;code&gt;"a&lt;/code&gt; in NORMAL mode to specify what register you want to write on.&lt;/li&gt;
&lt;li&gt;Yank, change, or delete some content (for example by using &lt;code&gt;dd&lt;/code&gt; in NORMAL mode) to write it to &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;To read the register &lt;code&gt;a&lt;/code&gt;:

&lt;ol&gt;
&lt;li&gt;Hit &lt;code&gt;"a&lt;/code&gt; in NORMAL mode to specify what register you want to read.&lt;/li&gt;
&lt;li&gt;Use a put keystroke in NORMAL mode (for example &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt;) to spit out the content of the register in your current buffer.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We take the example of register &lt;code&gt;a&lt;/code&gt; here, but it will work for any writable register. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-types-of-registers"&gt;
  &lt;/a&gt;
  The Types of Registers
&lt;/h3&gt;

&lt;p&gt;There are 10 different types of registers in Vim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The unnamed register&lt;/strong&gt; (&lt;code&gt;"&lt;/code&gt;) - Contain the last deleted, changed, or yanked content, &lt;em&gt;even if&lt;/em&gt; one register was specified.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The numbered registers&lt;/strong&gt; (from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; contains the content of the last yank.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; is a stack containing the content you've deleted or changed.

&lt;ol&gt;
&lt;li&gt;Each time you delete or change some content, it will be added to the register &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The previous content of the register &lt;code&gt;1&lt;/code&gt; will be assigned to register &lt;code&gt;2&lt;/code&gt;, the previoius content of &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;When something is added to the register &lt;code&gt;1&lt;/code&gt;, the content of the register &lt;code&gt;9&lt;/code&gt; is lost.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;None of these registers are written if you've specified one before with the keystroke &lt;code&gt;"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The small delete register&lt;/strong&gt; (&lt;code&gt;-&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;Contains any deleted or changed content smaller than one line.&lt;/li&gt;
&lt;li&gt;It's not written if you specified a register with &lt;code&gt;"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The named registers&lt;/strong&gt; (range from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;Vim will never write to them if you don't specify them with the keystroke &lt;code&gt;"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can use the uppercase name of each register to append to it (instead of overwriting it).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The read only registers&lt;/strong&gt; (&lt;code&gt;.&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;) 

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; contains the last inserted text.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; contains the name of the current file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:&lt;/code&gt; contains the most recent command line executed.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The alternate buffer register&lt;/strong&gt; (&lt;code&gt;#&lt;/code&gt;) - Contain the alternate buffer for the current window.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The expression register&lt;/strong&gt; (&lt;code&gt;=&lt;/code&gt;) - Store the result of an expression. More about this register below.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The selection registers&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; is synchronized with the system clipboard.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; is synchronized with the selection clipboard (only on *nix systems).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The black hole register&lt;/strong&gt; (&lt;code&gt;_&lt;/code&gt;) - Everything written in there will disappear forever.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The last search pattern register&lt;/strong&gt; (&lt;code&gt;/&lt;/code&gt;) - This register contains your last search.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, even if you don't specify any register with the keystroke &lt;code&gt;"&lt;/code&gt;, the content you delete, change, or yank will automatically overwrite one (or multiple) of them. So if you don't want the content you write to your registers to be silently overwritten by Vim, &lt;em&gt;always write in the named registers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using a put command without specifying any register will spit the content of the unnamed register by default. But you might have this line in your &lt;code&gt;vimrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clipboard+=unnamedplus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that case, the content you change, delete, or yank will go directly in the unnamed register &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;+&lt;/code&gt; register. Using put commands will directly output the &lt;code&gt;+&lt;/code&gt; register too. Many find it useful (including me) to access your OS clipboard more easily, without the need to specify the &lt;code&gt;+&lt;/code&gt; register for reading or writing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appending-a-recording"&gt;
  &lt;/a&gt;
  Appending a Recording
&lt;/h3&gt;

&lt;p&gt;We've seen in the &lt;a href="https://dev.to/vim-intermediate/"&gt;previous article&lt;/a&gt; that you can record your keystrokes using &lt;code&gt;q&lt;/code&gt;. Now that you know how to use registers, you can manipulate these keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you made a mistake during the recording, you can spit the whole register, modify it, and save it back.&lt;/li&gt;
&lt;li&gt;You can append to your recording by using the uppercase variant of your register. For example:

&lt;ol&gt;
&lt;li&gt;Hit &lt;code&gt;qa&lt;/code&gt; and record whatever keystrokes you want. Stop the recording by hitting &lt;code&gt;q&lt;/code&gt; again.&lt;/li&gt;
&lt;li&gt;You realize that you forgot a couple of keystrokes.&lt;/li&gt;
&lt;li&gt;Execute your keystrokes to be sure you're at the last position of your recording.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;qA&lt;/code&gt; to &lt;em&gt;append&lt;/em&gt; to your register &lt;code&gt;a&lt;/code&gt;. When you're done, hit &lt;code&gt;q&lt;/code&gt; again.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You've just gained even more flexibility for your macros.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-registers-in-insert-and-command-line-modes"&gt;
  &lt;/a&gt;
  Using Registers in INSERT and COMMAND LINE modes
&lt;/h3&gt;

&lt;p&gt;The magical keystroke &lt;code&gt;"&lt;/code&gt; is great for NORMAL mode, but what about spitting the content of a register in INSERT mode or COMMAND LINE mode? For that, you can use &lt;code&gt;CTRL+R &amp;lt;reg&amp;gt;&lt;/code&gt; to put the content of register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt; in your current buffer.&lt;/p&gt;

&lt;p&gt;For example, if you hit &lt;code&gt;CTRL+R %&lt;/code&gt; in INSERT mode, you'll put the content of the register &lt;code&gt;%&lt;/code&gt;  in your current buffer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-insane-expression-register"&gt;
  &lt;/a&gt;
  The Insane Expression Register
&lt;/h3&gt;

&lt;p&gt;If you don't know the expression register, I'm about to revolution your life. I hope you're ready.&lt;/p&gt;

&lt;p&gt;Try this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Switch to INSERT mode and hit the keystroke &lt;code&gt;CTRL+r =&lt;/code&gt;. You'll move to Vim's command-line.&lt;/li&gt;
&lt;li&gt;From there, you can type any Vimscript expression you want, like &lt;code&gt;system("ls")&lt;/code&gt; we saw above, or &lt;code&gt;4+4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;ENTER&lt;/code&gt; to run the expression, and you'll see the output of the shell command &lt;code&gt;ls&lt;/code&gt; directly inserted in your buffer!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's useful to evaluate some custom functions you've defined while staying in insert mode. If you use Neovim, you can use the function &lt;code&gt;luaeval()&lt;/code&gt; to evaluate some Lua too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clearing-a-register"&gt;
  &lt;/a&gt;
  Clearing a Register
&lt;/h3&gt;

&lt;p&gt;A last little trick about registers: if you want to empty one, you can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qaq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beginning a recording also deletes everything which is in this register. So you just need to stop the recording by hitting &lt;code&gt;q&lt;/code&gt; again to have an empty register.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help registers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help clipboard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help clipboard-unnamed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help clipboard-unnamedplus&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-substitute-commands"&gt;
  &lt;/a&gt;
  The Substitute Commands
&lt;/h2&gt;

&lt;p&gt;Let's continue our ascension to become The Vim God (or Goddess). The substitute command is next on the menu.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;If you're already familiar with the CLI &lt;code&gt;sed&lt;/code&gt;, this command will remind you some good old memories.&lt;/p&gt;

&lt;p&gt;A substitution is a way to replace some content with some other content, using a range and a count. The count will decide how many lines is affected by your substitution from the last line of your range.&lt;/p&gt;

&lt;p&gt;Like many other commands, the default range is the current line if you don't specify it.&lt;/p&gt;

&lt;p&gt;Here's the pattern of the command itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:s/pattern/replacement/flags
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does this mean?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;pattern&lt;/code&gt; is the search you want to match.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;replacement&lt;/code&gt; will replace the &lt;em&gt;first match&lt;/em&gt; of the pattern on each line.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;flag&lt;/code&gt; modify the behavior of the command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's another element, represented here with a slash  &lt;code&gt;/&lt;/code&gt;: the separator. It doesn't have to be a slash, it can be any character except:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An alphanumerical character (a character included in the range &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, and &lt;code&gt;0-9&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;A double quote&lt;code&gt;"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A pipe &lt;code&gt;|&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;replacement&lt;/code&gt; is not mandatory: if you omit it, the substitute command will delete the pattern matched.&lt;/p&gt;

&lt;p&gt;You can also run &lt;code&gt;:s&lt;/code&gt; without any range, pattern, replacement, flags, or count. In that case, it will repeat the last substitution you've done without the flags; you can add new flags (except &lt;code&gt;&amp;amp;&lt;/code&gt;) and a count if you want to.&lt;/p&gt;

&lt;p&gt;Let's see some examples to understand how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:s/pattern/replacement/&lt;/code&gt; - Substitute the first occurrence of &lt;code&gt;pattern&lt;/code&gt; on the current line with &lt;code&gt;replacement&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:s#pattern#replacement#&lt;/code&gt; - Equivalent substitution to the one just above. Handy if you have some URLs in your &lt;code&gt;pattern&lt;/code&gt; or your &lt;code&gt;replacement&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:s/pattern/&lt;/code&gt; - delete the first occurrence of &lt;code&gt;pattern&lt;/code&gt; on the current line.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:s/pattern/replacement/g&lt;/code&gt; - Substitute every occurrence of &lt;code&gt;pattern&lt;/code&gt; on the current line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also add a range as prefix and a count as suffix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:%s/pattern/replacement/&lt;/code&gt; - Substitute every &lt;em&gt;first&lt;/em&gt; occurrence of &lt;code&gt;pattern&lt;/code&gt; on each line of the current buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:%s/pattern/replacement/g&lt;/code&gt; - Substitute every occurrence of &lt;code&gt;pattern&lt;/code&gt; on each line of the current buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:1,10s/pattern/replacement/&lt;/code&gt; - Substitute every &lt;em&gt;first&lt;/em&gt; occurrence of &lt;code&gt;pattern&lt;/code&gt; on the first ten lines of the current buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:s/pattern/replacement/ 10&lt;/code&gt; - Substitute every &lt;em&gt;first&lt;/em&gt; occurrence of &lt;code&gt;pattern&lt;/code&gt; for the current line and the 10 next lines.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:1,10s/pattern/replacement/ 5&lt;/code&gt; - Substitute every &lt;em&gt;first&lt;/em&gt; occurrence of &lt;code&gt;pattern&lt;/code&gt; on the first ten lines and on the five lines below the last line of the range.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:s g 10&lt;/code&gt; - Repeat the last substitution without its flag, and add a new flag &lt;code&gt;g&lt;/code&gt;. It will affect the 10 lines after the last line of the last substitute command. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vims-magical-patterns"&gt;
  &lt;/a&gt;
  Vim's "Magical" Patterns
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;pattern&lt;/code&gt; in that case is a regular expression. But it's not the good old regex engine you're familiar with from high level programming languages. Vim has its own regex engine (actually, it has two!) which can be quite confusing.&lt;/p&gt;

&lt;p&gt;Regexes in Vim are more or less magic. You think I'm kidding? I'm not. Here's what I find useful to remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To have access to &lt;em&gt;all&lt;/em&gt; regex metacharacters, you can prefix your pattern with &lt;code&gt;\v&lt;/code&gt; (&lt;code&gt;v&lt;/code&gt;ery magic).&lt;/li&gt;
&lt;li&gt;To have access to &lt;em&gt;almost all&lt;/em&gt; regex metacharacters (except &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;), use the command &lt;code&gt;:sm&lt;/code&gt; instead of &lt;code&gt;:s&lt;/code&gt; (&lt;code&gt;s&lt;/code&gt;ubstitute &lt;code&gt;m&lt;/code&gt;agic).&lt;/li&gt;
&lt;li&gt;To have access to &lt;em&gt;none&lt;/em&gt; of the metacharacters (except &lt;code&gt;$&lt;/code&gt;), use &lt;code&gt;:sno&lt;/code&gt; instead of &lt;code&gt;:s&lt;/code&gt; (&lt;code&gt;s&lt;/code&gt;ubstitute &lt;code&gt;no&lt;/code&gt;magic).&lt;/li&gt;
&lt;li&gt;To have access to &lt;em&gt;none&lt;/em&gt; of the metacharacters, you can prefix your pattern with &lt;code&gt;\V&lt;/code&gt; (&lt;code&gt;V&lt;/code&gt;ery nomagic).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if I want to delete all opening parenthesis in my buffer, I can run one of these three equivalent commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:%s/\V(/
:%sm/(/
:%s/\(/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you know your regex metacharacters, you might wonder what's the metacharacter &lt;code&gt;~&lt;/code&gt;. It's the latest substituted string in Vim's world. In fact, you can use many more metacharacters (called &lt;em&gt;atoms&lt;/em&gt;) and character classes in your Vim's regex.&lt;/p&gt;

&lt;p&gt;If don't know you're regex metacharacters, &lt;a href="https://www.youtube.com/watch?v=LIVBktatfQI"&gt;I've recorded a couple of videos&lt;/a&gt; explaining the basics of regular expressions (using grep).&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://thevaluable.dev/vim-adept/"&gt;next article&lt;/a&gt; in this series dive into Vim's regexes a bit deeper.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-commands"&gt;
  &lt;/a&gt;
  Additional Commands
&lt;/h3&gt;

&lt;p&gt;Here are two other commands I find useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:&amp;amp;&amp;amp;&lt;/code&gt; - Repeat the last substitute with its flags.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:~&lt;/code&gt; - Repeat the last substitute command with the same replacement, but with the last used &lt;em&gt;search&lt;/em&gt; pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, let's say that you execute successively the following in Vim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:s/pattern/replacement/
/hello
:~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last command will substitute &lt;code&gt;hello&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also use these useful keystrokes in NORMAL mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt; - Repeat the last substitute, without its range and its flags.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g&amp;amp;&lt;/code&gt; - Repeat the last substitute, with its range as well as its flags, and replace its pattern with the last &lt;em&gt;search&lt;/em&gt; pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-substitutes-flags"&gt;
  &lt;/a&gt;
  The Substitutes Flags
&lt;/h3&gt;

&lt;p&gt;Here are some flags which can be useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt; - Use the flag(s) from the previous substitute command.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c&lt;/code&gt; - Ask you to confirm each substitution.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; - Replace all occurrences in each line (not only the first one).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i&lt;/code&gt; - The pattern is case-insensitive.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;I&lt;/code&gt; - The pattern is case-sensitive.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;n&lt;/code&gt; - Only report the number of match without substitute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now substitute like crazy to your heart's content!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help :substitute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :sm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :sno&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :s_flags&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-global-command"&gt;
  &lt;/a&gt;
  The Global Command
&lt;/h2&gt;

&lt;p&gt;You don't have enough? You want even more power? Behold the Holy Global Command! It works similarly to the substitute command, except that it will execute a command instead of replacing a pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;Here's the pattern of the command itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:g/pattern/command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also prefix it with a range if you want to.&lt;/p&gt;

&lt;p&gt;As an example, let's imagine that you have the urge to delete all the lines of your current buffer containing the pattern "useless". To do that, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:g/useless/d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice, but I can give you &lt;em&gt;even more&lt;/em&gt; power.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#normal-mode-commands"&gt;
  &lt;/a&gt;
  Normal mode Commands
&lt;/h3&gt;

&lt;p&gt;Do you know the command &lt;code&gt;:norm&lt;/code&gt;? You can give to it some NORMAL mode keystrokes and it will apply them for you, &lt;em&gt;as if you were hitting them in NORMAL mode&lt;/em&gt;. For example, the following will delete the word under the cursor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:norm daw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now combine a normal mode command with the global command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:g/useless/norm gu$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will lowercase every line containing the pattern &lt;code&gt;useless&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I first heard about that, I saw the Universe, the Big Bang, the cycle of creation and destruction. I understood life and death. I became blessed, chanting the power of Vim in every free cities.&lt;/p&gt;

&lt;p&gt;A last tip: &lt;code&gt;:norm&lt;/code&gt; use the key mappings you've defined. If you only want to use Vim's default mapping, you can use &lt;code&gt;norm!&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;If you write a plugin, &lt;em&gt;always&lt;/em&gt; use &lt;code&gt;norm!&lt;/code&gt;. You don't know what mappings have your users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help :global&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :normal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#marks"&gt;
  &lt;/a&gt;
  Marks
&lt;/h2&gt;

&lt;p&gt;It's time to answer the question haunting your incredible mind: what are marks?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;You can think of a mark as a specific position in a buffer. To set one, you can use &lt;code&gt;m&lt;/code&gt; in NORMAL mode followed by a character in the following ranges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;a-z&lt;/code&gt; - These marks are local to one buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A-Z&lt;/code&gt; - These marks are global to multiple buffers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a "viminfo" file set via the option &lt;code&gt;viminfo&lt;/code&gt; in Vim, or if you have a "shada" file set via the option &lt;code&gt;shada&lt;/code&gt; in Neovim, these marks are persisted. This means that you can come back to them even if you closed the file.&lt;/p&gt;

&lt;p&gt;If you wonder what are Vim's options and how to display their values, &lt;a href="https://dev.to/vim-beginners/"&gt;I wrote about it in the first article of this series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also read-only marks in the range &lt;code&gt;0-9&lt;/code&gt;. They are only available when using a &lt;code&gt;viminfo&lt;/code&gt; file (for Vim) or a &lt;code&gt;shada&lt;/code&gt; file (for Neovim). They store the position of your cursor each time you quit a file: the mark &lt;code&gt;0&lt;/code&gt; has the last position, the mark &lt;code&gt;1&lt;/code&gt; has the position before the last one, and so on.&lt;/p&gt;

&lt;p&gt;To move to a mark, you can use these keystrokes in NORMAL mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'&amp;lt;mark&amp;gt;&lt;/code&gt; - Move to the &lt;em&gt;first non-blank character&lt;/em&gt; of the line where the mark &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; was set.&lt;/li&gt;
&lt;li&gt;`&lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; - Move to the &lt;em&gt;exact position&lt;/em&gt; where the mark &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; was set.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g' &amp;lt;mark&amp;gt;&lt;/code&gt; - Move to the mark &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; without changing the jump list (I've written about the jump list &lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;in the previous article of this series&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#useful-commands"&gt;
  &lt;/a&gt;
  Useful Commands
&lt;/h3&gt;

&lt;p&gt;As you might imagine, there are also some useful commands for displaying or manipulating marks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:marks&lt;/code&gt; - Display the marks set.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:marks &amp;lt;marks&amp;gt;&lt;/code&gt; - Display some specific marks &lt;code&gt;&amp;lt;marks&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:delmarks &amp;lt;mark&amp;gt;&lt;/code&gt; or &lt;code&gt;:delm &amp;lt;mark&amp;gt;&lt;/code&gt; - Delete the mark &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:delmarks!&lt;/code&gt; or &lt;code&gt;delm!&lt;/code&gt; - Delete all the marks in the range &lt;code&gt;a-z&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;code&gt;:marks &amp;lt;&amp;gt;&lt;/code&gt; will display the two marks &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also use marks as ranges. For example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;`&lt;br&gt;
:`a,`bs/pattern/replacement/&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will substitute the first match of &lt;code&gt;pattern&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt; from the exact position of the mark &lt;code&gt;a&lt;/code&gt; to the exact position of the mark &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#special-marks"&gt;
  &lt;/a&gt;
  Special Marks
&lt;/h3&gt;

&lt;p&gt;Let's now introduce special marks with these keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;m&amp;lt;&lt;/code&gt; or &lt;code&gt;m&amp;gt;&lt;/code&gt; - Set the marks &lt;code&gt;'&amp;lt;&lt;/code&gt; and &lt;code&gt;'&amp;gt;&lt;/code&gt; we saw above. It can be handy for the keystroke &lt;code&gt;gv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;`&lt;code&gt;[&lt;/code&gt; - Move to the first character of the previously changed, deleted, or yanked content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt;]` - Move to the last character of the previously changed, deleted, or yanked content.&lt;/li&gt;
&lt;li&gt;`&lt;code&gt;"&lt;/code&gt; - Move to the position were you've closed the current file for the last time.&lt;/li&gt;
&lt;li&gt;`&lt;code&gt;^&lt;/code&gt; - Move to the position where you've used INSERT mode for the last time (this mark is used by the keystroke &lt;code&gt;gi&lt;/code&gt; under the hood).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For every keystroke described above using a backtick, you can use a single quote &lt;code&gt;'&lt;/code&gt; instead with the differences we saw above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help mark-motions&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manipulating-numbers"&gt;
  &lt;/a&gt;
  Manipulating Numbers
&lt;/h2&gt;

&lt;p&gt;After these register, substitution, and mark shenanigans, here's a lighter subject: adding (or subtracting) numbers.&lt;/p&gt;

&lt;p&gt;Here's a bunch of NORMAL mode keystrokes to do exactly that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+a&lt;/code&gt; - Increase &lt;em&gt;the first digit or number&lt;/em&gt; on the line.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x&lt;/code&gt; - Decrease &lt;em&gt;the first digit or number&lt;/em&gt; on the line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use these keystrokes in VISUAL mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;g CTRL+a&lt;/code&gt; - Same as &lt;code&gt;CTRL+a&lt;/code&gt; unless you have several lines selected. In that case, the first number of each line will be &lt;em&gt;incremented sequentially&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g CTRL+x&lt;/code&gt; - Same as &lt;code&gt;CTRL+x&lt;/code&gt; unless you have several lines selected. In that case, the first number of each line will be &lt;em&gt;decremented sequentially&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate a bit better the last two keystrokes, let's say that you have this amazing content in your beloved Vim:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take some red flowers.&lt;/li&gt;
&lt;li&gt;Add some eggs.&lt;/li&gt;
&lt;li&gt;Forget about it and go back to your computer.
`&lt;code&gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you select in VISUAL mode the last two lines and hit &lt;code&gt;g CTRL+a&lt;/code&gt;, you'll get:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take some red flowers.&lt;/li&gt;
&lt;li&gt;Add some eggs.&lt;/li&gt;
&lt;li&gt;Forget about it and go back to your computer.
`&lt;code&gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also prefix a count to the command to add a precise amount. For example, &lt;code&gt;12 CTRL+a&lt;/code&gt; will add 12 to the first number of the current line.&lt;/p&gt;

&lt;p&gt;An important note: these keystrokes can also work on unsigned binary, octal, and hexadecimal numbers, as well as &lt;em&gt;alphabetical characters&lt;/em&gt;. Their behaviors depend on the value of the option &lt;code&gt;nrformats&lt;/code&gt;. For these keystrokes to behave as described in this article, you shouldn't have &lt;code&gt;alpha&lt;/code&gt; as part of the value of &lt;code&gt;nrformats&lt;/code&gt;, or you'll increment (or decrement) the first &lt;em&gt;alphabetical character&lt;/em&gt; of the line.&lt;/p&gt;

&lt;p&gt;Personally, I think it's better to exclude alphabetical characters, but in any case, I would recommend you to read Vim's help to learn more about that. As always.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help CTRL-A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help CTRL-X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help nrformats&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sorting-text"&gt;
  &lt;/a&gt;
  Sorting Text
&lt;/h2&gt;

&lt;p&gt;What about a little dessert? A nice command to sort text directly in Vim, perhaps? Here are the commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:sort&lt;/code&gt; or &lt;code&gt;:sor&lt;/code&gt; - Sort lines depending on a range. If no range is given, all lines are sorted.&lt;br&gt;
&lt;code&gt;:sort!&lt;/code&gt; or &lt;code&gt;:sor!&lt;/code&gt; - Reverse the order.&lt;/p&gt;

&lt;p&gt;You can add some options to this command. Here are the most useful ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;i&lt;/code&gt; - Ignore Case.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;n&lt;/code&gt; - Sort depending on the first decimal on the line.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f&lt;/code&gt; - Sort depending on the first float on the line.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/pattern/&lt;/code&gt; - Sort depending on what comes after the match.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;r&lt;/code&gt; - Combined with &lt;code&gt;/pattern/&lt;/code&gt;, the sort depending on the matching pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you have a CSV (with comma &lt;code&gt;,&lt;/code&gt; as separator) and you want to sort every line depending on the second column, you can run something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:sort /[^,]*,/&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;How about sorting the following list depending on the numbers of each line?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
Take some red flowers (1).&lt;br&gt;
Forget about it and go back to your computer (3).&lt;br&gt;
Add some eggs (2).&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;:sort n&lt;/code&gt; will have the following result:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
Take some red flowers (1).&lt;br&gt;
Add some eggs (2).&lt;br&gt;
Forget about it and go back to your computer (3).&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As always, there are many subtleties involved here. If you want to dig deeper, you know what you should do: fire up this Vim's help and enjoy the depth of its infinity!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help sort&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-a-vim-master-now"&gt;
  &lt;/a&gt;
  Are You a Vim Master Now?
&lt;/h2&gt;

&lt;p&gt;We can now make two assumptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compared to your old self, you might be more of a master than before.&lt;/li&gt;
&lt;li&gt;Compared to many, you still have a long road ahead of practice and learning. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But here's the most important: you shouldn't care about the second point. Always compare yourself to your past self, not to the others. Continue to walk on your own road, and you'll get your enlightenment. You'll then build your own Mouseless Development environment, you'll move to a comfy cave in the Himalaya, alone, living a life of vow, giving your whole soul to the study of the Almighty Vim.&lt;/p&gt;

&lt;p&gt;What did we learn in this article?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The letter "g" in Vim is a bit like a magic wand: 

&lt;ul&gt;
&lt;li&gt;There are many useful keystrokes which begin with "g".&lt;/li&gt;
&lt;li&gt;The flag &lt;code&gt;g&lt;/code&gt; is often used with the substitute command.&lt;/li&gt;
&lt;li&gt;The global command &lt;code&gt;:g&lt;/code&gt; is really powerful to apply a command to some precise content.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ranges allow you to execute many commands on a bunch of contiguous lines.&lt;/li&gt;
&lt;li&gt;The quickfix list is a global list of positions in different files. You can apply any command to them with &lt;code&gt;:cdo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can see the entries of a quickfix list using the quickfix window.&lt;/li&gt;
&lt;li&gt;Location lists are similar to quickfix lists, except that you can have one location list (and one location window) per window open.&lt;/li&gt;
&lt;li&gt;You can use the substitute command &lt;code&gt;:s&lt;/code&gt; to replace a pattern (regex) with a replacement. Prefer &lt;code&gt;:sm&lt;/code&gt; if you want to use a regex or &lt;code&gt;:sno&lt;/code&gt; if you don't.&lt;/li&gt;
&lt;li&gt;You can use marks to add some surgical precision in what you want to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To reward your tenacity and resilience for reading the whole article, I've a last tip for you: &lt;code&gt;:help ex-cmd-index&lt;/code&gt; will list all the commands available in Vim.&lt;/p&gt;

&lt;p&gt;Vim is easy to learn but hard to master: that's great, because we never stop improving!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-sources"&gt;
  &lt;/a&gt;
  Related Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.hillelwayne.com/post/intermediate-vim/"&gt;At least one Vim trick you might not know&lt;/a&gt; - Hillel Wayne&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hillelwayne.com/vim-macro-trickz/"&gt;Vim Macro Trickz&lt;/a&gt; - Hillel Wayne&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/vim-search-find-replace/"&gt;Vim Search, Find and Replace: a Detailed Guide&lt;/a&gt; - Your obedient servant&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#becoming-mouseless"&gt;
  &lt;/a&gt;
  Becoming Mouseless
&lt;/h2&gt;

&lt;p&gt;Do you want to build a &lt;a href="https://themouseless.dev"&gt;Mouseless Development Environment&lt;/a&gt; where the Linux shell and Vim have a central role?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themouseless.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkZumQAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themouseless.dev/images/small_cover.webp" alt="building your mouseless development environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switching between the keyboard and the mouse costs cognitive energy. This book will guide you step by step to set up a Linux-based development environment that keeps your hands on your keyboard.&lt;/p&gt;

&lt;p&gt;Take the brain power you've been using to juggle input devices and focus it where it belongs: on what you create.&lt;/p&gt;




</description>
      <category>vim</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Let's Build a Jamstack App Together!</title>
      <author>Stephanie Eckles</author>
      <pubDate>Tue, 01 Jun 2021 13:07:10 +0000</pubDate>
      <link>https://dev.to/5t3ph/let-s-build-a-jamstack-app-together-5hkp</link>
      <guid>https://dev.to/5t3ph/let-s-build-a-jamstack-app-together-5hkp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitch.tv/5t3phDev"&gt;Join me on Twitch&lt;/a&gt;&lt;/strong&gt; as we build an RSS Reader using Eleventy and Modern CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We'll start from absolute zero and create project requirements, architect &lt;a href="https://11ty.rocks"&gt;the Eleventy (11ty) project&lt;/a&gt;, design in the browser using &lt;a href="https://moderncss.dev"&gt;modern CSS&lt;/a&gt;, and all the other bits required to get a project launched.&lt;/p&gt;

&lt;p&gt;Building an RSS feed reader will let us explore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up an 11ty static site project&lt;/li&gt;
&lt;li&gt;Creating data sources&lt;/li&gt;
&lt;li&gt;Using modern CSS to create a functional UI&lt;/li&gt;
&lt;li&gt;Possibly serverless functions (TBD pending "app" architecture)&lt;/li&gt;
&lt;li&gt;Other features as determined by the chat participants&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stream-schedule"&gt;
  &lt;/a&gt;
  Stream Schedule
&lt;/h2&gt;

&lt;p&gt;There will be two streams this week - &lt;a href="https://twitch.tv/5t3phDev"&gt;follow on Twitch for go-live notifications&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, June 1 - 1 PM CT - &lt;em&gt;&lt;a href="https://time.is/0100PM_1_June_2021_in_CT"&gt;check local time​&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Thursday, June 3 - 9 AM CT - &lt;em&gt;&lt;a href="https://time.is/0900AM_3_June_2021_in_CT"&gt;check local time​&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes I need to change stream times which I announce &lt;a href="https://twitter.com/5t3ph"&gt;over on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To find out about future streams, and keep updated on my &lt;a href="https://thinkdobecreate.com"&gt;many other projects&lt;/a&gt;, &lt;strong&gt;&lt;a href="https://moderncss.dev/newsletter"&gt;subscribe to my newsletter&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>eleventy</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Developing against the Cloud</title>
      <author>AJ Stuyvenberg</author>
      <pubDate>Tue, 01 Jun 2021 12:37:52 +0000</pubDate>
      <link>https://dev.to/astuyve/developing-against-the-cloud-55o4</link>
      <guid>https://dev.to/astuyve/developing-against-the-cloud-55o4</guid>
      <description>&lt;p&gt;In the days of the LAMP stack, local web development was straightforward. You'd have a copy of your code on your machine, and fire up a local server with something like &lt;code&gt;rails server&lt;/code&gt;. As complexity and codebases grew, we turned to Docker which promised to save us from configuration hell. The problem only compounded as the popularity of service-oriented architectures caused the number of services in an average backend to explode.&lt;/p&gt;

&lt;p&gt;In the world of serverless development, building serverless apps via local emulation suffers from several drawbacks. It's hard to locally mock a large number of disparate services, the services are gaining new features frequently, and offline emulation tools are often community maintained, meaning that new features lag their cloud counterparts until someone like yourself &lt;a href="https://github.com/mj1618/serverless-offline-sns/pull/56"&gt;adds them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The differences between a live AWS environment and a local emulators are many and stark. IAM policies can only be tested in the cloud. Timeouts and memory limits don't exist locally, neither do vCPUs or cold starts. Especially confounding are configuration failures which may cause a function to run without responding, or not to run at all!&lt;/p&gt;

&lt;p&gt;There are some great tools such as &lt;a href="https://github.com/dherault/serverless-offline"&gt;serverless offline&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-start-api.html"&gt;SAM local&lt;/a&gt;, and the &lt;a href="https://arc.codes/docs/en/guides/developer-experience/local-development"&gt;architect framework&lt;/a&gt;, but I propose that we consider a different way forward - a cloud development environment.&lt;/p&gt;

&lt;p&gt;Emulating the cloud on your laptop is fragile, prone to lacking features, and hard to keep orderly (especially for new developers). Instead of trying to constantly keep up with the army of engineers at AWS, let's see how we can use per-feature stacks, shared data access, and extremely quick deployments, to replace local emulation entirely.&lt;/p&gt;

&lt;p&gt;One of the aspects of serverless tech we love is that we pay per use, not based on number of servers, deployments, or tables. This means that we could have one stack which performs 10,000 requests per day, or 10 stacks which each perform 1,000 requests per day - and the final bill is the same. Coupled with a generous &lt;a href="https://aws.amazon.com/lambda/pricing/"&gt;free tier&lt;/a&gt;, it's almost a no-brainer to set up a different instance of your serverless app for every developer. I encourage taking this idea a step further, and actually creating a new stack for each feature you work on. I suggest one stack per branch as a good place to start!&lt;/p&gt;

&lt;p&gt;Creating a new stack with the serverless framework (and most others, but this article focuses on the serverless framework) is pretty easy. You can simply give it a new stage name, and run serverless deploy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sls deploy --stage my-new-feature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can test in a completely isolated stack, specific to our new feature.&lt;/p&gt;

&lt;p&gt;But this leads us to two problems facing cloud-local serverless development. Namely: sharing access to data stores, and painfully slow deployments.&lt;/p&gt;

&lt;p&gt;A new stack for each feature is great, but sometimes we want to &lt;em&gt;share&lt;/em&gt; resources between by long lived environments (dev, staging, integration, etc) and local environments. Usually we'd prefer run each feature stack against a shared database. This is especially true for single-table designed services, which might require multiple API calls just to set up. How might we share access to things like DynamoDB tables between stacks?&lt;/p&gt;

&lt;p&gt;We can accomplish this with a variable in our &lt;code&gt;serverless.yml&lt;/code&gt; template. Let's imagine that we have a stage, &lt;code&gt;dev&lt;/code&gt;, which contains a DynamoDB table which we'd like to use while we work on our feature branch, &lt;code&gt;my-new-feature&lt;/code&gt;. This solution assumes you're using separate AWS accounts for &lt;code&gt;prod&lt;/code&gt; and &lt;code&gt;dev&lt;/code&gt;, but will be deploying your feature stacks into your &lt;code&gt;dev&lt;/code&gt; account. If you've got a different setup this solution may still apply, but you might need to add more complex access control logic for cross-account resource access via IAM.&lt;/p&gt;

&lt;p&gt;Take a look at this block in the &lt;code&gt;custom&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// Create the boolean&lt;/span&gt;
&lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;dynamoTableMap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev-table&lt;/span&gt;
    &lt;span class="na"&gt;prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prod-table&lt;/span&gt;
    &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev-table // This will cause non dev or prod stages to use the dev table.&lt;/span&gt;
    &lt;span class="s"&gt;// You can add more stage exclusions/specifications here&lt;/span&gt;
  &lt;span class="na"&gt;dynamoTableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.dynamoTableMap.${opt:stage}, self.dynamoTableMap.other}&lt;/span&gt;

&lt;span class="s"&gt;// Permissions&lt;/span&gt;
&lt;span class="na"&gt;iamRoleStatements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
    &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:Query&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:Scan&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:GetItem&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:PutItem&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:UpdateItem&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:DeleteItem&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:BatchGetItem&lt;/span&gt;
    &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;arn:aws:dynamodb:*:*:table/${self:custom.dynamoTableName}'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;arn:aws:dynamodb:*:*:table/${self:custom.dynamoTableName}/index/*'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="s"&gt;// Define the resource. Not necessarily required if you provisioned this in a separate stack&lt;/span&gt;
&lt;span class="s"&gt;// But I left it here for completion&lt;/span&gt;
&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DynamoTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
      &lt;span class="na"&gt;DeletionPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Retain&lt;/span&gt;
      &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SkipRetained&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.dynamoTableName}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we've done here is specify a strict mapping of stage names to resources (in this case a DynamoDB table, but it can be any resource). Then we define a conditional that looks into the map with the stage name. If there's no match, we fall back to the &lt;em&gt;dev table&lt;/em&gt;. Now when you deploy a new feature-stack, it'll read from and write to the shared dev table.&lt;/p&gt;

&lt;p&gt;This isn't always what we'd want, as in some cases we may rely on DynamoDB streams to trigger our Lambda functions. In that case, we'd want to create a new table specific to our feature stack, and then load the necessary data.&lt;/p&gt;

&lt;p&gt;So we've solved the data sharing problem. But anyone who has ran &lt;code&gt;serverless deploy&lt;/code&gt; knows that Cloud Formation deployments can be slow, really slow. We're used to instant feedback, like you'd get from a local webserver. How can we get rapid deployments and quick feedback without long, several minute deployments?&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;serverless deploy function&lt;/code&gt;. This &lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/deploy-function/"&gt;command&lt;/a&gt; makes use of the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/API_UpdateFunctionCode.html"&gt;update function code&lt;/a&gt; API call to skip a full Cloud Formation deployment, and instead simply uploads a new zip file to Lambda. It's much quicker, and usually takes 3-5 seconds (depending on project size). If we modify AWS resources or function configurations, we'd will still need to perform a full &lt;code&gt;serverless deploy&lt;/code&gt;, but for the quick develop, iterate, deploy cycle that we're accustomed to, &lt;code&gt;serverless deploy function&lt;/code&gt; is a really great solution.&lt;/p&gt;

&lt;p&gt;Here's a demo, running with &lt;code&gt;time&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rCKNHWLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xov8to0yyordjnl3uzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rCKNHWLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xov8to0yyordjnl3uzf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(Gif &lt;a href="https://aaronstuyvenberg.com/cloud-local-development/"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There's one last piece we're missing from replicating the full offline experience - and that's streaming logs! With a local server, each request we make streams logs directly to our console.&lt;/p&gt;

&lt;p&gt;Lambda instead relies on CloudWatch for logs, and we could go to the AWS console and refresh the page until our latest request shows up. But it's much easier to just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serverless logs --function myFunctionName --stage my-new-feature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will use the AWS SDK to fetch the log stream data from CloudWatch and push it straight to our terminal. When I'm working in the develop, iterate, deploy cycle, I frequently have this pulled up in a terminal alongside my code, and then run &lt;code&gt;serverless deploy function&lt;/code&gt; as I go.&lt;/p&gt;

&lt;p&gt;Here's what it looks like, all together:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=cAxGBhdrgB8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCepXN7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62xdykkc3ehv61bsigdj.png" alt="Full workflow"&gt;&lt;/a&gt;&lt;br&gt;
Finally, when my feature is ready to be merged into Production, I can easily remove my feature stack and all the resources I provisioned with &lt;code&gt;serverless remove --stage my-new-feature&lt;/code&gt;. Because most serverless infrastructure is pay-per-use, it probably only cost me a few pennies (usually it's free), no matter how long I let the feature stack stay up!&lt;/p&gt;

&lt;p&gt;Adopting a fully cloud-based serverless development workflow can be a tricky mindset change at first. But with per-feature stacks, shared access to data, and super fast deployments + logs, we can get really close to the feel of a local workflow without the pain of emulating every possible cloud service.&lt;/p&gt;




&lt;p&gt;Thoughts? Leave a comment! If you liked this, you can find me on &lt;a href="https://twitter.com/astuyve"&gt;twitter&lt;/a&gt; and my &lt;a href="https://aaronstuyvenberg.com/"&gt;blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>cloud</category>
      <category>aws</category>
      <category>dynamodb</category>
    </item>
    <item>
      <title>✂ Save time and make fewer mistakes with Snippets</title>
      <author>Adam Coster</author>
      <pubDate>Tue, 01 Jun 2021 12:32:00 +0000</pubDate>
      <link>https://dev.to/adamcoster/save-time-and-make-fewer-mistakes-with-snippets-2dl2</link>
      <guid>https://dev.to/adamcoster/save-time-and-make-fewer-mistakes-with-snippets-2dl2</guid>
      <description>&lt;p&gt;Last week I was sitting down to write a custom JavaScript error and became immediately annoyed. I've had to do that just often enough that it felt like I was being a robot, but not so often that I could do it without looking back at references.&lt;/p&gt;

&lt;p&gt;I thought, "I guess this is what &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets"&gt;'snippets'&lt;/a&gt; are for, right? I should figure out how those work."&lt;/p&gt;

&lt;p&gt;After having done that... I'm now &lt;em&gt;even more annoyed&lt;/em&gt;. Because snippets are amazing, VSCode (and other editors) already have a ton of useful built-in ones, and I've been using VSCode for &lt;em&gt;years&lt;/em&gt; without even trying them out (despite &lt;em&gt;definitely&lt;/em&gt; knowing that they existed).&lt;/p&gt;

&lt;p&gt;Why hadn't I looked into them before!? Especially as a person who obsesses over automations and process improvement!&lt;/p&gt;

&lt;p&gt;In short, I misunderstood snippets. I just sorta assumed that snippets were a library of boilerplate code that you could search and then insert into your new code. &lt;em&gt;*Yawn*&lt;/em&gt;. That would mean having to search for the snippet I needed, then click around and edit the stuff that just inserted... How tedious! So I figured it was faster to write things from scratch.&lt;/p&gt;

&lt;p&gt;I had made that assumption and then didn't take the two minutes it would have taken to look them up. The first few sentences of VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets"&gt;snippet docs&lt;/a&gt; were all I would have needed to read.&lt;/p&gt;

&lt;p&gt;Whoops!&lt;/p&gt;

&lt;p&gt;It turns out that VSCode snippets have a spectacular feature that makes them so great, and that I simply didn't realize might exist: &lt;strong&gt;placeholders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can set up a snippet to have a bunch of placeholders, and then once you've plopped the snippet into your code you can hit &lt;code&gt;tab&lt;/code&gt; to bounce from one placeholder to the next.&lt;/p&gt;

&lt;p&gt;And! If two placeholders have the same name, &lt;em&gt;they get filled out at the same time&lt;/em&gt;! The snippet can also dictate where your cursor should end up after you've filled the placeholders! It can even put in clipboard or selected text!&lt;/p&gt;

&lt;p&gt;And! You can create per-language, per-project, and user-wide libraries! So you can sync your own favorite snippets to use everywhere you go, while also making sure that your project collaborators have access to whatever snippets everyone needs to make the work easier.&lt;/p&gt;

&lt;p&gt;So much &lt;strong&gt;power&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Now I'm finally using the built-ins (they're particularly nice for &lt;code&gt;for&lt;/code&gt; loops) and I've started to build my own little libraries.&lt;/p&gt;

&lt;p&gt;Here's that dang custom error code as a Typescript snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json-doc"&gt;&lt;code&gt;&lt;span class="c"&gt;/** @file MyCustom.code-snippets */&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Custom Error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// The prefix is the what gets used for&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// auto-complete, so when I type "error"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// in VSCode (in a Typescript file) one&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// of the auto-complete options is this very&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// snippet.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error-custom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// Each entry in the array is treated as a separate&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// line, and VSCode will use the correct newline&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// characters based on your system and VSCode settings.&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"export class ${1:name} extends Error {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// The use of the tab character tells VSCode how things&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// should be *relatively* indented, so that it can&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// correctly auto-indent based on the code location&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// you put the snippet into.&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;constructor(message:string) {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s2"&gt;super(message);"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// Here I'm referencing the first placeholder from&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// above, so that when I'm filling it out above it&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;// shows up down here as well!&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s2"&gt;this.name = '$1';"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s2"&gt;Error.captureStackTrace(this, this.constructor);"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"export function assert(claim:any, message = 'Assertion failed'): asserts claim {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;if(!claim){throw new $1(message);}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That delightful little snippet drops in a custom error class, plus an assertion to go along with it to throw that very same error. Here's an example of what it looks like fully-populated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyCustomError&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyCustomError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureStackTrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;claim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Assertion failed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;asserts&lt;/span&gt; &lt;span class="nx"&gt;claim&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;claim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyCustomError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's a Markdown snippet that converts some selected text into a link to its definition (this functionality is quite specific to a project I'm working on):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json-doc"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Add class to term reference"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"term"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"[${TM_SELECTED_TEXT}](#term:${TM_SELECTED_TEXT/(.*)/${1:/downcase}/})"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That snippet makes it so that if I select the word &lt;code&gt;Something&lt;/code&gt; and then start typing &lt;code&gt;term&lt;/code&gt;, I'll overwrite the original word and then see VSCode's auto-complete suggestions. When I choose the above snippet, VSCode &lt;em&gt;remembers&lt;/em&gt; that I had selected &lt;code&gt;Something&lt;/code&gt; before overwriting it with the snippet prefix, and so it inserts: &lt;code&gt;[Something](#term:something)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Neat!&lt;/p&gt;

&lt;p&gt;Now that I'm done kicking myself for all the wasted past efforts of &lt;em&gt;not&lt;/em&gt; using snippets, I'm extremely excited about building out my new snippet libraries and trying out those created by others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't be like me. Use snippets.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you've found any VSCode snippet libraries you really like, or have your own snippet you're particularly pumped about, please share!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was adapted from an issue of the &lt;a href="https://www.bscotch.net/post/devchat-19"&gt;DevChat&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
      <category>vscode</category>
    </item>
    <item>
      <title>🎯 JS Interview Checklist - Part 1 (Basics)</title>
      <author>Rajat Gupta</author>
      <pubDate>Tue, 01 Jun 2021 12:15:03 +0000</pubDate>
      <link>https://dev.to/rajatetc/js-interview-checklist-part-1-basics-10k6</link>
      <guid>https://dev.to/rajatetc/js-interview-checklist-part-1-basics-10k6</guid>
      <description>&lt;p&gt;Prepping for your next interview ❓ I have the perfect checklist for you. Go through this and you are ready to rock 💃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  📝Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of how the web works&lt;/li&gt;
&lt;li&gt;Familiar with HTML/CSS, JS (especially ES6+ syntax)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#array-methods"&gt;
  &lt;/a&gt;
  🧰 Array Methods
&lt;/h2&gt;

&lt;p&gt;Most commonly asked: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples-of-usage-solve-a-problem"&gt;
  &lt;/a&gt;
  ❓ Examples of usage, solve a problem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return the words with more than 6 letters&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['interview', 'javascript']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I recommend doing the exercise yourself first to test your knowledge.&lt;/p&gt;

&lt;p&gt;Comment your solutions⬇️&lt;/p&gt;

&lt;p&gt;Generally, a follow up to this: can you do it without the array method?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#difference-between-map-and-foreach"&gt;
  &lt;/a&gt;
  ❓ Difference between map and forEach
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;map&lt;/code&gt; returns a new Array, &lt;code&gt;forEach&lt;/code&gt; doesn't
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return a new array where even numbers are multiplied by 2 &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;consoleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// [1,  4, 3, 8, 5, 12, 7]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;consoleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;consoleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;consoleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;method chaining can be done in &lt;code&gt;map&lt;/code&gt; but not &lt;code&gt;forEach&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// we are converting the new array back to original&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;consoleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;consoleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt; don't mutate the original array&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#polyfill-of-map"&gt;
  &lt;/a&gt;
  ❓ Polyfill of map
&lt;/h3&gt;

&lt;p&gt;This is an advanced concept. We will cover this in Part-2&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#var-let-and-const"&gt;
  &lt;/a&gt;
  ✔️ var, let and const
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#difference-between-scope"&gt;
  &lt;/a&gt;
  ❓  Difference between, scope
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBI5i09M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621775840670/-wnr0JLxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBI5i09M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621775840670/-wnr0JLxh.png" alt="6-var-let-const-all-diff.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  ❓  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Syntax Error&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Syntax Error&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Good idea to know different types of error&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hoisting"&gt;
  &lt;/a&gt;
  🚩 Hoisting
&lt;/h2&gt;

&lt;p&gt;JavaScript's default behavior of moving declarations to the top.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; declarations are hoisted&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;var&lt;/code&gt; declaration is hoisted - not the value&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outputexplain-the-error"&gt;
  &lt;/a&gt;
  ❓  Output/Explain the error
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;consoleNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;consoleNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="c1"&gt;// Why? Also, why undefined &amp;amp; not error&lt;/span&gt;

&lt;span class="c1"&gt;// This is how runtime sees this&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-vs-"&gt;
  &lt;/a&gt;
  ✔️ == vs ===
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;==&lt;/code&gt; converts the operand to the same type and then compares them&lt;/p&gt;

&lt;p&gt;&lt;code&gt;===&lt;/code&gt; depicts strict equality check. It checks for same type and same content&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  ❓  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// why?&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Always a good practice to explain your answers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this"&gt;
  &lt;/a&gt;
  ✔️ this
&lt;/h2&gt;

&lt;p&gt;To explain it properly will require another article. Here, I just list some key things.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;object&lt;/code&gt; that the function belongs to, in simpler terms, points to the owner of the function call (left of the dot)&lt;/p&gt;

&lt;p&gt;Its value depends on how it is invoked.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-vs-explicit-binding"&gt;
  &lt;/a&gt;
  ❓  Implicit vs Explicit Binding
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Implicit binding&lt;/strong&gt; is when you invoke a function in an object using dot notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explicit binding&lt;/strong&gt; is when you force a function to use a certain object as its &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ways to do that:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qeLrybf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622489263380/UwpR9Rscv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qeLrybf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622489263380/UwpR9Rscv.png" alt="call-bind-apply.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  ❓  Output
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rajat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Delhi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;displayStay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stays in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayStay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// create an object yourData and try to use displayStay&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yourData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// answer&lt;/span&gt;
&lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayStay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yourData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an arrow function, it depends on the lexical scope, that is to say, the outer function where the arrow function is declared.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-and-defer"&gt;
  &lt;/a&gt;
  ✔️ Async and defer
&lt;/h2&gt;

&lt;p&gt;Async and defer are &lt;code&gt;boolean&lt;/code&gt; attributes which can be loaded along with the script tags. They are useful for loading external scripts into your web page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#difference-between"&gt;
  &lt;/a&gt;
  ❓ Difference between
&lt;/h3&gt;

&lt;p&gt;🏢 Asked by big corporations like Amazon, Walmart, and Flipkart&lt;/p&gt;

&lt;p&gt;Best explained through pictures:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXLZCFyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781371965/PciAdUTCL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXLZCFyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781371965/PciAdUTCL.png" alt="18-async-defer.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6W7Mq-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781403795/VgIYFtP5T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6W7Mq-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781403795/VgIYFtP5T.png" alt="19-async-defer.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hzMs2E_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781415787/mJEkxqe_i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzMs2E_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781415787/mJEkxqe_i.png" alt="20-async.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbtTRxo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781428927/2nUaI8fjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbtTRxo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621781428927/2nUaI8fjr.png" alt="21-defer.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there are multiple scripts which are dependant on each other, use &lt;code&gt;defer&lt;/code&gt;. Defer script are executed in the order which they are defined.&lt;/p&gt;

&lt;p&gt;If you want to load external script which is not dependant on execution of any other scripts, use &lt;code&gt;async&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Async attribute does not guarantee the order of execution of scripts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#local-and-session-storage"&gt;
  &lt;/a&gt;
  💾Local and session storage
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#difference-between"&gt;
  &lt;/a&gt;
  ❓ Difference between
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;localStorage:&lt;/strong&gt; Data persists even after closing your session&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sessionStorage:&lt;/strong&gt; Data is lost when your session is over, ie, on closing the browser on the tab&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// save&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// get saved data&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// remove saved data&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Same for sessionStorage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#timers-settimeout-setinterval-clearinterval"&gt;
  &lt;/a&gt;
  ⏱️ Timers - setTimeout, setInterval, clearInterval
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;setTimeout()&lt;/code&gt; method calls a function or evaluates an expression after a specified number of milliseconds.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setInterval()&lt;/code&gt; does the same for specified intervals.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;clearInterval()&lt;/code&gt; is used to stop the timer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  ❓  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lovely&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// output&lt;/span&gt;
  &lt;span class="nx"&gt;Hello&lt;/span&gt;
  &lt;span class="nx"&gt;reader&lt;/span&gt;
  &lt;span class="nx"&gt;lovely&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A slightly trickier one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// output&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Short explanation: when &lt;code&gt;setTimeout&lt;/code&gt; comes again into the picture, the entire loop has run and value of &lt;code&gt;i&lt;/code&gt; has become 6&lt;/p&gt;

&lt;p&gt;Now, let's say we want the outcome to be 1 2 3 4 5, what to do?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt; ➡️ &lt;code&gt;let&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Why this will work?&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; is globally scoped but &lt;code&gt;let&lt;/code&gt; is locally scoped so for &lt;code&gt;let&lt;/code&gt; a new &lt;code&gt;i&lt;/code&gt; is created for every iteration.&lt;/p&gt;

&lt;p&gt;If you had trouble solving these outputs - don't worry. Subscribe for Part-2 where we will cover the event loop and other advanced topics.&lt;/p&gt;

&lt;p&gt;Shoutout to 🗣️ &lt;a href="https://twitter.com/ch_akanksha"&gt;Akansha&lt;/a&gt; for an informative session @ &lt;a href="https://twitter.com/roc8HQ"&gt;roc8&lt;/a&gt; that enabled this blogpost. Check her &lt;a href="https://www.instagram.com/javascript_interviews"&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Share and comment if you found this helpful. &lt;/p&gt;

&lt;p&gt;PS I have some sick threads 🧵🔥 on &lt;a href="https://twitter.com/rajatetc/status/1394858829851025417"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to auto-generate Swagger/OpenAPI doc for your web services</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 01 Jun 2021 12:13:31 +0000</pubDate>
      <link>https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn</link>
      <guid>https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn</guid>
      <description>&lt;p&gt;Welcome back to my &lt;a href="https://www.railsconf.org/"&gt;RailsConf 2021&lt;/a&gt; presentation recap! Check out &lt;a href="https://appland.com/blog/2021/05/25/rails-conf-recap-pt1/"&gt;Part 1&lt;/a&gt; and &lt;a href="https://appland.com/blog/2021/05/27/rails-conf-recap-pt2/"&gt;Part 2&lt;/a&gt; in case you missed them last week. This post recaps the second demo I gave as part of my talk. Using rswag and the &lt;a href="https://appland.com/docs/reference/appmap-swagger-ruby.html"&gt;&lt;code&gt;appmap_swagger&lt;/code&gt; gem&lt;/a&gt;, I showed RailsConf attendees how to auto-generate Swagger files instead of manually writing them.&lt;/p&gt;

&lt;p&gt;The Swagger UI takes JSON or YAML files and generates an interactive catalog of your web services. The catalog contains routes, methods, status codes, parameters, request body, authentication methods and more. With Swagger, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See your whole web services catalog and actively interact with all of the API functions&lt;/li&gt;
&lt;li&gt;Debug your webservices in a very granular way&lt;/li&gt;
&lt;li&gt;Observe your web services test coverage visually&lt;/li&gt;
&lt;li&gt;Diff the web services changes by committing your Swagger YAML and comparing across versions using standard source diff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0OENi8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewtgih6zj9vw10ixnusy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0OENi8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewtgih6zj9vw10ixnusy.png" alt="How Swagger works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Writing Swagger files -- and keeping them accurate and up-to-date -- is a real challenge, so here are two ways of auto-generating these files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;With a gem called &lt;code&gt;rswag&lt;/code&gt;&lt;/strong&gt; Swagger can be auto-generated from test cases. Rswag ensures a valid Swagger file thanks to assertion checks performed by rswag, and it’s very customizable. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;With &lt;code&gt;appmap-swagger&lt;/code&gt;&lt;/strong&gt; Swagger can be auto-generated from AppMap files, which are recorded from test cases. appmap-swagger also ensures a valid Swagger file, but achieves more complete API coverage faster. You also don’t need to learn as much about the OpenAPI format to use appmap-swagger. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can watch this portion of my RailsConf talk in the video clip above. If you want to follow along in the code or look it up later, I’ve created &lt;a href="http://github.com/land-of-apps/sample_app_6th_ed/tree/swagger"&gt;a branch called &lt;code&gt;swagger&lt;/code&gt; within the Land of Apps fork of the Rails Sample App&lt;/a&gt;. Check it out, and let us know what you think in the &lt;a href="https://discord.com/invite/N9VUap6"&gt;AppMap Discord&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coming up next...&lt;/strong&gt; In the fourth and final installment of this blog series, I’m going to recap the remaining demo of my RailsConf talk: how to auto-document database schemas. &lt;/p&gt;

</description>
      <category>rails</category>
      <category>documentation</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Carousel slider tutorial with HTML, CSS and JavaScript</title>
      <author>Spyros Argalias</author>
      <pubDate>Tue, 01 Jun 2021 12:01:10 +0000</pubDate>
      <link>https://dev.to/sargalias/carousel-slider-tutorial-with-html-css-and-javascript-1024</link>
      <guid>https://dev.to/sargalias/carousel-slider-tutorial-with-html-css-and-javascript-1024</guid>
      <description>&lt;p&gt;In this post we'll look at how to make a simple carousel with HTML, CSS and JavaScript. We will use good code practices, keep accessibility in mind and also consider how we can test the carousel.&lt;/p&gt;

&lt;p&gt;The carousel will be a "moving carousel". Slides will move in from left to right, or right to left, with a transition. It won't be an in-place carousel where a slide fades out while another one fades-in.&lt;/p&gt;

&lt;p&gt;If you prefer a video version, here it is. It goes into much more detail than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QruodbmSq0A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-functionality"&gt;
  &lt;/a&gt;
  Basic functionality
&lt;/h2&gt;

&lt;p&gt;We'll start with the basic functionality. That's the basic HTML, CSS and JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;We'll keep the HTML fairly simple. We basically need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a container for the carousel&lt;/li&gt;
&lt;li&gt;the carousel controls&lt;/li&gt;
&lt;li&gt;the slides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We won't focus very much on the HTML head or anything other than the carousel. The rest is standard stuff.&lt;/p&gt;

&lt;p&gt;As for the actual carousel, here is some HTML we can use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Import font-awesome somewhere in the HTML --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w=="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./index.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel"&lt;/span&gt; &lt;span class="na"&gt;data-carousel&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-button carousel-button_previous"&lt;/span&gt;
        &lt;span class="na"&gt;data-carousel-button-previous&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-chevron-circle-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-button carousel-button_next"&lt;/span&gt;
        &lt;span class="na"&gt;data-carousel-button-next&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-chevron-circle-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slides"&lt;/span&gt; &lt;span class="na"&gt;data-carousel-slides-container&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Anything can be here. Each slide can have any content --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Slide 1 heading&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Slide 1 content
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Anything can be here. Each slide can have any content --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Slide 2 heading&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Slide 2 content
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the head, we are linking font awesome and also our custom styles CSS file.&lt;/p&gt;

&lt;p&gt;In the body:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we have an outer &lt;code&gt;div&lt;/code&gt; for the entire carousel.&lt;/li&gt;
&lt;li&gt;we have two buttons, one for "previous slide" and one for "next slide". The buttons use font-awesome icons.&lt;/li&gt;
&lt;li&gt;we have a &lt;code&gt;div&lt;/code&gt; for the slides. Inside that, we have a &lt;code&gt;div&lt;/code&gt; for each slide. The content inside each slide is irrelevant to us, it can be anything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As for the &lt;code&gt;data-&lt;/code&gt; attributes, those are what we'll use as selectors in JavaScript.&lt;/p&gt;

&lt;p&gt;I personally prefer using &lt;code&gt;data-&lt;/code&gt; attributes for JavaScript because I want to separate concerns. For example, classes are standard to use for CSS. When someone tries to change the styling of the carousel in the future, they may replace the class name for a more descriptive one. They may also change some CSS modifier classes or something. I don't want them to be paranoid that if they change the CSS they may break the JavaScript, or the automated tests, or the asynchronous content insertions, or anything else. I want them to feel safe when working with the CSS.&lt;/p&gt;

&lt;p&gt;This means, that I do not use classes to select elements with JavaScript.&lt;/p&gt;

&lt;p&gt;An exception to this is if you use classes with a prefix such as &lt;code&gt;js-&lt;/code&gt;. E.g. &lt;code&gt;&amp;lt;div class="js-carousel"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, which are exclusively for JavaScript use. That achieves the same result.&lt;/p&gt;

&lt;p&gt;But my preference is to use &lt;code&gt;data-&lt;/code&gt; attributes. That's what &lt;code&gt;data-carousel&lt;/code&gt; and the others are for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;Our CSS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;is going to have the basic styling for our carousel&lt;/li&gt;
&lt;li&gt;is going to have the mechanism for changing the slides&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The way our carousel will work is by having all slides horizontally next to each other. However, only one slide will show at a time. That's because every slide, except the one that's visible, will be overflowing outside of the top-level carousel &lt;code&gt;div&lt;/code&gt;. That &lt;code&gt;div&lt;/code&gt; will have &lt;code&gt;overflow: hidden&lt;/code&gt;, so nothing that's overflowing will show.&lt;/p&gt;

&lt;p&gt;We'll decide which slide is currently showing with the line &lt;code&gt;transform: translateX(/* something */)&lt;/code&gt;. That way, we'll translate the &lt;code&gt;slides&lt;/code&gt; div, so that only the correct slide is visible.&lt;/p&gt;

&lt;p&gt;Here is the CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.carousel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--current-slide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* we set position relative so absolute position works properly for the buttons */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.carousel-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* vertically centering the buttons */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* basic styling */&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="m"&gt;0.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.carousel-button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.carousel-button_next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* The "next slide button" will be at the right */&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.slides&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--current-slide&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.slide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.carousel-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this CSS, every &lt;code&gt;div&lt;/code&gt; has its default width of 100%. This means that the carousel will take the full width of its parent container. Every slide will also take up the full width of the carousel.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#controls"&gt;
  &lt;/a&gt;
  Controls
&lt;/h4&gt;

&lt;p&gt;In the &lt;code&gt;carousel-button&lt;/code&gt; class, we provide some simple styling for the buttons. We're using font-awesome icons, so we give them a font-size so they're large and visible. We also remove some of the default button styling (things like borders and background color).&lt;/p&gt;

&lt;p&gt;Also, we position the buttons in the middle (vertically) of the entire carousel. We do this by using the &lt;code&gt;position: absolute; top: 50%; transform: translateY(-50%);&lt;/code&gt; trick.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-slides"&gt;
  &lt;/a&gt;
  Changing slides
&lt;/h4&gt;

&lt;p&gt;The trick for how the carousel actually changes slides is the CSS in &lt;code&gt;.slides&lt;/code&gt; and &lt;code&gt;.slide&lt;/code&gt;. In &lt;code&gt;.slide&lt;/code&gt;, we make each slide have 100% of the width of the carousel. This is done with the &lt;code&gt;flex&lt;/code&gt; property. In other words, one slide will take up the entire width of the carousel.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;.slides&lt;/code&gt; is &lt;code&gt;display: flex;&lt;/code&gt;, all of the slides will be horizontally next to each other. This means that one slide will take up the entire width of the carousel and all other slides will overflow horizontally next to it. The carousel div has &lt;code&gt;overflow: hidden;&lt;/code&gt;, so none of the overflowing slides will show.&lt;/p&gt;

&lt;p&gt;At some point, using JavaScript, we'll move the &lt;code&gt;.slides&lt;/code&gt; div to the right or left. This means that the slides will move, so a different slide will be visible inside the carousel.&lt;/p&gt;

&lt;p&gt;The declaration &lt;code&gt;transform: translateX(calc(-100% * var(--current-slide)));&lt;/code&gt; is our movement mechanism. Here we're saying to move the slides container -100% (the full-width of the carousel, or the full width of a slide) to the left (the negative sign means to the left), as many times as the slide index we're on.&lt;/p&gt;

&lt;p&gt;For example, if we're on slide index 0 (first slide), &lt;code&gt;-100% * 0&lt;/code&gt; = 0, so we don't translate at all and the first slide is visible.&lt;/p&gt;

&lt;p&gt;If we're on slide 1, then &lt;code&gt;-100% * 1&lt;/code&gt; = -100%, so we translate 100% (one slide width) to the left. This means that we're displaying slide index 1 (the second slide).&lt;/p&gt;

&lt;p&gt;We'll set the &lt;code&gt;--current-slide&lt;/code&gt; property using JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;Our JavaScript needs to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;handle events for the two buttons (switch to previous slide and next slide)&lt;/li&gt;
&lt;li&gt;work independently for any number of different carousels on the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setUpCarousel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numSlides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;changeSlide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handlePrevious&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numSlides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;changeSlide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;changeSlide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--current-slide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slideNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// get elements&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonPrevious&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel-button-previous]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel-button-next]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slidesContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel-slides-container]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// carousel state we need to remember&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numSlides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slidesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// set up events&lt;/span&gt;
  &lt;span class="nx"&gt;buttonPrevious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handlePrevious&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;buttonNext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleNext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carousels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;carousels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setUpCarousel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code may be appear a bit confusing because of the nested functions. If you're not used to this syntax, then here is a class alternative for the &lt;code&gt;setUpCarousel&lt;/code&gt; function which does exactly the same thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Carousel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// find elements&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonPrevious&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel-button-previous]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel-button-next]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slidesContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel-slides-container]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// state&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numSlides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slidesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// add events&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonPrevious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handlePrevious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonNext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleNext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numSlides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--current-slide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handlePrevious&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numSlides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--current-slide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSlide&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carousels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-carousel]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;carousels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Carousel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we're holding some state, the &lt;code&gt;currentSlide&lt;/code&gt; and the &lt;code&gt;numSlides&lt;/code&gt; variables. We're also holding references to some HTML elements, such as the carousel element, because we'll need them when changing slides. Finally, we add event listeners to the buttons.&lt;/p&gt;

&lt;p&gt;When the user clicks on the "next slide" button, we run the &lt;code&gt;handleNext&lt;/code&gt; function. The call to &lt;code&gt;modulo(currentSlide, numSlides)&lt;/code&gt; sets &lt;code&gt;currentSlide&lt;/code&gt; to the correct index for the next slide. So, if there are 5 slides, and we're on slide index 0, it will set &lt;code&gt;currentSlide&lt;/code&gt; to 1. But, if we're already on slide index 4 (the fifth and final slide), then the next slide index is 0, not 5. The modulo function takes care of the wrapping back to 0 for us.&lt;/p&gt;

&lt;p&gt;Really, we could have used the &lt;code&gt;%&lt;/code&gt; (modulo) operator for this. The reason why we have the &lt;code&gt;modulo&lt;/code&gt; function is because &lt;code&gt;%&lt;/code&gt; doesn't play well with negative numbers. &lt;code&gt;-1 % 5&lt;/code&gt; evaluates to &lt;code&gt;-1&lt;/code&gt;, rather than &lt;code&gt;4&lt;/code&gt; (the index of the slide we would actually want). We created our own &lt;code&gt;modulo&lt;/code&gt; function to handle that case.&lt;/p&gt;

&lt;p&gt;Finally, we set the CSS property &lt;code&gt;--current-slide&lt;/code&gt; to the correct number. Then, the CSS changes the visible slide by translating the slides &lt;code&gt;div&lt;/code&gt; appropriately.&lt;/p&gt;

&lt;p&gt;The independence of different carousels on the page happens because we use &lt;code&gt;querySelector&lt;/code&gt; on the parent carousel element, not on the &lt;code&gt;document&lt;/code&gt;. This means that, for example, &lt;code&gt;carouselElement1.querySelector([data-carousel-button-next])&lt;/code&gt;, will only get the button inside that carousel element. Whereas &lt;code&gt;document.querySelector('[data-carousel-button-next]')&lt;/code&gt; would get the first matching element it finds on the page, rather than the target carousel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;At the moment, this carousel is very unfriendly to screen reader users. You'll need to actually use a screen reader and listen to it to hear it for yourself (or watch the accessibility section of the embedded video), but basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it doesn't mention anything about the content being a carousel&lt;/li&gt;
&lt;li&gt;for the buttons, it just says "button" and nothing else (because the buttons don't have text or a label)&lt;/li&gt;
&lt;li&gt;on "auto read", it reads through all of the content of every slide, as though it was a normal web page full of text (because we're not telling it to only read the visible slide)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To fix those issues, we need to go to the &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/"&gt;WAI-ARIA authoring practices document&lt;/a&gt;. There is a section for carousels. We just go to it and follow the instructions. It's actually not too difficult. It has step-by-step instructions for us.&lt;/p&gt;

&lt;p&gt;In the end, our HTML looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel"&lt;/span&gt;
  &lt;span class="na"&gt;aria-role=&lt;/span&gt;&lt;span class="s"&gt;"group"&lt;/span&gt;
  &lt;span class="na"&gt;aria-roledescription=&lt;/span&gt;&lt;span class="s"&gt;"carousel"&lt;/span&gt;
  &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Student testimonials"&lt;/span&gt;
  &lt;span class="na"&gt;data-carousel&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-button carousel-button_previous"&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Previous slide"&lt;/span&gt;
      &lt;span class="na"&gt;data-carousel-button-previous&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-chevron-circle-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-button carousel-button_next"&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Next slide"&lt;/span&gt;
      &lt;span class="na"&gt;data-carousel-button-next&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-chevron-circle-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slides"&lt;/span&gt;
    &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"polite"&lt;/span&gt;
    &lt;span class="na"&gt;data-carousel-slides-container&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slide"&lt;/span&gt;
      &lt;span class="na"&gt;aria-role=&lt;/span&gt;&lt;span class="s"&gt;"group"&lt;/span&gt;
      &lt;span class="na"&gt;aria-roledescription=&lt;/span&gt;&lt;span class="s"&gt;"slide"&lt;/span&gt;
      &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
      &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bob&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slide"&lt;/span&gt;
      &lt;span class="na"&gt;aria-role=&lt;/span&gt;&lt;span class="s"&gt;"group"&lt;/span&gt;
      &lt;span class="na"&gt;aria-roledescription=&lt;/span&gt;&lt;span class="s"&gt;"slide"&lt;/span&gt;
      &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
      &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"alice"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Alice&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick summary of what we did is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we added an &lt;code&gt;aria-role&lt;/code&gt;, &lt;code&gt;aria-roledescription&lt;/code&gt; and &lt;code&gt;aria-label&lt;/code&gt; to the carousel &lt;code&gt;div&lt;/code&gt;. Now, the screen reader says something like "Student testimonials carousel", immediately indicating that this is a carousel and what content it represents.&lt;/li&gt;
&lt;li&gt;for each button, we added an &lt;code&gt;aria-label&lt;/code&gt;. Now the screen reader says something like "button previous slide", instead of just "button". (An alternative technique here would be to add "screen-reader only text". This is text that exists in the HTML but is hidden visually using particular methods.)&lt;/li&gt;
&lt;li&gt;we added an &lt;code&gt;aria-role&lt;/code&gt; and &lt;code&gt;aria-roledescription&lt;/code&gt; to each slide. Now the screen reader knows when it's entering a slide or leaving a slide and it will notify the user as necessary.&lt;/li&gt;
&lt;li&gt;we also added a label to each slide using &lt;code&gt;aria-labelledby&lt;/code&gt;. This is the same as &lt;code&gt;aria-label&lt;/code&gt; except that you point it to some text that already exists on the page, using an HTML ID. In this case, since our label already exists on the page (the heading for each slide), we used &lt;code&gt;aria-labelledby&lt;/code&gt; instead of &lt;code&gt;aria-label&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;we added &lt;code&gt;aria-hidden="true"&lt;/code&gt; to the hidden slides. Now the screen reader won't read them.&lt;/li&gt;
&lt;li&gt;we added an &lt;code&gt;aria-live&lt;/code&gt; region. Now the screen reader will re-read the content of the carousel whenever there are changes (when the user changes the slide).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some other aria attributes that would be useful, but I'm ignoring them for now because they're not mentioned in the carousel part of the WAI-ARIA authoring practices. One example is &lt;a href="https://tink.uk/using-the-aria-controls-attribute/"&gt;aria-controls&lt;/a&gt;. If you want to learn more about these, it might be worth looking at the &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/"&gt;WAI-ARIA authoring practices&lt;/a&gt; in your own time. If you want to learn more about accessibility in general, I've written a learning guide in &lt;a href="https://programmingduck.com/articles/accessibility"&gt;Web accessibility - Everything you need to know&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our JavaScript needs some updates as well. Specifically, when we change slides, we need to change the &lt;code&gt;aria-hidden&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; for the new active slide. We also need to hide the previous slide that we're no longer looking at.&lt;/p&gt;

&lt;p&gt;Here is some example code we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;changeSlide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// change current slide visually&lt;/span&gt;
  &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--current-slide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slideNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// handle screen reader accessibility&lt;/span&gt;
  &lt;span class="c1"&gt;// here we're getting the elements for the previous slide, current slide and next slide&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previousSlideNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numSlides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextSlideNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numSlides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previousSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slidesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;previousSlideNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentSlideElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slidesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;slideNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slidesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nextSlideNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// here, we're hiding the previous and next slides and unhiding the current slide&lt;/span&gt;
  &lt;span class="nx"&gt;previousSlide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;nextSlide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;currentSlideElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;What ways are there to test something like this?&lt;/p&gt;

&lt;p&gt;In short, I would write end-to-end tests for it. I would hesitate to write unit tests for it.&lt;/p&gt;

&lt;p&gt;Here's why.&lt;/p&gt;

&lt;p&gt;An end-to-end test shows you that the entire thing works correctly.&lt;/p&gt;

&lt;p&gt;Depending on your test framework, you could do things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check that only a particular &lt;code&gt;div&lt;/code&gt; (slide) is visible on the page, and the others aren't&lt;/li&gt;
&lt;li&gt;check that the correct &lt;code&gt;div&lt;/code&gt; (slide) is visible after pressing the next / previous slide button&lt;/li&gt;
&lt;li&gt;check that the transition for changing slides works correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But if you unit test, you can only check that your JavaScript works correctly.&lt;/p&gt;

&lt;p&gt;You could do a test where you set up some HTML, then run your JavaScript and finally check that the resulting HTML is what you expect.&lt;/p&gt;

&lt;p&gt;Or you could do something like spy on your JavaScript code, run your JavaScript and ensure your spies were called.&lt;/p&gt;

&lt;p&gt;With the first unit test example (where you check the final HTML), the problem is that, while your tests may be passing, your carousel may not be working. For example, someone may have changed how the CSS works. They may have renamed the property &lt;code&gt;--current-slide&lt;/code&gt; to &lt;code&gt;--index&lt;/code&gt; or whatever else. Maybe they changed the entire CSS mechanism for changing the slides (for example, to improve performance).&lt;/p&gt;

&lt;p&gt;In this case, your JavaScript will be executing without errors and the tests will be passing, but the carousel won't be working.&lt;/p&gt;

&lt;p&gt;The tests won't provide confidence that your code works.&lt;/p&gt;

&lt;p&gt;The only thing they'll do is freeze your JavaScript implementation. This is the scenario where you've already checked the carousel yourself, manually, in the browser. You think "I can see that it's working, let me write some unit tests for it that check that the JavaScript is doing X". What this does, is it prevents anyone from accidentally changing the JavaScript in the future. If they do so, the tests will fail.&lt;/p&gt;

&lt;p&gt;But, it also makes intentional changes more difficult. Now, if you want to change the implementation in the future, you need to change your CSS, JavaScript and your 10 tests. This is one of the reasons why people dislike unit tests. They make changes to the implementation more difficult (at least with unit tests like these).&lt;/p&gt;

&lt;p&gt;So, for these reasons, I would personally recommend writing end-to-end tests instead. Now, if you really want to prevent accidental changes in the JavaScript, that's fine. You need to do what you need to do. It's up to you to decide if the peace of mind is worth the downsides and the time it takes to write those tests.&lt;/p&gt;

&lt;p&gt;As for the other scenario of unit testing, where you check that your spies were called, I just don't see a benefit to that. With those tests, you're not even testing that your JavaScript is doing what you think. You could break the JavaScript implementation in the future and your tests would still pass, as long as you're calling the same functions.&lt;/p&gt;

&lt;p&gt;But, those are just my thoughts on the matter. I'm open to differences in opinion. Please leave a comment below if you think I'm missing something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;So that's it. I hope that you found this article useful.&lt;/p&gt;

&lt;p&gt;If you want a fuller view of the code, &lt;a href="https://github.com/Programming-Duck/carousel"&gt;here is the code repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that this is not meant to be production-ready. The code can be cleaned up more. It can probably be made more appropriate to what you need to use. Etc.&lt;/p&gt;

&lt;p&gt;This is just a little tutorial to show you the general idea on how to make a simple carousel.&lt;/p&gt;

&lt;p&gt;If you have any feedback, anything that was missed or could have been done better, or anything else, please leave a comment below.&lt;/p&gt;

&lt;p&gt;Alright, thanks very much and see you next time.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>a11y</category>
    </item>
    <item>
      <title>How to Build a Simple Reviews and Rating System with Livewire and Jetstream?</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 01 Jun 2021 11:54:46 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-build-a-simple-reviews-and-rating-system-with-livewire-and-jetstream-36cj</link>
      <guid>https://dev.to/bobbyiliev/how-to-build-a-simple-reviews-and-rating-system-with-livewire-and-jetstream-36cj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Laravel Livewire, created by &lt;a href="https://github.com/calebporzio"&gt;Caleb Porzio&lt;/a&gt;, is a full-stack framework that allows you to add reactivity to your Laravel applications.&lt;/p&gt;

&lt;p&gt;If you are just getting started with Laravel Livewire, make sure to check out this &lt;a href="https://devdojo.com/tnylea/what-is-livewire"&gt;introduction to Livewire&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;p&gt;Laravel Jetstream is a new application scaffolding for Laravel. Laravel Jetstream replaces the legacy Laravel authentication UI available for previous Laravel versions. &lt;/p&gt;

&lt;p&gt;In this tutorial, I will show you how to build simple reviews and rating system for your Laravel Jetstream project where registered users will be able to rate and review a specific product 1 time only! Quick demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-D5WMON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/ZdVRhgS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-D5WMON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/ZdVRhgS.gif" alt="Simple Laravel Livewire Review System"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;To get started, all that you need is a Laravel application.&lt;/p&gt;

&lt;p&gt;If you don't have one, you can follow the steps here on &lt;a href="https://devdojo.com/bobbyiliev/how-to-install-laravel-on-digitalocean-with-1-click"&gt;how to install Laravel on DigitalOcean with 1-Click&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are new to DigitalOcean, you can use my referral link to get a free $100 credit so that you can spin up your own servers for free:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://m.do.co/c/2a9bba940f39"&gt;Free $100 DigitalOcean credit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we would want to limit the access to the reviews and rating functionality to registered users only, you would need to have a user authentication system in place. In this tutorial, we will use Laravel Jetstream, but it will work with Laravel UI and Laravel Breeze. &lt;/p&gt;

&lt;p&gt;For more information on how to get started, make sure to check out this tutorial here: &lt;a href="https://devdojo.com/bobbyiliev/what-is-laravel-jetstream-and-how-to-get-started"&gt;What is Laravel Jetstream and how to get started?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have your Laravel Jetstream project ready, let's go ahead and prepare our database migrations!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-product-model-optional"&gt;
  &lt;/a&gt;
  Creating a Product Model (Optional)
&lt;/h1&gt;

&lt;p&gt;As an example, let's create a Products table and a model which we will use to add reviews and ratings to.&lt;/p&gt;

&lt;p&gt;If you already have a model that you would like to use, you don't have to follow the steps here.&lt;/p&gt;

&lt;p&gt;To do so, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:model Product -m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Model created successfully.
Created Migration: 2021_01_19_082007_create_products_table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To keep things simple, let's limit the product table to only a title and a description. So with your favorite text editor open the migration file and update the &lt;code&gt;Schema::create&lt;/code&gt; method to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        Schema::create('products', function (Blueprint $table) {
            $table-&amp;gt;id();
            $table-&amp;gt;timestamps();
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's create a DB seeder to add a few products in our database, which we will later on reviews/rate and comment to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:seeder ProductSeeder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's create a dummy product by updating your &lt;code&gt;ProductSeeder.php&lt;/code&gt; file to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class ProductSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('products')-&amp;gt;insert([
            'title' =&amp;gt; 'My Product title',
            'description' =&amp;gt; 'An awesome product',
        ]);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, enable your seeder by adding the following in the &lt;code&gt;database/seeders/DatabaseSeeder.php&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function run()
    {
        $this-&amp;gt;call([
            ProductSeeder::class,
        ]);

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, seed the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will basically create a sample product that we can work with.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-the-rating-model"&gt;
  &lt;/a&gt;
  Creating the Rating Model
&lt;/h1&gt;

&lt;p&gt;Once you have your product model ready, let's go ahead and create our Rating model and table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:model Rating  -m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update your your Rating to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;


class Rating extends Model
{
    /**
     * Attributes to guard against mass-assignment.
     *
     * @var array
     */
    protected $guarded = [];

    protected $fillable = [
        'comment'
    ];

    public function user()
    {
        return $this-&amp;gt;belongsTo('App\Models\User');
    }

    public function product()
    {
        return $this-&amp;gt;belongsTo('App\Models\Product');
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are basically adding 2 relations so that a specific rating/reviews would belong to a user and a product.&lt;/p&gt;

&lt;p&gt;After that, make sure to add the following method to your Product model too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function ratings()
    {
        return $this-&amp;gt;hasMany('App\Models\Rating');
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way, one product could have many ratings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#preparing-the-ratings-table"&gt;
  &lt;/a&gt;
  Preparing the Ratings table
&lt;/h1&gt;

&lt;p&gt;Once you are ready with your models, let's go ahead and add the following to your ratings migration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function up()
    {
        Schema::create('ratings', function (Blueprint $table) {
            $table-&amp;gt;id();
            $table-&amp;gt;integer('user_id');
            $table-&amp;gt;integer('product_id');
            $table-&amp;gt;integer('rating');
            $table-&amp;gt;text('comment');
            $table-&amp;gt;integer('status');
            $table-&amp;gt;timestamps();
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will have the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;user_id&lt;/code&gt;: where we will store the User who posted the reviews/rating&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;product_id&lt;/code&gt;: where we will store the Product that the reviews/rating belongs to&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rating&lt;/code&gt;: an integer value where we will store the rating from 1 to 5&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;comment&lt;/code&gt;: will store the content of the comment of the reviews&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt;: here, if you decide, you could have the ratings and comments reviewed before publishing them to avoid spam and fake reviews.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in place, run the migrations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's add the route and the controller for the product view. You can skip this step in case that you already have a route and a view.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#preparing-the-product-controller-and-route-and-view-optional"&gt;
  &lt;/a&gt;
  Preparing the Product Controller and Route and View (Optional)
&lt;/h1&gt;

&lt;p&gt;To keep things simple, let's create only a page which will show a specific product by ID.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if you already have a model that you are working with, you can skip this step, it is only for demo purposes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, create a controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller ProductsController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the controller add a method that takes the product id as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function show($id)
{
    $product = \App\Models\Product::findOrFail($id);
    return view('product', compact('product'));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create the product view at &lt;code&gt;resources/views/product.blade.php&lt;/code&gt; and add the following sample content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;

    &amp;lt;title&amp;gt;Rating system&amp;lt;/title&amp;gt;

    &amp;lt;!-- Fonts --&amp;gt;
    &amp;lt;link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&amp;amp;display=swap" rel="stylesheet"&amp;gt;

    &amp;lt;link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet"&amp;gt;
    @livewireStyles

&amp;lt;/head&amp;gt;

&amp;lt;body class="antialiased"&amp;gt;
    &amp;lt;div
        class="relative flex justify-center min-h-screen bg-gray-100 items-top dark:bg-gray-700 sm:items-center sm:pt-0"&amp;gt;

        &amp;lt;div class="mt-8 overflow-hidden bg-white shadow dark:bg-gray-200 sm:rounded-lg"&amp;gt;
            &amp;lt;div class="fixed inset-0 z-10 overflow-y-auto bg-white"&amp;gt;
                &amp;lt;div class="flex items-center justify-center min-h-screen text-center"&amp;gt;
                    &amp;lt;div class="inline-block px-2 py-6 overflow-hidden text-left align-bottom transition-all transform bg-white rounded-lg w-full"
                        role="dialog" aria-modal="true" aria-labelledby="modal-headline"&amp;gt;
                        &amp;lt;div class="pb-2 bg-white"&amp;gt;
                            &amp;lt;div class="flex-col items-center sm:flex"&amp;gt;
                                &amp;lt;div
                                    class="flex items-center justify-center flex-shrink-0 w-12 h-12 p-4 mx-auto bg-red-100 rounded-full sm:mx-0 sm:h-16 sm:w-16"&amp;gt;
                                    &amp;lt;svg class="w-full h-full text-red-600" viewBox="0 0 24 24" fill="none"
                                        stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"&amp;gt;
                                        &amp;lt;line x1="19" y1="5" x2="5" y2="19"&amp;gt;&amp;lt;/line&amp;gt;
                                        &amp;lt;circle cx="6.5" cy="6.5" r="2.5"&amp;gt;&amp;lt;/circle&amp;gt;
                                        &amp;lt;circle cx="17.5" cy="17.5" r="2.5"&amp;gt;&amp;lt;/circle&amp;gt;
                                    &amp;lt;/svg&amp;gt;
                                &amp;lt;/div&amp;gt;
                                &amp;lt;div class="mt-3 mb-1 text-center sm:ml-4 sm:text-left"&amp;gt;
                                    &amp;lt;h3 class="pt-1 text-3xl font-black leading-6 text-gray-900" id="modal-headline"&amp;gt;
                                        {{ $product-&amp;gt;title }}
                                    &amp;lt;/h3&amp;gt;
                                &amp;lt;/div&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class="w-full text-base text-center text-gray-600"&amp;gt;
                            {{ $product-&amp;gt;description }}
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div
                            class="justify-center w-full px-4 mt-2 font-sans text-xs leading-6 text-center text-gray-500"&amp;gt;
                            &amp;lt;a href="#_"&amp;gt;Terms and conditions apply&amp;lt;/a&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    @livewireScripts

&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've got the template from &lt;a href="https://devdojo.com/tailwindcss/components"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: to keep things simple, we are not using a master layout so that you could have a better overview of the demo product page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally, add a get route to your &lt;code&gt;routes/web.php&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use App\Http\Controllers\ProductsController;

Route::get('/product/{id}', [ProductsController::class, 'show']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then if you visit your website &lt;code&gt;/products/1&lt;/code&gt; you will see your first product.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-new-livewire-component"&gt;
  &lt;/a&gt;
  Adding new Livewire component
&lt;/h1&gt;

&lt;p&gt;With the product model in place, let's go ahead and add the Livewire component!&lt;/p&gt;

&lt;p&gt;To create the new Livewire component, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; php artisan livewire:make product-ratings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
CLASS: app/Http/Livewire/ProductRatings.php
VIEW:  resources/views/livewire/product-ratings.blade.php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, let's go ahead and add our view which will contain the form for our ratings and comments. Open the &lt;code&gt;resources/views/livewire/product-ratings.blade.php&lt;/code&gt; file and add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;section class="w-full px-8 pt-4 pb-10 xl:px-8"&amp;gt;
        &amp;lt;div class="max-w-5xl mx-auto"&amp;gt;
            &amp;lt;div class="flex flex-col items-center md:flex-row"&amp;gt;

                &amp;lt;div class="w-full mt-16 md:mt-0"&amp;gt;
                    &amp;lt;div class="relative z-10 h-auto p-4 py-10 overflow-hidden bg-white border-b-2 border-gray-300 rounded-lg shadow-2xl px-7"&amp;gt;
                        @auth
                            &amp;lt;div class="w-full space-y-5"&amp;gt;
                                &amp;lt;p class="font-medium text-blue-500 uppercase"&amp;gt;
                                    Rate this product
                                &amp;lt;/p&amp;gt;
                            &amp;lt;/div&amp;gt;
                            @if (session()-&amp;gt;has('message'))
                                &amp;lt;p class="text-xl text-gray-600 md:pr-16"&amp;gt;
                                    {{ session('message') }}
                                &amp;lt;/p&amp;gt;
                            @endif
                            @if($hideForm != true)
                                &amp;lt;form wire:submit.prevent="rate()"&amp;gt;
                                    &amp;lt;div class="block max-w-3xl px-1 py-2 mx-auto"&amp;gt;
                                        &amp;lt;div class="flex space-x-1 rating"&amp;gt;
                                            &amp;lt;label for="star1"&amp;gt;
                                                &amp;lt;input hidden wire:model="rating" type="radio" id="star1" name="rating" value="1" /&amp;gt;
                                                &amp;lt;svg class="cursor-pointer block w-8 h-8 @if($rating &amp;gt;= 1 ) text-indigo-500 @else text-grey @endif " fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"&amp;gt;&amp;lt;path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/&amp;gt;&amp;lt;/svg&amp;gt;
                                            &amp;lt;/label&amp;gt;
                                            &amp;lt;label for="star2"&amp;gt;
                                                &amp;lt;input hidden wire:model="rating" type="radio" id="star2" name="rating" value="2" /&amp;gt;
                                                &amp;lt;svg class="cursor-pointer block w-8 h-8 @if($rating &amp;gt;= 2 ) text-indigo-500 @else text-grey @endif " fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"&amp;gt;&amp;lt;path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/&amp;gt;&amp;lt;/svg&amp;gt;
                                            &amp;lt;/label&amp;gt;
                                            &amp;lt;label for="star3"&amp;gt;
                                                &amp;lt;input hidden wire:model="rating" type="radio" id="star3" name="rating" value="3" /&amp;gt;
                                                &amp;lt;svg class="cursor-pointer block w-8 h-8 @if($rating &amp;gt;= 3 ) text-indigo-500 @else text-grey @endif " fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"&amp;gt;&amp;lt;path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/&amp;gt;&amp;lt;/svg&amp;gt;
                                            &amp;lt;/label&amp;gt;
                                            &amp;lt;label for="star4"&amp;gt;
                                                &amp;lt;input hidden wire:model="rating" type="radio" id="star4" name="rating" value="4" /&amp;gt;
                                                &amp;lt;svg class="cursor-pointer block w-8 h-8 @if($rating &amp;gt;= 4 ) text-indigo-500 @else text-grey @endif " fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"&amp;gt;&amp;lt;path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/&amp;gt;&amp;lt;/svg&amp;gt;
                                            &amp;lt;/label&amp;gt;
                                            &amp;lt;label for="star5"&amp;gt;
                                                &amp;lt;input hidden wire:model="rating" type="radio" id="star5" name="rating" value="5" /&amp;gt;
                                                &amp;lt;svg class="cursor-pointer block w-8 h-8 @if($rating &amp;gt;= 5 ) text-indigo-500 @else text-grey @endif " fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"&amp;gt;&amp;lt;path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/&amp;gt;&amp;lt;/svg&amp;gt;
                                            &amp;lt;/label&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                        &amp;lt;div class="my-5"&amp;gt;
                                            @error('comment')
                                                &amp;lt;p class="mt-1 text-red-500"&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
                                            @enderror
                                            &amp;lt;textarea wire:model.lazy="comment" name="description" class="block w-full px-4 py-3 border border-2 rounded-lg focus:border-blue-500 focus:outline-none" placeholder="Comment.."&amp;gt;&amp;lt;/textarea&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                    &amp;lt;div class="block"&amp;gt;
                                        &amp;lt;button type="submit" class="w-full px-3 py-4 font-medium text-white bg-blue-600 rounded-lg"&amp;gt;Rate&amp;lt;/button&amp;gt;
                                        @auth
                                            @if($currentId)
                                                &amp;lt;button type="submit" class="w-full px-3 py-4 mt-4 font-medium text-white bg-red-400 rounded-lg" wire:click.prevent="delete({{ $currentId }})" class="text-sm cursor-pointer"&amp;gt;Delete&amp;lt;/button&amp;gt;
                                            @endif
                                        @endauth
                                    &amp;lt;/div&amp;gt;
                                &amp;lt;/form&amp;gt;
                            @endif
                        @else
                            &amp;lt;div&amp;gt;
                                &amp;lt;div class="mb-8 text-center text-gray-600"&amp;gt;
                                    You need to login in order to be able to rate the product!
                                &amp;lt;/div&amp;gt;
                                &amp;lt;a href="/register"
                                    class="block px-5 py-2 mx-auto font-medium text-center text-gray-600 bg-white border rounded-lg shadow-sm focus:outline-none hover:bg-gray-100" 
                                &amp;gt;Register&amp;lt;/a&amp;gt;
                            &amp;lt;/div&amp;gt;
                        @endauth
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;

            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;section class="relative block pt-20 pb-24 overflow-hidden text-left bg-white"&amp;gt;
        &amp;lt;div class="w-full px-20 mx-auto text-left md:px-10 max-w-7xl xl:px-16"&amp;gt;
            &amp;lt;div class="box-border flex flex-col flex-wrap justify-center -mx-4 text-indigo-900"&amp;gt;
                &amp;lt;div class="relative w-full mb-12 leading-6 text-left xl:flex-grow-0 xl:flex-shrink-0"&amp;gt;
                    &amp;lt;h2 class="box-border mx-0 mt-0 font-sans text-4xl font-bold text-center text-indigo-900"&amp;gt;
                        Ratings
                    &amp;lt;/h2&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="box-border flex grid flex-wrap justify-center gap-10 -mx-4 text-center text-indigo-900 lg:gap-16 lg:justify-start lg:text-left"&amp;gt;
                @forelse ($comments as $comment)
                    &amp;lt;div class="flex col-span-1"&amp;gt;
                        &amp;lt;div class="relative flex-shrink-0 w-20 h-20 text-left"&amp;gt;
                            &amp;lt;a href="{{ '@' . $comment-&amp;gt;user-&amp;gt;name }}"&amp;gt;
                            &amp;lt;/a&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class="relative px-4 mb-16 leading-6 text-left"&amp;gt;
                            &amp;lt;div class="box-border text-lg font-medium text-gray-600"&amp;gt;
                                {{ $comment-&amp;gt;comment }}
                            &amp;lt;/div&amp;gt;
                            &amp;lt;div class="box-border mt-5 text-lg font-semibold text-indigo-900 uppercase"&amp;gt;
                                Rating: &amp;lt;strong&amp;gt;{{ $comment-&amp;gt;rating }}&amp;lt;/strong&amp;gt; ⭐
                                @auth
                                    @if(auth()-&amp;gt;user()-&amp;gt;id == $comment-&amp;gt;user_id || auth()-&amp;gt;user()-&amp;gt;role-&amp;gt;name == 'admin' ))
                                        - &amp;lt;a wire:click.prevent="delete({{ $comment-&amp;gt;id }})" class="text-sm cursor-pointer"&amp;gt;Delete&amp;lt;/a&amp;gt;
                                    @endif
                                @endauth
                            &amp;lt;/div&amp;gt;
                            &amp;lt;div class="box-border text-left text-gray-700" style="quotes: auto;"&amp;gt;
                                &amp;lt;a href="{{ '@' . $comment-&amp;gt;user-&amp;gt;username }}"&amp;gt;
                                    {{  $comment-&amp;gt;user-&amp;gt;name }}
                                &amp;lt;/a&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                @empty
                &amp;lt;div class="flex col-span-1"&amp;gt;
                    &amp;lt;div class="relative px-4 mb-16 leading-6 text-left"&amp;gt;
                        &amp;lt;div class="box-border text-lg font-medium text-gray-600"&amp;gt;
                            No ratings
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                @endforelse

            &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to include this to your products view, add the following to the &lt;code&gt;resources/views/product.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        @livewire('product-ratings', ['product' =&amp;gt; $product], key($product-&amp;gt;id))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, let's go ahead and add the Livewire logic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-the-livewire-logic"&gt;
  &lt;/a&gt;
  Adding the Livewire logic
&lt;/h1&gt;

&lt;p&gt;Open the &lt;code&gt;app/Http/Livewire/ProductRatings.php&lt;/code&gt; and add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Rating;

class ProductRatings extends Component
{
    public $rating;
    public $comment;
    public $currentId;
    public $product;
    public $hideForm;

    protected $rules = [
        'rating' =&amp;gt; ['required', 'in:1,2,3,4,5'],
        'comment' =&amp;gt; 'required',

    ];

    public function render()
    {
        $comments = Rating::where('product_id', $this-&amp;gt;product-&amp;gt;id)-&amp;gt;where('status', 1)-&amp;gt;with('user')-&amp;gt;get();
        return view('livewire.product-ratings', compact('comments'));
    }

    public function mount()
    {
        if(auth()-&amp;gt;user()){
            $rating = Rating::where('user_id', auth()-&amp;gt;user()-&amp;gt;id)-&amp;gt;where('product_id', $this-&amp;gt;product-&amp;gt;id)-&amp;gt;first();
            if (!empty($rating)) {
                $this-&amp;gt;rating  = $rating-&amp;gt;rating;
                $this-&amp;gt;comment = $rating-&amp;gt;comment;
                $this-&amp;gt;currentId = $rating-&amp;gt;id;
            }
        }
        return view('livewire.product-ratings');
    }

    public function delete($id)
    {
        $rating = Rating::where('id', $id)-&amp;gt;first();
        if ($rating &amp;amp;&amp;amp; ($rating-&amp;gt;user_id == auth()-&amp;gt;user()-&amp;gt;id)) {
            $rating-&amp;gt;delete();
        }
        if ($this-&amp;gt;currentId) {
            $this-&amp;gt;currentId = '';
            $this-&amp;gt;rating  = '';
            $this-&amp;gt;comment = '';
        }
    }

    public function rate()
    {
        $rating = Rating::where('user_id', auth()-&amp;gt;user()-&amp;gt;id)-&amp;gt;where('product_id', $this-&amp;gt;product-&amp;gt;id)-&amp;gt;first();
        $this-&amp;gt;validate();
        if (!empty($rating)) {
            $rating-&amp;gt;user_id = auth()-&amp;gt;user()-&amp;gt;id;
            $rating-&amp;gt;product_id = $this-&amp;gt;product-&amp;gt;id;
            $rating-&amp;gt;rating = $this-&amp;gt;rating;
            $rating-&amp;gt;comment = $this-&amp;gt;comment;
            $rating-&amp;gt;status = 1;
            try {
                $rating-&amp;gt;update();
            } catch (\Throwable $th) {
                throw $th;
            }
            session()-&amp;gt;flash('message', 'Success!');
        } else {
            $rating = new Rating;
            $rating-&amp;gt;user_id = auth()-&amp;gt;user()-&amp;gt;id;
            $rating-&amp;gt;product_id = $this-&amp;gt;product-&amp;gt;id;
            $rating-&amp;gt;rating = $this-&amp;gt;rating;
            $rating-&amp;gt;comment = $this-&amp;gt;comment;
            $rating-&amp;gt;status = 1;
            try {
                $rating-&amp;gt;save();
            } catch (\Throwable $th) {
                throw $th;
            }
            $this-&amp;gt;hideForm = true;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;p&gt;Once you've added all of the components, when visiting the &lt;code&gt;/product/1&lt;/code&gt; URL you will see the following page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHbWNhOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/lTiq78C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHbWNhOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/lTiq78C.png" alt="Laravel Livewire rating system"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So to get to the rating component, you would need to login first.&lt;/p&gt;

&lt;p&gt;Once you've logged in, you will see the following screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vEmd_z5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/NL5S4OI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEmd_z5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/NL5S4OI.png" alt="Simple Livewire rating system"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that if you are unable to click on any of the links, you might have to publish the Livewire assets:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --force --tag=livewire:assets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple Demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-D5WMON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/ZdVRhgS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-D5WMON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/ZdVRhgS.gif" alt="Simple Laravel Livewire Review System"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much it! Now you have a simple rating and comments system for your Laravel Jetstream project!&lt;/p&gt;

&lt;p&gt;Note that this will also work with &lt;a href="https://devdojo.com/bobbyiliev/what-is-laravel-breeze-and-how-to-get-started"&gt;Laravel Breeze&lt;/a&gt;, but you will need to install Laravel Livewire additionally.&lt;/p&gt;

&lt;p&gt;You can find the source here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/simple-reviews-and-rating-system"&gt;Laravel Livewire Simple Rating and Review System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to contribute improvements and suggestions!&lt;/p&gt;

&lt;p&gt;I hope that this helps!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Under-the-hood of NPM</title>
      <author>Craig Taub</author>
      <pubDate>Tue, 01 Jun 2021 11:53:53 +0000</pubDate>
      <link>https://dev.to/craigtaub/under-the-hood-of-npm-7ec</link>
      <guid>https://dev.to/craigtaub/under-the-hood-of-npm-7ec</guid>
      <description>&lt;p&gt;NPM is the official package manager for the NodeJS ecosystem. Since the first release of NodeJS it has come with NPM built-in. The initial release date for NPM was 12 January 2010 and since then has grown into the Worlds largest software registry.&lt;/p&gt;

&lt;p&gt;I would expect most engineers in the JavaScript ecosystem to know all about either NPM or Yarn, as they are critical to most local, CI and CD flows. However in the overview section I am going to cover the core functionality, as this is what we will focus on building later.&lt;/p&gt;

&lt;p&gt;This is part of my &lt;a href="https://craigtaub.dev/introducing-my-under-the-hood-of-series"&gt;"under-the-hood of" series&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-git"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-graphql"&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-web-bundlers"&gt;Web bundlers (e.g. Webpack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-type-systems"&gt;Type systems (e.g. TypeScript)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-test-runners"&gt;Test runners (e.g. Mocha)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/source-maps-from-top-to-bottom"&gt;Source maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-react-hooks"&gt;React hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/under-the-hood-of-apollo-6d8642066b28"&gt;Apollo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://craigtaub.dev/under-the-hood-of-vscode-auto-formatters"&gt;Auto formatters (e.g. Prettier)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The article today will be broken down into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#1-overview"&gt;Overview&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#2-module-vs-package"&gt;Module vs Package&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#3-building-our-own-nodejs-package-manager"&gt;Building our own NodeJS package manager&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#1-overview"&gt;
  &lt;/a&gt;
  1: Overview
&lt;/h2&gt;

&lt;p&gt;There are 3 parts to NPM&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli-tool"&gt;
  &lt;/a&gt;
  CLI tool
&lt;/h3&gt;

&lt;p&gt;The CLI is open-source code available on &lt;a href="https://github.com/npm/cli"&gt;Github&lt;/a&gt;. It is currently on version 7 and has had over 700 contributors. The CLI commands are NodeJS scripts and require the format &lt;code&gt;npm &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can point the CLI to any registry e.g. &lt;code&gt;npm adduser --registry http://localhost:4873&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The most popular commands are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-npm-init-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm init&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Setup a new package&lt;/li&gt;
&lt;li&gt;Creates a &lt;code&gt;package.json&lt;/code&gt; (among other things)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#-raw-npm-install-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm install&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Code located in &lt;a href="https://github.com/npm/cli/blob/latest/lib/install.js#L111"&gt;install.js&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Uses &lt;code&gt;npm-registry-fetch&lt;/code&gt; &lt;a href="https://github.com/npm/npm-registry-fetch"&gt;https://github.com/npm/npm-registry-fetch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Generates &lt;code&gt;node_modules&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Downloads dependencies defined in &lt;code&gt;package.json&lt;/code&gt; (see "Module resolution" below)&lt;/li&gt;
&lt;li&gt;Generates lockfile (see "Lockfile" below)&lt;/li&gt;
&lt;li&gt;Utilises a cache (see "Cache" below)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example output below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUEpZU9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80y3go875xz4wt6a16uh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUEpZU9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80y3go875xz4wt6a16uh.png" alt="npm-install-log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lockfile"&gt;
  &lt;/a&gt;
  Lockfile
&lt;/h5&gt;

&lt;p&gt;Generates &lt;code&gt;package-lock.json&lt;/code&gt; - describes dependency tree that was installed. For deterministic installs (subsequent installs). If it exists, the install is driven by that. The lockfile stores an 'integrity' hash for each dep. Ths hash (checksum) is of the package tarball uploaded to registry. Can be SHA-1 (older NPM) or SHA-512 (newer NPM). Its akin to a &lt;a href="https://w3c.github.io/webappsec-subresource-integrity/"&gt;Subresource Integrity&lt;/a&gt; used in HTML/browsers.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#module-resolution"&gt;
  &lt;/a&gt;
  Module resolution
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;NPM installs per package and sequentially i.e. moves on once package installed. This means it can be quite slow to finish.&lt;/li&gt;
&lt;li&gt;Currently installs all of the nested dependencies as efficiently (or flat) as possible. If a version is the first for a dependency it is top-level, if it is not the first version then it is stored with the parent who requires it.&lt;/li&gt;
&lt;li&gt;The old package resolution (pre npm v5) was done on disk by NodeJS (node_modules), this was much slower and is not used anymore.&lt;/li&gt;
&lt;li&gt;Example resolution below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkozXpf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1022/1%2ARYiPZQYdBtvMmMO66atm1A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkozXpf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1022/1%2ARYiPZQYdBtvMmMO66atm1A.png" alt="npm3-module-resolution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cache"&gt;
  &lt;/a&gt;
  Cache
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Stores http request/response data and other package-related data&lt;/li&gt;
&lt;li&gt;Uses &lt;code&gt;pacote&lt;/code&gt;. Library responsible for package fetching&lt;/li&gt;
&lt;li&gt;All data passed through the cache is verified for integrity on insertion and extraction&lt;/li&gt;
&lt;li&gt;Cache corruption will trigger a refetch, so clearing cache should only be necessary for reclaiming disk space&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#-raw-npm-version-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm version&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bump local version, update &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create version commit and tag for git&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#-raw-npm-pack-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm pack&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create tarball (a zip) of the package (&lt;code&gt;package.tar.gz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Example screenshot below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgrFv1ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlga3vb4xnhwal0f2a3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgrFv1ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlga3vb4xnhwal0f2a3i.png" alt="npm-pack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-npm-publish-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm publish&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Code located in &lt;a href="https://github.com/npm/cli/blob/latest/lib/publish.js"&gt;publish.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Runs &lt;code&gt;npm pack&lt;/code&gt; as part of it&lt;/li&gt;
&lt;li&gt;Sends tarball to registry&lt;/li&gt;
&lt;li&gt;Publishing a package consists of at least 1 step (http PUT) with a metadata payload and tarball&lt;/li&gt;
&lt;li&gt;See in the logs printed &lt;code&gt;"npm http fetch PUT 200"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#registry"&gt;
  &lt;/a&gt;
  Registry
&lt;/h3&gt;

&lt;p&gt;Large public database of JavaScript packages and the meta-information surrounding it. Versioned like git.&lt;/p&gt;

&lt;p&gt;Uses Apache's NoSQL database Couch DB to manage publicly available data (it offers good storage performance and replication). It has database for "users" and one for "registry", the latter holds the packages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tarballs"&gt;
  &lt;/a&gt;
  Tarballs
&lt;/h4&gt;

&lt;p&gt;It uses Couch DB's &lt;a href="https://docs.couchdb.org/en/stable/intro/api.html#attachments"&gt;attachments&lt;/a&gt; for package tarballs. It is incredlby easy to upload or download an attachment from Couch, simpler than most other NoSQL.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h4&gt;

&lt;p&gt;Couch naturally exposes HTTP endpoints which means it has an API built into it by default. For auth there is a &lt;code&gt;/_session&lt;/code&gt; endpoint (to create a new cookie-based session) or it accepts an &lt;code&gt;Authentication&lt;/code&gt; header for basic auth, both natively. Using design document &lt;code&gt;Rewrites&lt;/code&gt; (see below section) you can build redirects to different parts of the database&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#querying"&gt;
  &lt;/a&gt;
  Querying
&lt;/h4&gt;

&lt;p&gt;Couch DB is very dynamic in that it allows you to create a kind of schema called a "design document" for a given section. This can include javascript functions (yes it can store and run JS code internally) which execute at given events e.g. &lt;code&gt;Updates&lt;/code&gt; is list of functions which run when a document is updated. It also allows &lt;code&gt;Views&lt;/code&gt; which are function that take document data and produce searchable lists of information based on the document's contents. There are other types of dynamic mechanisms, more details &lt;a href="https://docs.couchdb.org/en/stable/api/ddoc/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#npm-links"&gt;
  &lt;/a&gt;
  NPM links
&lt;/h4&gt;

&lt;p&gt;The Couch DB tables and API for registry details are &lt;a href="https://github.com/npm/registry/blob/master/docs/REGISTRY-API.md#package"&gt;here&lt;/a&gt; (a repository for Registry documentation). Couch DB views used by the Registry are found in &lt;a href="https://github.com/npm/npm-registry-couchapp"&gt;npm-registry-couchapp&lt;/a&gt;. An example Docker image for their DB setup is &lt;a href="https://github.com/npm/npm-docker-couchdb"&gt;npm-docker-couchdb&lt;/a&gt;. It details how to update a local NPM client to use a local CouchDB registry (&lt;a href="https://github.com/npm/npm-registry-couchapp#using-the-registry-with-the-npm-client"&gt;here&lt;/a&gt;), example below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm config set registry=http://localhost:5984/registry/_design/app/_rewrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Some apps use the popular lightweight private proxy app &lt;a href="https://github.com/verdaccio/verdaccio"&gt;verdaccio&lt;/a&gt;, for many reasons one of which is independent caching incase NPM is down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website
&lt;/h3&gt;

&lt;p&gt;Found at &lt;code&gt;https://www.npmjs.com/&lt;/code&gt;, a domain first registered on 19th March 2010.&lt;br&gt;
It is built using Webpack, React and Lodash. Its assets are served via CDN CloudFlare. Any payments are processed via Stripe.&lt;/p&gt;

&lt;p&gt;Connects and reads data from the registry Couch DB instance.&lt;/p&gt;

&lt;p&gt;Packages are located at &lt;code&gt;https://www.npmjs.com/package/&amp;lt;package name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The README markdown file is loaded as the landing page content with markdown rendered as HTML.&lt;/p&gt;

&lt;p&gt;NPM also shows a load of other information such as the weekly download number, latest version, unpacked size and github location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1BQVHY5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91v7kxnp2etsvwofuvgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1BQVHY5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91v7kxnp2etsvwofuvgx.png" alt="npm-package"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#2-module-vs-package"&gt;
  &lt;/a&gt;
  2. Module vs Package
&lt;/h2&gt;

&lt;p&gt;A module is a file or directory that can be loaded by Nodejs, located inside &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;CLI packages are not modules, they cannot be loaded by NodeJS until unzipped into a folder first.&lt;/p&gt;

&lt;p&gt;2 versions of the same module can exist (&lt;a href="mailto:module@1.0.0"&gt;module@1.0.0&lt;/a&gt; and &lt;a href="mailto:module@1.0.1"&gt;module@1.0.1&lt;/a&gt;) and they will not conflict. Generally npm packages are modules, loaded via &lt;code&gt;require()&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#3-building-our-own-nodejs-package-manager"&gt;
  &lt;/a&gt;
  3: Building our own NodeJS package manager
&lt;/h2&gt;

&lt;p&gt;We will be building an app which includes all 3 aspects of NPM.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Registry&lt;/li&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;li&gt;Website&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The aim is to get a basic PoC which will work for all 3.&lt;/p&gt;

&lt;p&gt;Using an &lt;code&gt;example-lib&lt;/code&gt; (a small package which returns some text) and &lt;code&gt;example-app&lt;/code&gt; (a small express server using the previous package) we can test it works.&lt;/p&gt;

&lt;p&gt;Wrapping all of the above in a single mono-repository with multiple &lt;code&gt;packages&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#registry"&gt;
  &lt;/a&gt;
  Registry
&lt;/h3&gt;

&lt;p&gt;For this we will use the default couchdb Docker image. It includes a basic unauthenticated CouchDB instance.&lt;/p&gt;

&lt;p&gt;We will use docker-compose to set up our apps.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;docker-compose.yml&lt;/code&gt; starts like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.0"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;couchdb_container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;couchdb:1.6.1&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5984:5984&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does not need a volume mounted or anything else at this point.&lt;/p&gt;

&lt;p&gt;We will use a Makefile to assist in running. We start by building and creating the registry database. Later I added a &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; so we could kill the docker application and reset the database quickly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;up:
    docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;

db:
    curl &lt;span class="nt"&gt;-XPUT&lt;/span&gt; http://localhost:5984/registry

stop:
    docker-compose stop

reset:
    curl &lt;span class="nt"&gt;-X&lt;/span&gt; DELETE &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s1"&gt;'http://localhost:5984/registry'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'content-type: application/json'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Opening the browser confirms the database and couchDb instance exists&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26i8ORFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4idad2srse6hgevw6wn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26i8ORFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4idad2srse6hgevw6wn.png" alt="npm-couch-db"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h3&gt;

&lt;p&gt;Located in our monorepo in &lt;code&gt;packages/cli/&lt;/code&gt;. We will only be creating 2 commands for this PoC.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install&lt;/li&gt;
&lt;li&gt;Publish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; will look like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"our-npm-install"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./scripts/install.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"our-npm-publish"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./scripts/publish.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;bin&lt;/code&gt; means inside the &lt;code&gt;packages/cli&lt;/code&gt; folder we can run below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And from any directory in a terminal we can run the commands like this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;our-npm-publish&lt;/p&gt;

&lt;p&gt;our-npm-install&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could have chosen to split these into a single script and use arguments, like the real NPM, but it did not seem worth it for this PoC. If I had gone that route I would have used &lt;code&gt;yargs&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-script"&gt;
  &lt;/a&gt;
  Install script
&lt;/h4&gt;

&lt;p&gt;Located at &lt;code&gt;packages/cli/scripts/install.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It has 4 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab the package name and &lt;code&gt;ourDeps&lt;/code&gt; object, from the current working directory &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Iterate over each item in &lt;code&gt;ourDeps&lt;/code&gt;, the version is ignored for our PoC.

&lt;ol&gt;
&lt;li&gt;make a &lt;code&gt;fetch&lt;/code&gt; request to the couch-db tarball attachment (looks like &lt;code&gt;http://localhost:5984/registry/{repo-name}/{repo-name}.tar.gz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;write the file to a local &lt;code&gt;tmp.tar.gz&lt;/code&gt; file (for processing)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Extract the &lt;code&gt;tmp.tar.gz&lt;/code&gt; contents using the &lt;code&gt;tar&lt;/code&gt; library, into the current working directory &lt;code&gt;node_modules/{repo-name}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally delete the &lt;code&gt;tmp.tar.gz&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The code is here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeFilePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5984/registry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/tmp.tar.gz`&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;extractPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zipExtractFolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;existsSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zipExtractFolder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create package in node_mods&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mkdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zipExtractFolder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Step 3&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;gzip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tmp.tar.gz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;zipExtractFolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// current extract&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Extract complete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Extract error: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downloadPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Step 2.1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayBuffer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="c1"&gt;// Step 2.2&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;writeFilePromise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Download Error: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Step 1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kr"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/package.json`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Step 2 - process each dep&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ourDeps&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;repoName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;downloadPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;extractPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 4 - remove tar&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unlinkSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Downloaded: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#publish-script"&gt;
  &lt;/a&gt;
  Publish script
&lt;/h4&gt;

&lt;p&gt;Located at &lt;code&gt;packages/cli/scripts/publish.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It has 4 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the current working directory grab

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; file &lt;code&gt;name&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;README.md&lt;/code&gt; contents&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Create a tarball of the current working directory&lt;/li&gt;
&lt;li&gt;Send the package tarball (as an attachment) and README contents (as plain text) to our couchdb instance, the document name is the package name.&lt;/li&gt;
&lt;li&gt;Delete the local tarball file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;unlinkSync&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readFile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nano&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5984&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readFileAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readmeContents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tarballName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz`&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tarballName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tarballData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;readFileAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nano&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;registry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;docName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;repoName&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 3&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;readmeContents&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;docName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;docName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;tarballName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;tarballData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/zip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response success: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;packageRepo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Step 2&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gzip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gzip ERROR: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Step 1.1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repoName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/package.json`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="c1"&gt;// Step 1.2&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readmeContents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;readFileAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/README.md`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;packageRepo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sendPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readmeContents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Step 4 - remove file&lt;/span&gt;
  &lt;span class="nx"&gt;unlinkSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website
&lt;/h3&gt;

&lt;p&gt;Located under &lt;code&gt;packages/website&lt;/code&gt; we will use Docker to create a basic NodeJS website.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;packages/website/Dockerfile&lt;/code&gt; looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:14-alpine

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install dependencies
COPY package.json package-lock.json ./
RUN npm install

# Bundle app source
COPY . ./

# Exports
EXPOSE 3000
CMD [ "npm", "run", "start.dev" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The website details are located in &lt;code&gt;packages/website/src/server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a request to the &lt;code&gt;/packages/:package-name&lt;/code&gt; url&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Query the couchdb instance for the package name&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;showdown&lt;/code&gt; library, render the README markdown as HTML.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If no package is found a nice message is printed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// deps...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nano&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://couchdb_container:5984&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// no auth for GET&lt;/span&gt;

&lt;span class="c1"&gt;// Constants&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// couchdb&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nano&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;registry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Step 1&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client result: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// App&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/packages/:packageName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;packageName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;packageName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;converter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;showdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Converter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// Step 2&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readmeContents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No package found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we will add the website to our &lt;code&gt;docker-compose.yml&lt;/code&gt; so we can run it with the registry database.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; now looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "3.0"

services:
  web:
    build: packages/website
    ports:
      - "3000:3000"
    restart: always
    volumes:
      - ./packages/website:/usr/src/app

  couchdb_container:
    image: couchdb:1.6.1
    ports:
      - 5984:5984
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-it-works"&gt;
  &lt;/a&gt;
  Testing it works
&lt;/h3&gt;

&lt;p&gt;We now have 3 of the core 3 jobs carried out by NPM, so we need to test it works using an example application and example library.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-examplelib-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;example-lib&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The library will just return a string.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;packages/example-lib/package.json&lt;/code&gt; looks like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"example-lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;packages/example-lib/index.js&lt;/code&gt; is below, it just returns a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example-lib data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-exampleapp-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;example-app&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;It will print information from a real library (e.g. express) and our example library.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;packages/example-app/package.json&lt;/code&gt; looks like this. As mentioned the version is ignored for our PoC.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ourDeps"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"example-lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;packages/example-app/src/index.js&lt;/code&gt; is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleLib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example-lib&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example-lib function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;exampleLib&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we update the &lt;code&gt;reset&lt;/code&gt; in our &lt;code&gt;Makefile&lt;/code&gt; to also remove the package installed and uninstall the global binary commands. The final file is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;up:
    docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;

db:
    curl &lt;span class="nt"&gt;-XPUT&lt;/span&gt; http://localhost:5984/registry

stop:
    docker-compose stop

reset:
    curl &lt;span class="nt"&gt;-X&lt;/span&gt; DELETE &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s1"&gt;'http://localhost:5984/registry'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'content-type: application/json'&lt;/span&gt;
    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; packages/example-app/node_modules/example-lib
    &lt;span class="nb"&gt;cd &lt;/span&gt;packages/cli &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm uninstall &lt;span class="nt"&gt;-g&lt;/span&gt; our-npm-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#running-the-example"&gt;
  &lt;/a&gt;
  Running the example
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Setup commands&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;make up&lt;/p&gt;

&lt;p&gt;make reset&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Check website for the package&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET http://localhost:3000/packages/example-lib&lt;/code&gt; -&amp;gt; Notice the package does not exist yet&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Setup the database and CLI&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd packages/cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm install -g .&lt;/code&gt; -&amp;gt; Install the 2 CLI scripts globally (see &lt;code&gt;bin&lt;/code&gt; inside &lt;code&gt;package.json&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Publish the package then check website&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd ../example-lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;our-npm-publish&lt;/code&gt; -&amp;gt; Publish the &lt;code&gt;example-lib&lt;/code&gt; package to our registry&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET http://localhost:5984/registry/example-lib/example-lib.tar.gz&lt;/code&gt; -&amp;gt; Location of the registry package tarball&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET http://localhost:3000/packages/example-lib&lt;/code&gt; -&amp;gt; Package &lt;code&gt;README&lt;/code&gt; on website (screenshot below)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWPujSDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrrca4dqu9wjknmct13.png" alt="npm-website-markdown"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Use package&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd ../example-app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt; -&amp;gt; See the missing package error (screenshot below)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1tOZ0xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hja9ep31zzyjhz858isu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1tOZ0xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hja9ep31zzyjhz858isu.png" alt="npm-start-error"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;our-npm-install&lt;/code&gt; -&amp;gt; Install the packages from &lt;code&gt;package.json&lt;/code&gt; -&amp;gt; &lt;code&gt;ourDeps&lt;/code&gt; list (screenshot below)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwm6AtP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3houoqa1cb36difnr4ay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwm6AtP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3houoqa1cb36difnr4ay.png" alt="npm-install-works"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt; -&amp;gt; Package found, now it works (screenshot below)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAvLnG6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw99raqu52011vpaqxxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAvLnG6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw99raqu52011vpaqxxy.png" alt="npm-start-works"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So thats it 🙌, our mini NPM works.&lt;/p&gt;

&lt;p&gt;I encourage anyone that is interested to check out the &lt;a href="https://github.com/craigtaub/our-own-npm"&gt;code&lt;/a&gt; and play with the mechanism yourself.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-have-we-missed"&gt;
  &lt;/a&gt;
  What have we missed?
&lt;/h2&gt;

&lt;p&gt;As mentioned there is functionality to each of the 3 core elements to NPM which we have omitted from our app. Some of those are:&lt;/p&gt;

&lt;p&gt;CLI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Various commands including &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;pack&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Ability to download a package via argument&lt;/li&gt;
&lt;li&gt;Creating lockfile (including versions and dependency info)&lt;/li&gt;
&lt;li&gt;Caching and request/response data&lt;/li&gt;
&lt;li&gt;Flags e.g &lt;code&gt;--devDeps&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Dependency module resolution (NPM has a lot of logic for managing this, see overview section)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Registry&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better authentication on the CouchDB instance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sha512sum&lt;/code&gt; hash of package/tarball contents ("Subresource Integrity" check)&lt;/li&gt;
&lt;li&gt;Install counter&lt;/li&gt;
&lt;li&gt;Semvar package versions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Website&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show install increment&lt;/li&gt;
&lt;li&gt;Show versions and intergrity hash&lt;/li&gt;
&lt;li&gt;A decent UI&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks so much for reading, I learnt a huge amount about NPM from this research and I hope it was useful for you. You can find the repository for all this code &lt;a href="https://github.com/craigtaub/our-own-npm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks, Craig 😃&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>database</category>
    </item>
  </channel>
</rss>
