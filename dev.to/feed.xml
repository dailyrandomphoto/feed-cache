<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Salary Negotiation Techniques</title>
      <author>Alec</author>
      <pubDate>Mon, 14 Jun 2021 20:52:07 +0000</pubDate>
      <link>https://dev.to/alecbsherman/salary-negotiation-techniques-3bha</link>
      <guid>https://dev.to/alecbsherman/salary-negotiation-techniques-3bha</guid>
      <description>&lt;p&gt;This is a full outline of how you can become a top negotiator when interviewing for a job.&lt;/p&gt;

&lt;p&gt;When I was starting out I always negotiated better compensation plans than others in the office, even when they were smarter, had a more formal education, or had more years of experience.&lt;/p&gt;

&lt;p&gt;Although I started programming when I was 14 years old, my career and passion was sales from the age of 18 to 30.  Being a bit OCD I studied everything I could to be a great salesperson. Zig Ziglar was my idol.  When I switched careers at 30 to software development, those negotiating tactics really paid off.&lt;/p&gt;

&lt;p&gt;I used these techniques to negotiate top pay, virtual office, travel and extensive fringe benefits for positions from software developer up to Chief Technology Officer but this works for any job position.&lt;/p&gt;

&lt;p&gt;This video shows how to find out how much your job position pays.  Then goes over &lt;strong&gt;basic&lt;/strong&gt; negotiating strategies and lastly &lt;strong&gt;advanced&lt;/strong&gt; negotiating tips to not only getting more money but a better quality of life.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aEA7HvJqGJs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>salary</category>
    </item>
    <item>
      <title>Python Testing 201 with pytest</title>
      <author>Matt Layman</author>
      <pubDate>Mon, 14 Jun 2021 20:13:46 +0000</pubDate>
      <link>https://dev.to/mblayman/python-testing-201-with-pytest-2jh1</link>
      <guid>https://dev.to/mblayman/python-testing-201-with-pytest-2jh1</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fv259R38gqc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For Python Frederick's September presentation, I presented on Python testing. In the presentation, I explained more of the features of pytest that went beyond the basics that we explored in March.&lt;/p&gt;

&lt;p&gt;The recording from the talk is available on YouTube. &lt;a href="https://www.youtube.com/watch?v=fv259R38gqc&amp;amp;list=PLFcKEo4b_n1wMFhbiedpMgh2VRT5uICuF&amp;amp;index=2"&gt;Check it out!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this presentation, I focused on a few big areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating tests with a wide variety of example data using &lt;code&gt;@pytest.mark.parametrize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Advice on organizing your test suite as the suite grows.&lt;/li&gt;
&lt;li&gt;Exploring fixtures as a tool for setup and reuse.&lt;/li&gt;
&lt;li&gt;Examining some useful built-in fixtures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questions? Feel free to mention me on Twitter at &lt;a href="https://twitter.com/mblayman"&gt;@mblayman&lt;/a&gt; so I can try to respond to your question.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 Razones de por qu√© aprender EKS practicando</title>
      <author>mariomerco</author>
      <pubDate>Mon, 14 Jun 2021 20:12:13 +0000</pubDate>
      <link>https://dev.to/aws-builders/5-razones-de-por-que-aprender-eks-practicando-1ale</link>
      <guid>https://dev.to/aws-builders/5-razones-de-por-que-aprender-eks-practicando-1ale</guid>
      <description>&lt;p&gt;Alguna vez has estado en la posici√≥n de aprender alguna herramienta nueva sobre tecnolog√≠a y piensas &lt;strong&gt;"esto es incre√≠ble!"&lt;/strong&gt; pero cuando comienzas a aplicarla encuentras varios problemas que lo hacen realmente m√°s dif√≠cil? Bueno, si has estado all√≠, &lt;strong&gt;definitivamente trabajas en TI!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No es un secreto que las tecnolog√≠as de la informaci√≥n evolucionan todo el tiempo y muy r√°pido, haciendo que las cosas sean mejores y m√°s r√°pidas, pero tambi√©n a veces un poco abrumadoras. E incluso m√°s all√° de eso, ¬°este escenario podr√≠a suceder en muchos otros dominios del conocimiento y experiencias de vida!&lt;/p&gt;

&lt;p&gt;Ahora, aterrizando m√°s en nuestro tema, Kubernetes en AWS, hay muy buenos ejemplos, documentaciones, laboratorios y ejercicios que pueden ayudar a comenzar con nuevos conocimientos, por lo que esto le brinda las herramientas como piezas de &lt;em&gt;Lego&lt;/em&gt; para construir su propia soluci√≥n, ya sea desde cero o con alguna l√≠nea de base. Esto es genial y funciona as√≠ en la mayor√≠a de las piezas de TI.&lt;/p&gt;

&lt;p&gt;Pero hay veces en las que es necesario realmente mirar un proyecto (ya sea algo peque√±o, incluso) y llevarlo de la mano con Kubernetes, porque en la teor√≠a se pueden obviar cosas que en la pr√°ctica son necesarias y que solo es (la practica) la que podr√° llenarlas. En otras palabras, &lt;strong&gt;no es lo mismo aprender a manejar una bicicleta por video tutoriales que mont√°ndote en una&lt;/strong&gt;. Por eso les dejo aqu√≠ 5 razones por qu√© aprender &lt;strong&gt;EKS&lt;/strong&gt; practicando.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-kubernetes-es-complicado-demasiadas-piezas-movi%C3%A9ndose"&gt;
  &lt;/a&gt;
  1. Kubernetes es complicado: demasiadas piezas movi√©ndose
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wb0d2IGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nk7mpo68acqyj5wcfnq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wb0d2IGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nk7mpo68acqyj5wcfnq.jpg" alt="Complicado"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si bien Kubernetes se est√° convirtiendo cada vez m√°s en un est√°ndar cuando se habla de orquestaci√≥n de contenedores, tambi√©n es cierto que el manejo de las cargas de trabajo de producci√≥n es un desaf√≠o. Kubernetes es un conjunto de m√∫ltiples componentes como l√≠nea de base, luego comienza a contar a medida que implementas pods, configmaps, secretos, servicios y un largo etc. (ni siquiera hablamos de CRDs ...), por lo que antes de comprometer algo en producci√≥n, requiere probar, no solo la aplicaci√≥n en s√≠, sino su infraestructura implementada en Kubernetes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-las-redes-necesitan-atenci%C3%B3n"&gt;
  &lt;/a&gt;
  2. Las redes necesitan atenci√≥n
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPn1u3wV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/852epm7i3sb3rljqduk2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPn1u3wV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/852epm7i3sb3rljqduk2.jpg" alt="Red"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A medida que comience a implementar sus aplicaciones (especialmente si se comunican entre s√≠), inmediatamente se enfrentar√° con DNS, IP, equilibrio de carga, etc. Aunque la mayor parte de esto se maneja con conceptos simples de Kubernetes, su infraestructura subyacente requiere una infraestructura de red bien establecida.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-los-permisos-de-iam-son-muy-detallados"&gt;
  &lt;/a&gt;
  3. Los permisos de IAM son muy detallados
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_MjZ2el--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a09ukhnz55fmv4uy08xx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_MjZ2el--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a09ukhnz55fmv4uy08xx.jpg" alt="Permisos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si los desarrolladores tienen un acceso amplio al espacio de AWS, codificar√°n sus aplicaciones usando el SDK de AWS probablemente sin preocuparse por los permisos ... ¬°hasta que obtenga Kubernetes! Los contenedores intentar√°n solicitar acceso a la API de AWS y, si el rol de IAM que abarca la aplicaci√≥n no est√° configurado con los permisos adecuados, simplemente fallar√°.&lt;/p&gt;

&lt;p&gt;Hay varias soluciones para esto, como &lt;a href="https://github.com/jtblin/kube2iam"&gt;Kube2IAM&lt;/a&gt;, &lt;a href="https://github.com/uswitch/kiam"&gt;KIAM&lt;/a&gt; y &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html"&gt;IAM Roles for Service Accounts&lt;/a&gt; que, si estamos en AWS y EKS (ejecut√°ndose en instancias EC2), esta es mi opci√≥n de preferencia üòé.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-la-automatizaci%C3%B3n-tambi%C3%A9n-requiere-pruebas"&gt;
  &lt;/a&gt;
  4. La automatizaci√≥n tambi√©n requiere pruebas
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy5dKyZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7uf3lkg4r44hl3fpkjh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy5dKyZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7uf3lkg4r44hl3fpkjh.jpg" alt="Automatizaci√≥n"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La automatizaci√≥n est√°, en la mayor√≠a de los casos, relacionada con la codificaci√≥n, y la codificaci√≥n tambi√©n est√° relacionada con errores. Entonces, en este caso, tomar√≠a la palabra "pr√°ctica" reemplazada por "prueba". Entonces, los flujos de trabajo de CICD que quiz√°s desee crear son, al final, un c√≥digo que se ejecuta en alg√∫n lugar y puede tener problemas. Es por eso que tener varios entornos (al menos un entorno de PRUEBA) antes del de producci√≥n es importante para probar realmente c√≥mo se realizar√° el aprovisionamiento de sus recursos.&lt;/p&gt;

&lt;p&gt;Kubernetes tambi√©n se incluye en esta secci√≥n, porque automatiza la orquestaci√≥n de contenedores seg√∫n las configuraciones que proporciones. Pero si sus configuraciones son incorrectas, podr√≠an llevarlo a un problema de implementaci√≥n o un entorno mal configurado.&lt;/p&gt;

&lt;p&gt;En resumen, siempre &lt;strong&gt;PRUEBA!&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-cuidado-con-el-orprie"&gt;
  &lt;/a&gt;
  5. Cuidado con el $orpri$e$ üí≤üí≤üí≤
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxlrs8Fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trnbijxmqh8chc1tjppy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxlrs8Fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trnbijxmqh8chc1tjppy.jpg" alt="Malgastando dinero"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esto es simple: &lt;strong&gt;Cuantos m√°s nodos agregue, m√°s dinero pagar√°&lt;/strong&gt;. Por ejemplo, una de las ideas principales de tener contenedores y Kubernetes encima es &lt;strong&gt;Ajuste de escala autom√°tico&lt;/strong&gt;, y hay varias formas, &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html"&gt;Ajuste de escala autom√°tico de cl√∫ster&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/horizontal-pod-autoscaler.html"&gt;Horizontal Pod Autoscaler&lt;/a&gt; y &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/vertical-pod-autoscaler.html"&gt;Vertical Pod Autoscaler&lt;/a&gt;. Lo mejor para configurar todo esto siempre depende del tipo de aplicaci√≥n que est√© creando. Tendr√° que entender c√≥mo se comporta, cu√°l es la mejor m√©trica para escalar, etc. y si esto no se toma con cuidado, podr√≠a escalar sin realmente necesitarlo y costarle mucho m√°s. ** ¬°O, incluso peor! **, podr√≠a reducirse de manera muy agresiva y da√±ar su disponibilidad y respuestas, ¬°impactando directamente al usuario final! As√≠ que es mejor estar preparado probando escenarios y desarrollando una estrategia de revisi√≥n de estas tareas a medida que su negocio aumente en usuarios finales.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suena-aterrador"&gt;
  &lt;/a&gt;
  Suena aterrador üéÉ
&lt;/h2&gt;

&lt;p&gt;Y puede que si lo sea üòÖ, pero realmente EKS ha ido creciendo y madurando en las herramientas que provee para hacer m√°s f√°cil su aprendizaje y mantenimiento. Desde Managed Worker Nodes, add-ons y actualizaciones autom√°ticas, hasta correr contenedores en Fargate (a lo Serverless) y miles de integraciones opensource por la comunidad de Kubernetes, de AWS y de ambos! As√≠ que, aunque suene complejo, EKS brinda facilidades para hacerlo un servicio atractivo y una soluci√≥n productiva, segura y efectiva en costo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PD:&lt;/em&gt; Si tienes subscripci√≥n de A Cloud Guru, te invito a mi curso &lt;a href="https://acloudguru.com/course/a-practical-guide-to-amazon-eks"&gt;A Practical Guide To Amazon EKS&lt;/a&gt;, donde muchos de estos temas los cubrimos &lt;strong&gt;practicando!&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>eks</category>
      <category>kubernetes</category>
      <category>aws</category>
      <category>spanishaws</category>
    </item>
    <item>
      <title>5 Tips To Increase Your Programming Productivity</title>
      <author>Rezaul karim</author>
      <pubDate>Mon, 14 Jun 2021 19:40:06 +0000</pubDate>
      <link>https://dev.to/rezaulkarim/5-tips-to-increase-your-programming-productivity-50m0</link>
      <guid>https://dev.to/rezaulkarim/5-tips-to-increase-your-programming-productivity-50m0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIoGizvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698860639/5cbBBA8a-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIoGizvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698860639/5cbBBA8a-.jpeg" alt="working-time-planning-work-schedule-organize-works-productivity-tasks-time-management-illustration-set_102902-1897.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-productivity"&gt;
  &lt;/a&gt;
  Programming Productivity
&lt;/h2&gt;

&lt;p&gt;Hello everybody. So today we are going to discuss about 5 tips to increasing programming productivity. Tip number one&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-leverage-the-power-of-habit"&gt;
  &lt;/a&gt;
  1. Leverage The Power of Habit:
&lt;/h3&gt;

&lt;p&gt;Leverage The Power of Habit is to build productive routines. I asked you guys for book recommendations on Twitter and one of the books I got was The Power of Habit now, I actually started listening to the audio book of it and I thought it was really interesting because it helped me understand how I became more productive in the past years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cz6TLwWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698978989/03_dHeZEa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cz6TLwWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698978989/03_dHeZEa.jpeg" alt="top-view-break-bad-habit-concept_23-2148540741.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now that I can pinpoint that it was because I was building A habit out of the things I want to be productive on that. I was able to make a routine and start cranking out code videos work stuff. You name it? Now essentially what you want to do is for the next 21 days do something every day. This could be coding flossing or whatever you want that you think is productive and after 21 days will be so hard for you to stop that‚Äôll become second nature to you tip. Number two,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-start-multitasking"&gt;
  &lt;/a&gt;
  2. Start multitasking:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3oOsjI4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699032433/vCOmfxoUN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3oOsjI4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699032433/vCOmfxoUN.jpeg" alt="workforce-organization-management_335657-3158.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try Start multitasking the mundane stuff for things that doesn‚Äôt require much concentration to do. Do something else that‚Äôs more productive while you do that. It would save you surprisingly a lot of time. For example when I clean my room or do something super boring that I usually do not like at all. I would just you know, whip out an audio book and just start listening to it and that way I can actually learn stuff. Why do those mundane tasks? Another example would be when I brush my teeth, I would read. Else or I would check my social media accounts and then little by little I‚Äôm actually saving a lot of time in the long run. Tip number three,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-keep-yourself-busy-and-accountable-with-deadlines-and-stakeholders"&gt;
  &lt;/a&gt;
  3. keep yourself busy and accountable with deadlines and stakeholders:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpSexezo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699074394/OYPrIfJttE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpSexezo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699074394/OYPrIfJttE.jpeg" alt="project-deadline-job-organization-poster_107791-1627.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now. One of the things I like to do is actually to fill out my calendar with lots of focus blocks and deadlines. That way I barely have time to procrastinate the deadlines I set for myself or even better that I promise to other people will keep me accountable for actually Completing the projects that way I can‚Äôt procrastinate because I just have a lot to finish and a lot of people are depending on me to finish them. Tip number four&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-when-taking-a-break-dont-think-about-work-just-have-fun"&gt;
  &lt;/a&gt;
  4. When taking a break don‚Äôt think about work just have fun:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HO5yaaaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699128049/m3z5P0XqO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HO5yaaaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699128049/m3z5P0XqO.jpeg" alt="happy-tiny-business-people-dancing-having-fun-drinking-wine-corporate-party-team-building-activity-corporate-event-idea-concept-pinkish-coral-bluevector-isolated-illustration_335657-1414.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is important because I see a lot of people have faster productive time, but they also have faster fun time. For example. I see a lot of people studying while watching TV shows that‚Äôs terrible because you end up not enjoying the show nor learning the things you‚Äôre trying to learn. So what I give myself a break I make sure I don‚Äôt think about anything else. I love TV shows. So I turn off my phone and immerse myself and surprisingly you‚Äôll actually learn a lot more by doing that like, for example, I love to watch Pop videos and actually On the law of cinematography by dissecting these videos and just focusing on it. But if I was quoting while watching these Pop videos, I‚Äôd never appreciate them as much. Tip number 5&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-exercise-to-increase-programming-productivity"&gt;
  &lt;/a&gt;
  5. Exercise to increase programming productivity!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4TvAmes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699157568/3EEUnJTM2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4TvAmes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623699157568/3EEUnJTM2.jpeg" alt="horizontal-shot-female-hand-being-raised-while-making-physical-exercises-with-weighting-agent-being-isolated-yellow-background-weight-loss-fitness-concept_295783-11709.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I‚Äôm a big fan of weightlifting so I might be biased here but I truly believe that exercising will make you sharper exercise. In helps you relieve stress because it releases endorphins which are feel good hormones. That way allows you to refresh your mind and be a lot more productive throughout the day. It doesn‚Äôt even need to be super intense. As long as you get your heart rate up and work on moving your body more you feel the benefits right away exercise is a powerful habit and can be a good Hammer too, you know Teaching you to how to build these productive habits. So I highly recommend going to the gym or exercising regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-word-about-increasing-your-programming-productivity"&gt;
  &lt;/a&gt;
  Last word about increasing your programming productivity!
&lt;/h2&gt;

&lt;p&gt;So in conclusion, the most important point I want to get across is that if you really want to be good at something or you want to change an aspect of your life then make it a habit.And improve your programming productivity. Now you might say. Oh, yeah, it‚Äôs not as easy as it sounds though. And you‚Äôre absolutely right.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You know building habits extremely hard and I find it hard myself. But if you really care about thing you want to achieve then you will put the effort into it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and that‚Äôs why I want to keep myself accountable for what I say. So basically choose something that you always want to do or something that you want to get good at and together. We‚Äôll make it a new habit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/5-tips-to-increase-programming-productivity/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Code Review process</title>
      <author>leslysandra</author>
      <pubDate>Mon, 14 Jun 2021 19:27:21 +0000</pubDate>
      <link>https://dev.to/codeinspector/code-review-process-n8d</link>
      <guid>https://dev.to/codeinspector/code-review-process-n8d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Code Review&lt;/strong&gt; is indeed a critical process during software development. Among different types of processes that can exist for doing software development and code reviewing, I'd like to highlight some, here.&lt;/p&gt;

&lt;p&gt;This one (image below) might be very well known among many developers. Create another &lt;em&gt;branch&lt;/em&gt; for development, work there all changes and updates, and... &lt;strong&gt;pull request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch.&lt;/em&gt; &lt;a href="https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"&gt;source: Docs GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are noted by the team (or reviewer) about the pull request, there is the &lt;em&gt;"Code Reviews" and "Commits"&lt;/em&gt;&lt;br&gt;
All those reviews and checks are very important just before merging to the &lt;strong&gt;master branch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8AG9WXoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og536i6g0zshfbdgpgo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AG9WXoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og536i6g0zshfbdgpgo9.png" alt="Code Review process"&gt;&lt;/a&gt; &lt;a href="https://www.researchgate.net/publication/343576513_Code_Reviewer_Recommendations_as_a_Multi-Objective_Problem_Balancing_Expertise_Availability_and_Collaborations"&gt;Image Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, that avoiding (forgetting, ignoring,...) code review can help adding more and more to your &lt;strong&gt;technical debt&lt;/strong&gt;. (&lt;a href="https://dev.to/codeinspector/technical-debt-a-software-epidemic-57bp"&gt;Read here&lt;/a&gt; for more info about tech debt)&lt;/p&gt;

&lt;p&gt;Let's check one more example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-Lx2EVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1179bzpla6mj15r8682f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-Lx2EVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1179bzpla6mj15r8682f.png" alt="Investigating the effectiveness of peer code review in distributed software development based on objective and subjective data"&gt;&lt;/a&gt; &lt;a href="https://www.researchgate.net/publication/328541762_Investigating_the_effectiveness_of_peer_code_review_in_distributed_software_development_based_on_objective_and_subjective_data"&gt;Image reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I like from the example above is the importance of &lt;em&gt;"peer review"&lt;/em&gt; and &lt;em&gt;"automated review process"&lt;/em&gt;.&lt;br&gt;
We should not forget the importance of team work during the software development process. Also, &lt;em&gt;"automating"&lt;/em&gt; the coding review helps you learn more about your coding style as well as remembering good coding practices for a great software project legacy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I know there are other plenty processes for software development and code review&lt;/em&gt; that might also be customized for each team, project, etc. What is your process?&lt;/p&gt;

&lt;p&gt;Psss, for automated code review, check out &lt;a href="http://code-inspector.com/"&gt;Code Inspector&lt;/a&gt; to get started for free analyzing your code quality and calculating your tech debt in your projects at GitHub or GitLab or BitBucket.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>software</category>
      <category>github</category>
    </item>
    <item>
      <title>Making a basic deepCopy function in JS</title>
      <author>Lakshya Thakur</author>
      <pubDate>Mon, 14 Jun 2021 19:27:16 +0000</pubDate>
      <link>https://dev.to/lapstjup/making-a-basic-deepcopy-function-in-js-1hof</link>
      <guid>https://dev.to/lapstjup/making-a-basic-deepcopy-function-in-js-1hof</guid>
      <description>&lt;p&gt;By default in JS, if we try to make a copy of an object, say &lt;code&gt;obj&lt;/code&gt;, then either of the two helps us create &lt;strong&gt;Shallow&lt;/strong&gt; copies :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.assign({}, obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{...obj}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the notorious yet popular &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; workaround can help us make a deep copy with the following limitations :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;obj&lt;/code&gt; has &lt;strong&gt;methods&lt;/strong&gt;, they won't be copied.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;obj&lt;/code&gt; has &lt;strong&gt;circular references&lt;/strong&gt;, the above would simply throw an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives us an opportunity to make our own &lt;code&gt;deepCopy&lt;/code&gt; function which can deal with the above limitations.&lt;/p&gt;

&lt;p&gt;Let's dive into its epic creation via a conversation between &lt;strong&gt;Shalu&lt;/strong&gt; and &lt;strong&gt;Deepu&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - I had a JS interview today and the interviewer asked me to build a custom &lt;code&gt;deepCopy(obj)&lt;/code&gt; function to do guess what ? DEEP COPYING !!! But I only knew &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; workaround which clearly had limitations as pointed by the interviewer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Don't worry. We will try to implement our own basic &lt;code&gt;deepCopy(obj)&lt;/code&gt; function which also takes care of those limitations. We will start simple, and gradually transform our function for the requirements. Take a look at this function :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;deepCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Well that's not gradual at all....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; -  Okay wait....&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08OXkBly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EjuLKFkVcAEgU7p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08OXkBly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EjuLKFkVcAEgU7p.jpg" alt="let me explain"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - We are initializing &lt;code&gt;newObj&lt;/code&gt; to an empty &lt;code&gt;Array&lt;/code&gt; or a &lt;code&gt;POJO&lt;/code&gt; (Plain Old JavaScript Object) on basis of whether &lt;code&gt;obj&lt;/code&gt; is an array or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;deepCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose &lt;code&gt;obj&lt;/code&gt; was &lt;code&gt;{ name:'Saitama', age:'26' }&lt;/code&gt;, then &lt;code&gt;Object.entries(obj)&lt;/code&gt; would return an array&lt;code&gt;[ ['name','Saitama'],['age','26'] ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we are looping over de-structured &lt;code&gt;key&lt;/code&gt;-&lt;code&gt;value&lt;/code&gt; pair from this array and performing a conditional check. &lt;/p&gt;

&lt;p&gt;The check is that if type of &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;object&lt;/code&gt;, then assign the result of &lt;code&gt;deepCopy(value)&lt;/code&gt; to &lt;code&gt;newObj[key]&lt;/code&gt; else just assign &lt;code&gt;value&lt;/code&gt; itself. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Wait a minute !!! We are calling &lt;code&gt;deepCopy(...)&lt;/code&gt; from within &lt;code&gt;deepCopy(...)&lt;/code&gt;. Isn't that recursion ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhqMj6tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/4a/cb/83/4acb83efaab972a7bb25ec62a333753f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhqMj6tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/4a/cb/83/4acb83efaab972a7bb25ec62a333753f.jpg" alt="goddamn right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This use-case requires recursion. We don't know how many layers of nested objects our main &lt;code&gt;obj&lt;/code&gt; might have. We only know that if the corresponding &lt;code&gt;value&lt;/code&gt; for a &lt;code&gt;key&lt;/code&gt; is not of type &lt;code&gt;object&lt;/code&gt;, we can safely put the same &lt;code&gt;key&lt;/code&gt;-&lt;code&gt;value&lt;/code&gt; pair in our &lt;code&gt;newObj&lt;/code&gt;. For the rest, we need to call &lt;code&gt;deepCopy(value)&lt;/code&gt; again. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - But wait !!! What about &lt;strong&gt;Functions&lt;/strong&gt; ? They are also JS Objects only right ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1DekgDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/54099479.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1DekgDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/54099479.jpg" alt="obama you are right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They indeed are but their &lt;code&gt;typeof&lt;/code&gt; is &lt;code&gt;function&lt;/code&gt;. And this particular thing really works for us since we only need to assign these functions as &lt;code&gt;value&lt;/code&gt; to a particular &lt;code&gt;key&lt;/code&gt; and not worry about any nesting which is in the case of &lt;code&gt;{ }&lt;/code&gt; or &lt;code&gt;[ ]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - So this is it right ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Well not quite yet. The above will fail tragically in the case of circular references.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isB3og1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/d2ZbrRZxocUzcakM/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isB3og1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/d2ZbrRZxocUzcakM/200.gif" alt="no failure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1-AiSMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://66.media.tumblr.com/aaa2ab7bebab006f26602038121e4b6e/tumblr_o5abkii8SS1tfbtrwo1_400.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1-AiSMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://66.media.tumblr.com/aaa2ab7bebab006f26602038121e4b6e/tumblr_o5abkii8SS1tfbtrwo1_400.gif" alt="why tell me why"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Remember how we are recursing whenever the type of &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;object&lt;/code&gt; ? Now consider that after 3 depths of recursion, we arrive at a &lt;code&gt;key&lt;/code&gt; whose &lt;code&gt;value&lt;/code&gt; is again the main &lt;code&gt;obj&lt;/code&gt; i.e. there is a circular reference from a nested &lt;code&gt;key&lt;/code&gt; to the main &lt;code&gt;obj&lt;/code&gt; itself. This will result in an infinite loop of menace !!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xlGljWDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/U2BASTIsaw8WQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xlGljWDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/U2BASTIsaw8WQ/giphy.gif" alt="infinity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Oh damn!!! How would you handle this ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Well let's see what do we have at disposal. We need a mechanism to not recurse over already processed or seen object references. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Cool so let's make a new obj, say , &lt;code&gt;const seen = { }&lt;/code&gt; and use it as a dictionary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Well we need object references as key and &lt;code&gt;{ }&lt;/code&gt; only takes &lt;strong&gt;strings&lt;/strong&gt; as &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUogqOfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.kym-cdn.com/entries/icons/original/000/027/475/Screen_Shot_2018-10-25_at_11.02.15_AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUogqOfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.kym-cdn.com/entries/icons/original/000/027/475/Screen_Shot_2018-10-25_at_11.02.15_AM.png" alt="Pikachu meme face"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - We can make use of &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Set&lt;/code&gt; here with the latter making more sense. And to take things up a notch, let's make use of &lt;code&gt;WeakSet&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Why &lt;code&gt;WeakSet&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Because &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"&gt;MDN&lt;/a&gt; says so !!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed. WeakSets are ideal for this purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Alright I am excited for the final code &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jdNvlaBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/pUs87dXYIIrTy/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdNvlaBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/pUs87dXYIIrTy/source.gif" alt="excited"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgF-FzoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/fxsc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgF-FzoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/fxsc.gif" alt="here we go"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakSet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; - Damn that's quite big now. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deepu&lt;/strong&gt; - Well the flow is still simple. What we now did is initialize a &lt;code&gt;WeakSet&lt;/code&gt; by the name &lt;code&gt;seen&lt;/code&gt; inside &lt;code&gt;deepCopy(...)&lt;/code&gt;. And since we always needed access to &lt;code&gt;seen&lt;/code&gt; while recursing, we extract all our recursion logic inside this &lt;code&gt;logic(...)&lt;/code&gt; function. Also note we have applied the check using &lt;code&gt;seen&lt;/code&gt; for the &lt;code&gt;obj&lt;/code&gt; reference and if it doesn't exist, we add it to &lt;code&gt;seen&lt;/code&gt;. Else, we don't bother performing the &lt;strong&gt;for loop&lt;/strong&gt; logic for it and return the &lt;code&gt;obj&lt;/code&gt; as it is. At the end of &lt;code&gt;deepCopy(...)&lt;/code&gt; function we call &lt;code&gt;logic(obj)&lt;/code&gt; (which will internally recurse as needed) as well as return its result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shalu&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynHte-4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://lifesfinewhine.com/wp-content/uploads/2018/10/graphic-post.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynHte-4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://lifesfinewhine.com/wp-content/uploads/2018/10/graphic-post.gif" alt="wow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you everyone who read it till here. This is an implementation that I have tried without referring anything online with the mindset that how will I do this if asked in an interview. Obviously the flow will be the same minus the incredible gifs üòâ and you are free to evaluate me as an interviewer&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-fancy-reduce-edit"&gt;
  &lt;/a&gt;
  BONUS - Fancy Reduce edit
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakSet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>uiweekly</category>
      <category>concepts</category>
    </item>
    <item>
      <title>Coding Boot-camps vs College vs Self Taught</title>
      <author>Ankur Tyagi</author>
      <pubDate>Mon, 14 Jun 2021 19:08:03 +0000</pubDate>
      <link>https://dev.to/tyaga001/coding-boot-camps-vs-college-vs-self-taught-2fdh</link>
      <guid>https://dev.to/tyaga001/coding-boot-camps-vs-college-vs-self-taught-2fdh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#coding-bootcamps-vs-college-vs-self-taught"&gt;
  &lt;/a&gt;
  Coding Bootcamps vs College vs Self Taught
&lt;/h1&gt;

&lt;p&gt;There are many possible paths to a career in software development. &lt;/p&gt;

&lt;p&gt;However, the choice will impact the amount of time you spend studying and the cost of your education. &lt;/p&gt;

&lt;p&gt;It is worth spending some time deciding which one is right for you.&lt;/p&gt;

&lt;p&gt;These days, you can define three different primary paths from a starting point to a career in development.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coding Bootcamps.&lt;/li&gt;
&lt;li&gt;Self-Taught.&lt;/li&gt;
&lt;li&gt;College. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these three paths open to you, you‚Äôre left with a decision: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which one should you pursue?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Coding bootcamps offer a range of courses where students can learn the skills they need through a comprehensive curriculum in a shortened period of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#coding-boot-camps-usually-run-for-several-weeks-although-there-are-boot-camps-that-can-run-for-a-year"&gt;
  &lt;/a&gt;
  Coding boot camps usually run for several weeks, although there are boot camps that can run for a year.
&lt;/h3&gt;

&lt;p&gt;There is one advantage that boot camps offer that universities are still working towards catching up.&lt;/p&gt;

&lt;p&gt;Pretty much every single popular coding boot camp currently active has a major focus on the current trending technologies, &lt;/p&gt;

&lt;p&gt;Such as React, Vue, MongoDB, Express, and the like.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And some boot camp offers 1 on 1 mentorship from real programmers that work in the field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so students get real-time feedback on relevant topics that are happening.&lt;/p&gt;

&lt;p&gt;And that is one great benefit that universities can not offer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;College is, well, college. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#you-can-earn-a-degree-based-on-a-selected-major-and-complete-its-requirements"&gt;
  &lt;/a&gt;
  You can earn a degree based on a selected major and complete its requirements.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I personally attended college and went through a 4-year plan in order to get my degree in Computer Science.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The College curriculum has changed very little during the past decade. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know because I talk to many programmers all the time, and the ones that are recent graduates are still debating whether C++ or Java is the king of code.&lt;/p&gt;

&lt;p&gt;Ask yourself the following questions, if you are thinking of attending a university program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What field am I looking to get into after?&lt;/li&gt;
&lt;li&gt;Do I plan to continue with higher education.&lt;/li&gt;
&lt;li&gt;Do I want to teach at some point?&lt;/li&gt;
&lt;li&gt;Do companies that I want to work for require a degree?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The programming language you decide on plays a huge role in your future prospects and your ability to progress both beyond your education and in the job market.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, JavaScript gives you a good opening into both the front-end and back-end development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#selftaught-developers-can-learn-any-language-that-interests-them"&gt;
  &lt;/a&gt;
  Self-Taught developers can learn any language that interests them.
&lt;/h3&gt;

&lt;p&gt;Bootcamp developers are slightly more restricted.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;College developers get the most structured and detailed education in their languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rising costs of education are on every student‚Äôs mind these days&lt;/p&gt;

&lt;p&gt;Self-Taught students tend to spend the least amount of money on their educations.&lt;/p&gt;

&lt;p&gt;Bootcamp students generally pay a small fee to purchase courses or enrollment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Colleges are usually the most expensive option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Self-Taught developers don‚Äôt necessarily have a duration to their programs, because their programs last as long as they‚Äôre interested in learning&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And, to some extent, we‚Äôre all self-taught.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pick the right languages &amp;amp; study in the right way, you can be job-ready in under a year.&lt;/p&gt;

&lt;p&gt;Bootcamps tend to last anywhere from a few weeks to a few months. &lt;/p&gt;

&lt;p&gt;Some boot camps are longer and more structured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;College programs range from two-year degrees to four-year degrees and more.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-right-for-you"&gt;
  &lt;/a&gt;
  What's right for you?
&lt;/h2&gt;

&lt;p&gt;That's the most important question you can ask. &lt;/p&gt;

&lt;p&gt;Because there is no "wrong" answer technically.&lt;/p&gt;

&lt;p&gt;Just like there is no wrong answer between learning to ride a skateboard or a bicycle. &lt;/p&gt;

&lt;p&gt;It depends.&lt;/p&gt;

&lt;p&gt;While in the past companies required degrees from 4-year universities (minimum), there are many more companies these days that have gotten rid of such requirements.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have seen plenty of boot camp graduates receive offer letters from startups to the biggest tech companies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you do the work and you bring the skills, there is no reason why the answer would be otherwise.&lt;/p&gt;

&lt;p&gt;Whichever route you choose, you really just have to go all in and embrace whatever it demands of you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The answer to this question remains a personal choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading. &lt;/p&gt;

&lt;p&gt;If you like this you might be you are interested in my eBook as well.&lt;/p&gt;

&lt;p&gt;I have recently written a book for developer growth &amp;amp; shared my 11+ years of experience.&lt;/p&gt;

&lt;p&gt;Grab the book now at a discounted price... &lt;a href="https://gumroad.com/l/nextgendev/grow"&gt;ThePrimeGuide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter üëâ &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Top Programming Languages in 2021</title>
      <author>Danish Saleem</author>
      <pubDate>Mon, 14 Jun 2021 18:24:19 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/top-programming-languages-in-2021-1mbd</link>
      <guid>https://dev.to/mrdanishsaleem/top-programming-languages-in-2021-1mbd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is a well-known name. Since its release in 2014, it is growing rapidly and maintaining its place in the list of top 10 striking programming languages 2021. It is developed by Microsoft. Well, it has emerged in response to growing dissatisfaction with JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency While Rust is syntactically similar to C++ one thing that it can guarantee is memory safety by using a borrow checker to validate references.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; is trending nowadays like never before. It is the biggest competitor to JavaScript. Especially because of the rising trend of AI. Most, often, Python is used in Data Science, Machine Learning, Web Development, Computer Science Education, Computer Vision, and Image Processing, Game Development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and pretty much everything else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kotlin"&gt;
  &lt;/a&gt;
  Kotlin
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; was developed by the Jet Brains team in an attempt to find &lt;strong&gt;&lt;em&gt;something better than Java&lt;/em&gt;.&lt;/strong&gt; Many experts claim that the goal has been achieved. Like Go, Kotlin cannot be called the trendist programming language. But statistics show that demand is growing. The effortless interoperation between Java and Kotlin makes Android development faster and enjoyable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go"&gt;
  &lt;/a&gt;
  Go
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; is the least known of all the programming languages, but that doesn't mean it is something you neglect. It was developed by Google in 2007 for APIs and web applications. In the past few years, Go has become one of the fastest-growing programming languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dart.dev/"&gt;Dart&lt;/a&gt; is a client-optimized programming language for apps on multiple platforms. It was developed by Google and is used to build mobile, desktop, server, and web applications. Dart is an object-oriented, class-based, garbage-collected language with C-style syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ccc"&gt;
  &lt;/a&gt;
  C/C++/C
&lt;/h3&gt;

&lt;p&gt;Yes, these are three different programming languages. But, as we said the main focus is the scope. &lt;a href="https://www.youtube.com/watch?v=KJgsSFOSQv0&amp;amp;ab_channel=freeCodeCamp.org"&gt;C&lt;/a&gt;/&lt;a href="https://www.w3schools.com/cpp/"&gt;C++&lt;/a&gt;/&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/"&gt;C#&lt;/a&gt; are equally often used for game development. Not only in Gaming Industry but Embedded applications such as robotics, Operating systems, drivers, Desktop applications such as graphics suites, desktop word processors, etc. uses this language.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>1NF and 2NF</title>
      <author>hebaShakeel</author>
      <pubDate>Mon, 14 Jun 2021 18:17:24 +0000</pubDate>
      <link>https://dev.to/hebashakeel/1nf-and-2nf-2dbj</link>
      <guid>https://dev.to/hebashakeel/1nf-and-2nf-2dbj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Normalization&lt;/strong&gt;: It is a way to reduce/minimize data redundancy (repetition of data). It can be achieved by splitting the table into many tables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Normal Form (1NF)&lt;/strong&gt;:&lt;br&gt;
-&amp;gt; It is the property of converting ER Diagram into the Relational Database.&lt;br&gt;
-&amp;gt; The Relational Database is implicitly in 1NF.&lt;br&gt;
-&amp;gt; All attributes should be atomic [ only one value in a tuple is allowed].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgBXOiJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xriheeqs7h5usyss8c0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgBXOiJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xriheeqs7h5usyss8c0i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Here, SMobile has multiple values which are not allowed. They have to be taken individually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach-1&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yS10TTE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eun6yu9pt54uu5aibg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yS10TTE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eun6yu9pt54uu5aibg2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This approach creates a lot of redundancy in the table. Therefore it is not a suitable approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach-2&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C33VblB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkmeqihmwlef8n1ktpq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C33VblB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkmeqihmwlef8n1ktpq7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This approach also has redundancy but less when compared to the previous Approach. This is because the tables have now been split into two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prime Attributes(Key):&lt;/strong&gt;&lt;br&gt;
Those attributes which participate in the Candidate key.&lt;br&gt;
&lt;strong&gt;Example 1&lt;/strong&gt;&lt;br&gt;
R(ABCD), CKs: {A, BD}&lt;br&gt;
Therefore PA = {A,B,D}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
R(ABCDEFG), CKs: {AB, BC, CD, F}&lt;br&gt;
Therefore PA = {A,B,C,D,F}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-Prime Attributes(Non-Key):&lt;/strong&gt;&lt;br&gt;
Those attributes which do not participate in Candidate Key.&lt;br&gt;
&lt;strong&gt;Example 1&lt;/strong&gt;&lt;br&gt;
R(ABCD), CKs: {A, BD}&lt;br&gt;
Therefore NPA = {C}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
R(ABCDEFG), CKs: {AB, BC, CD, F}&lt;br&gt;
Therefore NPA = {E,G}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Partial Dependency:&lt;/strong&gt;&lt;br&gt;
If subset of any Candidate Key derives a non-key attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
R(ABCD) FDs : {AB-&amp;gt;CD, B-&amp;gt;D}&lt;br&gt;
CK =&amp;gt; {AB}&lt;br&gt;
B-&amp;gt;D, B is a subset of AB and it derives non-key, therefore it is a partial dependency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Normal Form (2NF):&lt;/strong&gt;&lt;br&gt;
=&amp;gt; If a relation 'R' is in &lt;strong&gt;1NF&lt;/strong&gt; (and)&lt;br&gt;
=&amp;gt; If every &lt;strong&gt;non-prime attribute&lt;/strong&gt; is fully dependent on any complete CK (or) No &lt;strong&gt;Partial Dependency&lt;/strong&gt; exists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allowed in 2NF:&lt;/strong&gt;&lt;br&gt;
=&amp;gt; Non-Prime determines Non-Prime&lt;br&gt;
=&amp;gt; Non-Prime determines Prime&lt;br&gt;
=&amp;gt; Prime determines Prime&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not-Allowed in 2NF:&lt;/strong&gt;&lt;br&gt;
=&amp;gt; Prime determines Non-Prime&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Why I'm dropping WordPress  for Strapi hopefully forever</title>
      <author>Antonio Djigo</author>
      <pubDate>Mon, 14 Jun 2021 17:56:43 +0000</pubDate>
      <link>https://dev.to/brownio/why-i-m-dropping-wordpress-for-strapi-hopefully-forever-1knh</link>
      <guid>https://dev.to/brownio/why-i-m-dropping-wordpress-for-strapi-hopefully-forever-1knh</guid>
      <description>&lt;p&gt;Well, it's been a long time since I haven't made any posts, and I just felt like I should speak a bit about this CMS I just had to face at work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ASd0Ukj0y3qMM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ASd0Ukj0y3qMM/giphy.gif" alt="A gif saying hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, you may already know what a CMS and WordPress is. If not, here you go:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A content management system, often abbreviated as CMS, is software that helps users create, manage, and modify content on a website without the need for specialised technical knowledge.&lt;/p&gt;

&lt;p&gt;In simpler language, a content management system is a tool that helps you build a website without needing to write all the code from scratch (or even know how to code at all).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;source: https://kinsta.com/knowledgebase/content-management-system/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then there's WordPress, which basically is &lt;em&gt;THE&lt;/em&gt; CMS of the internet. &lt;a href="https://kinsta.com/wordpress-market-share/"&gt;About 40% of the web is built as a WordPress site.&lt;/a&gt; It is free, really well maintained, and has a lot of features.&lt;/p&gt;

&lt;p&gt;So... why would I be keen to drop it? It sounds great, right?&lt;/p&gt;

&lt;p&gt;I'll order them from 0 (Not a big deal) to 6 (Made me run away):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0ErD3ZBW6vQgYCgE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0ErD3ZBW6vQgYCgE/giphy.gif" alt="A gif whipping WordPress"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-its-written-in-php"&gt;
  &lt;/a&gt;
  0 - It's written in PHP
&lt;/h2&gt;

&lt;p&gt;As I said, not a big deal. With the years of practice I've kind of liked PHP a lot, but, it's far away from becoming my favourite language, as for probably many of you(Right know they are Ruby &amp;amp; Golang).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-it-could-be-faster"&gt;
  &lt;/a&gt;
  1 - It could be faster
&lt;/h2&gt;

&lt;p&gt;WordPress is not deadly slow or anything. Not IF you properly know how to manage it, how it should work, and how to keep it clean. Sadly, 95% of the projects I've worked with that uses WordPress are already beaten to death. Hitting 100 LCP scores so Google Core Vitals boosts your page is kinda hard. It should not be like that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/HdcimOKferlkI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HdcimOKferlkI/giphy.gif" alt="A gif of a lizzard trying to run fast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A fresh one its great, but, once you start adding plugins and functionalities, you really need to know how to handle assets and stuff so it works decently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-its-hard-to-use-the-tools-i-want-in-the-frontend"&gt;
  &lt;/a&gt;
  2 - It's hard to use the tools I want in the front-end
&lt;/h2&gt;

&lt;p&gt;If you've worked with WordPress, you may know how is it to integrate for example React, enqueue scripts, use other front-end frameworks (not that cool). It can be made, for sure, but it is far away from being one of the most pleasant tools to integrate something into. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-constant-updates-and-high-vulnerability"&gt;
  &lt;/a&gt;
  3 - Constant updates and high vulnerability
&lt;/h2&gt;

&lt;p&gt;WordPress is also known for being kind of susceptible to having security issues. One of the reasons is that it is so open (it's an open source project actually), so highly customizable, and there are sooooo many unmantained or flaky plugins around, that it is hard to mantain your site fully secure. Specially when you also have to deal with clients touching around your WordPress guts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Uy4kl92CgVcm4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Uy4kl92CgVcm4/giphy.gif" alt="Guy breaking a door easily gif"&gt;&lt;/a&gt;&lt;/p&gt;
 Your Wordpress security door without WordFence 



&lt;h2&gt;
  &lt;a href="#4-dev-community-treats-wp-devs-like-kids"&gt;
  &lt;/a&gt;
  4 - Dev community treats WP devs like kids
&lt;/h2&gt;

&lt;p&gt;This is probably one of the biggest reasons not many speak about. You've probably heard some dev around saying comments like ("Ugh, WordPress? Never", "Everyone can use that", "That's not programming"... etc etc). WordPress it's way underrated, both inside the community, and in the business field. Probably it's one of the worst-paying jobs you can get as a Developer. And all of this, is because people are not well informed about it. &lt;/p&gt;

&lt;p&gt;The point of WordPress is that it's a tool made so everyone can make its business, website, blog, real. Easily, happily, and without expending too much, and it's exceptional at it, but it also made people think it's kind of worthless when you want "something else", which is a lie, but it's already at the bottom of the well and no one wants to look if it's still worthy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT5LMtZ06eAXSmftYs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT5LMtZ06eAXSmftYs/giphy.gif" alt="Kids laughing at Nelson gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tired-of-always-doing-the-same-thing"&gt;
  &lt;/a&gt;
  5 - Tired of always doing the same thing
&lt;/h2&gt;

&lt;p&gt;Probably, the most disappointing thing of WordPress is that you may feel that you are working in a factory, always doing the same thing. Wax on, Wax off. SEO, Cookies, Add new stuff to the theme, performance, repeat. Always the same thing for every project.&lt;/p&gt;

&lt;p&gt;Also, as WordPress being underrated + not the most loved tool in the Dev Community, big companies and projects decide not to include this tool to its stack. After all, a big percent of the WordPress around are blogs, news, and similar. It's hard to find a project that I'd love if it's made in WP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Kbpi0z9HgyRXrmi791/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Kbpi0z9HgyRXrmi791/giphy.gif" alt="Wax on wax off gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I'll stop here, so I can speak you about the new alternative I found, Strapi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ-OvBOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://softwareengineeringdaily.com/wp-content/uploads/2021/02/strapi-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ-OvBOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://softwareengineeringdaily.com/wp-content/uploads/2021/02/strapi-logo.png" alt="Strapi logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strapi is a headless CMS, which means that it has the power of a CMS, but without depending on a front-end of its own. It will basically work as a REST API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a traditional or monolithic CMS like WordPress, everything is packaged together: the backend is rigidly and intricately linked to the design frontend part of your application. A headless CMS like Strapi focuses on its primary mission: managing content. It does so by storing content in a database, providing an interface to manage content, and exposing it with an API, to make it available to any frontend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hRCrMqXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/Headless_vs_Decoupled_vs_Monolithic_34f1115181.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRCrMqXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/Headless_vs_Decoupled_vs_Monolithic_34f1115181.png" alt="Example of different type of CMS image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WordPress can do this too, yes, but not by default. This is not the reason to flee though.&lt;/p&gt;

&lt;p&gt;It's also really flexible. If you had to deal with WordPress, you may know how tedious it is to work on the structure of the content. First you have to depend on Advance custom fields plugin to create custom contents, registering custom post types, creating relations between them... (ew.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HmPbg-Sv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/CTB_interface_1e57bad46e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HmPbg-Sv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/CTB_interface_1e57bad46e.png" alt="An image of Strapi creating fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you can do with the Advanced Custom Fields plugin for WordPress, you can do it natively in Strapi. It is customisable without twisting the code. You decide on your API and data structure. You can customise anything through the API or editing the files inside your code.&lt;/p&gt;

&lt;p&gt;Also, it is faster. It's made on Node.js, which basically gives you dynamic refresh of pages, and well, &lt;a href="https://www.simform.com/nodejs-vs-php/#speed"&gt;Node.JS is way faster than PHP because it is asynchronous&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my humble opinion, it's prettier than WordPress. For many this would not matter at all, but, for me, it does. It is a personal opinion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UGKMfv-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd2k81pu8r8ikvext93h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UGKMfv-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd2k81pu8r8ikvext93h.png" alt="An image of the Strapi interface"&gt;&lt;/a&gt;&lt;/p&gt;
 An image of the Strapi interface 



&lt;p&gt;The final point that made me decide was that is really easy to integrate with modern tools, like Next.JS, Gatsby, Nuxt, Flutter, Hugo... using GraphQL. See more integrations &lt;a href="https://strapi.io/integrations"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has nothing to envy WordPress. Plugins, highly customizable, free, and open source.&lt;/p&gt;

&lt;p&gt;Check it out at &lt;a href="https://strapi.io/"&gt;https://strapi.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Advanced Kotlin Collection Functionality</title>
      <author>Sebastian Aigner</author>
      <pubDate>Mon, 14 Jun 2021 17:49:10 +0000</pubDate>
      <link>https://dev.to/kotlin/advanced-kotlin-collection-functionality-5e90</link>
      <guid>https://dev.to/kotlin/advanced-kotlin-collection-functionality-5e90</guid>
      <description>&lt;p&gt;This blog post accompanies a video from our &lt;strong&gt;YouTube series&lt;/strong&gt; which you can find on our &lt;a href="https://kotl.in/video"&gt;Kotlin YouTube channel&lt;/a&gt;, or &lt;strong&gt;watch here&lt;/strong&gt; directly!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N4CpLxGJlq0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Today, we are learning about advanced functions that we can use to work with and manipulate all kinds of Kotlin collections!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-predicates-raw-any-endraw-raw-none-endraw-and-raw-all-endraw-"&gt;
  &lt;/a&gt;
  Checking predicates: &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs warm up by having a look at a selection of functions that allow us to check conditions for our collection elements.&lt;/p&gt;

&lt;p&gt;They‚Äôre called &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html"&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html"&gt;&lt;code&gt;none&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html"&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;. Each of them takes a &lt;em&gt;predicate&lt;/em&gt; ‚Äì so a function that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; ‚Äì and checks whether the collection fits this predicate.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we have a group of friends (which is really just a &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;, each featuring a &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, and maybe a &lt;code&gt;driversLicense&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;driversLicense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;friendGroup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we want to check if the group can travel by car, we want to check if &lt;em&gt;any&lt;/em&gt; of them have a driver's license ‚Äì so we use the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html"&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; function. It returns &lt;code&gt;true&lt;/code&gt; if there is &lt;em&gt;at least one element&lt;/em&gt; in our collection for which the predicate returns &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupCanTravel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friendGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driversLicense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As another example, let‚Äôs say we want to check if this group of friends is allowed to enter a club ‚Äì for this, we would need to make sure that &lt;em&gt;none&lt;/em&gt; of the folks in the group are underage!&lt;/p&gt;

&lt;p&gt;Here, we can use the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html"&gt;&lt;code&gt;none&lt;/code&gt;&lt;/a&gt; function, which only returns &lt;code&gt;true&lt;/code&gt; when there is &lt;em&gt;not a single element in our collection&lt;/em&gt; that holds true for our predicate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupGetsInClub&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friendGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;none&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third function in the bunch is the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html"&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt; function. At this point, you can probably spot the pattern ‚Äì &lt;code&gt;all&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if each and every element in our collection matches our predicate. We could use it to check whether all names in our friend group are short:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupHasShortNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friendGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#predicates-for-empty-collections"&gt;
  &lt;/a&gt;
  Predicates for empty collections
&lt;/h3&gt;

&lt;p&gt;While on the topic, let's have a little brain teaser: How do &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt; behave for &lt;em&gt;empty collections&lt;/em&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nobody&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emptyList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// what happens here?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs look at &lt;code&gt;any&lt;/code&gt; first. There is no element that can satisfy the predicate, so it returns &lt;code&gt;false&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driversLicense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same goes for &lt;code&gt;none&lt;/code&gt; ‚Äì there is no function that can violate our predicate, so it returns true:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;none&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; function, however, returns &lt;code&gt;true&lt;/code&gt; with an empty collection. This may surprise you in the first moment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this is quite intentional and sound: You can't name an element that &lt;em&gt;violates&lt;/em&gt; the predicate. Therefore, the predicate has to be true for &lt;em&gt;all elements in the collection&lt;/em&gt; ‚Äì even if there are &lt;em&gt;none&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;This might feel a bit mind-bending to think about at first, but you‚Äôll find that this concept, which is called the &lt;a href="https://en.wikipedia.org/wiki/Vacuous_truth"&gt;vacuous truth&lt;/a&gt;, actually plays very well with checking conditions, and expressing logic in program code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5zdjSFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thg07e0ao215ck2lwm1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5zdjSFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thg07e0ao215ck2lwm1z.png" alt='"Vacuous truth" on Wikipedia'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collection-parts-raw-chunked-endraw-and-raw-windowed-endraw-"&gt;
  &lt;/a&gt;
  Collection parts: &lt;code&gt;chunked&lt;/code&gt; and &lt;code&gt;windowed&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;With our brain freshly teased, let‚Äôs move on to the next topic, and learn about how to break collections into parts!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-chunked-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;chunked&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;If we have a collection that just contains a bunch of items, we can cut up the list into individual chunks of a certain size by using the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/chunked.html"&gt;&lt;code&gt;chunked&lt;/code&gt;&lt;/a&gt; function. What we get back is a list of lists, where each element is a _chunk _of our original list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;objects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"üå±"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üöÄ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üí°"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üêß"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"‚öôÔ∏è"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"ü§ñ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üìö"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chunked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [[üå±, üöÄ, üí°], [üêß, ‚öôÔ∏è, ü§ñ], [üìö]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we break our list of random objects (represented with emojis) apart, using a chunk size of 3.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first &lt;em&gt;element&lt;/em&gt; in our result is in itself a &lt;em&gt;list&lt;/em&gt; which contains our first three objects ‚Äì &lt;code&gt;[üå±, üöÄ, üí°]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second element is once again a chunk, and contains the three elements that follow after that ‚Äì &lt;code&gt;[üêß, ‚öôÔ∏è, ü§ñ]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The last element is also a chunk ‚Äì but since we ran out of elements to fill it with three items, it only contains the book stack - &lt;code&gt;[üìö]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In typical standard library fashion, the &lt;code&gt;chunked&lt;/code&gt; function also provides a little bit of extra power. To immediately transform the chunks we just created, we can apply a &lt;em&gt;transformation function&lt;/em&gt;. For example, we can reverse the order of elements in the resulting lists, without having to do another &lt;code&gt;map&lt;/code&gt; call separately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chunked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// [[üí°, üöÄ, üå±], [ü§ñ, ‚öôÔ∏è, üêß], [üìö]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To summarize: the &lt;code&gt;chunked&lt;/code&gt; function cuts our original collection into lists of lists, where each list has the specified size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-windowed-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;windowed&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;Closely related is the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/windowed.html"&gt;&lt;code&gt;windowed&lt;/code&gt;&lt;/a&gt; function. It also returns a list of lists from our collection. Instead of cutting it up into pieces, however, this function generates a ‚Äúsliding window‚Äù of our collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [[üå±, üöÄ, üí°], [üöÄ, üí°, üêß], [üí°, üêß, ‚öôÔ∏è], [üêß, ‚öôÔ∏è, ü§ñ], [‚öôÔ∏è, ü§ñ, üìö]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first window is once again the first three elements ‚Äì &lt;code&gt;[üå±, üöÄ, üí°]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The next window is &lt;code&gt;[üöÄ, üí°, üêß]&lt;/code&gt; ‚Äì we simply ‚Äúmoved‚Äù our window of size 3 over by one, which includes some overlap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;windowed&lt;/code&gt; function can also be customized. We can change both &lt;em&gt;window&lt;/em&gt; and &lt;em&gt;step&lt;/em&gt; size, the latter being the number of elements that the window should ‚Äúslide along‚Äù for each step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partialWindows&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [[üå±, üöÄ, üí°, üêß], [üí°, üêß, ‚öôÔ∏è, ü§ñ], [‚öôÔ∏è, ü§ñ, üìö], [üìö]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the example above, we can also control whether our result should contain &lt;em&gt;partial windows&lt;/em&gt;. This changes the behavior when we‚Äôve reached the end of our input collection, and we‚Äôre running out of elements.&lt;/p&gt;

&lt;p&gt;With partial windows enabled, we just &lt;em&gt;keep sliding&lt;/em&gt;, and we get the last elements trickling in, in the form of smaller windows, until we get a window which once again only contains the last element from our input collection ‚Äì &lt;code&gt;[‚öôÔ∏è, ü§ñ, üìö], [üìö]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;windowed&lt;/code&gt; also allows us to perform an additional transformation at the end, which can modify the individual windows directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// [[üêß, üí°, üöÄ, üå±], [ü§ñ, ‚öôÔ∏è, üêß, üí°], [üìö, ü§ñ, ‚öôÔ∏è], [üìö]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unnesting-collections-flatten-and-flatmap"&gt;
  &lt;/a&gt;
  Un-nesting Collections: Flatten and Flatmap
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;chunked&lt;/code&gt; and &lt;code&gt;windowed&lt;/code&gt; functions, along with some others all return nested collections ‚Äì lists of lists. What if we want to &lt;em&gt;un-nest&lt;/em&gt; these, turning them back into flat lists of elements? As usual, we do not need to fear, because the standard library has got us covered.&lt;/p&gt;

&lt;p&gt;We can call the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flatten.html"&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/a&gt; function on a collection of collections. As you may suspect, the result is a single list of all the elements that were originally contained inside of our nested collections:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;objects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"üå±"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üöÄ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üí°"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üêß"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"‚öôÔ∏è"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"ü§ñ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üìö"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// [üêß, üí°, üöÄ, üå±, ü§ñ, ‚öôÔ∏è, üêß, üí°, üìö, ü§ñ, ‚öôÔ∏è, üìö]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also a good point to talk about the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flat-map.html"&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; function. &lt;code&gt;flatMap&lt;/code&gt; is like a combination of first using &lt;code&gt;map&lt;/code&gt;, and then using &lt;code&gt;flatten&lt;/code&gt; ‚Äì It takes a lambda which generates a &lt;em&gt;collection&lt;/em&gt; from each of the elements in our input collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lettersInNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Lou"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cyn"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lettersInNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [L, o, u, M, e, l, C, y, n]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the function that we provide creates a &lt;em&gt;list&lt;/em&gt; for each element in our input collection, containing the letters of the original string. Next, that collection of collections gets flattened. As desired, we end up with a plain list of elements ‚Äì the list of characters from the names of the original collection.&lt;/p&gt;

&lt;p&gt;If you are doing an operation on a list, which in turn generates a collection for each one of the input elements, consider if &lt;code&gt;flatMap&lt;/code&gt; can help you simplify your code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combining-collections-raw-zip-endraw-and-raw-unzip-endraw-"&gt;
  &lt;/a&gt;
  Combining collections: &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;So far, we have always looked at a single collection, and what we can do with it. Let's learn about a way to combine two collections, and create a new one from them ‚Äì it's time to &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/zip.html"&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-zip-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;zip&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;Assume we have two collections, where the elements at each index are somehow related. For example, this could be a list of cities in Germany, and we have another list of German license plates that correspond to those cities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;germanCities&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"Aachen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Bielefeld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"M√ºnchen"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;germanLicensePlates&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"AC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"BI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"M"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanCities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [(Aachen, AC), (Bielefeld, BI), (M√ºnchen, M)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, by zipping these two collections, we get a &lt;em&gt;list of pairs&lt;/em&gt;, where each pair contains the elements with the same index from the original two collections.&lt;/p&gt;

&lt;p&gt;Metaphorically, this is similar to a zipper on a jacket, where the teeth match up one by one. We zip together the elements of our collection, and we get pairs of each city and its corresponding license plate.&lt;/p&gt;

&lt;p&gt;For an extra bit of flair, we can also call the &lt;code&gt;zip&lt;/code&gt; function using infix notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanCities&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [(Aachen, AC), (Bielefeld, BI), (M√ºnchen, M)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;zip&lt;/code&gt; can also take a transformation function. We can pass a lambda that receives the values of the individual zipped pairs, and we can apply a transformation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanCities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// [(AACHEN, ac), (BIELEFELD, bi), (M√úNCHEN, m)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-unzip-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;unzip&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;The standard library also contains the inverse function, called &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/unzip.html"&gt;&lt;code&gt;unzip&lt;/code&gt;&lt;/a&gt;, which takes a list of pairs, and splits them back into a pair of two separate lists:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;citiesToPlates&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;germanCities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="py"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;plates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;citiesToPlates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unzip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [AACHEN, BIELEFELD, M√úNCHEN]&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ac, bi, m]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above uses a destructuring declaration to easily access both of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-zipwithnext-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;zipWithNext&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;In a way, &lt;code&gt;zipWithNext&lt;/code&gt; is really a specialized case of the &lt;code&gt;windowed&lt;/code&gt; function we got to know today: Instead instead of zipping together two separate lists element by element, this function takes one collection, and zips each of its items with the one that follows it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zipWithNext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// [(3, 1), (1, 4), (4, 1), (1, 5), (5, 9), (9, 2), (2, 6), (6, 5), (5, 4)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we're zipping together a list of numbers. If we want to check the ‚Äúchange‚Äù ‚Äì how much the value increments or decrements each step ‚Äì we can express this quite elegantly using &lt;code&gt;zipWithNext&lt;/code&gt;. We provide a lambda that receives a pair of one number and the one that follows immediately after:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;changes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zipWithNext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [-2, 3, -3, 4, 4, -7, 4, -1, -1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-aggregations-raw-reduce-endraw-and-raw-fold-endraw-"&gt;
  &lt;/a&gt;
  Custom aggregations: &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;We have finally arrived at the &lt;em&gt;grand finale&lt;/em&gt; for this post ‚Äì functions that help us build custom aggregations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-reduce-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;reduce&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs set the scene with a small callback ‚Äì in the &lt;a href="https://dev.to/kotlin/diving-into-kotlin-collections-587o"&gt;previous post&lt;/a&gt;, we learned about functions like &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, and functions to receive the minimum and maximum elements inside a collection. All of these &lt;em&gt;reduce&lt;/em&gt; our collection to a single value.&lt;/p&gt;

&lt;p&gt;It's possible that we find ourselves in a situation where there‚Äôs no out-of-the-box function for how we want to generate a single value for our collection. For example, we may want to multiply all numbers in a list, instead of summing them.&lt;/p&gt;

&lt;p&gt;In this case, we can rely on the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html"&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; function as a more generic version for aggregating a collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;multiplicativeAggregate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplicativeAggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 129600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the example above, we call the reduce function with a lambda block which receives two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An accumulator, which has the same type as our collection, and&lt;/li&gt;
&lt;li&gt;An individual item from our collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The task of the lambda function is to &lt;em&gt;return a new accumulator&lt;/em&gt;. Each invocation, one after the other, receives not only the &lt;em&gt;current element&lt;/em&gt;, but also the &lt;em&gt;result of the previous calculation&lt;/em&gt;, inside the accumulator.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The function starts with the first element of our collection in the accumulator.&lt;/li&gt;
&lt;li&gt;Then it runs our operation ‚Äì in this example, we multiply the accumulator (which right now is the first number) with the current element (which is the second number).&lt;/li&gt;
&lt;li&gt;We‚Äôve calculated a new value, which will be stored in the accumulator, and used when our function is called once more with the third element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cycle repeats, and we continue to gradually build up the final result in our accumulator. One might even say we‚Äôre &lt;em&gt;accumulating&lt;/em&gt; that result!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9mpIw42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri4o64h51mzhg2cwe4g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9mpIw42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri4o64h51mzhg2cwe4g2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we‚Äôve gone through all the elements in our collection, &lt;code&gt;reduce&lt;/code&gt; returns the final value that‚Äôs inside the accumulator.&lt;/p&gt;

&lt;p&gt;As you can see, with &lt;code&gt;reduce&lt;/code&gt;, we can hide a lot of mechanics for aggregating our collection behind one function call, and stay true to Kotlin‚Äôs concise nature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-fold-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;fold&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;But we can actually go beyond this, and can take this versatility one step further ‚Äì with the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold.html"&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; operation. Remember ‚Äì when we used &lt;code&gt;reduce&lt;/code&gt;, the iteration starts with the first element of our input collection in the accumulator. &lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;fold&lt;/code&gt; function, we get to specify our own accumulator ‚Äì and in fact, it can even have a different type than the items in our input collection! As an example, we can take a list of words, and multiply the number of their characters together using &lt;code&gt;fold&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cherry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;multiplied&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplied&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The underlying mechanism is the same ‚Äì the lambda passed to the &lt;code&gt;fold&lt;/code&gt; function gets called with an accumulator and a value, and calculates a new accumulator. The difference is that we specify the initial value of the accumulator ourselves.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Note that we pass &lt;code&gt;1&lt;/code&gt; as an initial value for our accumulator, and not &lt;code&gt;0&lt;/code&gt;. That‚Äôs because for multiplication, 1 is the &lt;a href="https://en.wikipedia.org/wiki/Identity_element"&gt;neutral element&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; come in a number of other flavors, as well:&lt;/p&gt;

&lt;p&gt;‚Äì the sibling functions &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right.html"&gt;&lt;code&gt;reduceRight&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold-right.html"&gt;&lt;code&gt;foldRight&lt;/code&gt;&lt;/a&gt; change the order of iteration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-or-null.html"&gt;&lt;code&gt;reduceOrNull&lt;/code&gt;&lt;/a&gt; allows you to work with empty collections without throwing exceptions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-fold.html"&gt;&lt;code&gt;runningFold&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-reduce.html"&gt;&lt;code&gt;runningReduce&lt;/code&gt;&lt;/a&gt; don‚Äôt just return a single value representing the final state of the accumulator, but instead return a list of all the intermediate accumulator values as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;This concludes my overview of some advanced collection operations in Kotlin ‚Äì I hope you found this post useful, and have learned something new!&lt;/p&gt;

&lt;p&gt;Maybe you can find a point in your code where a predicate, some zipping, chunking or windowing could come in handy! Or maybe you want to explore by defining your own aggregations functions based on the &lt;code&gt;reduce&lt;/code&gt; or &lt;code&gt;fold&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;To get reminded when new Kotlin content is released, follow us here on &lt;a href="https://dev.to/kotlin"&gt;dev.to/kotlin&lt;/a&gt;, and make sure to follow me on Twitter &lt;a href="https://twitter.com/sebi_io"&gt;@sebi_io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, use this opportunity sure to find the subscribe button and notification bell on our &lt;a href="https://kotl.in/video"&gt;YouTube channel&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Take care!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>programming</category>
      <category>android</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Holy Grail Layout</title>
      <author>mrwolferinc</author>
      <pubDate>Mon, 14 Jun 2021 17:09:02 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/holy-grail-layout-53ob</link>
      <guid>https://dev.to/mrwolferinc/holy-grail-layout-53ob</guid>
      <description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Holy_grail_(web_design)"&gt;Holy Grail Layout&lt;/a&gt; with CSS grid.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/JjWegGJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
  </channel>
</rss>
