<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ü§¨ What‚Äôs your opinion on Linters, Testers, and Prettiers?</title>
      <author>William McGonagle</author>
      <pubDate>Thu, 30 Dec 2021 21:36:37 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/whats-your-opinion-on-linters-testers-and-prettiers-3f1j</link>
      <guid>https://dev.to/williammcgonagle/whats-your-opinion-on-linters-testers-and-prettiers-3f1j</guid>
      <description>&lt;p&gt;I‚Äôve been working on a project recently and a bunch of people suggested that I should start using a testing system. This testing system was working for a while but then someone else suggested that I should start using a linter. The linter ended up breaking all of my testing code, and before long I had spend nearly three hours getting them working together. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fairfield-programming/backend-server/"&gt;Here was the project if you want to check it out&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, I was told that the code was inconsistently formatted, so I needed to add a prettier system. All of my engineers are now telling me that they have lost countless man-hours battling against this new integration system.&lt;/p&gt;

&lt;p&gt;So, I‚Äôm getting rid of it. My entire linter system, code grading, beautifier, etc. is gone. And, I‚Äôm replacing it with &lt;a href="https://github.com/fairfield-programming/eaf-linter/"&gt;my own solution&lt;/a&gt;- if you want something done right, you have to do it yourself. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to hear what struggles you have had with your ‚Äúsystems to boost efficiency‚Äù, or if you think I am completely wrong and should shut up.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Trending Python Projects of the week</title>
      <author>Juan Benitez </author>
      <pubDate>Thu, 30 Dec 2021 21:30:24 +0000</pubDate>
      <link>https://dev.to/juanbenitezdev/trending-python-projects-of-the-week-24j9</link>
      <guid>https://dev.to/juanbenitezdev/trending-python-projects-of-the-week-24j9</guid>
      <description>&lt;p&gt;I wanted to make a compilation of some of the nicest Python projects that have gained popularity on GitHub this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sqlmodel"&gt;
  &lt;/a&gt;
  SQLModel
&lt;/h2&gt;

&lt;p&gt;As his creator defined, SQLModel is a Python library for interacting with SQL databases. It is based on Python type hints, and it uses &lt;a href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt; and &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; internally. We can argue that SQLModel is just a layer on top of Pydantic and SQLAlchemy.&lt;/p&gt;

&lt;p&gt;SQLModel was created by the same person who created &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;, so you can expect a pleasant and flawless integration between both.&lt;/p&gt;

&lt;p&gt;Although SQLModel was launched no more than 4 months ago (at the time of writing this), it already offers many features, and some others are already being developed, I encourage you to give it a try.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tiangolo/sqlmodel"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sqlmodel.tiangolo.com/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-fire"&gt;
  &lt;/a&gt;
  Python Fire
&lt;/h2&gt;

&lt;p&gt;Python Fire is a library designed by Google for automatically generating command-line interfaces (CLIs) from absolutely any Python object, so basically you can create a Python method and generate a CLI from it.&lt;/p&gt;

&lt;p&gt;Here are some examples,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello %s!"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After import &lt;code&gt;fire&lt;/code&gt;, we can use it to generate a CLI from &lt;code&gt;greeting&lt;/code&gt; in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  &lt;span class="c1"&gt;# Hello World!
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Juan&lt;/span&gt;  &lt;span class="c1"&gt;# Hello Juan!
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;  &lt;span class="c1"&gt;# Shows usage information.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this library is really helpful for debugging, developing some Python scripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire/blob/master/docs/using-cli.md"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like to play with CLIs, you should try &lt;a href="https://github.com/tiangolo/typer"&gt;Typer&lt;/a&gt;, another great tool for building CLIs with Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sherlock"&gt;
  &lt;/a&gt;
  Sherlock
&lt;/h2&gt;

&lt;p&gt;This is simple, a Python script for searching usernames across several social networks, how cool is that huh?&lt;/p&gt;

&lt;p&gt;I tried with my username and there are some sites that I don‚Äôt know about, I should look into that‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgF1vBtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkxdvpr6qt44l8fvcobb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgF1vBtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkxdvpr6qt44l8fvcobb.png" alt="sherlock" width="811" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sherlock-project/sherlock"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#changedetectionio"&gt;
  &lt;/a&gt;
  changedetection.io
&lt;/h2&gt;

&lt;p&gt;This is a tool for monitoring websites and get notifications when they change, so if you want to be on top of new information on the sites you like the most, give it a try. &lt;/p&gt;

&lt;p&gt;Some use cases for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Governmental department updates (changes are often only on their websites)&lt;/li&gt;
&lt;li&gt;Products and services have a change in pricing&lt;/li&gt;
&lt;li&gt;New software releases, security advisories when you're not on their mailing list.&lt;/li&gt;
&lt;li&gt;Festivals with changes&lt;/li&gt;
&lt;li&gt;Real estate listing changes&lt;/li&gt;
&lt;li&gt;COVID-19 related news from government websites&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best part about changedetection is that it is open source and you can self-host it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgtlmoon/changedetection.io"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you like this list and leave a comment if you have used some of these tools or if you know about other Python projects gaining popularity.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Pycraft Progress report #6</title>
      <author>Tom Jebbo</author>
      <pubDate>Thu, 30 Dec 2021 21:18:25 +0000</pubDate>
      <link>https://dev.to/pycraftdev/pycraft-progress-report-6-51fl</link>
      <guid>https://dev.to/pycraftdev/pycraft-progress-report-6-51fl</guid>
      <description>&lt;p&gt;&lt;em&gt;This is transferred roughly weekly from my Twitter profile (here: &lt;a href="https://twitter.com/PycraftDev"&gt;https://twitter.com/PycraftDev&lt;/a&gt;) to here on Dev! This is for the week beginning the 20th of December!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can find the latest release of Pycraft (v0.9.3) here: &lt;a href="https://github.com/PycraftDeveloper/Pycraft"&gt;https://github.com/PycraftDeveloper/Pycraft&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can find the latest developer preview of Pycraft (v0.9.4-1) here: &lt;a href="https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.4-1"&gt;https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.4-1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can find the latest feature preview for Pycraft (v0.9.5-0) here: &lt;a href="https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.5-0"&gt;https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.5-0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also find the latest documentation for Pycraft here: &lt;a href="https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/"&gt;https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/&lt;/a&gt; &lt;br&gt;
&lt;em&gt;although be aware there is a lot of changes occurring here, and the link may be subject to change.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#december-20th-2021"&gt;
  &lt;/a&gt;
  December 20th - 2021
&lt;/h2&gt;

&lt;p&gt;Updates! I've been making lots of progress today, I've fixed a lot of bugs and improved the benchmarks section of the program, as it's probably one of the least efficient areas, and there are a lot of really basic things that can be quickly changed that'll make a big difference, but that aside I've had proof today that the update detector code works perfectly (as numpy released an update today), and I've also published the first draft of the documentation today (to as far as I've got) I've written 10,000 words roughly, and I've gone through about 4 of the modules, so I'm making progress, and it's really detailed where necessary, so I hope it'll be helpful, and naturally each update will take less time to write! Lots of progress all around today!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-21st-2021"&gt;
  &lt;/a&gt;
  December 21st - 2021
&lt;/h2&gt;

&lt;p&gt;Well, I have good news, I've finished 2 more modules and am well over half way through one as I speak, the documentation is at least 16, 000 words long at present. The last module I completed I'd say that more than half of the documentation was skipped because it was already known, the solution is working well. I've also been working on bug fixes for Pycraft v0.9.4 as I go through writing the documentation, I've found a few, especially in the benchmark and character customer GUI, and have plans to heavily optimise the benchmark process, I've already been working really hard to improve its effectiveness in this update. Just to note, the documentation I'm writing is for Pycraft v0.9.3 as it's the one currently published and after every release of Pycraft, there will be a very brief pause from development to update the documentation. I've also updated the folks over at Dev, and I have plans to share more content there, but all my time currently is dedicated to Pycraft's documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-22nd-2021"&gt;
  &lt;/a&gt;
  December 22nd - 2021
&lt;/h2&gt;

&lt;p&gt;Today saw the addition of a new method to install Pycraft, using Pipenv, this was brought forward and added by HarryFBP (&lt;a href="https://github.com/HenryFBP"&gt;https://github.com/HenryFBP&lt;/a&gt;) so a massive shoutout there! I've also spent today fixing more bugs in Pycraft, and also work on the documentation for Pycraft, I've published the progress made since I started now on read the docs here: &lt;a href="https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/"&gt;https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/&lt;/a&gt; but once I've finished writing it, I need to restructure the documentation, because it‚Äôs too big to render in GitHub wikis, and not very efficient, so I'll be breaking it down into separate files, instead of loading the whole documentation at once! I've also got plans to change the structure of the documentation internally as at present the link (&lt;a href="https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/"&gt;https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/&lt;/a&gt;) will break the moment I release Pycraft v0.9.4 and its documentation (more updates to GitHub in Pycraft v0.9.4-1 and onwards coming with work on the installer!) so I'll need to fix that somehow. I have finished all the way from the Achievements to Credits (alphabetically) and managed the entire credits menu, and half the one before it in a day, it's one of the larger programs, lots of the files with "utils" on the end will be shorter and quicker. Settings, main and home screen, will probably need a few days each but I'm not sure yet! I aim to be about 45 percent done by Christmas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-23rd-2021"&gt;
  &lt;/a&gt;
  December 23rd - 2021
&lt;/h2&gt;

&lt;p&gt;I'm excited to announce, that I've finished the module "DisplayUtils" in documentation, so expect to see that published tomorrow, also I'm aware that the documentation I published previously was the one before the spell check but in addition, I've been working on animations for Pycraft, this will arrive in Pycraft v0.9.5 with the new start menu (thanks &lt;a class="mentioned-user" href="https://dev.to/demirdogukan"&gt;@demirdogukan&lt;/a&gt;!) and will feature fading in and out of GUIs, and more! I'll share an early prototype tomorrow, there are a few bugs to iron out, but don't worry I‚Äôm focusing on the documentation and Pycraft v0.9.4, but I want Pycraft v0.9.5 to be quick based on how delayed Pycraft v0.9.4 could be, but I don't want to introduce loads of bugs and issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-24th-2021"&gt;
  &lt;/a&gt;
  December 24th - 2021
&lt;/h2&gt;

&lt;p&gt;I've been going through the 'DisplayUtils' module, and it's very long and there is a lot of repeated code, I'm figuring out a way to simplify the whole process, but adding in resize support to Pycraft was a nightmare, in addition I've been going through the documentation, fixing spelling and adding more details where they might be necessary... I've so been working really hard on a text wrapper for Pycraft, I have since the start of December, because I‚Äôd make a solution but then I'd test it, and there may be a few scenarios where it doesn't work well, so then it's back to tweaking it, but I think I'm close, and being able to do this will massively help the credits, 3D game engine and benchmark GUIs where there is large blocks of text to render, which will also mean they are easier to work on and update (I need to update the credits and this should make that a bit easier). I've also as you may have seen, shared a demo of the transition animation between different menus in the GUI, that I've only worked on for a few hours and am very pleased with the result, after the documentation is finished, I'll work on the installer, and then there are a few GUIs that need a bit of optimisation, which I'm noticing as I go through the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-25th-2021"&gt;
  &lt;/a&gt;
  December 25th - 2021
&lt;/h2&gt;

&lt;p&gt;Pycraft progress update time (yes, I did work on Christmas day, but only for a few hours), today saw tweaks to the documentation, and I've published my current progress to read the docs, and restructured the documentation slightly behind the scenes so now when I update the project it should update the documentation suitably with the release of Pycraft v0.9.4! I've also fixed numerous bugs with the game, and removed lines of code that are now irrelevant, and tested the game with higher refresh rates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-26th-2021"&gt;
  &lt;/a&gt;
  December 26th - 2021
&lt;/h2&gt;

&lt;p&gt;lots of progress made today, more work on the documentation, tweaking some lines, planning a way to restructure the documentation so that the entire documentation isn't loaded at one time (because it's really, I‚Äôd big) and also, I've been planning on a way to do the same thing for the GitHub wikis page. I've also been investigating the cause of the issue, and have narrowed it down to 2 lines, and I think I am close to a potential fix, this has been a really frustrating bug and I'll be grateful to be rid of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-27th-2021"&gt;
  &lt;/a&gt;
  December 27th - 2021
&lt;/h2&gt;

&lt;p&gt;Pycraft v0.9.4, the most current update, will feature many things, as a part of that the error screen has been changed heavily simplifying the process to avoid complications and more possible errors, this has been done to help development for the rest of Pycraft, now with details about where the error occurred, this has been done so the project now works with long error messages and the project is simplified somewhat. I fear this may have introduced lots of bugs because it's such a global change but as far as I'm aware, there are no bugs of any kind in Pycraft, but testing will not stop and lots of testing has still to be completed before I come even slightly close to a release in the dev branch of Pycraft v0.9.4-1, which is likely on the cards before the new year, in addition on the bug front, the issue with transitioning between the 2D and 3D game engines and the process being really slow and unresponsive has been fixed, and I've learned a bit more about the bug and will know how to fix it in future in addition to that, I've also cleaned up a few un-needed functions and images, no work on the documentation today, although that will resume soon after the next dev release of Pycraft. I've also today added a new feature to the Visual-Music program, but no update to that is planned now for some time, unless a serious bug occurs there. I've also shortened the 3D game engines basic commands library (either "base" in Pycraft v0.9.3, or "GameEngineWindowUtils" in Pycraft v0.9.4) and done a lot more behind the scene, I've been planning lots as I write documentation, and now I'm finished implementing new features for this stage in Pycraft v0.9.4, but will do bug fixes and then release to the dev channel, then I'll be working on the documentation as I plan the installer, then in the new year. Once the plan for the installer is done and hopefully the documentation is too, I'll be ready to work on that, then I'll be ready to release Pycraft v0.9.4 soon after that! Also, this is a "messy" long update, when we get onto Pycraft v0.9.5 and others, progress will be more linear and less spread out and much more interesting!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>opensource</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>ES2022 Preview: 10 Exciting JavaScript Language Features From 2021</title>
      <author>Lars Grammel</author>
      <pubDate>Thu, 30 Dec 2021 21:07:56 +0000</pubDate>
      <link>https://dev.to/p42/es2022-preview-10-exciting-javascript-language-features-from-2021-4imc</link>
      <guid>https://dev.to/p42/es2022-preview-10-exciting-javascript-language-features-from-2021-4imc</guid>
      <description>&lt;p&gt;JavaScript evolves quickly. In 2021, several &lt;a href="https://www.proposals.es/"&gt;proposals&lt;/a&gt; have moved to Stage 4 of the &lt;a href="https://tc39.es/process-document/"&gt;TC39 process&lt;/a&gt; and will be included in ES2022. They add the following features to JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classes and Instances&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Private instance fields, methods, and accessors&lt;/li&gt;
&lt;li&gt;Existence checks for private fields&lt;/li&gt;
&lt;li&gt;Public static class fields&lt;/li&gt;
&lt;li&gt;Private static class fields and methods&lt;/li&gt;
&lt;li&gt;Static class initialization blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Module Loading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Top-Level &lt;code&gt;await&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Built-in Objects&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error: &lt;code&gt;.cause&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Array, String, and TypedArray: &lt;code&gt;.at()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Object: &lt;code&gt;.hasOwn()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;RegExp: match &lt;code&gt;.indices&lt;/code&gt; ('&lt;code&gt;d&lt;/code&gt;' flag)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post describes each feature, shows an example of how it can be used, and looks at current browser and Node.js support (as of December 2021). Let's get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-instance-fields-methods-and-accessors"&gt;
  &lt;/a&gt;
  Private Instance Fields, Methods, and Accessors
&lt;/h3&gt;

&lt;p&gt;Encapsulation is one of the core principles of object-oriented programming. It is usually implemented using visibility modifiers such as &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The private instance fields, methods, and accessors features [&lt;a href="https://github.com/tc39/proposal-class-fields"&gt;1&lt;/a&gt;, &lt;a href="https://github.com/tc39/proposal-private-methods"&gt;2&lt;/a&gt;] add hard visibility limitations to JavaScript&lt;/strong&gt;. The &lt;code&gt;#&lt;/code&gt; prefix marks a field, method, or accessor in a class as private, meaning that you cannot access it from outside the instances themselves.&lt;/p&gt;

&lt;p&gt;Here is an example of a private field and method; accessors work similarly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// SyntaxError&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;// SyntaxError&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-javascript_classes_private_class_fields"&gt;Most browsers&lt;/a&gt; (Dec 2021 usage: ~90%) and Node.js 12+ support private instance fields. The &lt;a href="https://caniuse.com/mdn-javascript_classes_private_class_methods"&gt;support for private methods and accessors is more limited in browsers&lt;/a&gt; (Dec 2021 usage: ~80%). Node.js has supported the feature since version 14.6. You can &lt;a href="https://blog.saeloun.com/2021/06/24/babel-enables-class-field-and-private-methods.html"&gt;transpile your code with Babel&lt;/a&gt; to use private class fields and methods on environments that don't directly support them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#existence-checks-for-private-fields"&gt;
  &lt;/a&gt;
  Existence Checks For Private Fields
&lt;/h3&gt;

&lt;p&gt;Since trying to access a non-existing private field on an object throws an exception, it needs to be possible to check if an object has a given private field. &lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-private-fields-in-in"&gt;&lt;code&gt;in&lt;/code&gt; operator can be used to check if a private field is available on an object&lt;/a&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;isExampleInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_classes_private_class_fields_in"&gt;browser support for using the &lt;code&gt;in&lt;/code&gt; operator on private fields&lt;/a&gt; is limited (Dec 2021 usage: ~70%). Node.js does not support it. You can &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-private-property-in-object"&gt;transpile usages of the &lt;code&gt;in&lt;/code&gt; operator for private fields with Babel&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-static-class-fields"&gt;
  &lt;/a&gt;
  Public Static Class Fields
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-static-class-features#static-public-fields"&gt;Static class fields&lt;/a&gt; are a convenient notation for adding properties to the class object.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// without static class fields:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// with static class fields:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;idCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-javascript_classes_static_class_fields"&gt;Most browsers&lt;/a&gt; (Dec 2021 usage: ~90%) and Node.js 12+ support public class fields. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-class-fields-and-methods"&gt;
  &lt;/a&gt;
  Private Static Class Fields and Methods
&lt;/h3&gt;

&lt;p&gt;Similar to private instance fields and methods, encapsulation and visibility limitations are helpful on the class level. &lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-static-class-features"&gt;The private static methods and fields feature&lt;/a&gt; adds hard visibility limitations for class-level fields and methods using the &lt;code&gt;#&lt;/code&gt; prefix.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;idCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// static private&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getNextId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// static private&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;idCounter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// instance private&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getNextId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// c1 c2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The browser and Node.js support are similar to the private instance fields and methods above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-class-initialization-blocks"&gt;
  &lt;/a&gt;
  Static Class Initialization Blocks
&lt;/h3&gt;

&lt;p&gt;Sometimes it is necessary or convenient to do more complex initialization work for static class fields. For the private static fields feature from above, this initialization must even happen within the class because the private fields are not accessible otherwise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-class-static-block"&gt;static initializer blocks feature&lt;/a&gt; provides a mechanism to execute code during the class definition evaluation&lt;/strong&gt;. The code in a block statement with the &lt;code&gt;static&lt;/code&gt; keyword is executed when the class is initialized:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;propertyA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// private&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// static initializer block&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someProperty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anotherProperty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_classes_static_initialization_blocks"&gt;browser support for static class initialization blocks&lt;/a&gt; is limited (Dec 2021: ~70%). Node.js does not support it. You can &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-class-static-block"&gt;transpile code with static initializer blocks with Babel&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toplevel-await"&gt;
  &lt;/a&gt;
  Top-Level Await
&lt;/h3&gt;

&lt;p&gt;Async functions and the &lt;code&gt;await&lt;/code&gt; keyword were introduced in ES2017 to simplify working with promises. However, &lt;code&gt;await&lt;/code&gt; could only be used inside &lt;code&gt;async&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-top-level-await"&gt;top-level &lt;code&gt;await&lt;/code&gt; feature for ES modules&lt;/a&gt;&lt;/strong&gt; makes it easy to use &lt;code&gt;await&lt;/code&gt; in CLI scripts (e.g., with &lt;code&gt;.mjs&lt;/code&gt; sources and &lt;a href="https://github.com/google/zx"&gt;zx&lt;/a&gt;), and for dynamic imports and data loading. It extends the &lt;code&gt;await&lt;/code&gt; functionality into the module loader, which means that dependent modules will wait for async modules (with top-level &lt;code&gt;await&lt;/code&gt;) to be loaded.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// load-attribute.mjs &lt;/span&gt;
&lt;span class="c1"&gt;// with top-level await&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://some.url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;someAttribute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.mjs &lt;/span&gt;
&lt;span class="c1"&gt;// loaded after load-attribute.mjs is fully loaded&lt;/span&gt;
&lt;span class="c1"&gt;// and its exports are available&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./load-attribute.mjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Top-level await is &lt;a href="https://caniuse.com/mdn-javascript_operators_await_top_level"&gt;supported on modern browsers&lt;/a&gt; (Dec 2021 usage: ~80%) and Node.js 14.8+. It is only available for ES modules, and it is doubtful that CommonJS modules will ever get top-level await support. Code with top-level &lt;code&gt;await&lt;/code&gt; can be transpiled during the bundling phase to support older browsers, such as &lt;a href="https://webpack.js.org/configuration/experiments/"&gt;Webpack 5 &lt;code&gt;experiments.topLevelAwait = true&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-cause"&gt;
  &lt;/a&gt;
  Error: .cause
&lt;/h3&gt;

&lt;p&gt;Errors are often wrapped to provide meaningful messages and record the error context. However, this means that the original error can get lost. Attaching the original error to the wrapping error is desirable for logging and debugging purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-error-cause"&gt;error cause feature&lt;/a&gt; provides a standardized way to attach the original error to a wrapping error.&lt;/strong&gt; It adds the &lt;code&gt;cause&lt;/code&gt; option to the &lt;code&gt;Error&lt;/code&gt; constructor and a &lt;code&gt;cause&lt;/code&gt; field for retrieving the original error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://service/api/user/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Loading data for user with id &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; failed`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Error: Loading data for user with id 3 failed&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: Failed to fetch&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_builtins_error_cause"&gt;current browser support for the error clause feature&lt;/a&gt; is limited (Dec 2021 usage: ~70%), and it is not available in Node.js yet. You can use the &lt;a href="https://github.com/es-shims/error-cause"&gt;error cause polyfill&lt;/a&gt; to start using the feature today, even in JS environments where it is not supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-string-and-typedarray-at"&gt;
  &lt;/a&gt;
  Array, String, and TypedArray: .at()
&lt;/h3&gt;

&lt;p&gt;Getting elements from the end of an array or string usually involves subtracting from array's length, for example, &lt;code&gt;let lastElement = anArray[anArray.length - 1]&lt;/code&gt;. This requires that the array is stored in a temporary variable and prevents seamless chaining.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-relative-indexing-method"&gt;.at() feature&lt;/a&gt; provides a way to get an element from the beginning (positive index) or the end (negative index) of a string or an array without a temporary variable.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getExampleValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    &lt;span class="c1"&gt;// c&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;       &lt;span class="c1"&gt;// c&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;      &lt;span class="c1"&gt;// h&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// h - no temp var needed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-javascript_builtins_array_at"&gt;The browser support for the .at feature&lt;/a&gt; is currently limited (Dec 2021 usage: ~70%), and it is only available in Node.js 16.6+. You can use the &lt;a href="https://github.com/zloirock/core-js#relative-indexing-method"&gt;.at() polyfill from Core JS&lt;/a&gt; in the meantime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-hasown"&gt;
  &lt;/a&gt;
  Object: .hasOwn()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-accessible-object-hasownproperty"&gt;Object.hasOwn feature&lt;/a&gt; is a more concise and robust way of checking if a property is directly set on an object.&lt;/strong&gt; It is a preferred alternative to using &lt;code&gt;hasOwnProperty&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// preferred&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_builtins_object_hasown"&gt;browser support is currently limited&lt;/a&gt; (Dec 2021 usage: ~70%), and you need Node 16.9+ to use &lt;code&gt;hasOwn&lt;/code&gt; directly. In the meantime there is a &lt;a href="https://github.com/zloirock/core-js/#accessible-objectprototypehasownproperty"&gt;Core JS polyfill for &lt;code&gt;hasOwn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regexp-match-indices-d-flag"&gt;
  &lt;/a&gt;
  RegExp: Match Indices ('d' Flag)
&lt;/h3&gt;

&lt;p&gt;By default, regular expression matches record the start index of the matched text, but not its end index and not the start and end indices of its capture groups. For use cases such as text editor syntax or search result highlighting, having capture group match indices as part of a regular expression match can be helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the &lt;a href="https://github.com/tc39/proposal-regexp-match-indices"&gt;regexp match indices feature ('d' flag)&lt;/a&gt;, the match and capture group indices are available in the &lt;code&gt;indices&lt;/code&gt; array property of the regular expression result.&lt;/strong&gt;&lt;br&gt;
The matched text position and the match indices position are the same, e.g., the full matched text is the first value in the match array and the indices array. The indices of the named captured groups are recorded in &lt;code&gt;indices.groups&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's match one:1.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/match&lt;/span&gt;&lt;span class="se"&gt;\s(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;word&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;digit&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example code has the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;'match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;one:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;index:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;input:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Let's match one:1."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;groups:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;word:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;digit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;indices:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;groups:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="err"&gt;digit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;word:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_builtins_regexp_hasindices"&gt;browser support for the RegExp match indices feature is currently limited&lt;/a&gt; (Dec 2021 usage: ~80%). In Node.js, you can activate the feature with the &lt;code&gt;--harmony-regexp-match-indices&lt;/code&gt; flag, but it is disabled by default. You can use the &lt;a href="https://github.com/rbuckton/regexp-match-indices"&gt;RegExp match indices polyfill&lt;/a&gt; in the meantime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The new JavaScript from 2021 features help make development more convenient and robust, and most of them already work on the latest browsers and Node.js environments.&lt;/p&gt;

&lt;p&gt;However, many users are still on browsers and environments without full ES2022 support. For production use, it is essential to check the target environments and use polyfilling and transpiling as needed or to wait a bit longer before using the new features.&lt;/p&gt;

&lt;p&gt;Happy coding in 2022!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 5 technology books I read in 2021</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Thu, 30 Dec 2021 21:06:15 +0000</pubDate>
      <link>https://dev.to/ibrahimcesar/top-5-technology-books-i-read-in-2021-4b3l</link>
      <guid>https://dev.to/ibrahimcesar/top-5-technology-books-i-read-in-2021-4b3l</guid>
      <description>&lt;p&gt;My top five picks on technological / technical books I read in 2021 and some honorable mentions. I also read some fiction and non-fiction, in fact I finished a great science fiction series, &lt;em&gt;Remembrance of Earth‚Äôs Past&lt;/em&gt; made up of three books: &lt;em&gt;The Three-Body Problem&lt;/em&gt;, &lt;em&gt;The Dark Forest&lt;/em&gt; and &lt;em&gt;Death‚Äôs End&lt;/em&gt; by the Chinese author Liu Cixin, which is one of greatest science fiction series I ever read (I‚Äôm a big fan of Russian literature and science fiction). But for this list I picked the top tech-related ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-your-computer-is-on-fire"&gt;
  &lt;/a&gt;
  5. Your Computer Is On Fire
&lt;/h2&gt;

&lt;p&gt;Edited by Thomas S. Mullaney, Benjamin Peters, Mar Hicks and Kavita Philip&lt;/p&gt;

&lt;p&gt;This book is a collection of powerful essays from a great number of authors: Janet Abbate, Ben Allen, Paul N. Edwards, Nathan Ensmenger, Mar Hicks, Halcyon M. Lawrence, Thomas S. Mullaney, Safiya Umoja Noble, Benjamin Peters, Kavita Philip, Sarah T. Roberts, Sreela Sarkar, Corinna Schlombs, Andrea Stanton, Mitali Thakor, and Noah Wardrip-Fruin. Technology doesn‚Äôt happen in a vacuum. Much is talk about how "tech will change the world", "create experiences". Well, this &lt;strong&gt;is&lt;/strong&gt; intrinsically political. Is about we live, share, trade and connect. Nothing more political than that.&lt;/p&gt;

&lt;p&gt;I would never say judge an essay by its titles, but only take a glance at the titles could give a hint and take your attention. And yes, the essays here are great and direct to the point as the titles make clear. And if you work with technology, I urge you to give this book a chance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part I: Nothing Is Virtual

&lt;ul&gt;
&lt;li&gt;The Cloud Is A Factory&lt;/li&gt;
&lt;li&gt;Your AI Is A Human&lt;/li&gt;
&lt;li&gt;A Network Is Not A Network&lt;/li&gt;
&lt;li&gt;The Internet Will Be Decolonized&lt;/li&gt;
&lt;li&gt;Capture Is Pleasure&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Part II: This Is An Emergency

&lt;ul&gt;
&lt;li&gt;Sexism Is A Feature, Not A Bug&lt;/li&gt;
&lt;li&gt;Gender Is A Corporate Tool&lt;/li&gt;
&lt;li&gt;Siri Disciplines&lt;/li&gt;
&lt;li&gt;Your Robot Isn't Neutral&lt;/li&gt;
&lt;li&gt;Broken Is Word&lt;/li&gt;
&lt;li&gt;You Can't Make Games About Much&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Part III: Where Will The Fire Spread?

&lt;ul&gt;
&lt;li&gt;Code Is Not Empowerment&lt;/li&gt;
&lt;li&gt;Source Code Isn't&lt;/li&gt;
&lt;li&gt;Skills Will Not Set You Free&lt;/li&gt;
&lt;li&gt;Platforms Are Infrastructures On Fire&lt;/li&gt;
&lt;li&gt;Typing Is Dead&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In times like theses in which tech is under (the much needed) public scrutiny, is important to broader our view of technology as "technical-only" and understand the tangled web of political, social and power dynamics in place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-sooner-safer-happier"&gt;
  &lt;/a&gt;
  4. Sooner Safer Happier
&lt;/h2&gt;

&lt;p&gt;One review title on Amazon says &lt;strong&gt;Most honest book I have read in last 4 years&lt;/strong&gt;. I agree. Because it speaks against the so-called &lt;a href="https://martinfowler.com/articles/agile-aus-2018.html"&gt;&lt;em&gt;Agile Industrial Complex&lt;/em&gt;&lt;/a&gt; that broke agile, or well, Agile‚Ñ¢. I already &lt;a href="https://ibrahimcesar.cloud/blog/sooner-safer-happier-antipatterns-and-patterns-for-business-by-jonathan-smart/"&gt;wrote about this book earlier this year&lt;/a&gt; and even made a whole talk around it, which I called &lt;a href="https://dev.toblog/peopleops-integracao-continua-do-time-entrega-continua-de-valor/"&gt;PeopleOps&lt;/a&gt; (content in pt-br) and made a mix with another great book, &lt;strong&gt;Team Topologies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Is a much needed look at Agile landscape that spoke a lot with me and how I see the landscape.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cloud-native-patterns"&gt;
  &lt;/a&gt;
  3. Cloud Native Patterns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://amzn.to/349UqG9"&gt;&lt;strong&gt;Cloud Native Patterns&lt;/strong&gt;: Designing change-tolerant software&lt;/a&gt; by Cornelia Davis is a brilliant book. The historical perspective the author gives us helps build our mental models and see the patterns that we are so deep that we even realize are constructions. Like the "request/response" model that permeates much of our development and the move to more reactive systems like the &lt;a href="https://ibrahimcesar.cloud/blog/event-driven-architectures/"&gt;Event Driven Architectures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;must read&lt;/strong&gt; for everyone in the Cloud field. The patterns covered are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event-driven microservices&lt;/li&gt;
&lt;li&gt;App redundancy&lt;/li&gt;
&lt;li&gt;Application configuration&lt;/li&gt;
&lt;li&gt;The application lifecycle&lt;/li&gt;
&lt;li&gt;Accessing apps&lt;/li&gt;
&lt;li&gt;Interaction redundancy&lt;/li&gt;
&lt;li&gt;Fronting services&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;li&gt;Cloud-native data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-the-cdk-book"&gt;
  &lt;/a&gt;
  2. The CDK Book
&lt;/h2&gt;

&lt;p&gt;In the 2021 I developed &lt;strong&gt;a lot&lt;/strong&gt; with AWS CDK. In fact, I started nothing on AWS without using it. Is a powerful tool.&lt;/p&gt;

&lt;p&gt;I made talks about CDK at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ibrahimcesar/devops-extreme"&gt;DevOps Extreme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ibrahimcesar.cloud/talks/2021-10-21-BrazilJSConf-2021/"&gt;BrazilJS&lt;/a&gt;, &lt;em&gt;the self proclaimed biggest JavaScript conference in the World&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9Gk_7qTkNgs"&gt;AWS Community Day ‚Äî Brazil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And another session on &lt;a href="https://ibrahimcesar.cloud/talks/2021-11-30-TDC-Future/"&gt;TDC Future&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And 2021 was an exceptional year for CDK with a &lt;a href="https://www.youtube.com/watch?v=mwp51yqxmtU"&gt;great spotlight in the work by Matt Coulter&lt;/a&gt; and off course, the launch of CDK v2, which comes with some significant improvements. No more problems with versioning and a model better to understand. The CDK Book &lt;strong&gt;is&lt;/strong&gt; &lt;a href="https://www.dynamodbbook.com/"&gt;The DynamoDB Book&lt;/a&gt; this developer tool deserved.&lt;/p&gt;

&lt;p&gt;Written by &lt;a href="https://twitter.com/mattbonig"&gt;Matthew Bonig&lt;/a&gt;, &lt;a href="https://twitter.com/hoegertn"&gt;Thorsten H√∂ger&lt;/a&gt;, &lt;a href="https://twitter.com/sathyabhat"&gt;Sathyajith Bhat&lt;/a&gt; and &lt;a href="https://twitter.com/nideveloper"&gt;Matt Coulter&lt;/a&gt;, &lt;a href="https://thecdkbook.com/"&gt;The CDK Book&lt;/a&gt; is a comprehensive guide that will give you access to provision and handle the plethora of AWS services.&lt;/p&gt;

&lt;p&gt;Written by &lt;a href="https://twitter.com/mattbonig"&gt;Matthew Bonig&lt;/a&gt;, &lt;a href="https://twitter.com/hoegertn"&gt;Thorsten H√∂ger&lt;/a&gt;, &lt;a href="https://twitter.com/sathyabhat"&gt;Sathyajitha Bhat&lt;/a&gt; and &lt;a href="https://twitter.com/nideveloper"&gt;Matt Coulter&lt;/a&gt;, &lt;a href="https://thecdkbook.com/"&gt;The CDK Book&lt;/a&gt; is an comprehensive guide that will give you access to provision and handle the plethora of AWS services.&lt;/p&gt;

&lt;p&gt;This year I even contributed with code for CDK!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#honorable-mentions"&gt;
  &lt;/a&gt;
  Honorable mentions üìö
&lt;/h3&gt;

&lt;p&gt;This was a year I had a deep dive in DDD ‚Äî Domain Driven Design, so my honorable mentions is all about DDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3mM5r74"&gt;Domain-Driven Design:Tackling Complexity in the Heart of Software&lt;/a&gt;, the "blue book" by Eric Evans, who "started thee fire". I also read before, but now after some years working with architecture in mind I come with fresh eyes and a much broader understanding than before.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3eDa4f8"&gt;Learning Domain-Driven Design: Aligning Software Architecture and Business Strategy&lt;/a&gt;, this book didn‚Äôt make the cut on my top 5 because I didn‚Äôt finish yet. I‚Äôm in about the middle and loving it. I think the author, Vlad Khononov, makes a great work of "organize" the content around DDD and gives new insights.&lt;/li&gt;
&lt;li&gt;
&lt;a href=""&gt;Implementing Domain-Driven Design&lt;/a&gt;,also by Vaughn Vernon takes you far beyond "DDD-lite" approaches that embrace DDD solely as a technical toolset, and shows you how to fully leverage DDD‚Äôs "strategic design patterns" using Bounded Context, Context Maps, and the Ubiquitous Language. Is not as solid as Khononov‚Äôs book, but the breakdown could help a lot make more sense of the mind map DDD gives us to tackle complexity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/33ZPOlK"&gt;Domain-Driven Design Distilled&lt;/a&gt; by Vaughn Vernon aims to be a concise, readable, and actionable book on DDD. "Distilled" is a term used even in Evan‚Äôs book and sometimes this book looks like a "DDD-lite" guide, but I think it serves as a good introduction&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://no-bs-ts.myshopify.com/"&gt;No BS TS&lt;/a&gt; book covers every single video in the popular &lt;a href="https://www.youtube.com/playlist?list=PLNqp92_EXZBJYFrpEzdO2EapvU0GOJ09n"&gt;No BS TS video series&lt;/a&gt; by Jack Herrington. Everything from basic types to generics, using Typescript with React and into Design Patterns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEAdyiqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dl2euo8ppmi5npv37w1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEAdyiqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dl2euo8ppmi5npv37w1.png" alt="Crafting Interpreters" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-crafting-interpreters"&gt;
  &lt;/a&gt;
  1. Crafting Interpreters
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Ever wanted to make your own programming language or wondered how they are designed and built?&lt;br&gt;
If so, this book is for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://craftinginterpreters.com/"&gt;Crafting Interpreters&lt;/a&gt; by &lt;a href="https://twitter.com/munificentbob"&gt;Robert Nystrom&lt;/a&gt; will be one of my favorite technical books. It gives the same sense of wonder and craft that I felt reading &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-1.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we move in creating the &lt;a href="https://github.com/topics/lox-language"&gt;Lox language&lt;/a&gt; the author gives some historical background, trade-offs and every meaningful step. Even if you are interested in creating your own language, you will learn a ton by reading this book. You will be a better developer.&lt;/p&gt;

&lt;p&gt;The author is kind enough to let everyone &lt;a href="https://craftinginterpreters.com/contents.html"&gt;read for free the web version&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>books</category>
      <category>programming</category>
      <category>architecture</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Holidays, Entrepreneurship and SLOs with Nobl9</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 30 Dec 2021 20:57:22 +0000</pubDate>
      <link>https://dev.to/linearb/holidays-entrepreneurship-and-slos-with-nobl9-119k</link>
      <guid>https://dev.to/linearb/holidays-entrepreneurship-and-slos-with-nobl9-119k</guid>
      <description>&lt;p&gt;It's finally here, the end of season 1 of the podcast is upon us! To celebrate, Santa is bringing something special - entrepreneurship advice for all the would-be founders of the world, &lt;a href="https://www.youtube.com/watch?v=hwacxSnc4tI&amp;amp;ab_channel=WalterTan"&gt;ages 1 to 92.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brian Singer, co-founder &amp;amp; CPO of Nobl9, sits down with Dev Interrupted to help us close out season 1 with a conversation on what it takes to found your own company. Having founded a pair of companies, one of which he sold to Google, Brian has a deep understanding of what it takes to successfully found and scale a startup. More than that, he knows what VCs are looking for. &lt;/p&gt;

&lt;p&gt;In addition to our conversation on entrepreneurship, we also discuss Service Level Objectives, the ins and outs of Nobl9‚Äôs SLO platform and why SLOs and error budgets will become commonplace approaches in the industry, much in the same way we practice Agile today. &lt;/p&gt;

&lt;p&gt;From the entire team at Dev Interrupted, we want to give a heartfelt thank you to everyone who has supported us and continued on this journey with us. Producing this podcast every week has been an absolute pleasure and we are so thankful for the outpouring of support we have received this past year. Expect big things - and even bigger stories - in season 2 of the podcast. &lt;/p&gt;

&lt;p&gt;Have a wonderful New Year, we‚Äôll return on &lt;strong&gt;January 8th&lt;/strong&gt; with a HUGE episode for the official start of season 2.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5ht1sKI7v43cLhZhywCqkE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why VCs don‚Äôt like single founder companies&lt;/li&gt;
&lt;li&gt;Scaling beyond the first 20 employees&lt;/li&gt;
&lt;li&gt;What are &lt;a href="https://nobl9.com/"&gt;SLOs&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Understanding when &lt;a href="https://linearb.io/blog/technical-debt-ratio/?__hstc=75672842.b37abbbdf4f34a742895a6b2675da07e.1632418321637.1640804382855.1640838597523.186&amp;amp;__hssc=75672842.1.1640838597523&amp;amp;__hsfp=1615045989"&gt;tech debt matters&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The reason sales is the #1 skill for an entrepreneur&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujkkA9kH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qous1521acseykryclzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujkkA9kH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qous1521acseykryclzp.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>podcast</category>
      <category>techtalks</category>
      <category>career</category>
    </item>
    <item>
      <title>Streaming Tweets with Go</title>
      <author>Alex Fallenstedt</author>
      <pubDate>Thu, 30 Dec 2021 20:29:58 +0000</pubDate>
      <link>https://dev.to/fallenstedt/streaming-tweets-with-go-92p</link>
      <guid>https://dev.to/fallenstedt/streaming-tweets-with-go-92p</guid>
      <description>&lt;p&gt;Building with free APIs is a great way to teach yourself new skills in languages you like. I‚Äôve always found APIs as an underrated way to learn something new. Building with APIs brings challenges that force you to learn new parts of programming that video tutorials can not do.&lt;/p&gt;

&lt;p&gt;Twitter‚Äôs API‚Äôs filtered stream endpoint allows you to filter the real-time stream of public Tweets. You can tap into twitter discussions by filtering tweets for specific attributes. You can find the latest job postings, monitor weather events, or keep on top of trends.&lt;/p&gt;

&lt;p&gt;In this article I will discuss how to create twitter rules and manage a stream with my open source library &lt;a href="https://github.com/Fallenstedt/twitter-stream"&gt;&lt;code&gt;twitterstream&lt;/code&gt;&lt;/a&gt;. This library was built for my project &lt;a href="https://findtechjobs.io"&gt;findtechjobs&lt;/a&gt; so I could find the latest tech jobs posted on twitter.&lt;/p&gt;

&lt;p&gt;If you want a complete code example to get started, head over to the examples on &lt;a href="https://github.com/Fallenstedt/twitter-stream/tree/master/example"&gt;twitterstream&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-i-start"&gt;
  &lt;/a&gt;
  Where do I start?
&lt;/h2&gt;

&lt;p&gt;The first step is to create an app on &lt;a href="https://developer.twitter.com/"&gt;Twitter Developers&lt;/a&gt; and obtain a set of consumer keys. One you have an API key and an API secret key, you can generate an access token with &lt;code&gt;twitterstream&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-an-access-token"&gt;
  &lt;/a&gt;
  Generate an Access Token
&lt;/h2&gt;

&lt;p&gt;We can use &lt;code&gt;twitterstream&lt;/code&gt; to generate an access token. This access token will be used to authenticate all network requests going forward. In the code below, we make a network request to twitter‚Äôs &lt;a href="https://api.twitter.com/oauth2/token"&gt;oauth2/token endpoint&lt;/a&gt; with the The 'Basic' HTTP Authentication Scheme. Then we create an instance of &lt;code&gt;twitterstream&lt;/code&gt; with our access token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTokenGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetApiKeyAndSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"YOUR_KEY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"YOUR_SECRET_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestBearerToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;// Create an instance of twitter api&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTwitterStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-up-streaming-rules"&gt;
  &lt;/a&gt;
  Set up Streaming Rules
&lt;/h2&gt;

&lt;p&gt;Streaming rules make your stream deliver relevant information. The rules match a variety of twitter attributes such as message keywords, hashtags, and URLs. Creating great rules is fundamental to having a successful twitter stream. It‚Äôs important to continue refining your rules as you stream so you can harvest relevant information.&lt;/p&gt;

&lt;p&gt;Let‚Äôs create a stream for software engineer job postings with &lt;code&gt;twitterstream&lt;/code&gt;. A valid job posting tweet should should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posted in the english language&lt;/li&gt;
&lt;li&gt;Not a retweet&lt;/li&gt;
&lt;li&gt;Not a reply to another tweet&lt;/li&gt;
&lt;li&gt;Contain the word ‚Äúhiring‚Äù&lt;/li&gt;
&lt;li&gt;And contain the words ‚Äúsoftware developer‚Äù or ‚Äúsoftware engineer‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;twitterstream&lt;/code&gt; package makes building rules easy. We can use a &lt;code&gt;NewRuleBuilder&lt;/code&gt; to create as many rules as the Twitter API allows for our consumer keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRuleBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lang:en -is:retweet -is:quote hiring (software developer OR software engineer)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hiring software role"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first part is using &lt;code&gt;twitterstream&lt;/code&gt; to create a &lt;code&gt;NewRuleBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We pass in two arguments when we add our rule with &lt;code&gt;AddRule&lt;/code&gt;. The first is a long string with many operators. Successive operators with a space between them will result in boolean "AND" logic, meaning that Tweets will match only if both conditions are met. For example &lt;code&gt;cats dogs&lt;/code&gt; will match tweets that contain the words ‚Äúcats‚Äù and ‚Äúdogs‚Äù. The second argument for &lt;code&gt;AddRule&lt;/code&gt; is the tag label. This is a free-form text you can use to identify the rules that matched a specific Tweet in the streaming response. Tags can be the same across rules.&lt;/p&gt;

&lt;p&gt;Let‚Äôs focus on the first argument. Each operator does something unique:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first is the single &lt;code&gt;lang:en&lt;/code&gt; which is BCP 47 language identifier. This filters the stream for tweets posted in the English language. You can only use a single lang operator in a rule, and it must be used with a conjunction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we exclude retweets with &lt;code&gt;-is:retweet&lt;/code&gt;. We use NOT logic (negation) by including a minus sign in front of our operator. The negation can be applied to words too. For example, &lt;code&gt;cat #meme -grumpy&lt;/code&gt; will match tweets with the word cat, #meme, and do not include the word ‚Äúgrumpy‚Äù.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also exclude quote tweets with &lt;code&gt;-is:quote&lt;/code&gt;. Quote tweets are tweets with comments, and I‚Äôve found this operator very useful. When I was building findtechjobs.io, I encountered a lot of people retweeting an article about automated hiring with their opinion. These quote tweets cluttered my dataset with unrelated job postings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I then narrow my stream of tweets to words that include &lt;code&gt;hiring&lt;/code&gt;. People who tweet about jobs would say ‚ÄúMy team is hiring‚Ä¶‚Äù, or ‚ÄúStartupCo is hiring‚Ä¶‚Äù.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally &lt;code&gt;(software developer OR software engineer)&lt;/code&gt;, is a grouping of operators combined with an OR logic. Tweets will match if the tweet contains either of these words.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we build our rules, we create them with &lt;code&gt;api.Rules.Create&lt;/code&gt;. If you want to delete your rules, you can use &lt;code&gt;api.Rules.Delete&lt;/code&gt; with the ID of each rule you currently have. You can find your current rules with &lt;code&gt;api.Rules.Get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/integrate/build-a-rule"&gt;rule operators here&lt;/a&gt;. Additionally, the endpoint that creates the rules is &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules"&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-the-unmarshal-hook"&gt;
  &lt;/a&gt;
  Set the Unmarshal Hook
&lt;/h2&gt;

&lt;p&gt;We need to create our own struct for our tweets so we can unmarshal the tweet well. Twitter‚Äôs Filtered Stream endpoint allows us to fetch additional information for each tweet (more on this later). To allow us to find this data easily, we need to create a struct that will represent our data model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;StreamDataExample&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Text&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"text"`&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
        &lt;span class="n"&gt;AuthorID&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"author_id"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"data"`&lt;/span&gt;
    &lt;span class="n"&gt;Includes&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"name"`&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"users"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"includes"`&lt;/span&gt;
    &lt;span class="n"&gt;MatchingRules&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"tag"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"matching_rules"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every tweet that is streamed is returned as a &lt;code&gt;[]bytes&lt;/code&gt; by default. We can turn our data into something usable by unmarshaling each tweet into the struct &lt;code&gt;StreamDataExample&lt;/code&gt;. It‚Äôs important to set an unmarshal hook with &lt;code&gt;SetUnmarshalHook&lt;/code&gt; so we can process &lt;code&gt;[]bytes&lt;/code&gt; in a goroutine safe way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetUnmarshalHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to unmarshal bytes: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are uncertain what your data model will look like, you can always create a string from the slice of bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetUnmarshalHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-a-stream"&gt;
  &lt;/a&gt;
  Starting a Stream
&lt;/h2&gt;

&lt;p&gt;After creating our streaming rules and unmarshal hook, we are ready to start streaming tweets.&lt;br&gt;
By default, twitter returns a limited amount of information about each tweet when we stream. We can request additional information on each tweet with a stream expansion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;streamExpansions&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewStreamQueryParamsBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddExpansion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"author_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddTweetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// StartStream will start the stream&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streamExpansions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first create some stream expansions with a &lt;code&gt;NewStreamQueryParamsBuilder&lt;/code&gt;. This builder will create query parameters to start our stream with. Here, we are adding two additional piece of information to each tweet&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AddExpansion("author_id")&lt;/code&gt; will request the author‚Äôs id for each tweet streamed. This is useful if you are keeping track of users who are tweeting.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AddTweetField("created_at")&lt;/code&gt; will request the time the tweet was tweeted. This is useful if you need to sort tweets chronologically.
You can learn more about the available &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream"&gt;stream expansions here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we start the stream with our expansions using &lt;code&gt;api.StartStream&lt;/code&gt;. This method will start a long running GET request to twitter‚Äôs streaming endpoint. The request is parsed incrementally throughout the duration of the network request. If you are interested in learning more about how to consume streaming data from twitter, then you should read their documentation &lt;a href="https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data."&gt;Consuming Streaming Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consuming-the-stream"&gt;
  &lt;/a&gt;
  Consuming the Stream
&lt;/h2&gt;

&lt;p&gt;Each tweet that is processed in our long running GET request is sent to a go channel. We &lt;code&gt;range&lt;/code&gt; over this channel to process each tweet and check for errors from twitter. The stream will stop when we invoke &lt;code&gt;api.StopStream&lt;/code&gt;, then we skip the remaining part of the loop, return to the top and wait for a&lt;code&gt;close&lt;/code&gt; signal from the channel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;   &lt;span class="c"&gt;// Start processing data from twitter after starting the stream&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c"&gt;// Handle disconnections from twitter&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got error from twitter: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;// Stop the stream and wait for the channel to close on the next iteration.&lt;/span&gt;
            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Here I am printing out the text.&lt;/span&gt;
        &lt;span class="c"&gt;// You can send this off to a queue for processing.&lt;/span&gt;
        &lt;span class="c"&gt;// Or do your processing here in the loop&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Twitter‚Äôs servers attempt to hold the stream connection indefinitely. The error from twitter is made available in the stream. Disconnections can occur from several possible reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A streaming server is restarted on the Twitter side. This is usually related to a code deploy and should be generally expected and designed around.&lt;/li&gt;
&lt;li&gt;Your account exceeded your daily/monthly quota of Tweets.&lt;/li&gt;
&lt;li&gt;You have too many active redundant connections.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/volume-streams/integrate/handling-disconnections"&gt;More disconnect reasons can be found here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#anticipating-disconnects-from-twitter"&gt;
  &lt;/a&gt;
  Anticipating Disconnects from Twitter
&lt;/h2&gt;

&lt;p&gt;It‚Äôs important to maintain the connection to Twitter as long as possible because missing relevant information in your stream can create poor datasets. It should be expected that disconnections will occur and reconnection logic be built to handle disconnections from twitter&lt;/p&gt;

&lt;p&gt;We can build reconnection logic using &lt;code&gt;twitterstream&lt;/code&gt;‚Äôs api and a &lt;code&gt;defer&lt;/code&gt; statement. &lt;a href="https://github.com/Fallenstedt/twitterstream/blob/master/example/stream_forever.go"&gt;A full example of handling reconnects can be found here&lt;/a&gt;. Below is a snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// This will run forever&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;initiateStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Start the stream&lt;/span&gt;
    &lt;span class="c"&gt;// And return the library's api&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fetchTweets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// When the loop below ends, restart the stream defer initiateStream()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;initateStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Start processing data from twitter&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got error from twitter: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stopped Stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have started the stream and before we start processing the tweets, we &lt;code&gt;defer&lt;/code&gt; the method itself. This will handle reconnections to twitter whenever the messages channel closes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I hope you find this library useful in streaming tweets from twitter. Building this library was a challenge, and I learned how Go‚Äôs concurrency model works. If you liked this post, follow me on &lt;a href="https://twitter.com/Fallenstedt"&gt;twitter&lt;/a&gt; as I document my journey in the software world.&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>twitter</category>
    </item>
    <item>
      <title>What a working day looks like as a (junior) developer</title>
      <author>ùïÅùï¶ùïùùïöùïí üë©üèª‚Äçüíª</author>
      <pubDate>Thu, 30 Dec 2021 19:38:57 +0000</pubDate>
      <link>https://dev.to/yuridevat/what-a-working-day-looks-like-as-a-junior-developer-1j63</link>
      <guid>https://dev.to/yuridevat/what-a-working-day-looks-like-as-a-junior-developer-1j63</guid>
      <description>&lt;p&gt;Something I always wondered about on my path to becoming a developer was, what would it be like to work at a company? What does a typical day look like? I'm sure many of you ask yourselves these questions all the time, so I'd like to show you what my work day (at a large company) looks like.&lt;/p&gt;

&lt;p&gt;I got my first job in the technical field 3 months ago. I was very happy, and also very curious how it will be to work in a real company. And finally I would get to know it.&lt;/p&gt;

&lt;p&gt;Before I started working, my daily life looked like this: Wake up, go to the computer, read some articles that could be useful for one of my side projects, and then work my side projects. Of course, the hours I spent programming each day varied, some days I spent only 3 hours programming, other days I spent up to ten hours (especially when I was trying to fix a bug, you know how that feels ü§™).&lt;/p&gt;

&lt;p&gt;And the fascinating thing is that little has actually changed since I've had the job, although I now talk/write to people I'm working with on a project from time to time. Currently, I'm working remotely because of the pandemic, and that won't change much in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-initial-phase"&gt;
  &lt;/a&gt;
  The initial phase
&lt;/h2&gt;

&lt;p&gt;At first, I didn't want to work remotely. After being at home for so long, I was glad to have a reason to go outside again, to go to the company, to meet people, to talk. But after a few days, I realized how great the benefits are of working from home. (No wasting time making myself "pretty", no two-hour commutes, no fast food, no unproductive breaks). I can work between 6am and 10pm, on the basis of trust that I'm productive ~8 hours per day.&lt;/p&gt;

&lt;p&gt;In the beginning, I had to learn Angular üëÄ and Java Spring Boot. Therefore, apart from the daily scrum meetings (which will be explained later), I was sort of on my own in learning and adapting these two languages. After two months, I started working on some internal projects we have to actively apply my knowledge. Also like my side projects, I program with Visual Studio Code, push my code (if it relates to a project) to GitLab from where I get my issues and assign them to me. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-a-project"&gt;
  &lt;/a&gt;
  Starting a project
&lt;/h2&gt;

&lt;p&gt;I work in a large company. We provide IT solutions for other companies, so each project is unique and each project needs its own team to apply for if you are interested in that project and want to work in that team. But the interviews are more about seeing if a member fits into the team, to harmonize with everyone, because for the time of the project this should not stand in the way of a Scrum team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h2&gt;

&lt;p&gt;Scrum is a very good keyword here. We work with &lt;a href="https://www.scrum.org/"&gt;the Scrum framework&lt;/a&gt; (as do many other companies, especially in tech), so it's good to know about Scrum before applying for jobs. What does Scrum mean?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Scrum method is a framework for agile product development and agile project management. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every day, the developers on the team have a Daily Scrum Meeting of no more than 15 minutes to talk about, for example, what someone did yesterday, what someone is up to today, obstacles, successes, etc. This meeting takes place every day at the same time.&lt;/p&gt;

&lt;p&gt;Every two weeks we have a sprint planning meeting to discuss the topics (sprint backlog) that we are most likely to solve in the next 2 weeks out of all the open topics (product backlog). Each developer chooses the topics they want to work on.&lt;/p&gt;

&lt;p&gt;On each day, I work on my topic until it is done (meets the definition of done). The first thing I always do at the beginning of the day is to google for a solution to my problem. Yes, Googling üì≤. &lt;/p&gt;

&lt;p&gt;It's like you read over and over again on the internet: Google was, is, and always will be your best friend when trying to solve a problem. So don't be afraid to use it, even when pair programming during an interview.&lt;/p&gt;

&lt;p&gt;Furthermore, I read articles about the language I'm programming in to improve my code, or watch tutorials about my issue on YouTube. So, I do the exact same things like I do when working on my side projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;p&gt;When you work on a project, the requirements may change with each project. Some projects may require you to work on-site at the company, at a specific start and end time. The programming languages you work with may also vary. Also, the duration of a project can vary from 1 month to 2-3 years. This makes working in a company really interesting. I really like this way of working. It makes the experience exciting and fulfilling. &lt;/p&gt;

&lt;p&gt;üîú My first project, which starts in January, will still take place remotely and my way of working will hardly differ from the way I've been working so far. I am really excited, but I'm also already excited to see what the next project will look like too.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>CryptoPals Crypto Challenges Using Rust: Fixed XOR</title>
      <author>Naveen Sahu</author>
      <pubDate>Thu, 30 Dec 2021 19:29:37 +0000</pubDate>
      <link>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-fixed-xor-4e96</link>
      <guid>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-fixed-xor-4e96</guid>
      <description>&lt;p&gt;This is &lt;a href="https://cryptopals.com/sets/1/challenges/2"&gt;Challenge 2&lt;/a&gt; of &lt;a href="https://cryptopals.com"&gt;Cryptopals&lt;/a&gt; challenges implemented in Rust language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Given two hex encoded strings of similar length we have to return xor of it.&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Exclusive_or"&gt;XOR (or, Exclusive OR)&lt;/a&gt; is a binary operation (like AND, OR) on bits. XOR gives true/1 as when the two inputs differ, otherwise false/0:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|  A  |  B  |XOR(A^B)|
|-----|-----|--------|
|  0  |  0  |    0   |
|  0  |  1  |    1   |
|  1  |  0  |    1   |
|  1  |  1  |    0   |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, theoretically you can convert hex to binary and xor them to get output, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10110011 ^ 01101011 = 11011000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To solve the challenge with Rust, we can make use of &lt;code&gt;hex&lt;/code&gt; crate to decode hex strings to bytes vec, zip the two vecs, then perform xor byte by byte to get XORed bytes. And finally encode xored bytes to hex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use hex::{decode, encode};

pub fn fixed_xor(hex1: &amp;amp;str, hex2: &amp;amp;str) -&amp;gt; String {
    let bytes1 = decode(hex1).unwrap();
    let bytes2 = decode(hex2).unwrap();

    let xor_bytes: Vec&amp;lt;u8&amp;gt; = bytes1
        .iter()
        .zip(bytes2.iter())
        .map(|(&amp;amp;b1, &amp;amp;b2)| b1 ^ b2)
        .collect();
    encode(xor_bytes)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we're done.&lt;/p&gt;

&lt;p&gt;See the code on &lt;a href="https://github.com/theNvN/cryptopals-crypto-challenges/blob/master/src/set_1_basics/c2_fixed_xor.rs"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find me on:&lt;br&gt;
Twitter - &lt;a href="https://twitter.com/heyNvN"&gt;@heyNvN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://naveeen.com"&gt;naveeen.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>rust</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>I Do Not Know Object Oriented Programming!</title>
      <author>Opeyemi Stephen</author>
      <pubDate>Thu, 30 Dec 2021 19:29:08 +0000</pubDate>
      <link>https://dev.to/resourcefulmind/i-do-not-know-object-oriented-programming-1bim</link>
      <guid>https://dev.to/resourcefulmind/i-do-not-know-object-oriented-programming-1bim</guid>
      <description>&lt;p&gt;If you are a beginner who is currently getting their butts whooped by JavaScript or swimming in tutorial hell, I'm quite sure you must have read the title of this article and given me an imaginary hug because you can also resonate. Truth is, I do not have a ready made blueprint to help you understand OOPs, but as I once read somewhere that the best way to learn is to teach...so here I am, Fun and Janae Monelle's "We Are Young" playing in the background, about to share my own personal notes about Object Oriented Programming. I hope this helps a newbie somewhere. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS: I would welcome contributions, resources and comments that would help other newbies. We can burn brighter than the sun if we all help each other.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first thing we all need to know is the conventional definition...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Object-oriented programming combines a group of data attributes with functions or methods into a unit called an "object. Multiple independent objects may also be instantiated‚Äîor represented‚Äîfrom the same class and interact with each other in complex ways.&lt;/em&gt;&lt;/strong&gt;" &lt;/p&gt;

&lt;p&gt;Typically, OOP is class-based, which means that a class defines the data attributes and functions as a blueprint for creating objects, which are instances of the class. &lt;/p&gt;

&lt;p&gt;I happen to love cars alot so my first simple example would be to consider a class representing a car. The "car" class will contain  attributes to represent information such as the car's name, model, number of wheels, color, etc. Maybe this would be more familiar;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let car = {
     name: "Mercedes Benz",
     model: "CLA 4DR Coupe", 
     numOfWheels: 4, 
     chassisNum: 0123456789, 
     color: "white"
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I'd like to go on and talk about what everyone refers to as the 4 basics of Object Oriented Programming which would be Encapsulation, Abstraction, Inheritance and Polymorphism...but before I start throwing these words around, wouldn't it be better if we really understood how to use OOPs and then saw these 4 basics in action for ourselves?&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;We already successfully created our first class with their different properties and values. We can access the properties and subsequently, the values in our "car" object using the &lt;strong&gt;Dot Notation&lt;/strong&gt;. Take a look at the code below;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(car.model); //"CLA 4DR Coupe"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the code above, we used the &lt;strong&gt;dot notation&lt;/strong&gt; on the object named &lt;strong&gt;"car"&lt;/strong&gt; and then followed by the property &lt;strong&gt;"model"&lt;/strong&gt; to access the value which is &lt;strong&gt;"CLA 4DR Coupe"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cool right?&lt;/em&gt;  We might have private data in the class, such as "chassisNum" that should not be exposed to other objects in the program. By encapsulating this data member as a private variable in the class, outside code would not have direct access to it, and it would remain safe within that person‚Äôs object. &lt;/p&gt;

&lt;p&gt;In OOP, we encapsulate by binding the data and functions which operate on that data into a single unit, the class. &lt;/p&gt;

&lt;p&gt;By doing so, we can hide private details of a class from the outside world and only expose functionality that is important for interfacing with it. When a class does not allow calling code access to its private data directly, we say that it is well encapsulated. &lt;strong&gt;There there, you just understood Encapsulation.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;It will be pointless to learn about OOPs without knowing what &lt;strong&gt;METHODS&lt;/strong&gt; are. &lt;strong&gt;Methods&lt;/strong&gt; are a special type of property that objects have. They are simply properties that are functions. They add a different behavior to an object. I like to think that they make objects a little more flexible in doing stuff. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let car = {
  name: "Range Rover Evogue", 
  price: 70000, 
  describeCar: function() {
    return "That car speeding on the highway is a " + car.name + " and it costs " + car.price + " USD.";}
};

car.describeCar(); //"That car speeding on the highway is a Range Rover Evogue and it costs 70000 USD."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above has a method &lt;code&gt;describeCar&lt;/code&gt; which is a function and returns a statement telling us the name and Price of the car.(BTW, I have no idea about the price of the Range Rover).&lt;br&gt;
Notice that the method accessed the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; property in the return statement using the &lt;code&gt;car.name&lt;/code&gt; and &lt;code&gt;car.price&lt;/code&gt;. Now think about the many awesome things you can do with Methods...sweet right? &lt;/p&gt;



&lt;p&gt;There is another way to access the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; properties though...yeah, you probably heard about it...the &lt;strong&gt;"this"&lt;/strong&gt; keyword (At this poin, you're probably like...who was behind naming these coding concepts, because what is literally "this" right? lol)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"this"&lt;/strong&gt; in my own opinion, which I would like to think is shared by others, exists to make code reusable and very much easier to read.&lt;/p&gt;

&lt;p&gt;In the last example, we had a method &lt;code&gt;describeCar&lt;/code&gt; which used &lt;code&gt;car.name&lt;/code&gt; and &lt;code&gt;car.price&lt;/code&gt; dot notation to access the values for the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; property within the return statement.&lt;br&gt;
Recall,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; describeCar: function() {
    return "That car speeding on the highway is a " + car.name + " and it costs " + car.price + " USD.";}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although, it is a very correct way of accessing the object &lt;em&gt;"car"&lt;/em&gt; 's property, have you ever asked yourself what happens when you have accessed this object and its properties on lines 235, 410, 720, 850, 1100, 1425, 1658, 1780 and 3800 of your codebase and for some reason, the variable name changes from &lt;code&gt;"car"&lt;/code&gt; to &lt;code&gt;"automobile"&lt;/code&gt; while working for a large company such as Mercedes?&lt;/p&gt;

&lt;p&gt;Your work gets extra stressful as you have to update all those lines of code which references the original name that was changed and we both know how stressful that can get. This is where the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword comes in. You can have your initial code in our last example re-written like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let car = {
  name: "Range Rover Evogue", 
  price: 70000, 
  describeCar: function() {
    return "That car speeding on the highway is a " + this.name + " and it costs " + this.price + " USD.";}
};

car.describeCar();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have barely scratched the surface and &lt;code&gt;this&lt;/code&gt; is a very deep and sometimes complicated subject and the above is definitely not the only way it can be used. Here, we just used &lt;code&gt;this&lt;/code&gt; in referring to the object that the method &lt;code&gt;describeCar&lt;/code&gt; is associated with, which is &lt;code&gt;car&lt;/code&gt;. By virtue of this, if the object variable &lt;code&gt;car&lt;/code&gt; is changed to &lt;code&gt;automobile&lt;/code&gt; or even  &lt;code&gt;locomotive&lt;/code&gt;, it is not necessary to find all the references to &lt;code&gt;car&lt;/code&gt; in the code. There you go...easier and reusable across board. &lt;/p&gt;

&lt;p&gt;Now that we have got that out of the way, let's be civil engineers for a bit and talk about Constructor Functions(this is me trying to make a joke that's not funny btw)...&lt;/p&gt;




&lt;p&gt;Now, imagine that you are seeing the function below for the first time as a beginner...which is probably what's happening right now;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Truck() {
  this.name = "Ford Ranger 2018";
  this.color = "Black";
  this.price = 100000;
  this.numWheels = 4;
  this.yearOfProduction = 2018;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks weird right? Because it did look weird to me when I looked at it for the first time ever too. Functions are supposed to return a statement or value or whatever else you read up yeah? It also looks like an object or even a method but methods ar always inside the object and this isn't how "normal" objects are written...Don't fret, &lt;strong&gt;this is a Constructor Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Constructors are functions that create new objects.&lt;/em&gt;&lt;/strong&gt; They define properties and behaviors that will belong to the new object. What this means is that like the example above, functions written that way will create a new object called &lt;strong&gt;"Truck"&lt;/strong&gt; and append the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;numOfWheels&lt;/code&gt; and &lt;code&gt;yearOfProduction&lt;/code&gt; properties and their corresponding values to the object. The &lt;code&gt;this&lt;/code&gt; refers to the new object that has been created.&lt;/p&gt;

&lt;p&gt;Take note that the &lt;code&gt;Truck&lt;/code&gt; object was defined with a &lt;em&gt;capital letter&lt;/em&gt;. Constructors are defined this way to differentiate them from other functions that are not constructors and will not return values like other functions would. &lt;/p&gt;

&lt;p&gt;And as usual, a new problem will always arise from an existing one...what if we want to create a new object which will have the same properties as our initial &lt;code&gt;"Truck"&lt;/code&gt; constructor from the our previous example? We simply add the following line of code beneath the previous code block like so;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let fordTruck = new Truck();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt; operator will instruct JavaScript to create a new copy of the &lt;strong&gt;&lt;code&gt;Truck&lt;/code&gt;&lt;/strong&gt; object called &lt;strong&gt;&lt;code&gt;fordTruck&lt;/code&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take note that if you do now include **&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt;, you will not get the result as no new object will be created even if you troubleshoot and console.log from here to Bethlehem** &lt;/p&gt;

&lt;p&gt;So ultimately, if you type &lt;code&gt;fordTruck.name&lt;/code&gt; in your console, the result will give the value of our initial Truck's &lt;code&gt;this.name&lt;/code&gt; because &lt;code&gt;fordTruck&lt;/code&gt; now has all the properties of &lt;code&gt;Truck&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Now you know what constructors do, but if you are the obsrvant genius I know you are, then you would notice that when we created the new constructor &lt;code&gt;fordTruck&lt;/code&gt;, it took the &lt;code&gt;name&lt;/code&gt; property along with the other properties such as &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;numOfWheels&lt;/code&gt; and yearOfProduction. We can keep changing the names as we go by if you want different values for each new &lt;code&gt;Truck&lt;/code&gt; but supposing you are in charge of keeping track of hundreds of thousands of trucks produced at the Ford Plant? &lt;/p&gt;

&lt;p&gt;You can change or easily create new instances of the Trucks by designing the initial &lt;code&gt;Truck&lt;/code&gt; constructor to accept whatever parameters might need to be changed like the name of the truck, the price, the color and still leave the other values to remain the same if you want. &lt;strong&gt;So we re-write the original constructors to accept arguments as shown below;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Truck(name, price, color) {
   this.name = name;
   this.color = color;
   this.price = price;
   this.numWheels = 4;
   this.yearOfProduction = 2018;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we can say;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let fourWheel = new Truck("Ranger", 175000, "gray");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you do this, you create a new instance of &lt;code&gt;Truck&lt;/code&gt; which will be named &lt;code&gt;fourWheel&lt;/code&gt; and will set the properties to the new properties of the new &lt;code&gt;fourWheel&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;With the above, the constructor function is now very flexible as it can accept parameters and we can define new properties for each truck when they are created. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always keep in mind that constructor functions group objects together based on shared characteristics and behavior and define a blueprint that automates their creation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to check if the new object you created is an instance of the constructor, use the &lt;code&gt;instanceof&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;For instance, in our last example above, &lt;/p&gt;

&lt;p&gt;&lt;code&gt;fourWheel instanceof Truck;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It will return &lt;code&gt;true&lt;/code&gt; because the &lt;code&gt;fourWheel&lt;/code&gt; object was created using the &lt;code&gt;Truck&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;But if we say,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let saloonCar = {
   name: "Ford Focus", 
   color: "white", 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we check the same &lt;code&gt;saloonCar instanceof Truck;&lt;/code&gt;, it will return &lt;code&gt;false&lt;/code&gt; because &lt;code&gt;saloonCar&lt;/code&gt; was not created using the &lt;code&gt;Truck&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;Also, the &lt;code&gt;Truck&lt;/code&gt; constructor defines five properties (name, color, price, numOfWheels, yearOfProduction) which are defined directly inside it. These properties are called &lt;em&gt;"Own Properties"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's assume we are setting up 3 new instances of &lt;code&gt;Truck&lt;/code&gt; called &lt;code&gt;firstCar&lt;/code&gt;, &lt;code&gt;secondCar&lt;/code&gt; and &lt;code&gt;thirdCar&lt;/code&gt; respectively, we would have something like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let firstCar = new Truck("edge", "red", 30000);
let secondCar = new Truck("broncos", "black", 120000);
let thirdCar = new Truck("focus", "blue", 65000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other two properties &lt;code&gt;numOfWheels&lt;/code&gt; and &lt;code&gt;yearOfProduction&lt;/code&gt; will remain unchanged as no new parameters were passed in for those. &lt;/p&gt;

&lt;p&gt;All 5 properties are referred to as &lt;strong&gt;Own Properties&lt;/strong&gt; because they are defined directly on the instance object &lt;code&gt;Truck&lt;/code&gt;. This means that &lt;code&gt;firstCar&lt;/code&gt;, &lt;code&gt;secondCar&lt;/code&gt; and &lt;code&gt;thirdCar&lt;/code&gt; all have their own separate copy of these properties and every other instance of &lt;code&gt;Truck&lt;/code&gt; will also have their own copy of these properties.&lt;/p&gt;

&lt;p&gt;What is the essence of all of this and what might we do with the Own Property you might ask...well we could push them to an empty array while writing our code like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let ownProps = [];
for(let property in secondCar) {
   if(secondCar.hasOwnProperty(property)) {
       ownProps.push(property);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that when we &lt;code&gt;console.log(ownProps)&lt;/code&gt;, it will print the different properties from &lt;code&gt;secondCar&lt;/code&gt; into the empty &lt;code&gt;ownProps&lt;/code&gt; array.&lt;/p&gt;




&lt;p&gt;If you take a close look at our code, you should definitely see that &lt;code&gt;numOfWheels&lt;/code&gt; has the same value for all instances of &lt;code&gt;Truck&lt;/code&gt;. In other words, it is sort of a duplicated variable. &lt;/p&gt;

&lt;p&gt;It is not much of a problem if you have only a couple of instances or say 5 instances of the original car object...but...you will likely be working at the Ford HQ and using your code to keep track of millions of 4-wheeelers which means millions of instances. &lt;/p&gt;

&lt;p&gt;In situations like the above-listed, a &lt;strong&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/strong&gt; comes in very handy. What does the prototype do you might ask? Simple..A &lt;strong&gt;prototype&lt;/strong&gt; shares a particular property amongst all instances of the original object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Truck.prototype.numOfWheels = 4;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now all instances of &lt;code&gt;Truck&lt;/code&gt; will have the &lt;code&gt;numOfWheels&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;prototype&lt;/code&gt; for &lt;code&gt;firstCar&lt;/code&gt; and &lt;code&gt;secondCar&lt;/code&gt; is part of the &lt;code&gt;Truck&lt;/code&gt; constructor as &lt;code&gt;Truck.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, when it comes to properties, own properties will always be defined directly on the object itself while prototype properties will be defined on the prototype.&lt;/p&gt;

&lt;p&gt;So what if we have to add more than one property to our prototype? You already know that would be very cumbersome of we had to do that one after another. A more efficient way would be to set the prototype to a new object that already contains the properties. We have this below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Truck.prototype = {
   numOfWheels: 4, 
   sound: function() {
     console.log("Vroom! Vroom!!")
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we want to add a &lt;code&gt;quality&lt;/code&gt; method to the prototype. All the properties can be added at once in this manner like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Truck.prototype = {
   numOfWheels: 4, 
   sound: function() {
     console.log("Vroom! Vroom!!")
   },  
   sound: quality() {
     console.log("It is a super fast " + this.name);
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NEVER FORGET&lt;/strong&gt; to always define the constructor property whenever a prototype is manually set to a new object. Why? Well the reason is quite simple, it is beacuse when you set the prototype manually, it will erase the constructor property and if you check which constructor function created the instance, the results will be false.&lt;/p&gt;

&lt;p&gt;Summarily, for a better understanding of the prototype chain, you need to always take note of the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All objects in JavaScript have a prototype(save for a few exceptions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The prototype of an object is an object. If this confuses you, you can bet it confused me too. You should check out &lt;a href="https://javascript.info/search/?query=prototype&amp;amp;type=article"&gt;Javascript.info&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A prototype can also have its own prototype because a prototype is an object. For instance;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Car(name) {
  this.name = name;
}

typeof Car.prototype; //the result for this will be "object"

let bugatti = new Car("Veyron");
    bugatti.hasOwnProperty("name");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, &lt;br&gt;
&lt;code&gt;Car&lt;/code&gt; = supertype for &lt;code&gt;bugatti&lt;/code&gt;&lt;br&gt;
&lt;code&gt;bugatti&lt;/code&gt; = subtype for &lt;code&gt;Car&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Car&lt;/code&gt; = supertype for &lt;code&gt;bugatti&lt;/code&gt;&lt;br&gt;
Object is a supertype for both &lt;code&gt;Car&lt;/code&gt; and &lt;code&gt;bugatti&lt;/code&gt;&lt;br&gt;
Object is a supertype for all objects in JavaScript, therefore, any object can use the &lt;code&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt;



&lt;p&gt;There's another important principle to be observed before I take a pause on this is the principle of &lt;strong&gt;Inheritance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Repeated code is usually a problem because any change in one place requires fixing the code in multiple placesbwhich would just give devs more work and make them more likely to make errors. Now let's say we have two constructor functions which I will name after two of the biggest artistes in Africa(just because I can and we don't have to always be boring);&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Wizkid.prototype = {
   constructor: Wizkid, 
   describe: function() {
      console.log("My name is " + this.name +  " and I always come late to my concerts in Nigeria");
  }
};

Davido.prototype = {
   constructor: Davido, 
   describe: function() {
      console.log("My name is " + this.name + " and I always come late to my concerts in Nigeria");
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the &lt;code&gt;describe&lt;/code&gt; method is repeated in two places and we can use what we call the &lt;strong&gt;DRY principle&lt;/strong&gt; (Don't Repeat Yourself) to refine this code by creating a supertype called &lt;code&gt;**Artistes**&lt;/code&gt; like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Artiste() {};

Artiste.prototype = {
    constructor: Artiste, 
    describe: function() {
       console.log("My name is " + this.name + " and I always come late to my concerts in Nigeria");
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since you have the above supertype &lt;code&gt;Artiste&lt;/code&gt; which includes the &lt;code&gt;describe&lt;/code&gt; method, you can then remove the &lt;code&gt;describe&lt;/code&gt; method from &lt;code&gt;Wizkid&lt;/code&gt; and &lt;code&gt;Davido&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Wizkid.prototype = {
  constructor: Wizkid
};

Davido.prototype = {
  constructor: Davido
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, you just successfully created a supertype called &lt;code&gt;Artiste&lt;/code&gt; that defined behaviors shared by all musicians/artistes.&lt;/p&gt;

&lt;p&gt;I will stop here for now...you can learn more about the basics of Object Oriented Programming as well as advanced concepts on &lt;a href="https://javascript.info/search/?query=object+oriented+programming&amp;amp;type=article"&gt;Javascript.info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also chip in via the comments for other newbies to learn more as I have barely even scratched the surface. Godspeed and Happy New Year in advance to you and yours.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 7 Dev Tools for AI Startups</title>
      <author>Kelsey Foster</author>
      <pubDate>Thu, 30 Dec 2021 18:47:35 +0000</pubDate>
      <link>https://dev.to/kelseyefoster/top-7-dev-tools-for-ai-startups-4j6p</link>
      <guid>https://dev.to/kelseyefoster/top-7-dev-tools-for-ai-startups-4j6p</guid>
      <description>&lt;p&gt;There is no shortage of dev tools to play around with these days. While many offer invaluable time-saving and organizational advantages, it can be difficult to sift through all of the options to figure out what works best for you. &lt;/p&gt;

&lt;p&gt;As an &lt;a href="https://www.assemblyai.com/"&gt;AI startup&lt;/a&gt;, our Deep Learning and engineering teams have tried each of these tools as we work to optimize our &lt;a href="https://www.assemblyai.com/blog/the-top-free-speech-to-text-apis-and-open-source-engines/"&gt;Speech-to-Text API&lt;/a&gt;. To help you figure out which of the tools might suite your work best, we‚Äôve created a short list of our go-to, and most valuable, dev tools‚Äìincluding Neovim, Bugsnag, Tailscale, Github‚Äôs Command Line Client, Comet-ml, Jupyter-notebook, and pandas. &lt;/p&gt;

&lt;p&gt;Here‚Äôs what our team had to say about each one:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-7-dev-tools-for-ai-startups"&gt;
  &lt;/a&gt;
  Top 7 Dev Tools for AI Startups
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-neovim"&gt;
  &lt;/a&gt;
  1. Neovim
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://neovim.io/"&gt;Neovim&lt;/a&gt; is a hyperextensible, Vim-based text editor which is fully compatible with Vim‚Äôs editing model and Vimscript v1. Neovim has strong defaults, one build-type and one command, a built-in terminal emulator, and modern terminal features like bracketed paste, focus events, and cursor styling. All these work together to make your daily work life easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-bugsnag"&gt;
  &lt;/a&gt;
  2. Bugsnag
&lt;/h2&gt;

&lt;p&gt;As an error monitoring and reporting tool, &lt;a href="https://www.bugsnag.com/"&gt;Bugsnag&lt;/a&gt; is invaluable for our research team. Basically, Bugsnag acts as your command center for both error monitoring and app stability. When you encounter an error, you can run end-to-end diagnostics to replicate it and determine the fix. Bugsnag‚Äôs UI is also intuitive and easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-tailscale"&gt;
  &lt;/a&gt;
  3. Tailscale
&lt;/h2&gt;

&lt;p&gt;Security is top priority for any startup, and &lt;a href="https://tailscale.com/"&gt;Tailscale&lt;/a&gt; makes it easy to achieve peace of mind. Top features of this zero-config VPN include support for SSO, multi-factor authentication, easy deauthorization when needed, a stable IP and auto-assigned domain, and an intuitive interface. Bottom line, Tailscale makes it infinitely easier for us to access protected resources like our databases. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-githubs-command-line-client"&gt;
  &lt;/a&gt;
  4. GitHub‚Äôs Command Line Client
&lt;/h2&gt;

&lt;p&gt;Our team loves using &lt;a href="https://github.com/cli/cli"&gt;Github‚Äôs Command Line Client&lt;/a&gt; for increased efficiency and time saving. The Command Line Client works by bringing pull requests, issues, and more right to the terminal next to where you‚Äôre already working, so you can see your entire GitHub workflow in one place. You can also call GitHub to script almost any action and set a custom alias for commands. It can install directly on Windows, Linux, or macOS, and is also available for repositories hosted on GitHub.com and GitHub Enterprise Server 2.20+.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-cometml"&gt;
  &lt;/a&gt;
  5. Comet-ml
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.comet.ml/site/"&gt;Comet-ml&lt;/a&gt; compares doing Machine Learning with its product to ‚Äúbuilding with legos‚Äù because it lets you customize the platform in a way that works best for you. We love using it because it lets you manage, visualize, and optimize your entire Machine Learning lifecycle. You can also easily compare experiments to help you better understand differences in how your models perform and even get alerts when something goes wrong or needs to be debugged. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-jupyternotebook"&gt;
  &lt;/a&gt;
  6. Jupyter-notebook
&lt;/h2&gt;

&lt;p&gt;As part of &lt;a href="https://jupyter.org/"&gt;Project Jupyter&lt;/a&gt;, Jupyter Notebook facilitates easy computational-document creation and sharing. We love that it offers multilingual support ‚Äì including Python, Julia, R, and Scala ‚Äì and lets you share notebooks via GitHub, email, or Dropbox. You can also integrate data from other data tools like pandas, scikit-learn, TensorFlow, Apache Spark, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-pandas"&gt;
  &lt;/a&gt;
  7. pandas
&lt;/h2&gt;

&lt;p&gt;Built on top of Python, &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt; is an open source data analysis and manipulation tool, similar to NumPy. While it relies on NumPy arrays for much of its manipulation and computation, pandas makes it easier to visualize and explore data, helping our team make better sense of the large amounts of data we work with on a daily basis. &lt;/p&gt;

</description>
      <category>ai</category>
      <category>startup</category>
      <category>programming</category>
    </item>
    <item>
      <title>CryptoPals Crypto Challenges Using Rust: Convert hex to base64</title>
      <author>Naveen Sahu</author>
      <pubDate>Thu, 30 Dec 2021 18:41:33 +0000</pubDate>
      <link>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-convert-hex-to-base64-jkc</link>
      <guid>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-convert-hex-to-base64-jkc</guid>
      <description>&lt;p&gt;This is the &lt;a href="https://cryptopals.com/sets/1/challenges/1"&gt;Challenge 1&lt;/a&gt; of &lt;a href="https://cryptopals.com/"&gt;CryptoPals&lt;/a&gt; challenges implemented using Rust language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Quite simple, we're given a hex string &amp;amp; have to convert it into a base64 encoded format. Basically from one encoding to another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hex-encoding"&gt;
  &lt;/a&gt;
  Hex Encoding
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Hexadecimal"&gt;Hex&lt;/a&gt; is a base 16 format using 16 symbols &lt;strong&gt;0-9&lt;/strong&gt; and &lt;strong&gt;A-F&lt;/strong&gt;. Each hexadecimal number (i.e. 0-9 &amp;amp; A-F) can be represented (or corresponds to) using 4 bits. Why 4 bits? Because, using 4 bits you can have 2^4 (=16) combinations. So, &lt;code&gt;0000 (binary) = 0 (hex)&lt;/code&gt;, &lt;code&gt;1111 (binary) = F (hex)&lt;/code&gt;. Consequently, two digits of hex need 4 bits. Hence, &lt;code&gt;0010 1101 (binary) = 2D&lt;/code&gt;. &lt;strong&gt;Note that in hex encoding there is no difference between small case letters &amp;amp; capital letters, they both mean same (unlike base64)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let's talk about converting an &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; text to hex. Each ASCII character is 1 byte or 8 bits of size. So, each ASCII character would require 2 digits of hex to represent! So, &lt;strong&gt;Z&lt;/strong&gt; (in ASCII text) is &lt;strong&gt;5A&lt;/strong&gt; in hex, and &lt;strong&gt;0&lt;/strong&gt; (in ASCII text, not number!) is actually &lt;strong&gt;30&lt;/strong&gt; in hex format! You can learn more &lt;a href="https://www.binaryhexconverter.com/ascii-text-to-hex-converter"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base64-encoding"&gt;
  &lt;/a&gt;
  Base64 Encoding
&lt;/h3&gt;

&lt;p&gt;Similarly, &lt;a href="https://en.wikipedia.org/wiki/Base64"&gt;Base64&lt;/a&gt; is base 64 (duh!) encoding using 64 symbols - &lt;strong&gt;0-9&lt;/strong&gt;, &lt;strong&gt;A-Z&lt;/strong&gt;, &lt;strong&gt;a-z&lt;/strong&gt;, &lt;strong&gt;+&lt;/strong&gt; and &lt;strong&gt;/&lt;/strong&gt;. You might also see &lt;strong&gt;=&lt;/strong&gt; chars appear at the end encoding output but &lt;strong&gt;=&lt;/strong&gt; in base64 is just a padding applied to output to normalize output length to be a multiple of 4. Using similar logic as hex encoding above, we can see that each base64 digit represents 6 bits of data (2^6 = 64).&lt;/p&gt;

&lt;p&gt;Theoretically, to convert hex to base64, we can first convert hex to binary to create a long string of bits (1s &amp;amp; 0s), divide bits into 6 bit chunks &amp;amp; then convert these 6 bit chunks to their corresponding base64 digits.&lt;/p&gt;

&lt;p&gt;However, since we're using Rust, we can simplify by using two nice crates for working with hex &amp;amp; base64 - &lt;code&gt;hex&lt;/code&gt; &amp;amp; &lt;code&gt;base64&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we'd convert input hex string to raw bytes using &lt;code&gt;hex::decode()&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using hex;

let bytes = hex::decode(input_hex).unwrap();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Encode these bytes to base64 using &lt;code&gt;base64::encode()&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using base64;

let output = base64::encode(bytes);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have the base64 &lt;code&gt;output&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;We can encapsulate it into a nice function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use base64;
use hex;

pub fn convert_hex_to_base64(hex: &amp;amp;str) -&amp;gt; String {
    base64::encode(hex::decode(hex).unwrap())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;See the code on &lt;a href="https://github.com/theNvN/cryptopals-crypto-challenges/blob/master/src/set_1_basics/c1_convert_hex_to_base64.rs"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find me on:&lt;br&gt;
Twitter - &lt;a href="https://twitter.com/heyNvN"&gt;@heyNvN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://naveeen.com"&gt;naveeen.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>rust</category>
      <category>cryptography</category>
    </item>
  </channel>
</rss>
