<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Join Us for the 2021 GitHub Actions Hackathon on DEV!</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Mon, 08 Nov 2021 17:11:21 +0000</pubDate>
      <link>https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4</link>
      <guid>https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4</guid>
      <description>&lt;p&gt;&lt;strong&gt;For the second year in a row, GitHub will be hosting the "GitHub Actions Hackathon" right here on DEV!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From now until December 8th, GitHub is offering an unmissable opportunity to utilize GitHub Actions to benefit open source in exchange for prizes. All participants will need to share a DEV post detailing how they created their amazing workflow with GitHub Actions. We can't wait to see what you create!&lt;/p&gt;

&lt;p&gt;Read on for more details about GitHub Actions and how you can join the hackathon. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-github-actions"&gt;
  &lt;/a&gt;
  What Are GitHub Actions?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; are individual tasks that allow you to automate and customize your software development workflows. Actions are located in the same place you store code, collaborate with peers, solve issues, and ship open source software ‚Äî GitHub! &lt;/p&gt;

&lt;p&gt;For this year‚Äôs hackathon, we‚Äôre encouraging participants to utilize existing GitHub Actions to create workflows that make sense in the real world. While you are free to create a new Action, the emphasis of this contest is to create practical and interesting solutions other developers can utilize to solve problems with open source. We hope you‚Äôll walk away with a greater understanding of the value of GitHub Actions ‚Äî for you and the open source community. &lt;/p&gt;

&lt;p&gt;We‚Äôre excited to see how you approach this challenge. &lt;a href="https://docs.github.com/en/actions"&gt;More on GitHub Actions here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#categories"&gt;
  &lt;/a&gt;
  Categories
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The GitHub Actions Hackathon is calling for projects in these categories:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Maintainer Must-Haves:&lt;/strong&gt; make the lives of open source maintainers easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DIY Deployments:&lt;/strong&gt; improve the deployment process for open source projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Interesting IoT:&lt;/strong&gt; cool projects that integrate with IoT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Phone Friendly:&lt;/strong&gt; workflows built for Mobile (PWA readiness, iOS/Android)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Wacky Wildcards:&lt;/strong&gt; anything that doesn‚Äôt fit in the above category (note, truly wacky submissions are encouraged)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-participate"&gt;
  &lt;/a&gt;
  Why Participate?
&lt;/h3&gt;

&lt;p&gt;Following the momentum of Hacktoberfest last month, we wanted to emphasize GitHub Actions are a perfect open source access point. They allow you to create helpful and logical workflows for your everyday life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We also think the prizes on offer make for a pretty compelling case to participate in the GitHub Actions Hackathon 2021 üòâ&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prizes"&gt;
  &lt;/a&gt;
  Prizes
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;5 Grand Prize Winners&lt;/strong&gt;&lt;/em&gt; (one in each category):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$1,500 USD gift card or equivalent&lt;/li&gt;
&lt;li&gt;$300 USD credit to the DEV Shop&lt;/li&gt;
&lt;li&gt;GitHub Swag Pack&lt;/li&gt;
&lt;li&gt;DEV Sticker Pack&lt;/li&gt;
&lt;li&gt;DEV ‚ÄúActions Hackathon 2021‚Äù grand prize winner badge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Runner-Up Prizes&lt;/strong&gt;&lt;/em&gt; (10 Total):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$250 USD gift card or equivalent&lt;/li&gt;
&lt;li&gt;$150 USD credit to the DEV Shop&lt;/li&gt;
&lt;li&gt;GitHub Swag Pack&lt;/li&gt;
&lt;li&gt;DEV Sticker Pack&lt;/li&gt;
&lt;li&gt;DEV ‚ÄúActions Hackathon 2021‚Äù runner-up badge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Participants&lt;/strong&gt;&lt;/em&gt; (with a valid project):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DEV Sticker Pack&lt;/li&gt;
&lt;li&gt;DEV ‚ÄúActions Hackathon 2021‚Äù participant profile badge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-participate"&gt;
  &lt;/a&gt;
  How to Participate
&lt;/h3&gt;

&lt;p&gt;There‚Äôs already a robust library of &lt;a href="https://github.com/actions"&gt;GitHub Actions&lt;/a&gt;. So, for the 2021 version of this hackathon, we are challenging you to submit workflows by leveraging &lt;a href="https://github.com/marketplace?type=actions"&gt;&lt;em&gt;existing&lt;/em&gt; actions&lt;/a&gt;. That said, you are free to create custom actions if necessary.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-order-to-submit-a-valid-project-please-follow-the-submission-process-and-rules-below"&gt;
  &lt;/a&gt;
  In order to submit a valid project, please follow the submission process, and rules below...
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#how-to-submit"&gt;
  &lt;/a&gt;
  How To Submit
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Document your project journey along the way with the &lt;a href="https://dev.to/t/actionshackathon21"&gt;#ActionsHackathon21&lt;/a&gt; tag.&lt;/li&gt;
&lt;li&gt;Submit your project as a DEV post by filling out &lt;a href="https://dev.to/new/actionshackathon21"&gt;this template&lt;/a&gt; to share your workflow/s (.yml) and/or code repository. &lt;/li&gt;
&lt;li&gt;Please make sure the project links to the appropriate GitHub Actions repository, and includes &lt;a href="https://choosealicense.com/"&gt;an open source license&lt;/a&gt; and README.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#additional-rules"&gt;
  &lt;/a&gt;
  Additional Rules
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;NO PURCHASE NECESSARY. Open only to 18+. Contest entry period ends December 8, 2021 at 11:59 pm PT. Contest is void where prohibited, or restricted by law or regulation. For Official Rules, see &lt;a href="https://dev.to/page/actions-hackathon-2021-rules"&gt;Contest Announcement Page&lt;/a&gt; and &lt;a href="https://dev.to/page/official-hackathon-rules"&gt;General Contest Official Rules&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#community-support"&gt;
  &lt;/a&gt;
  Community Support
&lt;/h4&gt;

&lt;p&gt;The GitHub team will be available to help anyone who runs into issues, or has questions related to GitHub Actions or the hackathon in general. &lt;strong&gt;You can reach the GitHub team by leaving a comment in the &lt;a href="https://dev.to/devteam/github-actions-hackathon-2021-help-thread-1lk0"&gt;GitHub Actions Hackathon help thread&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also have a &lt;a href="https://dev.to/devteam/share-your-github-actions-hackathon-2021-updates-57k"&gt;community update thread&lt;/a&gt; where you can share your ideas, and gather feedback on your submission. You can use this thread to share your progress, generate community excitement, and get feedback from the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-dates-%F0%9F%97%93"&gt;
  &lt;/a&gt;
  Important Dates üóì
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;November 8, 2021: Hackathon Begins!&lt;/li&gt;
&lt;li&gt;December 8, 2021: Hackathon Submission Due at 11:59 PM PST.&lt;/li&gt;
&lt;li&gt;December 17, 2021: Hackathon Winners Announced&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Have fun with this challenge from our friends at GitHub!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>actions</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Easy Automatic Code Deployment With Git</title>
      <author>brandon_wallace</author>
      <pubDate>Mon, 08 Nov 2021 17:09:13 +0000</pubDate>
      <link>https://dev.to/brandonwallace/easy-automatic-code-deployment-with-git-igp</link>
      <guid>https://dev.to/brandonwallace/easy-automatic-code-deployment-with-git-igp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I will show you how to deploy code to a live server easily with Git.&lt;/p&gt;

&lt;p&gt;Let's say you have already &lt;a href="https://dev.to/brandonwallace/deploy-flask-the-easy-way-with-gunicorn-and-nginx-jgc"&gt;deployed your project&lt;/a&gt; to a live server. A few days later you receive valuable feedback on your project from another developer. You decide to make some improvements to the project. You work in your local Git repository to make the changes. You test everything to make sure it is working the way you intended it to work. Then you commit the changes in your code to your local Git repository. Then you push those changes to Github.&lt;/p&gt;

&lt;p&gt;How do you go about getting those improvements to the live server? Would you log into the server and meticulously edit the file manually?&lt;/p&gt;

&lt;p&gt;There is an easy way to deploy code to a live server - use Git. All you need it is the ability to SSH to the server.&lt;/p&gt;

&lt;p&gt;Here is the syntax for the git push command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git push &amp;lt;repository&amp;gt; &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;origin&lt;/code&gt; is first repository that is set up and usually represents the repository connected to the Github website. &lt;/p&gt;

&lt;p&gt;To get code to a live server, I will create a second repository on the live server to push code to. I will call the second repository "prod" to represent the repository on the live production server. &lt;/p&gt;

&lt;p&gt;After pushing code to the "origin" repository I will be able to push to "prod" any code ready for production. &lt;/p&gt;

&lt;p&gt;When I am ready to push code to the production server I run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push prod main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#on-the-server"&gt;
  &lt;/a&gt;
  On the server
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#set-up-a-repository-on-the-server"&gt;
  &lt;/a&gt;
  Set up a repository on the server.
&lt;/h2&gt;

&lt;p&gt;The first step to set this up is to create a bare repository on the web server where you will run the application.&lt;/p&gt;

&lt;p&gt;SSH to your server. My server has the user &lt;code&gt;brandon&lt;/code&gt; and the IP address &lt;code&gt;123.45.67.89&lt;/code&gt;. So I use this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh brandon@123.45.67.89
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a directory for the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mkdir /var/www/my_project_repo/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set the permissions on the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo chown $USER:$USER /var/www/my_project_repo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then move into the directory like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd /var/www/my_project_repo/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create the directory for the actual project with a &lt;code&gt;.git&lt;/code&gt; extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mkdir my_project.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into the "my_project.git" directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd my_project.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set up the directory as a Git bare repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init --bare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The directory structure should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree --dirsfirst -F
.
‚îú‚îÄ‚îÄ branches/
‚îú‚îÄ‚îÄ hooks/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ applypatch-msg.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ commit-msg.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ fsmonitor-watchman.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ post-update.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pre-applypatch.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pre-commit.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pre-merge-commit.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prepare-commit-msg.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pre-push.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pre-rebase.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pre-receive.sample*
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ push-to-checkout.sample*
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ update.sample*
‚îú‚îÄ‚îÄ info/
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ exclude
‚îú‚îÄ‚îÄ objects/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ info/
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pack/
‚îú‚îÄ‚îÄ refs/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ heads/
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tags/
‚îú‚îÄ‚îÄ config
‚îú‚îÄ‚îÄ description
‚îî‚îÄ‚îÄ HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-hook-to-perform-an-action"&gt;
  &lt;/a&gt;
  Creating a hook to perform an action.
&lt;/h2&gt;

&lt;p&gt;A hook will allow you to run a script when a particular action occurs. There are hooks that run on the client and hooks that run on the server. I will set up the server-side hook &lt;code&gt;post-receive&lt;/code&gt; that will run once a git push has finished executing. &lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;post-receive&lt;/code&gt; in the hooks directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch hooks/post-receive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use any text editor to edit the post-receive file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim hooks/post-receive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following content, change the paths to reflect your set up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/sh
git --work-tree=/var/www/my_project_repo/ --git-dir=/var/www/my_project_repo/my_project.git checkout -f main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The post-receive script is not executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -lF hooks/post-receive 
-rw------- 1 brandon brandon 0 Nov  2 21:19 hooks/post-receive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the script executable by running the &lt;code&gt;chmod&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x hooks/post-receive

$ ls -lF hooks/post-receive 
-rwx------ 1 brandon brandon 0 Nov  2 21:19 hooks/post-receive*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#on-the-client-machine"&gt;
  &lt;/a&gt;
  On the client machine
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#connect-your-local-repository-to-the-server-repository"&gt;
  &lt;/a&gt;
  Connect your local repository to the server repository.
&lt;/h2&gt;

&lt;p&gt;On the client machine where my local repository is located I will connect that repository to the one I created on the live server.&lt;/p&gt;

&lt;p&gt;Create a local repository with the same name as the directory on the server minus the &lt;code&gt;.git&lt;/code&gt; extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir my_project/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd my_project/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set up git in the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init

$ touch .gitignore readme.md LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add content to the readme.md file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '# My Auto Deploy Project' &amp;gt;&amp;gt; readme.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add a simple index.html file to the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following content to the index.html file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

  &amp;lt;head&amp;gt;

    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,initial-scale=1" /&amp;gt;
    &amp;lt;meta name="description" content="My auto deploy project."&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;

  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;

  &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add all the file to Git and commit the changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add --all

$ git commit -m "First commit"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new repository on Github without the readme.md, .gitignore, or LICENSE. We have already created the typical files for a Github repository. Name the Github repository the same as the local repository. My local repository is called &lt;code&gt;my_project&lt;/code&gt; so I use the same name to create the Github repository. See screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ThytOwna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/TwFkrsDr/create-gh-repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ThytOwna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/TwFkrsDr/create-gh-repo.png" alt="create-gh-repo.png" width="801" height="789"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect the local repository to Github. Make sure the branch is called &lt;code&gt;main&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git remote add origin git@github.com:brandon-wallace/my_project.git

$ git branch -M main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set &lt;code&gt;origin&lt;/code&gt; as the default repository to push to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push -u origin main

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 550 bytes | 550.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:brandon-wallace/my_project.git
 * [new branch]      main -&amp;gt; main
Branch 'main' set up to track remote branch 'main' from 'origin'.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have successfully connected the local repository to Github. Now I will connect the local repository to the live production server. My server has the IP address &lt;code&gt;123.45.67.89&lt;/code&gt; so I run this command with the full path to the &lt;code&gt;my_project.git&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git remote add prod brandon@123.45.67.89:/var/www/my_project_repo/my_project.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I want to push code to the production server. I run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push prod main

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 550 bytes | 550.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
remote: Switched to branch 'main'
To 123.45.67.89:/var/www/my_project_repo/my_project.git
 * [new branch]      main -&amp;gt; main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View the remotes. This shows that there are two remote repositories available, &lt;code&gt;prod&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git remote -v

prod    brandon@123.45.67.89:my_project.git (fetch)
prod    brandon@123.45.67.89:my_project.git (push)
origin  https://github.com/brandon-wallace/my_project.git (fetch)
origin  https://github.com/brandon-wallace/my_project.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will make some changes to the project and push those to the production server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some content to the CSS file with any text editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim sytle.css

# Example content

html {
    font-size: 100%;
}

body {
    background: #FFFFFF;
    font-family: sans-serif;
    font-weight: 400;
    line-height: 1.75;
    color: #000000;
}

h1 {
    margin-top: 0;
    font-size: 3.052rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the new CSS file. Commit the changes to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add style.css

$ git commit -m "Add CSS file"

# Output

[main 8881680] Add CSS file
 1 files changed, 27 insertions(+), 3 deletions(-)
 create mode 100644 style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right now, on the server I can see four files in &lt;code&gt;my_project_repo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ /var/www/my_project_repo $ ls -l
total 12
-rw-r--r-- 1 brandon brandon  319 Nov  7 10:25 index.html
-rw-r--r-- 1 brandon brandon    0 Nov  7 10:25 LICENSE
drwxr-xr-x 8 brandon brandon 4096 Nov  7 10:25 my_project.git
-rw-r--r-- 1 brandon brandon   25 Nov  7 10:25 readme.md

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push the changes to the production server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push prod main

Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 4 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 623 bytes | 623.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Already on 'main'
To 123.45.67.89:/var/www/my_project_repo/my_project.git
   083f700..8881680  main -&amp;gt; main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now on the server I can see the &lt;code&gt;style.css&lt;/code&gt; I just pushed to the &lt;code&gt;prod&lt;/code&gt; repository running on the live server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/var/www/my_project_repo $ ls -l
total 16
-rw-r--r-- 1 brandon brandon  362 Nov  7 10:56 index.html
-rw-r--r-- 1 brandon brandon    0 Nov  7 10:25 LICENSE
drwxr-xr-x 8 brandon brandon 4096 Nov  7 10:56 my_project.git
-rw-r--r-- 1 brandon brandon   25 Nov  7 10:25 readme.md
-rw-r--r-- 1 brandon brandon  365 Nov  7 10:56 style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h1&gt;

&lt;p&gt;First, check carefully for spelling errors is highly recommended.&lt;/p&gt;

&lt;p&gt;If you get &lt;code&gt;-bash: git: command not found&lt;/code&gt; error install &lt;code&gt;git&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt update

$ sudo apt install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You get the error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh: Could not resolve hostname github.com: Temporary failure in name resolution
fatal: Could not read from remote repository...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to set up SSH keys on Github.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you learn something new by reading this article. Using Git you can easily push changes to a project to a live production server. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGkQ12x6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brandon-wallace" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGkQ12x6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brandon-wallace" alt="Github" width="" height=""&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2581IpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/brandonwallace" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2581IpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/brandonwallace" alt="DEV.to" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave feedback, comments, or suggestions.&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Announcing Appwrite Web SDK 5.0</title>
      <author>Torsten Dittmann</author>
      <pubDate>Mon, 08 Nov 2021 16:55:55 +0000</pubDate>
      <link>https://dev.to/appwrite/announcing-appwrite-web-sdk-50-58ek</link>
      <guid>https://dev.to/appwrite/announcing-appwrite-web-sdk-50-58ek</guid>
      <description>&lt;p&gt;We are very excited to announce the release of Appwrite's Web SDK version 5.0 with complete TypeScript coverage. It is now available on &lt;a href="https://www.npmjs.com/package/appwrite"&gt;npm&lt;/a&gt;. With this version, each method will now return proper TypeScript definitions. &lt;/p&gt;

&lt;p&gt;We hope this will help a lot of developers out there who are using our Web SDK in combination with TypeScript for building their applications. Having response definitions means you will know what method will return and what properties are available to you via autocomplete without leaving your IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  ‚öôÔ∏è Setup
&lt;/h2&gt;

&lt;p&gt;First, you need to install the Appwrite SDK or upgrade it to the latest version via &lt;code&gt;npm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;appwrite@5.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to import, instantiate and configure the SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PROJECT_ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#account"&gt;
  &lt;/a&gt;
  üë• Account
&lt;/h2&gt;

&lt;p&gt;Let's start with the simplest example by getting the current user using the &lt;code&gt;account.get()&lt;/code&gt; method. In previous versions of the SDK, this method returned a &lt;code&gt;unknown&lt;/code&gt; type, but now you don't need to create your own definitions anymore, since the SDK will offer them out-of-the-box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;user&lt;/code&gt; object will now already contain all possible properties via a TypeScript definition. But there is more, since the &lt;code&gt;User&lt;/code&gt; model also contains the &lt;code&gt;prefs&lt;/code&gt; property containing all of the User's preferences. These can be set by the client, which means the SDK cannot provide you with typings yet.&lt;/p&gt;

&lt;p&gt;Let's assume you store the users preferred theme for your application in their preferences. You will have &lt;code&gt;Type&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;MyPreferences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new SDK allows you to pass &lt;code&gt;MyPreferences&lt;/code&gt; via a Generic - this allows you to pass your own structure to the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyPreferences&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new &lt;code&gt;user&lt;/code&gt; object returned from &lt;code&gt;account.get()&lt;/code&gt; using a generic is now automatically extended by your &lt;code&gt;MyPreferences&lt;/code&gt; on the &lt;code&gt;prefs&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Generics can be used on any method, which can return a data structure that is allowed to be extended by the developer like the User's preferences or documents from the Database service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  üìÄ Database
&lt;/h2&gt;

&lt;p&gt;Talking about Database, let's move on to some examples how the new SDK can be used in combination with it.&lt;/p&gt;

&lt;p&gt;Assuming we have a collection containing Movies with following type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nl"&gt;gotAnOscar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are all properties that can be set as rules in a collection, but by default documents in Appwrite come with values like &lt;code&gt;$id&lt;/code&gt;, &lt;code&gt;$permissions&lt;/code&gt; and &lt;code&gt;$collection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can easily import the &lt;code&gt;Models&lt;/code&gt; from the SDK and merge &lt;code&gt;Movie&lt;/code&gt; with the &lt;code&gt;Document&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Models&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nl"&gt;gotAnOscar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have all our TypeScript definitions in place, let's use them by retrieving a Document from the Database using &lt;code&gt;database.getDocument()&lt;/code&gt;. We can use Generics to tell TypeScript to use our &lt;code&gt;Movie&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDocument&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;movies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example with using the &lt;code&gt;database.listDocuments&lt;/code&gt;, which will have 2 pre-defined properties called &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;documents&lt;/code&gt;,  the type passed as a generic will be used for &lt;code&gt;documents&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDocuments&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;movies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The sum of all documents.&lt;/span&gt;
&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Will use an array of our Movie type.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can also be used with the &lt;code&gt;subscribe()&lt;/code&gt; method for real-time updates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collection.movies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Will use the Movie type.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try it out by yourself using this &lt;a href="https://codesandbox.io/s/appwrite-web-sdk-5-0-example-tkwrm?file=/index.ts"&gt;StackBlitz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The heavily improved TypeScript support of the new Web SDK allow you to kickstart the development of your Application and keep you focused without leaving your IDE.&lt;/p&gt;

&lt;p&gt;If you have any issues or questions feel free to reach us on &lt;a href="https://appwrite.io/discord"&gt;our discord&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  üìö Learn more
&lt;/h2&gt;

&lt;p&gt;You can use following resources to learn more and get help&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üöÄ &lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;Getting Started Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìú &lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üí¨ &lt;a href="https://appwrite.io/discord"&gt;Discord Community&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cover by &lt;a href="https://www.pexels.com/@kevin-ku-92347?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Kevin Ku&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/data-codes-through-eyeglasses-577585/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rails, Hotwire, CableReady, and StimulusReflex are BFFs</title>
      <author>Hopsoft</author>
      <pubDate>Mon, 08 Nov 2021 16:27:46 +0000</pubDate>
      <link>https://dev.to/hopsoft/rails-hotwire-cableready-and-stimulusreflex-are-bffs-4a89</link>
      <guid>https://dev.to/hopsoft/rails-hotwire-cableready-and-stimulusreflex-are-bffs-4a89</guid>
      <description>&lt;p&gt;&lt;strong&gt;Enforcing strict RESTful routes and controllers is perhaps the most impactful technique that influenced my usage of &lt;a href="https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; for the better.&lt;/strong&gt; I cannot overstate how much I love traditional &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; semantics and encourage their usage on every team that I have influence over. &lt;/p&gt;

&lt;p&gt;Having said that, I also think rigidly applying this pattern to smaller and smaller use cases has diminishing returns. One example of a smaller use case is &lt;a href="https://turbo.hotwired.dev/reference/streams"&gt;TurboFrames&lt;/a&gt;. TurboFrames are great and I use them along with their attendant REST semantics, but I try to be very thoughtful about how far I take this approach.&lt;/p&gt;

&lt;p&gt;For example, libs like &lt;a href="https://cableready.stimulusreflex.com/"&gt;CableReady&lt;/a&gt; and &lt;a href="https://github.com/stimulusreflex/futurism"&gt;Futurism&lt;/a&gt; can lazy load partials so unobtrusively that the notion of adhering to the formality of REST, &lt;em&gt;with its attendant new routes, controllers, etc...&lt;/em&gt;, would be far too much ceremony for matching use cases.&lt;/p&gt;

&lt;p&gt;One of the original goals of CableReady and &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt; was to work seamlessly with traditional HTTP server rendered Rails apps &lt;em&gt;(pre Hotwire)&lt;/em&gt; without requiring significant architectural changes or forcing a proliferation of new routes, controllers, or views/partials etc... We basically wanted a way to gradually introduce robust real-time and reactive behavior into traditional Rails apps with as little friction as possible. The idea being to allow people to leverage the work that had already been done rather than forcing a rethinking of the app. I view CableReady/StimulusReflex as as: &lt;strong&gt;REST + &lt;a href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;RPC&lt;/a&gt; sprinkles + async server triggered DOM behavior&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hotwired.dev/"&gt;Hotwire&lt;/a&gt;, while very cool, introduces new concepts that impose a higher cognitive cost and forces you to rethink how to best structure a Rails app. I view Hotwire as: &lt;strong&gt;REST semantics for everything + async server triggered CRUD updates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are pros and cons to each approach. Hotwire has more obvious and strict conventions, while CableReady and StimulusReflex adhere more to Ruby's philosophy of flexibility and expressiveness.&lt;/p&gt;

&lt;p&gt;For me, using both Hotwire and CableReady + StimulusReflex techniques together is like &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/You_can't_have_your_cake_and_eat_it"&gt;"having my cake and eating it too."&lt;/a&gt;&lt;/em&gt; Admitedly, this is a power move and requires some experience to know when to apply each approach.&lt;/p&gt;

&lt;p&gt;FYI - There are some great conversations on the &lt;a href="https://discord.gg/stimulus-reflex"&gt;StimulusReflex Discord&lt;/a&gt; server about this stuff. We'd love it if you joined us.&lt;/p&gt;




&lt;p&gt;Also, I should note how much I dislike the umbrella marketing term &lt;strong&gt;"Hotwire"&lt;/strong&gt; as it forces a false dichotomy in this conversation. Both CableReady and StimulusReflex are designed to work well with Hotwire libs and even have hard dependencies on some of them.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>hotwire</category>
      <category>stimulusreflex</category>
      <category>cableready</category>
    </item>
    <item>
      <title>How to Subscribe to and Receive Push Notifications from YouTube‚Äôs API using Typescript and Nodejs</title>
      <author>Chiamaka Ojiyi</author>
      <pubDate>Mon, 08 Nov 2021 16:25:11 +0000</pubDate>
      <link>https://dev.to/algodame/how-to-subscribe-to-and-receive-push-notifications-from-youtubes-api-using-typescript-and-nodejs-2gik</link>
      <guid>https://dev.to/algodame/how-to-subscribe-to-and-receive-push-notifications-from-youtubes-api-using-typescript-and-nodejs-2gik</guid>
      <description>&lt;p&gt;Youtube‚Äôs API provides developers with a way to get push notifications for when specific changes occur on a youtube channel. Youtube‚Äôs API sends out these notifications through a PubSubHubbub webhook protocol.&lt;/p&gt;

&lt;p&gt;Webhooks are used to send near-real-time data to applications. &lt;/p&gt;

&lt;p&gt;Let‚Äôs say you have an application that sends out emails to a mailing list and you only want to send out these emails whenever Beyonce posts a video on her channel. To do this, you can use Youtube‚Äôs webhooks to subscribe to push notifications on Beyonce‚Äôs channel. Whenever Beyonce posts a video, Youtube will tunnel down a request to your server to inform you of this event.&lt;/p&gt;

&lt;p&gt;In order to get the push notifications from Youtube‚Äôs webhook, you need to provide Youtube with a URL which you will use to receive the data for whenever a new video is uploaded on a specific channel. This URL is called a webhook call-back URL.&lt;/p&gt;

&lt;p&gt;Youtube only sends out push notifications for the following events on a channel:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New video is uploaded&lt;/li&gt;
&lt;li&gt;A video‚Äôs title is updated&lt;/li&gt;
&lt;li&gt;A video‚Äôs description is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Youtube sends out the push notifications to your call-back URL in xml format.&lt;/p&gt;

&lt;p&gt;In this tutorial, I‚Äôll show you how you can set up a call-back server to subscribe to and receive push notifications from Youtube‚Äôs API using typescript and nodejs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-set-up"&gt;
  &lt;/a&gt;
  Project set up
&lt;/h3&gt;

&lt;p&gt;In your project folder, run &lt;code&gt;npm init -y&lt;/code&gt; in your terminal to create a package.json file&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npx tsc --init&lt;/code&gt; to create a tsc file. This is a typescript configuration file.&lt;/p&gt;

&lt;p&gt;In the script section of your package.json, add this bit of code for running the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-node index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;npm i @types/express, dotenv, express, ts-node, typescript, youtube-notification&lt;/code&gt; to install dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-code-the-application"&gt;
  &lt;/a&gt;
  Let's code the application
&lt;/h3&gt;

&lt;p&gt;Create a file and name it &lt;code&gt;index.ts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YouTubeNotifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;youtube-notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6050&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://strong-yak-75.loca.lt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;channelId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CHANNEL_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;YouTubeNotifier&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;hubCallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/youtube/notifications`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/youtube/notifications&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`App listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channelId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Subscribed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;notified&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New Video&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root of your project and add your youtube channel ID there.&lt;/p&gt;

&lt;p&gt;Add the channel ID in this format:&lt;br&gt;
&lt;code&gt;CHANNEL_ID="YOUR_CHANNEL_ID_GOES_HERE"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To get the channel ID of a youtube channel, navigate to the channel on youtube. The browser address bar should have a URL in the format below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;This &lt;code&gt;UC8butISFwT-Wl7EV0hUK0BQ&lt;/code&gt; part is the channel ID.&lt;/p&gt;

&lt;p&gt;To get the notifications from Youtube, your application will need to be deployed in order to have a https forwarding URL. Since we are still developing locally, we'll use a secondary service called Localtunnel.&lt;/p&gt;

&lt;p&gt;Locatunnel allows us to easily share a web service on our local development machine with the world.&lt;/p&gt;

&lt;p&gt;To start your server, go to your terminal and run:&lt;br&gt;
&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While your server is running, open another terminal window and run: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx localtunnel --port "ADD_YOUR_PORT_NUMBER_HERE"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A https URL will be printed on your terminal. Copy the URL and add it as the baseUrl in your index file. Do not close the terminal running localtunnel.&lt;/p&gt;

&lt;p&gt;Restart your server to reflect the edit you just made. You should have two terminals up.&lt;/p&gt;

&lt;p&gt;Now whenever a new video is uploaded to the specific youtube channel, the details of the video will be logged to the terminal where your serve is currently running on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-helpful-debugging-tips"&gt;
  &lt;/a&gt;
  Some helpful debugging tips
&lt;/h3&gt;

&lt;p&gt;You may need to diagnose your subscription to be sure you are subscribed or if errors occur when Youtube tries to send you push notifications.&lt;/p&gt;

&lt;p&gt;To run this diagnosis, navigate to the &lt;a href="https://pubsubhubbub.appspot.com/subscribe"&gt;PubSubHubBub page&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Go to the Subscriber Diagnostics section of the page. Add your call-back URL and the topic URL.&lt;/p&gt;

&lt;p&gt;Topic URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://www.youtube.com/xml/feeds/videos.xml?channel_id=YOUR_CHANNEL_ID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Click "Get Info" to run the diagnosis. &lt;/p&gt;

&lt;p&gt;Finally, here's the &lt;a href="https://github.com/AlgoDame/Youtube-PubSubHubBub-Notification-Application"&gt;Github repo&lt;/a&gt; for this article. You are welcome to fork and star the repo.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Some popular string Methods in JavaScript</title>
      <author>Abhishek Rath</author>
      <pubDate>Mon, 08 Nov 2021 16:14:13 +0000</pubDate>
      <link>https://dev.to/abhishek_rath/string-methods-in-javascript-4d32</link>
      <guid>https://dev.to/abhishek_rath/string-methods-in-javascript-4d32</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-string"&gt;
  &lt;/a&gt;
  What is a String?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The sequence of one or more characters enclosed within quotation marks is called a string.&lt;/li&gt;
&lt;li&gt;The quotation can be single quotes &lt;code&gt;''&lt;/code&gt; or double quotes &lt;code&gt;" "&lt;/code&gt; or backtick ``.&lt;/li&gt;
&lt;li&gt;And, the sequence of characters can be alphabets, numbers, symbols, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example of creating strings&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXeJQoKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16zmb733im0k1vrmlp8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXeJQoKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16zmb733im0k1vrmlp8f.png" alt="Create string" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-commonly-used-javascript-methods"&gt;
  &lt;/a&gt;
  Some commonly used JavaScript methods:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Length&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As the name suggests, &lt;code&gt;length&lt;/code&gt; returns the length of the string.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cbg8yTFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghmt0kg9k6wexemge3ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cbg8yTFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghmt0kg9k6wexemge3ga.png" alt="Length" width="880" height="313"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note, in the above example the whitespace, comma, and exclamation mark are also part of the string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.&lt;strong&gt;charAt(index)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;charAt()&lt;/code&gt; returns the character at a specified index in a string.&lt;/li&gt;
&lt;li&gt;The very first character of the string has an index of 0, the second character has index 1, and so on...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED7CWC15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/190dnlhpjko7z6bygbq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED7CWC15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/190dnlhpjko7z6bygbq8.png" alt="charAt" width="880" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;substring(start, end)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This method extracts the part of the string between &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; and returns the substring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQqciMRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vuuqvhiqod6i73slryw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQqciMRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vuuqvhiqod6i73slryw.png" alt="substring" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;substr(start, length)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;substr()&lt;/code&gt; method returns the specified number of characters from the specified index (&lt;code&gt;start&lt;/code&gt; parameter) from a given string.&lt;/li&gt;
&lt;li&gt;Here, &lt;code&gt;start&lt;/code&gt; defines the starting index from where the substring is to be extracted from the original string.&lt;/li&gt;
&lt;li&gt;And, &lt;code&gt;length&lt;/code&gt; defines the number of characters to be extracted from the specified start index.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;code&gt;length&lt;/code&gt; parameter isn't given, then all the characters from start till the end of the string are extracted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--db_kXY5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zm8ojwj9bmh3ez7gwh4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--db_kXY5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zm8ojwj9bmh3ez7gwh4q.png" alt="substr" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;concat()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;concat()&lt;/code&gt; method joins two or more strings.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;concat()&lt;/code&gt; method doesn't modify the  original strings, but it returns a new string.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lcbI1dHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kam7ly6liq3z4g9wzkn4.png" alt="concat" width="880" height="477"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.&lt;strong&gt;toUpperCase()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;toUpperCase()&lt;/code&gt; method converts the strings to upper case letters.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--re4wZ9mK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opks9yhun2u40ne4y6v4.png" alt="toUpperCase()" width="880" height="444"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.&lt;strong&gt;toLowerCase()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;toLowerCase()&lt;/code&gt; method converts the strings to lower case letters. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_ys54eC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ih7jxub77z1lwzw63dv.png" alt="lower case" width="880" height="388"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;8.&lt;strong&gt;slice(start, end)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;slice()&lt;/code&gt; method extracts and returns a part of the string from start to (excluding) the end character.&lt;/li&gt;
&lt;li&gt;If there's no second argument specified, then the slice method extracts till the end of the string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GIx5rhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4gjbvt3fnqnfqs6tfpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GIx5rhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4gjbvt3fnqnfqs6tfpz.png" alt="slice" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;slice()&lt;/code&gt; also works on negative indices. If a negative index is specified, the string is extracted from the right end.&lt;/li&gt;
&lt;li&gt;The negative index starts from -1 and it indicates the last character of the string, -2 is the second last character, and so on...
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wkPOmkm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwnkwsphk79umaa8t7ez.png" alt="slice" width="880" height="411"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;9.&lt;strong&gt;replace(substring)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;replace()&lt;/code&gt; method is used to replace a part of a given string with a new substring.&lt;/li&gt;
&lt;li&gt;One important thing to note here is that the &lt;code&gt;replace()&lt;/code&gt; method does not change the original string on which it is called upon. It simply returns a new string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnKRz0O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cccidljk1o9yc3ecz596.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnKRz0O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cccidljk1o9yc3ecz596.png" alt="replace" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;includes(substring)&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;includes()&lt;/code&gt; method does a case-sensitive search on the original string to see if the specified substring is present in the string or not.&lt;/li&gt;
&lt;li&gt;If the specified string is present, the method returns &lt;code&gt;true&lt;/code&gt; otherwise &lt;code&gt;false&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XGttuOxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdn7mzevxtdk4nipdy7k.png" alt="includes" width="880" height="494"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;11.&lt;strong&gt;trim()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;trim()&lt;/code&gt; method removes leading and trailing whitespaces from the given string.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2y-lzfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phzu5o545e5200jq06hb.png" alt="trim" width="880" height="353"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;That is all from my side. I hope this article provides you with the basics of some popular string methods used in JavaScript.&lt;/li&gt;
&lt;li&gt;Working through the examples is the best idea to understand these methods. Play with the examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#keep-learning"&gt;
  &lt;/a&gt;
  Keep Learning!!
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get started with Medusa Part 2: Make the Server Your Own</title>
      <author>Shahed Nasser</author>
      <pubDate>Mon, 08 Nov 2021 15:41:34 +0000</pubDate>
      <link>https://dev.to/medusajs/get-started-with-medusa-part-2-make-the-server-your-own-gka</link>
      <guid>https://dev.to/medusajs/get-started-with-medusa-part-2-make-the-server-your-own-gka</guid>
      <description>&lt;p&gt;In the first part of this tutorial series, I compared &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; and Shopify to showcase how &lt;a href="https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j"&gt;Medusa&lt;/a&gt; &lt;a href="https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j"&gt;is the open-source alternative to Shopify&lt;/a&gt;. Where Shopify lacks when it comes to its pricing plans, minimal customization abilities, and inability to fit for every business use case, Medusa can compensate for it.&lt;/p&gt;

&lt;p&gt;Medusa is an open-source headless commerce solution that allows you to own your stack and make it fit into whatever use case your business needs. It is fast and very flexible.&lt;/p&gt;

&lt;p&gt;In the previous tutorial, you learned about Medusa‚Äôs 3 components and how you can install and run each of them. It is a very easy process that can get your store up and running in seconds.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will start making changes to the server to make it your own. You will learn how to create new API endpoints, services, and subscribers. The API you will create will retrieve the products with the most sales, and you will create a service and subscriber to help us do that.&lt;/p&gt;

&lt;p&gt;The code for this tutorial is on &lt;a href="https://github.com/shahednasser/medusa-store-tutorial"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This tutorial assumes you have already read and followed along with &lt;a href="https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j"&gt;part 1&lt;/a&gt;. In the first part, you learn how to setup the Medusa store, which you will make changes to in this tutorial, as well as the Medusa storefront and the  admin. If you have not went through it yet, please do before continuing with this tutorial.&lt;/p&gt;

&lt;p&gt;In addition, you need to have Redis installed and running on your machine to be able to use subscribers. So, if you do not have it installed and you want to follow along with the tutorial you should go ahead and &lt;a href="http://redis.io"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-service"&gt;
  &lt;/a&gt;
  Add a Service
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, you will be creating an API endpoint that allows you to get the top products, i.e. the products with the most sales.&lt;/p&gt;

&lt;p&gt;In Medusa, services generally handle the logic of models or entities in one place. They hold helper functions that allow you to retrieve or perform action on these models. Once you put them in a service, you can access the service from anywhere in your Medusa project.&lt;/p&gt;

&lt;p&gt;So, in this tutorial, you will create a service &lt;code&gt;TopProductsService&lt;/code&gt; that will hold all the logic needed to update products with their number of sales and to retrieve the products sorted by their number of sales.&lt;/p&gt;

&lt;p&gt;To create a service, start by creating the file &lt;code&gt;src/services/top-products.js&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BaseService } from "Medusa-interfaces";

class TopProductsService extends BaseService {
  constructor({ productService, orderService }) {
    super();
    this.productService_ = productService;
    this.orderService_ = orderService;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here are a few things to note about this service:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When this service is retrieved in other places in your code, the service should be referred to as the camel-case version of the file name followed by ‚ÄúService‚Äù. In this case, the file name is &lt;code&gt;top-product&lt;/code&gt;, so to access it in other places we use &lt;code&gt;topProductsService&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similarly to how you will use this service, we inject as dependencies the &lt;code&gt;productService&lt;/code&gt; and &lt;code&gt;orderService&lt;/code&gt; in the constructor. When you create classes in Medusa, you can use dependency injection to get access to services.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Implement getTopProducts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next step is to add the method &lt;code&gt;getTopProducts&lt;/code&gt; to the &lt;code&gt;TopProductsService&lt;/code&gt; class. This method will retrieve the products from the database, sort them by their number of sales, then return the top 5 products.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;TopProductsService&lt;/code&gt; class add the new method:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async getTopProducts() {
  const products = await this.productService_.list({
    status: ['published']
  }, {
    relations: ["variants", "variants.prices", "options", "options.values", "images", "tags", "collection", "type"]
  });
  products.sort((a, b) =&amp;gt; {
    const aSales = a.metadata &amp;amp;&amp;amp; a.metadata.sales ? a.metadata.sales : 0;
    const bSales = b.metadata &amp;amp;&amp;amp; b.metadata.sales ? b.metadata.sales : 0;
    return aSales &amp;gt; bSales ? -1 : (aSales &amp;lt; bSales ? 1 : 0);
  });
  return products.slice(0, 4);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You first use &lt;code&gt;this.productService_&lt;/code&gt; to retrieve the list of products. Notice that the &lt;code&gt;list&lt;/code&gt; method can take 2 optional parameters. The first one specifies where conditions, and the second parameter specifies the relations on this products to retrieve.&lt;/p&gt;

&lt;p&gt;Then, you sort the array with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;sort&lt;/a&gt; Array method giving it a compare function. In the compare function, you compare the number of sales stored inside the &lt;code&gt;metadata&lt;/code&gt; field. In Medusa, most entities have the &lt;code&gt;metadata&lt;/code&gt; field which allows you to easily add custom attributes in the default entities for your purposes. Here, you use the &lt;code&gt;metadata&lt;/code&gt; field to store the number of sales. You are also sorting the products descending.&lt;/p&gt;

&lt;p&gt;Finally, you use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"&gt;splice&lt;/a&gt; Array method to retrieve only the first 5 items.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implement updateSales&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, you will implement the &lt;code&gt;updateSales&lt;/code&gt; method in the &lt;code&gt;TopProductsService&lt;/code&gt;. This method receives an order ID as a parameter, then retrieves this order and loops over the items ordered. Then, the &lt;code&gt;sales&lt;/code&gt; property inside &lt;code&gt;metadata&lt;/code&gt; is incremented and the product is updated.&lt;/p&gt;

&lt;p&gt;Add the new method in &lt;code&gt;TopProductsService&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async updateSales(orderId) {
  const order = await this.orderService_.retrieve(orderId, {
    relations: ["items", "items.variant", "items.variant.product"]
  });
  if (order.items &amp;amp;&amp;amp; order.items.length) {
    for (let i = 0; i &amp;lt; order.items.length; i++) {
      const item = order.items[i];
      //retrieve product by id
      const product = await this.productService_.retrieve(item.variant.product.id, {
        relations: ["variants", "variants.prices", "options", "options.values", "images", "tags", "collection", "type"]
      });
      const sales = product.metadata &amp;amp;&amp;amp; product.metadata.sales ? product.metadata.sales : 0;
      //update product
      await this.productService_.update(product.id, {
        metadata: { sales: sales + 1 }
      });

    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You first use &lt;code&gt;this.orderService_&lt;/code&gt; to retrieve the order by its ID. The &lt;code&gt;retrieve&lt;/code&gt; method takes the order ID as the first parameter and a config object as the second parameter which is similar to the ones you used in the previous method. You pass it the relations array to retrieve the ordered items and their products.&lt;/p&gt;

&lt;p&gt;Then, you loop over the items and use the product id inside each item to retrieve the product. Afterward, you increment the number of sales and update the product using the &lt;code&gt;update&lt;/code&gt; method on &lt;code&gt;this.productService_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This service is now ready to update product sales numbers and retrieve products ordered based on their sales number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-an-api-endpoint"&gt;
  &lt;/a&gt;
  Add an API Endpoint
&lt;/h2&gt;

&lt;p&gt;Now, you will add an API endpoint to retrieve the top products. To add an API endpoint, you can do that by creating the file &lt;code&gt;src/api/index.js&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Router } from "express"
export default () =&amp;gt; {
  const router = Router()
  router.get("/store/top-products", async (req, res) =&amp;gt; {
    const topProductsService = req.scope.resolve("topProductsService")
    res.json({
      products: await topProductsService.getTopProducts()
    })
  })
  return router;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Creating an endpoint is easy. You just need to export an &lt;a href="https://expressjs.com"&gt;Express&lt;/a&gt; Router. This router can hold as many routes as you want.&lt;/p&gt;

&lt;p&gt;In this code, you add a new GET route at the endpoint &lt;code&gt;/store/top-products&lt;/code&gt;. The reason you are using &lt;code&gt;store&lt;/code&gt; here as a prefix to &lt;code&gt;top-products&lt;/code&gt; is that Medusa prefixes all storefront endpoints with &lt;code&gt;/store&lt;/code&gt;, and all admin endpoints with &lt;code&gt;/admin&lt;/code&gt;. You do not need to add this prefix, but it is good to follow the conventions of the Medusa APIs.&lt;/p&gt;

&lt;p&gt;In this route, you retrieve the service you created in the previous section with this line:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const topProductsService = req.scope.resolve("topProductsService")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can retrieve any service inside routes using &lt;code&gt;req.scope.resolve&lt;/code&gt;. As explained in the services section, you need to use the camel-case version of the file name followed by &lt;code&gt;Service&lt;/code&gt; when referencing a service in your code.&lt;/p&gt;

&lt;p&gt;After retrieving the service, you can then use the methods you created on it. So, you return a JSON response that has the key &lt;code&gt;products&lt;/code&gt; and the value will be the array of top products returned by &lt;code&gt;getTopProducts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let us test it out. You can access this endpoint at &lt;code&gt;localhost:9000/store/top-products&lt;/code&gt;. As this is a GET request, you can do it from your browser or using a client like &lt;a href="https://www.postman.com"&gt;Postman&lt;/a&gt; or &lt;a href="https://www.thunderclient.io"&gt;Thunder Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should see an array of products in the response. At the moment, nothing is sorted as you have not implemented the subscriber which will update the sales number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jurVzncm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E2AAA019E9ECAD398F74CB5188E044A697A4B7712D8B64DE0483D9EA29C0E07_1636115815267_Screen%2BShot%2B2021-11-04%2Bat%2B7.32.44%2BPM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jurVzncm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E2AAA019E9ECAD398F74CB5188E044A697A4B7712D8B64DE0483D9EA29C0E07_1636115815267_Screen%2BShot%2B2021-11-04%2Bat%2B7.32.44%2BPM.png" alt="" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-subscriber"&gt;
  &lt;/a&gt;
  Add a Subscriber
&lt;/h2&gt;

&lt;p&gt;Finally, you will add a subscriber which will update the sales number of products when an order is placed.&lt;/p&gt;

&lt;p&gt;Before creating the subscriber, you need to make sure that Redis is installed and running on your machine. You can test that by running the following command in your terminal:      &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;redis-cli ping
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If the command returns ‚ÄúPONG‚Äù then the Redis service is running.&lt;/p&gt;

&lt;p&gt;Then, go to &lt;code&gt;Medusa&lt;/code&gt;&lt;code&gt;-config.js&lt;/code&gt; in the root of your project. You will see that at the end of the file inside the exported config there is this line commented out:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// redis_url: REDIS_URL,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Remove the comments. This uses the variable &lt;code&gt;REDIS_URL&lt;/code&gt; declared in the beginning of the file. Its value is either the Redis URL set in &lt;code&gt;.env&lt;/code&gt; or the default Redis URL &lt;code&gt;redis://localhost:6379&lt;/code&gt;. If you have a different Redis URL, add the new variable &lt;code&gt;REDIS_URL&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt; with the URL.&lt;/p&gt;

&lt;p&gt;Then, restart the server. This will take the updated configuration and connect to your Redis server.&lt;/p&gt;

&lt;p&gt;Now, you will implement the subscriber. Create the file &lt;code&gt;src/subscribers/top-products.js&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class TopProductsSubscriber {
  constructor({ topProductsService, eventBusService }) {
    this.topProductsService_ = topProductsService;
    eventBusService.subscribe("order.placed", this.handleTopProducts);
  }
  handleTopProducts = async (data) =&amp;gt; {
    this.topProductsService_.updateSales(data.id);
  };
}
export default TopProductsSubscriber;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Similar to how you implemented &lt;code&gt;TopProductsService&lt;/code&gt;, you pass the &lt;code&gt;topProductsService&lt;/code&gt; in the constructor using dependency injection. You also pass &lt;code&gt;eventBusService&lt;/code&gt;. This is used to subscribe a handler to an event in the constructor.&lt;/p&gt;

&lt;p&gt;You subscribe to the order placed event with this line:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eventBusService.subscribe("order.placed", this.handleTopProducts);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;subscribe&lt;/code&gt; method on &lt;code&gt;eventBusService&lt;/code&gt; takes the name of the event as the first parameter and the handler as the second parameter.&lt;/p&gt;

&lt;p&gt;You then define in the class the &lt;code&gt;handleTopProducts&lt;/code&gt; method which will handle the &lt;code&gt;order.placed&lt;/code&gt; event. Event handlers in Medusa generally receive a &lt;code&gt;data&lt;/code&gt; object that holds an &lt;code&gt;id&lt;/code&gt; property with the ID of the entity this event is related to. So, you pass this ID into the &lt;code&gt;updateSales&lt;/code&gt; method on &lt;code&gt;this.topProductsService_&lt;/code&gt; to update the number of sales for each of the products in the order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-it-out"&gt;
  &lt;/a&gt;
  Test It Out
&lt;/h2&gt;

&lt;p&gt;You will now test everything out. Make sure the server is running. If not, run it with the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then, go to the Medusa storefront installation and run:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Go to the storefront and place an order. This will trigger the &lt;code&gt;TopProductsSubscriber&lt;/code&gt; which will update the sales of the products in that order.&lt;/p&gt;

&lt;p&gt;Now, send a request to &lt;code&gt;/store/top-products&lt;/code&gt; like you did before. You should see that &lt;code&gt;sales&lt;/code&gt; inside the &lt;code&gt;metadata&lt;/code&gt; property of the products in that order has increased.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1O23AdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E2AAA019E9ECAD398F74CB5188E044A697A4B7712D8B64DE0483D9EA29C0E07_1636115827468_Screen%2BShot%2B2021-11-05%2Bat%2B1.00.44%2BPM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1O23AdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E2AAA019E9ECAD398F74CB5188E044A697A4B7712D8B64DE0483D9EA29C0E07_1636115827468_Screen%2BShot%2B2021-11-05%2Bat%2B1.00.44%2BPM.png" alt="" width="300" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to add a new product from the admin panel or use the database in &lt;a href="https://github.com/shahednasser/medusa-store-tutorial"&gt;the GitHub repository&lt;/a&gt; of this tutorial, which has an additional product. Then, try to make more orders with that product. You will see that the sorting in the endpoint has changed based on the number of sales.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learned how to add custom API endpoint, service, and subscriber. You can use these 3 to implement any custom feature or integration into your store.&lt;/p&gt;

&lt;p&gt;In the next tutorial, you will use the API endpoint you created in this part to customize the frontend and add a product slider that showcases the top selling products on your store.&lt;/p&gt;

&lt;p&gt;In the meantime, should you have any issues or questions related to Medusa, then feel free to reach out to the Medusa team via &lt;a href="https://discord.gg/F87eGuwkTp"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Add a Default Value to an Existing Column in MySQL</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 08 Nov 2021 15:33:31 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-add-a-default-value-to-an-existing-column-in-mysql-28dk</link>
      <guid>https://dev.to/bobbyiliev/how-to-add-a-default-value-to-an-existing-column-in-mysql-28dk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this quick tutorial, you will learn how to add a default value to an existing column in MySQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You always need to be careful, when changing the structure of an existing column in your database. Make sure to always have backups of your database before making such changes. &lt;/p&gt;

&lt;p&gt;For MySQL, you could use the following script to generate a backup of your database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/how-to-exportbackup-a-mysqlmariadb-database-with-mysqldump"&gt;Script to backup a MySQL/MariaDB database&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#add-a-default-value-to-an-existing"&gt;
  &lt;/a&gt;
  Add a default value to an existing
&lt;/h1&gt;

&lt;p&gt;When making changes to a column in your database, you can use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement followed by the &lt;code&gt;ALTER COLUMN&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The syntax is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE name_of_the_table ALTER name_of_the_column SET DEFAULT your_new_default_value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that we had a table called users and a column called &lt;code&gt;is_admin&lt;/code&gt;. We want all new users to have the &lt;code&gt;is_admin&lt;/code&gt; value set to &lt;code&gt;0&lt;/code&gt;. To do so we would use the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE users ALTER COLUMN is_admin SET DEFAULT 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you were to use the &lt;code&gt;DESCRIBE users;&lt;/code&gt; statement you will get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe users;
+----------+--------------+------+-----+---------+----------------+
| Field    | Type         | Null | Key | Default | Extra          |
+----------+--------------+------+-----+---------+----------------+
...
| is_admin | int          | NO   |     | 0       |                |
...
+----------+--------------+------+-----+---------+----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add-a-default-value-to-a-new-column"&gt;
  &lt;/a&gt;
  Add a default value to a new column
&lt;/h1&gt;

&lt;p&gt;In case that you wanted to actually create a new table with a default value, you would again use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement followed by the &lt;code&gt;ADD&lt;/code&gt; keyword and the name of the column that you wanted to create.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE `name_of_the_table` ADD `name_of_the_column` INT NOT NULL DEFAULT your_new_default_value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that you did not yet have the &lt;code&gt;is_admin&lt;/code&gt; column form the example above and wanted to create it with a default value of &lt;code&gt;0&lt;/code&gt;, the query would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE `users` ADD `is_admin` INT NOT NULL DEFAULT 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you were to create a new record in the &lt;code&gt;users&lt;/code&gt; table, it would have a default value without you having to specify it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much it! Now you know how to add a default value to both an existing column and to a new column in MySQL.&lt;/p&gt;

&lt;p&gt;To learn more about SQL, make sure to check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;üí° Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you already know the basics and wanted to take your data infrastructure to the next level, I would recommend checking out &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMy5AXa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/52d9a6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMy5AXa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/52d9a6h.png" alt="Materialize - a streaming database" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Materialize is a Streaming Database for Real-time Analytics. Materialize is a reactive database that delivers incremental view updates and it helps developers easily build with streaming data using standard SQL.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>mysql</category>
      <category>devops</category>
    </item>
    <item>
      <title>30 Projects Ideas!</title>
      <author>Danish Saleem</author>
      <pubDate>Mon, 08 Nov 2021 15:15:06 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/30-projects-ideas-3e0g</link>
      <guid>https://dev.to/mrdanishsaleem/30-projects-ideas-3e0g</guid>
      <description>&lt;ol&gt;
&lt;li&gt;To-do list app&lt;/li&gt;
&lt;li&gt;Note-taking app&lt;/li&gt;
&lt;li&gt;Calendar Application&lt;/li&gt;
&lt;li&gt;Chat System&lt;/li&gt;
&lt;li&gt;Weather application&lt;/li&gt;
&lt;li&gt;Portfolio website&lt;/li&gt;
&lt;li&gt;Image search&lt;/li&gt;
&lt;li&gt;Chess game&lt;/li&gt;
&lt;li&gt;Donation website&lt;/li&gt;
&lt;li&gt;Budget tracker&lt;/li&gt;
&lt;li&gt;Tic Tac Toe game&lt;/li&gt;
&lt;li&gt;Form validator&lt;/li&gt;
&lt;li&gt;Web Scraper&lt;/li&gt;
&lt;li&gt;Simple FTP client&lt;/li&gt;
&lt;li&gt;Port Scanner&lt;/li&gt;
&lt;li&gt;MP3 Player&lt;/li&gt;
&lt;li&gt;Tetris game&lt;/li&gt;
&lt;li&gt;Netflix clone&lt;/li&gt;
&lt;li&gt;Discord bot&lt;/li&gt;
&lt;li&gt;Video chat system&lt;/li&gt;
&lt;li&gt;Pacman game&lt;/li&gt;
&lt;li&gt;Alarm clock&lt;/li&gt;
&lt;li&gt;Stock trading app&lt;/li&gt;
&lt;li&gt;Issue tracker&lt;/li&gt;
&lt;li&gt;Music Store App&lt;/li&gt;
&lt;li&gt;Twitter Bot&lt;/li&gt;
&lt;li&gt;Spam Classifier&lt;/li&gt;
&lt;li&gt;Content Aggregator&lt;/li&gt;
&lt;li&gt;Snake game&lt;/li&gt;
&lt;li&gt;File manager&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect!
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/MrDanishSaleem"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mrdanishsaleem/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mrdanishsaleem/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like this post. Kindly support me by &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem"&gt;Buying Me a Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" alt="Buy Me a Coffee" width="880" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>SIM Card Based Mobile Authentication with iOS</title>
      <author>Greg Holmes</author>
      <pubDate>Mon, 08 Nov 2021 15:11:00 +0000</pubDate>
      <link>https://dev.to/tru-id/sim-card-based-mobile-authentication-with-ios-11n6</link>
      <guid>https://dev.to/tru-id/sim-card-based-mobile-authentication-with-ios-11n6</guid>
      <description>&lt;p&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; &lt;a href="https://developer.tru.id/docs/subscriber-check"&gt;SubscriberCheck&lt;/a&gt; offers both mobile phone number verification and SIM swap detection. SubscriberCheck achieves this by combining the workflows of &lt;a href="https://developer.tru.id/docs/phone-check"&gt;PhoneCheck&lt;/a&gt;, which confirms the ownership of a mobile phone number by verifying the possession of an active SIM card with the same number, with &lt;a href="https://developer.tru.id/docs/sim-check"&gt;SIMCheck&lt;/a&gt;, which provides information on when a SIM card associated with a mobile phone number was last changed. SubscriberCheck can be used when augmenting existing 2FA or anti-fraud workflows.&lt;/p&gt;

&lt;p&gt;If you'd prefer to go directly to the completed code, it's in the &lt;a href="https://github.com/tru-ID/sim-card-auth-ios/"&gt;sim-card-auth-ios&lt;/a&gt; Github repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-begin"&gt;
  &lt;/a&gt;
  Before you begin
&lt;/h2&gt;

&lt;p&gt;For development you'll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/xcode/"&gt;Xcode 12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An Apple developer account via the &lt;a href="https://developer.apple.com/account/"&gt;Apple Developer Portal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An iPhone or an iPad with a SIM card with an active data connection&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; installed for the &lt;strong&gt;tru.ID&lt;/strong&gt; CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the above in place, let's dive straight into adding SubscriberCheck functionality to your iOS applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-truid-cli-and-run-a-development-server"&gt;
  &lt;/a&gt;
  Set-up the &lt;strong&gt;tru.ID&lt;/strong&gt; CLI and Run a Development Server
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; provides a &lt;a href="https://github.com/tru-ID/cli"&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; CLI&lt;/a&gt; to quickly set up a development environment and provide a development server on your machine.&lt;/p&gt;

&lt;p&gt;The development server acts as a proxy in between your mobile app and the &lt;strong&gt;tru.ID&lt;/strong&gt; servers. It also opens up a local tunnel that makes the server publicly accessible over the Internet, so your mobile device can still connect to it when on cellular data. This architecture means you can focus on the mobile application development during this tutorial.&lt;/p&gt;

&lt;p&gt;Your production architecture should mirror this client/server architecture (but may not be the same API), with your servers acting as a secure proxy to the &lt;strong&gt;tru.ID&lt;/strong&gt; APIs. See the &lt;a href="https://developer.tru.id/docs/subscriber-check/integration"&gt;SubscriberCheck Workflow Integration guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;With the background information out of the way, sign up for a &lt;a href="https://developer.tru.id/signup"&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; account&lt;/a&gt; account. The account comes with some free credits, which you can use during the development and to test your app against the production environment when it is ready.&lt;/p&gt;

&lt;p&gt;Next, install the &lt;a href="https://github.com/tru-ID/cli"&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; CLI&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @tru_id/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the &lt;code&gt;tru setup:credentials&lt;/code&gt; command with the credentials you can copy from the &lt;a href="https://developer.tru.id/console"&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; console&lt;/a&gt;:&lt;/p&gt;



&lt;p&gt;Install the CLI &lt;a href="https://github.com/tru-ID/cli-plugin-dev-server"&gt;development server plugin&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tru plugins:install @tru_id/cli-plugin-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new &lt;strong&gt;tru.ID&lt;/strong&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tru projects:create iOSAuthDemoServer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This saves a &lt;code&gt;tru.json&lt;/code&gt; &lt;strong&gt;tru.ID&lt;/strong&gt; project configuration to &lt;code&gt;./iosauthdemoserver/tru.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the development server by pointing it to the newly created project directory and configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tru server &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;--project-dir&lt;/span&gt; ./iosauthdemoserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check that the URL that is shown in the terminal is accessible in your web browser. The URL is in the format &lt;code&gt;https://{subdomain}.loca.lt&lt;/code&gt;. This is the public accessible URL to your local development server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-ios-project"&gt;
  &lt;/a&gt;
  Create a New iOS Project
&lt;/h2&gt;

&lt;p&gt;With the &lt;strong&gt;tru.ID&lt;/strong&gt; account created and the development server up and running, we can make a start with the application. You can skip this step if you already have an iOS project. Otherwise;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Launch your Xcode&lt;/li&gt;
&lt;li&gt;File -&amp;gt; New -&amp;gt; Project&lt;/li&gt;
&lt;li&gt;In the "Choose a template for your new project" modal, select &lt;strong&gt;App&lt;/strong&gt; and click Next&lt;/li&gt;
&lt;li&gt;Set "sim-card-auth-ios" as the Product Name, however, you can use whatever the name of your project is&lt;/li&gt;
&lt;li&gt;Select your Team, and make sure to assign an organization identifier using a reverse domain notation&lt;/li&gt;
&lt;li&gt;Keep it simple, and use a &lt;strong&gt;Storyboard&lt;/strong&gt;, &lt;strong&gt;UIKit App Delegate&lt;/strong&gt; and &lt;strong&gt;Swift&lt;/strong&gt; as the development language&lt;/li&gt;
&lt;li&gt;Uncheck &lt;strong&gt;Use Code Data&lt;/strong&gt; if it is checked, and click Next&lt;/li&gt;
&lt;li&gt;Select the folder you want to store your project in and click Next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see, it is a pretty simple project with a single ViewControlller. At this point, you do not need to worry about the &lt;code&gt;AppDelegate&lt;/code&gt; or &lt;code&gt;SceneDelegate&lt;/code&gt;. This is enough to demonstrate SubscriberCheck.&lt;/p&gt;

&lt;p&gt;If you already have Xcode and have added your developer account (Xcode-&amp;gt;Preferences-&amp;gt;Accounts), Xcode takes care of generating necessary certificates and provisioning profiles in order to install the app on the device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-the-user-interface"&gt;
  &lt;/a&gt;
  Build the User Interface
&lt;/h2&gt;

&lt;p&gt;Navigate to the &lt;code&gt;Main.storyboard&lt;/code&gt;. You need to add a few UI components to receive input from the user, and provide feedback:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;UILabel&lt;/code&gt; to the View Controller's view as a title with a text "Verification"&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;UIActivityIndicator&lt;/code&gt; (Large) to show/hide progress when you perform a SubscriberCheck&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;UILabel&lt;/code&gt; with a text "Phone number" to indicate what the next text field is for&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;UITextField&lt;/code&gt; so that the user can enter their phone number&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;UIButton&lt;/code&gt; to trigger the SubscriberCheck request&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;UImageView&lt;/code&gt; to show whether SubscriberCheck is successful or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All UI components are "Horizontally" aligned in the container using constraints. You should also need to define constraints to anchor the components as well.&lt;/p&gt;

&lt;p&gt;Start with the top "Verification" &lt;code&gt;UILabel&lt;/code&gt; and specify the alignment between the Safe Area and the label. Do the same for all other components, define a constraint for the Top space, and where necessary, add additional constraints for width and height.&lt;/p&gt;

&lt;p&gt;The view layout should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsF1H97H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y98uqal4al1c3h2iw3mu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsF1H97H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y98uqal4al1c3h2iw3mu.png" alt='A screenshot showing the iPhone screen part of XCode. This is showing the UI part of the app, with the label "Verification", below this is the label "Phone number", with an empty input box below.' width="880" height="951"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a few configuration options you should add for these UI components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Phone number &lt;code&gt;UITextField&lt;/code&gt;: Select the text field, and on the &lt;strong&gt;Attributes Inspector&lt;/strong&gt;, scroll to &lt;code&gt;Text Input Traits&lt;/code&gt; and change the &lt;code&gt;Content Type&lt;/code&gt; to &lt;code&gt;Telephone Number&lt;/code&gt;. Also, change the &lt;code&gt;Keyboard Type&lt;/code&gt; to &lt;code&gt;Phone Pad&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIActivityIndicator&lt;/code&gt;: Select the activity indicator, and on the &lt;strong&gt;Attributes Inspector&lt;/strong&gt; check &lt;code&gt;Hides When Stopped&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIImageView&lt;/code&gt;: Select the &lt;code&gt;UIImageView&lt;/code&gt;, and on the &lt;strong&gt;Attributes Inspector&lt;/strong&gt;, scroll to Drawing, and check &lt;code&gt;Hidden&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, you need to define Outlets in the ViewController so that you can control the UI state. Let's select &lt;code&gt;ViewController&lt;/code&gt; in Xcode, and then by using the &lt;code&gt;‚å•&lt;/code&gt; select &lt;code&gt;Main.storyboard&lt;/code&gt; file. Both &lt;code&gt;ViewController.swift&lt;/code&gt; and &lt;code&gt;Main.storyboard&lt;/code&gt; should be opened side by side.&lt;/p&gt;

&lt;p&gt;Select the &lt;code&gt;UIActivityIndicator&lt;/code&gt; you inserted to the storyboard, and with &lt;code&gt;‚åÉ&lt;/code&gt; key pressed, drag a connection from the storyboard to the &lt;code&gt;ViewController.swift&lt;/code&gt;. Xcode indicates possible places in the Editor where you can create an Outlet.&lt;/p&gt;

&lt;p&gt;When you are happy, release the keys and mouse/trackpad. You will be prompted to enter a name for the variable; type &lt;code&gt;busyActivityIndicator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You need to connect the &lt;code&gt;UITextField&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt; and the &lt;code&gt;UIImageView&lt;/code&gt; as well. Let's perform the above steps for these as well respectively, and name them as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;phoneNumberTextField&lt;/li&gt;
&lt;li&gt;nextButton&lt;/li&gt;
&lt;li&gt;checkResults&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LsCmW-kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp3l52v2gwjbe0lbf519.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LsCmW-kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp3l52v2gwjbe0lbf519.png" alt="A screenshot of a code for the ViewController class, with Outlets defined at the top of this. The busyActivityIndicator, phoneNumberTextField, nextButton, and checkResults" width="850" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to retrieve the phone number entered by the user, and control the state to provide feedback. You now have one last task to do related to the storyboard.&lt;/p&gt;

&lt;p&gt;Let's insert an action. When a user taps on the &lt;strong&gt;Next&lt;/strong&gt; button, you want the &lt;code&gt;ViewController&lt;/code&gt; to know that the user wants to initiate the SubscriberCheck. So select the &lt;code&gt;Next&lt;/code&gt; button, and with your &lt;code&gt;‚åÉ&lt;/code&gt; key pressed drag a connection from the storyboard to the &lt;code&gt;ViewController.swift&lt;/code&gt;. Xcode indicates possible places where you can create an &lt;code&gt;IBAction&lt;/code&gt;. When you are happy, release the keys and mouse/trackpad. You will be prompted to enter a name for the method: type &lt;code&gt;next&lt;/code&gt; and Xcode will insert the method with a &lt;code&gt;IBAction&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;It is time to write some code to manage the UI state. The first method you are going to add is &lt;code&gt;controls(enabled: Bool)&lt;/code&gt;. This method helps us show or hide the &lt;code&gt;checkResults&lt;/code&gt;, and &lt;code&gt;busyActivityIndicator&lt;/code&gt;. You should also disable the &lt;code&gt;phoneNumberTextField&lt;/code&gt; when the SubscriberCheck flow is in progress.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MARK: UI Controls Configure || Enable/Disable&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;busyActivityIndicator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stopAnimating&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;busyActivityIndicator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startAnimating&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;phoneNumberTextField&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;
    &lt;span class="n"&gt;nextButton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;
    &lt;span class="n"&gt;checkResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isHidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;configureCheckResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;noSimChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;systemName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"person.fill.checkmark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withRenderingMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alwaysTemplate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tintColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;systemName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"person.fill.xmark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withRenderingMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alwaysTemplate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tintColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will use these methods later in the &lt;code&gt;next(_ sender: Any)&lt;/code&gt; that is triggered by the user tapping the &lt;code&gt;Next&lt;/code&gt; button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#models-structs-amp-protocols"&gt;
  &lt;/a&gt;
  Models, Structs &amp;amp; Protocols
&lt;/h2&gt;

&lt;p&gt;Now is the time to create a new group called &lt;code&gt;service&lt;/code&gt; in the Project Navigator. In here you'll implement Model layer classes, structs, protocols and enums. Note that none of the files in this group should be importing &lt;code&gt;UIKit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a Swift file in the &lt;code&gt;service&lt;/code&gt; group called &lt;code&gt;SessionEndpoint.swift&lt;/code&gt;. In this file, we define a protocol called &lt;code&gt;Endpoint&lt;/code&gt; and &lt;code&gt;NetworkError&lt;/code&gt; of type Enum and a class which implements the protocol. Let's define the protocol &lt;code&gt;Endpoint&lt;/code&gt; and &lt;code&gt;NetworkError&lt;/code&gt; enum as in the following in this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Endpoint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeRequest&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decodable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;URLRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;createURLRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URLRequest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;invalidURL&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nf"&gt;connectionFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;httpNotOK&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;noData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The purpose of the &lt;code&gt;Endpoint&lt;/code&gt; protocol is to hide implementation details from the client of this protocol. It has two methods and a variable &lt;code&gt;baseURL&lt;/code&gt;. It represents one REST API endpoint. We'll come back to this in more detail later.&lt;/p&gt;

&lt;p&gt;Next, define our model object which holds SubscriberCheck results.&lt;/p&gt;

&lt;p&gt;Create a Swift file called &lt;code&gt;SubscriberCheck.swift&lt;/code&gt; in the &lt;code&gt;service&lt;/code&gt;, and implement a struct with the same name as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="c1"&gt;// Response model based on https://developer.tru.id/docs/reference/api#operation/create-subscriber-check&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;SubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Codable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;check_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;check_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;SubscriberCheckStatus&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;no_sim_change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;SubscriberCheckStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Codable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;ACCEPTED&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;PENDING&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;COMPLETED&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;EXPIRED&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;ERROR&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;tru-ID&lt;/strong&gt; &lt;a href="https://developer.tru.id/docs/reference/api#operation/create-subscriber-check"&gt;REST API&lt;/a&gt; documentation provides us the basis for this struct. In production, your architecture and servers may expose a different REST response model. Also important to note that &lt;code&gt;SubscriberCheck&lt;/code&gt; implements the &lt;code&gt;Codable&lt;/code&gt; protocol as this will help &lt;code&gt;JSONSerialization.data(..)&lt;/code&gt; to decode the json response to the &lt;code&gt;SubscriberCheck&lt;/code&gt; easily.&lt;/p&gt;

&lt;p&gt;Next, define a protocol which will help the View layer to talk to the Model layer implementation.&lt;/p&gt;

&lt;p&gt;The View layer of our application is concerned about what the user is going to request. At this layer, you shouldn't be concerned about "how" it is going to be done. Since it is all about SubscriberCheck, simple &lt;code&gt;Subscriber&lt;/code&gt; protocol which defines a function to receive a phone number and provides a closure for the SubscriberCheck results should be sufficient.&lt;/p&gt;

&lt;p&gt;Create a Swift file in the &lt;code&gt;service&lt;/code&gt; group called &lt;code&gt;SubscriberCheckService.swift&lt;/code&gt;. In this file, define the &lt;code&gt;Subscriber&lt;/code&gt; protocol as the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Subscriber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;SubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a class called &lt;code&gt;SubscriberCheckService&lt;/code&gt; in the existing &lt;code&gt;SubscriberCheckService.swift&lt;/code&gt; file which implements the &lt;code&gt;Subscriber&lt;/code&gt; protocol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;SubscriberCheckService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Subscriber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/subscriber-check"&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;SubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;//Implement the workflow&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A variable called &lt;code&gt;path&lt;/code&gt; is defined to hold the path for the development server endpoint to perform the necessary calls. The path is &lt;code&gt;/subscriber-check&lt;/code&gt; for the local development server. The &lt;code&gt;check(phoneNumber: ...)&lt;/code&gt; method will contain the logic for the workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-the-user-action"&gt;
  &lt;/a&gt;
  Implement the User Action
&lt;/h2&gt;

&lt;p&gt;At this point, the UI is almost ready to execute the SubscriberCheck workflow. Let's first define a variable of &lt;code&gt;Subscriber&lt;/code&gt; type in our &lt;code&gt;ViewController&lt;/code&gt; and then implement the &lt;code&gt;next(_ sender: Any)&lt;/code&gt; IBAction we previously created.&lt;/p&gt;

&lt;p&gt;Add the following code to the &lt;code&gt;ViewController&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;subscriberService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Subscriber&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;subscriberService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;SubscriberCheckService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This initialises &lt;code&gt;subscriberService&lt;/code&gt; with a concrete implementation &lt;code&gt;SubscriberCheckService&lt;/code&gt; which you defined in the previous section. &lt;code&gt;SubscriberCheckService&lt;/code&gt; knows how to execute the workflow and all &lt;code&gt;ViewController&lt;/code&gt; needs to do is to call &lt;code&gt;check(phoneNumber: String, ..)&lt;/code&gt; method and control the UI state. It is time to implement the &lt;code&gt;next(_ sender: Any)&lt;/code&gt;. It looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phoneNumberTextField&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Ideally you should validated phone number against e164 spec&lt;/span&gt;
        &lt;span class="c1"&gt;// Without leading + or 0's&lt;/span&gt;
        &lt;span class="c1"&gt;// For example: {country_code}{number}, 447940448591&lt;/span&gt;
        &lt;span class="c1"&gt;// Remove double 00's&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;strippedPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;trimmingCharacters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitespacesAndNewlines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strippedPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"00"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;strippedPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replaceSubrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;subscriberService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strippedPhoneNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;checkResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;subscriberCheck&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configureCheckResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;noSimChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_sim_change&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The implementation of the &lt;code&gt;next&lt;/code&gt; method first checks whether there is text in the &lt;code&gt;phoneNumberTextField&lt;/code&gt; and whether it is empty or not.&lt;/p&gt;

&lt;p&gt;Note that in a production code, you should validate the phone number against the &lt;a href="https://www.itu.int/rec/T-REC-E.164-201011-I/en"&gt;E.164 specification&lt;/a&gt;. We are keeping it simple for the purposes of this tutorial by only removing &lt;code&gt;00&lt;/code&gt; from the beginning of the phone number (if it exists) and trimming.&lt;/p&gt;

&lt;p&gt;The second step is to disable parts of the user interface, show the activity indicator and let it spin when the user taps the &lt;strong&gt;Next&lt;/strong&gt; button. The third step is to call the &lt;code&gt;check(phoneNumber:)&lt;/code&gt; method of the &lt;code&gt;subscriberService&lt;/code&gt;. The handler will provide a &lt;code&gt;checkResult&lt;/code&gt; which is of type &lt;code&gt;Result&amp;lt;SubscriberCheck,NetworkError&amp;gt;&lt;/code&gt;. Note that this closure will not be called in the main queue, therefore you need to wrap any code which accesses UIKit in a &lt;code&gt;DispatchQueue.main.async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the workflow executes successfully then you can access the model details and reconfigure the UI. Note that the &lt;code&gt;.success&lt;/code&gt; case doesn't necessarily mean that validation is successful, it is simply an indication that workflow executed without encountering any network errors.&lt;/p&gt;

&lt;p&gt;In order to understand if you validated the phone number you need to inspect the &lt;code&gt;.success&lt;/code&gt; payload which is of type &lt;code&gt;SubscriberCheck&lt;/code&gt;. The following line will ensure that validation results are reflected in the UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configureCheckResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;noSimChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_sim_change&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In any case, you restore the UI controls back to their original state with the following code so that the user can re-execute the workflow, if needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-the-network-and-define-endpoints"&gt;
  &lt;/a&gt;
  Setup the Network and Define Endpoints
&lt;/h2&gt;

&lt;p&gt;Your app may have its own ways for defining and access external service URLs, and these endpoints may be stored in configuration files such as a plist, or in your Swift code. In this tutorial, you store the development and production base URLs in a plist called &lt;code&gt;TruIdService-Info.plist&lt;/code&gt;. These server endpoints proxy some of the requests through to the &lt;strong&gt;tru.ID&lt;/strong&gt; API.&lt;/p&gt;

&lt;p&gt;Create a group called &lt;code&gt;util&lt;/code&gt; in the Project Navigator. Next, create the Property List:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File -&amp;gt; New -&amp;gt; File&lt;/li&gt;
&lt;li&gt;Select Property List in the dialog&lt;/li&gt;
&lt;li&gt;Click Next&lt;/li&gt;
&lt;li&gt;Select where you want to store the file (default selected folder should be fine)&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;TruIdService-Info&lt;/code&gt; as the file name&lt;/li&gt;
&lt;li&gt;Click Create&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see this file created in the &lt;code&gt;util&lt;/code&gt; group. Now, let's add two keys to this &lt;code&gt;plist&lt;/code&gt; file; one for the development endpoints and one for the production endpoints. The values should be String type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;development_server_base_url
production_server_base_url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUdBvi3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ob5hw3kecx90f0mbd86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUdBvi3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ob5hw3kecx90f0mbd86.png" alt="Screenshot of part of XCode with the TruIdService-Info.plist config" width="880" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You must ensure to assign the correct value to the &lt;code&gt;development_server_base_url&lt;/code&gt; in order to complete this tutorial and successfully run the app on your device. This value is the one you are provided from the Terminal when you set up and ran your development server at the beginning of this tutorial (e.g. &lt;code&gt;https://{subdomain}.loca.lt&lt;/code&gt;). For production setup, you should implement your own backend and add this URL here in the &lt;code&gt;production_server_base_url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to read the plist, create a &lt;code&gt;struct&lt;/code&gt; called &lt;code&gt;AppConfiguration&lt;/code&gt;, which deals with loading the correct endpoint so you do not have to worry when you are implementing the use cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4DqsIzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40urx6053rahv87afzde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4DqsIzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40urx6053rahv87afzde.png" alt="Screenshot of file structure of classes for utilities in project" width="300" height="100"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;AppConfiguration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;defaultConfigurationName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"TruIdService-Info"&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt;

    &lt;span class="k"&gt;mutating&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loadServerConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Bundle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;forResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;defaultConfigurationName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"plist"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FileManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;atPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;PropertyListSerialization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;propertyList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                                              &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutableContainersAndLeaves&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                                              &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"production_server_base_url"&lt;/span&gt;
        &lt;span class="cp"&gt;#if DEBUG&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"development_server_base_url"&lt;/span&gt;
        &lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;?[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;AppConfiguration&lt;/code&gt; struct simply reaches into the main bundle and searches for a &lt;code&gt;plist&lt;/code&gt; called &lt;code&gt;TruIdService-Info&lt;/code&gt;. If found, it reads the plist as a dictionary and binds that to the &lt;code&gt;configuration&lt;/code&gt; variable. This URL is provided to the clients of the struct via the &lt;code&gt;baseURL() -&amp;gt; String?&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, implement a class called &lt;code&gt;SessionEndpoint&lt;/code&gt; within the existing &lt;code&gt;service/SessionEndpoint.swift&lt;/code&gt; file. This is our implementation of simple network requests using &lt;code&gt;URLSession&lt;/code&gt;. You can implement this protocol using URLSession, or with Alamofire. For the purposes of this tutorial, let's keep it simple and implement the protocol using URLSession.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;SessionEndpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Endpoint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;URLSession&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;AppConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loadServerConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;!//&lt;/span&gt;&lt;span class="kt"&gt;Fail&lt;/span&gt; &lt;span class="n"&gt;early&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;know&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;SessionEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URLSession&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URLSessionConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ephemeral&lt;/span&gt; &lt;span class="c1"&gt;//you do not want OS to cache or persist&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowsCellularAccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitsForConnectivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;networkServiceType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;responsiveData&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;URLSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// MARK: Protocol Implementation&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeRequest&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decodable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;URLRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connectionFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localizedDescription&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;httpResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;HTTPURLResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connectionFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HTTP not OK"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;noData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Response: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dataModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;JSONDecoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataModel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;createURLRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URLRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;urlRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URLRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"application/json; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;forHTTPHeaderField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try!&lt;/span&gt; &lt;span class="kt"&gt;JSONSerialization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withJSONObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettyPrinted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonData&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;urlRequest&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;init()&lt;/code&gt; method of the class loads a base URL from the &lt;code&gt;AppConfiguration&lt;/code&gt; which you defined earlier. It returns a URL for either a development server or a production server, depending on the build scheme. The final line of the &lt;code&gt;init()&lt;/code&gt; creates a URLSession using a private static method. Note that the &lt;code&gt;createSession()&lt;/code&gt; method creates a session configuration which doesn't cache or persist network related information; it is &lt;code&gt;ephemeral&lt;/code&gt; for additional security.&lt;/p&gt;

&lt;p&gt;The rest of the file contains the &lt;code&gt;Endpoint&lt;/code&gt; protocol implementation. The first method, &lt;code&gt;makeRequest&amp;lt;&amp;gt;..&lt;/code&gt;, creates a data task using the &lt;code&gt;URLRequest&lt;/code&gt; provided and initiates the call. When the response is received, the method calls the &lt;code&gt;handler&lt;/code&gt; closure for success or failure cases. If data exists and there are no error scenarios, it attempts to decode the data to the model type provided.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Result&amp;lt;&amp;gt;&lt;/code&gt; generic type refers to a model object and an &lt;code&gt;Enum&lt;/code&gt; which provides error cases.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;createURLRequest(..)&lt;/code&gt; method receives three parameters; HTTP method name, the URL and an optional payload if the request is a POST request, for instance. The method returns a &lt;code&gt;URLRequest&lt;/code&gt; object, which is then used by the &lt;code&gt;makeRequest&amp;lt;&amp;gt;..&lt;/code&gt; method during the execution of the workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-the-workflow"&gt;
  &lt;/a&gt;
  Implement the Workflow
&lt;/h2&gt;

&lt;p&gt;Now that you have defined the user interface and network request/response mechanics, let's bridge the two and implement the business logic. It is time to talk about the SubscriberCheck workflow before you dive more into the coding.&lt;/p&gt;

&lt;p&gt;The SubscriberCheck workflow has 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a SubscriberCheck via the server. This will return a &lt;code&gt;check_id&lt;/code&gt; and &lt;code&gt;check_url&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then request the &lt;code&gt;check_url&lt;/code&gt; retrieved in step 1 using the &lt;strong&gt;tru.ID&lt;/strong&gt; iOS SDK&lt;/li&gt;
&lt;li&gt;As soon as &lt;code&gt;check_url&lt;/code&gt; request returns, retrieve the SubscriberCheck results using the &lt;code&gt;check_id&lt;/code&gt; retrieved in step 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following sequence diagram shows each step, including the server to &lt;strong&gt;tru.ID&lt;/strong&gt; API interactions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rL8a4-oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dha6txzcxhh1ddr9vfx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rL8a4-oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dha6txzcxhh1ddr9vfx2.png" alt="A partial screenshot of the workflow of the SubscriberCheck" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's implement the workflow in &lt;code&gt;SubscriberCheckService&lt;/code&gt; using some helper methods and the classes you created in the previous sections.&lt;/p&gt;

&lt;p&gt;First, let's add a variable called &lt;code&gt;endpoint&lt;/code&gt; to the &lt;code&gt;SubscriberCheckService&lt;/code&gt; and initiate it in the &lt;code&gt;init()&lt;/code&gt; method. The &lt;code&gt;SubscriberCheckService&lt;/code&gt; class uses a concrete implementation of &lt;code&gt;Endpoint&lt;/code&gt; protocol called &lt;code&gt;SessionEndpoint&lt;/code&gt; which you defined in the previous sections. This class makes it easier to execute network calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;SubscriberCheckService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Subscriber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/subscriber-check"&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Endpoint&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;SessionEndpoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also define three methods, each corresponding to the steps mentioned above. Later, we will stitch the steps of the workflow in &lt;code&gt;check(phoneNumber: ...)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first method is &lt;code&gt;createSubscriberCheck(phoneNumber:...)&lt;/code&gt;. It makes a &lt;code&gt;POST&lt;/code&gt; request to the server to create a SubscriberCheck. This call can be made over any type of network (cellular/wifi). The server should return a SubscriberCheck &lt;code&gt;check_url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following method to the &lt;code&gt;SubscriberCheckService&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;createSubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;SubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;urlString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invalidURL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;phoneNumberDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"phone_number"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;urlRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createURLRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phoneNumberDict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method receives a phone number, constructs the full URL using the &lt;code&gt;endpoint.baseURL&lt;/code&gt; and the SubscriberCheck &lt;code&gt;path&lt;/code&gt; which is defined by the server. It creates a payload (just the phone number), and a &lt;code&gt;URLRequest&lt;/code&gt; using the &lt;code&gt;endpoint.createURLRequest(..)&lt;/code&gt; method. Then the method uses the &lt;code&gt;makeRequest(..)&lt;/code&gt; method of the endpoint and passes the &lt;code&gt;urlRequest&lt;/code&gt; and the handler.&lt;/p&gt;

&lt;p&gt;Our next method is called &lt;code&gt;retrieveSubscriberCheck(..)&lt;/code&gt;. Add it to the &lt;code&gt;SubscriberCheckService&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;retrieveSubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;checkId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;SubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;urlString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;checkId&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invalidURL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;urlRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createURLRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very similar to the first method you defined, with a few differences. You are now calling the endpoint with an extra &lt;code&gt;checkId&lt;/code&gt; parameter, and this time it is a &lt;code&gt;GET&lt;/code&gt; call. This method will get the results of the check performed.&lt;/p&gt;

&lt;p&gt;The third method we need to create is doing the heavy lifting using the &lt;strong&gt;tru.ID&lt;/strong&gt; SDK. Let's create a method called &lt;code&gt;requestSubscriberCheckURL(..)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;requestSubscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;subscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method requests the &lt;code&gt;check_url&lt;/code&gt; which will be returned by the &lt;code&gt;createSubscriberCheck(..)&lt;/code&gt;. In order to do that you need the &lt;strong&gt;tru.Id&lt;/strong&gt; &lt;a href="https://github.com/tru-ID/tru-sdk-ios"&gt;iOS SDK&lt;/a&gt;. Let's add it to our project.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;tru.ID&lt;/strong&gt; iOS SDK ensures that certain network calls are done on a Cellular network type, which is needed to run SubscriberCheck workflow. You have two options to add the SDK to your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-swift-package-manager"&gt;
  &lt;/a&gt;
  Using Swift Package Manager
&lt;/h3&gt;

&lt;p&gt;Xcode integrates well with Github, and you can add Swift Packages very easily. In your Xcode, go to File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;https://github.com/tru-ID/tru-sdk-ios.git&lt;/code&gt;, and tap &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Xcode will find the package, select the latest version and then tap &lt;strong&gt;Finish&lt;/strong&gt; to add it. Now that the SDK is added, you can import it when you are implementing the workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-cocoapods"&gt;
  &lt;/a&gt;
  Using CocoaPods
&lt;/h3&gt;

&lt;p&gt;While we recommend using Swift Package Manager, &lt;strong&gt;tru.ID&lt;/strong&gt; iOS SDK also supports adding your dependencies via CocoaPods. If you are familiar with CocoaPods and prefer using it, all you need to do is to create a Podfile and add the &lt;strong&gt;tru.ID&lt;/strong&gt; pod the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;target 'MyApp' do
  pod 'tru-sdk-ios'
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to run &lt;code&gt;pod install&lt;/code&gt; in your project directory. After the CocoaPods install all necessary pods, and configure your project, don't forget to open the workspace rather than the project file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#request-the-checkurl"&gt;
  &lt;/a&gt;
  Request the check_url
&lt;/h3&gt;

&lt;p&gt;Let's go back to the &lt;code&gt;SubscriberCheckService&lt;/code&gt; and import the &lt;code&gt;TruSDK&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;TruSDK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use the SDK within &lt;code&gt;requestSubscriberCheckURL(..)&lt;/code&gt; to request the &lt;code&gt;check_url&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;requestSubscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;subscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;tru&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruSDK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tru&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;openCheckUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's that simple.&lt;/p&gt;

&lt;p&gt;As discussed, the SDK will ensure that this call will be made over the cellular network. When the &lt;code&gt;openCheckUrl(..)&lt;/code&gt; calls the closure, you call the &lt;code&gt;handler&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;You are yet to implement the &lt;code&gt;SubscriberCheckService&lt;/code&gt; &lt;code&gt;check(phoneNumber:...)&lt;/code&gt; method, and chain the methods in our &lt;code&gt;check(phoneNumber: String..&lt;/code&gt; method. So, let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;SubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NetworkError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nf"&gt;createSubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;checkURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;checkID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;createResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;subscriberCheck&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;// The server returns the SubscriberCheck results to the device.&lt;/span&gt;
            &lt;span class="n"&gt;checkURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
            &lt;span class="n"&gt;checkID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_id&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got the subscriber check URL: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subscriberCheck&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Using the SDK to request check URL over mobile network"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;requestSubscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;subscriberCheckURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;checkURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;

            &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SDK successfully returned, let's call our server to retrieve check results."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieveSubscriberCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;checkId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;checkResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;checkResultModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkResultModel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, you make a call using the &lt;code&gt;createSubscriberCheck(phoneNumber: phoneNumber) ...&lt;/code&gt; method. The callback to this method inspects the &lt;code&gt;Result&amp;lt;&amp;gt;&lt;/code&gt;. If it is a success, it fetches the &lt;code&gt;checkURL&lt;/code&gt; and &lt;code&gt;checkID&lt;/code&gt; and stores them in local variables which will be used later.&lt;/p&gt;

&lt;p&gt;Within the callback you execute the second step using &lt;code&gt;requestSubscriberCheckURL(...)&lt;/code&gt;. This method uses the &lt;strong&gt;tru.ID&lt;/strong&gt; iOS SDK and makes a call to &lt;code&gt;check_url&lt;/code&gt;. The SDK makes this call over the cellular network, so the user must have a data plan. Behind the scenes, this call will redirect and eventually return OK. All this will be handled by the SDK.&lt;/p&gt;

&lt;p&gt;The third step is to make a final request to the server using the &lt;code&gt;checkID&lt;/code&gt; that you've got as a result of making the first call. This call will return the SubscriberCheck result; whether the check is successful or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perform-your-first-subscribercheck"&gt;
  &lt;/a&gt;
  Perform your first SubscriberCheck
&lt;/h2&gt;

&lt;p&gt;Now that our code is complete, you can run the application on a real device. Bear in mind that SIM card based authentication is not possible on a Simulator, as you require a SIM Card with an active data connection.&lt;/p&gt;

&lt;p&gt;You've now integrated SubscriberCheck into an iOS application, enabling you to both verify a phone number and check if the SIM card associated with the phone number has changed recently. All powered by SIM card based mobile authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-next"&gt;
  &lt;/a&gt;
  Where next?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The completed sample app can be found in the &lt;strong&gt;tru.ID&lt;/strong&gt; &lt;a href="https://github.com/tru-ID/sim-card-auth-ios/"&gt;sim-card-auth-ios&lt;/a&gt; Github repository.&lt;/li&gt;
&lt;li&gt;Take a look at the &lt;a href="https://github.com/tru-ID/tru-sdk-ios"&gt;&lt;strong&gt;tru.ID&lt;/strong&gt; iOS SDK on GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h2&gt;

&lt;p&gt;If you have any questions please &lt;a href="https://github.com/tru-ID/tru-sdk-ios/issues"&gt;raise an issue&lt;/a&gt; on the GitHub repo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobile-data-is-required"&gt;
  &lt;/a&gt;
  Mobile Data is Required
&lt;/h3&gt;

&lt;p&gt;Don't forget that the SubscriberCheck validation requires your mobile device to have a data plan from your network operator, and that you should enable mobile data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-in-touch"&gt;
  &lt;/a&gt;
  Get in touch
&lt;/h3&gt;

&lt;p&gt;If you have any questions, get in touch via &lt;a href="//mailto:help@tru.id"&gt;help@tru.id&lt;/a&gt;. Or throw me a message on &lt;a href="https://www.twitter.com/greg__holmes"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>tutorial</category>
      <category>ios</category>
      <category>security</category>
    </item>
    <item>
      <title>Is Crypto More than NFT Scams?</title>
      <author>K (he/him)</author>
      <pubDate>Mon, 08 Nov 2021 15:10:45 +0000</pubDate>
      <link>https://dev.to/fllstck/is-crypto-more-than-nft-scams-1o8p</link>
      <guid>https://dev.to/fllstck/is-crypto-more-than-nft-scams-1o8p</guid>
      <description>&lt;p&gt;Two months ago, I started looking into NFTs and crypto in general. The hype for NFTs was so high that a client of mine asked if I could write a piece for them to get more exposure in that space. I saw the hype too, and as with all tech a client asks me to write about, I did it. Getting paid to learn new tech is pretty awesome and the whole reason why I‚Äôm doing this writing business anyway.&lt;/p&gt;

&lt;p&gt;Right at the start, I saw the first problem with that topic. The internet is plastered with investment advice and scammers who wanna sell you their latest media NFT. I dug through the crap and decided to buy two books instead of just doing research online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/dp/3982103819?ref_=pe_3052080_397514860"&gt;Token Economy&lt;/a&gt; by &lt;a href="https://twitter.com/sherminvo"&gt;Shermin Voshmgir&lt;/a&gt; and &lt;a href="https://www.oreilly.com/library/view/hands-on-smart-contract/9781492045250/"&gt;Hands-On Smart Contract Development with Solidity &amp;amp; Ethereum&lt;/a&gt; by Kevin Solorio, &lt;a href="https://twitter.com/RandallKanna"&gt;Randall Kanna&lt;/a&gt;, and David H. Hoover. They both gave me some insights into the crypto space in general with its fungible and non-fungible tokens and how to implement systems in that space with Solidity. It helped that the authors weren‚Äôt your run-of-the-mill crypto dudes.&lt;/p&gt;

&lt;p&gt;Next, I started following some people on Twitter to be up-to-date on my research, and rather quickly, I got a taste of the fact that many people hate blockchains. I‚Äôve been in the IT industry for over a decade and as a JavaScript, React, and serverless developer, I experienced quite some resentment in my time. It‚Äôs nothing new for me to use a promising new technology and find out many people don‚Äôt like it. &lt;/p&gt;

&lt;p&gt;I wouldn‚Äôt consider these critics dumb just because they don‚Äôt understand that specific topic in all its depth. I don‚Äôt understand many things and still can help people with the knowledge I have. Also, I was in that place myself. I saw people I hold in high regard moving into the crypto, and I was sad that they would do such a dumb thing. How could they support all these scammers with their hideous jpegs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-smart-people-do-this"&gt;
  &lt;/a&gt;
  How Can Smart People Do This?
&lt;/h2&gt;

&lt;p&gt;What does ‚Äúsmart people‚Äù even mean in that context?&lt;/p&gt;

&lt;p&gt;I have the feeling; smart doesn‚Äôt mean smart in the classical sense here. The type of people we talk about here are influencers, somewhat prominent people in an industry that are either good at marketing or consistent enough to improve their luck with ‚Äúthe algorithm.‚Äù So, we‚Äôre not talking about ‚Äúpeople I consider smart‚Äù but ‚Äúpeople whose opinion I like.‚Äù They can be dumb as they come on both sides.&lt;/p&gt;

&lt;p&gt;On a side note: I see it as a good sign if I like one opinion of a person and disagree with their other views. That way, I‚Äôm sure I‚Äôm not just doing it because I like that person too much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-leave-for-crypto"&gt;
  &lt;/a&gt;
  Why did I Leave for Crypto?
&lt;/h2&gt;

&lt;p&gt;First of all, I didn‚Äôt leave. I only got one NFT-related article paid for by a client and still make almost all of my money with non-crypto-related writing. But I thought, I‚Äôm fresh in the space, and it would remove many assumptions if I just write about my personal experience.&lt;/p&gt;

&lt;p&gt;Next, I wouldn‚Äôt consider myself particularly smart. I had many experiences that showed me I‚Äôm a slow learner. Learned swimming with 9, biking with 13, took me years to grasp functions in programming. But I made things work with persistence, and after some time, I figured out what helped me learn better.&lt;/p&gt;

&lt;p&gt;I might not be one of these ‚Äúsmart people‚Äù who are leaving ‚Äúthe old world‚Äù for crypto, blockchain, or web3. But we also learned that we‚Äôre not talking about ‚Äúsmart people,‚Äù but just ‚Äúpeople whose opinions we value,‚Äù so I don‚Äôt think it‚Äôs too far-fetched to extrapolate my own experience on other people.&lt;/p&gt;

&lt;p&gt;Why do I spend so much time with crypto? Is it more than just a bunch of dudes shilling their JPEG NFTs? Is it destroying the environment, or could it help society? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-fun"&gt;
  &lt;/a&gt;
  It‚Äôs Fun
&lt;/h2&gt;

&lt;p&gt;It‚Äôs pretty fun. I joined &lt;a href="https://www.developerdao.com/"&gt;a community of developers&lt;/a&gt; that are interested in that space. Like many things in this young crypto world, the community is just forming, and it‚Äôs just lovely to be part of something that feels new and significant. I like to learn about new technology, and this is the newest of the new.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-inclusive"&gt;
  &lt;/a&gt;
  It‚Äôs Inclusive
&lt;/h2&gt;

&lt;p&gt;I also had the impression that the communities I interacted with were pretty inclusive. I‚Äôm a white dude, so I‚Äôm biased, but in the two months in that space, the books that gave me the most crucial insights were written by women. &lt;/p&gt;

&lt;p&gt;Also, I regularly talked with queer people, people of color, and women. I bought and read their books, got advice from them, and helped them out when they had problems themselves. This experience felt like crypto is open for everyone who wants to learn. &lt;/p&gt;

&lt;p&gt;I‚Äôve been in IT for over a decade, and I encountered that kind of inclusion only recently in communities like one of the Rust programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-has-a-low-entry-barrier"&gt;
  &lt;/a&gt;
  It has a Low Entry Barrier
&lt;/h2&gt;

&lt;p&gt;The entry barrier is low for a developer in that space. You don‚Äôt have to sign up for a cloud provider. To get started, you can just open your browser and use a blockchain. There are free blockchain-gateways that allow you to connect to a chain from a browser, and all the test networks are basically free, too, and they‚Äôre already up and running.&lt;/p&gt;

&lt;p&gt;In terms of backend development, I‚Äôm coming from the serverless side of things, where things are straightforward, but even that feels quite a bit complicated compared to blockchain development.&lt;/p&gt;

&lt;p&gt;Sure, signing up for a blockchain-gateway service is a good idea when you get into developing smart contracts, but it isn‚Äôt necessary to get started, and I‚Äôd say you can go by for the first one or two weeks without doing it.&lt;/p&gt;

&lt;p&gt;A counterargument here is that the learning resources are a bit cumbersome. As an educator, I think most people who create learning resources in that space could do a bit better. Also, the whole security aspect is something that throws people off at the beginning. Asymmetric cryptography usually isn‚Äôt something a developer learns on the side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-a-new-paradigm"&gt;
  &lt;/a&gt;
  It‚Äôs a New Paradigm
&lt;/h2&gt;

&lt;p&gt;The next point unique to the blockchain is that it‚Äôs a new paradigm of doing things. Decentralization and protocol-level payment integration might seem incredible but not that important. Critics say blockchain is like AWS but more expensive, slow, and bad for the environment.&lt;/p&gt;

&lt;p&gt;And it‚Äôs already alienating people who are curious about crypto. A private message I got on Twitter asked, &lt;em&gt;‚Äúis this something i should do or is this like a earth harming fracking thing? lol. i'm desperately looking for a developer tech job period.‚Äù&lt;/em&gt; Which I found sad.&lt;/p&gt;

&lt;p&gt;It feels a bit like the anti-serverless arguments to me. Sure, a Lambda function is more expensive per execution than a container or VM that‚Äôs always under full load. But that isn‚Äôt the point. Lambda removes much of the work running low-level infrastructure brings and, in turn, removes the costs of that work. You might pay more per execution, but you can also do with less personnel. &lt;/p&gt;

&lt;p&gt;The same goes for blockchain-based infrastructure. All the critics are correct, but it might be that the points they deem unimportant are so much more valuable in the long run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decentralization"&gt;
  &lt;/a&gt;
  Decentralization
&lt;/h3&gt;

&lt;p&gt;While not in full gear with younger blockchains, decentralization might be a killer feature alone. We‚Äôve all seen what happened with Tumblr or how OnlyFans wanted to rid themselves of sex workers. We‚Äôve all seen the power that payment providers have. Even everyday services like social networks are prone to censorship, so the whole ‚Äúis decentralization really needed‚Äù might not be answered with ‚Äúyes, but only in a very few special cases.‚Äù&lt;/p&gt;

&lt;p&gt;While decentralized technology is in its infancy and desperately needs improvements, especially in terms of energy consumption, I think it could be a step in the right direction. I don‚Äôt know how things will go, and it probably won‚Äôt be a utopia in 10 years from now. Still, decentralized systems could swing the pendulum more to the masses, not single entrepreneurs who blow it on space holidays.&lt;/p&gt;

&lt;p&gt;Now, you might ask, ‚ÄúWhy does it have to be blockchain? There are decentralized systems out there that are more efficient than blockchains; why shouldn‚Äôt we use those?‚Äù which is an excellent question that brings us to the next point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payment-at-protocol-level"&gt;
  &lt;/a&gt;
  Payment at Protocol Level
&lt;/h3&gt;

&lt;p&gt;While payment providers like Stripe made ‚Äúgetting paid for your service‚Äù simpler in recent years, it still feels like payment isn‚Äôt an integral part of software architectures.&lt;/p&gt;

&lt;p&gt;If it‚Äôs ad-financed, you integrate an ad-provider, it pays you for the ads your users viewed, and then you pay your employees, cloud provider, and hopefully yourself in the end.&lt;/p&gt;

&lt;p&gt;If it‚Äôs subscription-based, you integrate a payment provider, users pay them for a subscription, the provider pays you, and you pay what you have to pay, etc.&lt;/p&gt;

&lt;p&gt;There are many ways you could make money with your service, some more offline, some more online, but overall they all feel like grafted on a software that could work perfectly well without payment.&lt;/p&gt;

&lt;p&gt;It seems, at least to me, that blockchains are the first mainstream(-ish) technology that includes payment as an integral part of its design.&lt;/p&gt;

&lt;p&gt;You can‚Äôt write or execute things on-chain without paying for it. Heck, you can‚Äôt even deploy your programs on-chain without paying for it. This makes it obvious, right from the start, who will pay for all that decentralized infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  Smart Contracts
&lt;/h3&gt;

&lt;p&gt;Smart contracts are what make decentralization and protocol-level payment accessible for the everyday developer. While cryptography might not be the most accessible concept to grasp, Solidity isn‚Äôt much more complicated than, let‚Äôs say, Python or JavaScript.&lt;/p&gt;

&lt;p&gt;JavaScript gave us much good on the web, but it was also used for popups and user tracking. I realize that many people out there still think JavaScript is a stain on the internet. But I think it‚Äôs a net plus with all the rich applications I use daily, without a need to consider if I have the right operating system or have synchronized my data to all my machines.&lt;/p&gt;

&lt;p&gt;People use them to build cryptocurrencies and now to make NFTs, and both have good and bad applications. NFTs aren‚Äôt just about media ownership certificates stored on a blockchain. They can be much more, proof of access, knowledge, or membership, etc. &lt;/p&gt;

&lt;p&gt;I own two NFTs, one for a DAO membership and one for an ENS domain, and they have nothing to do with jpeg shilling. They can‚Äôt be ‚Äúright-clicked and saved because the ownership gives me more options than looking at them or listening to them.&lt;/p&gt;

&lt;p&gt;Smart contracts don‚Äôt solve scamming, and their ‚Äúcode is law‚Äù pledge doesn‚Äôt fix bad laws in any way. They make applying such rules more transparent and remove steps between creating such a law and enforcing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The points above work together and set the ‚Äúlike AWS but more expensive, slower, and worse for the environment‚Äù and ‚ÄúIs Crypto More than just JPEG NFTs?‚Äù in context.&lt;/p&gt;

&lt;p&gt;Are blockchains more expensive than AWS? Sure, but you‚Äôre buying something that is just similar to AWS infrastructure, but not the same. Depending on your circumstances, what you buy can have much more value than what AWS is selling.&lt;/p&gt;

&lt;p&gt;Are blockchains slower than AWS? Sure, they have limited application, and in many cases, you might not be able to wait for the execution of a transaction. If you need blockchain-specific features, waiting might not seem bad.&lt;/p&gt;

&lt;p&gt;Are blockchains bad for the environment? I don‚Äôt know! They might be, but this question isn‚Äôt trivial to answer. It‚Äôs not that you replace AWS with Ethereum, and everything else stays the same. A blockchain gets you rid of payment providers and banks, which all have a pretty hefty CO2 footprint themselves. With every update, these systems get more efficient, and some layer two solutions for Ethereum already claim to be carbon neutral.&lt;/p&gt;

&lt;p&gt;Is there more to it than JPEG shilling? I very much think so. NFTs are a way for artists to make money, and where money can be made, scammers aren‚Äôt far. &lt;/p&gt;

&lt;p&gt;This is what‚Äôs in the news right now, but NFTs isn‚Äôt just about media ownership; they can be so much more and already are. ‚ÄúCode is law‚Äù might not lead to just laws, but it removes much of the interpretations between the creation of law and its application, which can help eliminate some amount of human bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-future-bring"&gt;
  &lt;/a&gt;
  What Does the Future Bring?
&lt;/h2&gt;

&lt;p&gt;Just to make things clear, I don‚Äôt know if the upsides will play out in the long run. In the end, it might very well be that the old wealthy class will take over the blockchain space and distribute it between themselves like they always did. At least right now, the whole blockchain space feels like in the 90s, when the internet was in its infancy.&lt;/p&gt;

&lt;p&gt;What about me? Will I keep using non-blockchain technology? Of course!&lt;/p&gt;

&lt;p&gt;I love serverless tech and for many workloads, spinning up a Lambda function or a Cloudflare Worker is more than enough.&lt;/p&gt;

&lt;p&gt;But blockchain technology opened my eyes to solutions to problems I knew existed but had no idea how to solve them. So, when I now try to build something, I ask myself which part of the system should better live on-chain.&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>blockchain</category>
      <category>nft</category>
    </item>
    <item>
      <title>A Web Developer's Guide to Making Your First Personal Website and Blog</title>
      <author>Anna Rossetti</author>
      <pubDate>Mon, 08 Nov 2021 15:07:07 +0000</pubDate>
      <link>https://dev.to/rossettiquette/a-web-developers-guide-to-making-your-first-personal-website-and-blog-22j2</link>
      <guid>https://dev.to/rossettiquette/a-web-developers-guide-to-making-your-first-personal-website-and-blog-22j2</guid>
      <description>&lt;p&gt;I struggled for a really long time to create a website for myself and start writing online. I had a list of all the features my site just had to have before launch. I'd start working on it, but as a junior dev, I learned new things at a crazy pace. And whenever I learned a new tool or acquired a new skill, or improved my design abilities, my list of 'must-have' features grew. The bar kept moving up and up, and the personal website project kept getting scrapped and started again from scratch, with the latest and shiniest tech stack that I'd just picked up. In the end,  &lt;a href="https://annarossetti.com/articles/something-from-nothing/"&gt;a shift in mentality&lt;/a&gt;  gave me the push I needed to launch &lt;a href="https://annarossetti.com/"&gt;my blog&lt;/a&gt; in ‚Äòearly access‚Äô mode, an MVP that I can build up gradually and share the growth process with my readers. In this article I want to show you a practical step-by-step guide on taking that same leap yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-start-writing-online"&gt;
  &lt;/a&gt;
  Why you should start writing online
&lt;/h2&gt;

&lt;p&gt;As a fellow software engineer, you're probably already sold on the idea that having a personal website is a great investment for your career. Unlike a social media account, &lt;strong&gt;you have full control over both the platform and the content&lt;/strong&gt;. Any prospective client or employer will google your name and if your website is a top search result it gives you an opportunity for a genuine first impression, not one that is curated by some company's discovery algorithm or advertising interests.&lt;/p&gt;

&lt;p&gt;Making a habit of writing about your professional niche on your own blog &lt;strong&gt;helps you become a better writer&lt;/strong&gt; and a better communicator. The ability to document the things you learn and to explain how &lt;code&gt;a block of code&lt;/code&gt; works are highly sought-after skills in the tech world. There are few things more frustrating than working with a framework or tool that doesn't have well written documentation or clear examples.&lt;/p&gt;

&lt;p&gt;Writing about your work is an excellent way to &lt;strong&gt;have a wider impact in your profession&lt;/strong&gt;. Even if you're not the most authoritative figure on a subject, when you share the challenges you've faced and the things you've learned, it's from your unique point of view. And that's very relatable and valuable to someone who is new to a problem that you've only recently solved. &lt;/p&gt;

&lt;p&gt;When you start building up a significant body of written work, you'll find yourself exposed to interesting &lt;strong&gt;opportunities for consulting and speaking engagements&lt;/strong&gt;. It leads to &lt;strong&gt;professional connections&lt;/strong&gt; and invaluable networking opportunities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-coding-the-website-yourself"&gt;
  &lt;/a&gt;
  Alternatives to coding the website yourself
&lt;/h2&gt;

&lt;p&gt;Website builders like Squarespace, Wix, Ghost and Wordpress are great tools for most developers looking to start a personal website. They're very quick to set up, start off at affordable prices, and allow you to focus on writing rather than worrying about design, accessibility, infrastructure, maintenance and security. All of the  previously mentioned options allow you to own your content and publish on your own domain. &lt;/p&gt;

&lt;p&gt;In addition, you can also consider an online publishing platform (&lt;a href="https://hashnode.com/@rossettiquette/joinme"&gt;Hashnode&lt;/a&gt;, &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;, &lt;a href="https://dev.to/"&gt;Dev.To&lt;/a&gt; etc). Some allow you to publish using your own domain and all have the advantage of built-in discoverability, since they're platforms used by like-minded developers to share and learn. In fact, a great strategy is to cross-publish to these online publications to increase your reach. And if you research web content syndication and understand &lt;a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls"&gt;cannonical links&lt;/a&gt;, you'll make sure that your own website's search rankings aren't affected by duplicate content across the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-your-own-website"&gt;
  &lt;/a&gt;
  Coding your own website
&lt;/h2&gt;

&lt;p&gt;If you're just starting out with learning web development, if you have limited time that you can spend tinkering with your website or if you're in an ancillary role such as developer advocacy or management, then going with an online publication or a website builder is probably a better option than coding your own. Most of your readers are going to care about the content and quality of your writing rather than your technology stack.&lt;/p&gt;

&lt;p&gt;Choosing an off-the-shelf website builder as a web developer can feel a bit awkward, but it's important to prioritize putting your writing out there. And if you lack the time or technical ability, than starting out with an off-the-shelf solution is better than having no web presence at all.&lt;/p&gt;

&lt;p&gt;With those disclaimers out of the way, I do think that coding your own website can be really rewarding and fulfilling. It allows for endless customization options, the choice for any technology stack, and the opportunity to experiment with new tools on a real world project.&lt;/p&gt;

&lt;p&gt;And if you do decide to code your own, my advice is to ship your website as quick as possible, starting with a small MVP and building it up in public, while sharing that process with your readers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-and-technology-stacks"&gt;
  &lt;/a&gt;
  Tools and technology stacks
&lt;/h2&gt;

&lt;p&gt;When it comes to coding your own website, there are &lt;em&gt;so&lt;/em&gt; many tools available to streamline that process. You could opt to use plain HTML, CSS and JS, and that's a fantastic choice for someone who hasn't yet dabbled in JS frameworks like React, Vue or Angular. As your project grows in time you may run into problems maintaining and scaling your website - the very problems those frameworks were made to solve. But focusing on the fundamentals is a great way to get practice and start building a writing habit. &lt;/p&gt;

&lt;p&gt;If you're familiar with a framework, I recommend that you research and pick a static site generator that's built on it.&lt;/p&gt;

&lt;p&gt;In this guide I'm going to show you how to bootstrap a project using GatsbyJS, which is built on React.  As a React developer, I think you'd be hard pressed to find a better tool for building a personal website. It's even mentioned in React's official documentation as their recommended solution for &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#recommended-toolchains"&gt;building static content-oriented websites&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-code-and-deploy-your-own-website-using-gatsby-v4-amp-netlify"&gt;
  &lt;/a&gt;
  How to code and deploy your own website using Gatsby V4 &amp;amp; Netlify
&lt;/h2&gt;

&lt;p&gt;The following guide should take around an hour to complete and is written for web developers who have at least some basic knowledge of command-line, version control and a modern Javascript framework, preferably React. You don't need to have advanced experience with any of the these, but if you're very new to web development (hello, welcome, it's so nice to have you here!) I would recommend that you skip this guide and set up your site using a developer-friendly publication (I personally endorse &lt;a href="https://hashnode.com/@rossettiquette/joinme"&gt;Hashnode&lt;/a&gt;, since they allow you to publish on your own domain, but &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; and &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt; are also very popular with developers).&lt;/p&gt;

&lt;p&gt;Before you get started, it's good to have a look at &lt;a href="https://janedoedev.netlify.app"&gt;what you're going to be building towards&lt;/a&gt;. You're going to be working from the Gatsby official starter template to create a simple page with a list of blog posts and personal bio. It's a great little MVP to add to over time, and today you can customize all your personal details and even write your first post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---imx8-2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636376864213/zoUMETza6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---imx8-2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636376864213/zoUMETza6.png" alt="Screenshot of the finished website" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ready-lets-begin"&gt;
  &lt;/a&gt;
  Ready? Let's begin
&lt;/h3&gt;

&lt;p&gt;Go through the following checklist and make sure you have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; installed on your computer (v14.15 or newer)&lt;/li&gt;
&lt;li&gt;A modern code editor (I love &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Your preferred flavour of version control and an account with a repo hosting service (I'll be using git and &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An account with a website hosting service capable of deploying a Gatsby project (I use &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, but &lt;a href="https://www.gatsbyjs.com/docs/deploying-and-hosting/"&gt;other popular options&lt;/a&gt; are Gatsby Cloud, Vercel, GitHub Pages etc.)&lt;/li&gt;
&lt;li&gt;An hour of uninterrupted time&lt;/li&gt;
&lt;li&gt;A soothing cup of your favourite hot beverage (I'm going to have an Earl Grey)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a Gatsby project, you'll need to install the Gatsby CLI.  Open up the command line (I use the integrated terminal inside VS Code) and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; gatsby-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will also update you to the latest version if you have an older one installed. To make sure you're on version 4 or newer, type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, use the command line to navigate into the folder where you want to create your new project. I'll be using a folder called Tutorial which is located on my Desktop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;Desktop/Tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned, you're going to be working from the &lt;a href="https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog/"&gt;official starter template&lt;/a&gt; provided by the Gatsby team, which already has the boilerplate and configuration to create a basic blog. Run the command &lt;code&gt;gatsby new&lt;/code&gt; followed by the name of the folder where you want the site to be created followed by the name of the repo where the starter files are hosted. I'll choose to name my folder &lt;code&gt;my-tutorial-site&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby new my-tutorial-site https://github.com/gatsbyjs/gatsby-starter-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on your internet speed, it may take up to a few minutes for the project to be downloaded and set up. You'll know that Gatsby has finished doing its magic when you see the success messages in your terminal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wr4x1D03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378262612/Us2uGGY5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wr4x1D03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378262612/Us2uGGY5v.png" alt='A screenshot of the terminal showing the success message "Your new Gatsby site has been successfully bootstrapped."' width="792" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate into your newly created folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-tutorial-site
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now start a local development server by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait for Gatsby to finish making your dev build and start up your development server. You'll know that's done when you see the following output in the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;You can now view gatsby-starter-blog &lt;span class="k"&gt;in &lt;/span&gt;the browser.
‚†Ä
  http://localhost:8000/
‚†Ä
View GraphiQL, an &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="nt"&gt;-browser&lt;/span&gt; IDE, to explore your site&lt;span class="s1"&gt;'s data and
schema
‚†Ä
  http://localhost:8000/___graphql
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a new browser tab and navigate to &lt;a href="https://localhost:8000"&gt;https://localhost:8000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--teURSzKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378300846/0jWCrLhgC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teURSzKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378300846/0jWCrLhgC.png" alt="Screenshot of the website on the local development server." width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there's your website! You should be able to see changes you make and save in your codebase in real time on your website as long as your development server is running. To quit, type &lt;code&gt;CTR+C&lt;/code&gt; in your terminal. Remember that you can start your development server again at any time using the &lt;code&gt;gatsby develop&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Before you start making modifications to the template you should back up this project with version control. You'll need that set up to deploy it to a hosting service anyway, so you might as well do it now.&lt;/p&gt;

&lt;p&gt;Create a new repository with your repo hosting service. If you're using GitHub, click the plus icon on the top navigation bar and select "New repository" from the dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Q11FK-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378327840/XnN5AUydx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Q11FK-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378327840/XnN5AUydx.png" alt="Screenshot of GitHub's user dashboard and the dropdown menu containing the &amp;quot;New repository&amp;quot; button" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the new repo creation form I like to match the repository name to the name of the project folder on my local drive. You can choose to make the repo private or public, that's up to your personal choice, and it won't affect your ability to follow along with the rest of this guide. I prefer to keep my personal website closed-source, but I'll leave &lt;a href="https://github.com/rossettiquette/my-tutorial-site"&gt;this example project&lt;/a&gt; open-source so that anyone can have a look at the code. Leave the rest of the options unchecked and press the 'Create repository' button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DoUHdjx_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378353194/Zo1GbQr_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DoUHdjx_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378353194/Zo1GbQr_0.png" alt="Screenshot of GitHub's new repo form." width="880" height="785"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, copy the remote URL from the top of the Quick Setup page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZISv3bAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378402938/G2MoJDv5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZISv3bAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378402938/G2MoJDv5w.png" alt="Screenshot of GitHub's Quick Setup page" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You're going to return to you terminal to push your local code to the newly created GitHub repository. Stop your development server by using &lt;code&gt;CTR+C&lt;/code&gt; in the terminal, then type the following commands (and make sure you insert the URL you just copied instead of &lt;code&gt;&amp;lt;YOUR_REPO_URL&amp;gt;&lt;/code&gt; ):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin &amp;lt;YOUR_REPO_URL&amp;gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refresh your GitHub repo page and check to make sure your files have been uploaded. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ej-CK-bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378424529/-m8rN85gv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ej-CK-bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378424529/-m8rN85gv.png" alt="Screenshot of the project dashboard on GitHub after making a successful first push, showing all project files" width="880" height="711"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While you're still on the repo page, take a moment to look at the readme info to familiarize yourself with the file structure and make sure you understand roughly how the project is laid out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCUA9Q5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378447254/tfFu0M4rY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCUA9Q5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378447254/tfFu0M4rY.png" alt="Screenshot of the project folder structure as it's explained in the readme.md" width="698" height="1014"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next comes the fun part: you're going to start customizing the template to make your own unique website. &lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;gatsby-config.js&lt;/code&gt; file that's located in the root of your project folder. Edit the &lt;code&gt;siteMetadata&lt;/code&gt; object to replace the starter data with your own. Here's my progress:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;siteMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Jane Doe's Blog`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Jane Doe`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`who lives and works in London building awesome things.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Jane Doe's blog about web development.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;siteUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://janedoe.dev/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;social&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`janedoedev`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fill out the summary with your own mini-bio information. Then, if you get stuck filling the &lt;code&gt;siteUrl&lt;/code&gt; because you don't have a domain name yet, this is a great time to take a break and go purchase one from any reputable registrar. I use Google domains, but you can shop around to get the best offer. If your own name isn't available with the .com extension, try looking for a popular alternative like .dev, .io, .tech or .me. &lt;/p&gt;

&lt;p&gt;Save your progress and check to see the changes reflected on the website. Whenever changes are made to the gastby-config file, the development server needs to be restarted (in your terminal use &lt;code&gt;CTR+C&lt;/code&gt; to stop the process, then type &lt;code&gt;gatsby develop&lt;/code&gt; to start it up again). Your page should now look different from the starter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--049PJgdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378469709/Y8ePEDYNY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--049PJgdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378469709/Y8ePEDYNY.png" alt="Screenshot of the newly made changes as reflected in the rendered web page" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to swap out the image assets for your own. I created an avatar using &lt;a href="http://www.hexatar.com/"&gt;Hexatar&lt;/a&gt;, but if you already have a profile picture you can place a copy of it in the src/images folder. Open the bio.js file (it's located in the src/components folder) which exports the React component that renders the profile image. Find the &lt;code&gt;&amp;lt;StaticImage /&amp;gt;&lt;/code&gt; component and change the src prop to match your own image path. Save your work and check out the progress:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JB-kzXhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378489127/VjEYZkLOY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JB-kzXhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378489127/VjEYZkLOY.png" alt="Screenshot of the webpage displaying the new profile picture" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also need to replace the Gatsby logo with your own &lt;a href="https://en.wikipedia.org/wiki/Favicon"&gt;favicon&lt;/a&gt;. The image that's included in the starter is a 512x512px png file, so I recommend you stick with this. If you don't have a personal 'brand' logo that you usually use, I recommend going with your initials over a solid background. I've taken inspiration from the javascript logo and created &lt;a href="https://www.figma.com/community/file/1029407853843204095/Simple-Logo-and-Favicon"&gt;this template in Figma&lt;/a&gt; for you to customize and download (you may need an account with Figma to access the file). There's also &lt;a href="https://www.canva.com/design/DAEtuw4NM08/t3NgJ5znYKldYoe4TsOO_A/view?utm_content=DAEtuw4NM08&amp;amp;utm_campaign=designshare&amp;amp;utm_medium=link&amp;amp;utm_source=sharebutton&amp;amp;mode=preview"&gt;a version on Canva&lt;/a&gt; if you prefer it. Once you're done editing the file, click the export button in the right pane (make sure nothing is selected in order to get the correct context menu).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HYfIeYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378521664/1rAqGcXlk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HYfIeYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378521664/1rAqGcXlk.png" alt="Screenshot of the Figma interface for exporting the custom icon." width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Place a copy of your logo file into the src/images folder, then reopen the gatsby-config.js file and search for the website manifest information (use &lt;code&gt;CTR+F&lt;/code&gt; in the IDE to search for the keyword 'manifest'). Change the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;short_name&lt;/code&gt; to your own data and replace the gatsby icon image path with your own logo path. Save the file, restart your development server and refresh your browser window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHt8xgJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378549185/IVSRFGeXbU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHt8xgJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378549185/IVSRFGeXbU.png" alt="Screenshot of the browser displaying the new favicon." width="880" height="491"&gt;&lt;/a&gt;&lt;br&gt;
You can now delete the original profile-pic.png and gatsby-icon.png from src/images folder that are no longer needed.&lt;/p&gt;

&lt;p&gt;The next step is tackling the blog posts, located in &lt;em&gt;content/blog&lt;/em&gt;. To automate a lot of the heavy lifting, Gatsby programmatically creates HTML from files that are written in markdown (text files with the .md extension). If you haven't written in markdown before, &lt;a href="https://guides.github.com/features/mastering-markdown/"&gt;check out this guide&lt;/a&gt;. It's a friendlier alternative to HTML that supports links, images, and basic text styling like headings, bold, italic, bullet points, etc. Every folder inside &lt;em&gt;content/blog&lt;/em&gt; contains a markdown file named &lt;em&gt;index.md&lt;/em&gt;. Go ahead and open up the markdown file inside the &lt;em&gt;hello-world&lt;/em&gt; folder. The first part of the file contains frontmatter, which is metadata that can be used by Gatsby in a few different ways. In this example, the dates are used to sort the posts chronologically on the front page. The details about how Gatsby uses frontmatter are beyond the scope of this guide, but you can read more about it, including how to add your own fields, in the &lt;a href="https://www.gatsbyjs.com/docs/how-to/routing/adding-markdown-pages/#frontmatter-for-metadata-in-markdown-files"&gt;official documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For now, leave the title and description unchanged, but update the date to the current day. Next, delete the rest of the post and try your hand at writing your first article. Make it short and sweet. It doesn't need to be your best writing. If you're lacking inspiration, try jotting down some notes about the reasons why you chose to code your own website over going with a website builder or publishing platform, the struggles you've faced up to this point and what you hope the blog will blossom into. When you're done, save your work and delete the other two blog post folders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hr5yiatm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378572939/hcLPeY9GD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hr5yiatm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378572939/hcLPeY9GD.png" alt="Screenshot of the new post." width="880" height="490"&gt;&lt;/a&gt;&lt;br&gt;
When you go back to write your next posts, keep in mind that Gatsby uses the folder names to create the slugs (in my example, a folder named '&lt;strong&gt;my-second-entry&lt;/strong&gt;' will create a page available at janedoe. com/&lt;strong&gt;my-second-entry&lt;/strong&gt;), while the title displayed on the pages comes from the frontmatter.&lt;/p&gt;

&lt;p&gt;Save your work and double check that all links work, that your profile image displays correctly, that the favicon is picked up by the browser and that you've updated all the personal information with your own. When you're satisfied that everything is as it should be, commit your changes with git.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add.
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Changed personal info and added first blog post"&lt;/span&gt;
git push 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! All you need to do now is share it with the world. I've been using Netlify to host static websites, as they have a generous free tier and their terms of service allow commercial use on their unpaid package.&lt;/p&gt;

&lt;p&gt;Log in to your Netlify account and click the New site from Git button on your dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7x2A2hxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378594482/I8sRZuZSu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7x2A2hxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378594482/I8sRZuZSu.png" alt="Screenshot of Netlify's dashboard." width="880" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next page select your git host and follow the directions to authorize Netlify to access your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GneA2FYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378616820/5BzxRKXhK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GneA2FYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378616820/5BzxRKXhK.png" alt="Screenshot of Netlify's new website creation form." width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select your project repository from the list of all repos hosted on your account. On the Settings Configuration page, set your deployment branch to &lt;code&gt;main&lt;/code&gt;, the build command to &lt;code&gt;gatsby build&lt;/code&gt; and the publish directory to &lt;code&gt;public/&lt;/code&gt;. When you're done, hit the 'Deploy site' button. It takes a few minutes for Netlify to build the site, so get up and have a stretch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i40gLY3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378643146/dkEi3CrdX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i40gLY3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378643146/dkEi3CrdX.png" alt="Screenshot of Netlify's build settings for a new website." width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every time you push a new change to your main branch, Netlify will automatically trigger a new build, so it's worth getting used to experimenting with new features on different git branches rather than committing everything to main.&lt;/p&gt;

&lt;p&gt;When you come back, you should have a live website! Netlify provisions a temporary site name, so go ahead and add your own domain. And that's it! Your website is live, so go check it out and share it with the world:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SYXLaJu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378669639/UPhRKEKtI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SYXLaJu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636378669639/UPhRKEKtI.png" alt="Screenshot of the finished website." width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That's a wrap! üéâ
&lt;/h2&gt;

&lt;p&gt;Congratulations! &lt;/p&gt;

&lt;p&gt;Make a plan to regularly come back to your website to post new articles and continue to add features. If you're new to Gatsby, start by reading their &lt;a href="https://www.gatsbyjs.com/docs/"&gt;brilliant documentation&lt;/a&gt;. Try your hand at changing the styling, adding support for MDX and create a few more pages, like an about or contact page. Document your journey building up your website by writing articles for your blog.&lt;/p&gt;

&lt;p&gt;I hope you found this guide useful, and if you followed all the way through, share your new website with me on &lt;a href="https://twitter.com/rossettiquette"&gt;twitter&lt;/a&gt;! I'd love to see it!&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>gatsby</category>
      <category>netlify</category>
    </item>
  </channel>
</rss>
