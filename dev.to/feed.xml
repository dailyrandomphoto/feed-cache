<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Data Types, Variables and Constants in C++</title>
      <author>Fatih Küçükkarakurt</author>
      <pubDate>Wed, 22 Dec 2021 20:11:48 +0000</pubDate>
      <link>https://dev.to/fkkarakurt/data-types-variables-and-constants-in-c-10a3</link>
      <guid>https://dev.to/fkkarakurt/data-types-variables-and-constants-in-c-10a3</guid>
      <description>&lt;p&gt;We continue our C++ tutorial series. If you haven't read the introduction, click the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/fkkarakurt/c-for-beginners-2a0p"&gt;C++ For Beginners&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All variables to be used in C++ must be declared and introduced to the program before they are used. During this declaration, the data type of the variable must also be determined. &lt;/p&gt;

&lt;p&gt;The basic usage is shown as: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datatype&amp;gt; &amp;lt;name of variable&amp;gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The basic data types commonly used in C++ are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They are used to define Integers&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt;    |&lt;code&gt;&amp;lt;long&amp;gt;&lt;/code&gt;|&lt;code&gt;&amp;lt;short&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;long&amp;gt;&lt;/code&gt; data types occupy 4 bytes of memory, and the &lt;code&gt;&amp;lt;short&amp;gt;&lt;/code&gt; data types occupy 2 bytes.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;They are used to define decimal numbers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;double&amp;gt;&lt;/code&gt;|&lt;code&gt;&amp;lt;long double&amp;gt;&lt;/code&gt;|&lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;double&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;long double&amp;gt;&lt;/code&gt; data types occupy 8 bytes of memory, while the &lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt; data types occupy 4 bytes.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;They are used to identify an alphabetic character or strings of characters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each character occupies 1 byte of memory.&lt;/p&gt;



&lt;p&gt;You can review the table below for the data types used in C++.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S4PqNxK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/khj93r3qm84lb8808zdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S4PqNxK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/khj93r3qm84lb8808zdl.png" alt="img1" width="855" height="665"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#declaration-of-variable-data-type"&gt;
  &lt;/a&gt;
  Declaration of Variable Data Type
&lt;/h2&gt;

&lt;p&gt;To declare the data type of the variable to be used in C++, a definition is made as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datatype&amp;gt; &amp;lt;name of variable&amp;gt;;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to change the content of a variable by assigning a specific value anywhere in the program. Often, however, the data type of the variable is determined from the outset, while it is desirable to have a value as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datatype&amp;gt; &amp;lt;name of variable&amp;gt; = &amp;lt;value&amp;gt;;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;32.95&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we are going to use more than one variable in our program, we can define these variables by writing them side by side, provided that they are of the same type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lines where the variable data type is declared, of course, again "&lt;code&gt;;&lt;/code&gt;" must end with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"Smallest Number: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"Largest Number: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Smallest&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;Largest&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variable-naming-conventions"&gt;
  &lt;/a&gt;
  Variable Naming Conventions
&lt;/h2&gt;

&lt;p&gt;There are some important rules to consider when defining a variable name in C++. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ is case sensitive. e.g;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;Letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;LETTER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All three of the above statements describe different variables. Therefore, we must be very careful when using lowercase and uppercase letters in variable names.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No symbols should be used in variable names, except for the numbers, lowercase alphabetic characters, and uppercase alphabetic characters in the table above. However, the underscore (&lt;code&gt;_&lt;/code&gt;) character is excluded from this scope and can be used in variable names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable names must begin with a letter or an underscore (&lt;code&gt;_&lt;/code&gt;) character, never with a number, symbol, or symbol.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The name of a variable can be up to 255 characters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Space characters should not be used in variable names. However, the underscore (&lt;code&gt;_&lt;/code&gt;) character can be used instead of a space.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;int summer_of_sixtynine;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++-specific keywords cannot be used in variable names. These words are given in the table below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQyEyJLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fv5gd6mg9ef0sbgt1qg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQyEyJLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fv5gd6mg9ef0sbgt1qg6.png" alt="img2" width="743" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variable definitions can be made for different purposes in C++. Although various types of variables are used in C++ programs, for now we will consider 2 types of variables that are frequently used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-variables"&gt;
  &lt;/a&gt;
  Local Variables:
&lt;/h3&gt;

&lt;p&gt;If there is more than one function in the program, it is the type of variable that can only be valid in the function it is defined in. Such variables must be enclosed in &lt;code&gt;{ }&lt;/code&gt; signs that indicate function boundaries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-variables"&gt;
  &lt;/a&gt;
  Global Variables:
&lt;/h3&gt;

&lt;p&gt;It is the variable type that can be valid in all functions in the program. Such variables must be placed outside of the &lt;code&gt;{ }&lt;/code&gt; signs that specify function boundaries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-variables"&gt;
  &lt;/a&gt;
  Static Variables:
&lt;/h3&gt;

&lt;p&gt;When a locally defined variable in a function is required to remain constant and not change if the function is called repeatedly as long as the program is running, that variable should be defined as a static variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h2&gt;

&lt;p&gt;Constants are program components whose value does not change from the beginning to the end of the program. Constants with the following data types can be used in C++:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integer Constants&lt;/li&gt;
&lt;li&gt;Decimal Constants&lt;/li&gt;
&lt;li&gt;Character Constants&lt;/li&gt;
&lt;li&gt;String Constants&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#integer-constants"&gt;
  &lt;/a&gt;
  Integer Constants
&lt;/h3&gt;

&lt;p&gt;There are three types: '&lt;code&gt;int&lt;/code&gt;' (integer), '&lt;code&gt;short&lt;/code&gt;' (short integer) and '&lt;code&gt;long&lt;/code&gt;' (long integer). Let's take 1995 as an example and explain the job of defining the type of an integer in this example.&lt;/p&gt;

&lt;p&gt;To indicate which type a constant belongs to, a character is added to the end of that constant to indicate its type. If a numeric expression does not have any characters at the end, the type of that expression is '&lt;code&gt;int&lt;/code&gt;'. In this case, the expression 1995 in our example is an integer of type '&lt;code&gt;int&lt;/code&gt;'. To designate this expression as type '&lt;code&gt;long&lt;/code&gt;' we need to append '&lt;code&gt;l&lt;/code&gt;' or '&lt;code&gt;L&lt;/code&gt;' character: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;1995l&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;1995L&lt;/code&gt;&lt;/strong&gt;. That way the expression now belongs to type '&lt;code&gt;long&lt;/code&gt;' and not type '&lt;code&gt;int&lt;/code&gt;' an example and explain the job of defining the type of an integer in this example.&lt;/p&gt;

&lt;p&gt;Also, integers that cross the '&lt;code&gt;int&lt;/code&gt;' type limits in the flow of the program are automatically converted to '&lt;code&gt;long&lt;/code&gt;', even if they do not have a trailing '&lt;code&gt;l&lt;/code&gt;' or '&lt;code&gt;L&lt;/code&gt;' suffix.&lt;/p&gt;

&lt;p&gt;There is a special case for the '&lt;code&gt;short&lt;/code&gt;' type. When calculating the value of an expression, it is treated like '&lt;code&gt;int&lt;/code&gt;' even though it belongs to type '&lt;code&gt;short&lt;/code&gt;'. In this case, we can say that there is no constant of type '&lt;code&gt;short&lt;/code&gt;'. Because constants within the bounds of '&lt;code&gt;short&lt;/code&gt;' are considered as type '&lt;code&gt;int&lt;/code&gt;' by C++.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decimal-constants"&gt;
  &lt;/a&gt;
  Decimal Constants
&lt;/h3&gt;

&lt;p&gt;There are three types: '&lt;code&gt;float&lt;/code&gt;' (floating decimal), '&lt;code&gt;double&lt;/code&gt;' (double decimal) and '&lt;code&gt;long double&lt;/code&gt;' (long decimal). Let's take the expression 1881.1938 as an example and explain the job of defining the type of an integer in this example.&lt;/p&gt;

&lt;p&gt;If a decimal constant does not have any characters at the end, the type of that expression is considered '&lt;code&gt;double&lt;/code&gt;'. In this case, 1881.1938 in our example is a decimal constant of type '&lt;code&gt;double&lt;/code&gt;'. To designate this expression as a type 'float' we need to append the '&lt;code&gt;f&lt;/code&gt;' or '&lt;code&gt;F&lt;/code&gt;' character: &lt;strong&gt;&lt;code&gt;1881.1938f&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;1881.1938F&lt;/code&gt;&lt;/strong&gt;. This way the expression no longer belongs to the '&lt;code&gt;double&lt;/code&gt;' type but of the '&lt;code&gt;float&lt;/code&gt;' type.&lt;/p&gt;

&lt;p&gt;Although not often used, to specify a decimal constant of type 'long double', we must append the character '&lt;code&gt;l&lt;/code&gt;' or '&lt;code&gt;L&lt;/code&gt;': &lt;strong&gt;&lt;code&gt;1881.1938l&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;1881.1938L&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#character-constants"&gt;
  &lt;/a&gt;
  Character Constants
&lt;/h3&gt;

&lt;p&gt;We know that type '&lt;code&gt;char&lt;/code&gt;' takes a value between &lt;strong&gt;-128&lt;/strong&gt; and &lt;strong&gt;+127&lt;/strong&gt; or &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;+255&lt;/strong&gt;. Well, since these constants are named 'characters' and have an alphabetic nature, why are we still talking about numerical expressions?&lt;/p&gt;

&lt;p&gt;Because every character used in C++ has a numeric equivalent in the **ASCII (American Standard Code for Information Interchange) **table, and these numbers, in which the character constants are kept within the specified ranges, are the ASCII equivalents of the characters used. In other words; When we talk about 97 as the character constant, we are actually talking about the character '&lt;code&gt;a&lt;/code&gt;', which is the ASCII table equivalent of 97. &lt;/p&gt;

&lt;p&gt;When using character constants, we can use the numeric equivalents of the characters. Of course, the commonly preferred usage in C++ is to use the characters themselves. However, when we are going to use the characters themselves, we must enclose these characters in single quotes (&lt;code&gt;'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the following lines, two variables of type char are defined and the constants &lt;strong&gt;103&lt;/strong&gt; and '&lt;code&gt;g&lt;/code&gt;' are assigned to these variables, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;character1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;character2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the numeric equivalent of the '&lt;code&gt;g&lt;/code&gt;' character in the &lt;strong&gt;ASCII table is 103&lt;/strong&gt;, these two lines actually mean the same thing. However, pay special attention to the fact that the '&lt;code&gt;g&lt;/code&gt;' character is written in single quotation marks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#string-constants"&gt;
  &lt;/a&gt;
  String Constants
&lt;/h3&gt;

&lt;p&gt;'&lt;code&gt;string&lt;/code&gt;' (character) literals consist of sequentially ordered strings of character literals. In C++, every expression enclosed in double quotes (&lt;code&gt;"&lt;/code&gt;) is a constant of type '&lt;code&gt;string&lt;/code&gt;'. Consider the following examples:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;“Fatih"&lt;/th&gt;
&lt;th&gt;"1995"&lt;/th&gt;
&lt;th&gt;"1920.1923"&lt;/th&gt;
&lt;th&gt;"Harvard University"&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As you can see, numeric expressions enclosed in double quotes are now a '&lt;strong&gt;&lt;code&gt;string&lt;/code&gt;&lt;/strong&gt;' constant. We can no longer do numerical operations such as addition and subtraction with them.&lt;/p&gt;

&lt;p&gt;Actually there is no type named '&lt;code&gt;string&lt;/code&gt;' in C++. The '&lt;code&gt;string&lt;/code&gt;' type occurs when the compiler treats multiple character constants as a string of characters. Accordingly, the expression "&lt;strong&gt;&lt;code&gt;Fatih&lt;/code&gt;&lt;/strong&gt;" would actually work like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;'F' 'a' 't' 'i' 'h'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The compiler treats all these characters as a string and puts them together by adding the '&lt;strong&gt;&lt;code&gt;/0&lt;/code&gt;&lt;/strong&gt;' character to the end.&lt;/p&gt;

&lt;p&gt;Constants are defined with the word &lt;code&gt;const&lt;/code&gt; in the C++ program, and the following definitions are made to declare the data type of the invariant to be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Age: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Gender: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="nl"&gt;Age:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#type-conversion"&gt;
  &lt;/a&gt;
  Type Conversion
&lt;/h2&gt;

&lt;p&gt;Variables or constants in our programs can be of different types. If this is the case, it is important what type of calculation result will be in our mathematical operations. Therefore, type conversion must be done to avoid an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"a value= "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"b value= "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"c value= "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.25&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above application:&lt;/p&gt;

&lt;p&gt;In the first operation, we divide the variable named &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt; by an integer value; The decimal point is ignored and the result is assigned to variable &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; as an integer.&lt;/p&gt;

&lt;p&gt;In the second operation, we divide the variable named &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt;, which is an integer, by a decimal value; The part after the comma is taken into account and the result is assigned to the variable &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; as a decimal value.&lt;/p&gt;

&lt;p&gt;In the third operation, we first convert the variable named &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt;, which is an integer, into a variable of type &lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt;. Next, we divide the variable that is now &lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt; by an integer value; the result is assigned as a decimal value to the variable &lt;code&gt;&amp;lt;c&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;If you've come this far, congratulations. You are now familiar with the data types, constants, and variables of the C++ programming language. C++ is a language with so many features to explore. So never forget to learn, wonder and research.&lt;/p&gt;

&lt;p&gt;It is a difficult language as well as a fun one. But if you enjoy it, C++ will give you more.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>cpp</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Important Math methods</title>
      <author>Pritom Deb</author>
      <pubDate>Wed, 22 Dec 2021 20:11:27 +0000</pubDate>
      <link>https://dev.to/pritomdbhaskar/important-math-methods-1od0</link>
      <guid>https://dev.to/pritomdbhaskar/important-math-methods-1od0</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. &lt;u&gt;Math.min&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.min( ) method is used to find the lowest value in a list of arguments. Have a look at the example below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xI5EbmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbdvrilrlw7owqi2p8st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xI5EbmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbdvrilrlw7owqi2p8st.png" alt="Image description" width="615" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;u&gt;Math.max&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.max( ) method is used to find the highest value in a list of arguments. Have a look at the example below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--th2pXqOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v1nlwau4j0cn50ujoe7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--th2pXqOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v1nlwau4j0cn50ujoe7.png" alt="Image description" width="621" height="40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;u&gt;Math.round&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.round(x) method returns the value of a number x rounded to its nearest integer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_2MlNNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2x718g9bqbl6n6oy0rx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_2MlNNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2x718g9bqbl6n6oy0rx.png" alt="Image description" width="601" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;u&gt;Math.sqrt&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.sqrt(x) is used to return the square root of a number x. Have a look at the example below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyRcRgUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijzbth4q64955h4haewq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyRcRgUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijzbth4q64955h4haewq.png" alt="Image description" width="581" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;u&gt;Math.pow&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.pow(x, y) returns the value of x to the power of y. Let’s have a look at the below example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtiUpbxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7w3js2izpj6m6x4lfrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtiUpbxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7w3js2izpj6m6x4lfrt.png" alt="Image description" width="604" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;u&gt;Math.floor&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.floor(x) returns the value of x rounded down to its nearest integer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5e9rObt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqdkhnn8torn7u3nbgvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5e9rObt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqdkhnn8torn7u3nbgvb.png" alt="Image description" width="596" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;u&gt;Math.random&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.random() returns a random number between 0 and 1. It’s often used to extract random elements from an array.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwno26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ycekkbkp6jxeym4fanz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwno26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ycekkbkp6jxeym4fanz.png" alt="Image description" width="594" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;u&gt;Math.ceil&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.ceil(x) returns the value of x rounded up to its nearest integer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QkktwZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc0yr642l08vgo5nhcx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QkktwZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc0yr642l08vgo5nhcx7.png" alt="Image description" width="625" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Release an NFT drop on your own site without writing any code</title>
      <author>Nacho Iacovino ⚡</author>
      <pubDate>Wed, 22 Dec 2021 20:03:58 +0000</pubDate>
      <link>https://dev.to/thirdweb/release-an-nft-drop-on-your-own-site-without-writing-any-code-41hh</link>
      <guid>https://dev.to/thirdweb/release-an-nft-drop-on-your-own-site-without-writing-any-code-41hh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Hello everyone! In this guide I will walk you step-by-step on how to create your own NFT drop without having to write a single line of code, no Solidity, no JavaScript, nothing.&lt;/p&gt;

&lt;p&gt;In this example, we'll create an NFT drop where people can claim a unique Pokémon NFT. The same process can be followed for other types of NFTs (audio, video) as well as "one of many" NFTs (e.g multiple copies of the same trading card).&lt;/p&gt;

&lt;p&gt;No matter what your use case is, this web3 guide will explain everything step-by-step, no programming knowledge required.&lt;/p&gt;

&lt;p&gt;You will notice as you perform many of the steps in this walkthrough, your wallet will prompt you to accept transactions. &lt;strong&gt;thirdweb is not charging you anything&lt;/strong&gt;, it's the gas costs of deploying the contracts &lt;strong&gt;from your own address&lt;/strong&gt;, so you can own the contracts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-a-project"&gt;
  &lt;/a&gt;
  Set up a project
&lt;/h2&gt;

&lt;p&gt;First, we need to create a project on thirdweb, which can be done on &lt;a href="https://thirdweb.com/dashboard?utm_source=devto&amp;amp;utm_medium=crosspost&amp;amp;utm_campaign=nft_drop_no_code"&gt;thirdweb dashboard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this project, we're going to be deploying on &lt;strong&gt;Polygon Testnet Mumbai&lt;/strong&gt;, but you can use a mainnet for it (Ethereum, Polygon, Avalanche, etc).&lt;/p&gt;

&lt;p&gt;The name for this project is for internal use, so you can identify it later on the dashboard. The name and description used here are not public.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-drop"&gt;
  &lt;/a&gt;
  Set up the drop
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-a-drop-module"&gt;
  &lt;/a&gt;
  Create a drop module
&lt;/h3&gt;

&lt;p&gt;After we have created our own project, click on "&lt;strong&gt;Add Module&lt;/strong&gt;" and select "&lt;strong&gt;Drop&lt;/strong&gt;". &lt;/p&gt;

&lt;p&gt;Drop uses ERC-721, which means every NFT will be unique.&lt;/p&gt;

&lt;p&gt;This is my &lt;strong&gt;Drop&lt;/strong&gt; Module after I fill in the information:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEOvrUtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fdrop-module-creation.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEOvrUtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fdrop-module-creation.png%26w%3D1080%26q%3D90" alt="Drop module creation" width="880" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The drop I'm going to be deploying is a Pokémon-themed one, so we're going to be uploading all the Pokémon from Gen 1 as NFTs, isn't that exciting?!&lt;/p&gt;

&lt;p&gt;So, what does every input do? Let's use &lt;a href="https://opensea.io/collection/boredapeyachtclub"&gt;Bored Ape Yacht Club&lt;/a&gt;, a popular collection, as an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sx__2Si1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fbayc-example.png%26w%3D828%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sx__2Si1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fbayc-example.png%26w%3D828%26q%3D90" alt="BAYC as an example" width="807" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Image&lt;/strong&gt;: Image of your collection (as a whole).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;: Sets the name of your collection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Description&lt;/strong&gt;: Description of your collection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Symbol&lt;/strong&gt;: Etherscan symbol (BAYC on Bored Ape Yacht Club)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Primary Sale Recipient Address&lt;/strong&gt;: The address that will receive both the money from the primary sales and the royalties.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Royalty&lt;/strong&gt;: The % of money you'll get from any secondary sales (For example any time your NFT gets sold on OpenSea after the mint).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configure-the-drop"&gt;
  &lt;/a&gt;
  Configure the drop
&lt;/h3&gt;

&lt;p&gt;Next thing we'll do, is configure the drop, these are my settings for this drop:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIHd77lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fdrop-module-settings.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIHd77lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fdrop-module-settings.png%26w%3D1080%26q%3D90" alt="Drop settings" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's explain what each of these do!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Currency&lt;/strong&gt;: The currency you want users to mint the NFT with. You can use any token available on the chain, even your own custom tokens!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Price per token&lt;/strong&gt;: How much of that currency it's going to cost (0 is free).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Maximum Mint Supply&lt;/strong&gt;: How many NFTs are going to be available for minting, in my case, 152 (A pokeball and 151 Gen 1 Pokémon.)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Waittime (seconds)&lt;/strong&gt;: The amount of time people need to wait until they can mint again after they have minted once. (Click "&lt;strong&gt;Max&lt;/strong&gt;" if you only want them to mint once).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Claim limit per transaction&lt;/strong&gt;: The maximum number of NFTs you want them to be able to claim in one transaction (helps saving money on gas). &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-permissions"&gt;
  &lt;/a&gt;
  Set permissions
&lt;/h3&gt;

&lt;p&gt;The next screen will allow us to set permissions. Here you can give admin capabilities to other wallets, if you want to do so. I’m going to leave it exactly as is for the moment: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI6N-8Pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpermissions.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI6N-8Pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpermissions.png%26w%3D1080%26q%3D90" alt="All the permisions you can set" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bulk-upload"&gt;
  &lt;/a&gt;
  Bulk upload
&lt;/h3&gt;

&lt;p&gt;We reached the fun part! Now we're going to be uploading all our NFTs with all the metadata to our drop module so people can mint it.&lt;/p&gt;

&lt;p&gt;I've prepared a folder with all the Gen 1 Pokémon and the metadata for you to try this guide, it's available &lt;a href="https://github.com/nachoiacovino/thirdweb-pokemon"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Click "&lt;strong&gt;Bulk Create&lt;/strong&gt;" at the top of your Drop Module.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zeogtEnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fbulk-create-button.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeogtEnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fbulk-create-button.png%26w%3D1080%26q%3D90" alt="Bulk Create button" width="880" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It asks us to upload a folder.&lt;/p&gt;

&lt;p&gt;So, what are the requirements for the folder?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files must contain one .csv file with metadata. - &lt;a href="https://thirdweb.com/example.csv?utm_source=devto&amp;amp;utm_medium=crosspost&amp;amp;utm_campaign=nft_drop_no_code"&gt;Download example.csv&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Assets must be named 0,1,2,3...n.&lt;a href="//Example:%200.png,%201.png"&gt;extension&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Images and videos can be used in combination. They both have to follow the asset naming convention above. (Example: 0.png and 0.mp4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our pokemon folder already complies with all these requirements, so we can go ahead and upload it.&lt;/p&gt;

&lt;p&gt;After uploading, we'll see this preview of all our NFTs with their description and properties:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aknkO75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpreview.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aknkO75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpreview.png%26w%3D1080%26q%3D90" alt="Preview before uploading" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I added a "Generation" property, and I set it to "1". If in the future I want to add more Pokémon, I can do it and set the "Generation" property differently, you can use this to add unique traits and rarity to your NFT drops - each column in the .csv represents a unique property. &lt;/p&gt;

&lt;p&gt;Go ahead and click "&lt;strong&gt;Bulk Create X drops&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;This is what I see on the dashboard after they finish uploading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--csEaCcGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fdashboard.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csEaCcGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fdashboard.png%26w%3D1080%26q%3D90" alt="Our dashboard with all the Pokémon" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important! Every single image that you just added, was also automatically &lt;strong&gt;uploaded and pinned&lt;/strong&gt; to IPFS, which means your images now live in the blockchain, forever.&lt;/p&gt;

&lt;p&gt;The metadata for the NFT also gets uploaded to IPFS.&lt;/p&gt;

&lt;p&gt;So... now we have created our drop, wasn't that easy? The next step will enable people to mint the NFTs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embed-the-drop"&gt;
  &lt;/a&gt;
  Embed the drop
&lt;/h2&gt;

&lt;p&gt;Click on the embed tab on the drop module.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRWDizjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fembed-tab.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRWDizjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fembed-tab.png%26w%3D1080%26q%3D90" alt="Embed tab" width="880" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;thirdweb offers an easy copy and paste embed that you can add on any website that accepts HTML. People will be able to connect their wallet and mint their own NFTs.&lt;/p&gt;

&lt;p&gt;This is the configuration that thirdweb offers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TvEhW7Ut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fembed-config.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TvEhW7Ut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fembed-config.png%26w%3D1080%26q%3D90" alt="Embed configuration" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;IPFS Gateway&lt;/strong&gt;: This is where the embed is hosted. For your own production deployments, we recommend getting your own.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RPC Url&lt;/strong&gt;: The RPC Url that is used, you can use Alchemy or Infura here, recommended for production deployments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Relayer Url&lt;/strong&gt;: Provide a relayer url to use for this embed. A relayer can be used to make the transaction gas-less for the end user. &lt;a href="https://thirdweb.com/portal/guides/setup-gasless-transactions?utm_source=devto&amp;amp;utm_medium=crosspost&amp;amp;utm_campaign=nft_drop_no_code"&gt;Learn more&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, at the bottom of the page, you’ll be able to see a preview of how it will appear. Once you claim an NFT, it will show on the inventory tab of the embed!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JexKpTF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpokemon-embed.png%26w%3D640%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JexKpTF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpokemon-embed.png%26w%3D640%26q%3D90" alt="Our own embed!" width="628" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHMSdYQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpokemon-inventory.png%26w%3D640%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHMSdYQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpokemon-inventory.png%26w%3D640%26q%3D90" alt="After claiming one NFT" width="616" height="613"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-embed-to-your-website"&gt;
  &lt;/a&gt;
  Add the embed to your website
&lt;/h3&gt;

&lt;p&gt;For this example, I'm going to use &lt;a href="https://carrd.co/"&gt;Carrd&lt;/a&gt;, but you can use the embed on any page that accepts HTML (Webflow, Bubble, Wordpress, etc.)&lt;/p&gt;

&lt;p&gt;Carrd specifically needs a premium version to be able to add embeds, but remember you can add this HTML code to any HTML page for free.&lt;/p&gt;

&lt;p&gt;I'm using this free template called &lt;a href="https://340cb974f62203cb.demo.carrd.co/"&gt;Random Product&lt;/a&gt;, which is very simple but perfect for our needs.&lt;/p&gt;

&lt;p&gt;Click the "&lt;strong&gt;+&lt;/strong&gt;" button, and click "&lt;strong&gt;Embed&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7cst6QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fclick-embed.png%26w%3D1080%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7cst6QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fclick-embed.png%26w%3D1080%26q%3D90" alt="Click Embed on the + dropdown." width="855" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A drawer will open, you need to paste the embed code provided by thirdweb here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bntc2X_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fadd-embed-code.png%26w%3D640%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bntc2X_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fadd-embed-code.png%26w%3D640%26q%3D90" alt="Add embed code" width="414" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the page on the top right and publish it.&lt;/p&gt;

&lt;p&gt;This is how mine looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IFArVES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpokemon-carrd-site.png%26w%3D828%26q%3D90" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IFArVES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thirdweb.com/_next/image%3Furl%3D%252Fassets%252Fportal%252Fguides%252Frelease-an-nft-drop-with-no-code%252Fpokemon-carrd-site.png%26w%3D828%26q%3D90" alt="My carrd site" width="809" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;You are finished! You have done a lot, let's recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have created your own NFT drop and setup the conditions for people to claim.&lt;/li&gt;
&lt;li&gt;All the images have been uploaded to IPFS, so they'll live on the blockchain forever.&lt;/li&gt;
&lt;li&gt;You have created your own website.&lt;/li&gt;
&lt;li&gt;You have added an embed so people can mint your drop!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You're now a blockchain expert! If you want to go ahead and mint some Pokémon from my site, here's &lt;a href="https://pokemongen1.carrd.co/"&gt;the link&lt;/a&gt;. Remember there's only 151 available!&lt;/p&gt;

&lt;p&gt;Also, if you want to check this collection on OpenSea, you can do it &lt;a href="https://testnets.opensea.io/collection/pokmon-gen-1"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this guide, if you create your own collection with this, please send it to me on &lt;a href="https://discord.gg/thirdweb"&gt;Discord&lt;/a&gt; or on Twitter &lt;a href="https://twitter.com/nachoiacovino"&gt;@nachoiacovino&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you on the next one!&lt;/p&gt;




&lt;p&gt;Article originally published at &lt;a href="https://thirdweb.com/portal/guides/release-an-nft-drop-with-no-code?utm_source=devto&amp;amp;utm_medium=crosspost&amp;amp;utm_campaign=nft_drop_no_code"&gt;thirdweb.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>nft</category>
      <category>embed</category>
      <category>nocode</category>
    </item>
    <item>
      <title>Data Visualization Libraries for Python</title>
      <author>images.cv</author>
      <pubDate>Wed, 22 Dec 2021 20:01:53 +0000</pubDate>
      <link>https://dev.to/imagescv/data-visualization-libraries-for-python-5f09</link>
      <guid>https://dev.to/imagescv/data-visualization-libraries-for-python-5f09</guid>
      <description>&lt;p&gt;Data visualization is an important part of data analysis because it helps us to understand the data better. &lt;/p&gt;

&lt;p&gt;There are many different types of visualizations, but one popular type is a chart or graph that displays information in the form of symbols, shapes, colors etc. &lt;/p&gt;

&lt;p&gt;Data visualization libraries can make this process easier for you by providing tools and functions for creating charts and graphs from your dataset. &lt;/p&gt;

&lt;p&gt;In this blog post, we will discuss five interesting Python data visualization libraries which should provide you with some inspiration when it comes to building your next project!&lt;/p&gt;




&lt;p&gt;The first library on our list is &lt;a href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. &lt;strong&gt;Matplotlib&lt;/strong&gt; is a very popular library and it provides functions for creating basic charts and graphs. It also has support for advanced features like adding legends, annotations, and customizing the look and feel of your visualization. If you are just getting started with data visualization or want to create simple charts and graphs, then matplotlib is a good choice.&lt;/p&gt;




&lt;p&gt;Next up is &lt;a href="https://seaborn.pydata.org/"&gt;seaborn&lt;/a&gt;. &lt;strong&gt;Seaborn&lt;/strong&gt; is built on top of matplotlib and provides additional functionality for creating more sophisticated visualizations. For example, seaborn has built-in support for statistical plots which can be useful for understanding complex datasets. Additionally, seaborn offers a number of options for customizing your visualization, including features for formatting your text and applying a color gradient to your chart.&lt;/p&gt;




&lt;p&gt;The third library on our list is &lt;a href="https://ggplot2.tidyverse.org/reference/ggplot.html"&gt;ggplot&lt;/a&gt;. &lt;strong&gt;Ggplot&lt;/strong&gt; provides a different way of creating visualizations by using the concept of “grammar of graphics” from the R programming language (popular statistical software). This allows you to create more custom visualizations with less effort than other libraries like matplotlib or seaborn. There are some downsides associated with this approach though: data scientists new to Python might find it difficult to learn, and there aren’t as many built-in options for styling your charts/graphs compared to Seaborn and Matplotlib. However, if you want full control over every aspect of your visualization, then ggplot is a good choice.&lt;/p&gt;




&lt;p&gt;Next, we have &lt;a href="https://plotly.com/python/"&gt;plotly&lt;/a&gt;. &lt;strong&gt;Plotly&lt;/strong&gt; is a powerful library that provides extensive support for creating interactive visualizations. This means that you can not only create static charts and graphs, but also add features like tooltips, zooming, and scrolling to help users explore your data in more detail. Additionally, plotly allows you to share your visualizations online which can be helpful for displaying your work to others or embedding them into a website or blog post.&lt;/p&gt;




&lt;p&gt;Finally, we have &lt;a href="http://docs.bokeh.org/en/latest/"&gt;bokeh&lt;/a&gt;. &lt;strong&gt;Bokeh&lt;/strong&gt; is another library focused on creating interactive visualizations. However, it differs from plotly in that it specializes in creating beautiful graphics with minimal code requirements. If you are looking for an easy-to-use library that will help you create stunning visualizations without spending too much time on the details, then bokeh is a good choice.&lt;/p&gt;




&lt;p&gt;So, which library is right for you? It depends on what type of data you are working with and what kind of visualization you want to create. If you are just getting started or need a basic chart or graph, then matplotlib is probably the best option. However, if you want more control over your visuals or need support for specific types of graphs, then seaborn, ggplot, plotly, or bokeh might be a better choice. Experiment with different libraries until you find one that fits your needs and makes data visualization easy and fun!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>imageprocessing</category>
      <category>computervision</category>
    </item>
    <item>
      <title>Dec 22: Dev Holidays Guide ⛄️</title>
      <author>Helen Griffin</author>
      <pubDate>Wed, 22 Dec 2021 19:56:05 +0000</pubDate>
      <link>https://dev.to/helengriffinjr/dec-22-dev-holidays-guide-338j</link>
      <guid>https://dev.to/helengriffinjr/dec-22-dev-holidays-guide-338j</guid>
      <description>&lt;p&gt;Bah Humbug Tips are my own way of coping &amp;amp; recovering from burnout &amp;amp; holiday stress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-bah-humbug-tip-of-the-day"&gt;
  &lt;/a&gt;
  🎄  Today's Bah Humbug Tip of the Day.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ⛄️  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt;: Remind yourself what’s important. (1/2) 👇🏾
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:02 PM - 22 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1473670186670563333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1473670186670563333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1473670186670563333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h6&gt;
  &lt;a href="#todays-options"&gt;
  &lt;/a&gt;
  🎁 Today's Options
&lt;/h6&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkcaprSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHOGShvVQAM6cXA.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤔  What are my options?&lt;br&gt;&lt;br&gt;❏ You decide what matters.&lt;br&gt;&lt;br&gt;❏ Cherish moments that made you resilient, smile, &amp;amp; laugh.&lt;br&gt;&lt;br&gt;❏ It’s okay to create new traditions or give this season new meaning.&lt;br&gt;&lt;br&gt;🎄  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt; 🎁 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:02 PM - 22 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1473670188184702982" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1473670188184702982" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1473670188184702982" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You can find more tips here &amp;amp; on &lt;a href="https://twitter.com/stateofdevs"&gt;Twitter&lt;/a&gt;. Let me know in the comments if any of these tips helps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're struggling w/ burnout &amp;amp; open to sharing your story, please &lt;a href="https://stateofdevs.com/helps/dev"&gt;take the State Of Devs survey&lt;/a&gt;. 🗳 Thanks!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>stateofdevs</category>
      <category>bahhumbugtip</category>
      <category>mentalhealth</category>
      <category>tips</category>
    </item>
    <item>
      <title>After 1 year working on my app, I'm giving away a free month of personal coaching for creators and founders 🎉</title>
      <author>Joel Patrizio</author>
      <pubDate>Wed, 22 Dec 2021 19:53:53 +0000</pubDate>
      <link>https://dev.to/joelpatrizio/finally-releasing-my-app-and-giving-away-a-free-month-of-coaching-for-creators-and-founders-1ljn</link>
      <guid>https://dev.to/joelpatrizio/finally-releasing-my-app-and-giving-away-a-free-month-of-coaching-for-creators-and-founders-1ljn</guid>
      <description>&lt;p&gt;TL;DR: check it out &lt;a href="https://www.goalswon.com/deals/new-year-gift"&gt;here&lt;/a&gt;, use the coupon code NEWYEAR22&lt;/p&gt;

&lt;p&gt;Hi everyone! I'm Joel, the founder of &lt;a href="https://www.goalswon.com/"&gt;GoalsWon&lt;/a&gt;, masters in Computer Science and also studied psychology.&lt;/p&gt;

&lt;p&gt;After a year of iterating the app with real clients, we are now celebrating our full release! 🎉&lt;/p&gt;

&lt;p&gt;To mark this milestone and as it’s the new year, we’re offering &lt;strong&gt;a free month of personal coaching&lt;/strong&gt; to start 2022 on a high note!&lt;/p&gt;

&lt;p&gt;To take advantage of this offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the our &lt;a href="https://www.goalswon.com/deals/new-year-gift"&gt;landing page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click Redeem Your Free 30 Day Pass&lt;/li&gt;
&lt;li&gt;Enter the promo code NEWYEAR22&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0IOQ0rPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doi5m5o5tg8s1nuwjhwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0IOQ0rPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doi5m5o5tg8s1nuwjhwy.png" alt="GoalsWon logo" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.goalswon.com/"&gt;GoalsWon&lt;/a&gt; connects you with an experienced human coach giving you personalized accountability for your projects, your health, your life.&lt;/p&gt;

&lt;p&gt;Set your goals and habits that drive you to your long term targets. Your coach will review results and keep you accountable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f94vUu1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45hbw2f3ia5v2k6kb8ms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f94vUu1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45hbw2f3ia5v2k6kb8ms.png" alt="How it works 1" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SMbYkAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e5tzf8wuxcm8ytf91as.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMbYkAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e5tzf8wuxcm8ytf91as.png" alt="How it works 2" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzlL7smT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk4jowjinka9bzew6shs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzlL7smT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk4jowjinka9bzew6shs.png" alt="How it works 3" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it works: you’ll be assigned an accountability coach from our team who you’ll connect with in the app.&lt;/p&gt;

&lt;p&gt;Your coach, an experienced accountability professional, will get to know you, your background and the areas you'd like to work on, agreeing short and longer term targets. Then your day-to-day support begins:    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each day you'll be prompted to enter your top daily goals. &lt;/li&gt;
&lt;li&gt;At the end of the day, you mark which goals and habits you accomplished with any notes, pictures or videos. &lt;/li&gt;
&lt;li&gt;Your coach will check in to see how you did, give you feedback and help plan the next steps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They'll also help you implement science based behaviour techniques to drive lasting change.&lt;br&gt;
You can use it to keep track of your daily goals and exchange feedback, advice or support with your assigned coach.&lt;/p&gt;

&lt;p&gt;I’d love to hear your thoughts!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.goalswon.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--687SSBnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj7mhecuy44x0stlcxh3.png" alt="New Year offer" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>startup</category>
      <category>career</category>
      <category>management</category>
    </item>
    <item>
      <title>Understanding Axios POST requests</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 22 Dec 2021 19:12:24 +0000</pubDate>
      <link>https://dev.to/logrocket/understanding-axios-post-requests-48o7</link>
      <guid>https://dev.to/logrocket/understanding-axios-post-requests-48o7</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chimezieinnocent/"&gt;Chimezie Innocent&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Sending requests to a web server is one of the most common things we do on the frontend side of web development. Creating a Facebook post, uploading a new Instagram image, sending a tweet, or logging in and signing up on new websites: these scenarios all send requests to a server.&lt;/p&gt;

&lt;p&gt;Axios is an open source library that helps us send all these kinds of requests by providing a promised-based HTTP client method called &lt;code&gt;POST&lt;/code&gt;. In this article, we’ll learn how to use the Axios &lt;code&gt;POST&lt;/code&gt; method both in vanilla JavaScript and in a framework like React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-axios"&gt;
  &lt;/a&gt;
  Introduction to Axios
&lt;/h2&gt;

&lt;p&gt;The Axios library makes asynchronous HTTP requests to &lt;code&gt;REST&lt;/code&gt; endpoints in browsers and Node.js. Because Axios is a lightweight HTTP client for both Node.js and browsers, it gives users the ability to take advantage of &lt;a href="https://blog.logrocket.com/understanding-asynchronous-javascript/"&gt;JavaScript’s &lt;code&gt;async await&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Axios is also quite similar to the &lt;a href="https://blog.logrocket.com/patterns-for-data-fetching-in-react-981ced7e5c56/#usingthefetchapi"&gt;native JavaScript Fetch API&lt;/a&gt;. It offers a lot of methods like &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and so on. However, in this article, we will only be looking at the &lt;code&gt;POST&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;To understand using the &lt;code&gt;POST&lt;/code&gt; method, let’s consider the following scenario:&lt;/p&gt;

&lt;p&gt;Take logging into Facebook, for example. When we first start using the app, it first asks us to either sign up or log in if we already have an account. To do both, we must fill in the required form details and send them to a server.&lt;/p&gt;

&lt;p&gt;This server then checks what we entered and proceeds to take us into the main app or respond with an error message if the details are incorrect. Axios &lt;code&gt;POST&lt;/code&gt; is the Axios method that allows us to do that. Below is what an Axios &lt;code&gt;POST&lt;/code&gt; request looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the code above, Axios &lt;code&gt;POST&lt;/code&gt; takes three parameters: the &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, and &lt;code&gt;config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;url&lt;/code&gt; is the server path we send the request to; note that it is in string format. The &lt;code&gt;data&lt;/code&gt; then encapsulates the request body that we’re sending or parsing to the &lt;code&gt;url&lt;/code&gt;. This is in object format, which means it has a key and value pair.&lt;/p&gt;

&lt;p&gt;The key is the schema the server accepts while the value is any data type we parse.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config&lt;/code&gt; is the third parameter where we specify the header content type, authorization, and so on; this is also in object format.&lt;/p&gt;

&lt;p&gt;Now that we understand a bit about what Axios is and what its &lt;code&gt;POST&lt;/code&gt; method does, let’s go ahead and see how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#axios-tutorial-prerequisites"&gt;
  &lt;/a&gt;
  Axios tutorial prerequisites
&lt;/h2&gt;

&lt;p&gt;Before proceeding, it is of utmost importance that you have an understanding of React and how React form elements work. You can &lt;a href="https://blog.logrocket.com/?post_type=post&amp;amp;s=react+forms&amp;amp;orderby=relevance&amp;amp;order=DESC&amp;amp;post_type=post"&gt;read more about forms in React here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-axios"&gt;
  &lt;/a&gt;
  Why use Axios?
&lt;/h2&gt;

&lt;p&gt;You might wonder why you should use Axios over the native JavaScript &lt;code&gt;fetch()&lt;/code&gt; method. Comparatively, Axios has some advantages over &lt;code&gt;fetch()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, Axios allows us to work with only one promise(&lt;code&gt;.then()&lt;/code&gt;) and with JSON data by default unlike in the Fetch API where we must first convert the request body to a JSON string in the first promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// With Fetch&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// With Axios&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly, Axios can be used on the client as well as on the server, unlike the Fetch API.&lt;/p&gt;

&lt;p&gt;Axios functions are also named to match the HTTP methods. To perform a &lt;code&gt;POST&lt;/code&gt; request, you use the &lt;code&gt;.post()&lt;/code&gt; method, and so on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;// to perform POST request&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;// to perform GET request&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;// to perform PUT request&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// to perform DELETE request&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;    &lt;span class="c1"&gt;// to perform PATCH request&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other reasons to use Axios &lt;code&gt;POST&lt;/code&gt; over the Fetch API include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Axios allows canceling requests and requesting timeouts, which &lt;code&gt;fetch()&lt;/code&gt; does not allow&lt;/li&gt;
&lt;li&gt;  Axios has better error handling by throwing a wide range of errors, including network errors&lt;/li&gt;
&lt;li&gt;  Axios has the ability to intercept &lt;a href="https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/"&gt;HTTP requests&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Axios has a wider browser support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-axios-raw-post-endraw-"&gt;
  &lt;/a&gt;
  Using Axios &lt;code&gt;POST&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Earlier in this article, we mentioned that we will cover how to use the Axios &lt;code&gt;POST&lt;/code&gt; method both in vanilla JavaScript and in React, so we will start with the former and then proceed to the latter.&lt;/p&gt;

&lt;p&gt;Note that most of this article will focus on working with React, and we will use the &lt;a href="https://reqres.in/"&gt;re&lt;/a&gt;&lt;a href="https://reqres.in/"&gt;q&lt;/a&gt;&lt;a href="https://reqres.in/"&gt;res.in dummy API&lt;/a&gt; for our calls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#axios-raw-post-endraw-in-vanilla-javascript"&gt;
  &lt;/a&gt;
  Axios &lt;code&gt;POST&lt;/code&gt; in vanilla JavaScript
&lt;/h3&gt;

&lt;p&gt;To use Axios in vanilla JavaScript, we must first add the CDN link in the HTML before using it in the script file. Let’s start by creating two files to use: &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// index.html

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Parcel Sandbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Login Account&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Email
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Password
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/axios/dist/axios.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This HTML file creates a simple login page with two input fields, the email and the password fields, and a login button. At the bottom, just above the &lt;code&gt;index.js&lt;/code&gt; link, we added the Axios CDN.&lt;/p&gt;

&lt;p&gt;Next, we head over to our &lt;code&gt;index.js&lt;/code&gt; file that we created and get the email input, password input, and button elements using their &lt;code&gt;Id&lt;/code&gt;s. We can then add an &lt;code&gt;onClick&lt;/code&gt; event listener that triggers the function whenever we click the button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emailInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passwordInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From our reqres.in dummy API, use &lt;code&gt;eve.holt@reqres.in&lt;/code&gt; and &lt;code&gt;cityslicka&lt;/code&gt; as the email and password values, respectively. If you click the login button, you will get a response token in your console with a &lt;code&gt;200&lt;/code&gt; status code telling you the &lt;code&gt;POST&lt;/code&gt; request was successful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DqXDQmaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Successful-POST-request.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DqXDQmaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Successful-POST-request.png" alt="A Successful POST Requests Renders A 200 Code" width="730" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-axios-raw-post-endraw-in-react"&gt;
  &lt;/a&gt;
  Using Axios &lt;code&gt;POST&lt;/code&gt; in React
&lt;/h3&gt;

&lt;p&gt;We can now perform the same &lt;code&gt;POST&lt;/code&gt; request we just did in the vanilla JavaScript example in React. To use Axios in React, we must install the Axios package using npm or yarn. In your terminal, install Axios by running either of the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Axios installed, let’s go to our &lt;code&gt;App.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Unlike in vanilla JavaScript, we must first import Axios from the Axios package we installed before using it. Then, in our &lt;code&gt;handleSubmit&lt;/code&gt; function, let’s call Axios with the &lt;code&gt;POST&lt;/code&gt; method just as we did in the vanilla example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Email&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Password&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is a practical example of where and how we can use the Axios &lt;code&gt;POST&lt;/code&gt; call. Let’s look at another example where we create a new user or register as a new user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;Create&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Name&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;job&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Job&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;job&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also create a &lt;code&gt;styles.css&lt;/code&gt; file and copy the CSS styling below to style the app. It’s nothing fancy, but makes the interface view a bit cooler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;styles&lt;/span&gt;&lt;span class="nc"&gt;.css&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;palevioletred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;palevioletred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we have our registration app to utilize our &lt;code&gt;POST&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qopJoDGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Final-registration-app.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qopJoDGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Final-registration-app.png" alt="Final Registration App Showing Name And Job Fields With A Registration Button" width="730" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As previously stated, one of the advantages of using Axios over the native Fetch API is that it allows us to handle error responses better.&lt;/p&gt;

&lt;p&gt;With Axios, it catches errors in the &lt;code&gt;.catch()&lt;/code&gt; block and allows us to check for certain conditions to see why the error occurs so we can know how to handle them. Let’s see how we can do that below using the first example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server responded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;network error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Email&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Password&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first error condition, we check if there is a response, that is if our request was sent and the server responded.&lt;/p&gt;

&lt;p&gt;The errors we can get here range from a &lt;code&gt;400&lt;/code&gt; error telling us the user does not exist or there are missing credentials, a &lt;code&gt;404&lt;/code&gt; error telling us the page was not found, to a &lt;code&gt;501&lt;/code&gt; error telling us the page is unavailable, and so on.&lt;/p&gt;

&lt;p&gt;In the second error condition, we check to see if the request was made but no response was received from the server. A network error or offline internet network is usually the reason for this error.&lt;/p&gt;

&lt;p&gt;And finally, if the error received does not fall under these two categories, then the last error block catches it and tells us what happened. We can also use &lt;code&gt;error.toJSON()&lt;/code&gt; to make our error response more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-multiple-concurrent-raw-get-endraw-requests"&gt;
  &lt;/a&gt;
  Making multiple concurrent &lt;code&gt;GET&lt;/code&gt; requests
&lt;/h2&gt;

&lt;p&gt;This section is a bonus section that covers how to perform multiple &lt;code&gt;GET&lt;/code&gt; requests concurrently using Axios with error handling. Since Axios returns a promise, we can perform multiple &lt;code&gt;GET&lt;/code&gt; requests using &lt;code&gt;Promise.all()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFirstUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/unknown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSecondUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/users?page=2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;getFirstUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getSecondUsers&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, Axios has a built-in function called &lt;code&gt;.all()&lt;/code&gt; that works just as &lt;code&gt;Promise.all()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/unknown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/users?page=2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thirdRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/users/2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;firstRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thirdRequest&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spread&lt;/span&gt;&lt;span class="p"&gt;((...&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thirdRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstRes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondRes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thirdRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// the request was made and the server responded with a status code&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// the request was made but no response was received&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;network error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// something happened when setting up the request&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can perform the &lt;code&gt;GET&lt;/code&gt; request on any number of APIs of your choice by wrapping it all inside &lt;code&gt;Axios.all()&lt;/code&gt; just like in &lt;code&gt;Promise.all()&lt;/code&gt;. It then calls them as an array and returns a promise. Axios also allows you to spread the response.&lt;/p&gt;

&lt;p&gt;The above code, however, looks a bit long and unreadable, so let’s rewrite it using &lt;code&gt;Promise.all()&lt;/code&gt; and make it more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/unknown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/users?page=2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reqres.in/api/users/2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// the request was made and the server responded with a status code&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// the request was made but no response was received&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;network error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// something happened when setting up the request&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it looks shorter and more readable. What we did here is simple: we added all the endpoints we tried to call in an array called &lt;code&gt;API&lt;/code&gt;. We then mapped through the &lt;code&gt;API&lt;/code&gt; array and performed the &lt;code&gt;GET&lt;/code&gt; request on each of them.&lt;/p&gt;

&lt;p&gt;All responses are now resolved under &lt;code&gt;Promise.all&lt;/code&gt;, which means that &lt;code&gt;Promise.all()&lt;/code&gt; waits for all input promises to resolve before returning a promise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have now seen what makes Axios better than the native Fetch API by performing Axios &lt;code&gt;POST&lt;/code&gt; requests in vanilla JavaScript and React. We also looked at how Axios allows us to handle our errors better and perform multiple requests using &lt;code&gt;Axios.all&lt;/code&gt; and &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, note that &lt;code&gt;Axios.all&lt;/code&gt; as it still works today has been deprecated and it’s advised to use &lt;code&gt;Promise.all&lt;/code&gt; instead. This includes by extension the &lt;code&gt;Axios.spread&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, you understood all we did in this article and can now perform &lt;code&gt;POST&lt;/code&gt; and concurrent &lt;code&gt;GET&lt;/code&gt; requests comfortably. Gracias!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Understanding Built In Angular Directives - Part 3</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Wed, 22 Dec 2021 18:46:21 +0000</pubDate>
      <link>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-3-4ll7</link>
      <guid>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-3-4ll7</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will discuss about the third built in Angular Directive the ngModel. If you are not aware of directives, I would highly suggest you to go through the following posts &lt;a href="https://dev.to/anubhab5/understanding-built-in-angular-directives-part-1-oln"&gt;directive - part 1&lt;/a&gt;, &lt;a href="https://dev.to/anubhab5/understanding-built-in-angular-directives-part-2-3fi1"&gt;directive - part 2&lt;/a&gt; before continuing here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;br&gt;
It is also an attribute directive provided by Angular. &lt;br&gt;
&lt;strong&gt;The Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;[(ngModel)]="&amp;lt;PROPERTY&amp;gt;"&lt;/code&gt; --- ( also called banana with in a box , not official though)&lt;/p&gt;

&lt;p&gt;A small piece of Info - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ngModel&lt;/code&gt; is used for &lt;u&gt;two-way data binding&lt;/u&gt;.&lt;/li&gt;
&lt;li&gt;ngModel is present in &lt;code&gt;FormsModule&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now lets understand the concept of two way data binding. But before jumping in there we will clear one more very important concept of interpolation.&lt;/p&gt;

&lt;p&gt;Consider you have a variable named with &lt;code&gt;myMarks&lt;/code&gt; in your component ts file which holds a value of &lt;em&gt;78&lt;/em&gt; in this case.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpHmizfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ho5x7s5kqp9wdphwcu1h.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpHmizfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ho5x7s5kqp9wdphwcu1h.PNG" alt="Image description" width="852" height="102"&gt;&lt;/a&gt;&lt;br&gt;
And you need to display the same value in your corresponding component template file. How can you do it?&lt;br&gt;
Very simple - by using &lt;code&gt;interpolation&lt;/code&gt;. &lt;br&gt;
And the syntax is double curly braces &lt;code&gt;{{ &amp;lt;The_Variable_Name }}&lt;/code&gt;.&lt;br&gt;
So in this case it would look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ myMarks }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start your application and navigate your browser to localhost:4200 you would be able to see the value &lt;em&gt;78&lt;/em&gt; printed in the browser. That's magical right??? So behind the scene angular is binding the variable value from the TS file to the HTML when ever you are putting the variable name in between &lt;code&gt;{{ }}&lt;/code&gt; double curly braces.&lt;br&gt;
WARNING - &lt;strong&gt;Make sure the variable name is correct and matches. Its case sensitive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now moving on,&lt;br&gt;
Consider a situation =&amp;gt; If you have an input text box in your template where the value of &lt;code&gt;myMarks&lt;/code&gt; (variable we just created in TS file) needs to be displayed when the component is displayed and once you change the value in the text box then the corresponding value should be updated in the component TS file variable.&lt;/p&gt;

&lt;p&gt;This whole scenario is nothing but two way data binding. Now why 2 way?&lt;br&gt;
The variable in the component TS file is known as the &lt;code&gt;model&lt;/code&gt; and html is the template. So when the component is first time loaded or displayed the model value goes and sits in the text box (that's 1) and when you update it in the textbox then the model also gets updated (making it 2). Since we are binding the data we call it two way data binding.&lt;br&gt;
And we achieve the same using the directive &lt;code&gt;ngModel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hope you are with me till now... This is a very important concept and you might also expect in the interview.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets go and implement two way data binding in our example then.&lt;/p&gt;

&lt;p&gt;But wait I also mentioned something called FormsModule earlier in this post. What's that then?&lt;br&gt;
The directive &lt;code&gt;ngModel&lt;/code&gt; is present inside a different module called &lt;code&gt;FormsModule&lt;/code&gt;. And if we need to use this directive we need to import the same in our module (I will talk about modules in details very soon).&lt;/p&gt;

&lt;p&gt;Lets open the app.module.ts file (shown below)-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dMuyczm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmipcu0al5rqik3k5j5k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dMuyczm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmipcu0al5rqik3k5j5k.PNG" alt="Image description" width="466" height="356"&gt;&lt;/a&gt;&lt;br&gt;
And add the two lines as shown in the image -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iMXywln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyopg9q9x50nk1nruixn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iMXywln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyopg9q9x50nk1nruixn.PNG" alt="Image description" width="880" height="430"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormsModule } from '@angular/forms';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; FormsModule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add comma before &lt;code&gt;FormsModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets open the component.html file -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K50tVSXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ejpw2w4rswvqmv4v0kf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K50tVSXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ejpw2w4rswvqmv4v0kf.PNG" alt="Image description" width="564" height="191"&gt;&lt;/a&gt;&lt;br&gt;
and paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input [(ngModel)]="myMarks" required /&amp;gt;

{{ myMarks }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;myMarks&lt;/code&gt; variable we already created earlier in this post (and assigned the value 78 to it) in the corresponding TS file.&lt;/p&gt;

&lt;p&gt;So run the application (if not running already) and navigate to the browser. You should see an output like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7NRekjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqhogl99nwv880gcn9rc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7NRekjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqhogl99nwv880gcn9rc.PNG" alt="Image description" width="277" height="103"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow! The variable value 78 is already set to the input text box.&lt;br&gt;
The other 78 is coming due to &lt;strong&gt;interpolation&lt;/strong&gt; (it is one way binding). &lt;br&gt;
Now if you change the text box value to something else say &lt;em&gt;95&lt;/em&gt; then you will see that the corresponding 78 also changes to &lt;em&gt;95&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Once the component is displayed the model value is bind to the template and when the template value changes (using the text box) the model also changes. This whole process is two-way-data-binding.&lt;br&gt;
Isn't it amazing???&lt;/p&gt;

&lt;p&gt;Why does this change happens? once you update the text box value to 95 the model (that is the variable &lt;code&gt;myMarks&lt;/code&gt;) also gets updated to 95. Since the model gets updated the interpolated value ( &lt;code&gt;myMarks&lt;/code&gt; written inside double curly braces) also gets updated.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngModel&lt;/code&gt; does this big process under the hood so smoothly.&lt;/p&gt;

&lt;p&gt;That's the end of built in Angular attribute directives.&lt;br&gt;
If you enjoyed the post please like comment and share.&lt;br&gt;
Coming up the structural directives.&lt;br&gt;
So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>directives</category>
    </item>
    <item>
      <title>Explore API</title>
      <author>Iftakher Hossen</author>
      <pubDate>Wed, 22 Dec 2021 17:48:55 +0000</pubDate>
      <link>https://dev.to/iftakher_hossen/learn-about-api-1cae</link>
      <guid>https://dev.to/iftakher_hossen/learn-about-api-1cae</guid>
      <description>&lt;p&gt;&lt;strong&gt;Today we will learn What is an API? And The purpose of API &amp;amp; CRUD Operations.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-an-api"&gt;
  &lt;/a&gt;
  What's an API
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; stands for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;. It’s a way to connect two applications for talking with each other. It helps you to embed content on your website from any website in a more efficient way. API is simple, flexible, and easier to use. The main purpose of the API is to create communication between two applications. API lets you call to send or receive information. The communication is done by &lt;strong&gt;JSON&lt;/strong&gt;. We fetch data with API requests in applications. API request has 4 components. They are Endpoint, Header, Method &amp;amp; Data. After calling those individually we can build an API request. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crud-operations"&gt;
  &lt;/a&gt;
  CRUD Operations
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CRUD&lt;/strong&gt; Operations stands for &lt;strong&gt;Create&lt;/strong&gt;, &lt;strong&gt;Read&lt;/strong&gt;, &lt;strong&gt;Update&lt;/strong&gt; &amp;amp; &lt;strong&gt;Delete&lt;/strong&gt; operations. The fours basics and important methods in database operations. The purpose of CRUD operations is to modify the data in an application. Let’s explore CRUD Operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; - GET method allows you to get information from the source/database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; - POST method allows you to add some information to the source/database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; - PUT method allows you to update the existing information to the source/database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; - DELETE method allows you to delete existing information from the source/database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt; stands for &lt;strong&gt;JavaScript Object Notation&lt;/strong&gt;. It’s used to represent data on the server. It’s easy to read for humans and computers. Let’s see an example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0YY09hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36lys18lfkyj9ytkkdqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0YY09hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36lys18lfkyj9ytkkdqk.png" alt="JSON Example Code" width="880" height="674"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-api"&gt;
  &lt;/a&gt;
  Types of API
&lt;/h3&gt;

&lt;p&gt;There are three types of API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Open API&lt;/strong&gt; - Open API means an API that is free to use and everyone can use it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Partner API&lt;/strong&gt; - Partner API means an API that makes a connection between the server and the clients.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Private API&lt;/strong&gt; - Private API means a secure API that can only be used for internal uses like payments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API is a powerful tool for making connections between client and server applications. API provides more benefits like security, speed, &amp;amp; scalability for eCommerce applications. API helps developers send data to clients and is used every day in today’s world.&lt;/p&gt;

&lt;p&gt;Thank you for reading this!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>OSI Model - Explained in detail</title>
      <author>chirag baid</author>
      <pubDate>Wed, 22 Dec 2021 17:48:36 +0000</pubDate>
      <link>https://dev.to/chiragbaid7/osi-model-explained-in-detail-1nl9</link>
      <guid>https://dev.to/chiragbaid7/osi-model-explained-in-detail-1nl9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#osi-model"&gt;
  &lt;/a&gt;
  &lt;strong&gt;OSI Model&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The Open Systems Interconnection (OSI) model is a reference model which provides a standard for different computer systems to be able to communicate with each other using protocols. It splits data communication into seven abstract layers. The modern internet is based on the TCP/IP model which strips away many abstractions from the OSI model. But still, the OSI model is widely used as it helps to analyze and troubleshoot networking problems by breaking any problem into one specific layer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mQijkMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvpqrprvkqxch7memrsr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mQijkMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvpqrprvkqxch7memrsr.jpg" alt="OSI vs TCP/IP model" width="640" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-physical-layer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Physical Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Devices - Ethernet cables, Optic fiber cables, Network 
interface cards, etc.&lt;/li&gt;
&lt;li&gt;Protocol data unit - Bits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The physical layer is responsible for carrying bit streams over a physical medium. It defines the encoding of bit streams (0’s and 1’s) to electrical or optical signals in order to transfer data through a transmission medium. It defines the transmission rate - numbers of bits sent per second. For example, wifi drivers in our devices use radio waves to transmit bits in the form of wave frequencies to routers which are then encoded back to binary code to transmit over the physical medium.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_s5N53a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0xtsd7fwp2z9gbh6xqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_s5N53a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0xtsd7fwp2z9gbh6xqm.png" alt="Physical Layer" width="640" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-data-link-layer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Data Link Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Devices - Switches, Network interface cards,Access Point, 
etc.&lt;/li&gt;
&lt;li&gt;PDU - Frames.&lt;/li&gt;
&lt;li&gt;Addressing scheme - MAC address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data link layer is responsible for moving frames from one node to  another. At the sender’s end, it divides the stream of bits coming from network layer into blocks to form frames and later the frames are encoded into 0’s and 1’s and are transferred to the physical layer. Each frame contains a frame flag and a header. It encapsulates source and destination MAC address in the header. At the receiver’s end, the data link layer assembles all the bits from the physical layer back to frames. The data link layer has 2 sub-layers Logical Link Controller(LLC) that communicates with upper layer networking software and the other one is Media Access Controller(MAC)    which encapsulates sender’s and receiver’s physical addresses.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kUVJBgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiaptjl051lznl2g03pi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kUVJBgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiaptjl051lznl2g03pi.jpg" alt="Frame" width="640" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data Link Layer is also responsible for flow control to impose a control mechanism to restrict the number of frames or data the sender can send before the data overwhelms the receiver and ensures reliability to the physical layer by  adding a mechanism to detect lost or damaged frames. Each network  interface card  embedded in a networking device has a unique MAC   address to uniquely identify the device. A Switch is a layer 2 device, it only understands MAC addresses and it maintains CAM (Context address  memory) table in its memory to store a mapping of MAC addresses to its  assigned port.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UOOWspw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc69jetl0pzyvi7hn7g8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UOOWspw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc69jetl0pzyvi7hn7g8.jpg" alt="CAM table" width="640" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-network-layer"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;Network Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Devices - Routers, multilayer switch etc.&lt;/li&gt;
&lt;li&gt;PDU - Packets.&lt;/li&gt;
&lt;li&gt;Addressing scheme - IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The network layer is responsible for end to end delivery of a packet from  source to destination. The network layer encapsulates a header with the TCP header coming from the above transport layer. The header includes  IP address of the source and destination machines and other  information. MAC addresses are useful for internal communication to forward frame from one NIC to another whereas IP addresses are used for external communication to transmit packets from one end to the other end.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5x_xIRmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8mpn3rd1yx9bswfqbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5x_xIRmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8mpn3rd1yx9bswfqbo.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;em&gt;A Router de-encapsulates the received frame and encapsulates next hop’s MAC address in a new frame after reviewing packet's Layer 3 information in its routing table.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Each device connected to the internet is assigned a unique IP address by  the internet service provider. An IPV4 address can be in the form of : &lt;strong&gt;203.0.113.112&lt;/strong&gt;. An IP address has 2 parts the first is network ID to identify  which network the address belongs to and the second is host ID to identify which device the packet belongs to in the subnet. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SO_iqjWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkpv7d0aqhqr31ak9j6q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SO_iqjWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkpv7d0aqhqr31ak9j6q.jpg" alt="Networks are categorized into different classes" width="640" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Class A network can connect millions of devices which means &lt;br&gt;
there could be congestion in the network which becomes difficult for a packet to reach to  its destination. This is where a subnet is used where a network divided into two or more networks that efficiently routes a packet to its destination. Router is a Layer 3 device. It maintains routing tables in its database to identify the network ID from the packet’s IP address using subnet mask and forwards it to the assigned interface to reach its destination.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2Q3jo4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shrhttiw6nrbqnf81415.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2Q3jo4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shrhttiw6nrbqnf81415.jpg" alt="Routing table" width="640" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each entry in the routing table consists of the following entries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network ID: The network ID or destination corresponding to the route.&lt;/li&gt;
&lt;li&gt;Subnet Mask: The mask that is used to match a destination IP address to the network ID. &lt;/li&gt;
&lt;li&gt;Next Hop: The IP address to which the packet is forwarded.&lt;/li&gt;
&lt;li&gt;Outgoing Interface: Outgoing interface the packet should go out to reach the destination network.&lt;/li&gt;
&lt;li&gt;Metric: A common use of the metric is to indicate the minimum number of hops (routers crossed) to the network ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-transport-layer"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;Transport Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Devices - Load balancer, firewall, etc.&lt;/li&gt;
&lt;li&gt;PDU - Segments.&lt;/li&gt;
&lt;li&gt;Addressing scheme - Port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Transport layer is responsible for process to process delivery. Transport layer determines how to deliver data across the network and helps to distinguish data streams.The transport layer encapsulates the header on the payload coming from the application layer. The header contains information like sender and receiver’s port address that helps to identify each application process and contains protocols for communication. A process is a program in execution. Computers run multiple programs at the same time and operate on multiple processes like downloading your favorite movies, playing favorite E-sport game, streaming to spotify and watching Youtube videos on multiple tabs, all these applications create processes and it's the Transport layer’s responsibility to ensure that each  of the arriving packet delivers to the right application process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jwn8YpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ritcq9fj0bmvm0u0cblq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jwn8YpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ritcq9fj0bmvm0u0cblq.gif" alt="Process creation" width="550" height="350"&gt;&lt;/a&gt; &lt;em&gt;For every new application I open on Brave, a new process is created and a random port is assigned to the process by the kernel.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are popular interprocess communication mechanisms like pipes, sockets and shared memory. Sockets paves the virtual path for inter-process communication between 2 processes in the client server  architecture. It creates an endpoint for communication between two process Each socket address is combined with an IP address and a port number. Sockets are of many types but most commonly used are Stream sockets and Datagram sockets. Stream sockets are implemented by Transmission Control Protocol (TCP), they are created when the application program requires reliability, connection oriented and full duplex communication. A TCP connection is established via three way handshake before sending or receiving packets. Datagram sockets are implemented by User Datagram Protocol (UDP), they are created when application requires unreliable, connectionless and fast delivery communication with minimum overhead.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkKKEYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl6wpqaxg6os9rhib085.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkKKEYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl6wpqaxg6os9rhib085.jpg" alt="UDP vs TCP header" width="640" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-session-layer"&gt;
  &lt;/a&gt;
  5. &lt;strong&gt;Session Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The session layer is responsible for establishing, closing and managing sessions between 2 endpoints. The session layer receives encoded encrypted data from the previous layer(presentation layer) and adds session id so the server can identify each client requests because HTTP is a stateless protocol and a TCP connection is terminated after every response. It performs authentication and authorization to secure connections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-presentation-layer"&gt;
  &lt;/a&gt;
  6. &lt;strong&gt;Presentation Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The presentation layer deals with syntax and semantics of the data shared between two systems. At sender’s side the application layer sends data to presentation layer that performs encoding, encryption and compression. Data encryption is a process of converting a plain text to cipher text. At receiver’s side the data from the transport layer is decoded, decrypted and decompressed. For example objects should be formatted in order toget stored or transmitted across network, so applications developers often stringify objects to JSON, this process of encoding data into series of bytes is called serialization. Although in the TCP/IP reference model the application layer implements services of both presentation and session layer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-application-layer"&gt;
  &lt;/a&gt;
  7. &lt;strong&gt;Application Layer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The application layer is responsible for providing services to applications to access the network. Any Web application itself is not the part of the application layer but the services that are provided to the end-users using protocols are part of the layer.&lt;/p&gt;

&lt;p&gt;The application layer provides the following main functionalities with the help of application layer protocols:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web surfing - Hypertext Transfer Protocol&lt;/li&gt;
&lt;li&gt;Email - Simple Mail Transfer Protocol &lt;/li&gt;
&lt;li&gt;File transfer - File Transfer Protocol&lt;/li&gt;
&lt;li&gt;Network virtual terminal - Telnet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The HTTP protocol is used to exchange data on the Web. It is the language of the Web. HTTP is not only used to fetch hypertext documents but also PDFs, images, etc. It is a stateless protocol however we store client information in cookies and send it in every request to keep the system stateful and to keep the session alive so the server remembers the client. HTTP relies on TCP services to not lose messages and provide a reliable connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3odtGdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i0mr6ilac3em67j64cw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3odtGdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i0mr6ilac3em67j64cw.gif" alt="3-way handshake" width="556" height="313"&gt;&lt;/a&gt; &lt;em&gt;HTTP GET request is sent only after the application establishes a TCP connection through 3-way handshake successfully.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;REFERENCES&lt;br&gt;
&lt;a href="https://www.cloudflare.com/learning/network-layer/what-is-a-subnet/"&gt;https://www.cloudflare.com/learning/network-layer/what-is-a-subnet/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.man7.org/linux/man-pages/man2/socket.2.html"&gt;https://www.man7.org/linux/man-pages/man2/socket.2.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.geeksforgeeks.org/socket-in-computer-network/"&gt;https://www.geeksforgeeks.org/socket-in-computer-network/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=iC86ZhJ6v2Q"&gt;https://www.youtube.com/watch?v=iC86ZhJ6v2Q&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=eNF9z5JNl-A&amp;amp;t=902s"&gt;https://www.youtube.com/watch?v=eNF9z5JNl-A&amp;amp;t=902s&lt;/a&gt;&lt;br&gt;
&lt;a href="https://afteracademy.com/blog/what-is-the-osi-model-and-how-it-works"&gt;https://afteracademy.com/blog/what-is-the-osi-model-and-how-it-works&lt;/a&gt;&lt;br&gt;
&lt;a href="https://afteracademy.com/blog/what-is-the-osi-model-and-how-it-works"&gt;https://afteracademy.com/blog/what-is-the-osi-model-and-how-it-works&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=oVVlMqsLdro"&gt;https://www.youtube.com/watch?v=oVVlMqsLdro&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>networking</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>CUSTOM HOOK concept for beginners </title>
      <author>Turjo Chowdhury</author>
      <pubDate>Wed, 22 Dec 2021 17:39:49 +0000</pubDate>
      <link>https://dev.to/turjoc120/custom-hook-concept-for-beginners-4hk2</link>
      <guid>https://dev.to/turjoc120/custom-hook-concept-for-beginners-4hk2</guid>
      <description>&lt;p&gt;The custom hook is one of the core concepts of react it helps to make the code organized and reusable. We can create a hook with the help of javascript and share the logic from anywhere in the application. When we want to share logic between other components, we can make it to a separate function. Custom hook always starts with “use”. Custom hooks are used to obey the DRY principle. &lt;/p&gt;

&lt;p&gt;An example of custom hooks is like- imagine we have to share the user data into many components so if the user logged in. so here we can create a custom hook with all the login functionality and states with the data and return them from the function so other components can access it. &lt;/p&gt;

&lt;p&gt;So all we have to do is just import and call the function from any component.&lt;br&gt;&lt;br&gt;
so, imagine we have to share the login function and also the information of a user into many components once the user is logged in. &lt;/p&gt;

&lt;p&gt;First of all, we should use the “use” word in the file name it is a convention. Like useLogin then we can write all the logic of a login functionalities into that file and return the states or functions. Then we must export the main function so we can import it from anywhere. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>9 C++ commands to kick off your C++ programming journey</title>
      <author>ericaeducative</author>
      <pubDate>Wed, 22 Dec 2021 17:28:09 +0000</pubDate>
      <link>https://dev.to/educative/9-c-commands-to-kick-off-your-c-programming-journey-3i8e</link>
      <guid>https://dev.to/educative/9-c-commands-to-kick-off-your-c-programming-journey-3i8e</guid>
      <description>&lt;p&gt;C++ is a multi-paradigm programming language that gives you incredible flexibility. In order to harness the power of the C++ language, you need to know how to handle commands. Every C++ program is written using commands. Commands are the directives that instruct a computer program on which tasks to perform. &lt;/p&gt;

&lt;p&gt;In this article, we’ll cover nine basic commands to help you get started as a C++ programmer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#commands"&gt;Getting started with C++ commands&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#whatare"&gt;What are commands?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compilers"&gt;C++ compilers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nine"&gt;9 C++ commands to kick off your C++ programming journey&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#include"&gt;1. &lt;code&gt;#include&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#define"&gt;2. &lt;code&gt;#define&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using"&gt;3. &lt;code&gt;using&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#main"&gt;4. Main function definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variable"&gt;5. Variable declaration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if"&gt;6. &lt;code&gt;if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cout"&gt;7. &lt;code&gt;cout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#endl"&gt;8. &lt;code&gt;endl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cin"&gt;9. &lt;code&gt;cin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-c-commands"&gt;
  &lt;/a&gt;
  Getting started with C++ commands
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-commands"&gt;
  &lt;/a&gt;
  What are commands?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(Hint: They’re a lot like they sound.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Commands are &lt;strong&gt;directives instructing a computer to perform a certain task&lt;/strong&gt;. Any C++ program operates off source code which consists of a culmination of commands determining your computer’s actions. There are many C++ commands to learn. As you start mastering the basics, you can even create your own C++ commands. &lt;/p&gt;

&lt;p&gt;Commands can take various forms. Both keywords and functions can act as commands. There are also different types of commands. For instance, some commands are called &lt;em&gt;conditional commands,&lt;/em&gt; because they define a condition upon which a certain task should be performed. This article also includes many &lt;em&gt;preprocessing commands&lt;/em&gt;. Preprocessing commands are owned by the &lt;em&gt;preprocessor&lt;/em&gt; rather than the compiler. The preprocessor processes the data and produces an output for use in the compiler. These commands are also known as preprocessor directives and are preceded by the hash sign (&lt;code&gt;#&lt;/code&gt;). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conditional compilation commands are helpful because they specify conditions for compilation of part of a program. If those conditions aren’t met, the program can skip unnecessary compilations, saving time and resources. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-compilers"&gt;
  &lt;/a&gt;
  C++ compilers
&lt;/h3&gt;

&lt;p&gt;If you don’t have a compiler already, you’ll need one to start running C++ code. A compiler is a program that translates your written source code into executable machine code. Compilers are included in applications known as integrated development environments (IDEs) and code or text editors. Your choice of IDE or code editor might depend on your operating system. For instance, Dev-C++ only runs on Windows, while Visual Studio Code runs on Windows, Linux, and macOS. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-c-commands-to-kick-off-your-c-programming-journey"&gt;
  &lt;/a&gt;
  9 C++ commands to kick off your C++ programming journey
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-raw-include-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;#include&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;#include&lt;/code&gt; command tells your preprocessor to include a specified file in the program These files are usually header files from the standard library or a current, user-defined library. Header files contain C++ declarations and macro definitions. Including a header file in your program provides the definitions and declarations you need to use related system calls or libraries. &lt;/p&gt;

&lt;p&gt;There are two types of &lt;code&gt;include&lt;/code&gt; commands, with distinct syntax and uses: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#include&amp;lt;filename&amp;gt;&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Use this command when including standard files from the standard library. These files contain definitions for pre-defined functions, and they must be included before using functions. For example, I/O functions are contained in an &lt;code&gt;iostream&lt;/code&gt; file in the standard library. As such, you need to include the &lt;code&gt;iostream file&lt;/code&gt; before you use an I/O function such as &lt;code&gt;cout&lt;/code&gt; and &lt;code&gt;cin&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#include "filename"&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Use this command when including user-defined files from the current directory.

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-raw-define-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;#define&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;#define&lt;/code&gt; command is used to define macros. A macro is a block of code in a program that is assigned a name. Whenever a defined macro’s name appears in your source code, the compiler will replace it with the block of code you assigned to that macro’s name. Leveraging macros makes the process of writing code less tedious.&lt;/p&gt;

&lt;p&gt;The syntax for the &lt;code&gt;#define&lt;/code&gt; command is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#define macro_name replacement_text
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: No semicolon is needed after a &lt;code&gt;#define&lt;/code&gt; statement. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-raw-using-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;using&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;using&lt;/code&gt; command tells your compiler to bring a specified member into a current scope, or a specified base class method or variable into the current class’ scope. The &lt;code&gt;using&lt;/code&gt; keyword is followed by whichever member, class method, or variable needs to be brought into scope.&lt;/p&gt;

&lt;p&gt;For instance, we often see the &lt;code&gt;using&lt;/code&gt; keyword when we’re bringing a namespace such as &lt;code&gt;std&lt;/code&gt; into scope. The syntax for this scenario is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-main-function-definition"&gt;
  &lt;/a&gt;
  4. Main function definition
&lt;/h3&gt;

&lt;p&gt;Defining the main function requires setting parameters within the parentheses. If no parameters are needed, the parentheses can be empty. You’ll use curly braces &lt;code&gt;{}&lt;/code&gt; to enclose the statements determining your function’s behavior. No semicolon is needed after function definition. &lt;/p&gt;

&lt;p&gt;The general syntax for defining a function is:&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
Type Name ( Parameter1,Parameter2, ...) { Statements }&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;The following code shows an example of defining a main function of type &lt;code&gt;int&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main()
{
// function commands
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-variable-declaration"&gt;
  &lt;/a&gt;
  5. Variable declaration
&lt;/h3&gt;

&lt;p&gt;To declare a variable, begin by specifying the variable’s data type, followed by its variable name. &lt;/p&gt;

&lt;p&gt;The following is the syntax for declaring an integer variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
int x&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-raw-if-endraw-"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;if&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt; is a conditional command. You’ll follow the &lt;code&gt;if&lt;/code&gt; keyword with a condition. If that condition is met, your compiler will then move on to perform the next task you define (in other words, the &lt;em&gt;then&lt;/em&gt; of your &lt;em&gt;if-then&lt;/em&gt; statement). &lt;/p&gt;

&lt;p&gt;The following example demonstrates the syntax for &lt;code&gt;if&lt;/code&gt;, where $30 &amp;gt; 10$ is the condition upon which the program should display the &lt;code&gt;cout&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (30 &amp;gt; 10) {
  cout &amp;lt;&amp;lt; “30 is greater than 10”;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-raw-cout-endraw-"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;cout&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;cout&lt;/code&gt; command is used with an insertion operator or output operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. &lt;code&gt;cout&lt;/code&gt; prints the code following the insertion operator onto the console.&lt;code&gt;cout&lt;/code&gt; is defined in the iostream header file. &lt;/p&gt;

&lt;p&gt;An example of the use of &lt;code&gt;cout&lt;/code&gt; is the following variation of “Hello world”:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {
  cout &amp;lt;&amp;lt; "Hello world, ";
  cout &amp;lt;&amp;lt; "and all who inhabit it!";
}
==&amp;gt; Hello world, and all who inhabit it!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-raw-endl-endraw-"&gt;
  &lt;/a&gt;
  8. &lt;code&gt;endl&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;endl&lt;/code&gt; can be used with &lt;code&gt;cout&lt;/code&gt; to add a new line after text. With this new knowledge, let’s see how we can affect the output of the previous code for &lt;code&gt;cout&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {
  cout &amp;lt;&amp;lt; "Hello world," &amp;lt;&amp;lt; endl;
  cout &amp;lt;&amp;lt; "and all who inhabit it!";
}
==&amp;gt; Hello world, 
==&amp;gt; and all who inhabit it!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-raw-cin-endraw-"&gt;
  &lt;/a&gt;
  9. &lt;code&gt;cin&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;cin&lt;/code&gt; command is used with the extraction operator or input operator &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. &lt;code&gt;cin&lt;/code&gt; will assign an inputted value to the variable following the extraction operator. You can use &lt;code&gt;cin&lt;/code&gt; after variable declaration, and write a &lt;code&gt;cin&lt;/code&gt; statement to define a value for the variable. When the program runs, the input you’ve entered will be assigned to the variable. &lt;code&gt;cin&lt;/code&gt; is defined in the iostream header file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cin&lt;/code&gt; and &lt;code&gt;cout&lt;/code&gt; are often used together. In the following example, a &lt;code&gt;cout&lt;/code&gt; command displays a message prompting a user to input a value. The &lt;code&gt;cin&lt;/code&gt; command then assigns the value to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main() {
  int age;
    cout &amp;lt;&amp;lt; "Enter your age"; // Prompts user to input value
    cin &amp;gt;&amp;gt; age; // Assigns user input to variable age
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;Congratulations! You now know nine basic C++ commands. There’s so much more to learn. The best way to learn is to practice using these commands in your code. &lt;/p&gt;

&lt;p&gt;To help you hit the ground running as a C++ programmer, Educative has created the &lt;a href="https://www.educative.io/courses/learn-cpp-from-scratch"&gt;&lt;strong&gt;C++ from Scratch&lt;/strong&gt;&lt;/a&gt; course. You’ll find several C++ tutorials and C++ templates. And with a cloud-based IDE, you can practice coding immediately from any computer without installing an IDE or code editor. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-c"&gt;
  &lt;/a&gt;
  Continue learning about C++
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/c-is-a-good-first-language-to-learn"&gt;Why C++ is a good first language to learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/how-to-learn-cpp-the-guide-for-beginners"&gt;Learn C++ from scratch: The complete guide for beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.educative.io/blog/learn-cpp-for-2022"&gt;Is C++ still a good language to learn for 2022?&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#start-a-discussion"&gt;
  &lt;/a&gt;
  Start a discussion
&lt;/h3&gt;

&lt;p&gt;Was this guide helpful for you? How have you been starting your C++ programming journey? Let us know in the comments below!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>cpp</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
