<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>In pursuit of an even playing field</title>
      <author>Lee Englestone üí°üß†üë®‚Äçüíª</author>
      <pubDate>Mon, 06 Dec 2021 12:22:42 +0000</pubDate>
      <link>https://dev.to/leeenglestone/in-pursuit-of-an-even-playing-field-3jcd</link>
      <guid>https://dev.to/leeenglestone/in-pursuit-of-an-even-playing-field-3jcd</guid>
      <description>&lt;p&gt;This post is overdue, and for that I apologise. The fact that I have been putting this off and not prioritising it, is perhaps in some small way indicative of the problem.&lt;/p&gt;

&lt;p&gt;Because there is a problem. Whether we want to admit it or discuss it is another matter.&lt;/p&gt;

&lt;p&gt;The problem is that women are not yet treated the same as men in tech. In fact, in many cases they are treated down right despicably and it is up to everyone, (especially men) to acknowledge this and address it.&lt;/p&gt;

&lt;p&gt;This post is in part dedicated to the work by Salma and &lt;a href="//unbreak.tech"&gt;unbreak.tech&lt;/a&gt; whose aim is to highlight and bring about change.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5sw6Syw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354397337020473347/3wtvj84L_normal.jpg" alt="‚ö°Ô∏è Salma | whitep4nth3r profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ‚ö°Ô∏è Salma | whitep4nth3r
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      5 months ago I tweeted a call to action for men in tech who wanted to help advocate for and promote inclusivity and equality in tech.&lt;br&gt;&lt;br&gt;Then I launched &lt;a href="https://t.co/LeGrIeL3BD"&gt;unbreak.tech&lt;/a&gt;.&lt;br&gt;&lt;br&gt;I received 100+ DMs from men wanting to get involved.&lt;br&gt;&lt;br&gt;But I received only 21 contributions so far üëáüèº
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:57 AM - 19 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450370452363296768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450370452363296768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450370452363296768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;There are a number of things that we can do.. so I thought I would just list a few that I think are important (in no particular order).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equal pay for women&lt;/li&gt;
&lt;li&gt;Gender bias awareness and training (especially in recruitment)&lt;/li&gt;
&lt;li&gt;Improve female speaker ratios at conferences&lt;/li&gt;
&lt;li&gt;Increase female attendance at tech conferences&lt;/li&gt;
&lt;li&gt;Don't assume women are less technical than male colleagues around them&lt;/li&gt;
&lt;li&gt;Don't assume women at tech conferences are non technical&lt;/li&gt;
&lt;li&gt;Don't explain things to women that they may already know&lt;/li&gt;
&lt;li&gt;Reduce female drop out of STEM subjects at early ages&lt;/li&gt;
&lt;li&gt;Support groups encouraging women in tech&lt;/li&gt;
&lt;li&gt;Support women in tech&lt;/li&gt;
&lt;li&gt;Speak up when we see something wrong&lt;/li&gt;
&lt;li&gt;Consider what we say and how we act can be interpreted i.e. "hi guys"&lt;/li&gt;
&lt;li&gt;Help women feel safe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I may update this list)&lt;/p&gt;

&lt;p&gt;But I'd really like to take the opportunity to highlight that the many female colleagues that I have had the honour of working with, have been/are absolutely amazing (you know who you are), and I dare say better (on average) than their male colleagues.&lt;/p&gt;

&lt;p&gt;I'd also like to challenge anyone of my male peers who's initial thoughts are "yeah but..". You need to get yourself to a place where you acknowledge that there is a problem.&lt;/p&gt;

&lt;p&gt;In my opinion, it is similar to white people having a problem with the "black lives matter" message and insisting on using a "black lives matter too" or "all lives matter" instead.. of course they do! but the original phrase is to help raise awareness of the particular problem and I can completely understand why variations on it detract from the original message/problem. &lt;a href="https://theconversation.com/why-is-it-so-offensive-to-say-all-lives-matter-153188"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me the most important thing that men can do is admit there is a problem and after that, as I've listed, there are various ways to help to get towards a place where women are treated equally in tech. (I don't have all the answers before someone asks me how we get there).&lt;/p&gt;

&lt;p&gt;Slightly selfishly as I write this I realise that I am thinking about the world I want my 8yo daughter to live in and my 5yo son to be aware of and help towards creating. &lt;/p&gt;

&lt;p&gt;What kind of future do you want future generations to live in?&lt;/p&gt;

&lt;p&gt;-- Lee&lt;/p&gt;

&lt;p&gt;(Photo by Elena Mozhvilo, from Unsplash)&lt;/p&gt;

</description>
      <category>womenintech</category>
    </item>
    <item>
      <title>Day 9 - CSS Grid | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Mon, 06 Dec 2021 12:12:16 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-9-css-grid-100daysofcode-jkg</link>
      <guid>https://dev.to/jannatinnaim/day-9-css-grid-100daysofcode-jkg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQrRr2Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szrfxmbejlyljbyfpqix.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQrRr2Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szrfxmbejlyljbyfpqix.jpg" alt="Coding Motivation Banner" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;The progressive learning path after flexbox is grid. CSS Grid is just another way of laying out content for a page. It's fairly complicated, but the templates make it easy to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;None so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;The projects. The course content is finished, now the projects are the only thing left. I'll do them tomorrow after I do some more research.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-the-experience-so-far"&gt;
  &lt;/a&gt;
  How is the experience so far?
&lt;/h3&gt;

&lt;p&gt;I did learn a lot, now it's time to put them to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Automation Testing? Why You Should Use Automated Tests?</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 06 Dec 2021 12:06:07 +0000</pubDate>
      <link>https://dev.to/uilicious/what-is-automation-testing-why-you-should-use-automated-tests-4edp</link>
      <guid>https://dev.to/uilicious/what-is-automation-testing-why-you-should-use-automated-tests-4edp</guid>
      <description>&lt;p&gt;We've long believed that automation testing is a wonderful formula for improving the quality of apps right from the start. However, it is only when we begin automating that we grasp the true reality. We frequently confront issues such as deciding when to start automating tests, what tests to automate, how to choose the correct technology, and how to write automation test scripts that follow the best practices.&lt;/p&gt;

&lt;p&gt;So let‚Äôs discuss all this in detail in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-test-automation-and-how-does-it-work"&gt;
  &lt;/a&gt;
  What is Test Automation and how does it work?
&lt;/h2&gt;

&lt;p&gt;It is a method in which automation tools run a test suite, perform predetermined actions on a software application, report on the results, compare them, and generate detailed test reports.&lt;/p&gt;

&lt;p&gt;Test automation requires financial and human resources, long development cycles, and repeated executions. However, before we begin automating tests, we must first determine the best time for automation, the breadth of automation, and the best tool for automation. It might lead your project to unexpected additional costs if this process is not done properly from the beginning.&lt;/p&gt;

&lt;p&gt;Automated tests can be done across several servers during off-peak hours (midnight) and consume a fraction of the time that manual testing takes. This implies that the developer and tester‚Äôs time is used in the most efficient way possible, and the team receives faster feedback on code quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criteria-for-automation"&gt;
  &lt;/a&gt;
  Criteria for Automation
&lt;/h2&gt;

&lt;p&gt;To be automated, a test must match certain conditions; otherwise, it may wind up costing more than it saves. After all, saving time, effort, and money is a fundamental purpose of automation.&lt;/p&gt;

&lt;p&gt;Here are some general test automation criteria. Keep in mind that these are only suggestions. Depending on your circumstances, your criteria may differ.&lt;/p&gt;

&lt;p&gt;Repeatable: The test must be able to be repeated. Automating a test that can only be run once makes no sense. The following three steps comprise a repeatable test:&lt;/p&gt;

&lt;p&gt;Configure the test, including the data and the environment.&lt;br&gt;
Execute the function and determine the outcome.&lt;br&gt;
Clean up the data as well as the surroundings..&lt;br&gt;
We want to be able to make the environment consistent in the initial phase.&lt;/p&gt;

&lt;p&gt;Determinant: When a function is determinant, the result is the same each time it is performed with the same input. The same may be said for automated tests. Let's imagine we wish to put an additional function to the test. We now know that 1+1=2, and that 394.19 + 5.81 = 400.00. The function of addition is determinant. Software, on the other hand, may have such a large number of varied inputs that getting the same result over time is challenging. Some variables may be completely random, making it difficult to predict a specific outcome.&lt;/p&gt;

&lt;p&gt;Unopinionated: You cannot automate matters of opinion. This is where usability testing, beta testing, and so forth really shine. User feedback is important, but it just can‚Äôt be automated ‚Ä¶ sorry!&lt;/p&gt;

&lt;p&gt;Most devs say software test automation demands considerable investments of money and resources. But UI-licious makes it easy to implement and maintain. We created this all-in-one automation tool with the desire to deliver better web experiences for everyone in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-at-different-levels"&gt;
  &lt;/a&gt;
  Testing at different levels
&lt;/h3&gt;

&lt;p&gt;A strategy to decide the number of tests to automate is the test automation pyramid. This strategy suggests writing three types of tests with different levels of granularity. The higher the level, the fewer tests there are to write.&lt;/p&gt;

&lt;p&gt;Unit testing offers software products with robustness as a firm base. It's simple to write and execute tests when you test particular pieces of the code.&lt;br&gt;
The service layer refers to evaluating an application's services separately from its user interface; these services include everything that the application does in response to a single or multiple inputs.&lt;br&gt;
We have UI testing at the top level, which has fewer tests due to many attributes that make them more difficult to run, such as the fragility of the tests, where a tiny change in the user interface can break a large number of tests, requiring additional maintenance effort.&lt;br&gt;
Type of automated tests&lt;br&gt;
Knowing what are the different forms of automated testing is critical when it comes to integrating test automation in your QA department. This will give you a good idea of how comprehensive a test automation program is, and if you can integrate it into your present quality assurance procedures or not. Furthermore, understanding the various sorts of tests allows you to make informed decisions about which types of testing would produce the best results for your organization.&lt;/p&gt;

&lt;p&gt;There are many different types of test automation. The following is a comprehensive list of the most common ones:&lt;/p&gt;

&lt;p&gt;Code Analysis: Static and dynamic code analysis tools are just two of the numerous types of code analysis tools available. Some of these checks are for security issues, while others are for style and form. When a developer checks in code, these tests are run. There isn't much test writing to perform with these automated tests other than configuring rules and keeping the tools up to date.&lt;br&gt;
Unit Testing: Unit testing is doing tests on individual components in isolation to ensure that they function properly. It is commonly the first type of automated testing performed on an application because it is usually done during the development phase.&lt;br&gt;
Integration Testing: Integration testing entails testing the application's various elements as a whole. When it comes to automation, integration tests are a unique kind. Integration tests, often known as end-to-end tests, are more difficult to put up since they must interface with external dependencies. When working with resources that aren't under your control, it's often beneficial to construct false external resources.&lt;br&gt;
Performance Testing: Performance testing is putting a piece of software through its paces, stability, and responsiveness while under load. The fundamental goal of performance testing is to detect and eliminate any potential performance bottlenecks so that the program can offer the best results to the end-user. Performance testing is an important part of assuring a product's market success since it helps uncover potential issues that consumers may encounter, such as slow software functioning under a heavy workload.&lt;br&gt;
Regression Testing: Regression testing is a sort of maintenance testing. It entails running functional and non-functional tests again to see if the software behaves the same way it did previously after a code or program change. The software is said to have regressed if the performance is no longer the same. The primary goal of regression testing is to guarantee that existing functionality is not harmed as a result of code changes.&lt;br&gt;
Smoke Testing: Smoke testing, also known as "Build Verification Testing" and "Confidence Testing," is a series of tests designed to evaluate the stability and viability of the software's delivered build. Smoke testing is used to determine whether an application should be shelved due to lack of functioning or moved on to the next stage of testing. Once the generated software functions have been merged with the software build, smoke testing is performed. Any failures in testing at this stage will almost always result in the application being sent back to the development team for changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-automated-tests"&gt;
  &lt;/a&gt;
  Why use automated tests?
&lt;/h2&gt;

&lt;p&gt;Pocket-friendly&lt;br&gt;
Contrary to popular belief, automated testing can be less expensive than manual testing. You can't conduct repeating tests with manual testing. In reality, the cost of manually testing your application increases over time. Automated testing, on the other hand, is less expensive in the long run since once you've built your test scripts, you can reuse them at any time without incurring additional costs. True, automation adoption is initially costly, but it will quickly pay for itself.&lt;/p&gt;

&lt;p&gt;It's important to remember that the amount of the automated testing ROI is determined by the extent of automation adoption. The bigger the return on investment is, the more automated test cases you create and use.&lt;/p&gt;

&lt;p&gt;Time-Saving&lt;br&gt;
You can save time by automating your tests. Automated tests are quick to complete and can be repeated. To put it another way, you won't have to wait weeks to do the tests again ‚Äî only a few hours will be enough.&lt;/p&gt;

&lt;p&gt;Automated testing accelerates development by taking advantage of their quick execution and repeatability. Transitioning from manual testing to automation will shorten your development time and increase your productivity.&lt;/p&gt;

&lt;p&gt;Better Accuracy&lt;br&gt;
You're more likely to have error-free releases if you use test automation. Automated testing is more accurate than manual testing because it requires less human intervention. The problem is that a human tester can make mistakes at any stage of the review process. The machine, on the other hand, will not cooperate. Because generated test cases are more precise than human testers, you can lower the likelihood of failure by removing human errors.&lt;/p&gt;

&lt;p&gt;Immediate Feedback&lt;br&gt;
Another advantage of automated testing is that it provides immediate feedback. Developers receive testing reports instantaneously with fast test execution, so they can react swiftly if a problem happens. Forget about deciphering the code that was written three weeks ago.&lt;/p&gt;

&lt;p&gt;When your app is already on the market, immediate feedback is very useful. Manual testing can simply slow down the process if you need to fix some errors immediately. Test automation, on the other hand, will allow you to make quick changes to your application. As a result, automated testing leads to increased team responsiveness, improved user experience, and increased customer satisfaction.&lt;/p&gt;

&lt;p&gt;DevOps Implementation&lt;br&gt;
Every developer's commit to the source code must be tested as part of the CI/CD pipeline, and there's no other way to accomplish it fast and efficiently than with test automation. As a result, once you've deployed automated testing, transitioning to Continuous Testing and Delivery will be simple. When the complexity of the code and the number of test cases increases, it becomes increasingly difficult to manage.&lt;/p&gt;

&lt;p&gt;The good news is that we created a solution called UI-licious which is an all-in-one automation tool that helps anyone automate tests in minutes, not in hours. With our flexible testing solution, experienced testers, as well as non-coding beginners, can ensure that crucial error scenarios are quickly identified, so users do not encounter any unexpected failures when browsing your website or web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-automated-testing"&gt;
  &lt;/a&gt;
  When to use automated testing?
&lt;/h3&gt;

&lt;p&gt;If you're running the same test again and again without altering it, it's likely that automating it would save you a lot of time. That's because having a manual task done on a frequent basis wastes your team's time and is likely to result in additional errors due to inattention.&lt;/p&gt;

&lt;p&gt;Human error is no longer a possibility thanks to automation. As a result, the adoption of automated testing can drastically increase quality in particular cases.&lt;/p&gt;

&lt;p&gt;The bottom line is that if you can save money while still delivering a high-quality product, do so. This is where automation really shines. Most automation technologies aren't cheap, so the project must be large enough to justify the investment. However, UI-licious has plans starting from $12 a month, which happen to be very cost-effective and pocket-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-misconceptions-about-automation-testing"&gt;
  &lt;/a&gt;
  Common Misconceptions about Automation testing
&lt;/h3&gt;

&lt;p&gt;It is both true and incorrect that test automation will allow you to have more free time. The majority of manual testing time is spent on exploratory and functional testing, which involves manually searching for faults. Once that process is finished, the manual tester must perform the identical actions over and over again. That time is greatly reduced with automated testing. Instead of writing tests, automation testers spend their time coding them and improving them as needed. However, after the test is completed, automated testing enables for the reuse of tests, eliminating the need to repeat the entire procedure.&lt;/p&gt;

&lt;p&gt;Automated testing allows you to concentrate on more important topics like client needs, functionality, and enhancements. Furthermore, the software tests can be run each time the source code is amended. Manually performing these tests is time-consuming and expensive, whereas automated tests can be done repeatedly at no additional cost.&lt;/p&gt;

&lt;p&gt;Investing in automated testing may appear to be prohibitively expensive at first, especially if you're a small business. But that's not the case with UI-licious, our pricing is cost-effective because you can create tests fast. Indeed, you don't need to hire an expert who is proficient in a particular coding language to write your tests. Moreover, the monthly fee is derisory compared to most of the similar solutions.&lt;/p&gt;

&lt;p&gt;Another prevalent misunderstanding concerning automated testing is that it eliminates the need for human involvement. In all honesty, automated testing is more precise and faster than what people can accomplish without incurring significant human error, thus this misunderstanding is acceptable. This does not replace the need for face-to-face communication in software development. Instead, it increases that aspect by giving an additional communication route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-and-not-to-automate"&gt;
  &lt;/a&gt;
  What to and not to automate
&lt;/h3&gt;

&lt;p&gt;Without necessarily automating tests end-to-end, testing tools can assist with tasks such as product installation, test data creation, GUI interaction, problem detection (think parsing or polling agents equipped with test oracles), defect tracking, and so on.&lt;/p&gt;

&lt;p&gt;We shouldn't try to automate negative or failover tests since they need testers to think analytically, and negative tests aren't always easy to offer a pass or fail result that can help us.&lt;/p&gt;

&lt;p&gt;Who should be involved with test automation?&lt;br&gt;
With short Agile iterations, testing frequently needs a "shift left" strategy. Because of the shift to the left in the agile development process, testing can begin considerably earlier in the application lifetime. As a result of this strategy, developers with strong technical skills are increasingly being held responsible for testing, and they frequently collaborate with testers to design test automation frameworks. When assessing a testing solution, it's critical to find one that meets the requirements of all team members who will be involved in the testing process. Manual testers, automation engineers, and developers are among them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-automate-your-tests"&gt;
  &lt;/a&gt;
  How to automate your tests?
&lt;/h3&gt;

&lt;p&gt;If you are wondering how to start with automation testing, you can follow this easy 5 step process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select software or tools for testing.&lt;br&gt;
After you've decided which test to automate, you may look at the various testing tools accessible. Consider how a tool will operate with your present software platform before selecting one, as certain tools are better suited to a specific platform. Like UI-licious is a great choice because of its framework-agnostic character and cheaper solutions than most other products out there. Not only is it easy to start, but you also don‚Äôt need to master a coding language to implement your automated testing strategy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Determine which tests should be automated.&lt;br&gt;
Choose which test you wish to automate first. Manual and automated testing are used by many software engineers. Certain functionality may need to be manually tested. With UI-licious, you can get started with 0 coding knowledge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plans, Designs, and Scripts&lt;br&gt;
After you have chosen your tools for automation, plan the design of the framework and its features. Then you can plan automation things that are in-scope and out-of-scope. Next, you can start scripting and execution of schedules and timelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute your automated tests&lt;br&gt;
During this phase, automation scripts are run. Before they may be set to run, some scripts require input test data. Once they‚Äôve been run, they generate extensive test reports you can easily analyze and share with your team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintain your test scripts&lt;br&gt;
The Test Automation Maintenance Approach is a phase of automation testing that is used to see if the new features added to the software are working properly. When new automation scripts are added, they must be reviewed and maintained in order to improve the effectiveness of automation scripts with each release cycle. UI-licious makes the maintenance easier because the scripting language relies less on CSS and XPATH selectors and more on user behaviors. Indeed, with our testing solution, you are actually creating scripts that are following the user journey you want to verify.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion&lt;br&gt;
Test automation allows testers to devote more time to exploratory tests, which often uncover more flaws than any automated test. Because of these and other factors, test automation can make you save time and money on all your projects.&lt;/p&gt;

&lt;p&gt;And so, UI-licious is there to help you out in this world of automation testing.&lt;/p&gt;

&lt;p&gt;Apart from being a flexible and accessible way to start test automation, UI-licious provides precise results after testing, and the reports are also very informative and helpful, especially when looking up the history of past tests. It also provides a monitoring tab where we can see how our automation is progressing. It has a very user-friendly interface, and even non-technical individuals can understand the process.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to publish the package in npm?</title>
      <author>DhiWise</author>
      <pubDate>Mon, 06 Dec 2021 11:42:34 +0000</pubDate>
      <link>https://dev.to/dhiwise/how-to-publish-the-package-in-npm-48l2</link>
      <guid>https://dev.to/dhiwise/how-to-publish-the-package-in-npm-48l2</guid>
      <description>&lt;p&gt;In this guide, we will build a reusable module and publish it as a Node.js package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbqU7i4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AlvGcTxZAcoy64yq-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbqU7i4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AlvGcTxZAcoy64yq-.jpeg" alt="Source: dev.[to](https://res.cloudinary.com/practicaldev/image/fetch/s--9BQakseJ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/wnhbg07hmt77b5x94shs.jpeg)" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-npm"&gt;
  &lt;/a&gt;
  What is npm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; (Node package manager) is the standard package manager of the &lt;a href="https://medium.com/swlh/node-js-explained-dad7b23d027d"&gt;Node.js &lt;/a&gt;ecosystem.&lt;/p&gt;

&lt;p&gt;npm is the most popular package manager for &lt;a href="https://www.stackchief.com/tutorials/JavaScript%20ES6%20Intro"&gt;JavaScript&lt;/a&gt;. It‚Äôs the most extensive online package repository, containing over one million packages. Also, it‚Äôs a command-line interface tool used by developers to manage their Node.js projects.&lt;/p&gt;

&lt;p&gt;Developers can easily share and update software. When developers find solutions to small but powerful problems, they submit their software to npm‚Äôs central registry. Here anybody can download the code as well as receive future updates on the ‚Äòmodule‚Äô or ‚Äòpackage‚Äô. Some packages are widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-npm-is-working"&gt;
  &lt;/a&gt;
  How npm is working?
&lt;/h2&gt;

&lt;p&gt;As I mentioned, npm provides us command-line interface tool so it provides such important commands to use (add a dependency) in our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install package.json dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install or npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;npm, install downloads a package and its dependencies. npm install can be run with or without arguments.&lt;/p&gt;

&lt;p&gt;if you run without arguments, npm install downloads dependencies defined in a &lt;a href="https://npm.github.io/how-npm-works-docs/theory-and-design/what-is-a-package.html"&gt;**package.json&lt;/a&gt;** file and generates a &lt;strong&gt;node_modules&lt;/strong&gt; folder with the installed modules.&lt;/p&gt;

&lt;p&gt;npm, install also generates a &lt;strong&gt;package-lock.json&lt;/strong&gt; file. This file describes the exact dependency tree that was installed. This makes it easier for subsequent installs to use the exact same tree.&lt;/p&gt;

&lt;p&gt;if you run with arguments, npm install downloads specific modules to the &lt;strong&gt;node_modules&lt;/strong&gt; folder. and add dependency in package.json file and package-lock.json.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i &amp;lt;packag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#options-for-installing-packages"&gt;
  &lt;/a&gt;
  Options for installing packages.
&lt;/h2&gt;

&lt;p&gt;npm install can be run with different options. Here are some of the more important ones to be aware of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) npm install (with ‚Äî global)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install -g
or
$ npm install --global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if you run with ‚Äî global or -g, npm install installs the package globally. This means the package is installed in two places. The first is at the root directory where &lt;strong&gt;package.json&lt;/strong&gt; is defined. The second is the global &lt;strong&gt;node_modules&lt;/strong&gt; folder on the user system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) npm install (with ‚Äî save)&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install &amp;lt;package&amp;gt; --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if you run with ‚Äî save, npm install modifies the &lt;strong&gt;package.json&lt;/strong&gt; file to include the specified package as a dependency. In this case, the package will be added as a dependency to package.json. The ‚Äî save option is important whenever you want future installs to include the specified package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) npm install (with ‚Äî save-dev)&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install &amp;lt;package&amp;gt; --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The ‚Äî save-dev flag specifies that the package should be added to the devDependencies section of the &lt;strong&gt;package.json&lt;/strong&gt; rather than the dependencies section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other few Commands which is useful when you deal with npm.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List globally installed packages&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm list -g --depth=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Uninstall global package&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm -g uninstall &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update global packages&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm outdated -g --depth=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;List available scripts to run&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update npm&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g npm@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#types-of-npm-package"&gt;
  &lt;/a&gt;
  Types of npm package:
&lt;/h2&gt;

&lt;p&gt;There are two types of npm packages.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;private&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;public&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#private-packages"&gt;
  &lt;/a&gt;
  Private packages
&lt;/h2&gt;

&lt;p&gt;With npm private packages, you can use the npm registry to host code that is only visible to you and your chosen collaborators, allowing you to manage and use private code alongside public code in your projects. &lt;a href="https://docs.npmjs.com/about-private-packages"&gt;see more&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#public-packages"&gt;
  &lt;/a&gt;
  Public Packages
&lt;/h2&gt;

&lt;p&gt;As an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects. &lt;a href="https://docs.npmjs.com/about-public-packages"&gt;see more&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-and-publish-public-packages"&gt;
  &lt;/a&gt;
  Create and Publish Public packages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Go to &lt;a href="https://www.npmjs.com/"&gt;https://www.npmjs.com/&lt;/a&gt; and create a new account If you don‚Äôt already have an account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Create Project if you don‚Äôt already have a project.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir publish-npm-test
$ cd publish-npm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Open terminal and hit npm init command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This command will help you to create a new package.json and it will ask you for the basic information which will be useful to publish the package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Now add proper detail to your project.&lt;/p&gt;

&lt;p&gt;Package name: guidelines of npm docs for the package name. ex. publish-npm-test&lt;/p&gt;

&lt;p&gt;Version: you will be advised to start your project with version 1.0.0, however, if you are just starting your project you‚Äôre probably better off starting with something like 0.0.1 and switching to 1.0.0 when the code has been tested further. Also, other developers using your library will appreciate that your versioning reflects the state of your code.&lt;/p&gt;

&lt;p&gt;Git repository: Add the link to your git repository if you have.&lt;/p&gt;

&lt;p&gt;Description: it should be straight to the point and easy to understand.&lt;/p&gt;

&lt;p&gt;Entry point: This is the entry file for your library. default index.js&lt;/p&gt;

&lt;p&gt;keywords: it can help identify a &lt;strong&gt;package&lt;/strong&gt;, related modules and software, and concepts.&lt;/p&gt;

&lt;p&gt;License (ISC): The &lt;strong&gt;ISC license&lt;/strong&gt; is a permissive free software &lt;strong&gt;license&lt;/strong&gt; published by the Internet Software Consortium, nowadays called Internet Systems Consortium (&lt;strong&gt;ISC&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Now Your Package.json file is ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Create an index.js file&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("my first npm package");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Testing the created npm package using require statement.&lt;/p&gt;

&lt;p&gt;Now, you are done with creating the npm package but before publishing it to the npm repository, you need to make sure it works when you use it&lt;/p&gt;

&lt;p&gt;using require or import statement.&lt;/p&gt;

&lt;p&gt;go to the publish-npm-test directory.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Executing npm link the command creates a symbolic link for your current package inside the global npm node_modules folder (The same folder where our global npm dependencies get installed).&lt;/p&gt;

&lt;p&gt;Now, create a test directory, for testing our package.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir test-package 
$ cd test-package 
$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;the name property in our package‚Äôs package.json file was publish-npm-test so you need to require the package using the same name.&lt;/p&gt;

&lt;p&gt;Now, execute the following command from inside the test-package folder to use the package you created:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link publish-npm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Create a new file with the name index.js and add the following code inside it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require("publish-npm-test");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, execute the index.js file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will see the output displayed:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my first npm package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, when you publish the npm package on the npm repository, anyone can use it by installing it and using the require or import statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: Publish to the npm repository.&lt;/p&gt;

&lt;p&gt;Open terminal and from inside the publish-npm-test folder execute the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm whoami
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if you are already login you will see your username.&lt;/p&gt;

&lt;p&gt;if you are not logged in then hit the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and enter your npm credentials to log in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z644X662--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2234/0%2ATwfEmR00rBy6a8Yq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z644X662--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2234/0%2ATwfEmR00rBy6a8Yq.jpg" alt="" width="880" height="71"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, to publish it to the npm repository run the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;you will get an error if the package name has already registered with the same name or if your account is not verified. otherwise, you‚Äôll be able to publish the package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91einhnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2226/0%2AQ9kKLrzdSGLY9R2h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91einhnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2226/0%2AQ9kKLrzdSGLY9R2h.jpg" alt="" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you navigate to your profile in &lt;a href="https://www.npmjs.com/"&gt;npmjs.com&lt;/a&gt; you will see your published package in your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOS837d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2AIl1G38qs6izaKNro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOS837d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2AIl1G38qs6izaKNro.png" alt="" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, anyone can install your public package and use it in their project by the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install publish-npm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt;: Now, adding some changes in code with the readme file. and then publish again.&lt;/p&gt;

&lt;p&gt;Go to the publish-npm-test directory and do some changes to index.js the file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("my first npm package");
function sayHello(username){
  console.log(`Hello ${username} from publish-npm-test package`);
}
module.exports = sayHello;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and add a readMe file.&lt;/p&gt;

&lt;p&gt;The importance of the readMe file is to help others find your packages on npm and have a good experience using your code in their projects, we recommend including a README file in your package directory. Your README file may include directions for installing, configuring and using the code in your package, as well as any other information a user may find helpful.&lt;/p&gt;

&lt;p&gt;readMe.md&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is Sample Test Package.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, Let‚Äôs try to publish it again using the npm publish command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HvSJVWSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2216/0%2AcE2cyWXBI6A5yV24.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvSJVWSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2216/0%2AcE2cyWXBI6A5yV24.jpg" alt="" width="880" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôll give an error. This is because you are publishing the package with the same version again.&lt;/p&gt;

&lt;p&gt;If you check our package.json file, you will see that the version mentioned in the file is 1.0.0You need to increment it every time publishing a new change. So what should you increment to? For that, you need to understand the semantic versioning concept.&lt;/p&gt;

&lt;p&gt;So you‚Äôll have to change the version inside package.json file from 1.0.0 to 1.0.1 and run the npm publish command again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantic-versioning-in-npm"&gt;
  &lt;/a&gt;
  Semantic versioning in npm
&lt;/h2&gt;

&lt;p&gt;The semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.&lt;/p&gt;

&lt;p&gt;To help developers who rely on your code, we recommend starting your package version at 1.0.0 and incrementing as follows:&lt;/p&gt;

&lt;p&gt;You can specify which update types your package can accept from dependencies in your package‚Äôs package.json file.&lt;/p&gt;

&lt;p&gt;The Semantic Versioning concept is simple: all versions have 3 digits: x.y.z.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the first digit is the major version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the second digit is the minor version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the third digit is the patch version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you make a new release, you don‚Äôt just up a number as you please, but you have rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you up the major version when you make incompatible API changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you up the minor version when you add functionality in a backward-compatible manner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you up the patch version when you make backward-compatible bug fixes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;See More&lt;/a&gt; about Semantic Versioning in npm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-package-from-npm"&gt;
  &lt;/a&gt;
  Remove Package from npm
&lt;/h2&gt;

&lt;p&gt;To Remove Your published npm package open the terminal to your directory and hit the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm unpublish &amp;lt;package&amp;gt;@&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Your public package will be removed from the npm registry.&lt;br&gt;
**References&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/myogeshchavan97/how-to-create-and-publish-an-npm-package-20ln"&gt;dev&lt;/a&gt;**&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build a Tailwind CSS tabs component</title>
      <author>Zolt√°n Sz≈ëgy√©nyi</author>
      <pubDate>Mon, 06 Dec 2021 11:08:46 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-tailwind-css-tabs-component-56o2</link>
      <guid>https://dev.to/themesberg/how-to-build-a-tailwind-css-tabs-component-56o2</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS for quite a while and I'd never go back to a CSS framework that doesn't use a utility-first approach.&lt;/p&gt;

&lt;p&gt;One disadvantage of Tailwind CSS compared to other frameworks like Bootstrap or Bulma is the lack of a set of components like buttons, dropdowns, alerts, and more.&lt;/p&gt;

&lt;p&gt;That's why I decided to start a tutorial series here on the DEV community where I show you how to build one of the most commonly used components.&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/how-to-build-a-tailwind-css-modal-component-31ko"&gt;modal component&lt;/a&gt; and today I'll show you how to build a Tailwind CSS tabs components.&lt;/p&gt;

&lt;p&gt;Here's how it will look in the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iMp5oMyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1ny6qxfajdho9prufy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMp5oMyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1ny6qxfajdho9prufy1.png" alt="Tailwind CSS tabs component" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-tabs-component"&gt;
  &lt;/a&gt;
  Tailwind CSS tabs component
&lt;/h2&gt;

&lt;p&gt;First of all we need to code the base HTML markup which can either be a nav component with &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags inside or use a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element with list items.&lt;/p&gt;

&lt;p&gt;We'll stick with the list variant so let's use the following markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice and simple, right? But now we need to start make it look pretty. Let's first design the whole list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="flex flex-wrap border-b border-gray-200"&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helps order the list items horizontally. Now we need to style the list items and the links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="flex flex-wrap border-b border-gray-200"&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" aria-current="page" class="inline-block bg-gray-100 text-blue-600 rounded-t-lg py-4 px-4 text-sm font-medium text-center active"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a class="inline-block text-gray-400 rounded-t-lg py-4 px-4 text-sm font-medium text-center cursor-not-allowed"&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pI0pNwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw9qcrc39m4ovs8sc4kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pI0pNwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw9qcrc39m4ovs8sc4kp.png" alt="Tailwind CSS tabs light mode" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should also create a dark mode style for this component, so let's start by adding the following classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="flex flex-wrap border-b border-gray-200 dark:border-gray-700"&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" aria-current="page" class="inline-block bg-gray-100 text-blue-600 rounded-t-lg py-4 px-4 text-sm font-medium text-center active dark:bg-gray-800 dark:text-blue-500"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-400  dark:hover:bg-gray-800 dark:hover:text-gray-300"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-400  dark:hover:bg-gray-800 dark:hover:text-gray-300"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a class="inline-block text-gray-400 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-500 cursor-not-allowed"&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to learn how to toggle &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark mode with Tailwind CSS&lt;/a&gt; check out the guide from Flowbite.&lt;/p&gt;

&lt;p&gt;If dark mode is actived the tabs component should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SfZaHk8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ugpi0m6f4yze1ag64wa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfZaHk8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ugpi0m6f4yze1ag64wa.png" alt="Tailwind CSS tabs dark mode" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-components"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS components
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/tabs/"&gt;tabs component&lt;/a&gt; is part of a larger open source component library based on Tailwind CSS called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZghNXO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58mew8r97buzk38sfyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZghNXO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58mew8r97buzk38sfyv.png" alt="Flowbite - Tailwind CSS component library" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you head over to the &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite documentation&lt;/a&gt; you'll see that there are a lot more variants and options for components such as the tabs.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS re:Invent 2021 recap by a DevTools Hero</title>
      <author>Gert Leenders</author>
      <pubDate>Mon, 06 Dec 2021 11:02:05 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-reinvent-2021-recap-by-a-devtools-hero-147e</link>
      <guid>https://dev.to/aws-heroes/aws-reinvent-2021-recap-by-a-devtools-hero-147e</guid>
      <description>&lt;p&gt;With another amazing re:Invent edition behind us, It's time for a little recap. This edition was also my first as an AWS Hero. Looking back, I must say AWS knows how to please its community members. This year AWS even gave us our own special AWS Hero Lounge! Kudos AWS for the overall support and pampering. It was crazy. &lt;/p&gt;

&lt;p&gt;Before I start my recap, I want to say that even with all the nasty Covid-19 restrictions, I really enjoyed this year re:Invent. Personally, I find it hard to 'virtually' attend conferences. Being at a conference in person,  feeling the vibes and atmosphere, is kind of a must for me.&lt;/p&gt;

&lt;p&gt;So here's my first piece of advice: if you feel comfortable with it, I would strongly recommend attending re:Invent &lt;strong&gt;in person&lt;/strong&gt;.  All the great sessions are just a tiny part of the conference's value. What makes attending re:Invent stand out for me are all the AWS experts hanging around. The technical knowledge and expertise of all the people you can talk to at the conference are mind-blowing. It's a great place to pick some brains üòõ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-wise"&gt;
  &lt;/a&gt;
  Content wise
&lt;/h2&gt;

&lt;p&gt;Before jumping into the list of the newly announced stuff I like the most. I must stress that such a list is very personal and heavily influenced by someone's background. Having a Developer background myself and a strong interest in DevOps and Security is reflected in my list. On top of that, the list also matches the services I primarily work with daily.&lt;/p&gt;

&lt;p&gt;All that said, here we go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-integration"&gt;
  &lt;/a&gt;
  Application Integration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/amazon-sqs-dead-letter-queue-management-experience-queues/"&gt;Amazon SQS Enhances Dead-letter Queue Management Experience For Standard Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-partial-batch-response-sqs-event-source/"&gt;AWS Lambda now supports partial batch response for SQS as an event source&lt;/a&gt; With this feature, when messages on an SQS queue fail to process, Lambda marks a batch of records in a message queue as partially successful and allows reprocessing of only the failed records.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#containers-compute-serverless"&gt;
  &lt;/a&gt;
  Containers / Compute / Serverless
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://beabetterdev.com/2021/11/21/aws-releases-lambda-function-urls-finally/"&gt;AWS Releases Lambda Function URLs finally...NOT&lt;/a&gt;. I guess it's still only a matter of time before this one gets out.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ecr-cache-repositories/"&gt;Amazon ECR announces pull through cache repositories&lt;/a&gt;. This new feature allows you to automatically sync images from publicly accessible registries. Yes, I was waiting on that one ;-)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-compute-optimizer-resource-efficiency-metrics/"&gt;AWS Compute Optimizer now offers resource efficiency metrics&lt;/a&gt;. AWS Compute Optimizer now helps you quickly identify and prioritize top optimization opportunities through two new sets of dashboard-level metrics: savings opportunity and performance improvement opportunity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-compute-optimizer-enhanced-infrastructure-metrics-ec2-instances/"&gt;AWS Compute Optimizer now offers enhanced infrastructure metrics, a new feature for EC2 recommendations&lt;/a&gt;. AWS Compute Optimizer now offers enhanced infrastructure metrics, a paid feature that when activated, enhances your Amazon EC2 instance and Auto Scaling group recommendations by capturing monthly or quarterly utilization patterns.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/amazon-dynamodb-standard-infrequent-access-table-class/"&gt;Amazon DynamoDB announces the new Amazon DynamoDB Standard-Infrequent Access table class, which helps you reduce your DynamoDB costs by up to 60 percent&lt;/a&gt; Another cool feature to help bringing those bills down effortless. üëå&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#developer-tools"&gt;
  &lt;/a&gt;
  Developer Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-cloud-development-kit-cdk-generally-available/"&gt;AWS Cloud Development Kit (AWS CDK) v2&lt;/a&gt; and  &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-construct-hub-availability/"&gt;Construct Hub&lt;/a&gt; are now generally available&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-amplify-studio/"&gt;Introducing AWS Amplify Studio&lt;/a&gt;: a visual development environment that offers frontend developers new features to accelerate UI development with minimal coding.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-sdk-swift-developer-preview/"&gt;AWS SDK for Swift (Developer Preview)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-sdk-kotlin-developer-preview/"&gt;AWS SDK for Kotlin (Developer Preview)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-sdk-rust-developer-preview/"&gt;AWS SDK for Rust (Developer Preview)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#management-amp-governance"&gt;
  &lt;/a&gt;
  Management &amp;amp; Governance
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-cloudwatch-metrics-insights-preview/"&gt;Introducing Amazon CloudWatch Metrics Insights&lt;/a&gt;. As a fast, flexible, SQL based query engine, Metrics Insights enables you to identify trends and patterns across millions of metrics in real time and helps you use these insights to reduce time to resolution.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-cloudwatch-rum-applications-client-side-performance/"&gt;Introducing Amazon CloudWatch RUM for monitoring applications‚Äô client-side performance&lt;/a&gt;. Amazon CloudWatch RUM is a real-user monitoring capability that helps you identify and debug issues in the client-side on web applications and enhance end user‚Äôs digital experience.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-cloudwatch-evidently-feature-experimentation-safer-launches/"&gt;Introducing Amazon CloudWatch Evidently for feature experimentation and safer launches&lt;/a&gt;. This is a new Amazon CloudWatch capability that makes it easy for developers to introduce experiments and feature management in their application code. CloudWatch Evidently may be used for two similar but distinct use-cases: implementing dark launches, also known as feature flags, and A/B testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/amazon-virtual-private-cloud-vpc-announces-ip-address-manager-ipam/"&gt;Amazon Virtual Private Cloud (VPC) announces IP Address Manager (IPAM) to help simplify IP address management on AWS&lt;/a&gt; Using IPAM, you can automate IP address assignment to VPCs, eliminating the need to use spreadsheet-based or homegrown IP planning applications, which can be hard to maintain and time-consuming. This automation helps remove delays in on-boarding new applications or growing existing applications, by enabling you to assign IP addresses to your VPCs in seconds. IPAM also automatically tracks critical IP address information, including its AWS account, Amazon VPC, and routing and security domain, eliminating the need to manually track or do bookkeeping for IP addresses.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-chatbot-management-resources-slack/"&gt;AWS Chatbot now supports management of AWS resources in Slack (Preview)&lt;/a&gt;. This feature allows you to use AWS Chatbot to manage AWS resources and remediate issues in AWS workloads by running AWS CLI commands from Slack channels.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-shield-advanced-application-layer-ddos-mitigation/"&gt;AWS Shield Advanced introduces automatic application-layer DDoS mitigation&lt;/a&gt;. AWS Shield Advanced now automatically protects web applications by blocking application layer (Layer 7) DDoS events with no manual intervention needed by you or the AWS Shield Response Team (SRT)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/amazon-vpc-network-access-analyzer/"&gt;Amazon Virtual Private Cloud (VPC) announces Network Access Analyzer to help you easily identify unintended network access&lt;/a&gt; Amazon VPC Network Access Analyzer is a new feature that enables you to identify unintended network access to your resources on AWS. Using Network Access Analyzer, you can verify whether network access for your Virtual Private Cloud (VPC) resources meets your security and compliance guidelines &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-inspector-continual-vulnerability-management/"&gt;AWS announces the new Amazon Inspector for continual vulnerability management&lt;/a&gt; This is a big one. In a nutshell the new Inspector provides:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Continual, automated assessment scans&lt;/strong&gt;‚Äîreplaces periodic, manual scanning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automated resource discovery&lt;/strong&gt; ‚Äì once enabled, the new Amazon Inspector automatically discovers all running Amazon EC2 instances and Amazon ECR repositories.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;New support for container-based workloads&lt;/strong&gt;‚Äîworkloads are now assessed on both EC2 and container infrastructure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integration with AWS Organizations‚Äî&lt;/strong&gt;allowing security and compliance teams to enable and take advantage of Amazon Inspector across all accounts in an organization.&lt;/li&gt;
&lt;li&gt;R*&lt;em&gt;emoval of the stand-alone Amazon Inspector scanning agent&lt;/em&gt;*‚Äîassessment scanning now uses the widely deployed AWS Systems Manager agent, eliminating the need for a separate agent installation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improved risk scoring&lt;/strong&gt; ‚Äîa highly contextualized risk score is now generated for each finding making it easier to identify the most critical vulnerabilities to address as a priority.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integration with Amazon EventBridge&lt;/strong&gt; ‚Äîintegrate with event management and workflow systems such as Splunk and Jira. And, you can trigger automated remediation.&lt;/li&gt;
&lt;li&gt;Integration with AWS Security Hub&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-s3-glacier-instant-retrieval-storage-class/"&gt;Announcing the new Amazon S3 Glacier Instant Retrieval storage class.  The lowest cost archive storage with milliseconds retrieval.&lt;/a&gt;
This new Glacier archive storage class delivers the lowest cost storage for long-lived data that is rarely accessed and requires milliseconds retrieval. 
In fact, in combination with the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/s3-intelligent-tiering-archive-instant-access-tier/"&gt;Amazon S3 Intelligent-Tiering storage class this automatically save up to 68%&lt;/a&gt; for data not accessed in the last 90 days. Really nice üí™&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-s3-object-ownership-simplify-access-management-data-s3/"&gt;Amazon S3 Object Ownership can now disable access control lists to simplify access management for data in S3&lt;/a&gt;. This new S3 Object Ownership setting, &lt;em&gt;'Bucket owner enforced'&lt;/em&gt;, disables access control lists (ACLs), simplifying access management for data stored in S3. When you apply this bucket-level setting, every object in an S3 bucket is owned by the bucket owner, and ACLs are no longer used to grant permissions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-backup-amazon-s3-backup/"&gt;Announcing preview of AWS Backup for Amazon S3&lt;/a&gt;. This allows you to create a single policy in AWS Backup to automate the protection of application data stored in S3 alone.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-s3-event-notifications-amazon-eventbridge-build-advanced-serverless-applications/"&gt;Amazon S3 Event Notifications with Amazon EventBridge help you build advanced serverless applications faster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeah, I'm sure I missed at least a few announces üòâ&lt;/p&gt;

&lt;p&gt;Enjoy an until next time!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>devops</category>
    </item>
    <item>
      <title>Postman/Newman - Test my Application</title>
      <author>Jagan Karan</author>
      <pubDate>Mon, 06 Dec 2021 10:55:34 +0000</pubDate>
      <link>https://dev.to/jagankarunakaran/postmannewman-test-my-application-4il9</link>
      <guid>https://dev.to/jagankarunakaran/postmannewman-test-my-application-4il9</guid>
      <description>&lt;p&gt;Functional and Regression testing of the application by a developer, will always enhance the quality of the code and also ensuring that the existing features are not broken.&lt;/p&gt;

&lt;p&gt;As a developer working on the RESTFUL services, the application extensively used to test REST API endpoints is &lt;strong&gt;Postman&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Postman&lt;/strong&gt; is a standalone software testing API (Application Programming Interface) platform to build, test, design, modify, and document APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well-documented Postman collection will always help any developer to use the application APIs in various environments on the go. Other than documenting the APIs in postman it can also be used extensively like designing the test cases and validating the feature or flow of the application on a single run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postman-collections"&gt;
  &lt;/a&gt;
  Postman Collections:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the Postman application, click the &lt;code&gt;new&lt;/code&gt; option and select the &lt;code&gt;Collection&lt;/code&gt; option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0tKA0_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pycqw5azbqb1van8hmv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0tKA0_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pycqw5azbqb1van8hmv.png" alt="Create Collection" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the collection is created, we will be able to add various scripts, environment variables to be used to the collection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pre-Request Scripts:&lt;/strong&gt; This option allows you to run the script before making the request. For instance, you can set the environment variables before making the request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Variables:&lt;/strong&gt; This option allows the addition of the environmental values to be used in the collection.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lH8U-Z1_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9n04fcx12n0f7c5ja3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lH8U-Z1_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9n04fcx12n0f7c5ja3v.png" alt="Collection Options" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New folder can be created inside the parent collection for each flow, which includes all the requests needed to complete the particular flow. For instance, Create student flow can have requests like &lt;code&gt;create student endpoint&lt;/code&gt; and &lt;code&gt;get student endpoint&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eMzOYsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgz6i6lhdqr5lcqmp05q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eMzOYsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgz6i6lhdqr5lcqmp05q.png" alt="Individual use case" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both the requests inside the collection will have the required test cases written inside the test tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDXugkDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dclnmg6oml8rt27j8ltr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDXugkDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dclnmg6oml8rt27j8ltr.png" alt="Test cases" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This test should have all the test cases designed by the developer which is expected for an endpoint to be returned, which ensures the endpoints are working as expected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n0Ez0Wcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iroklq9k68det90zfwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0Ez0Wcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iroklq9k68det90zfwb.png" alt="Test results" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#newman-tool"&gt;
  &lt;/a&gt;
  Newman tool:
&lt;/h3&gt;

&lt;p&gt;Newman is a command-line collection runner for Postman. It allows you to effortlessly run and test a Postman collection directly from the command line.&lt;/p&gt;

&lt;p&gt;Once the postman collection is created with all the flows needed for the application, a developer can leverage `Newman's tool to run the postman collection and validate the test cases.&lt;/p&gt;

&lt;p&gt;Newman provides out of box reporting formats which include `cli, json, HTML, JUnit.&lt;/p&gt;

&lt;p&gt;Newman can also be integrated into the CI/CD pipelines to automate the validation of the application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-newman"&gt;
  &lt;/a&gt;
  Installing Newman:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nodeJs&lt;/code&gt; has to be installed in your system based on your distribution.&lt;/p&gt;

&lt;p&gt;Run the following command to install the npm package of newman globally.&lt;br&gt;
&lt;code&gt;npm install -g newman&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference-application"&gt;
  &lt;/a&gt;
  Reference Application:
&lt;/h3&gt;

&lt;p&gt;Source code for the sample spring application with CRUD operations and postman collection with the test cases can be found in the following link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/JaganKaran13/postman-runner-and-testing"&gt;Postman Runner and Testing Github&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-and-test-the-application"&gt;
  &lt;/a&gt;
  Run and Test the application:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Clone the above git repo and run the java application on your preferred IDE.&lt;/li&gt;
&lt;li&gt;Import the collection to the postman and run the collection using a runner.&lt;/li&gt;
&lt;li&gt;To run in CLI, use the following command inside the postman directory through the terminal.
&lt;code&gt;newman run file.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To run the test and display/store the result, use the following command.
&lt;code&gt;newman run file.json -r cli&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zWn2-Er--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbgyb92wnomubyihzr25.png" alt="Cli Response" width="840" height="975"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/newman"&gt;Newman NPM&lt;/a&gt;&lt;br&gt;
&lt;a href="https://learning.postman.com/docs/running-collections/intro-to-collection-runs/"&gt;Postman Runner Collection&lt;/a&gt;&lt;br&gt;
&lt;a href="https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/"&gt;Postman Newman integration&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>How to create custom reusable ESLint, TypeScript, Prettier config for React apps</title>
      <author>Katsiaryna (Kate) Lupachova</author>
      <pubDate>Mon, 06 Dec 2021 10:53:32 +0000</pubDate>
      <link>https://dev.to/ramonak/how-to-create-custom-reusable-eslint-typescript-prettier-config-for-react-apps-5605</link>
      <guid>https://dev.to/ramonak/how-to-create-custom-reusable-eslint-typescript-prettier-config-for-react-apps-5605</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://ramonak.io/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;There are many tools that help developers eliminate possible errors and bugs, and in the end, ship more robust and maintainable code. Among them, the most commonly used static code analysis tool is &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another trendy tool is &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt;. It makes your code look beautiful to developers' eyes (yours included).&lt;/p&gt;

&lt;p&gt;And let's not forget about &lt;strong&gt;TypeScript&lt;/strong&gt;! It's a static type checker for JavaScript, and it improves developer experience by a ton.&lt;/p&gt;

&lt;p&gt;Plus, we will publish our ESLint and Prettier config as an &lt;strong&gt;NPM package&lt;/strong&gt;, thus making it reusable and easily installable in any React project (well, generally in any Javascript project, but it will contain react.js / React Native specific rules).&lt;/p&gt;

&lt;p&gt;Usually, when I start a new React project, I add all the above-mentioned tools manually, one by one. Finally, I found a time to create my custom config package based on the most typical setup on projects that I'm working/worked on. This blog post is a walkthrough of how I did it.&lt;/p&gt;

&lt;p&gt;Also, the blog post will cover how to install &lt;a href="https://typicode.github.io/husky/#/"&gt;Husky&lt;/a&gt; and &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;. Basically, it will ensure that we don't cheat and follow all the necessary rules.&lt;/p&gt;

&lt;p&gt;So, let's start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-nodejs-module"&gt;
  &lt;/a&gt;
  1. Create a Node.js module
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a project with a basic package.json file.&lt;/p&gt;

&lt;p&gt;Make sure that the module name begins with &lt;em&gt;eslint-config-&lt;/em&gt;. I named mine as &lt;em&gt;eslint-config-ramonak&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//package.json&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-config-ramonak&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-add-eslint"&gt;
  &lt;/a&gt;
  2. Add ESLint
&lt;/h2&gt;

&lt;p&gt;The easiest way to add ESLint, necessary dependencies, and basic configuration, is by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be prompted to answer different questions. Based on my typical type of projects, I answered them like that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ilmeOOgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5543gj3xm1gu3sb0qflr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ilmeOOgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5543gj3xm1gu3sb0qflr.png" alt="eslint" width="880" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will install &lt;code&gt;@typescript-eslint/eslint-plugin&lt;/code&gt;, &lt;code&gt;@typescript-eslint/parser&lt;/code&gt;, &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;eslint-plugin-react&lt;/code&gt; packages as dev dependencies in the project (in your specific use case packages might be different, depending on your answers). And also, it will add &lt;em&gt;.eslintrc&lt;/em&gt; file with the basic config.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-prettier"&gt;
  &lt;/a&gt;
  3. Add Prettier
&lt;/h2&gt;

&lt;p&gt;Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; prettier eslint-config-prettier eslint-plugin-prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prettier&lt;/li&gt;
&lt;li&gt;eslint-config-prettier - to turn off all rules that are unnecessary or might conflict with Prettier&lt;/li&gt;
&lt;li&gt;eslint-plugin-prettier - runs Prettier as an ESLint rule and reports differences as individual ESLint issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;code&gt;plugin:prettier/recommended&lt;/code&gt; as the last extension in your &lt;code&gt;.eslintrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;///other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;plugins&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"plugin:prettier/recommended"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the info, it is short for:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier/prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"arrow-body-style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefer-arrow-callback"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add our custom prettier options.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As this blog post's final goal is to create an NPM package, I'll add a prettier config directly into the eslint config without making a separate &lt;em&gt;.prettierrc&lt;/em&gt; file. But this might conflict with text editor extensions (like prettier-vscode, for example), as they read directly from &lt;em&gt;.prettierrc&lt;/em&gt; file. Possible &lt;strong&gt;solutions&lt;/strong&gt; might be:&lt;/p&gt;

&lt;p&gt;1.Create &lt;em&gt;.prettierrc&lt;/em&gt; file in your project and copy the configuration from &lt;em&gt;.eslintrc&lt;/em&gt; file there.&lt;/p&gt;

&lt;p&gt;2.Uninstall (if already installed) a prettier extension and config your text editor to use ESLint extension only for code formatting. More on that &lt;a href="#9-integration-with-vscode"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//.eslintrc&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier/prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can customize your formatting preferences whatever you like. The list of all possible options is &lt;a href="https://prettier.io/docs/en/options.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-add-additional-eslint-plugins-optional"&gt;
  &lt;/a&gt;
  4. Add additional ESLint plugins (optional)
&lt;/h2&gt;

&lt;p&gt;There are &lt;a href="https://www.npmjs.com/search?q=keywords:eslint-plugin"&gt;numerous ESLint plugins&lt;/a&gt; available for you to add to your project.&lt;/p&gt;

&lt;p&gt;I'm going to add &lt;a href="https://www.npmjs.com/package/eslint-plugin-react-hooks"&gt;eslint-plugin-react-hooks&lt;/a&gt;. Also I like all imports to be nicely sorted. Fot that let's add &lt;a href="https://www.npmjs.com/package/eslint-plugin-simple-import-sort"&gt;eslint-plugin-simple-import-sort&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; eslint-plugin-react-hooks eslint-plugin-simple-import-sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then update .eslintrc file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"plugin:react-hooks/recommended"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"simple-import-sort"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;omitted&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"simple-import-sort/imports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"simple-import-sort/exports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;rules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;omitted&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to add any custom rules based on your specific requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-create-indexjs-file"&gt;
  &lt;/a&gt;
  5. Create index.js file
&lt;/h2&gt;

&lt;p&gt;We need to add an entry point to our package. So create &lt;code&gt;index.js&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eslintrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./.eslintrc.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eslintrc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-declare-peer-dependencies"&gt;
  &lt;/a&gt;
  6. Declare peer dependencies
&lt;/h2&gt;

&lt;p&gt;As it is stated in the official &lt;a href="https://eslint.org/docs/developer-guide/shareable-configs#publishing-a-shareable-config"&gt;ESLint docs&lt;/a&gt;, you should declare your dependency on ESLint in &lt;code&gt;package.json&lt;/code&gt; using the &lt;code&gt;peerDependencies&lt;/code&gt; field. So just copy all dev dependencies in the &lt;code&gt;package.json&lt;/code&gt; file to &lt;code&gt;peerDependencies&lt;/code&gt; field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@typescript-eslint/eslint-plugin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-config-prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.27.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-react-hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-simple-import-sort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.5.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-test"&gt;
  &lt;/a&gt;
  7. Test
&lt;/h2&gt;

&lt;p&gt;Probably it's not a bad idea to test the ESLint config locally before sharing it with the world.&lt;/p&gt;

&lt;p&gt;Link your eslint-config module globally by running the following command at the root level of your eslint-config folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in the project where you'd like to test your eslint-config run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;link&lt;/span&gt; &amp;lt;name of your eslint-config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, in my case I run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;link &lt;/span&gt;eslint-config-ramonak
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that you won't see any changes in the &lt;code&gt;packages.json&lt;/code&gt; file after running that command. But your eslint-config will be added into &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Additionally, you need to manually install all peer dependencies (that are not present in your project) from your eslint-config package.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-simple-import-sort prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to tell your project to use your custom eslint-config. For that,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;package.json&lt;/code&gt; add or edit (if already exists) &lt;code&gt;eslintConfig&lt;/code&gt; field:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"ramonak"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;eslint-config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;OR create &lt;code&gt;.eslintrc&lt;/code&gt; file with the following content:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ramonak"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;eslint-config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run linter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx eslint &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you'd like fixable errors to be fixed automatically, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx eslint &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--fix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-publish"&gt;
  &lt;/a&gt;
  8. Publish
&lt;/h2&gt;

&lt;p&gt;You need an NPM account to be able to publish your eslint-config package. If you don't have it, you can sign up &lt;a href="https://www.npmjs.com/signup"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are ready to publish, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-integration-with-vscode"&gt;
  &lt;/a&gt;
  9. Integration with VSCode
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Uninstall or disable any previously installed prettier extensions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install (if haven't already) &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint extension&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit VSCode settings by pressing CMD + SHIFT + P on Mac (or Ctrl + SHIFT + P on Windows), type &lt;code&gt;settings&lt;/code&gt; and choose &lt;code&gt;Preferences: Open Settings (JSON)&lt;/code&gt;. Edit or add the following settings:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;save&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;eslint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;icon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;bottom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;toolbar&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"eslint.alwaysShowStatus"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;turns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;providers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;including&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ESLint&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove &lt;code&gt;"editor.defaultFormatter": "esbenp.prettier-vscode"&lt;/code&gt; line if you had it before.&lt;/p&gt;

&lt;p&gt;Now all fixable ESLint (including Prettier formatting options) errors will be fixed automatically on a file save.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-bonus-add-husky-and-lintstaged"&gt;
  &lt;/a&gt;
  10. BONUS: Add Husky and lint-staged
&lt;/h2&gt;

&lt;p&gt;To enforce linting rules compliance, let's add &lt;strong&gt;Husky&lt;/strong&gt; and &lt;strong&gt;lint-staged&lt;/strong&gt;. These tools will automate the running of the linting scripts before each commit. If there are any lint errors, the code won't be committed. And lint-staged will help save our precious time as it will make run the lint script only for staged (e.g., files that we updated) and not on the whole project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install lint-staged and husky by running just one command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx mrm@2 lint-staged
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update config in &lt;code&gt;package.json&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;scripts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;omitted&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint:fix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint . --fix"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;linting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;script&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.{js,jsx,ts,tsx}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint:fix"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;linting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;JS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;TypeScript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, whenever you try to commit any JavaScript or TypeScipt files, the linting script will run, and if there are any unresolved errors, these files won't be committed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you want to add ESLint, TypeScript, and Prettier config into your project without any additional tooling, just follow steps 2 and 3.&lt;/p&gt;

&lt;p&gt;If your is goal is to add ESLint, TypeScript, and Prettier with Husky and lint-staged, use steps 2, 3, and 10.&lt;/p&gt;

&lt;p&gt;And you are very welcome to use &lt;a href="https://www.npmjs.com/package/eslint-config-ramonak"&gt;my custom eslint-config&lt;/a&gt; and report any issues or make pull requests.&lt;/p&gt;

&lt;p&gt;P.S. Development of my custom eslint-config inspired by &lt;a href="https://github.com/wesbos/eslint-config-wesbos"&gt;eslint-config-wesbos&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>How to run shell scripts in Java</title>
      <author>coder4life</author>
      <pubDate>Mon, 06 Dec 2021 10:49:43 +0000</pubDate>
      <link>https://dev.to/coder4_life/how-to-run-shell-scripts-in-java-4cbd</link>
      <guid>https://dev.to/coder4_life/how-to-run-shell-scripts-in-java-4cbd</guid>
      <description>&lt;p&gt;Running shell scripts from inside Java code using ProcessBuilder in a thread. This solution works on Windows (.bat file) and Unix (.sh file) - running example in both environments in video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O_kyBrXriDw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>linux</category>
    </item>
    <item>
      <title>How to become an App Developer in 2022</title>
      <author>javinpaul</author>
      <pubDate>Mon, 06 Dec 2021 10:49:33 +0000</pubDate>
      <link>https://dev.to/javinpaul/how-to-become-an-app-developer-in-2022-56o1</link>
      <guid>https://dev.to/javinpaul/how-to-become-an-app-developer-in-2022-56o1</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.educative.io/courses/beginning-flutter-android-mobile-app-development?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tax5qdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D620/v2api/collection/6100126873419776/6055343571337216/image/4657441726791680" alt="Beginning Flutter: Android Mobile App Development - Learn Interactively" width="620" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you want to become an app developer in 2022 and want to learn Mobile application development and you wondering how to start, then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared &lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;essential skills for frontend developers&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;server side Java developers&lt;/a&gt; and here I will show you different technologies and combination of them you can learn to become an App developer. &lt;/p&gt;

&lt;p&gt;Yes you heard it right, its not just Android and iOS but you can also learn new tools and frameworks like React Native and Flutter to develop native looking Mobile apps in 2022. &lt;/p&gt;

&lt;p&gt;Mobile app development is a lucrative field for programmers as it has all kinds of opportunities, from freelancing to working at large companies and launching your own apps like Angry Bird, Flappy Bird, or Pokemon Go and becoming an App millionaire. &lt;/p&gt;

&lt;p&gt;In this article, I am going to share &lt;strong&gt;10 technologies you can learn to become a mobile application developer&lt;/strong&gt; or someone who wants to improve as a mobile application developer for &lt;a href="https://javarevisited.blogspot.com/2017/12/top-5-android-online-training-courses-for-Java-developers.html"&gt;Android&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2019/01/top-5-ios-developer-course-to-learn-ios.html"&gt;iOS&lt;/a&gt; platforms can learn in 2022. &lt;/p&gt;

&lt;p&gt;This list includes things like &lt;a href="https://medium.com/javarevisited/top-5-frameworks-to-create-cross-platform-android-and-ios-apps-in-2020-d02edf3d01f1"&gt;framework&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-5-programming-languages-for-mobile-app-development-in-2021-19a1778195b8"&gt;programming languages&lt;/a&gt;, and platforms, almost everything a mobile developer needs.&lt;/p&gt;

&lt;p&gt;In particular, I have included cross-platform mobile development frameworks like &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-online-training-courses-to-learn-flutter.html"&gt;Flutter&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2018/02/5-react-native-courses-to-learn-mobile-development-using-JavaScript.html"&gt;React Native&lt;/a&gt;, programming languages like &lt;a href="https://hackernoon.com/top-5-kotlin-programming-courses-for-java-and-android-programmers-49e842b8af1a"&gt;Kotlin&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-learn-ios-12-swift-in-2019-a35ae1be7b2b"&gt;Swift&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2020/01/top-5-courses-to-learn-dart-programming.html"&gt;Dart&lt;/a&gt;, and platforms like Android and iOS, which are essential for any mobile app developer in 2022.&lt;/p&gt;

&lt;p&gt;Though, one of the most important things to note here is that you don't need to learn all the things I have mentioned here; in fact, all of them are presented here for informational purposes so that you can choose which technologies and platforms are suitable for you.&lt;/p&gt;

&lt;p&gt;For example, if you are interested in developing native iOS applications for iPhone and iPad (they make most of the money on mobile apps) then learning &lt;a href="https://www.java67.com/2019/03/5-free-courses-to-learn-swift.html"&gt;Swift 5&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/my-favorite-free-courses-to-learn-ios-app-development-f172e7d3ba5d"&gt;iOS&lt;/a&gt; is a good idea, but if you are interested in the Android platform (they have the highest reach) then learning Kotlin and Android 10 is a good option.&lt;/p&gt;

&lt;p&gt;And, if you are interested, like me, in developing cross-platform native mobile apps (both Android and iOS app from a single codebase), then you should learn &lt;a href="https://dev.to/javinpaul/top-5-courses-to-learn-flutter-and-dart-in-2020-3bkm"&gt;Flutter&lt;/a&gt; or &lt;a href="https://hackernoon.com/top-5-react-native-courses-for-mobile-application-developers-b82febdf8a46"&gt;React Native&lt;/a&gt;, two of the leading frameworks for building a native mobile application. &lt;/p&gt;

&lt;p&gt;Whatever you choose, I have also provided links to some excellent resources which can help you to learn these technologies.&lt;/p&gt;

&lt;p&gt;Btw, this is in continuation of my articles about essential things for developers earlier I have shared about &lt;a href="https://javarevisited.blogspot.com/2020/01/10-things-web-developers-should-learn.html"&gt;10 Things Web Developers Can Learn in 2022&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2017/12/10-things-java-programmers-should-learn.html"&gt;essential things for Java developers&lt;/a&gt;, if you haven't read them already, you can read them now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/javinpaul/12-tools-web-developers-can-learn-in-2022-3ia9"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_WAH3mW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/social_previews/article/916161.png" alt="12 Tools Web Developers can Learn in 2022 - DEV Community" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-essential-skills-app-developers-can-learn-in-2022"&gt;
  &lt;/a&gt;
  10 Essential Skills App Developers can Learn in 2022
&lt;/h2&gt;

&lt;p&gt;Without wasting any more of your time, here is my list of some of the best frameworks, programming languages, and libraries you can learn to get into mobile application development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-react-native"&gt;
  &lt;/a&gt;
  1. React Native
&lt;/h3&gt;

&lt;p&gt;If there a best library or framework you can check out for developing native cross-platform mobile apps, then they React Native. &lt;/p&gt;

&lt;p&gt;It uses &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html"&gt;React&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2018/06/top-10-courses-to-learn-javascript-in.html"&gt;JavaScript&lt;/a&gt; for producing high quality native mobile apps.&lt;/p&gt;

&lt;p&gt;It's the right choice for all web developers who wants to become a mobile app developer and already familiar with technologies like JavaScript and React. If you are one of them, then I suggest you learn React Native in 2022.&lt;/p&gt;

&lt;p&gt;Also, there are a lot of resources to learn React Native, both free and paid, but if you ask my recommendation, I highly recommend you to check out Stephen Grider's &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-react-native-and-redux-course%2F"&gt;&lt;strong&gt;The Complete React Native + Hooks&lt;/strong&gt;&lt;/a&gt; course, one of my favorite resources to learn React Native online.&lt;/p&gt;

&lt;p&gt;Stephen is one of the best instructors on Udemy and his teaching style is really great.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-react-native-and-redux-course%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvkHod8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-NsHvgLLFCsE/XhQu8NE5uZI/AAAAAAAAcb0/qh6RPuhniMstOWRXAuuWAGgc-jG2lqGkwCLcBGAsYHQ/w404-h230/React%252BNative%252BPractical%252BGuide%252BPreview%252BUdemy%252Bbest%252Bcourse.png" alt="best course to learn React Native" width="401" height="230"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-flutter"&gt;
  &lt;/a&gt;
  2. Flutter
&lt;/h3&gt;

&lt;p&gt;This is another excellent framework for developing cross-platform native mobile applications in 2022. Like &lt;a href="https://www.java67.com/2019/12/top-5-courses-to-learn-go-or-golang.html"&gt;Golang&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-tensorflow-and-machine-learning-courses-online-programmers.html"&gt;TensorFlow&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/04/10-free-angular-and-react-courses-for.html"&gt;Angular&lt;/a&gt;, Flutter is also from Google, which uses Dart (another programming language from Google) and provides SDK for developing a cross-platform native mobile application.&lt;/p&gt;

&lt;p&gt;It's always been challenging to release your app to different platforms like Android, iOS, and Windows Mobile, as you need to maintain a separate codebase. &lt;/p&gt;

&lt;p&gt;Flutter solves that problem by allowing you to create mobile apps for both iOS and Android devices using the same codebase.&lt;/p&gt;

&lt;p&gt;Flutter has seen a lot of growth in the last 2 years, and it's now the #1 framework for developing native mobile apps. &lt;/p&gt;

&lt;p&gt;If you have already decided to learn Flutter and looking for a resource, then I suggest you check out this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-flutter-dart-to-build-ios-android-apps%2F"&gt;&lt;strong&gt;Learn Flutter and Dart MasterClass&lt;/strong&gt;&lt;/a&gt; by Maximilian of Acadmind on Udemy, one of my favorite courses to learn Flutter in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-flutter-dart-to-build-ios-android-apps%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HIt6qJZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-PGyQD_7H928/XhQ61AkPqNI/AAAAAAAAcdI/BV4UMYldKecxrcXsBofz5LznVcrG-iaAQCLcBGAsYHQ/w487-h268/undraw_mobile_images_rc0q.png" alt="10 Things you can learn to become app developer " width="487" height="268"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-kotlin"&gt;
  &lt;/a&gt;
  3. Kotlin
&lt;/h3&gt;

&lt;p&gt;Kotlin is a general-purpose programming language from JetBrains, the company behind tools like &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-intellij-idea-for-beginners-and-experienced-java-programmers-2e9aa9bb0c05"&gt;IntelliJIDEA&lt;/a&gt;, Reshaper, and PyCharm. If you don't know, &lt;a href="https://javarevisited.blogspot.com/2018/02/top-3-jvm-languages-java-programmer-learn.html"&gt;Kotlin&lt;/a&gt; is the official programming language for developing Android applications as announced by Google a couple of years ago.&lt;/p&gt;

&lt;p&gt;It's a beautiful, JVM-based programming language and compatible with Java, another popular language for developing Android applications.&lt;/p&gt;

&lt;p&gt;If you are serious about developing mobile apps for the Android platform, the world's most popular mobile platform, then you should learn Kotlin. &lt;/p&gt;

&lt;p&gt;If you need a resource, check out this &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fkotlin-fundamentals"&gt;&lt;strong&gt;Kotlin Fundamentals&lt;/strong&gt;&lt;/a&gt; course from Pluralsight.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fkotlin-fundamentals"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbzWvCq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-VwcyDPjjKQ4/XhQvCqN_9II/AAAAAAAAcb4/fOLSUNt6WdMPYz1wLBLqNFAfPX04vjUlwCLcBGAsYHQ/s320/Kotlin%252Bprogramming%252Blanguage.png" alt="best course to learn Kotlin" width="320" height="213"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-swift-51"&gt;
  &lt;/a&gt;
  4. Swift 5.1
&lt;/h3&gt;

&lt;p&gt;Swift is another programming language from Apple which you can use to develop mobile applications for &lt;a href="https://javarevisited.blogspot.com/2018/11/5-free-ios-app-development-courses-for.html"&gt;iOS&lt;/a&gt; (iPhone and iPad), macOS (MacBook Prob), watchOS (Apple Watch), tvOS (Apple TV), and beyond. &lt;/p&gt;

&lt;p&gt;It's a simple, elegant, and powerful programming language, full of modern features the developer loves.&lt;/p&gt;

&lt;p&gt;Swift allows you to write safe code without compromising speed and performance. If you are serious about developing mobile applications for Apple products like iPhone, iPad, and MacBook Pro, then you should learn Swift 5.1 in 2022. Swift 5.1 also makes it easier to create and share a binary framework with others.&lt;/p&gt;

&lt;p&gt;If you need a resource, I recommend you to check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fios-13-app-development-bootcamp%2F"&gt;iOS and Swift - The Complete iOS App Development Bootcamp&lt;/a&gt;&lt;/strong&gt; course from Angela Yu, another great and practical instructor on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fios-13-app-development-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0FK54Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-WLCo57HS-zs/XhQvNhN5yMI/AAAAAAAAccE/y_eC-Hrxxf4wHMNIJO9VCiG2f0Dlu_5LQCLcBGAsYHQ/s400/iOS%252B13%252Band%252BSwift%252B5%252B-%252BThe%252BComplete%252BiOS%252BApp%252BDevelopment%252BBootcamp%252Bpreview%252BUdemy%252Bbest%252Bcourse.png" alt="best course to learn Swift programming" width="400" height="232"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-native-script"&gt;
  &lt;/a&gt;
  5. Native Script
&lt;/h3&gt;

&lt;p&gt;If somehow you didn't like &lt;a href="https://medium.com/javarevisited/my-favorite-free-react-native-courses-for-beginners-in-2020-4629f5274eb6"&gt;React Native&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/my-favorite-flutter-and-dart-programming-courses-for-beginners-9e8355710d78"&gt;Flutter&lt;/a&gt; and looking for alternatives, then you can also check out Native Script. NativeScript is a free and open-source framework to develop a mobile application for both Apple iOS and Google's Android platform.&lt;/p&gt;

&lt;p&gt;It allows you to build native mobile apps in both &lt;a href="https://javarevisited.blogspot.com/2018/07/top-5-courses-to-learn-typescript.html"&gt;TypeScript&lt;/a&gt; and &lt;a href="https://hackernoon.com/10-websites-to-learn-javascript-for-beginners-31e13bbdbb5c"&gt;JavaScript&lt;/a&gt; and using &lt;a href="https://medium.com/javarevisited/10-courses-to-learn-angular-for-web-development-6da1bd2856dc"&gt;Angular&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-learn-vue-js-in-2021-249e66b60646"&gt;Vuejs&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you are a frontend developer and already know frameworks like Angular or Vuejs, then Native Script can be the right choice for you.&lt;/p&gt;

&lt;p&gt;NativeScript features deep integration with both Angular and Vuejs and allows you to write code on any language, which translates into JavaScript like TypeScript or CoffeeScript. &lt;/p&gt;

&lt;p&gt;If you need resources, I suggest you check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fnativescript-angular-build-native-ios-android-web-apps%2F"&gt;Native Script + Angular: Build Native iOS and Android Apps&lt;/a&gt;&lt;/strong&gt; course by Maximilian Schwarzmuller on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/javinpaul/10-things-every-software-developer-should-know-39pe"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vruu4bAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ECMDnJpxQZQ/XhQvfXR5VwI/AAAAAAAAccU/-23OtTCuLRA8jZpVnUuAUuoh3jOJ4RTygCLcBGAsYHQ/s400/Learn%252BNativeScript%252Bbest%252Bcourses.jpeg" alt="best course to learn Native Script" width="400" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-android-10"&gt;
  &lt;/a&gt;
  6. Android 10
&lt;/h3&gt;

&lt;p&gt;This is the latest version of the &lt;a href="https://medium.com/hackernoon/top-5-courses-to-learn-android-for-java-programmers-667e03d995b4"&gt;Android platform&lt;/a&gt;. It was released in September last year, and unlike the previous Android version, it doesn't have any sweet names like KitKat, Oreo, or Lollipop.&lt;/p&gt;

&lt;p&gt;If you are interested in the Android platform or already an Android developer, you can learn Android 10 to learn new features like Dark Themes, Smart Reply, Gesture navigation, 5G Networks, Enhanced location, and privacy tools, etc.&lt;/p&gt;

&lt;p&gt;You can also optimize your apps for foldable and other large-screen devices. &lt;/p&gt;

&lt;p&gt;If you are an Android developer or want to learn Android in 2022, I suggest you learn Android 10, the latest version of Android OS, and if you need resources, I recommend &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-android-n-developer-course%2F"&gt;&lt;strong&gt;Android MsterClass&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-android-n-developer-course%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MBm2agx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://downloadfreecourse.com/uploads/images/2020/webp/image_750x_5ec105c052127.webp" alt="best course to learn Android" width="750" height="422"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-ios"&gt;
  &lt;/a&gt;
  7. iOS
&lt;/h3&gt;

&lt;p&gt;This is the latest release of the popular iOS platform, which powers the iPhone and iPad, two of the most powerful devices of humankind. &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-learn-ios-12-swift-in-2019-a35ae1be7b2b"&gt;iOS 15&lt;/a&gt;, is the latest iOS release. &lt;/p&gt;

&lt;p&gt;It also comes with exciting features developers have long been asking for. For example, with the iOS 15 SDK, your app can take advantage of Dark Mode, Focus and notifications, SwiftUI, UIKit, Keyboard layout guides, Core Location UI, Accessibility, Augmented Reality and more&lt;/p&gt;

&lt;p&gt;If you are an iOS developer or want to become an iOS developer in 2022, I suggest you learn iOS 15, and if you need resources, check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fios-13-app-development-bootcamp%2F"&gt;iOS MasterClass&lt;/a&gt;&lt;/strong&gt; from Angela Yu on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2019/01/top-5-ios-developer-course-to-learn-ios.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwmvSQrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-b0mwXg2R43g/XhQ7bq1tC7I/AAAAAAAAcdQ/F0vJwQRAhN8hvS1I5ySAYH6Y0AiDhHlCQCLcBGAsYHQ/s400/OS%252B12%252Band%252BSwift%252B-%252BThe%252BComplete%252BiOS%252BApp%252BDevelopment%252BBootcamp%252BUdemy%252Bcourse.png" alt="best course to learn iOS" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-ionic"&gt;
  &lt;/a&gt;
  8. Ionic
&lt;/h3&gt;

&lt;p&gt;This is another framework for developing hybrid mobile applications using &lt;a href="https://medium.com/javarevisited/10-best-online-courses-to-learn-javascript-in-2020-af5ed0801645"&gt;JavaScript&lt;/a&gt;. Ionic also allows you to build cross-platform mobile apps, which means you can create an application for any platform using one codebase.&lt;/p&gt;

&lt;p&gt;Ionic Framework is free and open-source and provides a portable UI toolkit for developing high-quality cross-platforms apps for native iOS, Android, and the web- all from the single codebase. It also has an Ionic React that leverages React for building hybrid mobile apps.&lt;/p&gt;

&lt;p&gt;If you want to learn Ionic in 2022, then I suggest you check out this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fionic-2-the-practical-guide-to-building-ios-android-apps%2F"&gt;&lt;strong&gt;Ionic 4 MasterClass&lt;/strong&gt;&lt;/a&gt; course on Udemy. &lt;/p&gt;

&lt;p&gt;It's created by none other than Maximilian Schwarzmuller, one of the best instructors on Udemy and Youtube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/javinpaul/10-frameworks-java-and-web-developers-can-learn-in-2019-17ke"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09uCl76a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-wVhB2e3yli0/XhQ7vj2EDeI/AAAAAAAAcdY/qVckl6vwqyE9Q-u_AY0NbWDBPIYlstzBgCLcBGAsYHQ/s400/ionic%252Bframework%252Bfor%252Bcrossplatform%252Bnative%252BiOS%252Band%252BAndroid%252BApps.png" alt="best course to learn Ionic Framework" width="400" height="210"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-dart"&gt;
  &lt;/a&gt;
  9. Dart
&lt;/h3&gt;

&lt;p&gt;If you want to learn &lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt;, which you should, if you are serious about building cross-platform native mobile applications, then learning Dart could be beneficial for you because Dart is the programming language that powers Flutter.&lt;/p&gt;

&lt;p&gt;If you don't know, &lt;a href="https://dart.dev/"&gt;Dart&lt;/a&gt; is a programming language from Google aimed at developer productivity. Unlike Golang, another programming language from Google, Dart is in between &lt;a href="https://www.java67.com/2018/08/top-10-free-java-courses-for-beginners-experienced-developers.html"&gt;Java&lt;/a&gt; and &lt;a href="https://hackernoon.com/10-of-the-most-popular-javascript-libraries-for-frontend-and-backend-development-ph1h0326n"&gt;JavaScript&lt;/a&gt;, and you can learn it quickly if you are familiar with any of this language.&lt;/p&gt;

&lt;p&gt;If you want to learn Dart in 2022 and looking for a recommendation, I suggest you go through this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-flutter-dart-to-build-ios-android-apps%2F"&gt;&lt;strong&gt;Flutter and Dart Masterclass&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/01/top-5-courses-to-learn-dart-programming.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuobcYVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-fRKjZMXlz64/XhQv03xq7hI/AAAAAAAAcco/GXfIIO6RTdYGPteyGb9xJZxV5ODMvYuMACEwYBhgL/s320/Dart%252BPRogramming%252Blangauge.png" alt="best course to learn Dart Programming language" width="320" height="180"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-xamarin"&gt;
  &lt;/a&gt;
  10. Xamarin
&lt;/h3&gt;

&lt;p&gt;If you want to build a native mobile application with &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-courses-to-learn-asp-net-in-2019.html"&gt;.NET&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2019/11/top-5-courses-to-learn-c-sharp-in.html"&gt;C#&lt;/a&gt;, then there is no better choice than Xamarin.&lt;/p&gt;

&lt;p&gt;Xamarin is a tried and tested platform and great for C# and .NET developer who wants to get into mobile application development.&lt;/p&gt;

&lt;p&gt;By using Xamarin, you can build native Android, iOS, tvOS, watchOS, macOS, and Windows apps using .NET with native API access. &lt;/p&gt;

&lt;p&gt;If you want to learn Xamarin in 2022 and looking for resources, I suggest you check out this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fxamarin-forms-course%2F"&gt;&lt;strong&gt;Xamarin Forms: Build Native Cross-Platform Apps using C#&lt;/strong&gt;&lt;/a&gt; course by Mosh Hamedani on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2019/01/top-10-javascript-frameworks-and-libraries-for-web-developers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-Px2CI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-8ed4VGZZN0c/XhQvyoRAD5I/AAAAAAAAcck/aqmFKDbQeNUL0ydqLSR2d2WRNip8d8HywCEwYBhgL/s320/Xamarin%252Bbenefit.png" alt="best course to learn Xamarin Framework" width="320" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about how to become a app developer in 2022. As I said you can either learn Android + Kotlin, iOS + Swift, Flutter + Dart or simply React Native to become a professional app developer in 2022. &lt;/p&gt;

&lt;p&gt;You don't need learn all, just choose the combo which suits your skill for example if you are a Java developer then learning Kotlin for Android development make sense. Simply if you are JavaScript developer you should go for React Native. &lt;/p&gt;

&lt;p&gt;For example, if you want to build native mobile apps for iOS platforms then learn iOS 15 and Swift 5, and if you to develop for the Android platform then learn Kotlin and Android 10, and if you want to build cross-platform native mobile applications then learn &lt;strong&gt;Flutter&lt;/strong&gt; and &lt;strong&gt;Dart&lt;/strong&gt; in 2022.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Programming and Tech Articles&lt;/strong&gt; You may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;The Complete Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2017/12/10-things-java-programmers-should-learn.html#axzz5atl0BngO"&gt;10 Things Java Programmer Should Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;The 2022 Frontend and Backend Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-programming-languages-to-learn-in.html"&gt;10 Programming languages You can Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/09/the-2018-devops-roadmap-your-guide-to-become-DevOps-Engineer.html#axzz61d5FPRru"&gt;The Complete DevOps Engineer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/10-frameworks-java-and-web-developers-should-learn.html"&gt;10 Frameworks Java and Web Developer should learn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/04/top-5-java-frameworks-to-learn-in-2018_27.html"&gt;Top 5 Java Frameworks to Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/the-2019-react-js-developer-roadmap-9a8e290b8a56"&gt;The Complete React Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/05/10-reasons-to-learn-python-programming.html"&gt;10 Reasons to Learn Python in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;My favorite courses to learn AWS and Cloud Computing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-data-structure-and-algorithms-d5379ae2588"&gt;7 Best Courses to learn Data Structure and Algorithms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/swlh/top-5-course-to-learn-ios-12-and-swift-4-in-depth-5a7351785f8d"&gt;Top 5 Courses to learn iOS and Swift in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2019/01/top-10-javascript-frameworks-and-libraries-for-web-developers.html"&gt;10 JavaScript Frameworks and Libraries to learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-online-courses-to-become-a-fullstack-web-developer-in-2020-d608a6b63232"&gt;10 Courses you can join to become full stack developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61"&gt;10 Courses to learn SQL and Database in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you like this article useful and find these technologies worth learning for mobile app development, then please share it with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are thinking to do just one thing right now then I highly recommend you for iOS development and join this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fios-13-app-development-bootcamp%2F"&gt;Swift and iOS Masterclass&lt;/a&gt;&lt;/strong&gt; from Angela Yu on Udemy. This single step can make a big difference in your career.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Adding Authorization to Your Node.js Application Using Cerbos</title>
      <author>Alex Olivier</author>
      <pubDate>Mon, 06 Dec 2021 10:47:26 +0000</pubDate>
      <link>https://dev.to/alexolivier/adding-authorization-to-your-nodejs-application-using-cerbos-496d</link>
      <guid>https://dev.to/alexolivier/adding-authorization-to-your-nodejs-application-using-cerbos-496d</guid>
      <description>&lt;p&gt;Authorization is critical to web applications. It grants the correct users access to sections of your web application on the basis of their roles and permissions. In a simple application, adding in-app authorization to your application is relatively straightforward. But with complex applications comes a need to create different roles and permissions, which can become difficult to manage. &lt;/p&gt;

&lt;p&gt;In this tutorial, you‚Äôll learn how to use &lt;a href="https://cerbos.dev/"&gt;Cerbos&lt;/a&gt; to add authorization to a Node.js web application, simplifying the authorization process as a result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-nodejs-application"&gt;
  &lt;/a&gt;
  Setting Up the Node.js Application
&lt;/h2&gt;

&lt;p&gt;Before we get started with Cerbos, you‚Äôll need to create a new Node.js application (or use an existing one). Let‚Äôs set up a blog post Node.js application as our example. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-user-permissions"&gt;
  &lt;/a&gt;
  Defining User Permissions
&lt;/h3&gt;

&lt;p&gt;The blog post application will contain two roles: &lt;strong&gt;member&lt;/strong&gt; and &lt;strong&gt;moderator&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The member role will have the following permissions:&lt;/p&gt;

&lt;p&gt;‚Äì create a new blog post&lt;br&gt;
‚Äì update blog posts created by the member&lt;br&gt;
‚Äì delete blog posts created by the member&lt;br&gt;
‚Äì view all blog posts created by all members&lt;br&gt;
‚Äì view a single blog post created by any member&lt;/p&gt;

&lt;p&gt;The moderator role will have the following permissions:&lt;/p&gt;

&lt;p&gt;‚Äì view all blog posts created by all members&lt;br&gt;
 ‚Äì view a single blog post created by any member&lt;br&gt;
 ‚Äì disable and enable a malicious post&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Members and moderators cannot perform any action if they are disabled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#creating-the-application"&gt;
  &lt;/a&gt;
  Creating the Application
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;Launch your terminal or command-line tool and create a directory for the new application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir blogpost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;p&gt;Move into the blog post directory and run the command below‚Äîa &lt;code&gt;package.json&lt;/code&gt; file will be created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h4&gt;

&lt;p&gt;Open the &lt;code&gt;package.json&lt;/code&gt; file and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"blogpost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mocha --exit --recursive test/**/*.js"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"cerbos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"chai"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"chai-http"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"mocha"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^9.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.12"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two main packages are in the dependencies section of the&lt;code&gt;package.json&lt;/code&gt;‚ÄîCerbos and Express:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cerbos is the authorization package responsible for creating roles and permissions.&lt;/li&gt;
&lt;li&gt;Express is a Node.js framework used to set up and create faster server-side applications. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the devDependencies, there are four packages: Chai, Chai HTTP, Mocha, and Nodemon. Chai, Chai HTTP, and Mocha are used to run automated test scripts during and after development. Nodemon is used to ensure the application server is restarted whenever a change is made to any file during development.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h4&gt;

&lt;p&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the packages in the &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h4&gt;

&lt;p&gt;Create the following files:&lt;/p&gt;

&lt;p&gt;‚Äì &lt;code&gt;index.js&lt;/code&gt;, which contains the base configuration of the demo application.&lt;br&gt;
  ‚Äì &lt;code&gt;routes.js&lt;/code&gt;, which contains all the routes needed in the demo application.&lt;br&gt;
  ‚Äì &lt;code&gt;db.js&lt;/code&gt;, which exports the demo database. For the sake of this demo, you will be using an array to store the data‚Äîyou can use any database system you desire.&lt;br&gt;
  ‚Äì &lt;code&gt;authorization.js&lt;/code&gt;, which contains the Cerbos authorization logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    touch index.js routes.js db.js authorization.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, paste the following codes in the respective files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App listening on port 3000!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//routes.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkPostExistAndGet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;flagged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post created successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flagged&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view:all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All posts fetched successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flagged&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view:single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post fetched successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;checkPostExistAndGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tempUpdatedPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;updatedContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;updatedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;updatedContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updatedContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempUpdatedPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updatedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post updated successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;checkPostExistAndGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flagged&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post deleted successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/flag/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flaggedContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;flagged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;checkPostExistAndGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tempUpdatedPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;flaggedContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;flaggedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;flaggedContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flaggedContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempUpdatedPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flaggedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Post &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flagged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unflagged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; successfully`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//db.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;member&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Snow Mountain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;member&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David Woods&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;member&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria Waters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moderator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Grace Stones&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moderator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;366283&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Introduction to Cerbos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;In this article, you will learn how to integrate Cerbos authorization into an existing application&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;flagged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The demo database includes five users, consisting of three members and two moderators. Among the three members, there are two active members and one blocked member. Among the two moderators, one is an active moderator and the other is a blocked moderator. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the meantime, the &lt;code&gt;authorization.js&lt;/code&gt; will contain an empty scaffolding to see how the application works, before integrating the Cerbos authorization package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;principalId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourceAtrr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  Step 6
&lt;/h4&gt;

&lt;p&gt;The demo application has been successfully set up. It‚Äôs now time to see how the application looks before integrating the Cerbos authorization package.&lt;/p&gt;

&lt;p&gt;Start the server with the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the following in your terminal to indicate your application is running on port 3000:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[nodemon] 2.0.12
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node index.js`
App listening on port 3000!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-the-application-without-authorization"&gt;
  &lt;/a&gt;
  Testing the Application Without Authorization
&lt;/h2&gt;

&lt;p&gt;Now it‚Äôs time to test the application. You can use any HTTP client of your choice, such as Postman, Insomnia, or cURL. For this example, we‚Äôll use cURL. &lt;/p&gt;

&lt;p&gt;Make the following requests‚Äîyou should find no restrictions. Change the user_ID from 1 through 5, and you should receive a valid response. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-post"&gt;
  &lt;/a&gt;
  Create Post
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/posts/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_id: 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type: application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{
    "title": "Introduction to Cerbos",
    "content": "Welcome to Cerbos authorization package"
}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-post"&gt;
  &lt;/a&gt;
  Update Post
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;PATCH&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/posts/351886&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_id: 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type: application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{
    "title": "Welcome to Cerbos",
    "content": "10 things you need to know about Cerbos"
}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#view-all-posts"&gt;
  &lt;/a&gt;
  View All Posts
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/posts/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_id: 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#view-single-post"&gt;
  &lt;/a&gt;
  View Single Post
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/posts/366283&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_id: 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flag-post"&gt;
  &lt;/a&gt;
  Flag Post
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --request POST 'http://localhost:3000/posts/flag/366283' --header 'user_id: 5' --header 'Content-Type: application/json' --data-raw '{
    "flag": true
}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete-post"&gt;
  &lt;/a&gt;
  Delete Post
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;DELETE&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/posts/366283&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_id: 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#integrating-cerbos-authorization"&gt;
  &lt;/a&gt;
  Integrating Cerbos Authorization
&lt;/h2&gt;

&lt;p&gt;As things stand, the application is open to authorized and unauthorized actions. Now, it‚Äôs time to implement Cerbos to ensure users perform only authorized operations.&lt;/p&gt;

&lt;p&gt;To get started, a policy folder needs to be created to store Cerbos policies. Cerbos uses these policies to determine which users have access to what resources. In the blog post directory, run the command below to create a directory called Cerbos. This will contain the policy directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir cerbos &amp;amp;&amp;amp; mkdir cerbos/policies
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, switch to the policies folder and create two policy YAML files: &lt;code&gt;derived_roles.yaml&lt;/code&gt; and &lt;code&gt;resource_post.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-derivedrolesyaml-endraw-file-description"&gt;
  &lt;/a&gt;
  The &lt;code&gt;derived_roles.yaml&lt;/code&gt; File Description
&lt;/h3&gt;

&lt;p&gt;Derived roles allow you to create dynamic roles from one or more parent roles. For example, the role &lt;em&gt;member&lt;/em&gt; is permitted to view all blog posts created by other members, but is not allowed to perform any edit operation. To allow owners of a blog post who are also members make edits on their blog post, a derived role called &lt;em&gt;owner&lt;/em&gt; is created to grant this permission.&lt;/p&gt;

&lt;p&gt;Now paste the code below in your &lt;code&gt;derived_roles.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# derived_roles.yaml&lt;/span&gt;

&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;api.cerbos.dev/v1"&lt;/span&gt;
&lt;span class="na"&gt;derivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;common_roles&lt;/span&gt;
  &lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;all_users&lt;/span&gt;
      &lt;span class="na"&gt;parentRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;member"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;moderator"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.principal.attr.blocked == &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;owner&lt;/span&gt;
      &lt;span class="na"&gt;parentRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;member"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.resource.attr.userId == request.principal.attr.id&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.principal.attr.blocked == &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;member_only&lt;/span&gt;
      &lt;span class="na"&gt;parentRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;member"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.principal.attr.blocked == &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;moderator_only&lt;/span&gt;
      &lt;span class="na"&gt;parentRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;moderator"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.principal.attr.blocked == &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unknown&lt;/span&gt;
      &lt;span class="na"&gt;parentRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;unknown"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Äì &lt;em&gt;&lt;strong&gt;apiVersion&lt;/strong&gt;&lt;/em&gt; is the current version of the Cerbos derived role.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;derivedRoles&lt;/strong&gt;&lt;/em&gt; contains the list of user roles that your application will be used for; each role will be configured based on the needs of the application.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;derivedRoles (name)&lt;/strong&gt;&lt;/em&gt; allows you to distinguish between multiple derived roles files in your application that can be used in your resource policies.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;derivedRoles (definitions)&lt;/strong&gt;&lt;/em&gt; is where you‚Äôll define all the intended roles to be used in the application.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt; is the name given to the derived roles generated; for example, a resource could be accessed by members and moderators. With the help of derived roles, it‚Äôs possible to create another role that will grant permissions to the resource.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;parentRoles&lt;/strong&gt;&lt;/em&gt; are the roles to which the derived roles apply, e.g. members and moderators.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;condition&lt;/strong&gt;&lt;/em&gt; is a set of expressions that must hold true for the derived roles to take effect. For example, you can create derived roles from members and moderators, then add a condition that the derived roles can only take effect if members or moderators are active. This can be done through the condition key. For more information on conditions, check the condition guide &lt;a href="https://docs.cerbos.dev/cerbos/policies/conditions.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-raw-resourcepostyaml-endraw-file-description"&gt;
  &lt;/a&gt;
  The &lt;code&gt;resource_post.yaml&lt;/code&gt; File Description
&lt;/h3&gt;

&lt;p&gt;The resource policy file allows you to create rules for parent/derived roles on different actions that can be performed on a resource. These rules inform the roles if they have permission to perform certain actions on a resource.&lt;/p&gt;

&lt;p&gt;Paste the following code in your &lt;code&gt;resource_post.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# resource_post.yaml&lt;/span&gt;

&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;api.cerbos.dev/v1&lt;/span&gt;
&lt;span class="na"&gt;resourcePolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;default"&lt;/span&gt;
  &lt;span class="na"&gt;importDerivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;common_roles&lt;/span&gt;
  &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;blogpost"&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;view:all'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EFFECT_ALLOW&lt;/span&gt;
      &lt;span class="na"&gt;derivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;all_users&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;view:single'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EFFECT_ALLOW&lt;/span&gt;
      &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;moderator&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;member&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;create'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EFFECT_ALLOW&lt;/span&gt;
      &lt;span class="na"&gt;derivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;member_only&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;update'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EFFECT_ALLOW&lt;/span&gt;
      &lt;span class="na"&gt;derivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;owner&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;moderator_only&lt;/span&gt;
      &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;any&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.resource.attr.flagged == &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt; &amp;amp;&amp;amp; request.principal.attr.role == "member"&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;request.resource.attr.flagged == &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt; &amp;amp;&amp;amp; request.principal.attr.role == "moderator"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;delete'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EFFECT_ALLOW&lt;/span&gt;
      &lt;span class="na"&gt;derivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;owner&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;flag'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EFFECT_ALLOW&lt;/span&gt;
      &lt;span class="na"&gt;derivedRoles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;moderator_only&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resource policy file contains the permissions each role or derived roles can have access to:&lt;/p&gt;

&lt;p&gt;‚Äì &lt;em&gt;&lt;strong&gt;apiVersion&lt;/strong&gt;&lt;/em&gt; is the version for the resource policy file.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;resourcePolicy&lt;/strong&gt;&lt;/em&gt; holds all the key attributes of the resource policy.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;/em&gt; is used to identify the policy that should be used in the application; you can have multiple policy versions for the same resource.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;importDerivedRoles&lt;/strong&gt;&lt;/em&gt; is used to specify the type of derived roles you want to import into the resource policy file.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;resource&lt;/strong&gt;&lt;/em&gt; contains the resource you want to apply the roles and permissions to.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;rules&lt;/strong&gt;&lt;/em&gt; is where you will set the rules for different operations, on the basis of user permissions.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;actions&lt;/strong&gt;&lt;/em&gt; are operations to be performed.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;effect&lt;/strong&gt;&lt;/em&gt; is to indicate whether to grant the user access to the operation, based on the roles and derived roles (and conditions, if they exist).&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;derivedRoles&lt;/strong&gt;&lt;/em&gt; contains the derived roles you formed in your &lt;code&gt;derived_roles yaml&lt;/code&gt; file.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;roles&lt;/strong&gt;&lt;/em&gt; are static default roles used by your application.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;condition&lt;/strong&gt;&lt;/em&gt; specifies conditions that must be met before access can be granted to the operation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To ensure your policy‚Äôs YAML files do not contain errors, run this command in the blog post root directory. If it doesn‚Äôt return anything, then it is error-free:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -i -t -v $(pwd)/cerbos/policies:/policies ghcr.io/cerbos/cerbos:0.10.0 compile /policies
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#spinning-up-the-cerbos-server"&gt;
  &lt;/a&gt;
  Spinning Up the Cerbos Server
&lt;/h2&gt;

&lt;p&gt;You‚Äôve now successfully created the policy files that Cerbos will be using to authorize users in your application. Next, it‚Äôs time to spin the Cerbos server up by running the below command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm --name cerbos -d -v $(pwd)/cerbos/policies:/policies -p 3592:3592 ghcr.io/cerbos/cerbos:0.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Cerbos server should be running at &lt;a href="http://localhost:3592"&gt;http://localhost:3592&lt;/a&gt;. Visit the link, and if no error is returned the server is working fine. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-cerbos-into-the-application"&gt;
  &lt;/a&gt;
  Implementing Cerbos Into the Application
&lt;/h2&gt;

&lt;p&gt;Now it‚Äôs time to fill the empty scaffolding in the &lt;code&gt;authorization.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Cerbos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cerbos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cerbos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cerbos&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3592&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// The Cerbos PDP instance&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;principalId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourceAtrr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;principalId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cerbosObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view:single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view:all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;policyVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogpost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;resourceAtrr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;principal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;principalId&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;policyVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unknown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;includeMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cerbosCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cerbos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cerbosObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAuthorized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cerbosCheck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthorized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAuthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You are not authorized to visit this resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;cerbosObject&lt;/code&gt; is the controller that checks if a user has access to certain actions. It contains the following keys:&lt;/p&gt;

&lt;p&gt;‚Äì &lt;em&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/em&gt; contains all of the available actions you‚Äôve created in the resource policy file.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;Resource&lt;/strong&gt;&lt;/em&gt; allows you to indicate which resource policy you want to use for the resource request from multiple resource policy files.&lt;br&gt;
    ‚Äì The &lt;strong&gt;policyVersion&lt;/strong&gt; in the resource key maps to &lt;strong&gt;version&lt;/strong&gt; in the resource policy&lt;br&gt;
               file.&lt;br&gt;
    ‚Äì &lt;strong&gt;kind&lt;/strong&gt; maps to &lt;strong&gt;resource&lt;/strong&gt; key in the resource policy file.&lt;br&gt;
    ‚Äì Instances can contain multiple resource requests that you want to test against the&lt;br&gt;
               resource policy file. In the demo, you are only testing the blog post resource.&lt;br&gt;
‚Äì &lt;em&gt;&lt;strong&gt;Principal&lt;/strong&gt;&lt;/em&gt; contains the details of the user making the resource request at that instance.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cerbosCheck.isAuthorized()&lt;/code&gt; method is used to check if the user/principal is authorized to perform the requested action at that instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-cerbos-authorization-with-the-blog-post-application"&gt;
  &lt;/a&gt;
  Testing Cerbos Authorization with the Blog Post Application
&lt;/h2&gt;

&lt;p&gt;You have successfully set up the required roles and permissions for each operation in the CRUD blog post demo application. It‚Äôs now time to test the routes again and observe what happens, using the table below as a guide for testing:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;action&lt;/th&gt;
&lt;th&gt;user_id&lt;/th&gt;
&lt;th&gt;user_role&lt;/th&gt;
&lt;th&gt;user_status&lt;/th&gt;
&lt;th&gt;response&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;create, view:all, view:single&lt;/td&gt;
&lt;td&gt;1 and 2&lt;/td&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;active&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All Actions&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;blocked&lt;/td&gt;
&lt;td&gt;Not authorized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All Actions&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;moderator&lt;/td&gt;
&lt;td&gt;blocked&lt;/td&gt;
&lt;td&gt;Not authorized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update its own post&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;active&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update another user post&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;active&lt;/td&gt;
&lt;td&gt;Not authorized&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The above table displays a subset of the different permissions for each user implemented in the demo application. &lt;/p&gt;

&lt;p&gt;You can clone the demo application repository from &lt;a href="https://github.com/tolustar/cerbos-authorization"&gt;GitHub&lt;/a&gt;. Once you‚Äôve cloned it, follow the simple instructions in the README file. You can run the automated test script to test for the different user roles and permissions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, you‚Äôve learned the benefits of Cerbos authorization by implementing it in a demo Node.js application. You‚Äôve also learned the different Cerbos policy files and their importance in ensuring authorization works properly.&lt;/p&gt;

&lt;p&gt;For more information about Cerbos, you can visit the official documentation &lt;a href="https://docs.cerbos.dev/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>authorization</category>
      <category>cerbos</category>
      <category>authz</category>
    </item>
    <item>
      <title>What's The Vim Runtime? A Guide With Examples</title>
      <author>Matthieu Cneude</author>
      <pubDate>Mon, 06 Dec 2021 10:46:37 +0000</pubDate>
      <link>https://dev.to/phantas0s/whats-the-vim-runtime-a-guide-with-examples-43id</link>
      <guid>https://dev.to/phantas0s/whats-the-vim-runtime-a-guide-with-examples-43id</guid>
      <description>&lt;p&gt;Have you ever wonder what was The Beginning of All Things‚Ñ¢?&lt;/p&gt;

&lt;p&gt;In other words: have you ever wonder what Vim is doing when you start it? What files are sourced, why, and in what order? If you don't really care, I encourage you to reconsider your position. Knowing what Vim is doing at startup lets you speed it up, overwrites some defaults from the plugins you've installed, or even creates your own filetypes. In short, it gives you even more power to customize Vim to your precise needs.&lt;/p&gt;

&lt;p&gt;In this article, we'll look at two main ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What happens during Vim's startup.&lt;/li&gt;
&lt;li&gt;What are the runtime paths, what's sourced from there, and when.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article assumes that you have some advanced knowledge about Vim. If you don't, you can read my &lt;a href="https://thevaluable.dev/vim-beginner/"&gt;series of article to learn Vim from the ground up&lt;/a&gt;. More specifically, a lot of knowledge in this article is built on &lt;a href="https://thevaluable.dev/vim-expert/"&gt;Vim for Expert Users&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take your headlamp and a good rope, we'll go exploring today many paths in our filesystems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vims-startup"&gt;
  &lt;/a&gt;
  Vim's Startup
&lt;/h2&gt;

&lt;p&gt;When you start Vim, many things happen behind the curtain before your favorite cursor is displayed on the screen. I describe here a simplified version, trying to underline the most important steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#startups-order"&gt;
  &lt;/a&gt;
  Startup's Order
&lt;/h3&gt;

&lt;p&gt;Here's what Vim will do when you run it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the shell options (useful for the command &lt;code&gt;:!&lt;/code&gt;, and for Vim's terminal).&lt;/li&gt;
&lt;li&gt;Process the arguments given to the CLI. Buffers are created for all files given as arguments.&lt;/li&gt;
&lt;li&gt;The value of the environment variable &lt;code&gt;$VIMINIT&lt;/code&gt; (an Ex command) is executed.&lt;/li&gt;
&lt;li&gt;Source the user's vimrc file.&lt;/li&gt;
&lt;li&gt;The value of the environment variable &lt;code&gt;$EXINIT&lt;/code&gt; (an Ex command) is executed.&lt;/li&gt;
&lt;li&gt;If the option "exrc" is set, Vim will try to find and load a vimrc in the working directory. Keep in mind however that setting "exrc" is not secure.&lt;/li&gt;
&lt;li&gt;Source filetypes, filetype plugins, and indent plugins. We'll see them below.&lt;/li&gt;
&lt;li&gt;Source syntax highligting scripts.&lt;/li&gt;
&lt;li&gt;Source plugin's scripts.&lt;/li&gt;
&lt;li&gt;Load runtime's and plugin's scripts from the "after" folder.&lt;/li&gt;
&lt;li&gt;Source the shada file (for Neovim) or the viminfo file (for Vim).&lt;/li&gt;
&lt;li&gt;Execute the options given to Vim affecting the startup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's add more precisions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to run more than one command using &lt;code&gt;$VIMINIT&lt;/code&gt;, you can separate them with the symbol &lt;code&gt;|&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your vimrc file can be:

&lt;ul&gt;
&lt;li&gt;In Vimscript for Vim (located at &lt;code&gt;$HOME/.vimrc&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In Lua &lt;strong&gt;or&lt;/strong&gt; Vimscript for Neovim (located in &lt;code&gt;$HOME/.config/nvim/init.vim&lt;/code&gt;, or &lt;code&gt;$XDG_CONFIG_HOME/nvim/init.vim&lt;/code&gt; if &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is set).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Setting the option &lt;code&gt;exrc&lt;/code&gt; can be dangerous: Vim can load potentially unsecure vimrc files you might have downloaded with other files.&lt;/li&gt;
&lt;li&gt;You can use the option &lt;code&gt;-u &amp;lt;another_vimrc&amp;gt;&lt;/code&gt; when you run Vim in your terminal, to load another vimrc file instead of the default one. You can also use of of these value instead of a vimrc for debug purposes:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NORC&lt;/code&gt; - Don't load any vimrc but load your plugins.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NONE&lt;/code&gt; - Don't load any vimrc nor plugins.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;You can run any command using the options &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. For example: &lt;code&gt;vim +"set shiftwidth=4|echo 'hello'"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#profiling-vims-startup"&gt;
  &lt;/a&gt;
  Profiling Vim's Startup
&lt;/h3&gt;

&lt;p&gt;If Vim does terrible things at startup and you don't understand how to fix it, you can use the option &lt;code&gt;-V&lt;/code&gt; to have more details about the startup process.&lt;/p&gt;

&lt;p&gt;If you're startup is too slow and you want to find the bottleneck, you can profile it with &lt;code&gt;vim --startuptime &amp;lt;file&amp;gt;&lt;/code&gt;. It will write every files loaded (with timestamps) in the file &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#special-environment-variables"&gt;
  &lt;/a&gt;
  Special Environment Variables
&lt;/h3&gt;

&lt;p&gt;Two environment variables are only defined when Vim starts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$VIM&lt;/code&gt; - Used to locate various user files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$VIMRUNTIME&lt;/code&gt; - Used to locate various support files for Vim. We'll speak more about the runtime below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can look at the value of these variable with the command &lt;code&gt;:echo $VIM&lt;/code&gt; for example. If you define these environment variables in your shell, Vim won't overwrite them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help startup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help slow-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help 'shell'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help $VIM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help $VIMRUNTIME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-runtime-path"&gt;
  &lt;/a&gt;
  The Runtime Path
&lt;/h2&gt;

&lt;p&gt;The runtime path is similar to the environment variable PATH in Unix-based systems. Vim will search in these paths to locate and source many different files during startup. To see all of these paths, you can look at the value of the option &lt;code&gt;runtimepath&lt;/code&gt;, by running the command &lt;code&gt;:set runtimepath?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you use Vim, it's likely that you'll see &lt;code&gt;$HOME/.vim&lt;/code&gt; as the first path of the list. If you're a Neovim adept, it will be &lt;code&gt;$HOME/.config/nvim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The subdirectories of the runtime paths have different meanings according to their names. The Vimscript files inside these directories will be sourced at different times during startup, sometimes in different ways.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-runtime-paths"&gt;
  &lt;/a&gt;
  Important Runtime Paths
&lt;/h3&gt;

&lt;p&gt;Here are some important runtime paths. Vim will parse them in this order:&lt;/p&gt;

&lt;p&gt;For Vim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$HOME/.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$VIM/vimfiles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$VIM/vimfiles/after&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/.vim/after&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Neovim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt; (or &lt;code&gt;~/.config/nvim&lt;/code&gt; if &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is not set)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim/after&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#subdirectories-of-the-runtime-paths"&gt;
  &lt;/a&gt;
  Subdirectories of the Runtime Paths
&lt;/h3&gt;

&lt;p&gt;As I was writing above, the configuration files in the runtime paths contains different things depending of the subdirectory they're in. Here's an overview of the most useful of these subdirectories, and how you can use them to customize Vim even further.&lt;/p&gt;

&lt;p&gt;I encourage you to look at the default configuration files to understand the meaning of these subdirectories. They are in the directory set in the variable &lt;code&gt;$VIMRUNTIME&lt;/code&gt;. Don't forget that you can only read the value of &lt;code&gt;$VIMRUNTIME&lt;/code&gt; after launching Vim.&lt;/p&gt;

&lt;p&gt;You can also find examples in my &lt;a href="https://github.com/Phantas0s/.dotfiles/tree/master/nvim"&gt;own dotfiles&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ftplugin"&gt;
  &lt;/a&gt;
  ftplugin
&lt;/h4&gt;

&lt;p&gt;The subdirectory &lt;em&gt;ftplugin&lt;/em&gt; (for &lt;code&gt;f&lt;/code&gt;ile&lt;code&gt;t&lt;/code&gt;ype &lt;code&gt;plugin&lt;/code&gt;) allow you to load pieces of configuration each time you open a buffer with a specific filetype.&lt;/p&gt;

&lt;p&gt;For example, let's say that you need a couple of mappings only for markdown files. You can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a markdown file and verify that the filetype is indeed markdown, by running the command &lt;code&gt;:set filetype?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create the file &lt;code&gt;markdown.vim&lt;/code&gt; in &lt;code&gt;$HOME/.vim/ftplugin&lt;/code&gt; for Vim, or &lt;code&gt;$XDG_CONFIG_HOME/nvim/ftplugin&lt;/code&gt; for Neovim.&lt;/li&gt;
&lt;li&gt;Add options and mappings only for markdown files in there. For example: &lt;code&gt;setlocal spell&lt;/code&gt; will enable spelling each time you open a markdown file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You need to keep in mind, however, that each time a buffer with the filetype &lt;code&gt;markdown&lt;/code&gt; is created, the file &lt;code&gt;ftplugin/markdown.vim&lt;/code&gt; will be sourced. As a result, you need to make sure that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You're resetting any autocommand each time the file is sourced (using an autocommand group and &lt;code&gt;:au!&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Every mapping you're creating have the special argument &lt;code&gt;&amp;lt;buffer&amp;gt;&lt;/code&gt;, for example &lt;code&gt;map &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;h echo "hello"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You're using &lt;code&gt;setlocal&lt;/code&gt; instead of &lt;code&gt;set&lt;/code&gt; to set options.&lt;/li&gt;
&lt;li&gt;You're using the &lt;code&gt;-buffer&lt;/code&gt; argument for any user command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don't respect these rules, your pieces of configuration won't only be loaded for the buffers with a precise filetype, but for every buffer, globally.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#autoload"&gt;
  &lt;/a&gt;
  autoload
&lt;/h4&gt;

&lt;p&gt;The subdirectory autoload is also very useful. It lets you load your custom functions when you call them, instead of loading them when Vim starts. As a result, it can significantly speed up Vim's startup. These functions need to begin with the path of the file they're written in, for Vim to know where to find them when you call them. &lt;/p&gt;

&lt;p&gt;For example, you can create a new file &lt;code&gt;autoload/general.vim&lt;/code&gt; and use it to declare a new custom function &lt;code&gt;MyFunction&lt;/code&gt;. This function needs to be called &lt;code&gt;general#MyFunction&lt;/code&gt;, because it's declared in the file &lt;code&gt;general.vim&lt;/code&gt;. To call it, you can run &lt;code&gt;:call general#MyFunction&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also create subdirectories in the directory &lt;code&gt;autoload&lt;/code&gt;. For example, you can create the file &lt;code&gt;autoload/path/to/general.vim&lt;/code&gt;. In that case, you need to call your function &lt;code&gt;path#to#general#MyFunction&lt;/code&gt;, describing the location of the file itself.&lt;/p&gt;

&lt;p&gt;I encourage you to put all your custom functions in the "autoload" subdirectory.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  syntax
&lt;/h4&gt;

&lt;p&gt;The subdirectory syntax lets you create your own syntax files. They're used for code highlighting for example. You can first create a syntax group matching some regex, and then you link your syntax group to highlight groups. These highlight groups will decide of the text's color displayed.&lt;/p&gt;

&lt;p&gt;Vim supports many syntaxes by default (you can see them in the directory &lt;code&gt;$VIMRUNTIME/syntax&lt;/code&gt;), I never had to create my own syntax groups. It's however good to know that you can do it in case you need it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  colors
&lt;/h4&gt;

&lt;p&gt;You can create highlight groups in the subdirectory colors. Each file represents a different color scheme. Again, you'll find different examples in the directory &lt;code&gt;$VIMRUNTIME/colors&lt;/code&gt;. To change the color scheme of your highlighting, you can use the command &lt;code&gt;:color &amp;lt;my_color_scheme&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ftdetect"&gt;
  &lt;/a&gt;
  ftdetect
&lt;/h4&gt;

&lt;p&gt;Have you ever dreamed to create your own filetypes? That's great, because Vim is a dream machine. You can create your filetypes in the subdirectory "ftdetect".&lt;/p&gt;

&lt;p&gt;For example, if you have a bunch of file with the extension "new" and you want to create a filetype for them, you can: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the file &lt;code&gt;ftdetect/new.vim&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;au BufRead,BufNewFile *.new set filetype=new&lt;/code&gt; in it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also link some filetypes with other ones. For example, I wanted the files with the extension &lt;code&gt;.yaml.dist&lt;/code&gt; to have the &lt;code&gt;yaml&lt;/code&gt; filetype. So I've:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Created the file &lt;code&gt;ftdetect/yaml.dist.vim&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Written &lt;code&gt;autocmd BufNewFile,BufRead *.yml.dist set filetype=yaml&lt;/code&gt; in it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#compiler"&gt;
  &lt;/a&gt;
  compiler
&lt;/h4&gt;

&lt;p&gt;In Vim, you can use the command &lt;code&gt;:make&lt;/code&gt; to run a specific compiler, depending of the filetype of your current buffer.&lt;/p&gt;

&lt;p&gt;Under the hood, Vim will search a file named after the filetype of your current buffer, in the "compiler" directory. For example, if if you want to run the Golang compiler with precise options, you can create the file &lt;code&gt;compiler/go.vim&lt;/code&gt; and add whatever you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-directory-after"&gt;
  &lt;/a&gt;
  The Directory after
&lt;/h3&gt;

&lt;p&gt;The subdirectory "after" is a special one. You can think of it as another runtime path in the runtime path, where you can add the same subdirectories we saw above.&lt;/p&gt;

&lt;p&gt;Everything in the after directory will be loaded &lt;em&gt;after&lt;/em&gt; everything else. You can also see it when you look at the order of the most important runtime path at the beginning of this section.&lt;/p&gt;

&lt;p&gt;From there, you can override anything you want: indentation, filetype plugins, or even the external plugins you've installed. For example, I can override Lisp indentation by creating the file &lt;code&gt;after/indent/lisp.vim&lt;/code&gt; and setting whatever options or variables I want to modify.&lt;/p&gt;

&lt;p&gt;I didn't cover the subdirectory &lt;code&gt;indent&lt;/code&gt; by the way, but I'm sure you can figure out its purpose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-runtime-command"&gt;
  &lt;/a&gt;
  The Runtime Command
&lt;/h3&gt;

&lt;p&gt;If you want to source manually some files from your runtime path, you can use the command &lt;code&gt;:runtime &amp;lt;file&amp;gt;&lt;/code&gt;. For example, if you want to load every files from the &lt;code&gt;colors&lt;/code&gt; subdirectory, you can run &lt;code&gt;:runtime colors/**/*.vim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;:runtime!&lt;/code&gt; (with a bang &lt;code&gt;!&lt;/code&gt;) to source everything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disabling-runtime-files"&gt;
  &lt;/a&gt;
  Disabling Runtime Files
&lt;/h3&gt;

&lt;p&gt;Finally, if you want to debug one of your runtime files, you can disable some of them by sourcing these specific files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:source $VIMRUNTIME/ftoff.vim&lt;/code&gt; - Disable the detection of filetypes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:source $VIMRUNTIME/ftplugin.vim&lt;/code&gt; - Enable ftplugin&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:source $VIMRUNTIME/ftplugof.vim&lt;/code&gt; - Disable ftplugin&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:source $VIMRUNTIME/indent.vim&lt;/code&gt; - Enable indentation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:source $VIMRUNTIME/indoff.vim&lt;/code&gt; - Disable indentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help 'runtimepath'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help autoload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help ftplugin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help syntax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help new-filetype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help after-directory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-startup-has-been-revealed"&gt;
  &lt;/a&gt;
  The Startup Has Been Revealed
&lt;/h2&gt;

&lt;p&gt;Now that you know what Vim's doing when it's starting, you can add your pieces of configuration in the good runtime subdirectory for more flexibility. You can also try to speed up your startup if you find it too slow.&lt;/p&gt;

&lt;p&gt;What did we see in this article?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vim load specific configuration files and environment variables at startup&lt;/li&gt;
&lt;li&gt;You can use the options &lt;code&gt;-V&lt;/code&gt; or &lt;code&gt;--startuptime&lt;/code&gt; to get more details regarding Vim's startup.&lt;/li&gt;
&lt;li&gt;The environment variable &lt;code&gt;$VIM&lt;/code&gt; and &lt;code&gt;$VIMRUNTIME&lt;/code&gt; are set during startup.&lt;/li&gt;
&lt;li&gt;The subdirectories in the runtime path have a meaning, sometimes affecting directly how they're loaded at startup, and when.&lt;/li&gt;
&lt;li&gt;The runtime path subdirectory "after" is a special one: it's a runtime path too (accepting the same subdirectories), and you can overwrite every other loaded config files in there.&lt;/li&gt;
&lt;li&gt;The command &lt;code&gt;:runtime&lt;/code&gt; allows you to manually load config files from your runtime paths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I encourage you to experiment with all these configuration files to improve your config. Personally, I find the subdirectories "autoload" and "ftplugin" especially handy.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learning-to-play-vim-a-fun-guide-to-learn-the-best-editor"&gt;
  &lt;/a&gt;
  Learning to Play Vim: A Fun Guide to Learn the Best Editor
&lt;/h2&gt;

&lt;p&gt;I began to write &lt;a href="https://themouseless.dev/vim"&gt;a very ambitious guide to learn Vim&lt;/a&gt; from the ground up. Thanks to great feedback from my readers, I'll be able to address the problems many beginners complain about when learning Vim. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to navigate in multiple files and projects in Vim?&lt;/li&gt;
&lt;li&gt;How to debug in Vim?&lt;/li&gt;
&lt;li&gt;How to search, find, and replace?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This guide will explain the most useful vanilla functionalities as well as some powerful plugins which will enrich your experience.&lt;/p&gt;

&lt;p&gt;Help me make an impact in the Vim world! You can subscribe to the newsletter and tell me everything you want to see in the book. Early bird discount guarantees!&lt;/p&gt;

&lt;p&gt;I reply to every email personally, so don't hesitate to ask as many questions as you want. It's always a pleasure to help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themouseless.dev/vim"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TX-zoMCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themouseless.dev/images/vim/book_cover_900.webp" alt="Learning to Play Vim" width="880" height="1245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least: I've also written a book about building your own Mouseless Development Environment, so if you're interested by that too, &lt;a href="https://themouseless.dev"&gt;click on this shiny link&lt;/a&gt;.&lt;/p&gt;




</description>
      <category>vim</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
