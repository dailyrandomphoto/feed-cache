<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Huge RCE in log4j logging library in JVM ecosystem</title>
      <author>dzikoysk ✨</author>
      <pubDate>Fri, 10 Dec 2021 01:22:54 +0000</pubDate>
      <link>https://dev.to/dzikoysk/huge-rce-in-log4j-logging-library-in-jvm-ecosystem-4d1g</link>
      <guid>https://dev.to/dzikoysk/huge-rce-in-log4j-logging-library-in-jvm-ecosystem-4d1g</guid>
      <description>&lt;p&gt;5 days ago log4j received hot-fix for huge RCE. It's not quite known topic and today it has been expolited in multiple projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dzikoysk/status/1469091718867951618"&gt;https://twitter.com/dzikoysk/status/1469091718867951618&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's really easy to reproduce, you should take a look at dependencies in your projects to address this issue. At least bump it to 2.15, the best choice is to move to e.g. logback, at least for a while.&lt;/p&gt;

</description>
      <category>java</category>
      <category>jvm</category>
      <category>kotlin</category>
      <category>scala</category>
    </item>
    <item>
      <title>Automating AppSec with Contrast Security</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 09 Dec 2021 22:41:16 +0000</pubDate>
      <link>https://dev.to/linearb/automating-appsec-with-contrast-security-4dlb</link>
      <guid>https://dev.to/linearb/automating-appsec-with-contrast-security-4dlb</guid>
      <description>&lt;p&gt;Everything we do is online. We bank online, access healthcare, pay our taxes, build our businesses -  and along the way we put trust in companies to keep us protected.&lt;/p&gt;

&lt;p&gt;Unfortunately, companies aren’t great at writing secure software. Contrast Security wants to change that.&lt;/p&gt;

&lt;p&gt;Jeff Williams, Co-founder &amp;amp; CTO of Contrast Security, and Steve Wilson, CPO, join the Dev Interrupted podcast to discuss the future of application security (AppSec), the importance of security automation and why the traditional way of doing security - where you scan app after app a few times a year - is over.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6G6iaZ6CUOdjx3EZW13chi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;By the numbers: the average application is attacked &lt;strong&gt;13,000 times a month&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;And has over &lt;strong&gt;35 vulnerabilities&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The reasons AppSec should to be automated&lt;/li&gt;
&lt;li&gt;How to reduce the cost of AppSec&lt;/li&gt;
&lt;li&gt;Why shifting left doesn't result in more secure code&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3ei4suK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ug8aw08f09fmzk0631c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3ei4suK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ug8aw08f09fmzk0631c.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>podcast</category>
      <category>cybersecurity</category>
      <category>devops</category>
    </item>
    <item>
      <title>Testing Email Templates in ASP.NET Core
</title>
      <author>Muhammad Azeez</author>
      <pubDate>Thu, 09 Dec 2021 21:59:41 +0000</pubDate>
      <link>https://dev.to/mhmd_azeez/testing-email-templates-in-aspnet-core-p80</link>
      <guid>https://dev.to/mhmd_azeez/testing-email-templates-in-aspnet-core-p80</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is my annual contribution to the 2021 &lt;a href="https://www.csadvent.christmas/"&gt;C# Advent Calendar&lt;/a&gt;. Please check out all the great posts from our wonderful community!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many systems require sending emails to notify users. And testing these notifications manually is a pain. So it's one of the best use cases for integration testing. First, let's create strongly typed model for our &lt;code&gt;Welcome&lt;/code&gt; email:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Welcome&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we create a Razor template for the email in &lt;code&gt;EmailTemplates/Welcome.cshtml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@model EmailSnapshotTesting.EmailTemplates.Welcome
@{
    Layout = "~/EmailTemplates/_Layout.cshtml";
}

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome @Model.FullName&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome to our wonderful service!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how the layout is going to look like in &lt;code&gt;EmaiTemplates/_Layout.cshtml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        @RenderBody()
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we create a service to send emails:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MailerService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IMailerService&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IEmailRenderer&lt;/span&gt; &lt;span class="n"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IMailPostman&lt;/span&gt; &lt;span class="n"&gt;_postman&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MailerService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IEmailRenderer&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IMailPostman&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_renderer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_postman&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;SendWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;SendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Welcome &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;SendEmail&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;HtmlBody&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;MailerService&lt;/code&gt; needs an &lt;code&gt;IEmailRenderer&lt;/code&gt; to get HTML content from the strongly typed model and an &lt;code&gt;IMailPostman&lt;/code&gt; to send the emails.&lt;/p&gt;

&lt;p&gt;Here is an implementation of &lt;code&gt;IEmailRenderer&lt;/code&gt; that renders the Razor template we specified above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.ModelBinding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.Razor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.Rendering&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.ViewFeatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;EmailSnapshotTesting.Services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// https://stackoverflow.com/a/49275145&lt;/span&gt;
&lt;span class="c1"&gt;// https://ppolyzos.com/2016/09/09/asp-net-core-render-view-to-string/&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RazorEmailRenderer&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEmailRenderer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IRazorViewEngine&lt;/span&gt; &lt;span class="n"&gt;_razorViewEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ITempDataProvider&lt;/span&gt; &lt;span class="n"&gt;_tempDataProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IServiceProvider&lt;/span&gt; &lt;span class="n"&gt;_serviceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RazorEmailRenderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IRazorViewEngine&lt;/span&gt; &lt;span class="n"&gt;razorViewEngine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ITempDataProvider&lt;/span&gt; &lt;span class="n"&gt;tempDataProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IServiceProvider&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_razorViewEngine&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;razorViewEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_tempDataProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempDataProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_serviceProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Note: You can also support multiple languages by separating each locale into a folder&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;viewPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"~/EmailTemplates/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.cshtml"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_razorViewEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;viewPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;searchedLocations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchedLocations&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Could not find this view: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;viewPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. Searched locations:\n&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;searchedLocations&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;httpContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DefaultHttpContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;httpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestServices&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_serviceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;actionContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ActionContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;httpContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;httpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetRouteData&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ActionDescriptor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringWriter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;viewDataDict&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ViewDataDictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;EmptyModelMetadataProvider&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ModelStateDictionary&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

            &lt;span class="n"&gt;viewDataDict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;viewContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ViewContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;actionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;viewDataDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TempDataDictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;httpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;_tempDataProvider&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HtmlHelperOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RenderAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create a fake implementation of the &lt;code&gt;IEmailPostman&lt;/code&gt; for the integration tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FakePostman&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IMailPostman&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;SendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;LastMessage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompletedTask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;LastMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now register all of our services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IMailerService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MailerService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEmailRenderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RazorEmailRenderer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// In your project, you have to register a real postman in your app&lt;/span&gt;
&lt;span class="c1"&gt;// and swap it our with this fake postman in the integration tests&lt;/span&gt;
&lt;span class="c1"&gt;// by creating a custom WebApplicationFactory. For more info see: &lt;/span&gt;
&lt;span class="c1"&gt;// https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-6.0#customize-webapplicationfactory&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IMailPostman&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FakePostman&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a test project called &lt;code&gt;IntegrationTests&lt;/code&gt; using XUnit and inside the test project we create a folder called &lt;code&gt;Snapshots&lt;/code&gt; to store the expected html results.&lt;/p&gt;

&lt;p&gt;Then we can create our snapshot tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmailTests&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IClassFixture&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WebApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IEmailRenderer&lt;/span&gt; &lt;span class="n"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_folderPath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;EmailTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the path for the snapshots folder&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IWebHostEnvironment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_folderPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentRootPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"../IntegrationTests/Snapshots"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_renderer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEmailRenderer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;CanSendWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;FakePostman&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mailService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MailerService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;mailService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SendWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"person@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Example Person"&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"person@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome Example Person!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;SaveToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome.actual.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HtmlBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;expectedBody&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadAllTextAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_folderPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Welcome.expected.html"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Sanitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HtmlBody&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;Sanitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expectedBody&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;Sanitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\r\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;SaveToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fullPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_folderPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateDirectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetDirectoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullPath&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAllTextAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first time your run &lt;code&gt;CanSendWelcomeEmail&lt;/code&gt; it's going to fail because &lt;code&gt;IntegrationTests/Snapshots/Welcome.expected.html&lt;/code&gt; doesn't exist. But it has created &lt;code&gt;IntegrationTests/Snapshots/Welcome.actual.html&lt;/code&gt;. So go ahead and take a look at it, it should be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome Example Person&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome to our wonderful service!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test out the html using something like &lt;a href="https://putsmail.com/"&gt;PutsMail&lt;/a&gt; or &lt;a href="https://testi.at/"&gt;Testi@&lt;/a&gt;. If you like the result, rename it the file to &lt;code&gt;IntegrationTests/Snapshots/Welcome.expected.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because we don't want git to track the actual results, you'll have to add this line to your .gitignore file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*.actual.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you have snapshot tests for your email templates, whenever you change them, you can easily see the results without having to manually click through the UI to send the emails. This will make your feedback loop much faster.&lt;/p&gt;

&lt;p&gt;You can download the source code on &lt;a href="https://github.com/mhmd-azeez/EmailSnapshotTesting"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>email</category>
      <category>snapshot</category>
      <category>testing</category>
    </item>
    <item>
      <title>Adventuring Into PHP #1</title>
      <author>Vinicius Ithalo</author>
      <pubDate>Thu, 09 Dec 2021 21:54:41 +0000</pubDate>
      <link>https://dev.to/vinic/adventuring-into-php-1-19l</link>
      <guid>https://dev.to/vinic/adventuring-into-php-1-19l</guid>
      <description>&lt;p&gt;I'm planning to start a series of posts showing my first impressions as someone inexperienced in programming who had his first impressions in Python. I'll try to post every time I finish studying so that the original feeling is still clear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-i-decided-to-learn-php"&gt;
  &lt;/a&gt;
  So, I decided to learn PHP
&lt;/h2&gt;

&lt;p&gt;While messing around on Discord, I found a discussion about this language and how it was useful in web development. It wasn't very long and not all that interesting, but they said something that really caught my attention. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdvtMIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57tuji5demj0uaknifdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdvtMIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57tuji5demj0uaknifdl.png" alt="Screenshot of the discussion" width="472" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I really like python and my focus is on web development, so why not try it out?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This thought was what made me start looking for online resources, a task that apparently I'm not intelligent enough to do, so I asked on Discord.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-php"&gt;
  &lt;/a&gt;
  What is PHP
&lt;/h2&gt;

&lt;p&gt;PHP is a scripting language specialized in web development and that can be embedded inside HTML and is executed on the server, meaning no shady scripts running on the client computer and more freedom working with sensitive data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-php"&gt;
  &lt;/a&gt;
  Installing PHP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUiGGt2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyc0m538htdcjra3789i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUiGGt2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyc0m538htdcjra3789i.png" alt="XAMPP interface" width="661" height="419"&gt;&lt;/a&gt;&lt;br&gt;
PHP can be manually installed by itself, or so I was told, but the easiest way when learning is through those already configured packages, like WAMP, LAMP and XAMPP. People from discord recommended using XAMPP, so I'll be sticking with it for now. Having installed it, everything left is understanding how it works.&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to Set up Neovim for Full Stack Development</title>
      <author>bashbunni</author>
      <pubDate>Thu, 09 Dec 2021 21:49:57 +0000</pubDate>
      <link>https://dev.to/bashbunni/how-to-set-up-neovim-for-full-stack-development-39fn</link>
      <guid>https://dev.to/bashbunni/how-to-set-up-neovim-for-full-stack-development-39fn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#set-up-neovim-for-full-stack-development"&gt;
  &lt;/a&gt;
  Set up Neovim for Full Stack Development
&lt;/h1&gt;

&lt;p&gt;You'll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coc &lt;/li&gt;
&lt;li&gt;emmet&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#if-youre-new-to-neovim"&gt;
  &lt;/a&gt;
  If you're new to neovim:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/neovim/neovim/releases/tag/v0.6.0"&gt;install neovim&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install vim-plug (or any other plugin manager)&lt;br&gt;
&lt;a href="https://github.com/junegunn/vim-plug"&gt;https://github.com/junegunn/vim-plug&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I recommend checking out my &lt;a href="https://github.com/bashbunni/dotfiles"&gt;dotfiles&lt;/a&gt; which has lots of comments so you can find any extra features that might be helpful for you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;I will write another post for a more in-depth description of getting started with neovim...&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-coc"&gt;
  &lt;/a&gt;
  Install Coc
&lt;/h2&gt;

&lt;p&gt;To install Coc, you'll want to follow their instructions at the link below. It is &lt;br&gt;
&lt;a href="https://github.com/neoclide/coc.nvim"&gt;https://github.com/neoclide/coc.nvim&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-coc"&gt;
  &lt;/a&gt;
  Configuring Coc
&lt;/h2&gt;

&lt;p&gt;With neovim open, type the following:&lt;br&gt;
&lt;code&gt;:CocConfig coc-html coc-tsserver coc-json coc-emmet  coc-prettier&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Coc tsserver is for javascript, typescript, and JSX support&lt;/p&gt;

&lt;p&gt;You'll want to create a shortcut for &lt;code&gt;:call CocAction('format')&lt;/code&gt;. I have the following shortcut so that I can format my projects with space + f:&lt;br&gt;
&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;f :call CocAction('format')&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-node-and-npm"&gt;
  &lt;/a&gt;
  Install Node and Npm
&lt;/h2&gt;

&lt;p&gt;head over to the &lt;a href="https://nodejs.org/en/download/"&gt;Node.js downloads page&lt;/a&gt; and follow their installation instructions. You can also use your package manager to install Node. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debian-and-ubuntu"&gt;
  &lt;/a&gt;
  Debian and Ubuntu
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo apt install nodejs&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arch-linux"&gt;
  &lt;/a&gt;
  Arch Linux
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo pacman -S nodejs&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-recommendations"&gt;
  &lt;/a&gt;
  Other Recommendations
&lt;/h2&gt;

&lt;p&gt;I highly recommend installing &lt;a href="https://linuxize.com/post/getting-started-with-tmux/"&gt;tmux&lt;/a&gt; so you can run your frontend, backend, neovim, and git cli in the same terminal window which makes it &lt;em&gt;way&lt;/em&gt; easier to keep your workspace clear. Tmux is great because you can name your sessions and easily navigate to the right spot for what you're looking to do. &lt;br&gt;
e.g.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYqoXqtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3ylgz2lnmejkgtcp95a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYqoXqtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3ylgz2lnmejkgtcp95a.png" alt="tmux demo" width="370" height="22"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Progress: my contribution to the open source project</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Thu, 09 Dec 2021 21:43:09 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/progress-contribute-to-the-open-source-project-120c</link>
      <guid>https://dev.to/okimotomizuho/progress-contribute-to-the-open-source-project-120c</guid>
      <description>&lt;p&gt;I planned how to contribute to an open source project last week and wrote about it in my &lt;a href="https://dev.to/okimotomizuho/planning-how-to-contribute-to-an-open-source-project-48o6"&gt;previous blog&lt;/a&gt;. In the blog, I mentioned I would write a progress blog on Monday, so here I am!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;For the last assignment(we call Release) of my open source course, I've decided to contribute to an open source project which is my college's C language course notes. The &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/64"&gt;issue&lt;/a&gt; I'm working on is about "Standardize frontmatter across all pages". When we contributed to the project in our last Release, we added &lt;code&gt;slug&lt;/code&gt; as one of the properties for frontmatter. However, it made links broken since internal links use page names vs. slugs, so my professor told me to review some of the PRs if they included it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#made-a-pr"&gt;
  &lt;/a&gt;
  Made a PR
&lt;/h2&gt;

&lt;p&gt;I've done the following for the standardization of Frontmatter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;sidebar_position&lt;/code&gt;, and &lt;code&gt;description&lt;/code&gt; for all markdown pages&lt;/li&gt;
&lt;li&gt;Each property of frontmatter was unified in order&lt;/li&gt;
&lt;li&gt;Unified format of description&lt;/li&gt;
&lt;li&gt;Shortened &lt;code&gt;description&lt;/code&gt; to maximum 160 characters (Reason: &lt;code&gt;description&lt;/code&gt; becomes the &lt;code&gt;&amp;lt;meta name="description" content="..."/&amp;gt;&lt;/code&gt; inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;tag, and Google generally truncates snippets to ~155-160 characters)&lt;/li&gt;
&lt;li&gt;Added "Standardize frontmatter" to the CONTRIBUTING.md file
PR Link: &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/143"&gt;https://github.com/Seneca-ICTOER/IPC144/pull/143&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-reviews-and-change-requests"&gt;
  &lt;/a&gt;
  Getting reviews and change requests
&lt;/h2&gt;

&lt;p&gt;One of my classmates reviewed my changes, and he asked me to reinsert &lt;code&gt;slug&lt;/code&gt; in the root of the file, and also add a step in the Workflow in Contributing.md. Also, one of the repo's owners requested to change some &lt;code&gt;description&lt;/code&gt;s in the frontmatter. When I worked on Standardizing frontmatter, the description was hard since I'm familiar with the course notes, but I wasn't very good at C language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next step
&lt;/h2&gt;

&lt;p&gt;The goal for this Release is for my PR to get merged by this Friday. However, I didn't change any codes in this contribution. I still need to make more PRs for my previous Releases. It would be a lot of things to do in my final exams week. I will try my best and put lots of effort into all of these Releases.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>programming</category>
      <category>github</category>
    </item>
    <item>
      <title>How do we integrate responsible AI?</title>
      <author>Mage</author>
      <pubDate>Thu, 09 Dec 2021 21:39:14 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-do-we-integrate-responsible-ai-4eag</link>
      <guid>https://dev.to/mage_ai/how-do-we-integrate-responsible-ai-4eag</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Responsible AI uses AI to empower individuals and put people’s values first. Its ethical deployment is essential to fight against algorithmic bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intro&lt;/li&gt;
&lt;li&gt;What is Responsible AI?&lt;/li&gt;
&lt;li&gt;Steps for Responsible AI&lt;/li&gt;
&lt;li&gt;Responsible AI in practice&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The rapid development of AI will have a big impact on nearly every aspect of private and professional life. The determination of that impact’s success should be judged by how ethically and responsibly the technology is created. With laws not being able to keep up with the pace that AI is being developed, it falls on companies and developers to make a responsible product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-responsible-ai"&gt;
  &lt;/a&gt;
  What is Responsible AI?
&lt;/h2&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lie53RZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qip68mi6wuemuxko9xn.png" alt="Image description" width="760" height="368"&gt;&lt;em&gt;(Source: FCW)&lt;/em&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;&lt;br&gt;
Data has proven itself to be a strong driver in the way companies make decisions. AI and data are being used to move businesses and society forward at rapid rates, with nearly limitless innovation.&lt;/p&gt;

&lt;p&gt;The power of AI is in its ability to be deployed quickly across the world; however, this could also be AI’s greatest threat, as algorithms can spread bias on a massive scale at a rapid pace. This is happening in instances like Goldman Sachs and Apple allegedly using an algorithm which is biased against women when issuing credit limits; or predictive policing companies like PredPol who have been accused of increasing racial bias in law enforcement.&lt;/p&gt;

&lt;p&gt;The legislative process hasn’t been able to keep up with AI’s innovation and as a result, has left companies to choose between higher profits or ethical good. Co-director of &lt;a href="https://shorensteincenter.org/programs/digital-platforms-democracy/"&gt;Digital Platforms and Democracy&lt;/a&gt; at Harvard, &lt;a href="https://cyber.harvard.edu/people/dghosh"&gt;Dipayan Ghosh&lt;/a&gt;, said, “we’re not talking about bad people, but [tech companies] are being presented with the opportunity to make their own rules, and nobody has repealed the laws of human nature.” Companies have developed company-specific standards of ethical practice as congress has yet to pass clear resolutions to regulate technology.&lt;/p&gt;

&lt;p&gt;Tech giants implement their own set of rules for what it means to create AI responsibly. Responsible AI is the practice of using AI to empower individuals and put people’s values first. Microsoft’s ethical values of AI are as follows: fairness, reliability and safety, privacy and security, inclusiveness, transparency, and accountability. Other companies: Apple, Facebook, Twitter, PWC, and many more have developed a similar set of principles to guide their growth and innovation in a responsible way. How well these guidelines are upheld will be up to the companies themselves until proper legal measures are taken to address the growing AI sector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-for-responsible-ai"&gt;
  &lt;/a&gt;
  Steps for Responsible AI
&lt;/h2&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iT1nZxiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr05mhyzad8qhlj4e1v3.jpeg" alt="Image description" width="880" height="526"&gt;&lt;em&gt;(Source: wbur)&lt;/em&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;&lt;br&gt;
As we touched on in &lt;a href="https://www.mage.ai/blog/why-does-ai-responsibility-matter"&gt;Why does AI responsibility matter?&lt;/a&gt;, algorithmic bias has become a serious problem as a result of AI’s greater implementation. Founder of &lt;a href="https://www.linkedin.com/company/ajlunited/"&gt;The Algorithmic Justice League&lt;/a&gt; and student at the MIT media lab, &lt;a href="https://www.media.mit.edu/people/joyab/overview/"&gt;Joy Buolamwini&lt;/a&gt; was introduced to algorithmic bias when a facial recognition model she created only was able to recognize white faces. When testing other projects that were built on the same generic facial recognition database, the same results occurred. Buolamwini has since made it her mission to increase education and resources to create a more equitable AI space.&lt;/p&gt;

&lt;p&gt;In a &lt;a href="https://www.youtube.com/watch?v=UG_X_7g63rY"&gt;Ted Talk&lt;/a&gt;, Buolamwini details the ways in which she believes a more responsible AI ecosystem can be created:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Who codes matters: A study done by &lt;a href="https://www.zippia.com/software-engineer-jobs/demographics/"&gt;Zippia&lt;/a&gt; found that males made up 67% of software developers. Of that, 57% were white. A lack of diversity in software means that only a few voices and experiences are being heard when developing software that affects millions. More voices within software means that people’s innate blindspots to certain issues are able to be addressed.&lt;/li&gt;
&lt;li&gt;How we code matters: Without any responsible or ethical guidelines, developers have no clear path to develop inclusive AI. In a 2021 &lt;a href="https://appen.com/whitepapers/the-state-of-ai-and-machine-learning-report/?utm_source=Paid&amp;amp;utm_medium=VentureBeat&amp;amp;utm_campaign=2021-Predictions&amp;amp;utm_content=2021-Predictions"&gt;state of AI and Machine Learning report&lt;/a&gt;, only 25% of companies surveyed said unbiased AI is a critical mission. Tech giants are making steps to increase awareness and adoption of responsible AI practices, and in 2016 formed the &lt;a href="https://partnershiponai.org/"&gt;Partnership on AI&lt;/a&gt; to advance AI’s positive outcomes on people and society.&lt;/li&gt;
&lt;li&gt;Why we code matters: AI can be used as a powerful tool for business to make more informed decisions, improve technology, and increase profit. There is also great potential for the ways AI can be used to better society as a whole. According to Buolawini “we’ve used tools of computation creation to unlock immense wealth. We now have the opportunity to unlock even greater equality if we make social change a priority and not an afterthought.”&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#responsible-ai-in-practice"&gt;
  &lt;/a&gt;
  Responsible AI in practice
&lt;/h2&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uBIEKas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1z83t5rtj3767jvydy7.png" alt="Image description" width="782" height="502"&gt;&lt;/center&gt;

&lt;p&gt;At its current state, responsible AI occurs in varying degrees from company to company. Company guidelines and coalitions, such as the Partnership on AI, are a starting point in increasing AI’s ethical deployment; however, much more work needs to be done in order for responsible AI to be synonymous with general AI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/natasha-crampton-21189717/"&gt;Natasha Crampton&lt;/a&gt;, Microsoft’s Chief Responsible AI Officer, believes that AI’s harm can occur in three ways: quality of service harm, allocation harm, and representational harm. To minimize the chance for any of these harms, Crampton asks her teams to first think about whom the systems are built for, forcing teams to think about what things could go right and wrong in the model’s deployment. Integrating checks at the early stages of development makes for checks to be done when building the model, not when the model is complete.&lt;/p&gt;

&lt;p&gt;Tools to check for a dataset’s inclusivity and how well it represents a population are also deployed in model creation. In a &lt;a href="https://www.brookings.edu/events/what-is-responsible-ai/"&gt;Brookings panel&lt;/a&gt; on responsible AI, Crampton clarifies that “it goes beyond data, sometimes the discussion heavily focuses on data… when we’re building models we make lots of choices… we need to prioritize fairness at every point.” While fairness can often be difficult to contextualize as a metric, thinking about who you are building a model for can fine-tune focus on the greater social impact of a model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;AI is developing at a rapid rate, and it’s imperative that ethical practices are integrated into new technology. Data and technology aren’t inherent solutions to all problems, and end up creating their own set of issues when left unchecked. Companies must be made aware of AI’s ethical problems to minimize errors and ensure that AI can be used to generate a more equitable world.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Let's Talk Logical Operators</title>
      <author>Katelyn</author>
      <pubDate>Thu, 09 Dec 2021 21:26:31 +0000</pubDate>
      <link>https://dev.to/katelynjewel/lets-talk-logical-operators-1gnd</link>
      <guid>https://dev.to/katelynjewel/lets-talk-logical-operators-1gnd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#were-going-to-go-over-three-of-the-logical-operators-that-javascript-uses"&gt;
  &lt;/a&gt;
  We're going to go over three of the logical operators that Javascript uses:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clDRrAbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ia76ynvidwmmwgd3557.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clDRrAbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ia76ynvidwmmwgd3557.png" alt="truthy operator values" width="512" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-a-logical-operator"&gt;
  &lt;/a&gt;
  Why use a logical operator?
&lt;/h3&gt;

&lt;p&gt;The benefit of a logical operator is to connect two (or more!) expressions so that the value of the total (all of the expressions you just connected) is dependent on those expressions. &lt;/p&gt;

&lt;p&gt;These operators are used within code to compare variables and values when creating various logic methods, often using their boolean values. When used within functions it gives more logic options for the code to use and change based on user behavior. This can also help DRY up code in condensing functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-not"&gt;
  &lt;/a&gt;
  ! (NOT)
&lt;/h3&gt;

&lt;p&gt;The NOT &lt;code&gt;!&lt;/code&gt; operator is generally used as a boolean. Logical NOT will have truthy value if the operator it's called on (like &lt;code&gt;!(6 === 3)&lt;/code&gt; is false and vice-versa (like &lt;code&gt;!(6 === 6)&lt;/code&gt; is considered a false value. Here's a different way of wording the NOT operator with the previous examples: Return true if x is not strictly equal to y, otherwise return false. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CfijKl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7zfe4gt7jnhzc134bnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CfijKl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7zfe4gt7jnhzc134bnp.png" alt="Logical Operators" width="290" height="174"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ampamp-and"&gt;
  &lt;/a&gt;
  &amp;amp;&amp;amp; (AND)
&lt;/h3&gt;

&lt;p&gt;The AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator will return true if both sides of the operator or boolean values are true (&lt;code&gt;(x &amp;lt; 10 &amp;amp;&amp;amp; y &amp;gt; 1)&lt;/code&gt; is true) otherwise, it returns false. In other words, when using the AND operator, if both x and y are true, then the logic as a whole is true. If one part of the logic is false, the whole problem returns false. It's also important to not that you can chain on the AND operator more than once. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFCswGPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn3yv2zl5t3ne63j8yiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFCswGPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn3yv2zl5t3ne63j8yiv.png" alt="AND Operator" width="648" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-or"&gt;
  &lt;/a&gt;
  || (OR)
&lt;/h3&gt;

&lt;p&gt;As with the other operators, the OR &lt;code&gt;||&lt;/code&gt; operator is usually used within a boolean context. A problem using the OR operator will return true if either side of the values are true. If either/both x or y are true, return true. If both are false, return false. It's also important to not that you can chain on the OR operator more than once. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQY88TK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8th6s63s8fiom947h8ja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQY88TK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8th6s63s8fiom947h8ja.png" alt="OR Operator" width="678" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-you-mix-operators"&gt;
  &lt;/a&gt;
  What if you mix operators?
&lt;/h3&gt;

&lt;p&gt;Operators can be mixed within one expression. However, logical operators use an order of precedence, called logical operator precedence if that occurs. The order is as follows: logical NOT (&lt;code&gt;!&lt;/code&gt;), logical AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;), then logical OR (&lt;code&gt;||&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkjgcpOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvqvcgup97hhnj0osj12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkjgcpOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvqvcgup97hhnj0osj12.png" alt="example" width="795" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NOT &lt;code&gt;!&lt;/code&gt; - this will negate a boolean value (!is = is not)&lt;/li&gt;
&lt;li&gt;AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; - can be used with two (or more) values and will return true if all values are also true, will return false otherwise&lt;/li&gt;
&lt;li&gt;OR &lt;code&gt;||&lt;/code&gt; - can also be used with two (or more) values and will return if any of the values are true, will return false if all of the values are false&lt;/li&gt;
&lt;li&gt;if you use these operators in the same expression, keep in mind the order in which Javascript will go through them. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Managing Go Modules</title>
      <author>bashbunni</author>
      <pubDate>Thu, 09 Dec 2021 21:21:17 +0000</pubDate>
      <link>https://dev.to/bashbunni/managing-go-modules-2ckm</link>
      <guid>https://dev.to/bashbunni/managing-go-modules-2ckm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#managing-dependencies-with-gomod"&gt;
  &lt;/a&gt;
  Managing Dependencies with go.mod
&lt;/h2&gt;

&lt;p&gt;A project's dependencies are declared in the go.mod file. This is where the modules are stored when you do &lt;code&gt;go get &amp;lt;module name&amp;gt;&lt;/code&gt;. You can remove unused dependencies using &lt;code&gt;go mod tidy&lt;/code&gt; and your go.mod will only include all used imports. &lt;/p&gt;

&lt;p&gt;When you clone a Go project from github, for example, you'll want to run &lt;code&gt;go get&lt;/code&gt; to install all of the dependencies declared in the go.mod file. If you're coming from a background in web development, this is similar to how you run &lt;code&gt;npm install&lt;/code&gt; to install all of the dependencies declared in your &lt;code&gt;package.json&lt;/code&gt; file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indirect-dependencies"&gt;
  &lt;/a&gt;
  Indirect Dependencies
&lt;/h3&gt;

&lt;p&gt;You may see some dependencies in your go.mod file that are indirect (denoted by &lt;code&gt;// indirect&lt;/code&gt;). This means that one of your dependencies doesn't have its own go.mod file, so, the dependencies that it imports are included in your project's go.mod file. &lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
Let's say we're building a Twitch bot, we need &lt;code&gt;github.com/gempir/go-twitch-irc/v2&lt;/code&gt;, but it doesn't have a go.mod file and it uses functions from &lt;code&gt;github.com/gempir/go-twitch-irc&lt;/code&gt;. You would then have &lt;code&gt;github.com/gempir/go-twitch-irc // indirect&lt;/code&gt; in your project's go.mod file. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: the above is a hypothetical scenario, you won't actually have any indirect dependencies with github.com/gempir/go-twitch-irc/v2&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-gosum"&gt;
  &lt;/a&gt;
  What is go.sum?
&lt;/h3&gt;

&lt;p&gt;go.sum includes the checksum for the dependencies to make sure that you're installing the &lt;em&gt;exact&lt;/em&gt; same dependency as the author used. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-your-projects-as-go-modules"&gt;
  &lt;/a&gt;
  Managing your Projects as Go Modules
&lt;/h2&gt;

&lt;p&gt;To create a new Go project where you can have a go.mod file, you need to set it up on your GOPATH with a name for your project. &lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;go mod init &amp;lt;module name&amp;gt;&lt;/code&gt;&lt;br&gt;
Your module name can be your project name or it can be a link to your github repo, just remove the https:// portion of the url.&lt;/p&gt;

&lt;p&gt;You need to run &lt;code&gt;go mod init&lt;/code&gt; before you're able to get dependencies for your project with &lt;code&gt;go get&lt;/code&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Three lessons from my interview with @cassidoo</title>
      <author>Wannabe Entrepreneur 🎙️</author>
      <pubDate>Thu, 09 Dec 2021 21:10:09 +0000</pubDate>
      <link>https://dev.to/wbepodcast/three-lessons-from-my-interview-with-cassidoo-2mhg</link>
      <guid>https://dev.to/wbepodcast/three-lessons-from-my-interview-with-cassidoo-2mhg</guid>
      <description>&lt;p&gt;Hey there, my name is Tiago and I am the host of &lt;a href="https://wanabe-entrepreneur.com"&gt;Wannabe Entrepreneur&lt;/a&gt; (a podcast about what it's like to bootstrap a company).  &lt;/p&gt;

&lt;p&gt;The great thing about having a podcast is that I have an "excuse" to ask &lt;strong&gt;questions to people I admire and want to learn from!&lt;/strong&gt;&lt;br&gt;
So far I got to interview incredible entrepreneurs of all sizes and backgrounds...&lt;/p&gt;

&lt;p&gt;Recently I got to interview Cassidy Williams (&lt;a class="mentioned-user" href="https://dev.to/cassidoo"&gt;@cassidoo&lt;/a&gt;
) and she has more than &lt;strong&gt;170K followers on Twitter!!&lt;/strong&gt; I won't lie, I was quite nervous... But she was super nice and the interview went really well.&lt;/p&gt;

&lt;p&gt;Here are the &lt;strong&gt;top 3 things&lt;/strong&gt; I learned from Cassidy:&lt;/p&gt;

&lt;p&gt;1- &lt;strong&gt;Be humble and genuine&lt;/strong&gt;&lt;br&gt;
It might seem a bit of a cliché lesson but it does not make it less truthful... With such huge followership, most influencers would ignore small podcasters like me... Not Cassidy, she showed up and spoke openly about her experience in all the past companies she worked in. This just confirms that the real "trick" to personal branding and marketing is to truly be passionate about the topic and the community.&lt;/p&gt;

&lt;p&gt;2- &lt;strong&gt;Some companies want access to your social media&lt;/strong&gt;&lt;br&gt;
With less than 500 followers on my Twitter account, this was never an issue personally. But in our chat, Cassidy told the Wannabe Entrepreneurs that she has to pay extra attention to the contracts and make sure that &lt;strong&gt;she keeps all the control over her social media.&lt;/strong&gt; With more than 170K followers I guess that many companies could use it for personal marketing...&lt;/p&gt;

&lt;p&gt;3- &lt;strong&gt;Don't be afraid to experiment&lt;/strong&gt;&lt;br&gt;
There is this tacit rule about the minimum period of time you should stay in a company before being "allowed" to leave without being judged by potential future employers... Well, &lt;strong&gt;that rule is BS!&lt;/strong&gt; Cassity was never afraid to leave a job where she was not happy and that gave her the opportunity to experiment with different types of companies and find which ones she prefers to work at.&lt;/p&gt;

&lt;p&gt;These are just 3 of a lot of lessons I took from my casual chat with Cassidy Williams. Would love to hear your thoughts on the interview. What questions did I miss? &lt;a href="https://wannabe-entrepreneur.com/episodes/172/"&gt;You can listen to the full chat here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>podcast</category>
    </item>
    <item>
      <title>TIL: You can use JQ in Conductor</title>
      <author>orkes</author>
      <pubDate>Thu, 09 Dec 2021 20:59:05 +0000</pubDate>
      <link>https://dev.to/nvn07/til-you-can-use-jq-in-conductor-52b2</link>
      <guid>https://dev.to/nvn07/til-you-can-use-jq-in-conductor-52b2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-conductor"&gt;
  &lt;/a&gt;
  What is Conductor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Netflix/conductor"&gt;Conductor&lt;/a&gt; is a Microservices orchestration platform from Netflix, released under Apache 2.0 Open Source License.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jq"&gt;
  &lt;/a&gt;
  What is jq
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; (&lt;a href="https://stedolan.github.io/jq/"&gt;https://stedolan.github.io/jq/&lt;/a&gt;) is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conductor-jq"&gt;
  &lt;/a&gt;
  Conductor + JQ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Netflix/conductor"&gt;Conductor&lt;/a&gt; allows you to create tasks that can process JSON payloads in your workflows without writing custom code using jq.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;p&gt;JSON is a popular format of choice for data-interchange. It is widely used in web and server applications, document storage, API I/O etc. It’s also used within Conductor to define workflow and task definitions and passing data and state between tasks and workflows. This makes a tool like JQ a natural fit for processing task related data. Some common usages within Conductor includes, working with HTTP task, JOIN tasks or standalone tasks that try to transform data from the output of one task to the input of another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;Here is an example of a &lt;em&gt;&lt;code&gt;JSON_JQ_TRANSFORM&lt;/code&gt;&lt;/em&gt; task. The &lt;code&gt;inputParameters&lt;/code&gt; attribute is expected to have a value object&lt;br&gt;
that has the following&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A list of key value pair objects denoted key1/value1, key2/value2 in the example below. Note the key1/value1 are&lt;br&gt;
arbitrary names used in this example.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A key with the name &lt;code&gt;queryExpression&lt;/code&gt;, whose value is a JQ expression. The expression will operate on the value of&lt;br&gt;
the &lt;code&gt;inputParameters&lt;/code&gt; attribute. In the example below, the &lt;code&gt;inputParameters&lt;/code&gt; has 2 inner objects named by attributes&lt;br&gt;
&lt;code&gt;key1&lt;/code&gt; and &lt;code&gt;key2&lt;/code&gt;, each of which has an object that is named &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt;. They have an associated array of&lt;br&gt;
strings as values, &lt;code&gt;"a", "b"&lt;/code&gt; and &lt;code&gt;"c", "d"&lt;/code&gt;. The expression &lt;code&gt;key3: (.key1.value1 + .key2.value2)&lt;/code&gt; concat's the 2&lt;br&gt;
string arrays into a single array against an attribute named &lt;code&gt;key3&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jq_example_task"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"taskReferenceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my_jq_example_task"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JSON_JQ_TRANSFORM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"inputParameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"queryExpression"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{ key3: (.key1.value1 + .key2.value2) }"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The execution of this example task above will provide the following output. The &lt;code&gt;resultList&lt;/code&gt; attribute stores the full&lt;br&gt;
list of the &lt;code&gt;queryExpression&lt;/code&gt; result. The &lt;code&gt;result&lt;/code&gt; attribute stores the first element of the resultList. An&lt;br&gt;
optional &lt;code&gt;error&lt;/code&gt;&lt;br&gt;
attribute along with a string message will be returned if there was an error processing the query expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"resultList"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#input-configuration"&gt;
  &lt;/a&gt;
  Input Configuration
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Task Name. A unique name that is descriptive of the task function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;taskReferenceName&lt;/td&gt;
&lt;td&gt;Task Reference Name. A unique reference to this task. There can be multiple references of a task within the same workflow definition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;Task Type. In this case, JSON_JQ_TRANSFORM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputParameters&lt;/td&gt;
&lt;td&gt;The input parameters that will be supplied to this task. The parameters will be a JSON object of atleast 2 attributes, one of which will be called queryExpression. The others are user named attributes. These attributes will be accessible by the JQ query processor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputParameters/user-defined-key(s)&lt;/td&gt;
&lt;td&gt;User defined key(s) along with values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputParameters/queryExpression&lt;/td&gt;
&lt;td&gt;A JQ query expression&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#output-configuration"&gt;
  &lt;/a&gt;
  Output Configuration
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;result&lt;/td&gt;
&lt;td&gt;The first results returned by the JQ expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resultList&lt;/td&gt;
&lt;td&gt;A List of results returned by the JQ expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;An optional error message, indicating that the JQ query failed processing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#want-to-learn-more-about-jq"&gt;
  &lt;/a&gt;
  Want to learn more about JQ?
&lt;/h2&gt;

&lt;p&gt;See tutorials at &lt;a href="https://stedolan.github.io/jq/tutorial/"&gt;https://stedolan.github.io/jq/tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href="https://github.com/Netflix/conductor/"&gt;https://github.com/Netflix/conductor/&lt;/a&gt;&lt;br&gt;
for the source code and updates.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Traversing the C# Syntax Tree with F#</title>
      <author>Jason</author>
      <pubDate>Thu, 09 Dec 2021 20:53:07 +0000</pubDate>
      <link>https://dev.to/rametta/traversing-the-c-syntax-tree-with-f-366b</link>
      <guid>https://dev.to/rametta/traversing-the-c-syntax-tree-with-f-366b</guid>
      <description>&lt;p&gt;This article will go over the basics of the .NET compiler platform feature for analyzing the C# syntax tree, using F#.&lt;/p&gt;

&lt;p&gt;.NET provides a Syntax API that can read any C# or Visual Basic source file and provide the corresponding Syntax Tree for that code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;Why would someone need to traverse the C# syntax tree?&lt;/p&gt;

&lt;p&gt;Well, it can be for a number of reasons, maybe you want to gather statistics about how many classes, namespaces and methods you have, maybe you want generate code based on what is already written, maybe you want to create new tools like a new linter or a tool like Swagger. All these things can be done by analyzing the syntax tree.&lt;/p&gt;

&lt;p&gt;Recently I found myself using the Syntax API for finding Attributes above certain methods and classes, and based on the name and arguments of the Attributes, I generated various other files that were used elsewhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;FunWithSyntaxTrees&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above shows a small program. We will use this snippet as our input for analyzing the syntax tree.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;Assuming you have an F# environment setup. You can begin by installing the nuget package &lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt; and importing that into your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CodeAnalysis&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Syntax&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you install the package and add your &lt;code&gt;open&lt;/code&gt; directives, we will hardcode the C# source code from above into the file, above the &lt;code&gt;main&lt;/code&gt; entrypoint function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... open directives&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""
using System.Collections;
using System.Linq;
using System.Text;

namespace FunWithSyntaxTrees
{
    class Program
    {
        static void Main(string[] args)
        {
            // ...
        }
    }
}
"""&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you write a real program that uses the Syntax API, you will most likely be reading the C# source from files, like this &lt;code&gt;let code = File.ReadAllText "/path/to/file"&lt;/code&gt;, instead of hardcoding the string like we did, but for this tutorial it is fine for demonstration.&lt;/p&gt;

&lt;p&gt;So we will begin by passing the string of C# source code to the Syntax API to be parsed, in return we will get the Syntax Tree that we can begin analyzing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: I will write out the &lt;code&gt;Type&lt;/code&gt;'s of all the variables, but it is unnecessary most of the time since F#'s type inference is very capable of inferring the type itself. Just like in C# when you use the &lt;code&gt;var&lt;/code&gt; keyword, it is capable of knowing the underlying type, in F# this inference is even more powerful and applies to arguments, functions and everything in-between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that the Syntax API has returned our needed Syntax Tree, we can begin travering it and exploring what it offers as data.&lt;/p&gt;

&lt;p&gt;First let us get all the &lt;code&gt;using&lt;/code&gt; directives in the file. We start by getting the root node of the file, then we iterate over all the child nodes inside the root node and find the ones that are the correct &lt;code&gt;UsingDirective&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;rootNodeChildren&lt;/code&gt; variable holds all the child &lt;code&gt;SyntaxNode&lt;/code&gt;'s of the root node. The root node is basically the first node of the &lt;code&gt;SyntaxTree&lt;/code&gt; which holds everything, and a &lt;code&gt;SyntaxNode&lt;/code&gt; is the most general type of node.&lt;/p&gt;

&lt;p&gt;We now need to iterate over these children to find the correct &lt;code&gt;SyntaxNode&lt;/code&gt; for &lt;code&gt;using&lt;/code&gt; directives since that is what we are looking for. We will declare a small helper function to help find them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new helper function &lt;code&gt;usingDirectiveNode&lt;/code&gt; takes a generic &lt;code&gt;SyntaxNode&lt;/code&gt; and checks if it is of the &lt;code&gt;UsingDirectiveSyntax&lt;/code&gt; variety, if it is, it returns an F# Option type containing the &lt;code&gt;using&lt;/code&gt; directive node.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: An F# Option type is a way to represent a &lt;em&gt;"nullable"&lt;/em&gt; value, since there are no real null values in F#, nullable values are representated as Algebraic Data Types, such as the Option type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use the new helper function by mapping over every node and passing it to the function. We use &lt;code&gt;Seq.choose&lt;/code&gt; to filter out any &lt;code&gt;None&lt;/code&gt; types and keep all the &lt;code&gt;Some&lt;/code&gt; types. It also unwraps the &lt;code&gt;Some&lt;/code&gt; types so we can keep using them without Option mapping.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;Seq.choose&lt;/code&gt; is just a fancy way of doing &lt;code&gt;Seq.map&lt;/code&gt; and then &lt;code&gt;Seq.filter&lt;/code&gt; specifically with Option types since the type signature is &lt;code&gt;('T -&amp;gt; 'U option) -&amp;gt; seq&amp;lt;'T&amp;gt; -&amp;gt; seq&amp;lt;'U&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving along, so now that we have a sequence of &lt;code&gt;using&lt;/code&gt; directives in a variable, we can get the specific properties of a &lt;code&gt;using&lt;/code&gt; directive. For now we wil just print them out as proof.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;

  &lt;span class="n"&gt;usingDirectives&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofSeq&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"{u.ToString()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of running our program would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System.Collections;
using System.Linq;
using System.Text;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool right? We analyzed our C# code and found our using directives and printed them out.&lt;/p&gt;

&lt;p&gt;We can use that strategy to find anything in our code, including methods, method arguments, types, classes, interfaces, enums, comments, attributes, etc, everything!&lt;/p&gt;

&lt;p&gt;If you found this useful, feel free to follow me on twitter at &lt;a href="https://twitter.com/rametta"&gt;@rametta&lt;/a&gt;&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
