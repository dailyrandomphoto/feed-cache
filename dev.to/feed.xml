<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Integrating the Passport with the Forem Ecosystem</title>
      <author>Fernando</author>
      <pubDate>Mon, 06 Dec 2021 17:18:57 +0000</pubDate>
      <link>https://dev.to/devteam/integrating-the-passport-with-the-forem-ecosystem-42ea</link>
      <guid>https://dev.to/devteam/integrating-the-passport-with-the-forem-ecosystem-42ea</guid>
      <description>&lt;p&gt;This is the second post of a series that covers the new &lt;a href="https://passport.forem.com/"&gt;Forem Passport&lt;/a&gt; service provider, which integrates with the Forem open source software behind DEV and &lt;a href="https://discover.forem.com"&gt;other communities&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upcoming-forem-passport-projects"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Upcoming Forem Passport Projects&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This service provider is such an exciting project in my view, because of the power and flexibility baked into the OAuth protocol. Not only does it help solve a problem we had (&lt;em&gt;i.e. compliance and support across different platforms&lt;/em&gt;), it also interacts with many different core and ecosystem projects.&lt;/p&gt;

&lt;p&gt;Some of the projects that relate to Forem Passport in one way or another are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#android-mobile-app"&gt;
  &lt;/a&gt;
  Android Mobile App
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We just released the first few versions of our beta Android app!&lt;/p&gt;

&lt;p&gt;Are you interested in being part of the closed beta? Do you want to be notified when the open beta rolls out? Drop a comment below and we‚Äôll contact you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ios-mobile-app"&gt;
  &lt;/a&gt;
  iOS Mobile App
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Version &lt;code&gt;1.2.2&lt;/code&gt; includes the Passport integration already! &lt;a href="https://apps.apple.com/us/app/forem/id1536933197"&gt;Try it out now&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#better-tooling-for-creators-to-fight-abuse"&gt;
  &lt;/a&gt;
  Better Tooling for Creators to Fight Abuse
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;In a network of Forem sites, smaller instances might benefit from abuse control measures taken in bigger instances, like DEV. This could include propagation of banished users (at least to flag as likely abusers) throughout the network, making everyone safer.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è &lt;em&gt;Abuse in this case refers to anything that doesn‚Äôt adhere to the Forem's code of conduct or terms and conditions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please note that this is still in ideation and hasn‚Äôt yet been discussed in great depth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#better-integration-between-the-passport-and-the-raw-admin-endraw-dash-for-creators"&gt;
  &lt;/a&gt;
  Better Integration Between the Passport and the &lt;code&gt;/admin&lt;/code&gt; Dash for Creators
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We can automate the process of enabling the Forem authentication for a creator (directly from their &lt;code&gt;/admin&lt;/code&gt; dashboard) a lot more than its current form. &lt;/p&gt;

&lt;p&gt;This idea has definitely been discussed and it‚Äôs actually a high priority goal. We want to make it as easy as possible for creators to enable the Forem passport integration so more users can benefit from it across the ecosystem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#push-notifications-for-mobile-apps-on-selfhosted-forems"&gt;
  &lt;/a&gt;
  Push Notifications for Mobile Apps on Self-Hosted Forems
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We can‚Äôt openly give out our PN certificates to deliver push notifications to self hosted Forems. So, in order to overcome this we could rely on the authorization and not authentication aspect of the OAuth protocol.&lt;/p&gt;

&lt;p&gt;The objective of this project is to implement a mechanism relay PN delivery to the Passport via API calls if the certificates aren‚Äôt available (self hosted sites).&lt;/p&gt;

&lt;p&gt;This would only work for users that have connected their accounts with the Passport, because that‚Äôs the key part of how we would avoid abuse from any bad actor if they happen to spam their users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#allowing-for-social-login-within-forem-passport-itself"&gt;
  &lt;/a&gt;
  Allowing for Social login within Forem Passport itself
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We heard you like service providers, so we‚Äôre planning to integrate service providers on our service provider üòÜ&lt;/p&gt;

&lt;p&gt;In all seriousness, since we have more control over Forem Passport, we could implement many customized authentication providers and make them compatible with our whole ecosystem (i.e. mobile apps). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#easier-account-management-across-many-forem-sites"&gt;
  &lt;/a&gt;
  Easier account management across many Forem sites
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You could &lt;em&gt;in theory&lt;/em&gt; propagate a new profile picture across many Forem sites at once, directly from Forem Passport. &lt;/p&gt;

&lt;p&gt;This isn‚Äôt implemented and hasn‚Äôt even been discussed in depth either, but OAuth should allows us to make some of these integrations possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#open-sourcing-the-passport-codebase"&gt;
  &lt;/a&gt;
  Open sourcing the Passport codebase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The core Forem software has been open source for a while now, and we want to open source this project as well in the near future for many reasons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our intention is to solidify the Passport project a bit more (i.e. have better abuse control) and other details sorted out before publishing the repo. We‚Äôll be sure to communicate when this happens!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#invitations-amp-closing-note"&gt;
  &lt;/a&gt;
  Invitations &amp;amp; Closing Note
&lt;/h2&gt;

&lt;p&gt;Phew! We've covered a lot in this series so far. üòÑ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invitations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We‚Äôre interested in your feedback on all of the above, so please share your thoughts with us in the comments below.&lt;/li&gt;
&lt;li&gt;Do you already have an account on &lt;a href="https://passport.forem.com"&gt;https://passport.forem.com&lt;/a&gt;? Please leave us a comment below! What are your thoughts? Which upcoming project from the list above interests you most? Any other crazy ideas you might think would be cool to integrate with the Passport project?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://apps.apple.com/us/app/forem/id1536933197"&gt;Try it out Version &lt;code&gt;1.2.2&lt;/code&gt; of the Forem iOS app&lt;/a&gt;, which includes the Passport integration&lt;/li&gt;
&lt;li&gt;Reminder that you can comment below if you'd like to be part of our closed beta test for the Forem Android app &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Closing Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôre actively working on Forem Passport (i.e. design overhaul, abuse control features, new integrations, etc) so expect changes, big and small, to roll out on a weekly basis.&lt;/p&gt;




&lt;p&gt;In the next post in this series, I‚Äôm going to explain how we managed to implement the Passport project from a technical perspective. Keep an eye out for it in the next few days.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Forem‚Äôs approach to decentralized Authentication and Authorization</title>
      <author>Fernando</author>
      <pubDate>Mon, 06 Dec 2021 17:18:40 +0000</pubDate>
      <link>https://dev.to/devteam/forems-approach-to-decentralized-authentication-and-authorization-49a1</link>
      <guid>https://dev.to/devteam/forems-approach-to-decentralized-authentication-and-authorization-49a1</guid>
      <description>&lt;p&gt;This is the first part in a series that will cover the new &lt;a href="https://passport.forem.com/"&gt;Forem Passport&lt;/a&gt; service provider, which integrates with the Forem open source software behind DEV and &lt;a href="https://discover.forem.com"&gt;other communities&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-history-of-our-authentication-options"&gt;
  &lt;/a&gt;
  A Brief History of Our Authentication Options
&lt;/h2&gt;

&lt;p&gt;Since its early days, DEV relied solely on authentication providers to set up and access user accounts. There are pros and cons with that decision, but I‚Äôd say it‚Äôs working well, overall, with over 756,805 registered users (and counting!) today.&lt;/p&gt;

&lt;p&gt;After DEV became part of the larger Forem umbrella, we‚Äôve continued to expand from GitHub and Twitter authentication &lt;a href="https://admin.forem.com/docs/advanced-customization/config/authentication"&gt;to allowing many other use cases&lt;/a&gt; like invite only (private) or email+password registration, to name a few.&lt;/p&gt;

&lt;p&gt;Despite these new authentication options, our backend implementation of them hasn‚Äôt changed much. This is because we rely on &lt;a href="https://auth0.com/intro-to-iam/what-is-oauth-2/"&gt;OAuth&lt;/a&gt; (an open-standard authorization protocol/framework) and a &lt;a href="https://github.com/forem/forem/tree/main/app/services/authentication/providers"&gt;polymorphic approach&lt;/a&gt;, which allows our team to add new providers that adhere to the OAuth protocol.&lt;/p&gt;

&lt;p&gt;Below, I'll explain how these authentication factors connect with external influences (like Apple and Facebook), leading us to build our own authentication provider. If you‚Äôre more interested in the implementation (&lt;em&gt;show me the code&lt;/em&gt;), check out the next part in this series, coming soon!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-forem-is-decentralized"&gt;
  &lt;/a&gt;
  How Forem is Decentralized
&lt;/h2&gt;

&lt;p&gt;Empowering community by giving ownership to creators (decentralization) is the bedrock of Forem's mission. Anyone that hosts their own Forem site becomes part of the world wide web (WWW), just like any other website does. It becomes a bit more interesting when we look at the &lt;a href="https://discover.forem.com"&gt;network of Forem sites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you missed it, a while ago we announced how you can now self-host your own Forem. Starting your own community with data ownership and the transparency of the open source (much like DEV) is finally possible üå± &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgwIhvJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1M1qt9Sp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/forem-self-host-is-now-officially-supported-16h0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Forem Self-Host is Now Officially Supported&lt;/h2&gt;
      &lt;h3&gt;Ben Halpern for The DEV Team „Éª Jul 20 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#forem&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Since we now have a network of sites that run Forem's open source community software, we need to work on the ecosystem around it. So we shipped the Forem iOS app with this in mind.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgwIhvJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1M1qt9Sp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png" alt="ben"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ben/forem-s-approach-to-decentralized-social-media-on-mobile-2e1p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Forem's Approach to Decentralized Social Media on Mobile&lt;/h2&gt;
      &lt;h3&gt;Ben Halpern „Éª Jun 3 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#forem&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ios&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mobile&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Forem for iOS means that you can browse many different Forem communities in one centralized app on the go. Since the days of our DEV iOS app (soon to be sunsetted), we have enhanced the mobile browser experience with Push Notifications and many more features. Together, we've accomplished all of this despite relying on a WebView-based implementation, which might be a sensitive topic at times... but that‚Äôs a post for another day üòÖ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication-hurdles-apple-and-facebook"&gt;
  &lt;/a&gt;
  Authentication Hurdles: Apple and Facebook
&lt;/h2&gt;

&lt;p&gt;Since a Creator has full ownership of their Forem, we can‚Äôt control the authentication methods they choose to enable (this is the point). Apple, on the other hand, requires everyone using their authentication to comply with their guidelines.&lt;/p&gt;

&lt;p&gt;We actually &lt;del&gt;ranted&lt;/del&gt; joked a little about the ‚ÄúSIWA rule‚Äù in a &lt;a href="https://www.youtube.com/watch?v=Q0LVviE5gB4"&gt;DEV Twitch Stream&lt;/a&gt; a while ago, along with other mobile/ecosystem related conversations. SIWA is the acronym we use for &lt;code&gt;Sign In With Apple&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Because Apple requires every iOS app that allows for social logins to have SIWA enabled, the Forem iOS app is being rejected by AppStore reviewers when they find some Forems listed in the app &lt;em&gt;don‚Äôt&lt;/em&gt; have SIWA enabled by choice.&lt;/p&gt;

&lt;p&gt;Despite being less than ideal, we had to hide all social authentication providers if the Forem site doesn‚Äôt have SIWA enabled within the &lt;code&gt;ForemWebView&lt;/code&gt; context (which means it‚Äôs being rendered in a mobile app). &lt;a href="https://github.com/forem/forem/pull/14260"&gt;This is the PR for that&lt;/a&gt; in case you‚Äôre curious.&lt;/p&gt;

&lt;p&gt;Later, Facebook &lt;a href="https://developers.facebook.com/blog/post/2021/06/28/deprecating-support-fb-login-authentication-android-embedded-browsers/"&gt;shut down their OAuth flow protocol in Android WebView contexts&lt;/a&gt;. According to them, this was a decision made ‚Äúfor security reasons‚Äù. &lt;a href="https://github.com/forem/forem/issues/14681"&gt;This is the issue&lt;/a&gt; where some of this conversation has taken place. Similar to the SIWA situation, we‚Äôre not able to show the Facebook auth option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication-on-a-decentralized-network-of-forem-communities"&gt;
  &lt;/a&gt;
  Authentication on a Decentralized Network of Forem Communities
&lt;/h2&gt;

&lt;p&gt;With these challenges led us back to a big picture idea discussed over year ago: an SSO solution that would work across Forems. The goal is to make authenticating with any Forem site easier ‚Äî on any platform or context. Enter &lt;strong&gt;&lt;strong&gt;&lt;a href="https://passport.forem.com"&gt;Forem Passport&lt;/a&gt;&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;OAuth is incredibly powerful and even somewhat democratic, in the sense that each individual user chooses to authorize or revoke the permissions they‚Äôve given through the OAuth protocol.&lt;/p&gt;

&lt;p&gt;The iOS mobile app now integrates directly with Forem Passport and we‚Äôve started to reach out to creators so they can enable the Forem authentication provider to allow for this better experience across platforms.&lt;/p&gt;

&lt;p&gt;On some Forem sites like DEV, &lt;a href="https://community.codenewbie.org/"&gt;CodeNewbie&lt;/a&gt; and &lt;a href="https://forem.dev/"&gt;forem.dev&lt;/a&gt;, you can already connect your Forem Passport account from your settings or directly register a new account using the Forem auth provider.&lt;/p&gt;




&lt;p&gt;In the next post in this series, I‚Äôm going to share the ongoing and upcoming projects we're working on, all of which integrate with the Passport project in one way or another. &lt;a href="https://dev.to/devteam/integrating-the-passport-with-the-forem-ecosystem-42ea"&gt;Read all about it here&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JSON Formatter - Your Lifesaver</title>
      <author>Arnav Kumar</author>
      <pubDate>Mon, 06 Dec 2021 17:15:48 +0000</pubDate>
      <link>https://dev.to/arnavkr/json-formatter-your-lifesaver-5db4</link>
      <guid>https://dev.to/arnavkr/json-formatter-your-lifesaver-5db4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-devs"&gt;
  &lt;/a&gt;
  Welcome Devs!
&lt;/h2&gt;

&lt;p&gt;As of now you already have seen that in our day to day work we come up with many types of URLs and files specifically &lt;code&gt;JSON&lt;/code&gt; files they are almost everywhere. For files its clear. You use a text editor with a beautiful syntax highlighting and with your desired settings. But what about when you view them in browser? In your development career you may already heard of &lt;code&gt;json formatter&lt;/code&gt; browser extensions. They format and syntax highlight the json codes from most of the json responses. But most don't give satisfactory results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-of-the-points-that-i-noted-while-i-was-in-search-of-the-perfect-json-formatter-extension"&gt;
  &lt;/a&gt;
  Some of the points that i noted while i was in search of the perfect Json Formatter Extension
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Some of them don't work on JSON response returned with a non json &lt;code&gt;Content-Type&lt;/code&gt; header&lt;/li&gt;
&lt;li&gt;Some of them Don't Have Dark Mode (And we are Dark Lovers)&lt;/li&gt;
&lt;li&gt;Some only let us see the json tree but not the raw data&lt;/li&gt;
&lt;li&gt;Some are just data stealers&lt;/li&gt;
&lt;li&gt;Some Just don't remember your preferences on specific sites&lt;/li&gt;
&lt;li&gt;Some of them aren't regularly maintained
And so on...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#here-comes-my-json-formatter"&gt;
  &lt;/a&gt;
  Here comes my JSON Formatter ü•≥
&lt;/h2&gt;

&lt;p&gt;So after seeing all these things i decided to create my own &lt;code&gt;Extension&lt;/code&gt; that would solve all those problems and be the devs' best friend. Its New So its Obvious that its underated now, your support would be appreciatable! üòÉ&lt;/p&gt;

&lt;p&gt;Its Available on &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/gpmodmeblccallcadopbcoeoejepgpnb"&gt;Chrome Web Store&lt;/a&gt; for &lt;code&gt;Chrome&lt;/code&gt; but you can also use the extension on all other &lt;code&gt;chromium&lt;/code&gt; based browsers i.e. &lt;code&gt;edge&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt;, &lt;code&gt;opera&lt;/code&gt;, &lt;code&gt;brave&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-formatter/gpmodmeblccallcadopbcoeoejepgpnb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--php1UB5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/chrome-gcs-uploader.appspot.com/image/WlD8wC6g8khYWPJUsQceQkhXSlv1/HRs9MPufa1J1h5glNhut.png" alt="Download From Chrome Web Store" width="496" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#short-link-bitlyjsonformatter"&gt;
  &lt;/a&gt;
  Short Link: &lt;a href="https://bit.ly/json_formatter"&gt;bit.ly/json_formatter&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#website-jsonformatterjsorg"&gt;
  &lt;/a&gt;
  Website: &lt;a href="https://json-formatter.js.org"&gt;json-formatter.js.org&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#features-of-my-json-formatter-extension"&gt;
  &lt;/a&gt;
  Features of my JSON Formatter Extension
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dark Mode (Automated + Manual)&lt;/li&gt;
&lt;li&gt;Syntax Highlighting (VS Code Styled)&lt;/li&gt;
&lt;li&gt;Works Offline üì¥&lt;/li&gt;
&lt;li&gt;Works with any JSON Webpage (webpage should just contain valid json code)&lt;/li&gt;
&lt;li&gt;Automatically Linkify Links (just click on links in strings to open them)&lt;/li&gt;
&lt;li&gt;Formats JSON automatically (No Setup Needed&lt;/li&gt;
&lt;li&gt;Raw and Parsed Mode (Parsed for ease of your eye and raw for ease of your hands)&lt;/li&gt;
&lt;li&gt;Remembers Theme Preferences ( knows which mode you prefer on which sites)&lt;/li&gt;
&lt;li&gt;Shortcut Keys (1 tap controls, easy navigation)&lt;/li&gt;
&lt;li&gt;Collapsible Toolbar (Easily Collapse the Toolbar)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am looking for Suggestions and Feedbacks from you&lt;br&gt;
If you have any issues related the extension you can open an &lt;a href="https://github.com/arnav-kr/json-formatter/issues"&gt;issue&lt;/a&gt; at the &lt;a href="https://github.com/arnav-kr/json-formatter/"&gt;Github Repo&lt;/a&gt; i will try to fix it asap!&lt;/p&gt;

&lt;p&gt;Leave a &lt;a href="https://github.com/arnav-kr/json-formatter/"&gt;Star‚≠ê&lt;/a&gt; on the repo and don't forget to rate the &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/gpmodmeblccallcadopbcoeoejepgpnb"&gt;extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/arnav-kr/json-formatter/"&gt;Github Repo&lt;/a&gt; | &lt;a href="https://github.com/arnav-kr/json-formatter/issues"&gt;issues&lt;/a&gt; | &lt;a href="https://github.com/arnav-kr/json-formatter/fork"&gt;Fork JSON Formatter&lt;/a&gt; | &lt;a href="https://github.com/arnav-kr/"&gt;My GitHub Profile&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dFTjTVFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/linkified-dark.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFTjTVFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/linkified-dark.png%3Fraw%3Dtrue" alt="Automatic Linkified" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aGx7q_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/parsed-dark.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aGx7q_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/parsed-dark.png%3Fraw%3Dtrue" alt="Parsed Mode Dark" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmkxA9pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/raw-dark.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmkxA9pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/raw-dark.png%3Fraw%3Dtrue" alt="Raw Mode Dark" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---VfiEyVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/parsed-light.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VfiEyVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/parsed-light.png%3Fraw%3Dtrue" alt="Parsed Mode Light" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjfqEp19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/raw-light.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjfqEp19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/arnav-kr/json-formatter/blob/main/images/screenshots/raw-light.png%3Fraw%3Dtrue" alt="Raw Mode Light" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>extensions</category>
      <category>addons</category>
      <category>opensource</category>
      <category>json</category>
    </item>
    <item>
      <title>Getting Started with Supabase</title>
      <author>Brian Barrow</author>
      <pubDate>Mon, 06 Dec 2021 17:15:11 +0000</pubDate>
      <link>https://dev.to/deepgram/getting-started-with-supabase-3egp</link>
      <guid>https://dev.to/deepgram/getting-started-with-supabase-3egp</guid>
      <description>&lt;p&gt;Getting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for "quick" solutions. Supabase is one of those options and is gaining popularity very quickly. Let's dive in and see what Supabase offers. We'll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-this-post-is-for"&gt;
  &lt;/a&gt;
  Who this post is for
&lt;/h2&gt;

&lt;p&gt;This post will be easier to follow if you have a general understanding of how databases work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;The first thing you'll need to do is sign up on &lt;a href="https://app.supabase.io/api/login"&gt;Supabase&lt;/a&gt;. It asks you to sign up with GitHub, so if you don't have an account, you should also sign up for one of those.&lt;/p&gt;

&lt;p&gt;Once you are signed in, you'll click the green button that says "New Project" and select the default organization that was created when you logged in. Mine was called "briancbarrow's Org." This will bring up a box where we provide some info about the project. I'll name it &lt;code&gt;reading-list&lt;/code&gt;, give it a strong password, and then I'm going to select the region &lt;code&gt;West US (North California)&lt;/code&gt; because that is closest to me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rS0rRK8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esqy2z8jmmfst1dyw2io.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rS0rRK8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esqy2z8jmmfst1dyw2io.png" alt="Setting up the project with the name reading-list and selecting the West US region." width="675" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the "Create new project" button. It will take a few minutes for the project to be ready, so sit tight until that finishes.&lt;/p&gt;

&lt;p&gt;Now that we have that set up, you should see a page with the name of the project you gave, and below that, it should say "Welcome to your new project." Below that, there are a few features that we can start exploring.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Database&lt;/strong&gt;: The Supabase Database is an instance of a Postgres Database. We'll be diving into this more below.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auth&lt;/strong&gt;: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won't be covering Auth in this post.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Storage&lt;/strong&gt;: Supabase offers a storage service for larger files like images or audio files. We won't be covering Storage in this post either.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-database"&gt;
  &lt;/a&gt;
  Initializing the Database
&lt;/h2&gt;

&lt;p&gt;Click on the button in the "Database" card that says "Table editor." This takes us to a blank dashboard where we'll be able to add and edit our database tables. Click the &lt;code&gt;+ New table&lt;/code&gt; button on the left and give it the name &lt;code&gt;books&lt;/code&gt;. For now don't check the "Enable Row Level Security (RLS)." This table will need a few columns in addition to the "id" column. I've listed them below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Column Name: &lt;code&gt;title&lt;/code&gt;, Type: &lt;code&gt;varchar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Column Name: &lt;code&gt;author&lt;/code&gt;, Type: &lt;code&gt;varchar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Column Name: &lt;code&gt;finished&lt;/code&gt; Type: &lt;code&gt;bool&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The table might already have a 'created_at' column in there by default. We won't need it so you can remove that one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgYXd72B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pqgbyxp1r19lzh459r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgYXd72B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pqgbyxp1r19lzh459r0.png" alt="Add new table with the name 'books', leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool." width="667" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save that, and you've created a table in your database. You should now be able to see it. Let's fill in some data now. Click the button that says "Insert Row" and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn't store a string inside the "finished" column because it only accepts booleans. &lt;a href="https://www.postgresqltutorial.com/postgresql-data-types/"&gt;Here is a link to more info on data types&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is what my table looked like after I inserted two rows of data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHeioLyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhi2mkk9qc2ra9o2jyn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHeioLyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhi2mkk9qc2ra9o2jyn8.png" alt="Added two rows of data with the respective titles and authors of books. One with 'finished' set to true and the other to false." width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-the-database"&gt;
  &lt;/a&gt;
  Querying the Database
&lt;/h2&gt;

&lt;p&gt;With the data added, we can now look at how to send &lt;a href="https://developers.deepgram.com/blog/2021/11/getting-started-with-apis/"&gt;API requests&lt;/a&gt; to it in order to read that data.&lt;/p&gt;

&lt;p&gt;In the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our &lt;code&gt;books&lt;/code&gt; table. In the left hand menu, there is a section called "Tables and Views". Select the &lt;code&gt;books&lt;/code&gt; table. Since we don't have a JavaScript app set up yet, select the "Bash" tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman &lt;a href="https://www.postman.com/downloads/"&gt;(which you can get here)&lt;/a&gt; to send these requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-data"&gt;
  &lt;/a&gt;
  Reading data
&lt;/h3&gt;

&lt;p&gt;Go down to the section that says "READ ALL ROWS", where you'll find the &lt;code&gt;curl&lt;/code&gt; request to get the information from our database.&lt;/p&gt;

&lt;p&gt;Here is what it should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="s1"&gt;'https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"apikey: SUPABASE_KEY"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: Bearer SUPABASE_KEY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the &lt;code&gt;SUPABASE_KEY&lt;/code&gt; in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled "Key" up at the top of the screen. Select &lt;code&gt;anon key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since I'm using Postman for these requests I'll first copy the URL from the &lt;code&gt;curl&lt;/code&gt; line and paste it into the request URL field in Postman. For this request we'll keep it as a &lt;code&gt;GET&lt;/code&gt; request. I'll then click on the "Headers" tab inside Postman and add the &lt;code&gt;apikey&lt;/code&gt; and &lt;code&gt;Authorization&lt;/code&gt; headers respectively. It will look something like this, with your URL and API Keys instead of mine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9seeLsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g069wazhb9k8a9rg4wfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9seeLsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g069wazhb9k8a9rg4wfm.png" alt="Postman GET request with URL parameter specifying to select all" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inserting-data-via-the-api"&gt;
  &lt;/a&gt;
  Inserting data via the API
&lt;/h3&gt;

&lt;p&gt;Now we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let's try to insert data. I'll find the "Insert Rows" section of the API documentation and create a new request in Postman with the required fields.&lt;br&gt;
The request with the new headers you'll need should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cE1wTTxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qpc2ledtt2d8set8h5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cE1wTTxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qpc2ledtt2d8set8h5m.png" alt="Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase" width="880" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgAq6sN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozcf3rv1airbfp7p83rs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgAq6sN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozcf3rv1airbfp7p83rs.png" alt="Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values." width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we send this, if it is successful, it will return with the item we just inserted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-data"&gt;
  &lt;/a&gt;
  Updating data
&lt;/h3&gt;

&lt;p&gt;A lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the "Update rows" section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a &lt;em&gt;PATCH&lt;/em&gt; request instead of a &lt;em&gt;POST&lt;/em&gt; request. (Note that we use a &lt;em&gt;PATCH&lt;/em&gt; to update instead of a &lt;em&gt;PUT&lt;/em&gt; because &lt;em&gt;PATCH&lt;/em&gt; allows us to update only specific fields, while &lt;em&gt;PUT&lt;/em&gt; requires us to send the entire object with the request. We could have used &lt;em&gt;PUT&lt;/em&gt; in this case, but the &lt;em&gt;PATCH&lt;/em&gt; makes it more flexible in the future. &lt;a href="https://stackoverflow.com/a/34400076"&gt;See this link&lt;/a&gt; for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as &lt;code&gt;?some_column=eq.someValue&lt;/code&gt;. This is where we tell the database which row we want updated. So in our case, we can put &lt;code&gt;?id=eq.2&lt;/code&gt; to update the book with the ID of &lt;code&gt;2&lt;/code&gt;. Let's update the title to "The Graveyard Book" and the author to "Neil Gaiman."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZWjqsLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc7dqqxeu9np2ws60cqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZWjqsLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc7dqqxeu9np2ws60cqk.png" alt="Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values" width="880" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-data"&gt;
  &lt;/a&gt;
  Deleting data
&lt;/h3&gt;

&lt;p&gt;We also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren't as many headers needed though and we don't pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a &lt;em&gt;DELETE&lt;/em&gt; request. Let's delete the same book we just updated. The request will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kvOR0gLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwzab40l2lxem72lyuw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kvOR0gLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwzab40l2lxem72lyuw6.png" alt="Postman DELETE request specifying which row we want to be deleted" width="880" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.&lt;/p&gt;

&lt;p&gt;Before you start using the database in an app, you'll also want to add the "Row Level Security" to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the &lt;a href="https://supabase.io/docs/guides/auth/row-level-security"&gt;Supabase documentation page&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>supabase</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Static Code Analysis - A Beginner's Guide</title>
      <author>Bala Priya C</author>
      <pubDate>Mon, 06 Dec 2021 17:14:56 +0000</pubDate>
      <link>https://dev.to/balapriya/static-code-analysis-a-beginners-guide-4h91</link>
      <guid>https://dev.to/balapriya/static-code-analysis-a-beginners-guide-4h91</guid>
      <description>&lt;p&gt;Working on a large software project can often be a &lt;em&gt;challenging&lt;/em&gt; yet &lt;em&gt;rewarding&lt;/em&gt; experience. As a developer, you write code to solve problems. &lt;/p&gt;

&lt;p&gt;However, you‚Äôll have to write secure, bug-free code, and follow best coding practices while complying with standards. And this can be super difficult when you‚Äôre working under pressure.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/9DpmqxzBBreVJf3LWH/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9DpmqxzBBreVJf3LWH/giphy.gif" width="480" height="360"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;Static Code Analysis&lt;/strong&gt; can come in handy.&lt;/p&gt;

&lt;p&gt;By the end of this post, you‚Äôll have learned enough to answer the following questions: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is static code analysis? &lt;/li&gt;
&lt;li&gt;Why should you care about static analysis as a developer?&lt;/li&gt;
&lt;li&gt;What are the advantages and limitations of static code analysis?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-static-code-analysis"&gt;
  &lt;/a&gt;
  What is static code analysis?
&lt;/h2&gt;

&lt;p&gt;In simple terms, &lt;strong&gt;static analysis&lt;/strong&gt;, or &lt;strong&gt;static code analysis&lt;/strong&gt; scans your code to identify potential bugs, weaknesses, and anti-patterns‚Äîall without actually executing the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So how exactly does static analysis work under the hood?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, static analysis often involves &lt;em&gt;parsing&lt;/em&gt; of the source code into an &lt;em&gt;intermediary representation&lt;/em&gt; on which you can run analysis. This analysis then returns potential security issues, bugs, and performance issues in your code‚Äîwhich you can fix almost immediately.&lt;/p&gt;

&lt;p&gt;Now that you know what static analysis is, you‚Äôll learn how it can help you write better code in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-care-about-static-analysis-as-a-developer"&gt;
  &lt;/a&gt;
  Why should you care about static analysis as a developer?
&lt;/h2&gt;

&lt;p&gt;As a developer, static analysis helps you in every step of the development process. You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;write code, &lt;/li&gt;
&lt;li&gt;run static analysis, &lt;/li&gt;
&lt;li&gt;review, and &lt;/li&gt;
&lt;li&gt;fix reported bugs‚Äîwithout having to wait for code reviews. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it‚Äôs a lot easier to fix bugs as and when they arise rather than having to regress and do it much later.&lt;/p&gt;

&lt;p&gt;Unlike the conventional testing process, where you need a specific module to be all ready to go, static analysis only requires a &lt;strong&gt;chunk of code that can be modeled&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The term ‚Äò&lt;strong&gt;modeled&lt;/strong&gt;‚Äô here means that the code can be parsed into that intermediary representation on which the analyzer can be run. Please note that your code is never actually run in the process.&lt;br&gt;
This intermediary representation is often the &lt;strong&gt;Abstract Syntax Tree (AST)&lt;/strong&gt;. If you'd like to know more about ASTs, consider giving &lt;a href="https://dev.to/balapriya/abstract-syntax-tree-ast-explained-in-plain-english-1h38"&gt;this&lt;/a&gt; post a read.&lt;/p&gt;

&lt;p&gt;Because of how static analysis can be integrated into development right from the beginning, you can run analysis at every step and make sure your code meets the standards. &lt;/p&gt;

&lt;p&gt;This ensures that your code is almost bug-free when the actual testing process begins.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/L1R1tvI9svkIWwpVYr/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/L1R1tvI9svkIWwpVYr/giphy.gif" width="480" height="270"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So far, you‚Äôve learned how you can benefit from static analysis as a developer. Let‚Äôs put together the advantages in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-static-analysis"&gt;
  &lt;/a&gt;
  Advantages of Static Analysis
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Static analysis is much faster and a lot more efficient than manual code reviews.&lt;/li&gt;
&lt;li&gt;The earlier you detect bugs and security issues, the easier it is to fix them. This saves time and substantially &lt;em&gt;reduces cost&lt;/em&gt;. - Waiting until deployment and then checking for vulnerabilities, regressing, and making fixes is needlessly complex and time-consuming.&lt;/li&gt;
&lt;li&gt;By shipping software that‚Äôs backed by quality code, you build trust, gain and retain customer base. This in turn motivates you to build more helpful products.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0_E692j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qy6497tarm28t1cql1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0_E692j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qy6497tarm28t1cql1o.jpg" alt="Advantages of static analysis" width="516" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, are there any caveats yet? Let‚Äôs summarize the limitations of static analysis in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-of-static-analysis"&gt;
  &lt;/a&gt;
  Limitations of static analysis
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the flip side, static analysis is prone to &lt;strong&gt;false positives&lt;/strong&gt;. The analysis may report too many bugs, some of which may not actually be bugs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a large codebase, reviewing each of the reported bugs and vulnerabilities could come across as an overkill. Therefore, running static analysis as you code your way through the project is recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static analysis can &lt;strong&gt;miss&lt;/strong&gt; certain &lt;strong&gt;subtle bugs&lt;/strong&gt; which require human expertise. But it‚Äôs possible to fix them in subsequent steps of code review.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And it‚Äôs always possible to improve the static analysis tool by embedding this intelligence to identify new bugs‚Äîtherefore, static analysis is &lt;em&gt;extensible&lt;/em&gt; to find new bugs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this post helped you get a high-level overview of static analysis, its advantages and limitations. See you all soon in another post!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codequality</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Abstract Syntax Tree (AST) - Explained in Plain English</title>
      <author>Bala Priya C</author>
      <pubDate>Mon, 06 Dec 2021 17:14:18 +0000</pubDate>
      <link>https://dev.to/balapriya/abstract-syntax-tree-ast-explained-in-plain-english-1h38</link>
      <guid>https://dev.to/balapriya/abstract-syntax-tree-ast-explained-in-plain-english-1h38</guid>
      <description>&lt;p&gt;As a developer, the source code that you write is all so concise and elegant. And other developers can read, and understand your code with ease. However, a compiler has to do a lot more to make sense of your code.&lt;/p&gt;

&lt;p&gt;In this post, you‚Äôll learn how compilers try to understand what your code does, and focus on what an &lt;strong&gt;Abstract Syntax Tree(AST)&lt;/strong&gt; is, and its &lt;em&gt;relevance to static analysis&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-compiler-make-sense-of-your-code"&gt;
  &lt;/a&gt;
  How does the compiler make sense of your code?
&lt;/h2&gt;

&lt;p&gt;The steps involved in the compiler‚Äôs processing of source code are illustrated below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tdkv1Uip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq40ro9228f1dmyfipty.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tdkv1Uip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq40ro9228f1dmyfipty.jpg" alt="Steps in the processing of source code" width="632" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs expand on this a bit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The source code is first split into smaller chunks called tokens through the process of &lt;strong&gt;lexical analysis&lt;/strong&gt;. Lexical analysis is also called tokenization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The tokens are then parsed into a tree called the syntax tree by the &lt;strong&gt;parser&lt;/strong&gt;. An Abstract Syntax Tree (AST) abstracts out certain details, and retains just enough information to help the compiler understand the structure of the code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Therefore, an AST is a &lt;strong&gt;tree&lt;/strong&gt; data structure that best represents the &lt;strong&gt;syntactic&lt;/strong&gt; structure of the &lt;strong&gt;source code&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don‚Äôt worry if things aren‚Äôt clear just yet! Over the next few minutes, you‚Äôll draw a relatable analogy. And understand how the compiler works very similarly to how you'd try to make sense of a sentence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lexical-analysis"&gt;
  &lt;/a&gt;
  Lexical Analysis
&lt;/h2&gt;

&lt;p&gt;In this section, you‚Äôll learn about lexical analysis. &lt;/p&gt;

&lt;p&gt;Suppose you‚Äôre learning a new language‚Äînot a programming language though :). And you‚Äôre given the task of inferring the meaning of a sentence in that language. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So how would you do it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ofSBivnP3i4u9SCdy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ofSBivnP3i4u9SCdy/giphy.gif" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a first step, you‚Äôll try identifying the nouns, verbs, or more generally, words that matter. And lexical analysis is very similar to this step.&lt;/p&gt;

&lt;p&gt;Given the source code, the compiler tries to first identify the different types of tokens that your code is composed of. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;token&lt;/strong&gt; could be any valid entity in the programming language‚Äîa literal that takes a fixed value, a variable, an operator, or a function call. &lt;/p&gt;

&lt;p&gt;As lexical analysis breaks down the source code into tokens, it is also called &lt;strong&gt;tokenization&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntactic-analysis"&gt;
  &lt;/a&gt;
  Syntactic Analysis
&lt;/h2&gt;

&lt;p&gt;So far, you know &lt;strong&gt;tokenization&lt;/strong&gt; leaves you with tokens, or entities‚Äîjust the way you‚Äôd identify entities in a sentence.&lt;br&gt;
Now that you‚Äôve identified the nouns, verbs etc. in the sentence, how‚Äôll you go about inferring its meaning? &lt;/p&gt;

&lt;p&gt;Well, you‚Äôll now try to &lt;strong&gt;parse the relationship&lt;/strong&gt; between the nouns, verbs and the like, to see how they fit together, and how they conform to the language‚Äôs grammar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lYpOXbTyaTF60/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lYpOXbTyaTF60/giphy.gif" width="328" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This leads to the step of &lt;strong&gt;syntax analysis&lt;/strong&gt;, or &lt;strong&gt;parsing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And to perform syntactic analysis, there‚Äôs a parser that processes these tokens and parses them into a tree called the &lt;strong&gt;Abstract Syntax Tree (AST)&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-on-ast-representation"&gt;
  &lt;/a&gt;
  More on AST Representation
&lt;/h2&gt;

&lt;p&gt;Just the way the different entities and their relationships are often language-specific, there‚Äôs no one common AST representation.&lt;/p&gt;

&lt;p&gt;In general, the AST models the relationship between tokens in the source code, and each node contains information about the type of token, and related data. &lt;/p&gt;

&lt;p&gt;For example, if your node represents a function call, the arguments and return values will be the associated data.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://astexplorer.net/"&gt;AST Explorer&lt;/a&gt; helps in visualizing ASTs in several popular languages such as Go, Python, Java, and JavaScript.&lt;br&gt;
Here's a simple example in Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"code more!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2A29qid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejf0neetgwy9sxk9aumo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2A29qid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejf0neetgwy9sxk9aumo.jpg" alt="Image description" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, the type of node is &lt;code&gt;VariableDeclaration&lt;/code&gt; as we declare the variable &lt;code&gt;my_str&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relevance-of-ast-in-development"&gt;
  &lt;/a&gt;
  Relevance of AST in Development
&lt;/h2&gt;

&lt;p&gt;In most languages, parsers that give you the AST will also give you the methods to traverse an AST. This would enable you to visit different nodes of the AST to understand and additionally perform analysis. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; define rules, &lt;/li&gt;
&lt;li&gt;traverse the parse tree by visiting each node, and &lt;/li&gt;
&lt;li&gt;check for violation of rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is where ASTs are relevant in static code analysis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Static code analysis involves parsing of the source code into an intermediary representation on which you can run analysis, without actually running the code. And the intermediary representation is often the AST. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This analysis then returns potential security issues, bugs, and performance issues in your code - which you can fix almost immediately. For more information on static analysis, consider reading &lt;a href="https://dev.to/balapriya/static-code-analysis-a-beginners-guide-4h91"&gt;this&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;In this tutorial, you‚Äôve learned:&lt;br&gt;
how lexical and syntactic analyses work,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify the tokens in the source code, and&lt;/li&gt;
&lt;li&gt;parse the relationship between these tokens to see how they fit together.
how ASTs are tree representations of your source code, and
how ASTs can help in static analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading. Hope you found this post helpful!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>compilers</category>
      <category>codereview</category>
    </item>
    <item>
      <title>What's the difference between C# and C++?</title>
      <author>ericaeducative</author>
      <pubDate>Mon, 06 Dec 2021 17:14:09 +0000</pubDate>
      <link>https://dev.to/educative/whats-the-difference-between-c-and-c-5d68</link>
      <guid>https://dev.to/educative/whats-the-difference-between-c-and-c-5d68</guid>
      <description>&lt;p&gt;C# and C++ are &lt;strong&gt;general-purpose programming languages&lt;/strong&gt; used for application development across various platforms. C# and C++ have rich histories. They‚Äôre both &lt;strong&gt;popular choices for software development, web development, and game development&lt;/strong&gt;. If you‚Äôre new to computer science, it may be difficult to choose which language to learn first. &lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll discuss the &lt;strong&gt;difference between C# and C++&lt;/strong&gt;, as well as their histories and applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#history"&gt;C# vs C++: A brief history&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#whencsharp"&gt;When was C# created?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whencpp"&gt;When was C++ created?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#overview"&gt;Overview and applications: C# vs C++&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#csharp"&gt;What is C#?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpp"&gt;What is C++?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#keydifferences"&gt;Major differences between C# and C++&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#compchart"&gt;Comparison chart: C# vs C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn"&gt;Should I learn C# or C++?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-vs-c-a-brief-history"&gt;
  &lt;/a&gt;
  C# vs C++: A brief history
&lt;/h2&gt;

&lt;p&gt;Both C# and C++ are &lt;strong&gt;based on the C programming language&lt;/strong&gt;. C is a low-level programming language that was developed in the 1970s for programming in the UNIX operating system. C has various applications to this day, including embedded systems and scripting processes for server-side web applications. Other C-based languages include Objective C and Not Quite C.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-was-c-created"&gt;
  &lt;/a&gt;
  When was C# created?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_T38z9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j8emtfqs8mcr7kx67nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_T38z9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j8emtfqs8mcr7kx67nf.png" alt="c sharp" width="880" height="375"&gt;&lt;/a&gt;&lt;br&gt;
C# (pronounced ‚ÄúC Sharp‚Äù) was developed in 2000 by Microsoft‚Äôs Anders Hejlsberg. It was known as ‚ÄúCool‚Äù or "C.O.O.L." in its early days, which stood for ‚ÄúC-Like Object Oriented Language.‚Äù C# was introduced as a generic object-oriented programming (OOP) language and a direct competitor to Java on the Windows platform. In 2005, C# version 2.0 was still in the process of catching up with Java by introducing generics and iterators. By 2007, C# was growing into a more distinct hybrid as both an object-oriented and functional language. &lt;/p&gt;

&lt;p&gt;C# has gained many features over the years and become a &lt;strong&gt;multi-platform language&lt;/strong&gt;. It was initially intended for development in the Microsoft ecosystem, but Microsoft has since released &lt;strong&gt;open-source tools that support C# development across various platforms&lt;/strong&gt;: the Visual Studio Code code editor, the Roslyn compiler, and the unified .NET platform.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#when-was-c-created"&gt;
  &lt;/a&gt;
  When was C++ created?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb49npG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2b1jab5btw0c2o8spoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb49npG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2b1jab5btw0c2o8spoz.png" alt="c plus plus" width="880" height="365"&gt;&lt;/a&gt;&lt;br&gt;
C++ was developed in 1979 by Bjarne Stroustrup, a Danish graduate student. Influenced by his PhD thesis, Stroustrup aimed to enhance C by incorporating features from Simula and other programming languages. C++ fulfilled the need for object-oriented programming within C. It was a general-purpose language that &lt;strong&gt;introduced objects and classes to C&lt;/strong&gt;. As such, it was colloquially known as ‚ÄúC with Classes‚Äù. The ‚Äú++‚Äù directly comes from C‚Äôs ‚Äò++‚Äô operator, which increments the value of a variable.  C++ has since changed significantly and adopted &lt;strong&gt;object-oriented, generic, and functional features&lt;/strong&gt; as well as facilities for low-level memory manipulation. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview-and-applications-c-vs-c"&gt;
  &lt;/a&gt;
  Overview and applications: C# vs C++
&lt;/h2&gt;

&lt;p&gt;At first glance, C# and C++ might seem to have more similarities than differences. They‚Äôre both &lt;strong&gt;multi-paradigm&lt;/strong&gt; languages that can support &lt;strong&gt;object-oriented, functional, and generic programming&lt;/strong&gt;. They are general-purpose, and widely used for software development, web development, and game development across platforms. Let‚Äôs examine each language individually before we compare their differences.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-c"&gt;
  &lt;/a&gt;
  What is C#?
&lt;/h3&gt;

&lt;p&gt;Here's &lt;strong&gt;Hello World&lt;/strong&gt; in C#.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class HelloWorld
{
    static void Main()
    {
        System.Console.WriteLine("Hello, World!");
    }
}
=&amp;gt; Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;C#, or C Sharp, is a &lt;strong&gt;high-level language&lt;/strong&gt; that runs on the &lt;strong&gt;.NET Framework&lt;/strong&gt;. It is a multi-paradigm language that includes support for structured, imperative, reflective, and concurrent programming paradigms. C# code is typically compiled using just-in-time (JIT) compilation in &lt;strong&gt;Common Language Runtime&lt;/strong&gt; (CLR), the virtual machine component of the .NET Framework. The code is converted to machine instructions that are executable on the computer‚Äôs CPU.&lt;/p&gt;

&lt;p&gt;C# was originally designed for the Microsoft platform. Today, it has a variety of development applications, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web applications&lt;/li&gt;
&lt;li&gt;Mobile applications for Android and iOS&lt;/li&gt;
&lt;li&gt;Desktop applications for Windows, Mac, and Linux &lt;/li&gt;
&lt;li&gt;Video games on the Unity game engine

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-c"&gt;
  &lt;/a&gt;
  What is C++?
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;br&gt;
Here's &lt;strong&gt;Hello World&lt;/strong&gt; in C++.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main() {
  cout &amp;lt;&amp;lt; "Hello, World!";
  return 0;
}
=&amp;gt; Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;C++ is considered an &lt;strong&gt;intermediate language&lt;/strong&gt;, meaning it combines features of high-level and low-level programming languages. It is a multi-paradigm language that includes support for procedural, object-oriented, imperative, and generic programming paradigms. As a low-level language, it gives you a lot of control over your code. C++ is often a go-to language for &lt;strong&gt;large and embedded systems&lt;/strong&gt;, and is known for its speed and flexibility. C++ is most often implemented as a compiled language, meaning the source code compiles directly into machine code. &lt;/p&gt;

&lt;p&gt;C++ is often used for system programming and building applications with resource constraints. It is also used to develop the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desktop applications&lt;/li&gt;
&lt;li&gt;Operating systems&lt;/li&gt;
&lt;li&gt;Embedded systems&lt;/li&gt;
&lt;li&gt;Servers&lt;/li&gt;
&lt;li&gt;GUI applications like browsers &lt;/li&gt;
&lt;li&gt;Advanced computation projects&lt;/li&gt;
&lt;li&gt;Video games on the Unreal game engine 

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#major-differences-between-c-and-c"&gt;
  &lt;/a&gt;
  Major differences between C# and C++
&lt;/h2&gt;

&lt;p&gt;Let's start with three major differences between C# and C++:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;C# and C++ are classified as different levels of languages&lt;/strong&gt;: C# is a high-level language. C++ is an intermediate language, which means it combines features of high-level and low-level languages. As a high-level language, C# is inherently easier to learn and faster for building applications. High-level languages are user-centric, while low-level languages are machine-centric. However, high-level languages are also inherently limited because they can‚Äôt perform low-level programming. A low-level programming language offers far more flexibility with your code, which makes C++ more impressive in the category of flexibility.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C# and C++ code run differently on machines&lt;/strong&gt;: C++ applications can run natively. C#, on the other hand, requires a virtual machine. C++ code is very similar to machine code. Your source code is compiled and converted to machine code without the need for a virtual machine. On the contrary, you need to install the .NET framework to run a C# application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C# and C++ have different approaches to memory management&lt;/strong&gt;: C# offers automatic garbage collection, but C++ doesn‚Äôt. This means that C++ requires you to manually manage what C# does automatically in a virtual machine. The plus side to manually managing your memory on C++ is that you also have opportunities to optimize your application from the ground up. 

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-chart-c-vs-c"&gt;
  &lt;/a&gt;
  Comparison chart: C# vs C++
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Spc0Hr6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x3hz7w77h6e1fat9y8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Spc0Hr6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x3hz7w77h6e1fat9y8d.png" alt="comparison chart csharp vs Cpp" width="880" height="931"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-learn-c-or-c"&gt;
  &lt;/a&gt;
  Should I learn C# or C++?
&lt;/h2&gt;

&lt;p&gt;You can choose whether to learn C# or C++ based on your personal and professional goals. Some important factors to consider are the industry you want to work in, the amount of time you‚Äôre willing to spend learning a language, and the types of applications you want to develop. &lt;/p&gt;

&lt;p&gt;Here are some factors to consider when choosing which programming language to learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Your game development goals&lt;/strong&gt;: C# and C++ are both used for game development. The Unreal game engine uses C++, while the Unity game engine uses C#. C++ is slightly more popular in the industry because it allows programmers more control than C#. If you‚Äôre looking to enter the gaming industry, you might want to base your decision off the language used by your favorite companies‚Äô game engines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How much flexibility you want in a language&lt;/strong&gt;: Flexibility differs between the languages. C# is easier to learn than C++, but C++ gives you more flexibility with your code as a low-level language. You can optimize and customize an application however you wish with C++. Relatively speaking, you can do &lt;em&gt;anything&lt;/em&gt; with C++.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The types of applications you want to develop&lt;/strong&gt;: The applications you want to develop may also determine your choice. C# is a top pick for applications in the Microsoft ecosystem, especially for Windows desktop applications. However, C# is a cross-platform language that can build for other platforms as well. One thing C# cannot do is create embedded applications. For this kind of task, C++ should be your go-to. C++ is the top pick for programming for Linux. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your web development goals&lt;/strong&gt;: C# is a popular choice if you‚Äôre looking to get into web development. You can use C# to build dynamic sites and web applications using .NET or other open-source platforms. C++ is less popular for web development for a few reasons. To start, cloud-based hosting is expensive for C++ and there are no stable and mature frameworks for C++ web development. That being said, C++ web development &lt;em&gt;is&lt;/em&gt; possible, and comes with some benefits: more control, higher speed, relatively less resource consumption, and an understanding of how the web really works. There are certainly developers who prefer C++ for web development, especially when they have limited power and many concurrent users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your desired learning curve&lt;/strong&gt;: The learning curve you‚Äôre willing to tackle might also impact your decision. C++ usually takes longer to learn than C#. This is because C++ is a low-level language and is machine-oriented, while C# is more intuitive to users as a higher-level language. The &lt;strong&gt;languages you already know&lt;/strong&gt; might shorten your learning curve for either language. For instance, C# may be easy to learn if you know Java, because they're similar languages. C++ may come easier to you if you‚Äôre familiar with the C programming language, or have a background in another high-level or low-level language.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How well you want to understand computers&lt;/strong&gt;: You may not prefer it for every project, but C++ is a great language to learn if you‚Äôre a computer programmer who wants a deep understanding of how computers work. C++ lets you get hands-on with low-level concepts, and will help you grasp how computers think and operate. Other languages might make more sense to you after you‚Äôve mastered C++.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;We've seen that C# and C++ are distinct languages that are often used for the same purposes. They are popular for web development, game development, mobile development, and software development across various platforms. They are classified as different levels of languages and their code is processed differently by machines. &lt;br&gt;
Whatever you choose, there are certainly advantages for learning either language. If you have the time and the inclination, you may even decide to learn both!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;To help you master C++&lt;/strong&gt;, we‚Äôve created the &lt;a href="https://www.educative.io/path/cpp-for-programmers"&gt;&lt;strong&gt;C++ for Programmers&lt;/strong&gt;&lt;/a&gt; learning path. The 5-module interactive learning path covers C++ basics, templates, OOP, concurrent programming, and more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To help you get hands-on with C#&lt;/strong&gt;, we‚Äôve created this course: &lt;a href="https://www.educative.io/courses/c-sharp-for-programmers-a-practical-guide"&gt;&lt;strong&gt;C# for Programmers: A Practical Guide&lt;/strong&gt;&lt;/a&gt;. The course covers fundamentals of C# programming including loops, arrays, and OOP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-c-and-c"&gt;
  &lt;/a&gt;
  Continue learning about C# and C++
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/c-is-a-good-first-language-to-learn"&gt;Why C++ is a good first language to learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/best-cpp-ides-code-editors"&gt;The 11 best C++ IDEs (and code editors) for 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/solid-principles-oop-c-sharp"&gt;S.O.L.I.D. Principles of Object-Oriented Programming in C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>csharp</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>PHP cheat sheet (updated to PHP 8.1)</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 06 Dec 2021 17:07:42 +0000</pubDate>
      <link>https://dev.to/ericchapman/php-cheat-sheet-updated-to-php-81-3o4p</link>
      <guid>https://dev.to/ericchapman/php-cheat-sheet-updated-to-php-81-3o4p</guid>
      <description>&lt;p&gt;Follow me!: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
Here is my cheat sheet I created along my learning journey. If you have any recommendations (addition/subtraction) let me know.&lt;br&gt;

&lt;br&gt;
PHP local server&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php -S localhost:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Comments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// one line comment&lt;/span&gt;

&lt;span class="cm"&gt;/*
This is a multiple-lines comment block
that spans over multiple
lines
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Naming conventions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;// PHP opening/closing tag
&lt;span class="cp"&gt;&amp;lt;?php
  echo "Hello World";
?&amp;gt;&lt;/span&gt;
// if no closing tag the rest of the file will be considered PHP

// Short syntax for PHP echo
&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;

//Enable strict typing (first line of your PHP file)
&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Include a PHP file&lt;/span&gt;
&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'app/Product.php'&lt;/span&gt;

&lt;span class="c1"&gt;// Create a namespace&lt;/span&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Use a namespace&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;  &lt;span class="c1"&gt;// camelCase&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updateProduct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// camelCase&lt;/span&gt;
&lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductItem&lt;/span&gt; &lt;span class="c1"&gt;// StudlyCaps&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'123abc'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// all upper case with underscore separators&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output &amp;amp; Input&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Debug output&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Input from console&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'What is your name : '&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variables Declaration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//string&lt;/span&gt;
&lt;span class="nv"&gt;$isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//boolean&lt;/span&gt;
&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//integer&lt;/span&gt;
&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.95&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//float&lt;/span&gt;
&lt;span class="nv"&gt;$fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'banana'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//array&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;MAX_USERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//constant&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MAX_USERS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//constant&lt;/span&gt;

&lt;span class="c1"&gt;// Assign 'by reference' with the &amp;amp; keyword&lt;/span&gt;
&lt;span class="nv"&gt;$name_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$name_1&lt;/span&gt;

&lt;span class="c1"&gt;// Type conversion&lt;/span&gt;
&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Your age: '&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="s1"&gt;'Your age is'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;gettype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// int&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;is_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;is_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Strings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// String can use single quote&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="c1"&gt;// or double quote&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Mike"&lt;/span&gt;

&lt;span class="c1"&gt;// Double quote string can escape characters \n = new line  \t = tab  \\ = backslash&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Mike&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Hello David"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Double quote string can do interpolation&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// string concat&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// string length&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove space(s) before and after&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Convert to lowercase / uppercase&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;strtoupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Converts the first character to uppercase&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;ucfirst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 'Mike' &lt;/span&gt;

&lt;span class="c1"&gt;// Replace text a by text b in $text&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// String Contains (PHP 8)&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ke'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;span class="c1"&gt;// Find numeric position of first occurrence &lt;/span&gt;
&lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# 2&lt;/span&gt;

&lt;span class="c1"&gt;// Returns portion of string (offset / length)&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# Mi &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Numbers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Shortcut addition assignment&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;

&lt;span class="c1"&gt;// Shortcut subtraction assignment&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="c1"&gt;// 9&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// 9&lt;/span&gt;

&lt;span class="c1"&gt;// Check if numeric&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'59.99'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;span class="c1"&gt;// Round a number&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// returns 1&lt;/span&gt;

&lt;span class="c1"&gt;// Round a number with precision&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.49356&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// returns 1.49&lt;/span&gt;

&lt;span class="c1"&gt;// Random number &lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 89&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conditionals&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If / elseif / else&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'condition 10'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'condition 5'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'all other conditions'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// And condition = &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$condition2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'10 and 5'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Or condition = ||&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$condition2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'10 or 5'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// One line &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Null check&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Comparaison operation&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="c1"&gt;// equal no type check&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="c1"&gt;// equal with type check&lt;/span&gt;
&lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="c1"&gt;//not equal&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="c1"&gt;//or&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c1"&gt;//and&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;//greater than&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="c1"&gt;//less than&lt;/span&gt;

&lt;span class="c1"&gt;// Ternary operator (true : false)&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Null Coalesce Operator&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;

&lt;span class="c1"&gt;//Null Coalesce Assignment&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Null Safe Operator (PHP 8) will return null if one ? is null&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Null Safe + Null Coalesce (if null will return 'No user profile')&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Not applicable'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Spaceship operator return -1 0 1&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;usort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ['John', 'Mike', 'Paul']&lt;/span&gt;

&lt;span class="c1"&gt;// Return false when convert as boolean&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;// Compare same variable with multiple values&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is red'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is yellow'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is red'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Match Expression (PHP 8)&lt;/span&gt;
&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Check if variable declare&lt;/span&gt;
&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loops and Iterations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//for loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//while loop&lt;/span&gt;
&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//do while&lt;/span&gt;
&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// foreach with break / continue exemple&lt;/span&gt;
&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// exit loop&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// next loop iteration&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrays&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Array declaration can contain any types&lt;/span&gt;
&lt;span class="nv"&gt;$example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;50.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'20'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Array declaration&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Direct access to a specific element&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//output Peter&lt;/span&gt;

&lt;span class="c1"&gt;// How to access an array in an array&lt;/span&gt;
&lt;span class="nv"&gt;$example&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;

&lt;span class="c1"&gt;//add a element to an array&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Micheal'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Array merge&lt;/span&gt;
&lt;span class="nv"&gt;$array3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$array2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Merge with spreading operator (also work with associative array)&lt;/span&gt;
&lt;span class="nv"&gt;$array3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$array1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$array2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Array Concat with Spread Operator&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// ['John', 'Mike', 'Peter', 'Paul']&lt;/span&gt;

&lt;span class="c1"&gt;//Remove array entry:&lt;/span&gt;
&lt;span class="nb"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;//Array to string&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output Mike, Shawn, John, Micheal&lt;/span&gt;

&lt;span class="c1"&gt;// String to Array&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['Mike', 'Shawn', 'John']&lt;/span&gt;


&lt;span class="c1"&gt;//loop for each array entry&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Number of items in a Array&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  

&lt;span class="c1"&gt;//Associative array declaration (key =&amp;gt; value):&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'genre'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'men'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Add to ass. array:&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//loop ass. array key =&amp;gt; value: &lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Check if a specific key exist&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Return keys&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['age', 'genre']&lt;/span&gt;

&lt;span class="c1"&gt;// Return values&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;array_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [45, 'men']&lt;/span&gt;

&lt;span class="c1"&gt;//Array filter (return a filtered array)&lt;/span&gt;
&lt;span class="nv"&gt;$filteredPeople&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Array map (return transform array):&lt;/span&gt;
&lt;span class="nv"&gt;$onlyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Search associative array&lt;/span&gt;
&lt;span class="nv"&gt;$items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'100'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'product 1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'200'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'product 2'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'300'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'product 3'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'400'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'product 4'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;# search all value in the 'name' column&lt;/span&gt;
&lt;span class="nv"&gt;$found_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'product 3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;# return 2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//function declararion&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'defaultvalue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//function call&lt;/span&gt;
&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//function call with named parameters (PHP 8)&lt;/span&gt;
&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// order can change&lt;/span&gt;

&lt;span class="c1"&gt;//function variables params&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Closure function&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow functions&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// Typed parameter and typed return&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Typed or null&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;?string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Union type (or)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Intersection type (and)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;count_and_interate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Countable&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Return any type (mixed)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;logInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;mixed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No return (void)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;logInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enumerations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Declaration&lt;/span&gt;
&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;InvoiceStatus&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Sent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Paid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The enum can then be use as a type&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;printInvoiceStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;InvoiceStatus&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;printInvoiceStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;InvoiceStatus&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nc"&gt;Sent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sent&lt;/span&gt;

&lt;span class="c1"&gt;// enum with return value and public function exemple&lt;/span&gt;
&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;InvoiceStatus&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Paid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nc"&gt;Sent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Sent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nc"&gt;Paid&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Paid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nc"&gt;Cancelled&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Cancelled'&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getInvoiceStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;InvoiceStatus&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;getInvoiceStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;InvoiceStatus&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nc"&gt;Paid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Paid1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get the current dir&lt;/span&gt;
&lt;span class="nv"&gt;$current_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Check if file exist&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/first.txt'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Read file content into one variable&lt;/span&gt;
&lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//File read&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output lines until EOF is reached&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;feof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;br&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// File write&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'export.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Write key name as csv header&lt;/span&gt;
&lt;span class="nb"&gt;fputcsv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

&lt;span class="c1"&gt;//Write lines (format as csv)&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;fputcsv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Errors&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Throw Error&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCondition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Data format error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Catch the Error&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$db&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;checkData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OOP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//class declaration&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// object instantiation&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;

&lt;span class="c1"&gt;//class properties and constructor&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Constructor Property Promotion (PHP 8)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Getter and Setter&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$name must be a string!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Readonly properties (PHP 8.1)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//static constructor&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nc"&gt;Mike&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nc"&gt;Taylor&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Static Method&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call static method&lt;/span&gt;
&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Static method call&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Static constant&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Connection&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;MAX_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nc"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MAX_USER&lt;/span&gt; &lt;span class="c1"&gt;# 100&lt;/span&gt;

&lt;span class="c1"&gt;// class inheritance&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Override method'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// self keyword reference current class (not modify by inheritance late binding like static will be)&lt;/span&gt;
&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Interface&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;makeSound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;makeSound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Meow"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$animal&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;makeSound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//Trait (mix-in)&lt;/span&gt;
&lt;span class="kd"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greetings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Greetings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Follow me!: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;


</description>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploying to Heroku with SvelteKit</title>
      <author>Nostro</author>
      <pubDate>Mon, 06 Dec 2021 17:02:34 +0000</pubDate>
      <link>https://dev.to/nostro/deploying-to-heroku-with-sveltekit-3350</link>
      <guid>https://dev.to/nostro/deploying-to-heroku-with-sveltekit-3350</guid>
      <description>&lt;p&gt;If you're trying to deploy with the built-in &lt;code&gt;adapter-auto&lt;/code&gt;, you will probably encounter an &lt;code&gt;E10 error&lt;/code&gt; and/or a &lt;code&gt;R10 error&lt;/code&gt; with &lt;code&gt;svelte-kit not found&lt;/code&gt;. &lt;a href="https://bight.dev/log/deploying-a-sveltekit-application-to-heroku/"&gt;This post&lt;/a&gt; details how to correct these. &lt;/p&gt;

&lt;p&gt;The other option is to use the &lt;code&gt;adapter-node&lt;/code&gt; which is what we'll do here; you can read about adapters in the &lt;a href="https://kit.svelte.dev/docs#adapters"&gt;SvelteKit docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may also be interested in&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/nostro/using-environment-variables-with-sveltekit-544b"&gt;SvelteKit + .env&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/nostro/using-tailwindcss-with-sveltekit-25i6"&gt;SvelteKit + TailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-svelte-app"&gt;
  &lt;/a&gt;
  Create a svelte app
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;my-awesome-app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;my-awesome-app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;sveltejs/adapter-node&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or if you're feeling lucky (I do) and are already in the &lt;code&gt;my-awesome-app&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;sveltejs/adapter-node&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modify-the-config-file-to-use-the-right-adapter"&gt;
  &lt;/a&gt;
  Modify the config file to use the right adapter
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;svelte.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Change&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/adapter-auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/adapter-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Make sure this is present&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="c1"&gt;//other stuff&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#indicate-the-raw-node-endraw-version-required"&gt;
  &lt;/a&gt;
  Indicate the &lt;code&gt;node&lt;/code&gt; version required
&lt;/h3&gt;

&lt;p&gt;At time of writing Heroku defaults to &lt;code&gt;14.1&lt;/code&gt; if there is no indication otherwise, and the build may fail if your version is different.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;engines&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on your case, &lt;code&gt;npm&lt;/code&gt; version may not be strictly necessary for the build to succeed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-heroku-app"&gt;
  &lt;/a&gt;
  Create the Heroku app
&lt;/h3&gt;

&lt;p&gt;You should have the &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt; installed and be logged in; otherwise install it and run  &lt;code&gt;heroku login&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates the app at &lt;code&gt;my-awesome-app.herokuapp.com&lt;/code&gt; - if the name isn't available the command will fail. If you omit the name you will get assigned a random poetic name by Heroku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;heroku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;my-awesome-app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My commit message"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heroku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default this create the app in the US region; to do it in the EU run &lt;code&gt;heroku create my-awesome-app --region eu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the build finishes, your app will be deployed at &lt;code&gt;my-awesome-app.herokuapp.com&lt;/code&gt; or &lt;code&gt;random-poetic-name.herokuapp.com&lt;/code&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>heroku</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Can't cache this!</title>
      <author>Alberto Guerra Gonz√°lez</author>
      <pubDate>Mon, 06 Dec 2021 16:15:45 +0000</pubDate>
      <link>https://dev.to/albertowar/cant-cache-this-5925</link>
      <guid>https://dev.to/albertowar/cant-cache-this-5925</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;We often see companies publishing a short incident recap after they had a major outage. A couple of recent ones were &lt;a href="https://engineering.fb.com/2021/10/05/networking-traffic/outage-details/"&gt;Facebook&lt;/a&gt; and &lt;a href="https://blog.cloudflare.com/details-of-the-cloudflare-outage-on-july-2-2019/"&gt;Cloudflare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although knowing the actual root cause is interesting, I think there is a lot to learn from how the engineers managed to troubleshoot the issue.&lt;/p&gt;

&lt;p&gt;So I decided to take a stab at it and walk you through the troubleshooting process that took place in one of our recent incidents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-beginning-of-it-all"&gt;
  &lt;/a&gt;
  The beginning of it all
&lt;/h2&gt;

&lt;p&gt;A few weeks ago, my team was preparing for the launch of an alpha version of a new product. Engineers were heads down wrapping up the last features and smashing bugs when our QA raised a bug in production.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fa6riGOBa6s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The users should have been redirected to the payment page. However, quite often, the underlying request would timeout when anyone was attempting to click on the Buy button. &lt;/p&gt;

&lt;p&gt;This was a regression and a major one, hence we decided to jump on it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/nrXif9YExO9EI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/nrXif9YExO9EI/giphy.gif" alt="Fire" width="500" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#investigation"&gt;
  &lt;/a&gt;
  Investigation
&lt;/h2&gt;

&lt;p&gt;The first step was to dive into the &lt;strong&gt;backend app logs&lt;/strong&gt;. Here is what we saw:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMPWw_aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htdvncm5ck5iftlsa5hy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMPWw_aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htdvncm5ck5iftlsa5hy.png" alt="Bug logs" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Judging by the logs, it looked like the request &lt;strong&gt;froze&lt;/strong&gt; üßä at some point during the execution path. This was hard to believe since the app is simple enough that shouldn't lead to any deadlocks. However, we should have seen an &lt;code&gt;Exception&lt;/code&gt; somewhere and that wasn't the case here.&lt;/p&gt;

&lt;p&gt;Also, what made it even more interesting was the fact that we also saw some requests that executed normally.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9HNUDwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzxtxkaq64gawi8s1yva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9HNUDwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzxtxkaq64gawi8s1yva.png" alt="Logs working" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nevertheless, since the bug was fairly easy to reproduce, we needed to keep digging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diving-into-the-code"&gt;
  &lt;/a&gt;
  Diving into the code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xiEUIhXadorPr9tait/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xiEUIhXadorPr9tait/giphy.gif" alt="Dive" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step in the investigation was to analyze the log lines in the code and pin point üéØ the section that was causing the request thread to freeze. This can simply be done by &lt;strong&gt;looking at the last log line reported and the next log line that should have been reported&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This exercise brought to light the first suspect. As part of the request, we &lt;strong&gt;fetched a large JSON file from an external service&lt;/strong&gt;. Since this file didn't change very often, we added &lt;strong&gt;a caching layer&lt;/strong&gt; to save some network requests and reduce the latency of the request.&lt;/p&gt;

&lt;p&gt;To implement this caching layer, we decided to use a &lt;a href="https://github.com/google/guava"&gt;Guava&lt;/a&gt; cache. The cache was configured so that it would return old values while the new values were being fetched.&lt;/p&gt;

&lt;p&gt;Here is a fragment of code showing how the cache was configured:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CacheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;refreshAfterWrite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CACHE_REFRESH_TIME_MS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buildCacheLoader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;CacheLoader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;buildCacheLoader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CacheLoader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fetching data"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;HttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;connectTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofSeconds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMEOUT_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;HttpRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;HttpRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofSeconds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMEOUT_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;HttpResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;HttpResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BodyHandlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;At this point, it was clear that the cache wasn't behaving as we expected since:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It wasn't logging the potential &lt;code&gt;Exception&lt;/code&gt; that would explain what was causing the request thread to hang.&lt;/li&gt;
&lt;li&gt;It was causing the request thread to hang.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, I decided to spend some time trying to understand in depth how Guava caches work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-playground"&gt;
  &lt;/a&gt;
  Setting up the playground
&lt;/h2&gt;

&lt;p&gt;In situations like this one, I usually create a playground project where I can remove all the noise (business logic) and focus on what matters üßê.&lt;/p&gt;

&lt;p&gt;I had to come up with a setup as close to production to ensure I was able to reproduce the exact same issue. &lt;/p&gt;

&lt;p&gt;To achieve that, I decided to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interact with the cache in &lt;strong&gt;separate threads&lt;/strong&gt;. Since the web server framework we rely on executes each request on a different thread (within a thread pool).&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;WireMock&lt;/strong&gt; to simulate the calls to the external service. That way we can make sure the network stack is exercised and that it is easy to set up edge case conditions (delays, error responses, etc).&lt;/li&gt;
&lt;li&gt;Use JUnit to setup the different scenarios and run them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To ensure we have visibility in everything that happens during the different test cases, the threads will run the following Runnable which includes several log lines:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Slf4j&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CacheReader&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Runnable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;LoadingCache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CacheReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoadingCache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Reading value at {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value {} at {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"something"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ExecutionException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exception while loading value at {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#mystery-1-exception-mia"&gt;
  &lt;/a&gt;
  ‚ùì Mystery 1 - Exception MIA
&lt;/h3&gt;

&lt;p&gt;The first mystery to solve was the missing &lt;code&gt;Exception&lt;/code&gt;. For that, there are two potential failures we could have experienced in production that should have reported an &lt;code&gt;Exception&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The cache failed to be populated on the first attempt.&lt;/li&gt;
&lt;li&gt;The cache was populated but an attempt to refresh the cache later on failed (either due to an error on the external service or a network timeout).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#test-1-given-an-empty-cache-and-a-slow-network-connection-when-fetching-the-cache-it-should-throw-an-exception"&gt;
  &lt;/a&gt;
  üß™ Test 1 - Given an empty cache and a slow network connection, when fetching the cache, it should throw an Exception
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="nd"&gt;@SneakyThrows&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenEmptyCache_whenRemoteServiceTimeout_shouldThrowException&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CacheFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buildCacheWithoutExceptionHandling&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wireMockServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMEOUT_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CacheReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Which reports the following logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1861 [Thread-8] INFO  org.example.CacheReader [] - Reading value at 1637941200937
1872 [Thread-8] INFO  org.example.CacheFactory [] - Fetching data
2925 [Thread-8] ERROR org.example.CacheReader [] - Exception while loading value at 1637941202006
java.util.concurrent.ExecutionException: java.net.http.HttpTimeoutException: request timed out 
... &amp;lt;omitted stacktrace&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the cache is empty, the thread loading the cache seems to be the one that receives the &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we didn't see any &lt;code&gt;Exception&lt;/code&gt; in our logs, this means this wasn't the failure we observed in production. Let's keep going.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#test-2-given-an-empty-cache-and-a-external-service-outage-when-fetching-the-cache-it-should-throw-an-raw-exception-endraw-"&gt;
  &lt;/a&gt;
  üß™ Test 2 - Given an empty cache and a external service outage, when fetching the cache, it should throw an &lt;code&gt;Exception&lt;/code&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenEmptyCache_whenRemoteServiceReturns500_shouldThrowException&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;LoadingCache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;CacheFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buildCacheWithoutExceptionHandling&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wireMockServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;setupFailedResponse&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CacheReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Which reports the following logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1793 [Thread-8] INFO  org.example.CacheReader [] - Reading value at 1637944243058
1807 [Thread-8] INFO  org.example.CacheFactory [] - Fetching data
2070 [Thread-8] ERROR org.example.CacheReader [] - Exception while loading value at 1637944243341
java.util.concurrent.ExecutionException: com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input
 at [Source: (String)""; line: 1, column: 0]
... &amp;lt;omitted stacktrace&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, the calling thread is getting a serialization &lt;code&gt;Exception&lt;/code&gt; since the response body was not the expected one.&lt;/p&gt;

&lt;p&gt;Again, since we didn't see any &lt;code&gt;Exception&lt;/code&gt; in our logs, we need to continue the investigation.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#test-3-given-a-populated-cache-due-for-refresh-and-a-slow-network-connection-when-fetching-the-cache-it-should-get-the-old-value"&gt;
  &lt;/a&gt;
  üß™ Test 3 - Given a populated cache due for refresh and a slow network connection, when fetching the cache, it should get the old value
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="nd"&gt;@SneakyThrows&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenCacheDueForRefresh_whenRemoteServiceTimeout_shouldGetOldValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CacheFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buildCacheWithoutExceptionHandling&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wireMockServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"old_value"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CacheReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;waitForCacheToExpire&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_value"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMEOUT_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CacheReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Which reports the following logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1834 [Thread-8] INFO  org.example.CacheReader [] - Reading value at 1637945326283
1846 [Thread-8] INFO  org.example.CacheFactory [] - Fetching data
2099 [Thread-8] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945326554
3114 [Thread-9] INFO  org.example.CacheReader [] - Reading value at 1637945327569
3115 [Thread-9] INFO  org.example.CacheFactory [] - Reloading
3115 [Thread-9] INFO  org.example.CacheFactory [] - Fetching datacom.google.common.cache.LocalCache$Segment$1 run
WARNING: Exception thrown during refresh
java.util.concurrent.ExecutionException: java.net.http.HttpTimeoutException: request timed out
    at com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:566)
4296 [Thread-9] INFO  org.example.CacheReader [] - Value old_value at 1637941240139
    at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:527)
... &amp;lt;omitted stacktrace&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In these logs, we see that the thread that attempts to load the value after the cache is due for refresh &lt;strong&gt;will block&lt;/strong&gt; (we will follow up on this later) in attempt to reload the new value. However, if that fails, it will get the old value and an Exception will be logged in the background.&lt;/p&gt;

&lt;p&gt;When we look into the &lt;a href="https://github.com/google/guava/wiki/CachesExplained#refresh"&gt;Guava documentation&lt;/a&gt; for the type of cache we are using (&lt;code&gt;refreshAfterWrite&lt;/code&gt;), we find the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If an exception is thrown while refreshing, the old value is kept, and the exception is logged and swallowed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This explains why we never saw the Exception in the logs. It was logged by Guava and shallowed which was being filtered out when our app sends those logs to NewRelic. This was a decision we made to avoid polluting NewRelic with logs that we don't care about but it ended up biting us in the arse ü§¶&lt;/p&gt;

&lt;p&gt;Mystery 1 solved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/11ISwbgCxEzMyY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/11ISwbgCxEzMyY/giphy.gif" alt="Good" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mystery-2-request-thread-hanging"&gt;
  &lt;/a&gt;
  ‚ùì Mystery 2 - Request thread hanging
&lt;/h3&gt;

&lt;p&gt;While troubleshooting the previous issue, we found that, when the cache is due for refresh, the thread that attempts to fetch the new value will block and, if it fails, it will eventually get the old value.&lt;/p&gt;

&lt;p&gt;The next thing to figure out is what happens if many theads attempt to get the value from the cache at the same time when it is due for refresh&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#test-4-given-a-populated-cache-due-for-refresh-and-a-slow-network-connection-when-many-threads-attempt-to-fetch-the-cache-they-should-all-get-the-old-value"&gt;
  &lt;/a&gt;
  üß™ Test 4 - Given a populated cache due for refresh and a slow network connection, when many threads attempt to fetch the cache, they should all get the old value.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="nd"&gt;@SneakyThrows&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenCacheDueForRefresh_whenRemoteServiceTimeout_allThreadsShouldGetOldValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CacheFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buildCacheWithoutExceptionHandling&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wireMockServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"old_value"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CacheReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;waitForCacheToExpire&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_value"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMEOUT_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;runManyAndWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Which reports the following logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1861 [Thread-8] INFO  org.example.CacheReader [] - Reading value at 1637945351638
1871 [Thread-8] INFO  org.example.CacheFactory [] - Fetching data
2118 [Thread-8] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945351899
3132 [Thread-11] INFO  org.example.CacheReader [] - Reading value at 1637945352913
3132 [Thread-10] INFO  org.example.CacheReader [] - Reading value at 1637945352913
3132 [Thread-9] INFO  org.example.CacheReader [] - Reading value at 1637945352913
3132 [Thread-9] INFO  org.example.CacheFactory [] - Reloading
3132 [Thread-10] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945352913
3132 [Thread-9] INFO  org.example.CacheFactory [] - Fetching data
3132 [Thread-11] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945352913com.google.common.cache.LocalCache$Segment$1 run
4185 [Thread-9] INFO  org.example.CacheReader [] - Value old_value at 1637942442820
WARNING: Exception thrown during refresh
java.util.concurrent.ExecutionException: java.net.http.HttpTimeoutException: request timed out
... &amp;lt;omitted stacktrace&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we observe that the unlucky &lt;code&gt;Thread-9&lt;/code&gt; blocks to fetch the new value while all the other threads get the old value and move on with their lives.&lt;/p&gt;

&lt;p&gt;This gives us enough information to conclude what happened in production!&lt;/p&gt;

&lt;p&gt;When our QA was running their regression test, their requests would often be the ran by an unlucky thread that gets blocked while fetching the new value. Since we have multiple instances of this application, this could be reproduced easily. &lt;/p&gt;

&lt;p&gt;Funny enough, when multiple people were trying at the same time, if they were lucky enough to hit the same instance, everything would work just fine, which is what we saw in the logs.&lt;/p&gt;

&lt;p&gt;Mystery 2 solved!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3rUbeDiLFMtAOIBErf/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3rUbeDiLFMtAOIBErf/giphy.gif" alt="Success" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#are-we-done"&gt;
  &lt;/a&gt;
  Are we done?
&lt;/h2&gt;

&lt;p&gt;Not quite!&lt;/p&gt;

&lt;p&gt;We have learnt that, when the cache is due for refresh, there is always an unlucky thread that has to pay the latency cost of refreshing the value.&lt;/p&gt;

&lt;p&gt;To provide the best experience for our users, we should make sure the cache refresh takes place asynchronously and that all requests get the old value while the new one is being fetched.&lt;/p&gt;

&lt;p&gt;So ... how do we do that? ü§î&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#actually-fixing-the-problem"&gt;
  &lt;/a&gt;
  Actually fixing the problem
&lt;/h3&gt;

&lt;p&gt;If we look again into &lt;a href="https://github.com/google/guava/wiki/CachesExplained#refresh"&gt;Guava's documentation&lt;/a&gt; we can see a couple of comments about asynchronous reload:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[...] As specified in LoadingCache.refresh(K), refreshing a key loads a new value for the key, &lt;strong&gt;possibly asynchronously&lt;/strong&gt; [...]&lt;/p&gt;

&lt;p&gt;[...] If CacheLoader.reload is implemented to be asynchronous, then the query will not be slowed down by the refresh [...]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, they forgot to add an example on how to do it! üòÖ&lt;/p&gt;

&lt;p&gt;It's alright, üí© happens. A couple of DuckDuckGo searches later, we found that we could achieve this by configuring the cache to use &lt;code&gt;asyncReloading&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;LoadingCache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;buildCacheWithAsyncLoading&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;CacheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;refreshAfterWrite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CACHE_REFRESH_TIME_MS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CacheLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asyncReloading&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CacheFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buildCacheLoader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, the refresh will take place on a thread from a separate thread pool we have to pass on during instantiation.&lt;/p&gt;

&lt;p&gt;To validate this works as expected, we write another test üß™:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="nd"&gt;@SneakyThrows&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;solution_whenFutureResponsesTimeoutAndAsyncLoading_returnOldValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Executors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newFixedThreadPool&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CacheFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buildCacheWithAsyncLoading&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wireMockServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"old_value"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

      &lt;span class="n"&gt;runAndWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;waitForCacheToExpire&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;setupRemoteResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_value"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMEOUT_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;runManyAndWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;THREAD_COUNT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shutdown&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Which reports the following logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1772 [Thread-8] INFO  org.example.CacheReader [] - Reading value at 1637945095606
1783 [Thread-8] INFO  org.example.CacheFactory [] - Fetching data
2032 [Thread-8] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945095871
3049 [Thread-9] INFO  org.example.CacheReader [] - Reading value at 1637945096888
3049 [Thread-10] INFO  org.example.CacheReader [] - Reading value at 1637945096888
3050 [Thread-11] INFO  org.example.CacheReader [] - Reading value at 1637945096889
3050 [Thread-11] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945096889
3050 [Thread-10] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945096889
3053 [pool-2-thread-1] INFO  org.example.CacheFactory [] - Reloading
3053 [pool-2-thread-1] INFO  org.example.CacheFactory [] - Fetching data
3065 [Thread-9] INFO  org.example.CacheReader [] - Value Data(value=old_value) at 1637945096904
4063 [pool-2-thread-1] ERROR org.example.CacheFactory [] - Loading Exception at 1637945097902
... &amp;lt;omitted stacktrace&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can see that there isn't an unlucky thread anymore and that the &lt;code&gt;Exception&lt;/code&gt; is reported by the thread in the pool.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When we encounter an issue in production, depending on its severity and impact, we often perform an RCA (root cause analysis) investigation.&lt;/p&gt;

&lt;p&gt;The goal of this process is to find the root cause of the problem, fix it and also to come up with ways we can prevent issues like this happening in the future or, at least, improve our automated monitoring to ensure we catch these issues as soon as they happen.&lt;/p&gt;

&lt;p&gt;For this particular problem, apart from fixing the bug, we decided to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;NewRelic scripted browser synthetics&lt;/strong&gt; to periodically run a smoke test similar to what QA was doing as part of the regression test. This will allow us to catch user-impacting issues early.&lt;/li&gt;
&lt;li&gt;Tweak our request &lt;strong&gt;latency alerts&lt;/strong&gt;. With a similar goal as the one above.&lt;/li&gt;
&lt;li&gt;Come up with a plan to &lt;strong&gt;implement browser-based E2E automation&lt;/strong&gt;. This will allow us to catch regressions in internal environments before they reach production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's the end of it all!&lt;/p&gt;

&lt;p&gt;If you are curious to see the playground code, you can find it in &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/albertowar"&gt;
        albertowar
      &lt;/a&gt; / &lt;a href="https://github.com/albertowar/guava-playground"&gt;
        guava-playground
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;This repository contains some tests that I used to investigate a tricky caching bug.&lt;/p&gt;
&lt;p&gt;You can find more information about it in my blog &lt;a href="https://albertowar.me/" rel="nofollow"&gt;albertowar.me&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/albertowar/guava-playground"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>java</category>
      <category>rca</category>
      <category>troubleshooting</category>
      <category>oncall</category>
    </item>
    <item>
      <title>How to add custom types to a javascript library </title>
      <author>Danielo Artola</author>
      <pubDate>Mon, 06 Dec 2021 16:12:52 +0000</pubDate>
      <link>https://dev.to/danielart/how-to-add-custom-types-to-a-javascript-library-2dag</link>
      <guid>https://dev.to/danielart/how-to-add-custom-types-to-a-javascript-library-2dag</guid>
      <description>&lt;p&gt;Few weeks ago, I started contributing to an open source library called &lt;a href="https://github.com/teafuljs/teaful"&gt;Teaful&lt;/a&gt;, a Tiny, EAsy, and powerFUL for React state management, with ambitious roadmap. Now &lt;code&gt;Teaful&lt;/code&gt; reached more than &lt;strong&gt;500 GitHub ‚≠êÔ∏è Stars&lt;/strong&gt;, the library and his community are growing fast.&lt;/p&gt;

&lt;p&gt;That means issues and pull requests are growing as well, and soon we realized that we need to improve dev-experience and provide &lt;a href="https://dev.to/aralroca/teaful-devtools-released-37lp"&gt;tools&lt;/a&gt; for that reason.&lt;/p&gt;

&lt;p&gt;Bear this in mind, implement custom types to allow all the benefits from &lt;code&gt;TypeScript&lt;/code&gt; at &lt;code&gt;Teaful&lt;/code&gt; is a big step on that way.&lt;/p&gt;

&lt;p&gt;(Yes, I know, migrate a library to pure ts probably is a better solution, and it's on our &lt;a href="https://github.com/teafuljs/teaful#roadmap-"&gt;roadmap&lt;/a&gt; before 1.0.0)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--265SBwi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxj91tgnh9as4jn3ualx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--265SBwi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxj91tgnh9as4jn3ualx.gif" alt="Autocomplete code gif" width="813" height="508"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#avoiding-auto-generated-types"&gt;Avoiding auto generated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-to-place-custom-types"&gt;Where to place custom types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-custom-types"&gt;Create custom types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-auto-generated-types"&gt;
  &lt;/a&gt;
  Avoiding auto generated types
&lt;/h2&gt;

&lt;p&gt;In our case, an auto-generated custom type full of &lt;code&gt;any&lt;/code&gt; was useless. So, we started implementing custom types.&lt;/p&gt;

&lt;p&gt;We're using &lt;code&gt;microbundle&lt;/code&gt;, they provide a flag to avoid auto-generate types, &lt;code&gt;--no-generateTypes&lt;/code&gt;. Microbundle, according to docs, generally respect your TypeScript config at &lt;code&gt;tsconfig.json&lt;/code&gt; (you can read more about &lt;a href="https://github.com/developit/microbundle#using-with-typescript"&gt;here&lt;/a&gt;), but at this moment we don't need a specific configuration for &lt;code&gt;TypeScript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we can inform on &lt;code&gt;package.json&lt;/code&gt; where are our custom types with &lt;code&gt;"types": "folder/index.d.ts"&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-place-custom-types"&gt;
  &lt;/a&gt;
  Where to place custom types
&lt;/h2&gt;

&lt;p&gt;Create a file with extension &lt;code&gt;.d.ts&lt;/code&gt; , generally you'll put this file on &lt;code&gt;dist&lt;/code&gt; folder. Now here you can add your custom types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-custom-types"&gt;
  &lt;/a&gt;
  Create custom types
&lt;/h2&gt;

&lt;p&gt;Here  I'm going to explain how we created custom types specifics for &lt;code&gt;Teaful&lt;/code&gt; and why some decisions were taken, if you're reading this to know how to add custom types to your js library and already know about &lt;code&gt;TypeScript&lt;/code&gt;, feel free to skip this section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialstore"&gt;
  &lt;/a&gt;
  InitialStore
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;store&lt;/code&gt; is where &lt;code&gt;Teaful&lt;/code&gt; saves data, is a key-value object (you can have more than one store). Easy to type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far so good, nothing strange here. We want to store anything, and all keys will be string.&lt;/p&gt;

&lt;p&gt;Then things become more complicated. In this article only things about creating types will be explained, so if you want to know more about how to implement &lt;code&gt;Teaful&lt;/code&gt; I strongly recommend visit the &lt;a href="https://github.com/teafuljs/teaful#teaful"&gt;README at github&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hook-return"&gt;
  &lt;/a&gt;
  Hook Return
&lt;/h3&gt;

&lt;p&gt;To create a new value on store is pretty similar to &lt;code&gt;useState&lt;/code&gt; from &lt;code&gt;React&lt;/code&gt;. Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy right? Ok, so what have we here? &lt;code&gt;useStore&lt;/code&gt; returns an array of two elements (Yes! Like useState!), the element in the store and the function to update it. &lt;/p&gt;

&lt;p&gt;The type we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;HookReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're not familiar with TS, this could looks a little cryptic. We're creating a new type called &lt;code&gt;HookReturn&lt;/code&gt; which gets a generic type we called '&lt;code&gt;T&lt;/code&gt;' (from Type, but you can use any name). &lt;/p&gt;

&lt;p&gt;This type is a tuple(a data structure that is an ordered list of elements with a fixed length, because we aren't going to add more elements for the return of our &lt;code&gt;useStore&lt;/code&gt;), where first element is &lt;code&gt;T&lt;/code&gt;, because we want to return a value with specific type that we don't know at the moment of creating the type, but we want to ensure, for example, that the setter function (the second element on this tuple) will get the same type we are using for the first element as param.&lt;/p&gt;

&lt;p&gt;Then, let's pay attention on the second element of our tuple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, our type is a function that returns nothing ( &lt;code&gt;() =&amp;gt; void&lt;/code&gt;), but accepts one param (&lt;code&gt;value: T | ((value: T) =&amp;gt; T | undefined | null)&lt;/code&gt;), and this param could be a value of type &lt;code&gt;T&lt;/code&gt;, or a function that get a value of type &lt;code&gt;T&lt;/code&gt; and returns &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or a value of type &lt;code&gt;T&lt;/code&gt; (&lt;code&gt;(value: T) =&amp;gt; T | undefined | null&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;What this means? what are we allowing here with this type? Ok, let's imagine a counter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//allowed by T&lt;/span&gt;
&lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//allowed by  ((value: T) =&amp;gt; T | undefined | null)&lt;/span&gt;
&lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, Teaful accepts a function as param on the setter function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hook-type"&gt;
  &lt;/a&gt;
  Hook type
&lt;/h3&gt;

&lt;p&gt;When you create/call a new property with &lt;a href="https://github.com/teafuljs/teaful#usestore-hook"&gt;useStore&lt;/a&gt;, you call &lt;code&gt;useStore.[newProperty]()&lt;/code&gt;. This accepts two optional params, first for &lt;code&gt;initialValue&lt;/code&gt;, and the second one is for &lt;code&gt;updateValue&lt;/code&gt; (a function to update the store property indicated with the &lt;code&gt;proxy&lt;/code&gt;). The hook looks easy to create here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;afterCallbackType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;HookReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both optional, but the second one is a specific function. Type &lt;code&gt;onAfterUpdate&lt;/code&gt;, is a function with two params: &lt;code&gt;store&lt;/code&gt; before and after the changes, both will be same type, extending our &lt;code&gt;initialStore&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;afterCallbackType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;prevStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, our type &lt;code&gt;Hook&lt;/code&gt; will return a tuple &lt;code&gt;[property,setter]&lt;/code&gt;, so indeed, we're going to return our custom type &lt;code&gt;HookReturn&lt;/code&gt; with our generic type. If we create a number, have sense to take care about number type in all places, for the initial value, the returned tuple... etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoc-type"&gt;
  &lt;/a&gt;
  Hoc type
&lt;/h3&gt;

&lt;p&gt;Teaful allows to use it as Hoc (as connect on Redux, code explain it by itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStore&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="c1"&gt;// [...]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Similar to useStore()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterWithStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HOC &lt;a href="https://github.com/teafuljs/teaful#withstore-hoc"&gt;&lt;code&gt;withStore&lt;/code&gt;&lt;/a&gt; wraps a &lt;code&gt;Component&lt;/code&gt; and returns the component with a prop called store. A second parameter for initial value is allowed, and a third one for &lt;code&gt;onAfterUpdate&lt;/code&gt; callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;HocFunc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ComponentClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ComponentClass&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;afterCallbackType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need two generic types, one for initial value and &lt;code&gt;onAfterUpdate&lt;/code&gt; (both will use same generic, but &lt;code&gt;onAfterUpdate&lt;/code&gt; will have a specific type, explained later) and the other one for &lt;code&gt;React&lt;/code&gt; component to wrap that would be the same for the return, because we want the same component but with a new prop called store.&lt;/p&gt;

&lt;p&gt;Look at the &lt;code&gt;R&lt;/code&gt; type, is extending &lt;code&gt;React.ComponentClass&lt;/code&gt; (type provided by &lt;code&gt;React&lt;/code&gt;). This means that we are taking profit from that type and including it in our generic type called &lt;code&gt;R&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Why extending component class only and not functional component? &lt;/p&gt;

&lt;p&gt;Well, we didn't found a single situation when we wanted to wrap any component that doesn't extend Class with a HOC to get the store.&lt;/p&gt;

&lt;p&gt;Ok, third type: &lt;code&gt;onAfterUpdate&lt;/code&gt;.  Here we need a function with two params store before and after the changes, both will be same type, extending our &lt;code&gt;initialStore&lt;/code&gt; type. Same as first hook, we reuse same type for all callbacks params&lt;/p&gt;

&lt;p&gt;Now we only have to export the a type to use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Hoc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HookReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hookdry-type"&gt;
  &lt;/a&gt;
  HookDry type
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Teaful&lt;/code&gt; provides a helper called &lt;a href="https://github.com/teafuljs/teaful#getstore-helper"&gt;&lt;code&gt;getStore&lt;/code&gt;&lt;/a&gt;, like useStore but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It does not make a subscription. So it is no longer a hook and you can use it as a helper wherever you want.&lt;/li&gt;
&lt;li&gt;It's not possible to register events that are executed after a change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means we don't want same as &lt;code&gt;useStore&lt;/code&gt;type, we return the same but we want to ensure we don't accept a second param as callback. Let's create another one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;HookDry&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;HookReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return is clear, same as Hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-type-usestore-getstore-and-withstore"&gt;
  &lt;/a&gt;
  Let's type useStore, getStore and withStore
&lt;/h3&gt;

&lt;p&gt;Ok, now we have almost all the work done. A custom type is needed for each tool, &lt;code&gt;useStore&lt;/code&gt;, &lt;code&gt;getStore&lt;/code&gt;and &lt;code&gt;withStore&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;getStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;useStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;HookDry&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HookDry&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;useStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;useStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;withStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;withStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;HocFunc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HocFunc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html"&gt;&lt;code&gt;keyOf&lt;/code&gt;&lt;/a&gt; type operator ensures that our &lt;code&gt;property&lt;/code&gt; will exists on &lt;code&gt;store&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ternary here looks weird if you're not familiar with &lt;code&gt;Typescript&lt;/code&gt;, is used for &lt;a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"&gt;conditional-types&lt;/a&gt;. The logic shared in three types is, get a generic type (&lt;code&gt;S&lt;/code&gt;, that extends our &lt;code&gt;initialStoreType&lt;/code&gt;), then get a &lt;code&gt;key&lt;/code&gt;that must be on &lt;code&gt;S&lt;/code&gt; (the property should exists on our store). &lt;/p&gt;

&lt;p&gt;Finally, this &lt;code&gt;withStoreType&amp;lt;S[key]&amp;gt; &amp;amp; HocFunc&amp;lt;S&amp;gt;&lt;/code&gt; is a &lt;a href="https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html#intersection-types"&gt;Intersection type&lt;/a&gt;. According to TypeScript documentation "An intersection type combines multiple types into one". So if &lt;code&gt;S[key]&lt;/code&gt; extends &lt;code&gt;initialStore&lt;/code&gt;, we set the intersection type, if not, the hook/hoc type only.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#createstore"&gt;
  &lt;/a&gt;
  createStore
&lt;/h3&gt;

&lt;p&gt;Last, the function to export from &lt;code&gt;Teaful&lt;/code&gt;, the masterpiece:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;initialStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;afterCallback&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;afterCallbackType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;getStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HookDry&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;getStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;useStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;withStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HocFunc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;withStoreType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;That's definitely not everything, but there are few steps that you'll face:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check how to stop auto-generated types, check if types are generated by the bundler like our case, by &lt;code&gt;tsconfig.json&lt;/code&gt; or whatever.&lt;/li&gt;
&lt;li&gt;Create a custom types on a &lt;code&gt;d.ts&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Indicate to &lt;code&gt;package.json&lt;/code&gt; the place of that file with property &lt;code&gt;"types"&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Adding custom types to a javascript library could be difficult at the beginning, but will improve the dev-experience from your users. &lt;/p&gt;

&lt;p&gt;And most important, this could be a great opportunity to learn and improve your skills, to start networking with the community or a good way to help other devs.&lt;/p&gt;

&lt;p&gt;I hope it was helpful to you, have a super nice day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>teaful</category>
      <category>react</category>
    </item>
    <item>
      <title>Using WebRTC for a browser multiplayer game - in theory</title>
      <author>antoniopreucil93</author>
      <pubDate>Mon, 06 Dec 2021 16:11:54 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/using-webtrc-for-a-browser-multiplayer-game-in-theory-59dk</link>
      <guid>https://dev.to/bornfightcompany/using-webtrc-for-a-browser-multiplayer-game-in-theory-59dk</guid>
      <description>&lt;p&gt;WebRTC is a web technology that enables data exchange between two or more browsers without requiring an intermediary server. WebRTC allows web applications and sites to capture and stream video and audio media between peers with help from Media Capture and Stream API. Technologies behind WebRTC are implemented as an open web standard and are available as regular Javascript web API.&lt;/p&gt;

&lt;p&gt;To create a multiplayer browser game, you first need to select the right communication protocol, so that clients can update their in-game state in real-time. Communication can‚Äôt lag - it has to be fast. In past, the only option for any kind of browser game was a well-known Websocket with the server as an intermediary protocol.&lt;/p&gt;

&lt;p&gt;In the past couple of years, new technology has emerged that allows as peer to peer communication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not Websocket?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Websocket is a communication protocol that sits on the Application layer and uses Transport Layer TCP protocol for bi-directional communication between browser and server. The main advantage with Websocket is that it is very secure, which means that every message that is sent from the browser will arrive at its destination in order. If the message, in any case, doesn‚Äôt arrive then the receiver will wait until the browser sends the same message again. This is a great concept for features like chat, where all messages must arrive at their destination in order. In the case of multiplayer games, it‚Äôs not a very good feature because in multiplayer games data needs to be exchanged fairly quickly and players don‚Äôt have time to wait for the message to resend.&lt;/p&gt;

&lt;p&gt;The web is built on top of TCP. To deliver data reliably and in order, under package loss, TCP must hold more recent data in the queue while waiting for dropped packets to be resent. Otherwise, data would be delivered out of order, which is called the head of line blocking and is a problem for web-based multiplayer games.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the alternatives, maybe UDP?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;UDP like TCP is a transport layer protocol and allows bidirectional communication. Unlike TCP, UDP doesn‚Äôt care about messages not arriving at their destination and that is perfectly fine because in some cases not all data needs to arrive at its destination. UDP is suitable for time-sensitive applications like Voice over IP, online games and media streaming. UDP is really fast and can be used for query-response protocols like DNS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So it's UDP, not so fast!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As an alternative to letting users send and receive UDP packets directly from the browser - it is not a very good idea. Websites would be able to launch DDoS attacks by coordinating UDP packet floods from browsers. UDP is not a secure protocol so every package could be sniffed, read, or modified by an attacker. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why WebRTC?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebRTC supports data channels that can be configured in unreliable mode, providing a way to send and receive unreliable-unordered data from a browser using the UDP protocol. Looks like WebRTC is everything that peer-to-peer communication needs but things are not so simple. One problem with WebRTC is that it is very complex and it needs to use multiple different technologies to establish peer-to-peer connections. Also, NAT protocol that stands as a public IP for a private network further complicates working with WebRTC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is NAT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Network address translation is a web protocol that allows multiple devices to access the internet through a single public address. To achieve this the translation of a private IP address to a public IP is required. This is a problem for peer-to-peer communication because peers must exchange their public IP address and not the one that uses NAT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How then to connect two peers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Interactive Connectivity Establishment (ICE) is a technique that helps peers to find each other on the web and establish a connection. ICE uses multiple technologies to establish peer connections and two main technologies are STUN and TURN servers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STUN server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To be able to find each other, ICE uses STUN servers which enable peers to find their public IP addresses. STUN server's only job is to receive a request from a peer to find out his public IP address and returns it to him.&lt;/p&gt;

&lt;p&gt;In most use cases STUN server will be sufficient to establish a connection. There is no need to write your own because there are many free STUN servers online - although many do not function properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TURN server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another technology that ICE uses are TURN servers that help relay messages between peers. TURN servers come in handy when dealing with symmetric NAT that allows a router to only accept connections from peers with whom he had a connection before.&lt;/p&gt;

&lt;p&gt;Although TURN servers can be found online it is recommended to write your own. Unlike free STUN, the TURN server requires authentication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SDP (Session Description Protocol)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The standard for describing multimedia content of the connection such as resolution, formats, codecs, encryption so that both peers can understand each other once data is exchanged. SDP is a format that needs to be exchanged between peers so they can know where to send data through the data channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to establish a connection?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To establish the connection between two peers, a signaling server will have to be implemented first. The signaling server‚Äôs purpose is to exchange SDP between two peers. The signaling server needs to have bidirectional communication so Websocket can be used for implementing the signaling server.&lt;/p&gt;

&lt;p&gt;When the signaling server is implemented peers can exchange the SDP context of their browser. After SDP-s are exchanged data channel will open a direct connection between peers and they will be able to exchange their game stats.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>webrtc</category>
      <category>networking</category>
    </item>
  </channel>
</rss>
