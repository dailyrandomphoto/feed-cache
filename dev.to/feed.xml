<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 JS code snippets sites to use daily!</title>
      <author>Rupak Dey</author>
      <pubDate>Mon, 04 Oct 2021 05:25:50 +0000</pubDate>
      <link>https://dev.to/deyrupak/3-js-code-snippets-sites-to-use-daily-5642</link>
      <guid>https://dev.to/deyrupak/3-js-code-snippets-sites-to-use-daily-5642</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1locdev"&gt;
  &lt;/a&gt;
  &lt;a href="https://1loc.dev/"&gt;1loc.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;JS utilities in single line of code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdzikopj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95r8jrbfr6h056eu5cwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdzikopj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95r8jrbfr6h056eu5cwg.png" alt="1loc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#htmldomdev"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://htmldom.dev/"&gt;htmldom.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Managing DOM with JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GV1hWRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93ggu74vuftvavxnus9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GV1hWRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93ggu74vuftvavxnus9.png" alt="htmlDOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30secondsofcodeorg"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://www.30secondsofcode.org/"&gt;30secondsofcode.org&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippets for all development needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_XAdFpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ult6v1sod6666hxuap2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_XAdFpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ult6v1sod6666hxuap2l.png" alt="30secCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;ü§òüèª&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt;&lt;br&gt;
Support me : &lt;a href="https://paypal.me/deyrdx?locale.x=en_GB"&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Rock, Paper, Scissors game in Python</title>
      <author>JRRyan606</author>
      <pubDate>Mon, 04 Oct 2021 05:18:21 +0000</pubDate>
      <link>https://dev.to/ryan_jr/rock-paper-scissors-game-in-python-3n2</link>
      <guid>https://dev.to/ryan_jr/rock-paper-scissors-game-in-python-3n2</guid>
      <description>&lt;p&gt;Hey there,  this is a simple GUI-Based Rock Paper Scissors game in python.&lt;/p&gt;

&lt;p&gt;Link to the github repo: &lt;a href="https://github.com/JRRyan606/Rock-Paper-Scissors-Tk-Gui"&gt;https://github.com/JRRyan606/Rock-Paper-Scissors-Tk-Gui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IMPORTANT, PLEASE READ THIS:&lt;/p&gt;

&lt;p&gt;The credit for this project MUST go to Bro code, He made a video in his Youtube channel called Python rock, paper, scissors game where he created a CLI-Based rock, paper, scissors game in python. I have created the GUI version of it. There are some features that Bro code created in his rock, paper, scissors game that is NOT YET coded in my gui version of the game. I will be coding it soon...&lt;/p&gt;

&lt;p&gt;Link to Bro code's Youtube channel: &lt;a href="https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ"&gt;https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to the Python rock, paper, scissors game Youtube video: &lt;a href="https://youtu.be/GhPZHvhvlsk"&gt;https://youtu.be/GhPZHvhvlsk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to address any bugs on this project or some improvements that can be made on this project, feel free to email me about it at: &lt;a href="mailto:ryanjustin25706@gmail.com"&gt;ryanjustin25706@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first Tkinter project using Python, any improvements or suggestions is highly appreciated!!. Thanks.&lt;/p&gt;

&lt;p&gt;For those of you who have some problems seeing the code from the above github link, here's is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
import random

win = Tk()
win.title("Rock, Paper, Scissors")
win.geometry("801x300")


options = ["rock", "paper", "scissors"]
computer = random.choice(options)




def show():
    info = "Computer choose: " + computer
    info2 = "You choose: " + str(e.get()).lower()
    if str(e.get()).lower() == computer:
        text3 = Label(win, text="ITS A TIE!!", font=('Arial', 18))
        text3.pack()

    elif str(e.get()).lower() == "rock":
        if computer == "paper":
            text4 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text4.pack()

        if computer == "scissors":
            text5 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text5.pack()

    elif str(e.get()).lower() == "scissors":
        if computer == "rock":
            text6 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text6.pack()

        if computer == "paper":
            text7 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text7.pack()

    elif str(e.get()).lower() == "paper":
        if computer == "scissors":
            text8 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text8.pack()

        if computer == "rock":
            text9 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text9.pack()

    elif str(e.get()).lower() is not options:
        text10 = Label(win, text="There is no such thing as " + str(e.get()).lower() + " in this game. " + "Please enter the correct word", fg="red", font=('Arial', 18))
        text10.pack()

    text1 = Label(win, text=info, font=('Arial', 18))
    text1.pack()
    text2 = Label(win, text=info2, font=('Arial', 18))
    text2.pack()





lab = Label(win, text="Rock, Paper or Scissors?", font=('Arial', 18))
lab.pack()


e = Entry(win, borderwidth=10, bg="powderblue")
e.pack()


b = Button(win, text="Submit", font=('Arial', 18), bg="lightgreen", command=show)
b.pack()
win.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>github</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Uniswap Clone Script- Fastest Solution to Start Your Own DeFi Exchange</title>
      <author>stanislas</author>
      <pubDate>Mon, 04 Oct 2021 05:01:10 +0000</pubDate>
      <link>https://dev.to/stanislasblo/uniswap-clone-script-fastest-solution-to-start-your-own-defi-exchange-51f3</link>
      <guid>https://dev.to/stanislasblo/uniswap-clone-script-fastest-solution-to-start-your-own-defi-exchange-51f3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-uniswap"&gt;
  &lt;/a&gt;
  What is Uniswap?
&lt;/h2&gt;

&lt;p&gt;Uniswap is a decentralized business protocol that‚Äôs used to exchange cryptocurrencies. It is also the name of the company based on the Uniswap protocol.&lt;br&gt;
Uniswap was created by Hayden Adams. Its initial version was published to the Ethereum main net on November 2, 2018. Uniswap makes multiple crypto assets, including its native UNI cryptocurrency, to afford a service similar to an old-style exchange. The difference is, Uniswap has no one central operator or manager, making it fully decentralized.&lt;br&gt;
Uniswap unlike most exchanges, which are designed to take fees, is planned to function as a public good ‚Äî a tool for the community to trade tokens without middlemen. Also, different most exchanges, which match buyers and sellers to determine prices and execute trades, Uniswap uses a simple math equation, pools of tokens and Ethereum to do the same job. That‚Äôs why the companies are interested to get &lt;strong&gt;&lt;a href="https://radindev.com/uniswap-clone-script/"&gt;Uniswap clone script&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuO_j9Xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x6x99muqtdx8zeqetpd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuO_j9Xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x6x99muqtdx8zeqetpd.jpeg" alt="uniswap statistics"&gt;&lt;/a&gt;&lt;br&gt;
Since Uniswap is built on Ethereum, it cannot list tokens built on other blockchains, and so users can only swap ERC-20 tokens.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtX0hQX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4u4pvyrrxz98zxnolk5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtX0hQX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4u4pvyrrxz98zxnolk5.jpeg" alt="uniswap statistics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Uniswap‚Äôs network is designed to facilitate the buying and selling of crypto assets in a way that mirrors a traditional exchange. &lt;br&gt;
It does this by using smart contracts, which allow users (called liquidity providers) to deposit crypto assets into pools. These smart contracts then allow other users (called traders) to buy and sell these assets. Users who trade these pool assets pay a fee that is then distributed to all the liquidity providers proportionally (based on their contribution to the pool).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniswap-clone-script"&gt;
  &lt;/a&gt;
  Uniswap Clone Script
&lt;/h2&gt;

&lt;p&gt;Uniswap clone script is a decentralized exchange (DEX) script that performs two smart contracts presented on the topmost of Ethereum (ETH) blockchain.&lt;br&gt;
Uniswap exchange clone script is developed in a way that resolves common liquidity problems faced by every exchange. It permits automatic token swapping for performing decentralized exchanges (DEX) in DeFi platforms. Uniswap Clone Script is a multi-tested, readymade decentralized finance (DeFi) protocol script built on Ethereum Blockchain used to start a decentralized platform for automated liquidity providing on Ethereum (ETH) that operates 100% similar to Uniswap. The Uniswap Clone Script supports both swapping &amp;amp; liquidity provisions of Ethereum and its tokens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-uniswap-exchange-clone-script"&gt;
  &lt;/a&gt;
  Features of Uniswap Exchange Clone Script
&lt;/h3&gt;

&lt;p&gt;Some of the exclusive features of Uniswap clone script are as follows:&lt;br&gt;
‚Ä¢ Two-factor authentication&lt;br&gt;
‚Ä¢ Unauthorized users are extremely prevented by offering a safe trade.&lt;br&gt;
‚Ä¢ Quick buying &amp;amp; selling options&lt;br&gt;
‚Ä¢ Rapidly enabling the buying &amp;amp; selling of the assets without a delay.&lt;br&gt;
‚Ä¢ White label solutions&lt;br&gt;
‚Ä¢ Enabling a customization feature for satisfying the customer's needs &amp;amp; deploying it.&lt;br&gt;
‚Ä¢ Multilingual support&lt;br&gt;
‚Ä¢ Multi-language supporting DeFi platforms attract the global audience by offering their native language support facility for people across our world.&lt;br&gt;
‚Ä¢ Ease to Use&lt;br&gt;
‚Ä¢ Eco-friendly options make the software easy to use even for beginners.&lt;br&gt;
‚Ä¢ Uniswap at High level&lt;br&gt;
‚Ä¢ Absolutely offered as an open-source, this non-profit protocol is absolutely simple &amp;amp; easy to use.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3tgtcD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd7uwrh08oqhuajaa2aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3tgtcD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd7uwrh08oqhuajaa2aj.png" alt="uniswap decentralized exchange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-own-defi-based-protocol-like-uniswap"&gt;
  &lt;/a&gt;
  How to create own defi based protocol like uniswap?
&lt;/h3&gt;

&lt;p&gt;Go to our Uniswap clone interface.&lt;br&gt;
Connect your wallet. ...&lt;br&gt;
Select the token you'd like to exchange from.&lt;br&gt;
Select the token you'd like to exchange to.&lt;br&gt;
Click on Swap.&lt;br&gt;
Preview the transaction in the pop-up window.&lt;br&gt;
Confirm the transaction request in your wallet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-uniswap-clone-script"&gt;
  &lt;/a&gt;
  Benefits of Uniswap Clone Script
&lt;/h3&gt;

&lt;p&gt;Many remarkable benefits of uniswap clone script are there, here is a list of some of popular benefits of uniswap clone script&lt;br&gt;
‚Ä¢ Easy options are provided for exchanging ERC20 tokens&lt;br&gt;
‚Ä¢ New tokens provide direct access to the liquidity pools.&lt;br&gt;
‚Ä¢ Start a Liquidity based exchange that is totally affordable by anyone.&lt;br&gt;
‚Ä¢ Ability to gain profit by offering funds into the liquidity pools.&lt;br&gt;
‚Ä¢ 100% Decentralized network &amp;amp; no involment of the third parties&lt;/p&gt;

&lt;p&gt;Top DeFi Development Company offers world-class special decentralized finance (Defi) development services and solutions for you to start an independent financial business across global countries. As traditional finance is being replaced with the DeFi, business can be high started in it so offers Permission less, interoperable, immutable defi solutions for managing tremendous growth and efficiency in your business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-your-first-trade-on-uniswap"&gt;
  &lt;/a&gt;
  How to make your first trade on Uniswap
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Step 1: First head over to the Uniswap exchange platform. ...&lt;/li&gt;
&lt;li&gt; Step 2: Once logged in, the trading interface will appear. ...&lt;/li&gt;
&lt;li&gt; Step 3: Now you're ready to set up your order. ...&lt;/li&gt;
&lt;li&gt; Step 4: At the bottom of the order menu, you'll then see how much you can expect to receive.
The process of creating decentralized protocols like Uniswap can take time to complete. From finding qualified DeFi developers and explaining your focus to having the DeFi developed and making revisions‚Äîthe whole process can be confusing and very time-consuming. That being said, many businesses are learning how to create a decentralized protocol like Uniswap with the help of online (but that‚Äôs not easy). And many are choosing the best Decentralized finance development service provider on the world.
## White label uniswap clone script
Uniswap Clone Script supports anyone to launch their own DeFi Exchange Protocol similar to Uniswap instantly. And develops and deploys the Whitelabel uniswap clone script with features as like in the Uniswap and the script is completely customizable that you can add any functionalities or APIs anytime. Whitelabel Uniswap Clone comes with fully tested and customizable source code, advanced admin tools, free installation, and more. The finest decentralized protocol whitelabel clone on the market for a fair price is Uniswap Clone, which is new, dynamic, technologically sophisticated, and the best decentralized protocol whitelabel clone on the marketplace. White label cryptocurrency exchange software technology permits you to start your own decentralized crypto exchange. Uniswap Clone platform, the most efficient decentralized exchange solution, has become available for purchase.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diUV60XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ceaw3uawvtn2p24vwzk.png" alt="uniswap clone script"&gt;
## How to get a DeFi exchange similar to Uniswap? 
The replacement and useful method to make a DeFi exchange platform like Uniswap is to make a copy of it. The market has started getting decentralized exchanges like Uniswap in a cloned format. However, the trouble is that many companies are offering Uniswap clone Script, and it‚Äôs frustrating to find the best company in this field. So, how can you decide the best DeFi development company which provides robust &amp;amp; ready-made Uniswap Clone Script?
If you have decided to go for Uniswap clone Scripts, try to get it from the creators of Decentralized Finance exchange script development. It‚Äôs because whoever developed the Uniswap Clone Script for the first time, actually knows its realistic usage. It is also a smart idea to try the demo of Uniswap Clone Script before spending your bucks on it. How can I buy DeFi?&lt;/li&gt;
&lt;li&gt; Step 1: Create a Wallet. Download Trust Wallet and create a wallet. ...&lt;/li&gt;
&lt;li&gt; Step 2: Add DeFi Coin to the Wallet. Tap the icon in the top-right and search for ‚ÄúDeFi Coin‚Äù. ...&lt;/li&gt;
&lt;li&gt; Step 3: Buy ‚ÄúUniswap Smart Chain‚Äù (USC) ...&lt;/li&gt;
&lt;li&gt; Step 4: Swap USC for DeFi Coin!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#things-to-know-before-buying-a-uniswap-clone-software"&gt;
  &lt;/a&gt;
  Things to know before buying a Uniswap clone software
&lt;/h3&gt;

&lt;p&gt;First of all, you need talk to experts and also, you must have a checklist before buying the Uniswap clone script. Here are the 5 important items to be considered before buying a Uniswap clone script. &lt;br&gt;
Ask for Free Demo: A great demo lets prospects understand how solution truly solves their pain points and enables them to become more successful in their job. so try the free demo of the website or app provided by the companies and check the serviceability and functionality of the website. &lt;br&gt;
Analyze DeFi Market: Take a deep dive into unique protocol-level and market-wide DeFi indicators. Explore Now. Detailed analysis of individual DeFi projects. try to select Uniswap DEX clone scripts from companies other than freelancers. Because Decentralized Finance development companies provide more support. Try to get a free quote from companies and choose one from them.&lt;br&gt;
Customization: Need to Know what will be the cost range for customization and read their terms and conditions about the company you buy. &lt;br&gt;
Packages: The price range of the Uniswap clone script varies according to the business needs. Think carefully and choose the package and try premium packages it will provide more outstanding features. &lt;br&gt;
Technical Person: If you are not technical person, then hire a technical person who can support you with the whole process. It is welfare to have a team to test the Uniswap clone script. You can optimize the Uniswap clone script by adding additional features and bug fixes with the help of your technical team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFwXAiQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58842kjtywhfr4256kjn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFwXAiQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58842kjtywhfr4256kjn.jpg" alt="uniswap exchange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-uniswap-clone-script"&gt;
  &lt;/a&gt;
  Why Use Uniswap Clone Script?
&lt;/h2&gt;

&lt;p&gt;‚Ä¢ Complete decentralized liquidity solution&lt;br&gt;
‚Ä¢ Support for Multi-crypto token trading pairs&lt;br&gt;
‚Ä¢ Fast &amp;amp; Instant Swapping &lt;br&gt;
‚Ä¢ 100% Customizable&lt;br&gt;
‚Ä¢ Prebuilt Scripts&lt;br&gt;
‚Ä¢ Scalable &amp;amp; Clean Design&lt;br&gt;
‚Ä¢ Multi-Language &amp;amp; Multi-Crypto Token Support&lt;br&gt;
‚Ä¢ Referral &amp;amp; Promotions&lt;br&gt;
‚Ä¢ User-friendly UI/UX&lt;br&gt;
‚Ä¢ Liquidity Pools&lt;br&gt;
‚Ä¢ Integrated Crypto Wallets&lt;br&gt;
‚Ä¢ Top-performing pools&lt;br&gt;
‚Ä¢ Flash Swapping&lt;br&gt;
‚Ä¢ Perfectly Integrated &amp;amp; Audited Immutable Smart Contract&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ch15DloK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf0mzher3rwrhm60naii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ch15DloK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf0mzher3rwrhm60naii.png" alt="Uniswap Clone App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniswap-clone-app"&gt;
  &lt;/a&gt;
  Uniswap Clone App
&lt;/h2&gt;

&lt;p&gt;However, Uniswap does not have dedicated application but companies‚Äô technologies not only offer exclusive Uniswap clone script-based software solutions but also provides an updated Uniswap clone app development for your business. DEX clone app development is packed with all the features and benefits that Uniswap has. You can also add some additional features based on your business requirements. Contact to companies to get Uniswap clone script app for your crypto business. &lt;br&gt;
How to Build a Decentralized Protocol similar to Uniswap?&lt;br&gt;
A Decentralized finance trading is becoming more popular through the world; many companies and startups are starting to recognize the importance of Decentralized finance development for their business. But they have no idea about the DeFi, cost of DeFi development and the technical skills needed to develop these decentralized protocols similar to Uniswap, so many organizations face a lot of challenges in this competitive world.&lt;br&gt;
But as many DeFi development companies are realizing the request for Decentralized Finance and comprehend that specified requirements, these DeFi development companies are developing DeFi meant at providing a solution for how to make decentralized protocols like Uniswap. The trending solution involves companies launching DeFi based business with complete solutions.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>exchange</category>
    </item>
    <item>
      <title>The Only stock resources library you will ever need.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 04 Oct 2021 04:37:18 +0000</pubDate>
      <link>https://dev.to/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf</link>
      <guid>https://dev.to/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf</guid>
      <description>&lt;p&gt;If you have ever searched the mystic lands of the internet for quality stock photos, videos or music, you have come to the right place. This excerpt from &lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt; lists the quality websites for stock resources. If I have missed out on any websites, comment down below and they will be added.&lt;/p&gt;

&lt;p&gt;If you like this post and need more resources as such, head on to &lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stock-photos"&gt;
  &lt;/a&gt;
  Stock Photos
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock photos of all kinds for your websites and apps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock photos shared by talented creators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The internet‚Äôs source of freely usable images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Over 1.7 million+ high-quality stock images and videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://magdeleine.co/"&gt;Magdeleine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gallery &amp;amp; free high-resolution photo everyday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picspree.com"&gt;Picspree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty free images, stock photos, illustrations, and vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock photos collections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://gratisography.com/"&gt;Gratisography&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free collection of free high-resolution pictures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.lifeofpix.com/"&gt;Life of Pix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution photography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://stocksnap.io/"&gt;Stock Snap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hundreds of high quality photos added weekly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://morguefile.com/"&gt;Morguefile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Over 350,000 free stock photos for commercial use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kaboompics.com/"&gt;Kaboom Pics&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock photography and color palettes. Good for product images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://nos.twnsnd.co/"&gt;New Old Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock vintage photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picjumbo.com/"&gt;Pic Jumbo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Good collections of different types of photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.publicdomainpictures.net/en/"&gt;Public Domain Pictures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Public domain images of all types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.chamberofcommerce.org/findaphoto/"&gt;Find A Photo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Searches multiple stock photo websites&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.stockvault.net/"&gt;Stockvault&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Categorized stock photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://placeholder.com/"&gt;Placeholder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A free image placeholder service for the web. You can specify image size and format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://realisticshots.com/"&gt;Realistic Shots&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution stock photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://negativespace.co/"&gt;Negative Space&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;High-Resolution Free Stock Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://skitterphoto.com/"&gt;SkitterPhoto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution photography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picography.co/"&gt;PicoGraphy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gorgeous, High-Resolution, Free Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://wunderstock.com/"&gt;Wunder Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stunningly amazing free photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pxhere.com/"&gt;PxHere&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Images &amp;amp; Free stock photos - PxHere&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://piqsels.com/"&gt;Piqsels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty Free Stock Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.foodiesfeed.com/"&gt;FoodiesFeed&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Food photo stock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.nappy.co/"&gt;Nappy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A website offering Beautiful, high-res photos of black and brown people.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://generated.photos/"&gt;Generated Photos&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unique AI Generated model photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.reshot.com/"&gt;Reshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Uniquely free photos. Handpicked, non-stocky images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freeimages.com/"&gt;Free Images&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Find and download free stock photos - all free for personal and commercial use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picsum.photos/"&gt;Lorem Picsum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An easy to use API to get beautiful placeholder images. Size and other parameters can be specified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.scienceimage.csiro.au"&gt;scienceimage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An image library specializing in science and nature images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://ian.umces.edu/imagelibrary"&gt;Integration &amp;amp; Application Network Image Library&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free images to provide scientists, resource managers, government agencies, community groups and graphics professionals with a resource for enhancing science communication.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.freenatureimages.eu"&gt;Saxifraga&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free nature images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://search.creativecommons.org"&gt;Creative Commons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Search for free images to reuse.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://allthefreestock.com/"&gt;AllTheFreeStock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;a curated list of free stock images, audio and videos.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#stock-videos"&gt;
  &lt;/a&gt;
  Stock Videos
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock videos of all kinds for your websites and apps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/videos"&gt;Pexels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Largest library of free to use videos, donated by the community&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pixabay.com/videos"&gt;Pixabay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Large library of free to use videos, donated by the community similar to Pexels&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://coverr.co/"&gt;Coverr.co&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beautiful free stock video footage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.videezy.com/"&gt;Videezy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free HD stock footage &amp;amp; 4K videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mixkit.co/"&gt;Mix Kit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock video clips &amp;amp; music&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.lifeofvids.com/"&gt;Life Of Vids&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free video clips and loops&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.videvo.net/stock-video-footage/"&gt;Videvo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free and premium stock videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://stock.loopvidz.com/"&gt;Loopvidz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free To Use Cinema graphs Created With VIMAGE App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.splitshire.com/"&gt;SplitShire&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beautiful &amp;amp; exclusive free stock videos &amp;amp; photos&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#stock-music-amp-sound-effects"&gt;
  &lt;/a&gt;
  Stock Music &amp;amp; Sound Effects
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock music and/or sound effects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.free-stock-music.com/"&gt;Free Stock Music&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty free stock music for YouTube videos, podcasts, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.bensound.com/"&gt;Bensound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Download Royalty Free Music for free and use it in your project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mixkit.co/free-stock-music/"&gt;Mixkit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free music for your projects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freesound.org/"&gt;Freesound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock music and sounds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freemusicarchive.org/"&gt;Free Music Archive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Collaborative database of creative-commons licensed sound for musicians and sound lovers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://musopen.org/music/"&gt;Musopen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An online copyright free classical music library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.unminus.com/"&gt;Unminus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Premium Music for Your Projects üéÅ Royalty Free. Cleared for YouTube.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's Connect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/rainboestrykr"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can support me by buying me a coffee maybe&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Async + Await</title>
      <author>Dubymar Tollinchi</author>
      <pubDate>Mon, 04 Oct 2021 03:48:59 +0000</pubDate>
      <link>https://dev.to/dubymarjtr/async-await-2l10</link>
      <guid>https://dev.to/dubymarjtr/async-await-2l10</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-control-flow"&gt;
  &lt;/a&gt;
  What is control flow?
&lt;/h2&gt;

&lt;p&gt;It is the &lt;strong&gt;order&lt;/strong&gt; in which statements, instructions, or functions &lt;strong&gt;are executed in our code&lt;/strong&gt;. JavaScript is an &lt;em&gt;asynchronous&lt;/em&gt; language, meaning that it reads code line by line, from top to bottom.&lt;/p&gt;

&lt;p&gt;If there is a line that needs to &lt;em&gt;fetch&lt;/em&gt; any information from a database, for example, it will kick off that data fetching and &lt;br&gt;
continue reading the next lines immediately, instead of waiting for the fetching to be done. &lt;/p&gt;

&lt;p&gt;JavaScript being &lt;em&gt;asynchronous&lt;/em&gt; makes it difficult to write any code that will suddenly stop or block any application process. In the past some of the solutions for this issue were implementing callbacks, which is &lt;em&gt;a function that gets passed as the last argument of another function&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;This was fine until you encounter what developers call &lt;strong&gt;Callback Hell&lt;/strong&gt;, which is a callback within a callback, within a callback, and so on, which makes it very difficult to read and maintain the code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a promise?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;promise&lt;/strong&gt; is the &lt;em&gt;state of the result that gets return&lt;/em&gt;, so instead of having 10 lines of code indented with all those callbacks you can do it step by step. If something bad happens to the data, then you have an error handling, such as try catch. If you get the data successfully, then you execute a code, and like this, you write &lt;code&gt;.then&lt;/code&gt; for each action that you want. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Async + Await&lt;/strong&gt; is the same as promises but with a better syntax. Rather than having &lt;code&gt;.then&lt;/code&gt;, we can put &lt;code&gt;await&lt;/code&gt; in front of the promise and it will temporarily freeze that line of code until the promise is &lt;em&gt;resolved&lt;/em&gt; or &lt;em&gt;rejected&lt;/em&gt;, and then continues reading the following lines.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;promises.all()&lt;/code&gt; are &lt;strong&gt;Mega promises&lt;/strong&gt;, which are no other thing than a promise made of many promises, and it will return a promise where it will only resolve itself when all pieces of data are resolved. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-apis"&gt;
  &lt;/a&gt;
  Browser API's
&lt;/h2&gt;

&lt;p&gt;Most new browser API's are build on native promises. &lt;strong&gt;Fetch&lt;/strong&gt; is the way to get data from an API, so we can use await fetching data. &lt;/p&gt;

&lt;p&gt;The fetch API is like a &lt;em&gt;double promise&lt;/em&gt;, because you fetch some data from your API and then you need to &lt;em&gt;convert that data&lt;/em&gt; (most of the time we want to convert it into JSON). &lt;strong&gt;Axios&lt;/strong&gt; is also based on promises and they have some JSON defaults, so we don't need to convert the data.&lt;/p&gt;

&lt;p&gt;JS's &lt;code&gt;util&lt;/code&gt; package has a &lt;strong&gt;promisify&lt;/strong&gt; function that &lt;em&gt;converts callback-based functions to promise-based functions&lt;/em&gt;, so we can use our code on callback-based API's.&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;Async + Await&lt;/strong&gt; is not built in every browser, something that we can do in order to make our code compatible with everything, is to go to Babel.com and &lt;em&gt;convert the code&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;Error handling methods, such as &lt;code&gt;try-catch&lt;/code&gt;, let you place the code that you want to execute in your program in the &lt;code&gt;try&lt;/code&gt; part, and if anything happens, any errors can be handle in the &lt;code&gt;catch&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;There is no way to &lt;strong&gt;abort or cancel a promise&lt;/strong&gt;, when, for example, you have two fetch requests going at the same time. One thing that you can do is &lt;code&gt;abortController()&lt;/code&gt;, which will &lt;em&gt;cancel one or more web requests&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>npm</category>
    </item>
    <item>
      <title>Some things to know about Lit</title>
      <author>Westbrook Johnson</author>
      <pubDate>Mon, 04 Oct 2021 03:04:18 +0000</pubDate>
      <link>https://dev.to/open-wc/some-things-to-know-about-litelement-282c</link>
      <guid>https://dev.to/open-wc/some-things-to-know-about-litelement-282c</guid>
      <description>&lt;p&gt;When reviewing software with which you have little experience, it's pretty common to attempt to compare it to software you have used before. That can help you get a handle on the general ergonomics and decisions behind the two pieces of software in question. However, one thing that this approach is not particularly good at is comparing the new software &lt;em&gt;in situ&lt;/em&gt;. You may have spent a good amount of time investigating, researching, and getting comfortable with the software you're already using in the context of your particular use casso much so, that it may even be the best solution available in that context. Comparing a new software in that context (unless it, too, is purpose-built for that context) can do a disservice to the software under test, as well as to your ability to fully understand the benefits of that software.&lt;/p&gt;

&lt;p&gt;This is what I keep coming back to when people say things like "X isn't as good as Y" when "X" is a way to build web components (&lt;a href="https://webcomponents.dev/blog/all-the-ways-to-make-a-web-component/"&gt;of which there are many&lt;/a&gt;) and "Y" is a JS framework. Even before you fill actual names into either side of the equation the differences in usage of what you fill those in with is important:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JS frameworks often want to own most or all of a page, whereas a web component is a single custom element on an potentially large and diverse DOM tree.&lt;/li&gt;
&lt;li&gt;Functional JS frameworks often hide much of that ownership from view to both the benefit (less code) and expense (less flexibility) of developers leveraging them.&lt;/li&gt;
&lt;li&gt;JS Frameworks tend to be an abstraction above the DOM and in this way, their "components" can exist as both literal (DOM/UI elements) and figurative (data connectivity/translations to non-web contexts).&lt;/li&gt;
&lt;li&gt;Web components being a DOM element can interact with their position in the DOM in the ways you'd otherwise need to bend over backward to do in a framework.&lt;/li&gt;
&lt;li&gt;JS frameworks often ship a lot of JS down the wire that may not be required by your application or component(s) whether or not the framework author gives you the ability to manage how much of that code makes it into your production build.&lt;/li&gt;
&lt;li&gt;Since web components are DOM elements, they can use their position in the DOM in ways you'd need to bend over backward to do in some JS frameworks.&lt;/li&gt;
&lt;li&gt;Web components are portable to just about any context in which you'd build web UI, while JS frameworks require your components to run in an app built with the same framework (unless or course, they allow you to export web components).&lt;/li&gt;
&lt;li&gt;and, many, many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some or all of these points could be seen as being for or against either side of the conversation. Many of these could switch from pro to con depending on the particular use case. Too often, reviews that fail to take that into account lead to half-baked, often hypercritical takes.&lt;/p&gt;

&lt;p&gt;With that in mind, I want to go over some concepts that support healthier decision-making when teams evaluate LitElement for their projects. This isn't really a "how-to", though I've got some (slightly) dated version of that available in my &lt;a href="https://dev.to/westbrook/not-another-to-do-app-2kj9"&gt;"Not Another To-Do App" series&lt;/a&gt;. This is more of a "good to know" guide, as these concepts aren't all exact ports from JS framework contexts. I hope the ability to judge the differences from a place of knowledge proves useful to you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  Default Values
&lt;/h2&gt;

&lt;p&gt;There are a number of ways to define default values for a property on a LitElement, While some do require management across the entire element class, we'll ignore those today as there are a number of options that do not require such work.&lt;/p&gt;

&lt;p&gt;First off, LitElement's &lt;code&gt;render()&lt;/code&gt; method of a LitElement is (from the user's perspective) an almost 1 to 1 conversion from the functional definitions found in other offerings. In this way, you could treat &lt;code&gt;render()&lt;/code&gt; as the only entry into your properties and define fallbacks at the top of your render function's body like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;x-dialog delay=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;Thank you!&amp;lt;/x-dialog&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, you could get very close to copy and paste the rest of a functional UI component into a LitElement for an early test of its capabilities. Leveraging scoped variables like this, rather than class properties, does leave you in much the same place that functional alternatives to UI development do; needing additional tools for memoization of that scope. As using LitElement means you're already in a class context, we can use the capabilities of a class directly rather than synthesizing them with memoization.&lt;/p&gt;

&lt;p&gt;A simpler approach to merging the two concepts is to set that fallback into the class property itself. Above I showed doing this in the &lt;code&gt;render()&lt;/code&gt; lifecycle method, however, I find it much nicer to &lt;em&gt;only&lt;/em&gt; have the template surfaced therein. Leveraging one of the earlier lifecycle methods for managing defaults, validation, sanitation, transformation, or derivation help to maintain that structure. In this case, we'll use &lt;code&gt;willUpdate()&lt;/code&gt; which doesn't require a &lt;code&gt;super&lt;/code&gt; call or a returned value, but will always be visited during each render lifecycle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;willUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this approach, you can most closely facilitate the single line defaulting that can be present when relying on a function to define a component. This does mean the &lt;code&gt;shouldRender()&lt;/code&gt; method - the first method called in the render lifecycle - will not have your default value, and if that's an issue for your style of element development, you might want to move this fallback work there, but it also means that due to the fact the LitElement renders asynchronously there's technically a possibility that your local methods could as well. Due to this fact, you may want to leverage a slightly more complete approach to a default.&lt;/p&gt;

&lt;p&gt;Here we see the property getter fallback to the value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closeDelay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does eclipse the simplicity of a functional solution as we are choosing to apply the default by writing our own getter/setter pair on the property. At the same time, however, we've fallen into a possible trap of the functional fallback approach (and as the &lt;code&gt;willUpdate()&lt;/code&gt; approach above), we're allowing our entire render lifecycle to be triggered for what might not be an actual change to our component state. Were &lt;code&gt;this.closeDelay&lt;/code&gt; to already equal &lt;code&gt;300&lt;/code&gt; and the application to change it to &lt;code&gt;undefined&lt;/code&gt;, all of these approaches we've looked at so far would cause whatever could occur in your render lifecycle to occur needlessly.&lt;/p&gt;

&lt;p&gt;By falling back in the setter as opposed to the getter you can leverage the capabilities of a class component to prevent the render lifecycle to be started altogether. In the following code, no matter how the value of &lt;code&gt;this.closeDelay&lt;/code&gt; gets to &lt;code&gt;300&lt;/code&gt; the call to &lt;code&gt;this.requestUpdate()&lt;/code&gt; is gated as long as the final value doesn't change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closeDelay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you may still ask, "but, why it is so much more code?" and, in our ecosystem of "less is more", both from a DX as well as a UX/performance standpoint, it's a great question. It's more code because it is also a different level/type of capability. Here we get a default to our property, clear gating on the render lifecycle, and on top of that, we get a value that is held state-fully within a class that defines a DOM element. This means that not only can it take part in the render pipeline of the element that owns it, but that it is available for other elements that share its DOM tree to query as a container for that state. Not every application is architected with a want or need for this capability. Not every component is going to be leveraged at the scale where the checking is needed to confirm that the render lifecycle has no side effects in a way that benefits extra prevention of the lifecycle altogether. However, when you do, you might take a look at LitElement as a path towards attaining these capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-you-like-typescript"&gt;
  &lt;/a&gt;
  So you like Typescript?
&lt;/h2&gt;

&lt;p&gt;Typescript loves a good &lt;code&gt;"Property is not definitely assigned in the constructor"&lt;/code&gt; warning, and if you like Typescript enough to use it a lot, you'll likely run into it at some point. It's telling you this, because in contrast to what you've been told Typescript is NOT smarter than you and it can't tell if something &lt;em&gt;should&lt;/em&gt; always be available, only if it &lt;em&gt;might&lt;/em&gt; not be available. You can set an initial value to a property, and it'll never yell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// always available, always a string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're looking for that to &lt;em&gt;have&lt;/em&gt; to be initialized to use your element, so &lt;em&gt;you&lt;/em&gt; KNOW it's going to always have a value, but you want the consumer to initialize it, then you can tell Typescript that by using the &lt;code&gt;!&lt;/code&gt; operator once and be done with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// no initial value, but a string is required from the consumer&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you still want to be defensive, you can add some helper code in your lifecycle to support a consumer leveraging your custom element correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;shouldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// great location to make sure it's NEVER undefined;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`myProperty` is unset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shouldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// for one time availability confirmation&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`myProperty` is unset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#required-properties"&gt;
  &lt;/a&gt;
  Required properties
&lt;/h3&gt;

&lt;p&gt;In this way, you can also manage required properties/attributes. No, it doesn't fall within the available management of a tool-based contract with the consumers of your component, however, a tool-based contract is not strictly enforceable. You as a component author can tell Typescript or a linter to error on certain things, but your consumer can tell them not to just as easily. Deciding to &lt;em&gt;only&lt;/em&gt; leverage tooling for this sort of capability might mean less work for you, but it doesn't guarantee better outcomes for your consumers. Any component author will need to decide the risks they are willing to foist onto their consumers when publishing a component, and this is yet another item to manage on that list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-management"&gt;
  &lt;/a&gt;
  Event management
&lt;/h2&gt;

&lt;p&gt;Event listeners added directly on &lt;code&gt;this&lt;/code&gt; in a custom element &lt;em&gt;do not&lt;/em&gt; need to be cleaned up when disconnected from the &lt;code&gt;document&lt;/code&gt;. Once all references to the element are released, the same garbage collection that cleans up the element itself will clean up the events bound to it. What's more, when calling &lt;code&gt;addEventListener&lt;/code&gt; on &lt;code&gt;this&lt;/code&gt;, the method's &lt;code&gt;this&lt;/code&gt; reference automatically reverts to the instance. You don't need to bind the method, so you can call a class method directly without any &lt;code&gt;.bind(this)&lt;/code&gt; or class field arrow-functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MenuTrigger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;willUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Events are even easier if you know the name of the event you're wanting to listen for will be the same throughout the lifecycle of your application. With that knowledge you can listen just once without needing to add/remove the listener based on even name changes over time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MenuTrigger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;known-event-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done and done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stylemap-usage"&gt;
  &lt;/a&gt;
  styleMap usage
&lt;/h2&gt;

&lt;p&gt;Lit's &lt;code&gt;styleMap()&lt;/code&gt; directive helps when setting the &lt;code&gt;style&lt;/code&gt; attribute on HTML elements from JavaScript. It accepts an object with css-property keys and string, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; values. This means you can prevent a CSS property from being added to the element by passing &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as the value, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styleMap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit/directives/style-map.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;p
        style=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1px solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I don't show a type mismatch&lt;/span&gt;
          &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I do show a type mismatch&lt;/span&gt;
        &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
      &amp;gt;Hello, world!&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://lit.dev/playground/#project=W3sibmFtZSI6InNpbXBsZS1ncmVldGluZy50cyIsImNvbnRlbnQiOiJpbXBvcnQge2h0bWwsIGNzcywgTGl0RWxlbWVudH0gZnJvbSAnbGl0JztcbmltcG9ydCB7Y3VzdG9tRWxlbWVudCwgcHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7c3R5bGVNYXB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5cbkBjdXN0b21FbGVtZW50KCdzaW1wbGUtZ3JlZXRpbmcnKVxuZXhwb3J0IGNsYXNzIFNpbXBsZUdyZWV0aW5nIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgcCB7IGNvbG9yOiBibHVlIH1gO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIG5hbWUgPSAnU29tZWJvZHknO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPHBcbiAgICAgICAgc3R5bGU9JHtzdHlsZU1hcCh7XG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkJyxcbiAgICAgICAgICB3aWR0aDogJzIwMHB4JyxcbiAgICAgICAgICBmbG9hdDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1hcmdpbjogMTAsXG4gICAgICAgIH0pfVxuICAgICAgICA-SGVsbG8sICR7dGhpcy5uYW1lfSE8L3A-YDtcbiAgfVxufVxuIn0seyJuYW1lIjoiaW5kZXguaHRtbCIsImNvbnRlbnQiOiI8IURPQ1RZUEUgaHRtbD5cbjxoZWFkPlxuICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NpbXBsZS1ncmVldGluZy5qc1wiPjwvc2NyaXB0PlxuPC9oZWFkPlxuPGJvZHk-XG4gIDxzaW1wbGUtZ3JlZXRpbmcgbmFtZT1cIldvcmxkXCI-PC9zaW1wbGUtZ3JlZXRpbmc-XG48L2JvZHk-XG4ifSx7Im5hbWUiOiJwYWNrYWdlLmpzb24iLCJjb250ZW50Ijoie1xuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJsaXRcIjogXCJeMi4wLjAtcmMuMlwiLFxuICAgIFwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI6IFwiXjEuMC4wLXJjLjJcIixcbiAgICBcImxpdC1lbGVtZW50XCI6IFwiXjMuMC4wLXJjLjJcIixcbiAgICBcImxpdC1odG1sXCI6IFwiXjIuMC4wLXJjLjNcIlxuICB9XG59IiwiaGlkZGVuIjp0cnVlfV0"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current version of Lit's styleMap excludes numbers as values. You might expect Lit to automatically convert numbers to &lt;code&gt;px&lt;/code&gt; values, but on second thought that isn't actually what you'd want. In CSS, where &lt;code&gt;px&lt;/code&gt; is just one of many units that a numeric CSS property could accept (&lt;code&gt;%&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vwmax&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, &lt;em&gt;ad infinitum&lt;/em&gt;), there's no way for Lit to know or even assume what kind of number you're using. On top of that, you might want to apply unit-less numbers directly to your styles:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XL&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
    output {
      background-color: hsl(var(--hue, 0) 50 100);
    }
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

Thanks &lt;a class="mentioned-user" href="https://dev.to/bennypowers"&gt;@bennypowers&lt;/a&gt;
 for the code sample here.



&lt;p&gt;Defaulting numbers to &lt;code&gt;px&lt;/code&gt; would be a foot-gun. Instead, Lit encourages you to be explicit with your CSS code. Doing so not only helps your consumers, but your teammates and future self as well when it comes time to maintain the components that you create.&lt;/p&gt;




&lt;p&gt;One of the best things about &lt;code&gt;lit-html&lt;/code&gt;, the renderer underlying LitElement, is that, if you want to live on that wild side, you could create your own directive that applied number typed properties as &lt;code&gt;px&lt;/code&gt; and leverage it in your own work. Here are &lt;a href="https://lit.dev/docs/templates/custom-directives/"&gt;the docs&lt;/a&gt; for doing just that! If you're still not convinced, check out some &lt;a href="https://dev.to/open-wc/doing-a-flip-with-lit-html-2-0-3gn4"&gt;directives with which I've experimented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: the above article, "Doing a FLIP with &lt;a href="mailto:lit-html@2.0"&gt;lit-html@2.0&lt;/a&gt;", was written against an RC of &lt;code&gt;lit@2.0&lt;/code&gt; and may not be 100% current. I'll be looking to update it here, soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you're learning a new piece of software, by all means, start by comparing it to something that you know. It's like a cheat code to getting started down the path of learning something new. Once you've done that, don't stop there, get into a real use case with it and learn what sort of capabilities or techniques it unlocks or supports. Only then can you really get into the question of why it's doing so and whether in the context that it is intended to be used (or the context that you might use it) it's the sort of tool you want to leverage for the job.&lt;/p&gt;




&lt;p&gt;If you do get to building something with LitElement, come share it here and let's chat about the whats and whys of what you've done/are trying to do. I look forward to seeing it here in the comments, or hit me up on the &lt;a href="https://join.slack.com/t/lit-and-friends/shared_invite/zt-llwznvsy-LZwT13R66gOgnrg12PUGqw"&gt;Lit &amp;amp; Friends Slack&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>litelement</category>
      <category>webcomponents</category>
      <category>typescript</category>
      <category>learning</category>
    </item>
    <item>
      <title>Do you wanna keep your embedded database encrypted?</title>
      <author>Akash Srivastava</author>
      <pubDate>Mon, 04 Oct 2021 02:58:41 +0000</pubDate>
      <link>https://dev.to/dev1721/do-you-wanna-keep-your-embedded-database-encrypted-5egk</link>
      <guid>https://dev.to/dev1721/do-you-wanna-keep-your-embedded-database-encrypted-5egk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Data privacy and security is the priority of every software product and services. During developing any software product or services as a developer first thing we should have to keep in mind that the storage and fetching of data should be secured and protected. &lt;br&gt;
In this blog I am using SQLite Database and Python Language to show how to encrypt Data inside database and how to show the decrypted data on client side.&lt;br&gt;
I am dividing the process into several parts to get good understanding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding of Data Encryption&lt;/li&gt;
&lt;li&gt;Software Setup&lt;/li&gt;
&lt;li&gt;Core Coding Understanding&lt;/li&gt;
&lt;li&gt;Inferences &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#theory-of-data-encryption"&gt;
  &lt;/a&gt;
  Theory of Data Encryption
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#theory"&gt;
  &lt;/a&gt;
  Theory
&lt;/h3&gt;

&lt;p&gt;Encryption is the process of translating plain text data (plaintext) into something that appears to be random and meaningless (ciphertext). Decryption is the process of converting ciphertext back to plaintext.&lt;br&gt;
To encrypt more than a small amount of data, symmetric encryption is used. A symmetric key is used during both the encryption and decryption processes. To decrypt a particular piece of ciphertext, the key that was used to encrypt the data must be used.&lt;br&gt;
The goal of every encryption algorithm is to make it as difficult as possible to decrypt the generated ciphertext without using the key. If a really good encryption algorithm is used, there is no technique significantly better than methodically trying every possible key. For such an algorithm, the longer the key, the more difficult it is to decrypt a piece of ciphertext without possessing the key.&lt;br&gt;
It is difficult to determine the quality of an encryption algorithm. Algorithms that look promising sometimes turn out to be very easy to break, given the proper attack. When selecting an encryption algorithm, it is a good idea to choose one that has been in use for several years and has successfully resisted all attacks.&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/data-encryption-and-decryption"&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flow-diagram"&gt;
  &lt;/a&gt;
  Flow Diagram
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ey3qRaaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tgdxclbonzxzo4no0u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ey3qRaaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tgdxclbonzxzo4no0u8.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-setup"&gt;
  &lt;/a&gt;
  Software Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Tool: VS-Code: &lt;a href="https://code.visualstudio.com/download"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Language: Python &lt;a href="https://www.python.org/downloads/"&gt;Download&lt;/a&gt;, SQLite &lt;a href="https://www.sqlite.org/download.html"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Libraries: Cryptography Command: &lt;code&gt;pip install cryptography&lt;/code&gt;-&lt;a href="https://pypi.org/project/cryptography/"&gt;Read Here&lt;/a&gt;,
Fernet &lt;a href="https://cryptography.io/en/latest/fernet/"&gt;Read Here&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#core-coding"&gt;
  &lt;/a&gt;
  Core Coding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scenario-to-understand-coding"&gt;
  &lt;/a&gt;
  Scenario to understand Coding
&lt;/h3&gt;

&lt;p&gt;Let us take a part of application which maintains the daily routine of ours in a database embedded in our system. But there is a risk of keeping the &lt;code&gt;.db&lt;/code&gt; file in the system as plain text because the data is readable. So, we have to keep this database encrypted hence we will use following method to encrypt the data base.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#file-structure-and-understanding"&gt;
  &lt;/a&gt;
  File Structure and Understanding
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQ4RaWz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r1bf4p9bksm8k9gwre7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQ4RaWz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r1bf4p9bksm8k9gwre7.JPG" alt="filestructure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using modular form development. So for each functionality we will be creating a module. And finally use each module in main module by importing and calling it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creation-of-database"&gt;
  &lt;/a&gt;
  Creation of Database
&lt;/h4&gt;

&lt;p&gt;As shown there is a file name &lt;code&gt;createdb.py&lt;/code&gt;.The purpose of this file is to create a new database &lt;code&gt;mySecret.db&lt;/code&gt; having following columns: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routine ID: It is the description of routine such as morning routine, breakfast, office hour etc.&lt;/li&gt;
&lt;li&gt;Date: The date when this routine is or was happened.&lt;/li&gt;
&lt;li&gt;Start Time: The time when this routine is starting/started.&lt;/li&gt;
&lt;li&gt;End Time: The time when this routine is ending/ended.&lt;/li&gt;
&lt;li&gt;Status: The Routine is done/pending/in progress/not done etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;createdb.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the db creation.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code-to-implement-the-db-creation"&gt;
  &lt;/a&gt;
  Python Code to implement the db creation
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

def create():
    conn = sqlite3.connect("mySecret.db")
    crsr = conn.cursor()
    sql_command = """CREATE TABLE ROUTINE (
    routineID VARCHAR(10000) PRIMARY KEY,
    date DATE,
    startTime VARCHAR(5),
    endTime VARCHAR(5),
    status VARCHAR(10));"""
    crsr.execute(sql_command)
    conn.commit()
    conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt; is the library we have to import in order to work with database in python.&lt;br&gt;
Every Database handling under sqlite3 follows simple process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection with database&lt;/li&gt;
&lt;li&gt;Taking the curser of database&lt;/li&gt;
&lt;li&gt;Giving the SQL Query to Execute&lt;/li&gt;
&lt;li&gt;Commit the Execution&lt;/li&gt;
&lt;li&gt;Closing the Database. &lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#sql-query-to-create-table"&gt;
  &lt;/a&gt;
  SQL Query to create Table
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE ROUTINE (
routineID VARCHAR(10000) PRIMARY KEY,
date DATE,
startTime VARCHAR(5),
endTime VARCHAR(5),
status VARCHAR(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generation-of-universal-key"&gt;
  &lt;/a&gt;
  Generation of Universal Key
&lt;/h4&gt;

&lt;p&gt;As shown there is a filename &lt;code&gt;generateKey.py&lt;/code&gt;.The purpose of this file is to generate a universal key which would be use while encryption and decryption of a cell in database.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;generateKey.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the key generation.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code-to-implement-the-key-generation"&gt;
  &lt;/a&gt;
  Python Code to implement the key generation
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

def generate():
    key = Fernet.generate_key()
    with open("universal.key","wb") as key_files:
        key_files.write(key)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;Fernet is the library from Cryptography which is being used in this code to generate the key which we will be using as universal key as of now. The generated key is stored in the file &lt;code&gt;universal.key&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#process-of-encrypting-data"&gt;
  &lt;/a&gt;
  Process of Encrypting Data
&lt;/h4&gt;

&lt;p&gt;As shown there is a filename &lt;code&gt;encrypt.py&lt;/code&gt;.The purpose of this file is to encrypt the secret message passed as parameter.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;encrypt.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the encryption.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

def loadKey():
    key = open("universal.key","rb").read()
    return key

def Encrypt(secret):
    key = loadKey()
    encodeSecret = secret.encode()
    fer  = Fernet(key)
    return fer.encrypt(encodeSecret)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;Fernet is the library from Cryptography which is being used in this code to encrypt the data. We will made a block name &lt;code&gt;loadKey()&lt;/code&gt; which will load the universal key stored inside the &lt;code&gt;universal.key&lt;/code&gt;. Then we will make an &lt;code&gt;Encrypt()&lt;/code&gt; block accepting "secret" as the parameter. For encryption we will first encode the secret message then pollute it with the salt made by &lt;code&gt;Fernet(key)&lt;/code&gt;by encrypting with the encoded message.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#process-of-decrypting-data"&gt;
  &lt;/a&gt;
  Process of Decrypting Data
&lt;/h4&gt;

&lt;p&gt;As shown there is a filename &lt;code&gt;decrypt.py&lt;/code&gt;.The purpose of this file is to decrypt the encrypted message passed as parameter.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;decrypt.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the decryption.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

def loadKey():
    key = open("universal.key","rb").read()
    return key

def Decrypt(encryptSecret):
    key = loadKey()
    fer  = Fernet(key)
    decryptSecret = fer.decrypt(encryptSecret)
    return decryptSecret.decode()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;Fernet is the library from Cryptography which is being used in this code to decrypt the data. We will made a block name &lt;code&gt;loadKey()&lt;/code&gt; which will load the universal key stored inside the &lt;code&gt;universal.key&lt;/code&gt;. Then we will make an &lt;code&gt;Decrypt()&lt;/code&gt; block accepting "encryptSecret" as the parameter. For decryption we will first depollute the secret message from the salt made by &lt;code&gt;Fernet(key)&lt;/code&gt;by decrypting with the encrypted message then decode it to view the original secret message.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-entry-of-encrypted-data-to-database"&gt;
  &lt;/a&gt;
  Data Entry of encrypted data to database.
&lt;/h4&gt;

&lt;p&gt;As shown there is a file name &lt;code&gt;dataentry.py&lt;/code&gt;.The purpose of this file is to insert encrypted data into the database &lt;code&gt;mySecret.db&lt;/code&gt; having following columns: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routine ID: It is the description of routine such as morning routine, breakfast, office hour etc.&lt;/li&gt;
&lt;li&gt;Date: The date when this routine is or was happened.&lt;/li&gt;
&lt;li&gt;Start Time: The time when this routine is starting/started.&lt;/li&gt;
&lt;li&gt;End Time: The time when this routine is ending/ended.&lt;/li&gt;
&lt;li&gt;Status: The Routine is done/pending/in progress/not done etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;dataentry.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement data entry of encrypted data.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3
import encrypt 

def enter(id,dt,st,et,status):
    conn = sqlite3.connect("mySecret.db")
    crsr = conn.cursor()
    sql_command = """INSERT INTO ROUTINE(routineID,date,startTIme,endTime,status)
    VALUES (?,?,?,?,?);"""
    id = encrypt.Encrypt(id)
    dt = encrypt.Encrypt(dt)
    st = encrypt.Encrypt(st)
    et = encrypt.Encrypt(et)
    status = encrypt.Encrypt(status)

    tup = (id,dt,st,et,status)
    crsr.execute(sql_command,tup)
    conn.commit()
    conn.close()  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt; is the library we have to import in order to work with database in python. And we are also importing 'encrypt' module made by us.&lt;br&gt;
Every Database handling under sqlite3 follows simple process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection with database&lt;/li&gt;
&lt;li&gt;Taking the curser of database&lt;/li&gt;
&lt;li&gt;Giving the SQL Query to Execute&lt;/li&gt;
&lt;li&gt;Commit the Execution&lt;/li&gt;
&lt;li&gt;Closing the Database. 
The &lt;code&gt;enter()&lt;/code&gt; block takes 5 parameters as input. And then encrypt each parameter and then insert into the db in the form of tuple as shown in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#sql-query-to-insert-into-db"&gt;
  &lt;/a&gt;
  SQL Query to insert into db
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO ROUTINE(routineID,date,startTIme,endTime,status)
    VALUES (?,?,?,?,?);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#printing-of-decrypted-data"&gt;
  &lt;/a&gt;
  Printing of Decrypted data
&lt;/h4&gt;

&lt;p&gt;As shown there is a file name &lt;code&gt;dataprinting.py&lt;/code&gt;.The purpose of this file is to print decrypted data from the database &lt;code&gt;mySecret.db&lt;/code&gt; having following columns: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routine ID: It is the description of routine such as morning routine, breakfast, office hour etc.&lt;/li&gt;
&lt;li&gt;Date: The date when this routine is or was happened.&lt;/li&gt;
&lt;li&gt;Start Time: The time when this routine is starting/started.&lt;/li&gt;
&lt;li&gt;End Time: The time when this routine is ending/ended.&lt;/li&gt;
&lt;li&gt;Status: The Routine is done/pending/in progress/not done etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;dataprinting.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement data printing of decrypted data.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3
import decrypt

def printit():
    conn = sqlite3.connect("mySecret.db")
    crsr = conn.cursor()
    crsr.execute("SELECT * FROM ROUTINE")
    rows = crsr.fetchall()
    for row in rows:
        for cell in row:
            print(decrypt.Decrypt(cell))

    conn.commit()
    conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt; is the library we have to import in order to work with database in python. And we are also importing 'decrypt' module made by us.&lt;br&gt;
Every Database handling under sqlite3 follows simple process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection with database&lt;/li&gt;
&lt;li&gt;Taking the curser of database&lt;/li&gt;
&lt;li&gt;Giving the SQL Query to Execute&lt;/li&gt;
&lt;li&gt;Commit the Execution&lt;/li&gt;
&lt;li&gt;Closing the Database. 
The &lt;code&gt;printit()&lt;/code&gt; fetch all rows(tuple) of database. And then decrypt each cell of each tuple and then print it. &lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#sql-query-to-select-all-elements"&gt;
  &lt;/a&gt;
  SQL Query to select all elements
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM ROUTINE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-main-module"&gt;
  &lt;/a&gt;
  The Main Module
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;main.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from os import path
import createdb
import generateKey
import dataentry
import dataprinting

def main():
    if(path.exists('mySecret.db')==False):
        generateKey.generate()
        createdb.create()
    exit = int(input("enter 0 if you want to exit or 1 to continue entring data"))
    while(exit==1):
        id = input("input routineID")
        dt = input("input date in DD-MM-YYYY")
        st = input("input start time in hh:mm")
        et = input("input end time in hh:mm")
        status = input("not done/pending/inprogress/done")
        dataentry.enter(id,dt,st,et,status)
        exit = int(input("enter 0 if you want to exit or 1 to continue entering data"))
    dataprinting.printit()

main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;We are importing &lt;code&gt;path from os&lt;/code&gt;, self made modules &lt;code&gt;createdb&lt;/code&gt;,&lt;code&gt;generateKey&lt;/code&gt;,&lt;code&gt;dataentry&lt;/code&gt;and&lt;code&gt;dataprinting&lt;/code&gt;. The purpose of &lt;code&gt;path&lt;/code&gt; is to check whether the database 'mySecret.db' already exists or not. If it is not exist we will create the db and generate one universal key otherwise leave these two steps as shown in the &lt;code&gt;main()&lt;/code&gt; block. Now we are asking user to select either 1 "if they want to insert data in db" or 0 "if they do not want to insert data in db". Then in while loop we are taking 5 inputs and entering in database using module &lt;code&gt;dataentry&lt;/code&gt;.Once the data is being entered control comes out of while loop and using module &lt;code&gt;dataprinting&lt;/code&gt; print the data.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#code-run"&gt;
  &lt;/a&gt;
  Code Run
&lt;/h5&gt;

&lt;p&gt;Once you run &lt;code&gt;main.py&lt;/code&gt; the code it will ask &lt;code&gt;enter 0 if you want to exit or 1 to continue entering data'. Click 1 and enter insert all data as asked. once all rows are finished press 0 to exit out of loop. And all the data will be printed. But in behind the scene some process happened.&lt;/code&gt;mySecret.db` and 'univeral.key' are created.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Output &lt;br&gt;
&lt;strong&gt;Universal Key&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yn1ZrHZ2VBLqq7iZ38pTMvRf9-3pyAVHFlWjADIPO20=&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Consider below image to open db&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyEMd6Lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxhoygu41jqxi059lq52.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyEMd6Lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxhoygu41jqxi059lq52.JPG" alt="opendb"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Data inside DB:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;routineID&lt;/th&gt;
&lt;th&gt;date&lt;/th&gt;
&lt;th&gt;startTime&lt;/th&gt;
&lt;th&gt;endTime&lt;/th&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDfTHxfYmU4kHl9uSqt-bF0LpSlZZyxyk2cXbyummG0HRfLRH6Ouja8u7yt12Ii-qAHzX_hkohLhg9GKglzEZhT2Hg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfTh4WTHW0ezh8kpWnr7Ccs5ZvdI12jtbxVRKa4pmKOx-Fm6cZ1NGbV_uTkk9--GG97LEjUSEEPRN-8Cj3RYtWSjQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfTeGHg8foPNYIZxchL61UDmORidKvFgvdy_eiBX8vEV-24qk5fTrjinehW51AAs3ZZHWN3R-tvnJdfUpcykvMpsg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfTNFTmf7Cxgc48IUmrrKakT4-CSi4FYLp57DTzlqy3s9TFuEKXpIAPRa2gNWif_vO2Nc_6_Na1CpmvdrHNRdaTZQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfT_hCJYgSVWZjCTy3YqWyhvORmVDi4tS4EZHsHJLe6P3t4ljZRFro21eFKemOnK9SZh3uzl7NOM7c54nDTBEQkSg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDhKooyIOnSHEJWhkj8QUaNw1YPIPzxyYHUE7yoBGWsIDlVy5_s7_SJPnF6yj5kxf_Lykl6SwYpVRMNbmJ9dGU7NkA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKF9ATmebjCCNW_dLK74LvNm9l8sBk7PbxPG-70KsHolHNjZ5mFE3aj62XJS1TaGrZTxtMBYUiNuBs1WZwcqzymQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKJgoYW2tihp7tEgKEF1QG5EMHYkZ3nA6I27T_bArxt7V3-PZ1snhlkWN2OSR4ITfJw-0bIQh30Og08PFmaFDedA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKgz0fI5cefWYeQknGfQ44vnAZvuSTFZdGPsN_dVAduMsTfkqhrwCe-HaX3Lv47QorlypTQRJnC0dQaGHvvRqXZg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKNSG8qx9le0TOcdHIMW8_iJX-OPAxTdQvJCuK6Krr0vABAdiuZGw8hyU1D42Cm8YOWIBkKeURrZli4-G3J7M3sQ==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDiG3kN7BLWKwKQo-VESvAw-Wqt8rEHfWUD1mn5sdB8qbQcnpsA0pFMWD3Mp85AWtqTxfEO1rkd62Nc6FMO3K_AWrA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiGsTxqUZT3r9wWit7UwrYuQ-bcg_19nK1qJXNPo7oN3L2tBTkigDVvAW1fLpfqt-0T5Uu6pw_8UzT-utP50rI6gw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiG66j46ciB5Z62meatN0cqcJcIRgrR36wfOyQ9WgEx14tETC_hHwOXshywTP9xxDHuBjJe7L4mLul-qhE-oJ5ZiQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiGF4Oz_wG2wlwLqLTPNQreDbVZGx96-cCtCE93pduRM5K_Tvgo8Jz5Ef0jnuWqmcaD378X7x8zXMwImzjjJW6VCg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiGP8WxV-OFxEfhXRGNBr7bmTc-vH1Hlfrd9jAX4wfjV3Y4W8HldHJY0tp1UQ_VyhRdyc08HMiRh4oEOHLn-nkoPg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDjN6O28PEj0_xDYcJWu4hWQO0jcW4labsJ-HM4OfTOQoguXMFlXZpdbOpER4jdAEYfHaU6zK5NEtA5RiCSb-XV5lg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNRmeDI-vv3N4PbLedclWNbdjBzVQ935Fws4RsHbgiq2JP92o7oaOQsyY-kwChlzSijk6PcQy1J0uDelXbFjZcEg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNBAt6T-s6KoLkL7zRBrM-TS4gjmTtgN6fPJrJl2BtevCHlSoizbafsNHioaBEJv0fmivKeu6vUaCcaMawTW4Fnw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNTtJctnIsAr7ltrCbxTn2MNWpDcD32kjfCLuFOUrkQp-sQBWoxoxcTM6C5SbGUiUCrxiYuwTlpFIB2QBChEmN7w==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNII9CHW1E0AluwHousw7O1vQzVDXhU4QtJyVvq9Y1sAeL6bMO1WY9Rqfuj0K6B1sWoUZOFrHdqv60cEnuR8GVWg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDkMNAwdIZ1cNqzFvdqSbH_NRYYO0jWx4GOfUn29DVg910VH1z_eyztdeVcv4bxgYD3y8ZGTGfkxUQyhZruYICB-FA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMNoRf6A3ySmmsWyjAYljqpbQx5SfUtn5J_IpmV0cRi5CJvPMqZD1P7wL8WGWLaa7WshAST35xn5-LXfLaVbGhYA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMbPjQ7HX8oWV7jj1ISoH54_7ED3GmrJjuMfjSPf1cmHrRhCYxyM2tsXFFiyEqJoQ8BnQqXt9fiUlfXWAtJq088w==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMMcEFFoCtHHEAkDOFVMtqHVD6VTRVFV64iWpIgpBYUsy8cjRIECtS8qtCMNhXJM7DW0OjU0LYhHswtlfrDLNIHQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMfuJ9TC81M2uXGx4XioqSnC9s0VcRSk9y6GDlf_jxoyy-ovo1iwg8r8OUz2UyQY7WqhHf4R4N1OG9axIRGkIYmg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDkyXbUR3KEJMjAG7M58zCdRA_b_TECSX9Ux9ZLBdnqgp76b6csZeaL61RHsvgdgNocem6nsF3u52FLVQl0wkYL3dQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDky51NPI0NSi7w-pyFrGfGSV2Ultb-QOZJSBx70XKTmlpgbJqs-GdmJ-Q4tppl5E66_10mRYoyjWeY8P1JzRwPtyw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkyyo4wgA_tQAuL4PBIpufjiddpTPDL9VeJT9D4kzk6RjIunNo_AqTwxrXJ-FK5Doamfc1ph2thuVrkxO9_8-HakA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkyt8KS19BrKYEKVWW3KeRvpJCR6j1k9B-0IxaS-5EYniPpEBPhglxHdDkxyCeZAGqOFdym17X_ab7wE-Xcn__xgA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkyoEmGhGn6X5Mb0a2KIutYKdl9jqmBTXTyS3vjmDKvHwsl56vCwJ_39IJqGv0KrFz2FX095QUSCNQ-nCS6xZ1lRw==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDmUe3eLl4H6YLBc1VEtJShGqSDtLZeFVfwlm2AvGiMqhVI0K_iA4N1q1LEu3GLHK6jLX8j3Djx9qaM2OHfLTv4ImA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmUhtF-96H5ZAi3Ro9l4bViohqTDaRP2ZtTk3wolHKFdkHMyPkMWpXy1R94pBNHdA6hhjHBDGItVMADLv2ZEmFqDw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmU9JHb_krh3d-gj9twSgwlKrBfaHHjs-Qv0HB8RaNdZZ0Ztunia59QElWa5Jk9EwPNAg7c5jb_tTltkYkVpjTT9Q==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmU3Vsk99Wnkxo03vQVtbALL3P9HynbAzkJMiXvmX8JG08yu4xMi96YIEELRpbqk7wb1VTExtDHtbyjFQXVDOIb6w==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmU7_Hrs5jm_Y4h7VL0aKz4MuPXktr6XDBLqIVmnWtozvDbOCukZQSgQz5PnNxWPCokb1HXZ4EIIWuahd3AT64ybg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDnGa0YHTkv1VXM5BsYVw68C-VfSyFp9q5p3aU6wyus1fzta-xfNRQF4lI-N5hzvEjShv2sYWrBSfSl2s4b8f4hDIQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGlXHA31rr0Hs7zU_daF51zDtNSKEdtqCjrbhH9P1_U4n9AXn_IDKpRrxPn_r6yNTPUE1CVClOPqRCosYkIKT6FQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGeg7sWOwNrAHVkxZlPkyqJBcc-HI1QqU01mEWHv-LWsYo-tKUUNldMrz7yeAZTmtQB0RMsN-pdERZmrEd2ylmBg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGnnqaJ53FvFpv4rkkoMpTzm398pGEHad6cMde9VZ4RY1xqeJf4sGfMBYSbQHW849DBSlQVhKn8V9samDXisEuOQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGm-l6Bn_IlD_SCJhHvR_FaD4asZaEp1oJ_pAXPIB1B74hpglV7Ajl-ARaQlX0kcaJjuy3w9tXKNlNFvoY5nWb4Q==&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Printing Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sHuhApl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/492g6u48x9yadhzwomsh.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sHuhApl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/492g6u48x9yadhzwomsh.JPG" alt="print"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#inference"&gt;
  &lt;/a&gt;
  Inference
&lt;/h2&gt;

&lt;p&gt;Hence, the blog concludes with the demonstration of understanding of Data base encryption using Python and SQLite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;By Akash Srivastava&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do Follow me on&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/akash-s-233ab3160/"&gt;[LinkedIn]&lt;/a&gt;&lt;a href="https://github.com/AkashSrivastava1721"&gt;[GitHub]&lt;/a&gt;&lt;a href="https://twitter.com/AkashSr1234"&gt;[Twitter]&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>sqlite</category>
      <category>hacktoberfest</category>
      <category>security</category>
    </item>
    <item>
      <title>Eating the Cloud from Outside In</title>
      <author>swyx</author>
      <pubDate>Mon, 04 Oct 2021 02:23:15 +0000</pubDate>
      <link>https://dev.to/swyx/eating-the-cloud-from-outside-in-1n2d</link>
      <guid>https://dev.to/swyx/eating-the-cloud-from-outside-in-1n2d</guid>
      <description>&lt;p&gt;Cloudflare launched on September 27, 2010, and every year since, it has made it a point to celebrate "&lt;a href="https://blog.cloudflare.com/tag/birthday-week/"&gt;Birthday Week&lt;/a&gt;" with a raft of launches. By far, the show-stopper this year was the announcement of &lt;a href="https://blog.cloudflare.com/introducing-r2-object-storage/"&gt;R2 Storage&lt;/a&gt;, an S3-compatible Object Storage service that directly takes aim at &lt;a href="https://blog.cloudflare.com/aws-egregious-egress/"&gt;AWS' "Hotel California" business model&lt;/a&gt;. This has been extremely well received, going by the response on &lt;a href="https://news.ycombinator.com/item?id=28682237"&gt;HN&lt;/a&gt; and &lt;a href="https://twitter.com/QuinnyPig/status/1443028078196711426"&gt;Twitter&lt;/a&gt;. In its past 5 birthdays, Cloudflare has gone from world-class CDN to offering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2017: &lt;a href="https://workers.cloudflare.com/"&gt;serverless compute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2018: &lt;a href="https://developers.cloudflare.com/workers/learning/how-kv-works"&gt;eventually consistent datastore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2019: &lt;a href="https://blog.cloudflare.com/extending-the-workers-platform/"&gt;website hosting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2020: &lt;a href="https://blog.cloudflare.com/introducing-workers-durable-objects"&gt;strongly consistent datastore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2021: object storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and declaring that they will be "&lt;a href="https://www.protocol.com/enterprise/cloudflare-r2-storage-aws"&gt;the fourth major public cloud&lt;/a&gt;". When your market cap is $36 billion and your next biggest competitor is worth $1.6 &lt;em&gt;trillion&lt;/em&gt; (~45x larger, albeit not pure-play), this is a bold statement. Many startups are trying by offering specialized &lt;a href="https://www.swyx.io/cloud-distros/"&gt;Cloud Distros&lt;/a&gt;, but all building with AWS as the presumptive winner of the "first layer cloud" rather than trying to compete.&lt;/p&gt;

&lt;p&gt;What's Cloudflare's strategy here?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My realization: The big 3 clouds are playing Chess, but &lt;em&gt;Cloudflare is playing Go&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ2pkwgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dojvxo0i0u5v7cmm1d4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ2pkwgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dojvxo0i0u5v7cmm1d4p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-kinds-of-disruption"&gt;
  &lt;/a&gt;
  Two Kinds of Disruption
&lt;/h2&gt;

&lt;p&gt;The canonical thoughtleader of Disruption theory is the legendary HBS Professor Clayton Christensen, and a lot has been made of &lt;a href="https://stratechery.com/2021/cloudflares-disruption/"&gt;Cloudflare's Disruption&lt;/a&gt; of AWS; in fact, Cloudflare cofounders Matthew Prince and Michelle Zatlyn were &lt;a href="https://harbus.org/2011/cloudflare/"&gt;students of him&lt;/a&gt; at HBS. James Allworth, their Head of Innovation, studied and &lt;a href="https://claytonchristensen.com/books/how-will-you-measure-your-life/"&gt;co-authored a book&lt;/a&gt; with him. Prince &lt;a href="https://youtu.be/XeKWeBw1R5A?t=646"&gt;namechecked the Innovator's Dilemma at Cloudflare's launch&lt;/a&gt; in 2010, and in 2021 is still proudly showing off a &lt;a href="https://news.ycombinator.com/item?id=28708636"&gt;handwritten note from him&lt;/a&gt;; in short, you can be sure his lessons are never far from Cloudflare's minds.&lt;/p&gt;

&lt;p&gt;As Ben Thompson noted in &lt;a href="https://stratechery.com/2013/clayton-christensen-got-wrong/"&gt;his now-famous takedown of Christensen on the iPhone&lt;/a&gt;, people often miss that he had &lt;em&gt;two&lt;/em&gt; theories of disruption:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;New Market Disruption&lt;/strong&gt;: When incumbents ignore new technologies until it is too late.

&lt;ul&gt;
&lt;li&gt;Allworth recently wrote an instant-classic application of this on &lt;a href="https://jamesallworth.medium.com/intels-disruption-is-now-complete-d4fa771f0f2c"&gt;Intel (x86/CISC) vs Apple Silicon (ARM/RISC)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Low-End Disruption&lt;/strong&gt;: When vertically integrated premium incumbents get disrupted by "cheap and good enough" modular providers.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A third model of disruption comes from Kevin Kwok's &lt;a href="https://kwokchain.com/2021/02/05/atomic-concepts/"&gt;Atomic Concepts&lt;/a&gt;, but that is a closer fit for the &lt;a href="https://www.swyx.io/cloud-distros/"&gt;Cloud Distros&lt;/a&gt; thesis than Cloudflare.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the first theory: Cloudflare has some excellent technologists ‚Äî &lt;a href="https://en.wikipedia.org/wiki/John_Graham-Cumming"&gt;John Graham-Cumming&lt;/a&gt;,  &lt;a href="https://www.linkedin.com/in/kenton-varda-5b96a2a4/"&gt;Kenton Varda&lt;/a&gt; and &lt;a href="https://ritakozlov.com/about/"&gt;Rita Kozlov&lt;/a&gt; come to mind ‚Äî and it is doing some cool things with V8 isolates and dynamic routing, but it doesn't (in my mind) have a clear claim on the overall new technology angle, since AWS created the modern serverless paradigm, &lt;a href="https://www.amazon.science/blog/how-awss-firecracker-virtual-machines-work"&gt;open-sourced Firecracker&lt;/a&gt;, and &lt;a href="https://www.protocol.com/newsletters/protocol-enterprise/serverless-container-aws"&gt;is using Lambda for half of all new applications&lt;/a&gt; (though Cloudflare is also &lt;a href="https://blog.cloudflare.com/the-secret-to-cloudflare-pace-of-innovation/"&gt;aggressively dogfooding Workers&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Most of the disruption discussion focuses on the second model of disruption, and it rings true. Cloudflare took a part of the cloud nobody valued, gave away an insanely good free offering, and quietly accumulated an &lt;a href="https://w3techs.com/technologies/cross/proxy/content_delivery"&gt;80% market share&lt;/a&gt;.  Meanwhile, when people think of "Tier 1" AWS services, its Cloudflare equivalent, Amazon CloudFront, rarely gets any love, and the official AWS Twitter account &lt;a href="https://twitter.com/search?q=from%3Aawscloud%20cloudfront&amp;amp;src=typed_query&amp;amp;f=live"&gt;hasn't tweeted about it in almost a year&lt;/a&gt;. Cloudflare leveraged their foothold into selling premium security services, and now is expanding into other value added pieces by leaning into a fundamentally different (high fixed cost, near zero marginal cost) business model the larger incumbents structurally cannot follow.&lt;/p&gt;

&lt;p&gt;This, at least, is how Ben Thompson framed it in &lt;a href="https://stratechery.com/2021/cloudflares-disruption/"&gt;his writeup on Cloudflare's Disruption&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stratechery.com/2021/cloudflares-disruption/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSgBpUtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7258tf9irknumz5db2vg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this diagram is a little too neat. It imagines the two clouds as worlds apart. Yet R2 is explicitly designed as S3-compatible; in Prince's words, you can &lt;a href="https://news.ycombinator.com/item?id=28703464"&gt;set it to "slurp" mode&lt;/a&gt; and you magically have a S3 interface with egress that is &lt;a href="https://twitter.com/QuinnyPig/status/1443076111651401731?s=20"&gt;six orders of magnitude cheaper&lt;/a&gt;. Similarly, the original Cloudflare service could always be used together with EC2, and Cloudflare Workers have different enough usecases and limitations from AWS Lambda and Lambda@Edge that you could conceivably have a stack using all of them. &lt;/p&gt;

&lt;p&gt;This isn't Apple vs Android; premium and vertically integrated vs cheap and modular; incompatible ecosystems, and never the twain shall meet. &lt;/p&gt;

&lt;p&gt;This is something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudflare-and-the-rules-of-go"&gt;
  &lt;/a&gt;
  Cloudflare and the Rules of Go
&lt;/h2&gt;

&lt;p&gt;In the classic game of Go, you &lt;a href="https://www.pandanet.co.jp/English/learning_go/learning_go_6.html"&gt;capture pieces&lt;/a&gt; by surrounding your opponents, instead of directly replacing their spot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9r7pu2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/acapture1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9r7pu2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/acapture1.gif" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storage-capture"&gt;
  &lt;/a&gt;
  Storage Capture
&lt;/h3&gt;

&lt;p&gt;You could view Cloudflare's Bandwidth Alliance and R2 as an "encircling" move around AWS' previously secure market position with S3. By promising to be API compatible (including offering S3's eleven-nines durability guarantee and free infrequent access), Cloudflare has cut off nearly all of AWS' remaining "liberties", putting it in "&lt;a href="https://en.wikipedia.org/wiki/List_of_Go_terms#Atari"&gt;atari&lt;/a&gt;". If Cloudflare's offering matures enough to be seen as a strict superset, it places the final stone, capturing the "cloud storage" territory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dfLqDpfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/ae1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfLqDpfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/ae1.gif" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-strategy"&gt;
  &lt;/a&gt;
  Product Strategy
&lt;/h3&gt;

&lt;p&gt;In Chess, pieces have different values and capabilities. Bishops are worth 3 points and move diagonally, Rooks are worth 5 and move in straight lines, and so on. Pieces are best deployed in a sequence chain where higher value pieces support lower value ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWPNkKS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buwls1amzbahfv0q30d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWPNkKS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buwls1amzbahfv0q30d6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Go, each piece is indistinguishable from the other; it is the &lt;em&gt;network position&lt;/em&gt; that counts, not any individual piece. Support doesn't matter so much as adjacent territory claimed; in the picture below, the four white pieces on the left do far less than the four black pieces on the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uwv0RlUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwwiby0brxdq3d7mzt6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uwv0RlUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwwiby0brxdq3d7mzt6r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compare this to public statements about how Cloudflare works. &lt;a href="https://news.ycombinator.com/item?id=28703194"&gt;From Prince&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Since every server in our network runs every service&lt;/strong&gt;, once we‚Äôre in for one thing means everything we do in the region gets better and less expensive to operate. This means, counter intuitively, as we add more locations to our network our costs generally go down, not up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So while AWS has &lt;a href="https://www.lastweekinaws.com/blog/the-17-ways-to-run-containers-on-aws/"&gt;17 ways to run containers&lt;/a&gt; and &lt;a href="https://serverlessfirst.com/aws-async-message-services/"&gt;7 ways to do async message processing&lt;/a&gt;, all overlapping and reinforcing and supporting each other, Cloudflare will tend toward introducing singular primitives, &lt;a href="https://blog.cloudflare.com/cloudflare-for-offices/#built-for-purpose"&gt;stuff them in a box&lt;/a&gt;, and try to ship those boxes to &lt;a href="https://blog.cloudflare.com/cloudflare-for-offices/"&gt;as many places as will possibly take them&lt;/a&gt;. If they could install Cloudflare on your mobile phone, they would (this gets them dangerously close to being a &lt;a href="https://www.youtube.com/watch?v=5JM8bkJLLjM"&gt;real life Pied Piper&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#territory-wins"&gt;
  &lt;/a&gt;
  Territory Wins
&lt;/h3&gt;

&lt;p&gt;In Chess, you win when you take the King, which in effect has infinite point value, and it is relatively uncommon to come to a draw. In Go, you win by amount of territory claimed, and it is near impossible for one side to end up with zero territory. Perhaps this is more realistic to real life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fidNMrPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ne0yo5vzoytu04qdkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fidNMrPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ne0yo5vzoytu04qdkv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While AWS boasts an impressive &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt;230+ points of presence&lt;/a&gt;, Cloudflare has &lt;a href="https://www.cloudflare.com/network/"&gt;interconnects with 10,000 networks&lt;/a&gt; including "every major ISP, cloud provider, and enterprise". These aren't the same thing, but it reflects the substantially different game that Cloudflare is playing. From the point of view of users, Cloudflare can be much easier to use and is much more of a painkiller than other big cloud services in their stack, despite perhaps having a single digit % of mindshare and wallet share. This puts Cloudflare within a stone's throw of Ben Thompson's other big claim to fame in Tech Strategy, &lt;a href="https://stratechery.com/aggregation-theory/"&gt;Aggregation Theory&lt;/a&gt; (the Intro to Tech Strategy chapter in &lt;a href="https://www.learninpublic.org/"&gt;my book&lt;/a&gt; is free if you want my take on it).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-for-sente"&gt;
  &lt;/a&gt;
  Watch for Sente
&lt;/h3&gt;

&lt;p&gt;To &lt;a href="https://en.wikipedia.org/wiki/List_of_Go_terms#Gote,_sente_and_tenuki"&gt;quote Wikipedia&lt;/a&gt;, a move that overwhelmingly compels a player into a particular follow-up move is said to have "sente" (ÂÖàÊâã), or "initiative". In most games, the player who maintains "sente" most of the time will win.&lt;/p&gt;

&lt;p&gt;There is a lot of speculation that AWS will have to respond somehow to Cloudflare's provocations:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rerUnMnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1431046769262006274/7GJFLo-A_normal.jpg" alt="Corey Quinn profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Corey Quinn
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @quinnypig
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm REALLY curious what position &lt;a href="https://twitter.com/awscloud"&gt;@awscloud&lt;/a&gt; is going to take on Cloudflare's free egress:&lt;br&gt;&lt;br&gt;* "That's impossible, &lt;a href="https://twitter.com/Cloudflare"&gt;@Cloudflare&lt;/a&gt; will go bankrupt doing this."&lt;br&gt;* "Yeah, you caught us, we've been ripping you off for years. Have a discount."&lt;br&gt;* Complete silence.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:08 PM - 01 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444016487304364036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444016487304364036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444016487304364036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;But beyond a &lt;a href="https://www.infoworld.com/article/3634406/cloudflare-hopes-lack-of-outbound-data-fees-will-convert-aws-s3-users-to-its-r2-storage-service.html"&gt;standard PR response&lt;/a&gt;, I doubt AWS will respond to mere noise - S3 data egress revenues have to take a significant downturn before AWS will be compelled to act. But when it does, every future move of Cloudflare's will be taken increasingly seriously. Cloudflare acts and talks like it has "sente" now, but it isn't real until AWS (or the other big clouds for that matter) feel forced to specifically respond.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-establish-envelop-expand"&gt;
  &lt;/a&gt;
  Conclusion: Establish, Envelop, Expand
&lt;/h2&gt;

&lt;p&gt;While the tech industry is used to come-from-below disruption, and the software industry is increasingly grasping class-for-the-masses atomic concepts, I believe Cloudflare is writing a new playbook that is the little-guy counterpart of the &lt;a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish"&gt;embrace, extend, extinguish&lt;/a&gt; model used by Microsoft.&lt;/p&gt;

&lt;p&gt;Because it involves API compatibility, this playbook is particularly relevant to developer tools, and is protected by &lt;a href="https://twitter.com/swyx/status/1379091545102503937"&gt;the Supreme Court ruling in Google v Oracle&lt;/a&gt;. If I were to summarize it in three words, looking over Cloudflare's history and &lt;a href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001477333/fa0c28c8-a883-45cd-aba8-0b9c3249cc14.pdf"&gt;annual report&lt;/a&gt;, I might call it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Establish&lt;/strong&gt;: Establish a foothold in something incumbents don't care enough about&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Envelop&lt;/strong&gt;: Reverse-proxy something that incumbents don't serve customers well on&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expand&lt;/strong&gt;: cross-sell other premium products and services until they are more customers of you than they are customers of the incumbent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given Cloudflare's fundamentally less-centralized approach to growing its cloud, it is no surprise that it &lt;a href="https://blog.cloudflare.com/announcing-web3-gateways/"&gt;announced its first Ethereum product&lt;/a&gt; this Birthday Week; although it remains to be seen if a Web2-native company can really drop enough of its assumptions to handle Web3 threads or opportunities. If we are truly in the "early Internet" days of Web3, only the paranoid might survive here. Fortunately, Prince seems to be a &lt;a href="https://twitter.com/search?q=from%3Aeastdakota%20grove&amp;amp;src=typed_query&amp;amp;f=top"&gt;vocal fan of Andy Grove&lt;/a&gt; as well.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>strategy</category>
    </item>
    <item>
      <title>The Only Github Link You Wanted To Know</title>
      <author>Ughur Huseyn</author>
      <pubDate>Mon, 04 Oct 2021 02:00:53 +0000</pubDate>
      <link>https://dev.to/ughurh/the-only-github-link-you-wanted-to-know-16cn</link>
      <guid>https://dev.to/ughurh/the-only-github-link-you-wanted-to-know-16cn</guid>
      <description>&lt;p&gt;So, you want all repositiories sorted by stars!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/search?o=desc&amp;amp;q=stars%3A%3E1&amp;amp;s=stars&amp;amp;type=Repositories"&gt;HERE YOU ARE&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Only repositories are shown. As a bonus check this &lt;a href="https://github.com/sindresorhus/awesome"&gt;awesome&lt;/a&gt; repo&lt;/p&gt;

</description>
      <category>github</category>
      <category>programming</category>
      <category>opensource</category>
      <category>productivity</category>
    </item>
    <item>
      <title>JavaScript Jungle: Convert any object to Iterable</title>
      <author>Vikas yadav</author>
      <pubDate>Mon, 04 Oct 2021 01:16:54 +0000</pubDate>
      <link>https://dev.to/xenoxdev/javascript-jungle-convert-any-object-to-iterable-40l6</link>
      <guid>https://dev.to/xenoxdev/javascript-jungle-convert-any-object-to-iterable-40l6</guid>
      <description>&lt;p&gt;When &lt;strong&gt;ES6&lt;/strong&gt; launched,  it introduced two important protocols &lt;code&gt;Iterable&lt;/code&gt; and &lt;code&gt;Iterator&lt;/code&gt;. Basically we can convert any type of &lt;code&gt;object&lt;/code&gt; to &lt;code&gt;iterable&lt;/code&gt; by implementing these two &lt;code&gt;protocols&lt;/code&gt;. By converting the &lt;code&gt;object&lt;/code&gt; to &lt;code&gt;iterable&lt;/code&gt; we can perform looping with &lt;code&gt;for...of&lt;/code&gt; loop.  We can also use &lt;code&gt;spread operator&lt;/code&gt; in array (which is &lt;code&gt;...&lt;/code&gt; symbol in JS) on these objects. First let's understand these two protocols: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iterable-protocol"&gt;
  &lt;/a&gt;
  Iterable Protocol:
&lt;/h2&gt;

&lt;p&gt;As per MDN &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;iterable protocol&lt;/code&gt; allows JavaScript objects to &lt;code&gt;define&lt;/code&gt; or &lt;code&gt;customize&lt;/code&gt; their &lt;code&gt;iteration behavior&lt;/code&gt;,  such as what values are looped over in a &lt;code&gt;for...of&lt;/code&gt; construct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple terms it is a rule and by following this rule we can do two things: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an object is already iterable, we can modify it's existing &lt;code&gt;iteration behaviour&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If an object is not iterable, we can add &lt;code&gt;iteration&lt;/code&gt; behaviour to it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have used JavaScript as a beginner then you have already used one of the famous iterable &lt;code&gt;Array&lt;/code&gt;s. Obviously there are other built in &lt;code&gt;iterables&lt;/code&gt; in JavaScript as well. Some of the examples are : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;Set &lt;/li&gt;
&lt;li&gt;WeakMap&lt;/li&gt;
&lt;li&gt;WeakSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the main question comes into picture. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do we implement this protocol ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is very simple. We just need to implement &lt;code&gt;@@iterator&lt;/code&gt;. This &lt;code&gt;@@iterator&lt;/code&gt; is special property in JS. So to make any object &lt;code&gt;iterable&lt;/code&gt; we need to add this &lt;code&gt;@@iterable&lt;/code&gt; property to it. &lt;/p&gt;

&lt;p&gt;We can get this by using constant symbol &lt;code&gt;[Symbol.iterator]&lt;/code&gt;. If you do not known what Symbols are, please read &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@@iterator&lt;/code&gt; should be a simple method with &lt;code&gt;no arguments&lt;/code&gt; which will return a value that should comply with &lt;code&gt;iterator protocol&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To summarise, we can convert any object to &lt;code&gt;Iterable&lt;/code&gt; by using following steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take an object &lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;@@iterable&lt;/code&gt; property via &lt;code&gt;[Symbol.iterator]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@@iterable&lt;/code&gt; should be a &lt;code&gt;no argument&lt;/code&gt; method &lt;/li&gt;
&lt;li&gt;Return of &lt;code&gt;@@iterable&lt;/code&gt; method should be an &lt;code&gt;iterator&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdj3_nSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfrj0osqnvemow7odtpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdj3_nSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfrj0osqnvemow7odtpj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we explore deep into Iterable Jungle. Let's talk about &lt;code&gt;iterator protocol&lt;/code&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iterator-protocol"&gt;
  &lt;/a&gt;
  Iterator protocol:
&lt;/h2&gt;

&lt;p&gt;As per MDN &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;iterator protocol&lt;/code&gt; defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In plain English: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a rule which defines &lt;code&gt;shape&lt;/code&gt; of values during iteration. &lt;/li&gt;
&lt;li&gt;It also needs to tell us that there are &lt;code&gt;no more values&lt;/code&gt; when we have gone through all the values. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make any object &lt;code&gt;iterator&lt;/code&gt; we need to implement &lt;code&gt;next()&lt;/code&gt; method which will return an object which should have these two properties to it: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;value&lt;/strong&gt; - value which will be available during iteration&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;done&lt;/strong&gt; - boolean value to indicate that there are more values or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's quite simple. Isn't it ? here is an example of &lt;code&gt;Infinite Counter&lt;/code&gt; iterator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRzCjrO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrip91e8ea8wp1kcopyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRzCjrO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrip91e8ea8wp1kcopyx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a &lt;code&gt;finite counter&lt;/code&gt; iterator as well &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ycLwGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a19udcd2y0a3g93m1kc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ycLwGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a19udcd2y0a3g93m1kc7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how when limit is reached we return &lt;code&gt;done: true&lt;/code&gt;. This is to tell the iterator like &lt;code&gt;for...of&lt;/code&gt; loop that there is no more values and you can stop the loop. &lt;/p&gt;

&lt;p&gt;Now that we know how to implement &lt;code&gt;iterator&lt;/code&gt;, let's head back to our &lt;code&gt;iterable&lt;/code&gt; and implement it fully. &lt;/p&gt;

&lt;p&gt;So for our example we want &lt;code&gt;user&lt;/code&gt; to be &lt;code&gt;iterable&lt;/code&gt; and return us &lt;code&gt;[key, value]&lt;/code&gt; when we iterate through &lt;code&gt;for...of&lt;/code&gt; loop. If you try to iterate &lt;code&gt;user&lt;/code&gt; in &lt;code&gt;for...of&lt;/code&gt; without implementing &lt;code&gt;iterable&lt;/code&gt; you will get following error:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TypeError: user is not iterable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBDt0mHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5td63m0022h3zfk9ybp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBDt0mHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5td63m0022h3zfk9ybp9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here is a &lt;a href="https://codesandbox.io/s/iterable-pqj4b?file=/src/userIterable.js"&gt;codesandbox&lt;/a&gt; implementation of making &lt;code&gt;user&lt;/code&gt; iterable: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yF_VuA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/871wg9ypjx4lmdsfieix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yF_VuA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/871wg9ypjx4lmdsfieix.png" alt="Screenshot 2021-10-02 at 6.38.29 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have added &lt;code&gt;[Symbol.iterator]&lt;/code&gt; which intern return an object containing our &lt;code&gt;next()&lt;/code&gt; function which implements &lt;code&gt;iterator&lt;/code&gt; protocol. &lt;/p&gt;

&lt;p&gt;We can reduce some of code if we use as special kind of function called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#generator_functions"&gt;Generator Functions&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// with our own implementation of iterator &lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//with Generator function&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generator-functions"&gt;
  &lt;/a&gt;
  Generator Functions:
&lt;/h2&gt;

&lt;p&gt;Generator Functions are just a syntactic sugar. In our own implementation of &lt;code&gt;iterator&lt;/code&gt; function we need to keep track of internal states like &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;. Generator functions returns a special iterator which is called &lt;code&gt;Generator&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Generator functions are declared with &lt;code&gt;function*&lt;/code&gt; syntax. And it uses a special keyword &lt;code&gt;yield&lt;/code&gt; to give us values over course of iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//definde function with * &lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//yield something here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#yield-vs-return"&gt;
  &lt;/a&gt;
  yield Vs return
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; is very different from &lt;code&gt;return&lt;/code&gt;. When we return from a function, it simply means end of execution and we come out of function. Where as when we &lt;code&gt;yield&lt;/code&gt;, generator function pauses the execution and keep track of what to yield next. So when we call &lt;code&gt;next&lt;/code&gt; again on our generator it will &lt;code&gt;yield&lt;/code&gt; next value in line. &lt;/p&gt;

&lt;p&gt;Let's take a look of an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// defined Counter generator&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// create an instance of COunter&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//first call &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;//{done: false, value: 1}&lt;/span&gt;

&lt;span class="c1"&gt;// second call &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;//{done: false, value: 2}&lt;/span&gt;

&lt;span class="c1"&gt;// Third call &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;//{done: true, value: undefined}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see when we create instance of our &lt;code&gt;generator&lt;/code&gt; it return us an &lt;code&gt;iterator&lt;/code&gt;. It does following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we call &lt;code&gt;next&lt;/code&gt; first time it will &lt;code&gt;yield&lt;/code&gt; a &lt;code&gt;{done: false, value: 1}&lt;/code&gt; and pause.&lt;/li&gt;
&lt;li&gt;When we call &lt;code&gt;next&lt;/code&gt; again it keeps track of it's state and &lt;code&gt;yield&lt;/code&gt; &lt;code&gt;{done: false, value: 2}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;When we call last &lt;code&gt;next&lt;/code&gt; as there is nothing to yield any more it gives us &lt;code&gt;{done: true, value: undefined}&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can keep on calling &lt;code&gt;next()&lt;/code&gt; after it is done, but it will always give you &lt;code&gt;{done: true, value: undefined}&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now let's use generator for our &lt;code&gt;Infinite Counter&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infinite-counter-with-generators"&gt;
  &lt;/a&gt;
  Infinite Counter with Generators
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;InfiniteCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InfiniteCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// {done: false, value: 1}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// {done: false, value: 2}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// {done: false, value: 3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, with &lt;code&gt;Generator&lt;/code&gt; it is a lot cleaner. &lt;/p&gt;

&lt;p&gt;You might be thinking, it's all cool. But I do not want to do all this just to make an object &lt;code&gt;Iterable&lt;/code&gt;. I have &lt;code&gt;Object.entries&lt;/code&gt; I will use that. Give me some good practical example. &lt;/p&gt;

&lt;p&gt;So here it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practical-example"&gt;
  &lt;/a&gt;
  Practical example
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LinkedList&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am going to implement very basic &lt;a href="https://dev.to/vaidehijoshi/linked-lists--basecs-video-series--2le8"&gt;LinkedList&lt;/a&gt;. It only contain following methods &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add - To add new elements to LinkedList&lt;/li&gt;
&lt;li&gt;size - A getter the size of LinkedList&lt;/li&gt;
&lt;li&gt;head - A getter for head node&lt;/li&gt;
&lt;li&gt;tail - A getter for tail
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main portion of code to check is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how I made &lt;code&gt;LinkedList&lt;/code&gt; iterable by implementing &lt;code&gt;[Symbol.iterator]&lt;/code&gt;. &lt;code&gt;*&lt;/code&gt; in front of &lt;code&gt;[Symbol.iterator]&lt;/code&gt; makes it a &lt;code&gt;generator&lt;/code&gt; and I am &lt;code&gt;yield&lt;/code&gt;ing the values until whole list is exhausted. &lt;/p&gt;

&lt;p&gt;Next portion to look at is &lt;code&gt;toString&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see here use take advantage of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_array_literals"&gt;Spread operator&lt;/a&gt; in array  of Iterable. I spread it in an array then take advantage of &lt;code&gt;toString&lt;/code&gt; of Array object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Redux Saga&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recently I got to know that one of Redux libraries &lt;a href="https://redux-saga.js.org/"&gt;Saga&lt;/a&gt; uses generators heavily. &lt;/p&gt;

&lt;p&gt;Some of example used here can be found in this Codesandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/iterable-pqj4b"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-my-other-articles"&gt;
  &lt;/a&gt;
  Read my other articles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/xenoxdev/special-kind-of-array-tuple-4l1h"&gt;Special kind of array in Typescript - Tuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/xenoxdev/curious-case-of-sparse-array-in-js-38h7"&gt;Curious case of sparse Arrays in JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/VikasYadav_Dev"&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol"&gt;Official MDN Iterable and Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#generator_functions"&gt;Official MDN Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basic Responsive Websites</title>
      <author>Danielle Ellis</author>
      <pubDate>Mon, 04 Oct 2021 01:06:46 +0000</pubDate>
      <link>https://dev.to/thedanielleellis/basic-responsive-websites-473d</link>
      <guid>https://dev.to/thedanielleellis/basic-responsive-websites-473d</guid>
      <description>&lt;p&gt;In this blog, I will share some general concepts of how to implement a responsive design to your website that it is easy to follow. Creating a responsive website can be a bit confusing at first, but once you understand the basic foundations you will be good to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-responsive-website"&gt;
  &lt;/a&gt;
  What is a Responsive Website?
&lt;/h2&gt;

&lt;p&gt;Responsive Websites allow websites and pages to display on all devices and screen sizes by automatically adapting to the screen, whether it's a desktop, laptop, tablet, or smartphone. We do this by working with CSS using various settings to deliver the best experience to users. To better understand we will discuss the basic concepts of Media Queries and CSS Units. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#media-queries"&gt;
  &lt;/a&gt;
  Media Queries
&lt;/h2&gt;

&lt;p&gt;Media Queries are conditions that you apply to your CSS. You tell the browser to add or remove specific css rules depending on the capabilities of a device. As the screen size changes, we need rearrange our layout. Typically, it would be structured vertically as the screen size decreases. &lt;/p&gt;

&lt;p&gt;The syntax for a media query looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media &amp;lt;media-type&amp;gt; and (expressions) {
     CSS code;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;@media tells the browser that we are starting a media query. &lt;/li&gt;
&lt;li&gt;media-type describes the kind of device rules we will apply to. For ex: we can place media-type "screen" here. This is an optional input. If we do not use it the rules will be used for all devices. &lt;/li&gt;
&lt;li&gt;(expression) can be a be the width or orientation of the device. &lt;/li&gt;
&lt;li&gt;Inside the media query we can specify some css rules that should be applied &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an real-life example of Media Query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (max-width: 500px) {
  .Projects .Container .img
    width: 80%;
    padding-right: 20%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we did not use the optional media-type. Instead we have the expression max-width: 500px (our breaking point) which tells the browser that the rules inside our media query should be limited to devices that have a screen width of 500px or smaller. Inside our media query we have our regular css code with values of your choice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-units"&gt;
  &lt;/a&gt;
  CSS Units
&lt;/h2&gt;

&lt;p&gt;CSS Units determine the size of a property you're setting for an element or its content. &lt;/p&gt;

&lt;p&gt;Here is an example of a CSS unit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;font-size: 16px;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The font-size is the property, 16px is the value of the property. Px is a css unit called pixel. &lt;/p&gt;

&lt;p&gt;CSS Units can be categorized by Absolute Units and Relative Units: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ABSOLUTE UNITS&lt;/th&gt;
&lt;th&gt;RELATIVE UNITS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Fixed Value&lt;/td&gt;
&lt;td&gt;Scaled Values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;does not scale when the screen size changes&lt;/td&gt;
&lt;td&gt;they scale relative to something else&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ex: px (pixels)&lt;/td&gt;
&lt;td&gt;Ex: Relative to their parent (%), viewport (vw, vh), font size (em, rem)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Relative Units is what will help us build responsive websites. Let's discuss in detail about the most common units. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relative to their parent(%):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CSS FILE
.App .Parent {
  background-color: blue;
  width: 100%
}
.App .Child {
  background-color: yellow;
  width: 50%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the example, inside a parent div, we have a child div. The child div will be 50% of the parent div. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN3GQ2vw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slimcpp0go906h1k27e6.png" alt="Parent-Child Div"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Viewport (vw, vh)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The viewport is the user's visible area. Whether it is a desktop or a smartphone. vw stands for viewport width. vh stands for viewport height. For example: 100vh is 100% of the viewport height (100% height of a smartphone or 100% height of a desktop).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Font size (em, rem)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;em - are relative to the font size (always x times of the parent). For instance, 1em is equal to the font-size of the parent. 2em is twice the font size of the parent. 3em is 3 times the font size of the parent.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTML:
&amp;lt;div className="Parent"&amp;gt;
  &amp;lt;h1&amp;gt;Main Title&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Next Title&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;

CSS:
.App .Parent {
  font-size:16px
}
.App .Parent h1 {
  font-size: 3em;
}
.App .Parent h2 {
  font-size: 2em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our Parent div we have a font size of 16px. In our h1 we have a font size of 3em which is 3 times the font size of its parent with 16px. Therefore our h1 has 48px (16px*3em) and our h2 has 32px (16px*2em).&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGIl0JNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c928kwuc55i4rf052lbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGIl0JNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c928kwuc55i4rf052lbd.png" alt="Screen Shot 2021-10-03 at 7.32.16 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rem - are relative to the roots html font size. If the root html is not defined then it will be equal to the default font size of the browser (16px usually). This is a more preferred method.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CSS:
html {
  font-size: 20px;
}
.App .Parent h1 {
  font-size: 3rem;
}
.App .Parent h2 {
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the root font-size is 20px. Our h1 is 3 times the root (20px*3rem). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-relative-units"&gt;
  &lt;/a&gt;
  Applying Relative Units
&lt;/h2&gt;

&lt;p&gt;In order to apply these relative units for responsive websites, we can go into our CSS file and change our absolute units to relative units where it is needed. We can also add media queries throughout our css file. Now that you understand the basic concepts of making responsive websites try it out. For more complex websites, more concepts will need to be applied. There are many resources you can use for further details such as: YouTube videos and popular sites such as Udemy, Codecademy, Treehouse, etc.  &lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>t3rm.dev is a web-based terminal where commands are minted as collectible NFTs</title>
      <author>t3rm.dev</author>
      <pubDate>Mon, 04 Oct 2021 00:11:45 +0000</pubDate>
      <link>https://dev.to/t3rmdotdev/t3rm-dev-is-a-web-based-terminal-where-commands-are-minted-as-collectible-nfts-1nb8</link>
      <guid>https://dev.to/t3rmdotdev/t3rm-dev-is-a-web-based-terminal-where-commands-are-minted-as-collectible-nfts-1nb8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome-to-t3rmdev-the-unstoppable-cli-where-commands-are-minted-as-nfts"&gt;
  &lt;/a&gt;
  Welcome to t3rm.dev, the unstoppable CLI where commands are minted as NFTs.
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Why do we need a command line interface on IPFS, connected through Ethereum, where commands are minted as NFTs, you ask? &lt;strong&gt;Because it‚Äôs f*cking cool.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will find &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt; at the intersection of art, dev, and 80s nostalgia.&lt;/p&gt;

&lt;p&gt;Each command line program is minted as a unique NFT using the IPFS protocol to store the metadata and source code, similar to artwork / video NFTs.&lt;/p&gt;

&lt;p&gt;The website runs as a serverless dApp, hosted with a dnsLink over IPNS using Fleek, where commands are discovered and mirrored by a peer-to-peer network and cached onto Cloudflare and other gateways. There is no API or backend running underneath t3rm ‚Äî everything runs through the Ethereum blockchain.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Visit &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;info&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get information about a token or package, you can run the command &lt;code&gt;info token &amp;lt;id&amp;gt;&lt;/code&gt; or &lt;code&gt;info pkg dev.t3rm.&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#discover-your-identity"&gt;
  &lt;/a&gt;
  Discover your identity
&lt;/h1&gt;

&lt;p&gt;There are &lt;strong&gt;1,337&lt;/strong&gt; unique identities on &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt; for users to discover. Each identity is a tradable collectible NFT rendered in text-form. These NFTs grant their owner access to special privileges within the platform and voting rights inside the &lt;a href="https://snapshot.org/#/t3rm.eth"&gt;t3rm DAO&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;whoami&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#mint-your-command"&gt;
  &lt;/a&gt;
  Mint your command
&lt;/h1&gt;

&lt;p&gt;To create a new package on the t3rm platform:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;mint&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: we recommend that packages use the bundle prefix: &lt;code&gt;dev.t3rm.&lt;/code&gt; for best compatibility.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-your-artwork"&gt;
  &lt;/a&gt;
  Create your artwork
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://art-txt.xyz"&gt;Art.txt&lt;/a&gt; allows anyone to mint quotes and artwork as 100% on-chain text-based NFTs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLNKTsrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydv45jzvlfwxzdp2i5u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLNKTsrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydv45jzvlfwxzdp2i5u0.png" alt="Art-txt.xyz homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;art&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Art.txt has a new graphical interface at &lt;a href="https://art-txt.xyz"&gt;https://art-txt.xyz&lt;/a&gt;. While many projects claim to be "on-chain," Art.txt is 100% on-chain with the storage of each character forever etched into the Ethereum smart contract.&lt;/p&gt;

&lt;p&gt;The artwork created on Art.txt is viewable in SVG-form (see: &lt;a href="https://opensea.io/collection/art-txt"&gt;https://opensea.io/collection/art-txt&lt;/a&gt;) or raw-text form.&lt;/p&gt;

&lt;p&gt;For help setting up your package or using &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt;, stop by our Discord community at &lt;a href="//discord.gg/t99bHhMQtK"&gt;discord.gg/t99bHhMQtK&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nfts</category>
      <category>ethereum</category>
      <category>crypto</category>
      <category>nft</category>
    </item>
  </channel>
</rss>
