<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sending images and more with Telegram bot</title>
      <author>Rajitha Gunathilake</author>
      <pubDate>Mon, 24 May 2021 17:05:45 +0000</pubDate>
      <link>https://dev.to/rizkyrajitha/sending-images-and-more-with-telegram-bot-4c0h</link>
      <guid>https://dev.to/rizkyrajitha/sending-images-and-more-with-telegram-bot-4c0h</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;This is a follow-up tutorial on my previous tutorial about Sending messages with Telegram bot. make sure you check that before following this tutorial. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rizkyrajitha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkH1vT_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jnnWRKA1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/247664/bb29688b-6d69-444c-b5fb-d5b4365bb671.jpeg" alt="rizkyrajitha image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rizkyrajitha/get-notifications-with-telegram-bot-537l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sending messages with Telegram bot&lt;/h2&gt;
      &lt;h3&gt;Rajitha Gunathilake ・ Nov 10 '19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bots&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#telegram&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#http&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;in the last tutorial, we talked about sending messages, but telegram has a powerful API that allows us to send more than just text messages.&lt;br&gt;
so in this tutorial, we will get to know how to send images with a telegram bot.This procedure is really simple. we need to send a post request to telegram API with our photo as &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is similar to what we used previously, the change is now we are using a different route, and sending form-data with our image attached&lt;/p&gt;

&lt;p&gt;Using the follwoing API endpoint &lt;code&gt;https://api.telegram.org/bot&amp;lt;token&amp;gt;/sendPhoto?chat_id=&amp;lt;group chat id &amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;in &lt;code&gt;multipart form data&lt;/code&gt; attach an image file with the name &lt;code&gt;photo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SCEK2PGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtw5sy35i7i98lhw1dxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SCEK2PGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtw5sy35i7i98lhw1dxt.png" alt="insomnia send request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and after sending this we can get a response with &lt;code&gt;"ok": true,&lt;/code&gt; and if we look at the chat, we can see that the photo is received. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--arUL9yKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thn7keewwmeigwowwp77.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--arUL9yKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thn7keewwmeigwowwp77.jpeg" alt="chat image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can also be done programmatically, I will use nodejs to demonstrate in this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./image.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;photo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://api.telegram.org/bot&amp;lt;token&amp;gt;/sendPhoto?chat_id=-&amp;lt;chat id&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we have used &lt;code&gt;node-fetch&lt;/code&gt; package to send the HTTP request from nodejs and &lt;code&gt;form-data&lt;/code&gt; package to append formdata to the request. &lt;/p&gt;

&lt;p&gt;and after running the script we can see that we get &lt;code&gt;"ok": true,&lt;/code&gt; just like before. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t8kulsWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwy5si27likv8ngpi4ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t8kulsWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwy5si27likv8ngpi4ut.png" alt="bash output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6DuAaXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn77i05fpfti78fk6ds8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6DuAaXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn77i05fpfti78fk6ds8.jpeg" alt="chat image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;there are some limits provided by the telegram when using sendPhoto API &lt;br&gt;
"The photo must be at most &lt;strong&gt;10 MB&lt;/strong&gt; in size. The photo's width and height must not exceed &lt;strong&gt;10000&lt;/strong&gt; in total. Width and height ratio must be at most 20".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://core.telegram.org/bots/api#sendphoto"&gt;Telegram API reference sendphoto method&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;we can use &lt;code&gt;sendAudio&lt;/code&gt; just like the last example to send audio files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./audio.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;audio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;audio dev test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// to show as the title in chat&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://api.telegram.org/bot&amp;lt;token&amp;gt;/sendAudio?chat_id=-&amp;lt;chat id&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;limits provided by the telegram when using &lt;code&gt;sendAudio&lt;/code&gt; API &lt;/p&gt;

&lt;p&gt;"Your audio must be in the &lt;strong&gt;.MP3&lt;/strong&gt; or &lt;strong&gt;.M4A&lt;/strong&gt; format. On success, the sent Message is returned. Bots can currently send audio files of up to &lt;strong&gt;50 MB&lt;/strong&gt; in size, this limit may be changed in the future."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://core.telegram.org/bots/api#sendaudio"&gt;Telegram API reference sendaudio method&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFOohtLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7hwg4fanslwnmw2j7yg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFOohtLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7hwg4fanslwnmw2j7yg.jpeg" alt="audio chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the list goes on and on for documents, voice messages,animations , videos  etc. you can find all the provided methods in the &lt;a href="https://core.telegram.org/bots/api"&gt;Telegram reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-till-the-end"&gt;
  &lt;/a&gt;
  Thanks for reading till the end 🙌
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#share-your-thoughts-in-the-comments-section"&gt;
  &lt;/a&gt;
  share your thoughts in the comments section.
&lt;/h2&gt;

</description>
      <category>bots</category>
      <category>telegram</category>
      <category>http</category>
    </item>
    <item>
      <title>How to Manage a Winning Tech Team for Your Startup</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 24 May 2021 16:46:51 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-manage-a-winning-tech-team-for-your-startup-41o0</link>
      <guid>https://dev.to/codesphere/how-to-manage-a-winning-tech-team-for-your-startup-41o0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Regardless of how innovative your idea may be, building and managing a cohesive tech team for your startup lays down the stepping stone to success.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, 23% of failed startups name a poorly constituted team as the main reason why they did not take off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZqnAr41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvz33swglyve88z4t969.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZqnAr41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvz33swglyve88z4t969.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;At Codesphere, we're trying to provide a much simpler experience compared to today's cloud providers and Kubernetes, while giving the opportunity to ad-hoc code directly in the browser.&lt;br&gt;
In doing so, we have learned a lot about team building and its strategies that can benefit your company in the years to come. &lt;/p&gt;




&lt;p&gt;Here are our five tips for managing your development team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-responsibility-is-a-twoway%C2%A0street"&gt;
  &lt;/a&gt;
  1. Responsibility is a two-way street
&lt;/h3&gt;

&lt;p&gt;Part of the reason many developers choose to work at Startups in the first place is the ability to feel a sense of ownership over the software they are building; They don't want to be micromanaged. Just as importantly, you, as a founder, do not have the time to micromanage them. A strong founder is therefore an expert at delegating responsibility and instilling a sense of ownership in their development team.&lt;/p&gt;

&lt;p&gt;While giving developers this kind of discretion might be scary at first, it ultimately serves to improve the development process. When a developer is given true responsibility, not just for their immediate tasks, but also for the outcome of a particular feature, they have a direct stake in what they create. If done correctly, a developer will not just be building the software for someone else, they will build it with genuine passion and care. The more responsibility you give to a developer, the more responsibility will be returned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-user-is-the-boss-not%C2%A0you"&gt;
  &lt;/a&gt;
  2. The user is the boss, not you
&lt;/h3&gt;

&lt;p&gt;For almost every software project, there is a surplus of work to be done and only a set amount of time and resources to spend on this work. &lt;/p&gt;

&lt;p&gt;A strong founder, therefore, is an expert at prioritizing development tasks. While you should always try to allow developers to work on features that they are passionate about, the work that your team spends time on should always be dictated by the user.&lt;/p&gt;

&lt;p&gt;Are users asking for a particular feature? Is there a bug ruining your user experience? These sorts of questions should guide what development tasks are being prioritized. In addition, creating avenues for your tech team to be in the user's shoes will allow them to create an end-product that truly provides value to the users. &lt;/p&gt;

&lt;p&gt;This can be done in many ways, such as designating time for the team to use the product or bringing user feedback directly to developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-maintain-both-a-shortterm-and-longterm-roadmap-for-the-product%E2%80%8A%E2%80%8Aand-dont-be-afraid-to-adjust%C2%A0it"&gt;
  &lt;/a&gt;
  3. Maintain both a short-term and long-term roadmap for the product - and don't be afraid to adjust it
&lt;/h3&gt;

&lt;p&gt;When your team can see firsthand how their work fits into important product milestones, not only will they be more motivated to reach those milestones, but they will be able to develop their code in a way that is compatible with current and future features. &lt;/p&gt;

&lt;p&gt;In addition, tracking what is being worked on, both in the short and long term, is essential in order for your entire startup's team to work as a cohesive unit.&lt;/p&gt;

&lt;p&gt;Just because you are planning ahead, however, does not mean that you should feel locked in to this roadmap. &lt;/p&gt;

&lt;p&gt;A strong founder is constantly thinking about what their development team should be prioritizing, and that means that sometimes a founder is going to have to adjust this roadmap. When deadlines, markets, and users shift, so too should your roadmap for the product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-implement-workflows-and-frameworks-that-minimize-mistakes-and-allow-you-to%C2%A0scale"&gt;
  &lt;/a&gt;
  4. Implement workflows and frameworks that minimize mistakes and allow you to scale
&lt;/h3&gt;

&lt;p&gt;It is no secret that many developers hate bureaucracy. While your startup may not have the time and resources for project managers and excessive meetings about code standards, a development free for all is going to make you unable to scale and cause you to create software that is prone to bugs. You should implement a workflow from day one to prevent this. Some ways in which we recommend doing this include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick a tech-stack that minimizes mistakes (We love Typescript at Codesphere!)&lt;/li&gt;
&lt;li&gt;Implement automatic code testing&lt;/li&gt;
&lt;li&gt;Enforce Coding Standards&lt;/li&gt;
&lt;li&gt;Code Reviews&lt;/li&gt;
&lt;li&gt;Require Developers to document their code&lt;/li&gt;
&lt;li&gt;Use Design Documents for features, before, during, and after developing them&lt;/li&gt;
&lt;li&gt;Use project management frameworks and software&lt;/li&gt;
&lt;li&gt;Don't hire people who are not willing to align with your work standards&lt;/li&gt;
&lt;li&gt;Allow the above processes to evolve and improve when needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following these steps allows many bugs to be caught long before they occur, and makes it much easier for your team to go back and work through old code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-promote-collaboration"&gt;
  &lt;/a&gt;
  5. Promote Collaboration
&lt;/h3&gt;

&lt;p&gt;Finally, programming does not have to be a solo endeavor. Collaboration is an essential part of any startup's development team. &lt;/p&gt;

&lt;p&gt;An extra pair of eyes on any codebase can prevent errors, unreadable code, and inefficiencies. No single developer is going to have all the answers, so creating a culture of collaboration is incredibly important to ensure the success of your team.&lt;/p&gt;

&lt;p&gt;Collaboration isn't just important for the health of your software, it's important for the health of your team. Having developers work alone on their tasks only exacerbates the stress of working on a startup. Collaboration can provide the much-needed human connection that writing code too often lacks.&lt;br&gt;
In fact, this collaboration is so important that it shouldn't even be restricted to working on the software itself. &lt;/p&gt;

&lt;p&gt;At Codesphere, we pair all of our new developers with mentors within the company to help them grow professionally, improve their coding skills, and make sure that they are happy and healthy at the company.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>leadership</category>
      <category>ama</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Is there any difference between struct embedding and defining a field with the struct you want to embed?</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 24 May 2021 16:09:35 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-any-difference-between-struct-embedding-and-defining-a-field-with-the-struct-you-want-to-embed-112</link>
      <guid>https://dev.to/baenencalin/is-there-any-difference-between-struct-embedding-and-defining-a-field-with-the-struct-you-want-to-embed-112</guid>
      <description>&lt;p&gt;So I'm looking at &lt;a href="https://eli.thegreenplace.net/2020/embedding-in-go-part-1-structs-in-structs/"&gt;this article on Structure Embedding in GoLang&lt;/a&gt;.&lt;br&gt;
When reading, I came upon this: "Note that the access &lt;code&gt;co.b&lt;/code&gt; is a syntactic convenience; we can also do it more explicitly with &lt;code&gt;co.Base.b&lt;/code&gt;.".&lt;/p&gt;

&lt;p&gt;So if that's just a "syntactic convenience", is structure embedding equal to just adding a field?&lt;br&gt;
E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;==&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Putting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into &lt;a href="https://code.sololearn.com/go"&gt;SoloLearn's Go playground&lt;/a&gt; that seems to be the case.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
So is there any difference, or am I right about them being the exact same thing?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>help</category>
      <category>go</category>
    </item>
    <item>
      <title>Automate Azure Role Based Access Control (RBAC) using Github</title>
      <author>Marcel.L</author>
      <pubDate>Mon, 24 May 2021 16:04:03 +0000</pubDate>
      <link>https://dev.to/pwd9000/automate-azure-role-based-access-control-rbac-using-github-2349</link>
      <guid>https://dev.to/pwd9000/automate-azure-role-based-access-control-rbac-using-github-2349</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-azure-roles-and-custom-definitions"&gt;
  &lt;/a&gt;
  What are Azure Roles and Custom Definitions?
&lt;/h2&gt;

&lt;p&gt;When you start working more and more with Azure permissions you will undoubtedly have used Azure RBAC (also known as IAM) and have most likely used some of the great &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles"&gt;built-in roles&lt;/a&gt; that have been created and provided by Microsoft, but sometimes you may come across a requirement or a need to have a very specific role tailored with a set of permissions that are more granular than what comes out of the box in a standard Azure (RBAC) built-in role.&lt;/p&gt;

&lt;p&gt;Luckily Azure offers a great deal of flexibility when it comes to defining your own custom roles vs built-in roles. This is where &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions"&gt;Custom Role Definitions&lt;/a&gt; comes into play.&lt;/p&gt;

&lt;p&gt;Today we will look at how we can utilize Github actions in creating and also maintaining our Azure (RBAC) custom role definitions from a Github repository through source control and automatically publishing those changes in Azure through a Github actions workflow without much effort. If you are still a bit unclear on what Azure RBAC is, or wanted more information have a look at the &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/overview"&gt;Microsoft Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protecting-secrets-in-github"&gt;
  &lt;/a&gt;
  Protecting secrets in github
&lt;/h3&gt;

&lt;p&gt;Before we start using Github actions in this tutorial we will need the ability to authenticate to Azure. We will first create an &lt;code&gt;'Azure AD App &amp;amp; Service Principal'&lt;/code&gt; giving the identity we create the relevant permissions to maintain custom RBAC roles and then store this identity credential as an encrypted &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;Github Secret&lt;/a&gt; called &lt;code&gt;'AZURE_CREDENTIALS'&lt;/code&gt; to use in our actions workflow to authenticate to Azure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-azure-ad-app-amp-service-principal"&gt;
  &lt;/a&gt;
  Create an Azure AD App &amp;amp; Service Principal
&lt;/h3&gt;

&lt;p&gt;For this step I will be using Azure CLI using a powershell console. First we will log into Azure by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will create our &lt;code&gt;'Azure AD App'&lt;/code&gt; by running the following in a powershell console window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# a name for our azure ad app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Github-RBAC-Admin"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# create Azure AD app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--display-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--homepage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost/&lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--identifier-uris&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost/&lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will retrieve the App ID and set it to a powershell variable &lt;code&gt;$appId&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# get the app id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$appId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--display-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;appId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our &lt;code&gt;'appId'&lt;/code&gt; we can create our service principal and also give our principal the correct &lt;code&gt;Role Based Access Control (RBAC)&lt;/code&gt; permissions on our subscription or management group where we want to maintain RBAC. We will give our principal the RBAC/IAM roles: &lt;code&gt;'Management Group Reader'&lt;/code&gt; and &lt;code&gt;'User Access Administrator'&lt;/code&gt;, because we want our actions workflow script to be able to look at management groups and be able to change context as well as be able to create or amend role definitions at the scope we want to maintain. In my case I only want to maintain RBAC for a single subscription. You can change the below &lt;code&gt;--scopes&lt;/code&gt; to also set the relevant permissions of the service principal to a &lt;code&gt;management group&lt;/code&gt; instead if you want to use the actions workflow to maintain RBAC over multiple subscriptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;MySubscriptionId&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# You can change this value to the subscription ID in your environment&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create-for-rbac&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$appId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Management Group Reader"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--scopes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/subscriptions/&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--sdk-auth&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will output a JSON object with the role assignment credentials. Copy this JSON object for later when we configure our github repository. You will only need the sections with the &lt;code&gt;clientId&lt;/code&gt;, &lt;code&gt;clientSecret&lt;/code&gt;, &lt;code&gt;subscriptionId&lt;/code&gt;, and &lt;code&gt;tenantId&lt;/code&gt; values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"clientId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"clientSecret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;PrincipalSecret&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"subscriptionId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tenantId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also want to give our &lt;code&gt;clientId&lt;/code&gt; &lt;code&gt;'User Access Administrator'&lt;/code&gt; permissions on our subscription in order to manage RBAC. We will grant our service principal identity the following RBAC role: &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#user-access-administrator"&gt;User Access Administrator&lt;/a&gt;. Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--assignee&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;clientID&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"User Access Administrator"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-our-github-repository"&gt;
  &lt;/a&gt;
  Configure our Github repository
&lt;/h3&gt;

&lt;p&gt;Firstly we will need to have a Github repository where we can store our custom role definition JSON files. If you need more information on how to set up a new Github repository, have a look &lt;a href="https://docs.github.com/en/github/getting-started-with-github/quickstart/create-a-repo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I called my repository &lt;code&gt;[Azure-Role-Definitions]&lt;/code&gt;. In my repository I have created 3 main folder paths: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhSqN4At--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/rbac-repo-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhSqN4At--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/rbac-repo-structure.png" alt="rbac-repo-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;.github/workflows:&lt;/strong&gt; Here we will define and create our Github actions yaml file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;roleDefinitions:&lt;/strong&gt; Here we will keep all our Azure custom role definition JSON files. This is also where we will maintain our custom role definitions when we need to make changes or even create new definitions we want to publish to Azure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;scripts:&lt;/strong&gt; Here we will keep a simple PowerShell script that will be used in our actions yaml file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Clone this newly created or existing repository and let's get started to create our first role definition JSON file now. You can also use my repo as a template by going &lt;a href="https://github.com/Pwd9000-ML/Azure-Role-Definitions"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember in an earlier step we created an azure AD app &amp;amp; service principal and got a JSON object as output. We will now create a secret on our repository using the JSON object output, which our actions workflow will use to authenticate to Azure when it's triggered.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, browse your repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Settings &amp;gt; Secrets &amp;gt; New repository secret.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paste the JSON object output from the Azure CLI command we ran earlier into the secret's value field. Give the secret the name &lt;code&gt;AZURE_CREDENTIALS&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAxihzRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/githubAzureCredentials.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAxihzRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/githubAzureCredentials.png" alt="githubAzureCredentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-our-first-custom-role-definition"&gt;
  &lt;/a&gt;
  Configure our first Custom Role Definition
&lt;/h3&gt;

&lt;p&gt;We will create a simple role definition JSON that will only allow resource health read permissions, because we want to give someone the ability to look at resource health within a subscription in our tenant.&lt;br&gt;&lt;br&gt;
We will use the following JSON template structure to build our definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"IsCustom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Actions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"NotActions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"DataActions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"NotDataActions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"AssignableScopes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information on what each property in the JSON structure means &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#role-definition"&gt;HERE&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
Our completed definition we will use in this tutorial will look something like below.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Change the &lt;code&gt;"AssignableScopes"&lt;/code&gt; value with the subscription ID you want to publish and make this role available for use on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"GH-CUSTOM-RESOURCEHEALTH-Reader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"IsCustom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Users with rights to only view Azure resource/service/subscription health."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Actions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Microsoft.ResourceHealth/*/read"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"NotActions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"DataActions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"NotDataActions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"AssignableScopes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"/subscriptions/&amp;lt;subscriptioId1&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We can add more subscriptions to our assignable scopes or even use management groups if required. But for the purpose of this tutorial we only want to make the role available to a single Azure subscription. You will also notice that &lt;code&gt;"Id": ""&lt;/code&gt; is blank as our actions workflow script will take care of this value later on. Here are a few more valuable links for reference when creating custom role definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/resource-provider-operations"&gt;Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#operations-format"&gt;Operations format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#assignablescopes"&gt;Assignable Scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configure-our-github-actions-workflow"&gt;
  &lt;/a&gt;
  Configure our Github actions workflow
&lt;/h3&gt;

&lt;p&gt;The next thing we will do is create our Github actions workflow and script. Lets create the following &lt;code&gt;yaml&lt;/code&gt; file in our repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Under &lt;code&gt;[.github/workflows]&lt;/code&gt; create the following YAML file &lt;code&gt;[Rbac-Apply.yml]&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is going to be our main actions workflow called: &lt;code&gt;[Rbac_Apply]&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
   &lt;strong&gt;Note:&lt;/strong&gt; The workflow will only trigger on changes made to the repository path &lt;code&gt;[roleDefinitions/*]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# '.github/workflows/Rbac_Apply.yml'&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;RBAC-Apply&lt;/span&gt;
    &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;roleDefinitions/*'&lt;/span&gt;

    &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;publish&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;

        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check out repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get changed files in .\roleDefinitions&lt;/span&gt;
        &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;powershell&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append&lt;/span&gt;

        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Log into Azure using github secret AZURE_CREDENTIALS&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/login@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;
            &lt;span class="na"&gt;enable-AzPSSession&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Get&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;changed&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;role&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;definitions'&lt;/span&gt;
        &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;powershell&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;$changedFiles = "${{ env.CHANGED_FILES }}"&lt;/span&gt;
        &lt;span class="s"&gt;$changedFiles = $changedFiles.Split(' ')&lt;/span&gt;
        &lt;span class="s"&gt;$buildSourcesDirectory = $env:GITHUB_WORKSPACE&lt;/span&gt;
        &lt;span class="s"&gt;$resultArray = @()&lt;/span&gt;
        &lt;span class="s"&gt;Foreach ($file in $changedFiles) {&lt;/span&gt;
            &lt;span class="s"&gt;if ($file -like "roleDefinitions/*") {&lt;/span&gt;
            &lt;span class="s"&gt;$filePath = "$buildSourcesDirectory\$file"&lt;/span&gt;
            &lt;span class="s"&gt;$resultArray += $filePath&lt;/span&gt;
            &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;Write-Output "The following role definitions have been created / changed:"&lt;/span&gt;
        &lt;span class="s"&gt;Write-Output "$resultArray"&lt;/span&gt;
        &lt;span class="s"&gt;#Create a useable github environment variable array to string that will be used in powershell script&lt;/span&gt;
        &lt;span class="s"&gt;$psStringResult = @()&lt;/span&gt;
        &lt;span class="s"&gt;$resultArray | ForEach-Object {&lt;/span&gt;
            &lt;span class="s"&gt;$psStringResult += ('"' + $_.Split(',') + '"')&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;$psStringResult = "@(" + ($psStringResult -join ',') + ")"&lt;/span&gt;
        &lt;span class="s"&gt;#Set github env variable to use in powershell script as input&lt;/span&gt;
        &lt;span class="s"&gt;echo "ROLE_DEFINITIONS=$psStringResult" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append&lt;/span&gt;
        &lt;span class="s"&gt;Write-Output "Convert array to psString:"&lt;/span&gt;
        &lt;span class="s"&gt;Write-Output $psStringResult&lt;/span&gt;

        &lt;span class="s"&gt;- name: Create - Update role definitions&lt;/span&gt;
        &lt;span class="s"&gt;uses: azure/powershell@v1&lt;/span&gt;
        &lt;span class="s"&gt;with:&lt;/span&gt;
            &lt;span class="s"&gt;inlineScript: |&lt;/span&gt;
            &lt;span class="s"&gt;.\scripts\set-rbac.ps1 -RoleDefinitions ${{ env.ROLE_DEFINITIONS }}&lt;/span&gt;
            &lt;span class="s"&gt;azPSVersion: 'latest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now under our repository folder path &lt;code&gt;[scripts]&lt;/code&gt; we will create a PowerShell script called &lt;code&gt;[Set-Rbac.ps1]&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; This powershell script calls cmdlets from the AZ module, so if a &lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"&gt;self-hosted Github actions runner&lt;/a&gt; is used instead of a &lt;code&gt;Github-hosted runner&lt;/code&gt;, please ensure that the AZ module is installed and configured on your runner. The below script may be amended to suit your environment better if you use deeply nested management groups. What the script below does is read in each JSON role definition from our repo under the path &lt;code&gt;./roleDefinitions/*.json&lt;/code&gt; and then sets the context to one of the subscriptions defined in the JSON file &lt;code&gt;'AssignableScopes'&lt;/code&gt;. Once in the context of a subscription, the script will evaluate whether a Custom Role Definition already exists in the context of the subscription, if it does the script will update the role definition with any changes or if the role does not exist it will be created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# 'scrips/set_rbac.ps1'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;#Parameters from github actions&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;Param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$RoleDefinitions&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Directory in use.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Write-host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Current Scripting directory: [&lt;/span&gt;&lt;span class="bp"&gt;$PSScriptRoot&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#checked out build sources path&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$BuildSourcesDirectory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="n"&gt;Resolve-Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$PSScriptRoot&lt;/span&gt;&lt;span class="nx"&gt;\..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"
Write-host "&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sources&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;directory:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$BuildSourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;"

Foreach (&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="nv"&gt;$RoleDefinitions&lt;/span&gt;&lt;span class="s2"&gt;) {
    &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt; = Get-Content -Path &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;| ConvertFrom-Json
    &lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;.AssignableScopes[0]

    If (&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="s2"&gt; -like "&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;managementGroups&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;") {
        &lt;/span&gt;&lt;span class="nv"&gt;$managementGroupSubs&lt;/span&gt;&lt;span class="s2"&gt; = ((Get-AzManagementGroup -GroupId (&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="s2"&gt; | Split-Path -leaf) -Expand -Recurse).Children)
        If (&lt;/span&gt;&lt;span class="nv"&gt;$managementGroupSubs&lt;/span&gt;&lt;span class="s2"&gt;.Type -like "&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;managementGroups&lt;/span&gt;&lt;span class="s2"&gt;") {
            Set-AzContext -SubscriptionId &lt;/span&gt;&lt;span class="nv"&gt;$managementGroupSubs&lt;/span&gt;&lt;span class="s2"&gt;.children[0].Name
        }
        If (&lt;/span&gt;&lt;span class="nv"&gt;$managementGroupSubs&lt;/span&gt;&lt;span class="s2"&gt;.Type -like "&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="s2"&gt;") {
            Set-AzContext -SubscriptionId &lt;/span&gt;&lt;span class="nv"&gt;$managementGroupSubs&lt;/span&gt;&lt;span class="s2"&gt;.Name[0]
        }

        #Test if roledef exists
        &lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt; = Get-AzRoleDefinition &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;.Name
        If (&lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt;) {
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Definition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;already&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exists:&lt;/span&gt;&lt;span class="s2"&gt;"
            Write-Output "&lt;/span&gt;&lt;span class="o"&gt;----------------------------------------------&lt;/span&gt;&lt;span class="s2"&gt;"
            &lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt;
            Write-Output "&lt;/span&gt;&lt;span class="o"&gt;----------------------------------------------&lt;/span&gt;&lt;span class="s2"&gt;"
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Updating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="s2"&gt;"

            &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;.Id = &lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt;.Id
            Set-AzRoleDefinition -Role &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;
        }
        Else {
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Definition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;does&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exist:&lt;/span&gt;&lt;span class="s2"&gt;"
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="s2"&gt;"

            New-AzRoleDefinition -InputFile &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;
        }
    }

    If (&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="s2"&gt; -like "&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;") {
        Set-AzContext -SubscriptionId (&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="s2"&gt; | Split-Path -leaf)

        #Test if roledef exists
        &lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt; = Get-AzRoleDefinition &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;.Name
        If (&lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt;) {
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Definition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;already&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exists:&lt;/span&gt;&lt;span class="s2"&gt;"
            Write-Output "&lt;/span&gt;&lt;span class="o"&gt;----------------------------------------------&lt;/span&gt;&lt;span class="s2"&gt;"
            &lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt;
            Write-Output "&lt;/span&gt;&lt;span class="o"&gt;----------------------------------------------&lt;/span&gt;&lt;span class="s2"&gt;"
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Updating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="s2"&gt;"

            &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;.Id = &lt;/span&gt;&lt;span class="nv"&gt;$roleDef&lt;/span&gt;&lt;span class="s2"&gt;.Id
            Set-AzRoleDefinition -Role &lt;/span&gt;&lt;span class="nv"&gt;$Obj&lt;/span&gt;&lt;span class="s2"&gt;
        }
        Else {
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Definition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;does&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exist:&lt;/span&gt;&lt;span class="s2"&gt;"
            Write-Output "&lt;/span&gt;&lt;span class="nx"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="s2"&gt;"

            New-AzRoleDefinition -InputFile &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;
        }
    }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, now each time a new JSON definition is added or an existing definition is amended on our repository under the path &lt;code&gt;./roleDefinitions/&lt;/code&gt; the changes when pushed to our repo will trigger our github actions workflow and will auto-magically create or update any existing RBAC roles in Azure and we can now use proper version control and automation around governing our Azure RBAC custom role definitions using Github Actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QlJepOKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/run-output.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlJepOKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/run-output.png" alt="run-output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also confirm that our role is now published and usable in Azure. 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-bVdA0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/Azure-Role-Published.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-bVdA0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Automate-Azure-RBAC/assets/Azure-Role-Published.gif" alt="Azure-Role-Published"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/Github-Automate-Azure-RBAC/code"&gt;Github&lt;/a&gt; page or you can even use my repo as a template &lt;a href="https://github.com/Pwd9000-ML/Azure-Role-Definitions"&gt;HERE&lt;/a&gt; ❤️&lt;/p&gt;

&lt;p&gt;If you wanted to see how to do this using Azure DevOps instead have a look at &lt;a href="https://dev.to/pwd9000/automate-azure-role-based-access-control-rbac-with-devops-2ehf"&gt;THIS POST&lt;/a&gt; where I demonstrate the same automation using Azure DevOps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Marcel.L - &lt;a href="mailto:pwd9000@hotmail.co.uk"&gt;pwd9000@hotmail.co.uk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Score Football React Hooks 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Mon, 24 May 2021 15:57:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/score-football-react-hooks-i4e</link>
      <guid>https://dev.to/said_mounaim/score-football-react-hooks-i4e</guid>
      <description>&lt;p&gt;Scoore Futball Using React Hooks &amp;amp; Scorebat API 😍&lt;/p&gt;

&lt;p&gt;Demo : &lt;a href="https://scoorefutball.netlify.app/"&gt;https://scoorefutball.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code : &lt;a href="https://github.com/saidMounaim/100DaysOfCode/tree/main/Day34"&gt;https://github.com/saidMounaim/100DaysOfCode/tree/main/Day34&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API : &lt;a href="https://www.scorebat.com/video-api"&gt;https://www.scorebat.com/video-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My #100DaysOfCode Challenge :&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/"&gt;https://github.com/saidMounaim/100DaysOfCode/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>css</category>
    </item>
    <item>
      <title>JavaScript Interview Question #42: How Math.max works in JS</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Mon, 24 May 2021 15:20:55 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-42-how-math-max-works-in-js-13ei</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-42-how-math-max-works-in-js-13ei</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sw5-jmSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sw5-jmSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-42.png" alt="coderslang javascript interview question #42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How exactly Math.max works in JavaScript? What’s the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript, the function &lt;code&gt;Math.max()&lt;/code&gt; accepts variable number of arguments and returns the biggest of them.&lt;/p&gt;

&lt;p&gt;If you pass a couple of arrays into &lt;code&gt;Math.max&lt;/code&gt; they will be first converted to strings and then into numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;]));&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;     &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;         &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Booleans will be also converted to numbers. &lt;code&gt;true&lt;/code&gt; becomes one and &lt;code&gt;false&lt;/code&gt; becomes zero:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;         &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the condition inside of an &lt;code&gt;if&lt;/code&gt; statement can be simplified and we can make sure we’re getting into the &lt;code&gt;else&lt;/code&gt; branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array won&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array lost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: The string &lt;code&gt;array lost&lt;/code&gt; will be logged to the console.&lt;/p&gt;

&lt;p&gt;Read more &lt;a href="https://learn.coderslang.com/tags/javascript"&gt;JavaScript Tutorials&lt;/a&gt; or &lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The most CSS/HTML common mistakes that is in your project</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 24 May 2021 15:17:00 +0000</pubDate>
      <link>https://dev.to/melnik909/the-most-css-html-common-mistakes-that-is-in-your-project-43jo</link>
      <guid>https://dev.to/melnik909/the-most-css-html-common-mistakes-that-is-in-your-project-43jo</guid>
      <description>&lt;p&gt;I help people to check CSS/HTML of their projects. I have noticed that some errors are repeated from project to project. And so I decided to write this article so that you can check if you have them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-placeholder-attribute-instead-of-the-label-element"&gt;
  &lt;/a&gt;
  Using the placeholder attribute instead of the label element
&lt;/h2&gt;

&lt;p&gt;The popular mistake that I often see is using the placeholder attribute instead of the label element. But the user of screen readers can't fill in fields in this case because screen readers can't read the text from the placeholder attribute. &lt;/p&gt;

&lt;p&gt;So I recommend using the label element for a field name and the placeholder attribute for an example of data which user need to fill. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter your email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Enter your email&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"e.g. example@gmail.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-decorative-graphics-using-the-img-element"&gt;
  &lt;/a&gt;
  Creating decorative graphics using the img element
&lt;/h2&gt;

&lt;p&gt;Nowadays developers often confuse decorative graphics with content images. For example, they mark up social icons using the img element.&lt;/p&gt;

&lt;p&gt;But a social icon is a decorative icon that helps users faster to understand the meaning of an element without reading text. If we remove the icon we don't lose the meaning of the element so we can use the background-image property for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social__icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"twitter.svg"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social__name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Twitter&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social__name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Twitter&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.social&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("twitter.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-resize-none"&gt;
  &lt;/a&gt;
  Using the resize: none
&lt;/h2&gt;

&lt;p&gt;I suffer every time developers make small textarea and I can't change it because they disable resizing. They don't think when they add &lt;code&gt;resize: none&lt;/code&gt; the form accessibility is worsened and users can't comfortably enter data.&lt;/p&gt;

&lt;p&gt;If you want to limit textarea's sizes you can use the min-width, max-width, min-height, and max-height properties. But you should pick up the height value so that the user can fill in fields a comfortable way for himself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-empty-elements"&gt;
  &lt;/a&gt;
  Using empty elements
&lt;/h2&gt;

&lt;p&gt;In the web, there is bad practice to use empty HTML elements styling elements. For example, the hamburger markup using the empty div or span elements.&lt;/p&gt;

&lt;p&gt;But this issue should be solved using the ::before and ::after pseudo-elements. In this case, HTML looks cleaner. Also, the main thing is adding of text for screen readers so that users can interact with this button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d3531a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"visually-hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open menu&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.hamburger&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.hamburger__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d3531a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.visually-hidden&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-the-justifycontent-and-alignitems-make-users-suffer"&gt;
  &lt;/a&gt;
  How the justify-content and align-items make users suffer
&lt;/h2&gt;

&lt;p&gt;When we solve issues of alignment we like to use alignment properties such as justify-content or align-items. But few people know these properties can lead to losing data, particularly frequent, when vertical alignment.&lt;/p&gt;

&lt;p&gt;This is due to how these properties work. This process includes the two terms. The first, the alignment container is an element to that you declare the alignment properties. &lt;/p&gt;

&lt;p&gt;The second, the alignment subject is elements that are inside of the alignment container. The alignment properties affect them.&lt;/p&gt;

&lt;p&gt;So there is the case when the alignment subjects' sizes are larger than the alignment container's sizes. In the default alignment mode, it'll lead to overflow and loss of data. So users will see the cropped element.&lt;/p&gt;

&lt;p&gt;I created the example with the modal element to show this behavior. At first, the text is short. But when we make it more we lose the heading and the close button.&lt;/p&gt;

&lt;p&gt;We can fix it using auto margins because it uses extra space to align elements and doesn't lead to overflow. Take a look at how elements are no longer lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal__main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal__main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.modal__main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nIY8JvoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stas-melnikov.ru/image4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nIY8JvoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stas-melnikov.ru/image4.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-make-text-unavailable"&gt;
  &lt;/a&gt;
  You make text unavailable
&lt;/h2&gt;

&lt;p&gt;Nowadays we often use custom fonts so that our interface looks more unique. Custom fonts aren't in our systems so we have to load them but it takes some time and the issue is what to display at this time.&lt;/p&gt;

&lt;p&gt;By default, a browser waits while a font is loaded so he displays nothing. But we can change it that a browser uses the fallback for displaying text. &lt;/p&gt;

&lt;p&gt;There is the font-display descriptor that determines how a font face is displayed based on whether and when it is downloaded and ready to use. &lt;/p&gt;

&lt;p&gt;We can use the swap value that instructs the browser to use the fallback to display the text until the custom font is fully downloaded. &lt;/p&gt;

&lt;p&gt;This trick helps an user start to interact with an interface faster and to reach its goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Baloo Tamma"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("balotamma.woff2")&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;"woff2"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="sx"&gt;url("balotamma.woff")&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;"woff"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Baloo Tamma"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("balotamma.woff2")&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;"woff2"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="sx"&gt;url("balotamma.woff")&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;"woff"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;font-display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNUncoXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stas-melnikov.ru/image5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNUncoXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stas-melnikov.ru/image5.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-svg-icons-break-your-interfaces"&gt;
  &lt;/a&gt;
  Your SVG icons break your interfaces
&lt;/h2&gt;

&lt;p&gt;When you use SVG icons right in a HTML document, pay attention you have to set the width and height attributes. If you don't do it and you rely on you set the width and height properties in CSS your interface will be broken.&lt;/p&gt;

&lt;p&gt;Your CSS might not be loaded and at this point, the icons will try to fill all of the available space. So the mistake happens. Just set the width and height attributes and can sleep easy. Your interfaces will be bulletproof!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 448 512"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 448 512"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"0.875rem"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1rem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#you-dont-need-to-use-heavy-images-for-any-type-of-devices"&gt;
  &lt;/a&gt;
  You don't need to use heavy images for any type of devices
&lt;/h2&gt;

&lt;p&gt;Our users face too heavy images when they take a look at websites. If they have high-speed internet isn't an important problem but often users remained where there are problems with the internet. It's might be the subway, nature, or another country. I think we have to help users use our apps.&lt;/p&gt;

&lt;p&gt;The good idea is to help a browser doesn't load heavy images with cell phones or other mobile devices. And I want to share the solution that'll do it.&lt;/p&gt;

&lt;p&gt;This solution is known as the picture element that allows defining the set of images' source paths so that a browser can load the most appropriate image for devices. &lt;/p&gt;

&lt;p&gt;For example, we can create 2 source elements and define the width media feature to detect pads and desktops. Also, we will use the img element for cell phones. Then browsers will choose the image that best suits users. &lt;/p&gt;

&lt;p&gt;Pay attention, I use the mobile-first approach so if the picture isn't supported by browsers or the user came using a cell phone the small image will be shown. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; 
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1920x1080.jpg"&lt;/span&gt;
  &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"yellow ferrari F8 spider on the background of the ocean"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; 
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1200x960.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 641px) and (max-width: 1200px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; 
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1920x1080.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 1201px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; 
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-640x480.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"yellow ferrari F8 spider on the background of the ocean"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, you can use the display density descriptor and the scrset attribute to suggest which image is better for a specific device taking into account pixel density.&lt;/p&gt;

&lt;p&gt;For example, if a cell phone has 2x pixel density or more a browser loads the ferrari-640x480-2x.jpg image using the 2x descriptor. But if it has 1x pixel density the ferrari-640x480-1x image will be loaded. Also this rule will work for pads and desktop devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; 
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1920x1080.jpg"&lt;/span&gt;
  &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"yellow ferrari F8 spider on the background of the ocean"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; 
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1x.jpg"&lt;/span&gt;
  &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-2x.jpg 2x"&lt;/span&gt;
  &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"yellow ferrari F8 spider on the background of the ocean"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; 
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1200x960-1x.jpg,
            ferrari-1200x960-2x.jpg 2x"&lt;/span&gt;
    &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 641px) and (max-width: 1200px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; 
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-1920x1080-1x.jpg,
            ferrari-1920x1080-2x.jpg 2x"&lt;/span&gt;
    &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 1201px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; 
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ferrari-640x480-1x.jpg,
         ferrari-640x480-2x.jpg 2x"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"yellow ferrari F8 spider on the background of the ocean"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-main-element-is-missing"&gt;
  &lt;/a&gt;
  The main element is missing
&lt;/h3&gt;

&lt;p&gt;Every web page has main content but developers forget about it somehow. They don't use the main element. So assistive technologies think web pages don't have main content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- main content is here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- main content is here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-headings-too-much"&gt;
  &lt;/a&gt;
  Using headings too much
&lt;/h3&gt;

&lt;p&gt;There is a bad practice of using the h1-h6 elements for the subheading. When you do that you forget that headings help users of screen readers to navigate on the web page faster. If you have headings too much it prevents people. So use heading where they're needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;iPhone 11&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Just the right amount of everything.&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;iPhone 11&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Just the right amount of everything.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-alt-attribute-has-incorrect-values"&gt;
  &lt;/a&gt;
  The alt attribute has incorrect values
&lt;/h3&gt;

&lt;p&gt;The alt attribute can be very useful if developers use it correctly. Unfortunately, a lot of them don't try to describe images so that people with visual disabilities could understand what's on the picture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"picture.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"adidas Originals Superstar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"picture.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"adidas Originals Superstar Bold platform trainers in black and white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-div-element-instead-of-the-span-element"&gt;
  &lt;/a&gt;
  Using the div element instead of the span element
&lt;/h3&gt;

&lt;p&gt;That is the top mistake that I see on a large number of websites. In the spec there is the following description of the div element:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements.&lt;br&gt;
⠀&lt;br&gt;
Contexts in which this element can be used: where flow content is expected and as a child of a dl element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The flow content is most elements that are used in the body of documents and applications. That isn't text.&lt;/p&gt;

&lt;p&gt;The span element is the best element to markup text without special meaning. It has the following description in the spec:&lt;br&gt;
⠀&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The span element doesn't mean anything on its own but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.&lt;br&gt;
⠀&lt;br&gt;
Contexts in which this element can be used: where phrasing content is expected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Phrasing content is the text of the document, as well as elements that mark up that text at the intra-paragraph level.&lt;/p&gt;

&lt;p&gt;So just use the span for text and you'll have valid HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;some text&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;some text&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#missing-the-address-element-for-the-social-media-block"&gt;
  &lt;/a&gt;
  Missing the address element for the social media block
&lt;/h2&gt;

&lt;p&gt;Often we need to markup a social media block or other contact info in our projects. Usually, developers use the div element.&lt;/p&gt;

&lt;p&gt;But the WHATWG spec contains the special address element for this task. What's written in the spec. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you want to have the valid HTML you should use the address element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"github.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Fork me on Github&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"twitter.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Follow me on Twitter&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"linkedin.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My LinkedIn&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;address&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"github.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Fork me on Github&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"twitter.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Follow me on Twitter&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"linkedin.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My LinkedIn&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#breadcrumbs-without-the-ol-element"&gt;
  &lt;/a&gt;
  Breadcrumbs without the ol element
&lt;/h2&gt;

&lt;p&gt;There is a best practice to use lists to markup navigation elements such as breadcrumbs, pagination, etc. Usually, developers use the ul element. But the spec contains a more appropriate element and this element is the ol element. &lt;/p&gt;

&lt;p&gt;This element has the following description in the WHATWG spec:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if we will change the order of elements in the breadcrumbs then we change the meaning of the website's navigation and confusing users. So this list is ordered, i.e the ol element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumbs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Design Patterns&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Breadcrumb Pattern&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumbs"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumbs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Design Patterns&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Breadcrumb Pattern&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dates-without-the-time-element"&gt;
  &lt;/a&gt;
  Dates without the time element
&lt;/h2&gt;

&lt;p&gt;I think every developer used the span element for dates. I'm too. But that's a mistake because the WHATWG spec contains the time element that we can use for it. This is what the WHATWG spec tells: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we should use the time elements instead of the span element creating dates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;October 5&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;two days ago&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;a Saturday&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2019-10-05"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;October 5&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2019-01-29"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;two days ago&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2019-09-23"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;a Saturday&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you like these tips go to read others on my &lt;a href="https://www.linkedin.com/in/melnik909/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my patrons: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Vlad Bazhanov, Spiridon Konofaos, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Marketing Your Mobile App, Pre-Launch Stage</title>
      <author>Krowser Web Services </author>
      <pubDate>Mon, 24 May 2021 15:16:59 +0000</pubDate>
      <link>https://dev.to/krowser/marketing-your-mobile-app-pre-launch-stage-4ion</link>
      <guid>https://dev.to/krowser/marketing-your-mobile-app-pre-launch-stage-4ion</guid>
      <description>&lt;p&gt;The awareness stage of a mobile app marketing strategy occurs before the product is launched. This stage is meant for building brand awareness and product visibility. Specifically, how will your target users discover your mobile app? Before beginning with the awareness stage, it is important to already have a thorough understanding of your brand messaging and positioning. A brand resonates with customers through its values and purpose, not through individual product features. Defining a brand position gives users the chance to connect with your product on a deeper level. Below is a list of steps and strategies to follow during the awareness stage of your marketing plan.&lt;/p&gt;

&lt;p&gt;° Determine A Release Date&lt;br&gt;
Compared to Google, Apple has a strict review process that may delay your release, or you may encounter a setback you didn’t anticipate. Planning far in advance will give you adequate time to prepare for your product’s hard launch and allows you to foresee and contingencies that may occur.&lt;/p&gt;

&lt;p&gt;Pro Tip: When scheduling your launch date, pay attention to events that are going on in your space that have the potential to overshadow your app launch.&lt;/p&gt;

&lt;p&gt;° Conduct Market Research To Understand Your Customers&lt;br&gt;
One of the most common pre-launch mistakes is not doing market research properly. Before you begin any development work, you need to identify the key players in your specific app category. It doesn’t matter how thorough your marketing efforts are – if your app doesn’t address a user pain-point or addresses a pain-point that already has a thriving app solution in the market, then your product will simply not succeed. App Annie provides a substantial amount of useful app market data.&lt;/p&gt;

&lt;p&gt;Pro Tip: Identify and research the most influential blogs, groups, forums, and websites your target audience visits, as well as any influencers they follow on social media. These channels will help you reach and acquire users.&lt;/p&gt;

&lt;p&gt;° Create User Personas&lt;br&gt;
A core objective throughout the awareness stage is discovering who your target user is, what they value, and the central pain point they experience that your product will address. There can be multiple user groups for a mobile app and each user persona will have its unique user journey.&lt;/p&gt;

&lt;p&gt;A user persona is a partially fictitious depiction of your ideal user. User personas include everything about a user’s demographics, background, mobile preferences, interests, and unique identifiers. User personas also address the central goals of the user and the challenges they currently face. In-depth user personas create the foundation for user journey design and help you customize every aspect of your mobile product to each of your users’ preferences and needs. Everything from branding and in-app content to functionality, features, platform choice and monetization strategy need to resonate with your target user. By thoroughly outlining your target audience with user personas, you’ll answer essential questions that will guide your entire marketing strategy. For example:&lt;/p&gt;

&lt;p&gt;• What is the central pain point this audience collectively experiences?&lt;br&gt;
• What mobile operating system does this audience use? iOS or Android?&lt;br&gt;
• What types of content does this audience engage with online?&lt;br&gt;
• What tone, voice and content style resonates well with this audience?&lt;br&gt;
• Are there any visual branding patterns that surface amongst this audience’s online activity?&lt;br&gt;
• Do these users follow any reputable influencers in this product’s vertical on social media?&lt;br&gt;
• What platforms are best to leverage for paid advertising?&lt;br&gt;
• Are these users known to pay for apps or make in-app purchases?&lt;/p&gt;

&lt;p&gt;Using personas to answer questions like these will help you coordinate design, business, and marketing decisions to attract the right audience to your product. If you haven’t properly researched your audience, you won’t be able to deliver a product that is relevant to their needs?&lt;/p&gt;

&lt;p&gt;° Conduct A Competitive Analysis&lt;br&gt;
Your app will have competition. Make a list of your top 5 competitors, their current price, monetization model, app store ranking, user experience (UX) pros and cons, and notable reviews. You could even go so far as to make a competitive matrix to determine how your app compares. Make sure your app doesn’t repeat any poorly made features or UX elements that users have negatively reviewed. Think about what would make your app stand out in contrast to your competitors. These are important considerations that should influence your entire app marketing approach.&lt;/p&gt;

&lt;p&gt;° Create A Website, Or Landing Page&lt;br&gt;
Mobile websites are the number one source of app installs. Creating a pre-launch landing page or at the very least a teaser video for your product has become standard practice. Once you have a video for your website, you can recycle the content by putting it in the app stores, on social platforms, or even use it in paid ads. In addition to building a hype around your app, having a pre-launch website is also a great way to do some early search engine optimization (SEO) by starting to build your domain authority. When you set up your website, collect emails so you can keep your followers updated and let them know when your mobile app launches, and when you have new updates and features. It is also beneficial to showcase 5-star reviews on the site; make sure reviews are authentic, or else your brand will seem insincere.&lt;/p&gt;

&lt;p&gt;° Outreach Initiatives&lt;br&gt;
One of the most overlooked aspects of marketing a new mobile product is outreach initiatives by contacting influencers, publications, and bloggers to secure backlinks and provide honest reviews. Make a list of contacts that are relevant to your industry or niche that might be interested in writing about, and reviewing your app. Keep your pitch concise with a link to your press kit or landing page. That way, if they’re interested in writing about your app, they’ll have all of the information they need.&lt;/p&gt;

&lt;p&gt;° Promote On Social&lt;br&gt;
Facebook, Instagram, Twitter, LinkedIn, Pinterest, and other social platforms let you expand your web presence and allow you to directly communicate with your target audience. If your app targets specific age groups, identify the social platforms that are most popular with people in this demographic and focus on them. Make sure you consider the following:&lt;/p&gt;

&lt;p&gt;• Is it clear that you have an app from the first glance of your social profile?&lt;br&gt;
• Is the purpose of the app obvious?&lt;br&gt;
• Is there a link to download it?&lt;/p&gt;

&lt;p&gt;Post company updates, and features that will get followers excited about the launch. Create a hashtag and use it in posts when appropriate. Post and share not only promotional but entertaining and engaging content related to your app in order to build a community behind it.&lt;/p&gt;

&lt;p&gt;° Create A Content Marketing Strategy&lt;br&gt;
Start writing a blog months in advance of launching. When it’s time to launch, you’ll already be an authority in your niche with followers. Start simple and write a launch post, boast about the app’s features, showcase screenshots, and videos. Here are several benefits of content marketing for your app:&lt;br&gt;
• Drive traffic, conversions, and brand awareness with content&lt;br&gt;
• Create a brand around your app by being an expert in your niche&lt;br&gt;
• Build trust with users through content&lt;br&gt;
• Blog content can be used for email marketing to re-engage contacts or for social media&lt;/p&gt;

</description>
      <category>android</category>
      <category>apple</category>
      <category>google</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>When to Pair Program and When to Go Solo</title>
      <author>Niko Heikkilä</author>
      <pubDate>Mon, 24 May 2021 14:58:16 +0000</pubDate>
      <link>https://dev.to/futurice/when-to-pair-program-and-when-to-go-solo-26jl</link>
      <guid>https://dev.to/futurice/when-to-pair-program-and-when-to-go-solo-26jl</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Despite all the praise pair programming gets, it is not a silver bullet and we should carefully practise it to get the most benefit from it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently finished reading &lt;a href="https://www.goodreads.com/book/show/57518328-practical-remote-pair-programming"&gt;&lt;em&gt;Practical Remote Pair Programming&lt;/em&gt; by &lt;strong&gt;Adrian Bolboacă&lt;/strong&gt;&lt;/a&gt;. In the description, the author promises to teach you the structure, organisation, communication, and tools for making (remote) pair programming successful in your (distributed) team.&lt;/p&gt;

&lt;p&gt;Pair programming is complicated. Despite that, I've been practising and advocating it for a while, trying to build solid habits around it. Thus, the book naturally caught my eye. Besides, today most of the programming work is remote, making the book a timely publication.&lt;/p&gt;

&lt;p&gt;In addition to describing when and how pair programming works to speed up your delivery process, it is crucial to understand situations where it might only slow you down. In this post, I will go over these situations briefly. However, I warmly recommend reading the book as well for complete insights.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I will use the term &lt;em&gt;pairing&lt;/em&gt; a lot in this post in place of pair programming. Many pairing techniques also apply to &lt;em&gt;mobbing&lt;/em&gt; (mob programming), which means working in groups of three or more people. For beginners, I recommend starting in pairs and moving on to mobs after a while. In some texts, you might also stumble upon the term &lt;em&gt;ensemble programming&lt;/em&gt;, a friendlier name for mobbing. After all, we are not here to smack down the code like an angry mob, even though programming can be frustrating at times.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-notobvious-benefits-of-pairing"&gt;
  &lt;/a&gt;
  The (Not-)Obvious Benefits of Pairing
&lt;/h2&gt;

&lt;p&gt;Trying to convince your team to take on pairing can be even more challenging than programming in pairs itself. In this section, I will tell how and why pairing can make us better developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-is-mentoring"&gt;
  &lt;/a&gt;
  Pairing Is Mentoring
&lt;/h3&gt;

&lt;p&gt;When I began to build software for a living, I was introduced to new projects, their conventions and other ways of working through pairing. I'm eternally grateful to all my colleagues who have paired with me.&lt;/p&gt;

&lt;p&gt;The pairing has allowed me to grow orders of magnitude faster than being thrown to survive in a project alone because pairing is a pure form of mentoring. After a while, I too began pairing with new hires passing forth all the knowledge I had gained.&lt;/p&gt;

&lt;p&gt;As in martial arts, those with a higher rank are responsible for teaching others with a lower rank. Pairing is all about this. Therefore, the best pairs are often junior-senior pairs. The junior is ideally a new hire or otherwise unknown to the codebase or domain. Pairing with someone on your level can work, too, although it involves less mentoring and growing.&lt;/p&gt;

&lt;p&gt;The next time your team gets a new member, do not only throw entry-level tasks at them — pair with them, instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-is-a-learning-tool"&gt;
  &lt;/a&gt;
  Pairing Is a Learning Tool
&lt;/h3&gt;

&lt;p&gt;Like many others, I started my career studying computer science in study groups. The fundamental programming classes I attended always involved exercises. Often we would solve the given problems together, sitting next to the same computer sharing the same keyboard.&lt;/p&gt;

&lt;p&gt;In the book, the author references the four levels of knowledge related to a concept known as &lt;em&gt;staff liquidity&lt;/em&gt;. These describe the skills you possess about the current system or parts of it. They are as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;"I know nothing!"&lt;/em&gt; (beginner)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I can run it"&lt;/em&gt; (intermediate)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I can tweak and fix bugs"&lt;/em&gt; (advanced)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I &lt;strong&gt;own&lt;/strong&gt; it!"&lt;/em&gt; (master)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although you typically climb these levels independently with occasional support from your team, the journey towards mastery is fastest travelled by pairing. When you pair to learn, you will develop a solid understanding of the system, enabling you to redesign or refactor it faster and safer than working alone.&lt;/p&gt;

&lt;p&gt;The next time you need to learn a complex system or domain to manage it, pair with the one who knows it best.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-is-sharing-knowledge"&gt;
  &lt;/a&gt;
  Pairing Is Sharing Knowledge
&lt;/h3&gt;

&lt;p&gt;The more we work alone, the more we gather silent knowledge about the inner workings of our code. It's inefficient and time-consuming to share knowledge only through documentation despite its importance for product longevity. We can conveniently build shared conventions about developing the product through pairing without having to sit in meetings or glance at massive pull requests.&lt;/p&gt;

&lt;p&gt;A well-established technique is to form pairs from people working with different parts of the system. For example, a back-end developer should pair with the front-end developer working with requests to the back-end interfaces. Successfully applying pairing techniques will tear down the invisible walls in your team.&lt;/p&gt;

&lt;p&gt;Note, however, that the shared knowledge should also be written down. Otherwise, it is only silent knowledge in your and your pair's heads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-is-a-social-event"&gt;
  &lt;/a&gt;
  Pairing Is a Social Event
&lt;/h3&gt;

&lt;p&gt;Developers come in all sorts of flavours. Some like to do focus work being buried under music from noise-cancelling headphones. In contrast, others enjoy the company of their peers and have a chance to brainstorm complex problems together.&lt;/p&gt;

&lt;p&gt;I belong to the latter group. In fact, I often feel more stressed and anxious when working alone. These feelings have also begun to intensify during the pandemic. Being isolated in continuous long stretches has made my performance significantly weaker. Thus, I need social programming to live and thrive.&lt;/p&gt;

&lt;p&gt;Pairing and mobbing (style of pairing with three or more people) can also happen in social events organised within a community. Hackathons are a prominent example. If the employees are suffering from isolation, organising a community event is a beautiful way to build up the spirit and see new innovations grow.&lt;/p&gt;

&lt;p&gt;In the book, there is a fascinating anecdote about the social aspect of pairing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"During a community event that I was facilitating, while the programmers were pairing, &lt;strong&gt;a CEO appeared&lt;/strong&gt;. He heard about this event and he was curious what was going on. Nobody had any idea about his role, and he joined, paired, and discussed just like any other attendee. Only after the event did I find out that he wasn't really a programmer."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pairing is not only for developers. You can pair with designers, testers, product owners, managers and even your CEO under some circumstances. What value does your solution have if you can't explain it to your CEO, anyway?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-mistakes-made-while-pairing"&gt;
  &lt;/a&gt;
  Common Mistakes Made While Pairing
&lt;/h2&gt;

&lt;p&gt;By now, you most likely noticed that you have tried pairing at least once, whether it was during your studies or junior years.&lt;/p&gt;

&lt;p&gt;The unfortunate fact is that many of us stop pairing at some point. We might blame bad prior experiences or incompetent managers who think that features are done fastest when everyone is working independently.&lt;/p&gt;

&lt;p&gt;It cannot be denied that pairing does not mean eating cake and drinking champagne from golden carafes all day. Hence, avoid these common mistakes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-should-be-pairing-all-day"&gt;
  &lt;/a&gt;
  You Should Be Pairing All Day
&lt;/h3&gt;

&lt;p&gt;Pairing all day every day can make you exhausted and emotionally zapped at the end of the day. I can usually last no longer than two hours talking and writing code at the same time. Then I need to rest for at least 15 minutes to ease the fatigue. Continuously keeping up a pace like this will more than likely grind our wellbeing and drop our interest in pairing.&lt;/p&gt;

&lt;p&gt;Doing the devil's math shows that we can split the average day of eight hours to a maximum of three to four extended sessions with short breaks in between. On paper, this sounds efficient, but it quickly proves as wasteful as any approach where developers are fully utilised. Remember, 100 % utilisation is a parking lot – or an express lane to sick leave.&lt;/p&gt;

&lt;p&gt;It's better to start by pairing for 25-30 minutes straight (in total 1-2 hours daily), pausing briefly, and rotating roles before carrying on. If the task is finished, you can rotate pairs before starting a new task. I recommend you download a &lt;strong&gt;Pomodoro application&lt;/strong&gt; or use any suitable timer to keep track of time. Rotating often keeps the spirit up as you are not stuck working with the same partner repeatedly.&lt;/p&gt;

&lt;p&gt;Efficiently managing the time spent in the pairing will eventually make you less and less tired while you get used to this new way of working. From there on, you can increase the amount of pairing slowly. I have found out that I can roughly keep on pairing 75 % of the day. The rest 25 % I reserve for a slack time where I learn, research, or work independently. Your perfect percentage may vary, but don't let it creep towards 100 %.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-in-hostile-or-unknown-waters"&gt;
  &lt;/a&gt;
  Pairing in Hostile or Unknown Waters
&lt;/h3&gt;

&lt;p&gt;While pairing, we need to bounce ideas back and forth when trying to develop optimal solutions. Inevitably some of our clever ideas can sound utterly crazy or prove ineffective right after saying them.&lt;/p&gt;

&lt;p&gt;Therefore, pairing requires a psychologically safe space where you are not laughed at no matter what you say. Without psychological safety, you cannot bring forth your best ideas. In the worst case, you might end up silently following what others say, effectively reducing the pair to a solo effort.&lt;/p&gt;

&lt;p&gt;If there are any tensions within your team, you should resolve those first before starting to pair. Suppose no one in the group knows the other person, as is sometimes the case in fast-paced consultancy projects. In that case, you should wait until the team has passed its forming phase and is comfortable working as a unit.&lt;/p&gt;

&lt;p&gt;If the whole development organisation is on fire and people hate working with each other, then... well, just hand over your resignation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expecting-a-formal-code-review-after-pairing"&gt;
  &lt;/a&gt;
  Expecting a Formal Code Review After Pairing
&lt;/h3&gt;

&lt;p&gt;Some developers accustomed to the ways of working in highly bureaucratic, process-oriented, and hierarchical cultures adamantly state that pairing is no substitute for a formal code review. It is further reasoned by saying that a third person with &lt;em&gt;fresh eyes&lt;/em&gt; is supposed to catch all the mistakes you and your pair have made.&lt;/p&gt;

&lt;p&gt;In these situations, ask how the third developer — who has no context or deep understanding of the problem at hand — could review the solution any better? Asynchronous ways of working have instilled the notion that we must always invite an outsider to scan our code. Contrary, the code review is most useful coming from peers who understand the context and problem. They are your pairs.&lt;/p&gt;

&lt;p&gt;Suppose we have a process demanding an external code review despite pairing. In the worst case, you first have to wait for the third developer to detach from their current task. Then they suffer through all the negative impacts of context switching before studying the code you have written. Finally, they present you their often flawed feedback before switching back to their previous task again. This drastically reduces the team's throughput and increases your lead times.&lt;/p&gt;

&lt;p&gt;Instead, try pairing in a continuous delivery mindset. Design, implement, review, test, and finally deploy your solution. Then make a (virtual) high-five, grab coffees, and move on to the next task. I've efficiently completed user stories with tens of subtasks without creating significant defects in a day or two doing so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-with-unclear-requirements"&gt;
  &lt;/a&gt;
  Pairing With Unclear Requirements
&lt;/h3&gt;

&lt;p&gt;When your team has no clear understanding of the problem or the domain, pairing is not fruitful. You will likely end up staring at a task description — often phrased verbatim by the client or product owner — with open mouths for a couple of minutes before moving on to an easier task.&lt;/p&gt;

&lt;p&gt;Fortunately, pairing is not always about programming because solving problems is not always about writing code either. You can pair with your product owner or team lead and together write high-quality requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pairing-with-bad-coding-practices"&gt;
  &lt;/a&gt;
  Pairing with Bad Coding Practices
&lt;/h3&gt;

&lt;p&gt;Pairing is ineffective when tight schedules force your team to cut corners daily, resulting in technical debt. After deciding to improve the codebase quality, you can slowly start slicing through the legacy cruft and refactor the code in pairs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practical-tips-before-starting-pairing"&gt;
  &lt;/a&gt;
  Practical Tips Before Starting Pairing
&lt;/h2&gt;

&lt;p&gt;This section shall briefly describe small tricks that have helped me whether pairing remotely or in the office.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-ensemble-commits"&gt;
  &lt;/a&gt;
  Use Ensemble Commits
&lt;/h3&gt;

&lt;p&gt;During pairing, we usually share the same codebase, which means that version control tools cannot accurately determine who has done what. It is not always crucial to attribute commits to specific authors. After all, the team should have &lt;em&gt;collective ownership&lt;/em&gt; of the solution. However, it is a good practice to give credit where it is due.&lt;/p&gt;

&lt;p&gt;This can be done with a technique called &lt;em&gt;ensemble commits&lt;/em&gt;, in which you simply write the name and email of your pair in the commit message footer. See the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;feat(api): add a new route '/films' for fetching IMDb data

// optional longer description here

Co-authored-by: Steve McQueen &amp;lt;kingofcool@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not all source control providers display this information correctly. However, &lt;a href="https://docs.github.com/en/github/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; favours this approach when specifying multiple authors. It is a great way to give credit to your pair. It also helps other developers to see who should they ask about this commit later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assign-roles"&gt;
  &lt;/a&gt;
  Assign Roles
&lt;/h3&gt;

&lt;p&gt;Besides writing informative commit messages, make sure to commit early and often. You can also assign roles — minding the rotation — while pairing. Test-driven development while pairing is particularly effective when the other developer is unfamiliar with solid testing practices.&lt;/p&gt;

&lt;p&gt;In TDD pairs, the other developer writes a failing test. The other developer follows by writing the code to make the test pass. After a passing test, save the game by committing and proceed to refactor the solution. After the code is clean enough and the test is still passing, commit again. Eventually, you may squash the commits together if needed before pushing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-proper-ide"&gt;
  &lt;/a&gt;
  Use a Proper IDE
&lt;/h3&gt;

&lt;p&gt;This is a matter of taste, but for myself, tools like &lt;em&gt;JetBrains' Code With Me&lt;/em&gt; and &lt;em&gt;Microsoft's Visual Studio Live Share&lt;/em&gt; are among the best pairing tools. You can also share a terminal session through a multiplexer like &lt;code&gt;tmux&lt;/code&gt;. Still, I would avoid this unless my pair is perfectly comfortable swimming in the terminal and using a terminal editor like &lt;em&gt;Emacs&lt;/em&gt; or &lt;em&gt;Vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have found Visual Studio Live Share the best tool for my pairing sessions. Most of the time, I share my local environment through the remote port forwarding feature. Doing so allows my pair to navigate to the same &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt; address and see the live development environment. I can also share access to my terminal when pairing, which helps them to see what commands I use in my development flow. All this is done with few clicks, and it makes remote pairing almost as frictionless as sitting together.&lt;/p&gt;

&lt;p&gt;While IDEs are geared towards remote pairing, they also work locally, given an ideal network setup and low latencies. For many, it's uncomfortable to share a keyboard (feel the germs! 🦠). Sharing an environment between two or more laptops is the better option.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-the-screen-for-context"&gt;
  &lt;/a&gt;
  Share the Screen for Context
&lt;/h3&gt;

&lt;p&gt;Nevertheless, do not rely solely on your IDE because sometimes you need to show your pair the precise situation. Especially when working on front-end tasks, make sure you're sharing the right browser tab so your team can see what is happening.&lt;/p&gt;

&lt;p&gt;Platforms we typically use for remote meetings like &lt;em&gt;Google Meet&lt;/em&gt;, &lt;em&gt;Zoom&lt;/em&gt;, and &lt;em&gt;Microsoft Teams&lt;/em&gt; are viable choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invest-in-the-equipment"&gt;
  &lt;/a&gt;
  Invest in the Equipment
&lt;/h3&gt;

&lt;p&gt;Make sure you have a decent webcam, headphones and microphone available when pairing.&lt;/p&gt;

&lt;p&gt;Never, ever use your laptop's built-in microphone and speakers. The sound of your typing and the echo of your pairs voice will severely distract their thoughts and abruptly thrash the experience. The book walks an extra mile describing different high-end podcasting setups with proper mic stands and pop filters. Still, you can make do with affordable headsets as long as they are not the cheapest earbuds. A good rule of thumb for headphones is to try them out while pairing for an hour. If your ears hurt, change the headphones.&lt;/p&gt;

&lt;p&gt;You don't always need to have your webcam on. Sometimes it can make pairing feel more personal, but not everyone is comfortable with having cameras on all the time. Discuss this with your pair if needed before your first session. If you choose to have your webcam on, adjust the lighting so you don't end up looking like a black silhouette in front of bright daylight. Shut down any backlight sources and turn on a front light – not too bright – to make your face more visible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ensure-a-stable-network-connection"&gt;
  &lt;/a&gt;
  Ensure a Stable Network Connection
&lt;/h3&gt;

&lt;p&gt;Sloppy connection causes your voice to stutter or become robotic, which is a distraction. However, you don't need 1 GB optic fibre for pairing. As long as you make sure the connection is stable, latencies are low, and there's enough extra bandwidth for audio and video. The rest of the family should not be watching too much Netflix in the other room.&lt;/p&gt;

&lt;p&gt;If you're using Wi-Fi, move as close to the router as comfortable. Plugin the Ethernet cable whenever you can. If the current task does not require using a VPN connection or other proxies, disable them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-pair"&gt;
  &lt;/a&gt;
  Should I Pair?
&lt;/h2&gt;

&lt;p&gt;In this post, I outlined many benefits, pitfalls and practical tips to ease your journey into pairing. However, the critical question is: when should I pair?&lt;/p&gt;

&lt;p&gt;It is not always easy to decide. In my experience, there are specific tasks that are often better solo. These include but are not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deploying builds and running scripts&lt;/li&gt;
&lt;li&gt;documenting existing features and writing simple instructions&lt;/li&gt;
&lt;li&gt;checking if a reported bug can be reproduced&lt;/li&gt;
&lt;li&gt;doing mundane and routine tasks, which should be automated, anyway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all other tasks that require levelling knowledge, learning new concepts, or solving challenging problems, the answer is often &lt;em&gt;yes&lt;/em&gt;. You should always be ready to pair.&lt;/p&gt;

&lt;p&gt;If you need more help to get started with pairing, read the book. You can also contact me for coaching. Let us make the development world better by working together.&lt;/p&gt;




&lt;p&gt;Photo by &lt;strong&gt;Nathan Dumlao&lt;/strong&gt; on &lt;a href="https://unsplash.com/photos/QMhc3D_zwJ0"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>books</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Synthetic Data Experiments: Package Detection</title>
      <author>Hugo</author>
      <pubDate>Mon, 24 May 2021 14:34:15 +0000</pubDate>
      <link>https://dev.to/hugop/synthetic-data-experiments-package-detection-2mnf</link>
      <guid>https://dev.to/hugop/synthetic-data-experiments-package-detection-2mnf</guid>
      <description>&lt;p&gt;Having a package stolen is frustrating. As &lt;a href="https://youtu.be/h4T_LlK1VE4"&gt;Mark Rober has demonstrated&lt;/a&gt;, it can drive people to the edge of madness. But what if you could build your own package detection model using exclusively synthetic data? We’ve outlined a few short steps we took to go from synthetic data generation to working detector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvCuXBBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he2lu4xzytq9szdtexwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvCuXBBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he2lu4xzytq9szdtexwk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-synthetic-data"&gt;
  &lt;/a&gt;
  Generate Synthetic Data
&lt;/h2&gt;

&lt;p&gt;Synthetic data is generated from a simulation or “sim”—typically a scene that has been created from custom or stock 3D models. Sims can run in the cloud in parallel to create virtually infinite training data. I created a sim for package detection using open-source 3D graphics software Blender and &lt;a href="https://github.com/ZumoLabs/zpy"&gt;zpy&lt;/a&gt; [1]. In this sim, assorted 3D packages are spawned while the camera angle and lighting conditions are randomized. The resulting synthetic dataset is visually diverse and perfectly labeled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqS2C-Iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi6d6osprxu5u88n2yod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqS2C-Iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi6d6osprxu5u88n2yod.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1: Synthetic images of packages generated from a sim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collect-the-test-data"&gt;
  &lt;/a&gt;
  Collect the Test Data
&lt;/h2&gt;

&lt;p&gt;To test our model trained on the synthetic data, we are going to need to collect some real images. We found some on the internet, and manually labeled them using a DIY labeling platform called &lt;a href="https://roboflow.com/"&gt;RoboFlow&lt;/a&gt; [2]. Give it a try. After spending an hour drawing bounding boxes on images, take a moment to appreciate that nearly all training data has to be painstakingly manually labeled like that. It’s the sort of tedious work that folks in developing countries wind up being paid pennies for. Talk about a dystopian future…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#train-the-model"&gt;
  &lt;/a&gt;
  Train the Model
&lt;/h2&gt;

&lt;p&gt;Armed with our synthetic training dataset and our real test dataset, we are ready to do some model training. We used a resnet variant implemented in PyTorch, from the Detectron2 github repo [3]. This network was pre-trained on Imagenet, so we only need to fine tune it a little longer on our synthetic dataset before it is capable of making decent predictions. Not bad for such a small dataset (1000 synthetic images) and such a short training time (30 minutes).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pP4SV07R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qlw3tehne3zwza7ag7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pP4SV07R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qlw3tehne3zwza7ag7r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2: Predictions from our neural network trained on synthetic data. False positives shown for context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;These are great results for the first iteration. To improve model performance further we could increase the size of the dataset, add more variety to the sim, or pick better hyperparameters for our model. Evaluating model performance on real test data and iterating is core to the synthetic data workflow. After all, the coolest thing about synthetic training data is that it’s ultimately dynamic data.&lt;/p&gt;

&lt;p&gt;For your next computer vision project, whether it be a hobby or your job, spare those poor manual data labelers and consider trying out the synthetic approach. We’ve made it easy for you: we’ve released our data development toolkit zpy [1] under an open source license. Now everything you need to generate and iterate synthetic data for computer vision is available for free. Your feedback, commits, and feature requests, will be invaluable as we continue to build a more robust set of tools for generating synthetic data. Meanwhile, if you could use hands on support with a particularly tricky problem, please reach out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1] zpy (github.com/ZumoLabs/zpy)&lt;br&gt;
[2] RoboFlow (roboflow.com)&lt;br&gt;
[3] Detectron2 (github.com/facebookresearch/detectron2)&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>python</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Build TikTok Clone 🔥 in just 30 Mins using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Mon, 24 May 2021 14:16:51 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/build-tiktok-clone-in-just-30-mins-using-html-and-css-213l</link>
      <guid>https://dev.to/somanathgoudar/build-tiktok-clone-in-just-30-mins-using-html-and-css-213l</guid>
      <description>&lt;p&gt;I Built TikTok Clone using just HTML &amp;amp; CSS and little bit of JS. I Just Love to build these to practice my HTML &amp;amp; CSS Skills. I made a tutorial video to help beginners to improve there html &amp;amp; css skills to build real world projects.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;➜ Tutorial Video:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HBEUXujJh1A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Github:&lt;/strong&gt; &lt;a href="https://github.com/somanath-goudar/html-css-projects"&gt;https://github.com/somanath-goudar/html-css-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe&lt;/a&gt; to My YouTube Channel, This Week I Will also be building &lt;strong&gt;Instagram Reels Clone&lt;/strong&gt; with just HTML &amp;amp; CSS.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;➜ You may also like my other posts:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/facebook-clone-using-just-html-css-beginners-tutorial-2fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;FACEBOOK Clone Using just HTML &amp;amp; CSS - Beginners Tutorial&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-youtube-clone-with-just-html-css-for-complete-beginners-4fk1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a YouTube Clone with just HTML &amp;amp; CSS + Responsive - For  Beginners&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-gmail-clone-using-just-html-css-476b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a GMAIL Clone Using just HTML &amp;amp; CSS - Beginners Tutorial&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 7 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>html</category>
    </item>
    <item>
      <title>Creating a Haskell Application Using Reflex. Part 3
</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 24 May 2021 13:59:49 +0000</pubDate>
      <link>https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-3-47d6</link>
      <guid>https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-3-47d6</guid>
      <description>&lt;p&gt;Author: Nikita Anisimov&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-1-3kk3"&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-2-4jaa"&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there! In this post we’ll discuss how we use the &lt;code&gt;EventWriter&lt;/code&gt; class and &lt;a href="https://github.com/ghcjs/ghcjs-dom"&gt;ghcjs-dom&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rB_eFng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rB_eFng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/3.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-eventwriter"&gt;
  &lt;/a&gt;
  Using EventWriter
&lt;/h2&gt;

&lt;p&gt;In the current implementation, in order to send events from nested levels, we pass them as return values. This is not always convenient, especially when you need to return something in addition to the event (for example, an input form can return both the click event and data from the form). It would be much more convenient to use a mechanism which can send the events to the top level automatically, saving you the trouble of returning them constantly. Such a mechanism – &lt;code&gt;EventWriter&lt;/code&gt; – does exist. This class allows writing down events, similarly to the standard &lt;code&gt;Writer&lt;/code&gt; monad. Let's rewrite our application using the &lt;code&gt;EventWriter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To begin with, let’s consider the &lt;code&gt;EventWriter&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Semigroup&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;tellEvent&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type &lt;code&gt;w&lt;/code&gt; is exactly the type of our event; this type is an instance of class &lt;code&gt;Semigroup&lt;/code&gt;, i.e. The values of this type can be combined. If two different events are written using the &lt;code&gt;tellEvent&lt;/code&gt; and run simultaneously at a point in time, the events have to be combined in some way into one event of the same type so that the monad execution would result in one event.&lt;/p&gt;

&lt;p&gt;There is a transformer representing an instance of this class — &lt;code&gt;EventWriterT&lt;/code&gt;; it can be run using the function &lt;code&gt;runEventWriterT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, we start changing the functions. The function &lt;code&gt;rootWidget&lt;/code&gt; will undergo the biggest changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;rootWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rootWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mdo&lt;/span&gt;
    &lt;span class="n"&gt;elClass&lt;/span&gt; &lt;span class="s"&gt;"h2"&lt;/span&gt; &lt;span class="s"&gt;"text-center mt-3"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Todos"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;runEventWriterT&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;todosDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;foldDyn&lt;/span&gt; &lt;span class="n"&gt;appEndo&lt;/span&gt; &lt;span class="n"&gt;mempty&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;
      &lt;span class="n"&gt;newTodoForm&lt;/span&gt;
      &lt;span class="n"&gt;delimiter&lt;/span&gt;
      &lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve added the transformer runner call and got rid of all return events.&lt;/p&gt;

&lt;p&gt;Though the changes in the &lt;code&gt;newTodoForm&lt;/code&gt; are not so dramatic, they are still worth mentioning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;newTodoForm&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;newTodoForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rowWrapper&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"input-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mdo&lt;/span&gt;
  &lt;span class="n"&gt;iEl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;initialAttributes&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"placeholder"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"Todo"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inputElementConfig_setValue&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;btnEv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt;
    &lt;span class="n"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
    &lt;span class="n"&gt;newTodoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;iEl&lt;/span&gt;
    &lt;span class="n"&gt;btnAttr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btnEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"input-group-append"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="n"&gt;btnAttr&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Add new entry"&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;btnEv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;btnEl&lt;/span&gt;
  &lt;span class="n"&gt;tellEvent&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tagPromptlyDyn&lt;/span&gt; &lt;span class="n"&gt;newTodoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;btnEl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the function type has been updated, now it returns nothing. We have also added the required constraint &lt;code&gt;EventWriter&lt;/code&gt;. Correspondingly, we’ve removed the return value from the function body and now use the &lt;code&gt;tellEvent&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;todoListWidget&lt;/code&gt; has become much simpler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoListWidget&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rowWrapper&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
  &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;listWithKey&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromAscList&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;IM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toAscList&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;todoWidget&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we don’t care at all about the returned event and, consequently, we don’t need to extract the &lt;code&gt;Event&lt;/code&gt; from the &lt;code&gt;Dynamic&lt;/code&gt; anymore.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;todoWidget&lt;/code&gt; function has also undergone visible changes. Now we don’t need to work with the return type and transform the &lt;code&gt;Event t (Event t TodoEvent)&lt;/code&gt;. The function &lt;code&gt;dyn_&lt;/code&gt; differs from &lt;code&gt;dyn&lt;/code&gt; in that the former ignores the return value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;holdUniqDyn&lt;/span&gt; &lt;span class="n"&gt;todoDyn'&lt;/span&gt;
  &lt;span class="n"&gt;dyn_&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only changes in functions &lt;code&gt;todoDone&lt;/code&gt;, &lt;code&gt;todoActive&lt;/code&gt; and &lt;code&gt;todoEditable&lt;/code&gt; are the new type and the event writing instead of returning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoActive&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Done"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;editEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Edit"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
    &lt;span class="n"&gt;tellEvent&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;startEdit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;editEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;todoDone&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="s"&gt;"del"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Undo"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
    &lt;span class="n"&gt;tellEvent&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;todoEditable&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;updTodoDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Finish edit"&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;
    &lt;span class="n"&gt;tellEvent&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
      &lt;span class="n"&gt;tagPromptlyDyn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updTodos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;updTodoDyn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The use of &lt;code&gt;EventWriter&lt;/code&gt; class has made the code simpler and more readable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ghcjsdom"&gt;
  &lt;/a&gt;
  ghcjs-dom
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;reflex&lt;/code&gt; allows us only to modify &lt;code&gt;DOM&lt;/code&gt;, but JS applications are often required to do much more. For example, if you need to copy text by clicking a button, &lt;code&gt;reflex&lt;/code&gt; won’t give us the necessary tools. &lt;code&gt;ghcjs-dom&lt;/code&gt; library will come to the rescue. Essentially, this is a &lt;code&gt;JS API&lt;/code&gt; implementation in Haskell. Here you can find the same types and functions you have in JS.&lt;/p&gt;

&lt;p&gt;In pure JS, without using third-party libraries, the text copy function may look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toClipboard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inpEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inpEl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;inpEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt;
  &lt;span class="nx"&gt;inpEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;inpEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;copy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inpEl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The common practice is to add this event handler, for example, to a button.&lt;br&gt;
What will it look like in Haskell? First of all, we create a new &lt;code&gt;GHCJS&lt;/code&gt; module to work with &lt;code&gt;ghcjs&lt;/code&gt; and define the relevant function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="cp"&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;
&lt;span class="cp"&gt;{-# LANGUAGE MonoLocalBinds #-}&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;GHCJS&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Functor&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;$&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Text&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM.Document&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;execCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;getBodyUnchecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM.Element&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="n"&gt;hiding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM.HTMLElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;HE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM.HTMLInputElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;HIE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM.Node&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GHCJS.DOM.Types&lt;/span&gt; &lt;span class="k"&gt;hiding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Reflex.Dom&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;

&lt;span class="n"&gt;toClipboard&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadJSM&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;toClipboard&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;currentDocumentUnchecked&lt;/span&gt;
  &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getBodyUnchecked&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;
  &lt;span class="n"&gt;inpEl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;uncheckedCastTo&lt;/span&gt; &lt;span class="kt"&gt;HTMLInputElement&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;createElement&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"textarea"&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;appendChild&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="n"&gt;inpEl&lt;/span&gt;
  &lt;span class="kt"&gt;HE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focus&lt;/span&gt; &lt;span class="n"&gt;inpEl&lt;/span&gt;
  &lt;span class="kt"&gt;HIE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt; &lt;span class="n"&gt;inpEl&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;
  &lt;span class="kt"&gt;HIE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;inpEl&lt;/span&gt;
  &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;execCommand&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"copy"&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;removeChild&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="n"&gt;inpEl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Almost each line of the haskell function &lt;code&gt;toClipboard&lt;/code&gt; has a matching line in JS function. It should be mentioned that we don’t have the familiar class &lt;code&gt;MonadWidget&lt;/code&gt; here. Instead, we use &lt;code&gt;MonadJSM&lt;/code&gt;, which is the monad that carries out all work using &lt;code&gt;ghcjs-dom&lt;/code&gt;. The &lt;code&gt;MonadWidget&lt;/code&gt; class inherits &lt;code&gt;MonadJSM&lt;/code&gt;. Let’s show how the handler is bound to the event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;copyByEvent&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;copyByEvent&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;performEvent&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;toClipboard&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see a new function, &lt;code&gt;performEvent&lt;/code&gt;, used to bind the handler to the event. This function is a method of class &lt;code&gt;PerformEvent&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Reflex&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Performable&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PerformEvent&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Performable&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="n"&gt;performEvent&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Performable&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;performEvent_&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Performable&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s change the pending task widget after making sure that we’ve added &lt;code&gt;import GHCJS&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoActive&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EventWriter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copyEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Copy"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Done"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;editEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Edit"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
      &lt;span class="n"&gt;copyByEvent&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;copyEl&lt;/span&gt;
      &lt;span class="n"&gt;tellEvent&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;ToggleTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;StartEditTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;editEl&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;DeleteTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve added the new button &lt;code&gt;Copy&lt;/code&gt; and a specific function call &lt;code&gt;copyByEvent&lt;/code&gt;. The same can be done with widgets used for other task states.&lt;/p&gt;

&lt;p&gt;As usual, the result we’ve obtained can be found &lt;a href="https://github.com/typeable/blog-posts-ru/tree/1156cc99d55c1a6e6b45a82675a5fd3a926f8473/reflex-todo"&gt;in our repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, we’ll discuss using JSFFI (JS Foreign Function Interface).&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
