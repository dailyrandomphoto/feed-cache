<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a passwordless authentication using Auth0, Cloudinary and Nextjs</title>
      <author>Demola Malomo</author>
      <pubDate>Sun, 17 Oct 2021 09:42:45 +0000</pubDate>
      <link>https://dev.to/hackmamba/create-a-passwordless-authentication-using-auth0-cloudinary-and-nextjs-4b54</link>
      <guid>https://dev.to/hackmamba/create-a-passwordless-authentication-using-auth0-cloudinary-and-nextjs-4b54</guid>
      <description>&lt;p&gt;Passwordless authentication is an authentication method that allows users to log in without remembering a password. Instead, it requires users to enter public identifiers like username, phone number, email e.t.c and receive a one-time code or link, which they can then use to log in.&lt;/p&gt;

&lt;p&gt;In this post, we will discuss how to build a passwordless coupon generation app using &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt;, &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;, and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;. At the end of this tutorial, we would have learnt how to build a secure application using Auth0, Cloudinary and Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Source code&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You can find the source code of this project &lt;a href="https://github.com/Mr-Malomz/auth_pwdless"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The next steps in this post require JavaScript and React.js experience. Experience with Next.js isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We also need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://cloudinary.com/"&gt;Cloudinary account&lt;/a&gt; for file hosting. &lt;a href="https://cloudinary.com/users/register/free"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://auth0.com/"&gt;Auth0 account&lt;/a&gt; for authentication. &lt;a href="https://auth0.com/signup?place=header&amp;amp;type=button&amp;amp;text=sign%20up"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="http://codesandbox.com/"&gt;CodeSandbox&lt;/a&gt; account. &lt;a href="http://codesandbox.com/"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;We need to create a Next.js starter project by navigating to the desired directory and running the command below in our terminal&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app auth_pwdless &amp;amp;&amp;amp; cd auth_pwdless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a Next.js project called &lt;code&gt;auth_pwdless&lt;/code&gt; and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install cloudinary-react auth0-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cloudinary-react&lt;/code&gt; is a &lt;a href="https://github.com/cloudinary/cloudinary-react#readme"&gt;library&lt;/a&gt; that handles rendering of media files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth0-js&lt;/code&gt; is a &lt;a href="https://github.com/auth0/auth0.js#readme"&gt;library&lt;/a&gt; for managing client-side authentication.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setting-up-passwordless-functionality-on-auth0"&gt;
  &lt;/a&gt;
  Setting up Passwordless functionality on Auth0
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#creating-an-application"&gt;
  &lt;/a&gt;
  Creating an Application
&lt;/h2&gt;

&lt;p&gt;To get started, we need to log into our &lt;a href="https://auth0.com/auth/login"&gt;Auth0&lt;/a&gt; dashboard. Click on &lt;strong&gt;Applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-BYDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633445331548_Screenshot%2B2021-10-05%2Bat%2B15.44.55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-BYDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633445331548_Screenshot%2B2021-10-05%2Bat%2B15.44.55.png" alt="Auth0 Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the application page, click on the &lt;strong&gt;Create Application&lt;/strong&gt; button, input application name &lt;code&gt;auth_pwdless&lt;/code&gt; in our case, select &lt;strong&gt;Single Page Web Application&lt;/strong&gt; as the application type and &lt;strong&gt;Create&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuU8pZoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633741349305_Screenshot%2B2021-10-08%2Bat%2B20.35.14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuU8pZoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633741349305_Screenshot%2B2021-10-08%2Bat%2B20.35.14.png" alt="creating app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Settings&lt;/strong&gt; tab and copy the &lt;strong&gt;Domain&lt;/strong&gt; and &lt;strong&gt;Client ID&lt;/strong&gt;. They will come in handy when configuring Auth0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0AajyCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633742207801_Screenshot%2B2021-10-08%2Bat%2B20.00.25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0AajyCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633742207801_Screenshot%2B2021-10-08%2Bat%2B20.00.25.png" alt="app configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then scroll down to the &lt;strong&gt;Applications URIs&lt;/strong&gt; section and fill in the details below for &lt;strong&gt;Allowed Callback URLs, Allowed Logout URLs, Allowed Web Origins,&lt;/strong&gt; and &lt;strong&gt;Allowed Origins (CORS)&lt;/strong&gt; respectively. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; For security reasons, Auth0 does not allow the use of URLs like &lt;code&gt;http://localhost:3000/&lt;/code&gt; and &lt;code&gt;http://127.0.0.1:3000/&lt;/code&gt;. We will be using the custom URL CodeSandbox provides. Auth0 also supports custom domains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Allowed Callback URLs

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;https://ueofp.sse.codesandbox.io/coupon&lt;/code&gt;. The &lt;code&gt;coupon&lt;/code&gt; at the end of this URL represents the page in our application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allowed Logout URLs, Allowed Web Origins, and Allowed Origins (CORS)

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;https://ueofp.sse.codesandbox.io/&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KNoF3XS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633743206535_Screenshot%2B2021-10-09%2Bat%2B02.33.14.png" alt="URI"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then scroll down to the bottom of the page and click on the &lt;strong&gt;Save Changes&lt;/strong&gt; button.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-passwordless"&gt;
  &lt;/a&gt;
  Setting up Passwordless
&lt;/h2&gt;

&lt;p&gt;With the application configured, click on the &lt;strong&gt;Authentication&lt;/strong&gt; and select &lt;strong&gt;Passwordless&lt;/strong&gt;.&lt;br&gt;
Then select &lt;strong&gt;Email&lt;/strong&gt; authentication type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWHwv2yF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633743842260_Screenshot%2B2021-10-08%2Bat%2B19.55.39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWHwv2yF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633743842260_Screenshot%2B2021-10-08%2Bat%2B19.55.39.png" alt="auth method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, edit the &lt;strong&gt;From Field&lt;/strong&gt;, &lt;strong&gt;Subject Field&lt;/strong&gt; and &lt;strong&gt;Save&lt;/strong&gt;. Auth0 also support custom settings like the email template format, OTP validity period, e.t.c.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMPcFJp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633743886656_Screenshot%2B2021-10-08%2Bat%2B20.03.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMPcFJp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633743886656_Screenshot%2B2021-10-08%2Bat%2B20.03.15.png" alt="configure OTP Email"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, connect the &lt;code&gt;auth_pwdless&lt;/code&gt; app we created earlier and &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cCCuD05N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633744165149_Screenshot%2B2021-10-08%2Bat%2B20.03.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cCCuD05N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633744165149_Screenshot%2B2021-10-08%2Bat%2B20.03.38.png" alt="Connecting app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can test the application by clicking on the &lt;strong&gt;Try&lt;/strong&gt; button and then check our mail for the one-time-password(OTP).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ik6SB2eS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633744300199_Screenshot%2B2021-10-08%2Bat%2B20.04.46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ik6SB2eS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633744300199_Screenshot%2B2021-10-08%2Bat%2B20.04.46.png" alt="Try Passwordless"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#integrating-passwordless-with-auth0"&gt;
  &lt;/a&gt;
  Integrating Passwordless with Auth0
&lt;/h1&gt;

&lt;p&gt;First, we can leverage Next.js &lt;a href="https://github.com/css-modules/css-module"&gt;CSS Module&lt;/a&gt; support to style our page by replacing the content in &lt;code&gt;Home.module.css&lt;/code&gt; in the &lt;code&gt;styles&lt;/code&gt; folder with the gist below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;With that done, we need to create an helper function to help us instantiate Auth0. Create a a &lt;code&gt;config&lt;/code&gt; folder in the project root directory and, in the folder, create an &lt;code&gt;auth.js&lt;/code&gt; file and add the code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WebAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auth0-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;clientID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR_CLIEND_ID&lt;/span&gt; &lt;span class="nx"&gt;HERE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;DOMAIN&lt;/span&gt; &lt;span class="nx"&gt;HERE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;redirectUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://ueofp.sse.codesandbox.io/coupon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;//replace with your codesandbox url&lt;/span&gt;
      &lt;span class="na"&gt;responseType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;webAuth&lt;/code&gt; variable creates an instance of the &lt;code&gt;WebAuth&lt;/code&gt; class and configures it with &lt;code&gt;clientID&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;redirectUri&lt;/code&gt; and &lt;code&gt;responseType&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-login"&gt;
  &lt;/a&gt;
  Setting up Login
&lt;/h2&gt;

&lt;p&gt;Next, we need to modify &lt;code&gt;index.js&lt;/code&gt; file in the &lt;code&gt;pages&lt;/code&gt;  folder by importing the &lt;code&gt;webAuth&lt;/code&gt; variable to create &lt;code&gt;handleAuth&lt;/code&gt; and &lt;code&gt;handleVerifyToken&lt;/code&gt; functions to send OTP to specified email and verify the OTP.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/dist/client/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../config/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;otp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOtp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;emailError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;otpError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;webAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordlessStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;emailError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleVerifyToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;webAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordlessLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;verificationCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;otp&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;otpError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/coupon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* remaining JSX comes here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import required dependencies&lt;/li&gt;
&lt;li&gt;Create states to manage email, OTP, errors and success.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;handleAuth&lt;/code&gt; configures how the OTP will be sent(email), the type of OTP to be sent(code) and the email to which the OTP will be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;handleVerifyToken&lt;/code&gt; configures how the OTP will be sent(email), the user's email to which the OTP is delivered, and the code sent to the user. The function also routes the user to the &lt;code&gt;coupon&lt;/code&gt; page if the OTP is valid. We will create this page shortly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we need to include markups to conditionally display forms to request for OTP and  verify OTP as shown below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//imports here&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//states here&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//send token code here&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleVerifyToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//verify token code here&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleAuth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;enter email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;required&lt;/span&gt;
              &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;Coupon&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emailError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;sending&lt;/span&gt; &lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleVerifyToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;otp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOtp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;required&lt;/span&gt;
              &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Verify&lt;/span&gt; &lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;otpError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;validating&lt;/span&gt; &lt;span class="nx"&gt;OTP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete index.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-coupon-page"&gt;
  &lt;/a&gt;
  Setting up the coupon page
&lt;/h2&gt;

&lt;p&gt;With the authentication setup, we need to create a &lt;code&gt;coupon.js&lt;/code&gt; file inside the &lt;code&gt;pages&lt;/code&gt; folder, and in this file, add the code snippet below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CloudinaryContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Transformation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cloudinary-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Coupon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Congratulations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="err"&gt;🎉&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Coupon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;67646676&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;6746&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;74664&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CloudinaryContext&lt;/span&gt; &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dtgbzmpca&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;publicId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;v1633726853/tamanna-rumee-rOBRka7Q12U-unsplash.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transformation&lt;/span&gt;
                &lt;span class="nx"&gt;crop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;dpr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;responsive_placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Image&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CloudinaryContext&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;Coupon&lt;/code&gt; page uses the &lt;code&gt;Math&lt;/code&gt; object to generate random numbers as coupons and &lt;code&gt;cloudinary-react&lt;/code&gt; to optimize and transform a congratulatory sample image.&lt;/p&gt;

&lt;p&gt;Finally, we need to protect our page using Auth0 as we want only users with OTP to access the coupon.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//remaining import comes here&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//add&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../config/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//add&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/dist/client/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//add&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Coupon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;webAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseHash&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;authResult&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;webAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// get user info&lt;/span&gt;
              &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Congratulations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* modify this to show email*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="err"&gt;🎉&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* remaining JSX comes here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The updated snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import required dependencies.&lt;/li&gt;
&lt;li&gt;Creates state to manage authenticated users.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;webAuth&lt;/code&gt; variable created earlier to parse URL hash fragment sent by Auth0 when redirecting to the &lt;code&gt;Coupon&lt;/code&gt; page and get the &lt;code&gt;user&lt;/code&gt;’s information. Then, we use the &lt;code&gt;user&lt;/code&gt; information to render the &lt;code&gt;Coupon&lt;/code&gt; page when valid or redirect to the &lt;code&gt;Home&lt;/code&gt; page when it is not.&lt;/li&gt;
&lt;li&gt;Display user’s email.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complete coupon.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Finally, we can test our application by requesting OTP, checking specified email, verifying OTP and getting a coupon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tIjc01TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633775830692_Screenshot%2B2021-10-09%2Bat%2B11.31.56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tIjc01TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633775830692_Screenshot%2B2021-10-09%2Bat%2B11.31.56.png" alt="send OTP"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpPMFU9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633775830702_Screenshot%2B2021-10-09%2Bat%2B11.32.53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpPMFU9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633775830702_Screenshot%2B2021-10-09%2Bat%2B11.32.53.png" alt="Verify OTP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGUwny1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633775860533_Screenshot%2B2021-10-09%2Bat%2B11.33.47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGUwny1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_92805FED2D981D79B86FF452AD4C2AB3F80EA63850F0C154653F5111C1E5C74F_1633775860533_Screenshot%2B2021-10-09%2Bat%2B11.33.47.png" alt="getting coupon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to build a secure passwordless coupon generation app using Cloudinary, Auth0, and Next.js.&lt;/p&gt;

&lt;p&gt;You may find these resources useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/libraries/auth0js#passwordless-login"&gt;Auth0 passwordless authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/auth0/auth0.js"&gt;Auth0.js library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;Cloudinary react library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon.&lt;/p&gt;

</description>
      <category>cloudinary</category>
      <category>hackjamstack</category>
      <category>auth0</category>
      <category>jamstack</category>
    </item>
    <item>
      <title> Problem 15 puzzle game</title>
      <author>Kirill Live</author>
      <pubDate>Sun, 17 Oct 2021 09:34:51 +0000</pubDate>
      <link>https://dev.to/kirilllive/15-puzzle-is-a-tricky-game-59k0</link>
      <guid>https://dev.to/kirilllive/15-puzzle-is-a-tricky-game-59k0</guid>
      <description>&lt;p&gt;I had nothing to do, I decided to test my skills and tried to create a 15 puzzle game for the browser using only JavaScript and CSS. During development, I did not read how this could be implemented, and did not use the Internet. In the end, everything went smoothly, as it seemed to me, but I often noticed that the last two puzzle squares could not be placed in the right places. At first it seemed to me that something was wrong with me, but the situation where the puzzle could not be completed was stable, and I began to figure out what went wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kirilllive.github.io/Fifteen_puzzle_maker/example.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0QgVto5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozdtnksqlgikabtiedou.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After reading several articles on the mathematical analysis of this game, I learned that exactly half of all possible combinations of the initial position of the squares (20.922.789.888.000 (= 16!)) Will lead to the impossibility of solving the puzzle. Elsewhere I found out that this problem occurs if swap squares 14 and 15.&lt;br&gt;
In such a situation, in my game, I used mixing squares, just replacing the random block with another random block, it was a very wrong decision. So I decided to replace this part of the game with a natural shuffle, the program just randomly shifted an empty block vertically or horizontally by one square. This option eliminated combinations of blocks that would get in the way of solving the puzzle.&lt;/p&gt;

&lt;p&gt;About ten years ago I was making a similar game for Android, but then I did not face this problem, because the terms of reference said: "the movement of the squares when mixing should be visible." And then I remembered about one more item of the same task "The ability to move several blocks towards an empty cell." Oddly enough, when I tackled the previous problem, almost all versions of this game that I have seen did not use this feature. Then I decided to add the ability to move several blocks to my game, and the game became more interesting, the puzzle began to be assembled faster and new tactical possibilities appeared, but, most importantly, it became easier to collect large puzzles with 100 chips or more.&lt;/p&gt;

&lt;p&gt;This is how a simple game became an interesting experience for me with new discoveries, despite the fact that I had done it before, with the only difference that at first I did the game on a task, and now for the sake of testing my skills.&lt;/p&gt;

&lt;p&gt;But I didn't stop there and made an editor for this game "&lt;a href="https://github.com/Kirilllive/Fifteen_puzzle_maker"&gt;Fifteen Sliding Puzzle maker&lt;/a&gt;". You just need to add your own image and the editor will automatically split it into proportional blocks and adapt the CSS style. You can export the result to an HTML file for integration into your project, or simply use FrameWork "fifteen_puzzle.js", which can be easily modified to suit your needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kirilllive.github.io/Fifteen_puzzle_maker/"&gt;Editor&lt;/a&gt;  |  &lt;a href="https://kirilllive.github.io/Fifteen_puzzle_maker/example.html"&gt;Demo&lt;/a&gt;  |  &lt;a href="https://kirill-live.itch.io/fifteen-puzzle"&gt;itch.io&lt;/a&gt;  |  &lt;a href="https://github.com/Kirilllive/Fifteen_puzzle_maker"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kirilllive.github.io/Fifteen_puzzle_maker/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnkoHGpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1l3mbnl3laxd02b8frg.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>gamedev</category>
      <category>html</category>
    </item>
    <item>
      <title>What is the correct HTML tag for the largest heading?</title>
      <author>Coder</author>
      <pubDate>Sun, 17 Oct 2021 08:46:07 +0000</pubDate>
      <link>https://dev.to/codehacker/what-is-the-correct-html-tag-for-the-largest-heading-2l71</link>
      <guid>https://dev.to/codehacker/what-is-the-correct-html-tag-for-the-largest-heading-2l71</guid>
      <description>&lt;p&gt;As  you have seen in the title I will tell you What is the correct HTML tag for the largest heading or you can say which is the largest heading tag in HTML I will tell you answer to the so follow up with me till the end of this article.&lt;/p&gt;
&lt;p&gt;If you are complete beginner to HTML then you need to know that there are six heading tags which you can use. You can see below the 6 heading tags.&lt;/p&gt;
&lt;pre class="highlight-height language-html"&gt;&lt;code&gt;&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Heading 1&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Heading 2&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Heading 3&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Heading 4&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h5&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Heading 5&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h5&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h6&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Heading 6&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h6&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;As you can see above each heading tag have a number from 1 to 6 now which one is the largest heading tag you think. You may say that &amp;lt;h6&amp;gt; looks like the largest heading because of higher number but it is not.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The correct HTML tag for the largest heading is &amp;lt;h1&amp;gt; tag&lt;/span&gt; as the number goes up the heading tags become smaller in size. For example &amp;lt;h2&amp;gt; will be little smaller then &amp;lt;h1&amp;gt; then same with the others. &amp;lt;h6&amp;gt; is the smallest heading tag in HTML. &lt;/p&gt;
&lt;p&gt;Below is the output of the above code which I have shown&lt;/p&gt;
&lt;img alt="heading tags structure" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FwKBie4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://coderzway.com/wp-content/uploads/2021/09/Screenshot-267-e1630731106763-1024x535.png"&gt;&lt;p&gt;As you can see from the above image the words written inside the h1 tag is the largest compared to others so you found your answer to this question which &lt;span&gt;h1&lt;/span&gt; is the largest heading tag in HTML. &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Want more solutions and guides like this then join our coding community on Telegram to get latest blog updates and more – &lt;/span&gt;&lt;a href="https://t.me/codelivly" rel="noopener"&gt;&lt;span&gt;Join Telegram channel&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>5 Cool HTML Tricks and Tips
</title>
      <author>keshavs759</author>
      <pubDate>Sun, 17 Oct 2021 07:46:31 +0000</pubDate>
      <link>https://dev.to/keshavs759/5-cool-html-tricks-and-tips-18ci</link>
      <guid>https://dev.to/keshavs759/5-cool-html-tricks-and-tips-18ci</guid>
      <description>&lt;br&gt;
&lt;br&gt;


&lt;p&gt;In this article, we'll go through some of the Cool HTML Tricks and Tips that will make your development more pleasurable. As developers, we all want to present the user with appealing content that is also valuable. All of the tricks are explained in detail below, along with an example.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;h3&gt;&lt;strong&gt;Tool Tip:&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can make a simple tool-tip using the &lt;strong&gt;“span”&lt;/strong&gt; tag. Tool-tips are the piece of text that is displayed when you hover over some elements in your webpage.&lt;/p&gt;

&lt;p&gt;Following is an example to create a tooltip.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;span title=" Iam tool tip :)"&amp;gt;Hover over me and wait to see Tool-tip&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol start="2"&gt;
&lt;li&gt;
&lt;h3&gt;&lt;strong&gt;Color Picker:&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can make your own color picker using a single line of code in HTML. The trick is you place the &lt;strong&gt;“type”&lt;/strong&gt; property with the value of &lt;strong&gt;“color”&lt;/strong&gt; to act the input field as a color picker. &lt;/p&gt;

&lt;p&gt;Following is an example to create a color picker.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="color" id="color" name="color" onchange="colorValue(this.value)" value="#e66465"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also Read:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/html-tags-cheat-sheet-pdf-included"&gt;HTML tags cheat sheet [pdf included]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-sticky-nav-bar-using-html-and-css"&gt;How to make Sticky Nav Bar Using HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-show-password-button-using-javascript"&gt;How To Make Show Password Button Using Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ol start="3"&gt;
&lt;li&gt;
&lt;h3&gt;&lt;strong&gt;Clickable Image Maps:&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can make any specified clickable area inside an image using the &lt;strong&gt;“map” &lt;/strong&gt;tag in HTML. The &lt;strong&gt;“map” &lt;/strong&gt;contains a number of &lt;strong&gt;“area” &lt;/strong&gt;elements that define the clickable areas in the image map.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="https://medplus.co.nz/media/thumbnails/blog/entry/2020/05/15/Green_and_red_800__600_horizontal.png.0x300_q90_crop-smart_upscale.png" alt="Workplace" usemap="#workmap" width="400" height="379"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;map name="workmap"&amp;gt;&lt;br&gt;
  &amp;lt;area shape="rect" coords="0,0,350,110" alt="Green" href="https://en.wikipedia.org/wiki/Green"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;area shape="rect" coords="0,110,350,220" alt="Cup of coffee" href="https://en.wikipedia.org/wiki/Red"&amp;gt;&lt;br&gt;
&amp;lt;/map&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol start="4"&gt;
&lt;li&gt;
&lt;h3&gt;&lt;strong&gt;Editable Contents:&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In HTML you can make any element editable. All you have to do is set the &lt;strong&gt;“contenteditable”&lt;/strong&gt; attribute to &lt;strong&gt;“true”&lt;/strong&gt; on nearly any HTML element to make it editable.&lt;/p&gt;

&lt;p&gt;Here's a simple example that creates a &lt;strong&gt;“div”&lt;/strong&gt; element whose contents the user can edit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div contenteditable="true"&amp;gt;&lt;br&gt;
  This peice of text can be edited by the user.&lt;br&gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol start="5"&gt;
&lt;li&gt;
&lt;h3&gt;&lt;strong&gt;Hidden Inputs:&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A hidden input field lets web developers include data that cannot be seen or modified by users when a form is submitted. For example, a unique security token or the ID of the content that is presently being ordered or modified. In the displayed page, hidden inputs are completely invisible, and there is no method to make them visible in the content.&lt;/p&gt;

&lt;p&gt;Note: While the value is not visible to the user in the content of the page, it may be viewed (and altered) using any browser's developer tools or "View Source" capabilities. So don’t use hidden inputs as means of security.&lt;/p&gt;

&lt;p&gt;Following is the example to create hidden Inputs,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt; When the form is submitted the value Cust-55214 is send in the name Id&amp;lt;/p&amp;gt;  &lt;br&gt;
&amp;lt;input type="hidden" id="Id" name="Id" value="Cust-55214"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Document Object Model🔥</title>
      <author>Sudharshan S</author>
      <pubDate>Sun, 17 Oct 2021 07:22:37 +0000</pubDate>
      <link>https://dev.to/sudharshan24/document-object-model-4420</link>
      <guid>https://dev.to/sudharshan24/document-object-model-4420</guid>
      <description>&lt;p&gt;👉 DOM stands for Document Object Model.&lt;/p&gt;

&lt;p&gt;👉 DOM is 'World Wide Web Consortium' (W3C) standard.&lt;/p&gt;

&lt;p&gt;👉 DOM is a programming interface for HTML documents.&lt;/p&gt;

&lt;p&gt;👉 When browser try to render a HTML document, it creates an &lt;br&gt;
   object based on the HTML document called DOM. &lt;/p&gt;

&lt;p&gt;👉 By using DOM, we can manipulate or change various elements &lt;br&gt;
   inside the HTML document.&lt;/p&gt;

</description>
      <category>code</category>
      <category>javascript</category>
      <category>dom</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn With Me:Apple's Swift Literals</title>
      <author>Ansh Gupta</author>
      <pubDate>Sun, 17 Oct 2021 07:09:49 +0000</pubDate>
      <link>https://dev.to/thisisanshgupta/learn-with-meapples-swift-literals-2ijd</link>
      <guid>https://dev.to/thisisanshgupta/learn-with-meapples-swift-literals-2ijd</guid>
      <description>&lt;p&gt;Hello guys and Welcome to &lt;em&gt;Learn With Me: Apple's Swift&lt;/em&gt;.In previous tutorial you learned about Variables and Constants and today we are going to learn about Literals .So without wasting time let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#literals"&gt;
  &lt;/a&gt;
  Literals
&lt;/h1&gt;

&lt;p&gt;Literals are representations of fixed values in a program. They can be numbers, characters, or strings, etc. For example, "Hello, World!", 12, 23.0, "C", etc.&lt;br&gt;
Swift supports 4 types of &lt;br&gt;
literals,that are: &lt;br&gt;
•&lt;strong&gt;Integer Literals&lt;/strong&gt;&lt;br&gt;
•&lt;strong&gt;Floating-point Literals&lt;/strong&gt;&lt;br&gt;
•&lt;strong&gt;Boolean Literals&lt;/strong&gt;&lt;br&gt;
•&lt;strong&gt;String and Character Literals&lt;/strong&gt;.&lt;br&gt;
So let's study about them in brief.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#integer-literals"&gt;
  &lt;/a&gt;
  Integer Literals
&lt;/h1&gt;

&lt;p&gt;Integer literals are those that do not have a fractional or an exponential part.&lt;/p&gt;

&lt;p&gt;There are four types of integer literals in Swift:&lt;br&gt;
•A decimal number, with no prefix.&lt;br&gt;
•A binary number, with a 0b prefix.&lt;br&gt;
•An octal number, with a 0o prefix.&lt;br&gt;
•A hexadecimal number, with a 0x prefix.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#floatingpoint-literals"&gt;
  &lt;/a&gt;
  Floating-Point Literals
&lt;/h1&gt;

&lt;p&gt;Floating-point literals are numeric literals that have floating decimal points or they are in fraction. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;7.008&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,&lt;strong&gt;7.008&lt;/strong&gt; is a floating-point literal assigned to the &lt;strong&gt;radius&lt;/strong&gt; constant.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boolean-literals"&gt;
  &lt;/a&gt;
  Boolean Literals
&lt;/h1&gt;

&lt;p&gt;There are only two Boolean Literals:&lt;strong&gt;true&lt;/strong&gt; and &lt;strong&gt;false&lt;/strong&gt;.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#character-literals"&gt;
  &lt;/a&gt;
  Character Literals
&lt;/h1&gt;

&lt;p&gt;Character literals are Unicode characters enclosed in double quotes.For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"S"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#string-literals"&gt;
  &lt;/a&gt;
  String Literals
&lt;/h1&gt;

&lt;p&gt;String literals are sequences of characters enclosed in double quotes.For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Jonathan"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading.I hope you will enjoy learning it.If you have any issues then let me know in the discussions.And in next part we are going to learn about Data Types in Swift.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>ios</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tales of the Autistic Developer - Loud Loud World</title>
      <author>Brandon Weaver</author>
      <pubDate>Sun, 17 Oct 2021 06:14:37 +0000</pubDate>
      <link>https://dev.to/baweaver/tales-of-the-autistic-developer-loud-loud-world-122c</link>
      <guid>https://dev.to/baweaver/tales-of-the-autistic-developer-loud-loud-world-122c</guid>
      <description>&lt;p&gt;For those who don't know me, I'm autistic. I've been a developer for the better part of a decade.&lt;/p&gt;

&lt;p&gt;I didn't find out I was ASD until 19, and didn't reconcile with that until years later. These posts will be a combination of advice I've given to those who are like me, as well as a letter of sorts to my past self who could have used a lot of it.&lt;/p&gt;

&lt;p&gt;I write these posts in the hopes that someone like me will find value in knowing a very simple and very important truth about ASD:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You are not alone, and you are loved.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loud-loud-world"&gt;
  &lt;/a&gt;
  Loud Loud World
&lt;/h2&gt;

&lt;p&gt;For autistic people the world is so very loud, and I fear that this has led to a very common misunderstanding of our experience.&lt;/p&gt;

&lt;p&gt;It's not that we lack the capacity for things like listening, eating, empathy, or so many other skills as much as we're in a near-constant state of being overwhelmed by everything around us.&lt;/p&gt;

&lt;p&gt;This post is less about solutions, and more about my experience as a disability. So many would like to frame what I have as a "superpower" but deny the handicaps I face, so I'd like to take this time to write on the struggles I face on a daily basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-can-hear-everything"&gt;
  &lt;/a&gt;
  I Can Hear Everything
&lt;/h3&gt;

&lt;p&gt;A common complaint of myself as a child is I was never paying attention, would frequently ask folks to repeat things, and in general just not "hear".&lt;/p&gt;

&lt;p&gt;Ironically I was also mocked for having near supernatural hearing abilities. If my name was mentioned or any other trigger word for a hobby I would hear it, even clear across a room.&lt;/p&gt;

&lt;p&gt;The misconceptions of the first section are a direct result of the second. It's not that I couldn't hear, but that I heard too much.&lt;/p&gt;

&lt;p&gt;My brain is constantly on, and I experience everything at once. I can't turn it off, I don't know how and there aren't any great solutions I've found beyond noise cancelling headphones and moving out of noisy environments.&lt;/p&gt;

&lt;p&gt;Heck, I can hear electricity in the walls. Did you know it makes noise, because I certainly do. A short in an electronic device will scream at me, and with it my focus goes right out a window.&lt;/p&gt;

&lt;p&gt;I'm most certainly not ignoring you when you're talking, in fact I'm reminding myself to pay attention in my head on repeat, but if a loud noise or something troubling happens my attention is gone. You could talk about my favorite hobbies and I'd still twitch at anything around me happening, try as I might to stop it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smell-everything"&gt;
  &lt;/a&gt;
  Smell Everything
&lt;/h3&gt;

&lt;p&gt;In elementary school I was quite viciously mocked for smelling things, including by a teacher who egged it on. A lot of trauma in me realizing who I was could be traced to teachers like this, but back to the point I could smell anything around.&lt;/p&gt;

&lt;p&gt;If lunch was being prepared I could tell you exactly what it was (if I'd experienced it before), what burned, what flavor the gum under the table probably was, and whether or not my classmates had just been to gym class.&lt;/p&gt;

&lt;p&gt;Just in the past year I'd smelled rain and heard a dropping that led me to find a small leak in one of the doors of my home.&lt;/p&gt;

&lt;p&gt;It wasn't unusual for this to make me slightly sick, as scent is very closely tied to taste.&lt;/p&gt;

&lt;p&gt;Any more I've taken to a habit of wearing a certain amount of cologne as a centering scent to try and distract me from doing this. Most of my coping follows a similar strategy of dulling my senses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taste-overload"&gt;
  &lt;/a&gt;
  Taste Overload
&lt;/h3&gt;

&lt;p&gt;Some would call me a picky eater, they're probably right. If something is unfamiliar to me it's overwhelming, and certain textures and combinations for some reason will make me physically sick.&lt;/p&gt;

&lt;p&gt;The annoying part is that I don't always know what those textures or combinations might be.&lt;/p&gt;

&lt;p&gt;It's been a perpetual fear of mine that I might offend someone by not being able to eat their cooking, so many times I'll try anyways and end up making myself sick for a few days afterwards.&lt;/p&gt;

&lt;p&gt;Back in college there was an eating competition where they gave us tacos with lettuce. Those who know me would know that  that's one thing which will absolutely make me visibly sick within seconds, so I had to drop out.&lt;/p&gt;

&lt;p&gt;This certainly does not make it easy to find a balanced diet, and trust me I do try. It's also why I order the exact same thing every time I go to the same restaurant. I know it's safe, and safe matters a lot to me, which is how I cope.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-stimulus"&gt;
  &lt;/a&gt;
  Visual Stimulus
&lt;/h3&gt;

&lt;p&gt;Now I'm not at the point of epilepsy, but flashing gifs and reactions will wreck my concentration. I'm very happy that Slack added an option to turn them off or I'd never get anything done.&lt;/p&gt;

&lt;p&gt;My vision isn't perfect, I wear glasses, but any visual stimulus around me sends my head into full alert mode. It's also why you'll catch me closing one eye outside, or closing both if I'm thinking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#touch-and-feel"&gt;
  &lt;/a&gt;
  Touch and Feel
&lt;/h3&gt;

&lt;p&gt;There are even fabrics and various textures that if I touch or have to keep on I get very uncomfortable with. Fabric tags, wools (especially socks), seams, and other things some folks can ignore will drive me up a wall.&lt;/p&gt;

&lt;p&gt;If there's so much as a small pebble that gets into my shoe it's going to annoy me the entire day until I get it out, including ones embedded in the bottom of my sole.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emotional-overload"&gt;
  &lt;/a&gt;
  Emotional Overload
&lt;/h3&gt;

&lt;p&gt;People have called me a robot for years, slightly monotone voice, and a seeming absence of cognizance of emotions. Sure, there's some truth to that, I don't social well all the time and I had to learn those rules the hard way.&lt;/p&gt;

&lt;p&gt;What isn't true, however, is that I don't feel. Quite the contrary.&lt;/p&gt;

&lt;p&gt;I have to turn off news, social media, and stop talking to people because once I hear problems I become deeply invested in fixing them. My mind is hard-wired like that, I want to help, and I'm far too easy to bait into things.&lt;/p&gt;

&lt;p&gt;As a result I've had to become exceptionally cautious in how much I talk to others outside of close groups. The real annoyance is I can feel their pain, but I have no idea how to respond appropriately, so rather than try I frequently have to wait and internalize that pain which is not healthy.&lt;/p&gt;

&lt;p&gt;I hate that I cannot fix everything, so instead I try and focus on what I know I can have an impact on and direct my attentions there. Doesn't help that sick feeling though knowing how much more pain there is in the world.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#temporal-hijinks"&gt;
  &lt;/a&gt;
  Temporal Hijinks
&lt;/h3&gt;

&lt;p&gt;I have no concept of time. People at work would disagree with me on that and comment that I show up early to things, know exactly when things are happening, and am generally on top of it.&lt;/p&gt;

&lt;p&gt;That's only because I have alarms for everything, calendar reminders, sticky notes, and entire systems meant to keep me on track. I adhere to strict schedules, and should I break those schedules I'll burn out hard and lose my sense of self for at least a few weeks while I recover and recalibrate.&lt;/p&gt;

&lt;p&gt;It's a similar reason to why I despise phone calls and synchronous events which require presence, as they'll ruin the entire rest of my day for getting anything done.&lt;/p&gt;

&lt;p&gt;The irony, as it tends to be, is that all of these systems got me promoted into roles where it's my job to be on top of such things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-migraines"&gt;
  &lt;/a&gt;
  The Migraines
&lt;/h3&gt;

&lt;p&gt;When the world is too much, when anxiety gets to me, and when I just can't turn it off my body will eventually take drastic measures and start me into a series of migraines that will have me laid up in bed for at least a full day, often times two to three days.&lt;/p&gt;

&lt;p&gt;As I get close to that point I will be very short tempered and intentional with my time, trying to jettison anything and everything that's not completely relevant to tasks at hand that are required to get done. I start going into lockdown mode to protect myself, and if I miss I'm going to be out of it for potentially multiple days.&lt;/p&gt;

&lt;p&gt;If I keep ignoring it? Burnout is a very real threat for me, and one that I have to be exceptionally cautious of. Some would say enjoying what you do is a cure, but if anything that's the curse which has me constantly flirting with the line where I'm not coming back for a good couple of months beyond rote and repetition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;If there's one thing I want people to get out of this, it's that I'm a whole human. You don't get all the benefits of autism without the drawbacks, and the drawbacks make you no less valid of love and acceptance.&lt;/p&gt;

&lt;p&gt;Over the years I've had great success in the industry, but many would erase my disability, and in doing such they would discriminate against those with similar issues. To only write of the good, and never the bad, would be dishonest.&lt;/p&gt;

&lt;p&gt;So I wrap up today by saying that I'm me, flaws and all. It's a loud loud world out there, and we do our best to participate in it.&lt;/p&gt;

</description>
      <category>autism</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>React basics: explaining the useContext hook</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 17 Oct 2021 06:00:39 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/react-basics-explaining-the-usecontext-hook-1dgd</link>
      <guid>https://dev.to/dailydevtips1/react-basics-explaining-the-usecontext-hook-1dgd</guid>
      <description>&lt;p&gt;Sometimes we have data that we need to access in almost all parts of our components.&lt;/p&gt;

&lt;p&gt;It will become a hassle to pass them down to each component, exactly where context comes in.&lt;/p&gt;

&lt;p&gt;In this example, I'll use a specific theme for a website.&lt;br&gt;
Our website has a blue and a red theme, which the user can toggle based on their preferences.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-context"&gt;
  &lt;/a&gt;
  Creating a context
&lt;/h2&gt;

&lt;p&gt;Before we can do anything, we need to create a new context to wrap around our application.&lt;/p&gt;

&lt;p&gt;So, let's look at how that works, create a new file called &lt;code&gt;ThemeContext.js&lt;/code&gt; and start by adding the imports we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's define our themes, this is still pretty hardcoded, but it will work fine for this demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have a blue and a red theme.&lt;/p&gt;

&lt;p&gt;The first thing we need to do now is create an actual context with a default value.&lt;br&gt;
In my case, I want the red theme to be the blue theme to be the default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we can export a &lt;code&gt;ThemeProvider&lt;/code&gt; which helps us wrap this theme around our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This provider can now be wrapped around our app to apply the context. Let's head over to our &lt;code&gt;App.js&lt;/code&gt; file and do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;our&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us access to anything in the theme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-context"&gt;
  &lt;/a&gt;
  Using the context
&lt;/h2&gt;

&lt;p&gt;Pretty cool, but how do we now use this context?&lt;/p&gt;

&lt;p&gt;Create a sample component that will act as our paint. This component will take the context and display the correct color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      I'm the paint
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component will render a simple div, with colors based on whatever our theme is.&lt;/p&gt;

&lt;p&gt;Head back to your &lt;code&gt;App&lt;/code&gt; and include this component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Paint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see the block in your browser like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjOeGmF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673041261/hqoFz5uOE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjOeGmF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673041261/hqoFz5uOE.png" alt="Basic context painted component in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we now change our &lt;code&gt;ThemeContext&lt;/code&gt; to be red, we should see a red box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qVIzkxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673125222/Rt1pNhzK2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qVIzkxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673125222/Rt1pNhzK2.png" alt="Changed context provider in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-toggle"&gt;
  &lt;/a&gt;
  Adding a toggle
&lt;/h2&gt;

&lt;p&gt;This is pretty exciting stuff already, but it becomes super powerful by adding a dynamic switch for our theme.&lt;/p&gt;

&lt;p&gt;Let's say we want to render two buttons. Each button will set a different theme.&lt;/p&gt;

&lt;p&gt;To do this, we first have to use &lt;a href="https://daily-dev-tips.com/posts/react-basics-explaining-the-usestate-hook/"&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/a&gt; in our &lt;code&gt;ThemeContext&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeProviderData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;themeProviderData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I use the &lt;code&gt;useState&lt;/code&gt; function to now set a basic theme (blue). &lt;br&gt;
Then I create a primary object containing the current theme data and pass the &lt;code&gt;setState&lt;/code&gt; function to modify the state variable.&lt;br&gt;
Then we pass this object as the value of our theme.&lt;/p&gt;

&lt;p&gt;One thing to note here is that we changed from passing a single variable to passing an object.&lt;/p&gt;

&lt;p&gt;So head over to your &lt;code&gt;Paint&lt;/code&gt; component and change the import like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can go ahead and create a new component called &lt;code&gt;Toggle&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;RED&lt;/span&gt; &lt;span class="nx"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BLUE&lt;/span&gt; &lt;span class="nx"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this function extracts the &lt;code&gt;setTheme&lt;/code&gt; function from our context.&lt;br&gt;
It then renders two buttons and appends this function with a specific value.&lt;/p&gt;

&lt;p&gt;Go ahead and include this component in your &lt;code&gt;App&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it. We can now toggle between our two themes!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3__p9Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673605426/v-NLzBUhS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3__p9Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673605426/v-NLzBUhS.gif" alt="Switching context in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've also added this project on &lt;a href="https://github.com/rebelchris/react-basics/tree/context"&gt;GitHub&lt;/a&gt; if you want to see more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>API Gateway</title>
      <author>Difan Chen</author>
      <pubDate>Sun, 17 Oct 2021 05:49:56 +0000</pubDate>
      <link>https://dev.to/dfchen6/api-gateway-basics-56jk</link>
      <guid>https://dev.to/dfchen6/api-gateway-basics-56jk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-api-gateway"&gt;
  &lt;/a&gt;
  What is API Gateway
&lt;/h2&gt;

&lt;p&gt;An API Gateway is an API management tool that sits between a client and a collection of backend services. An API gateway acts as a reverse proxy to accept all application programming interface (API) calls, aggregate the various services required to fulfill them, and return the appropriate result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-using-it"&gt;
  &lt;/a&gt;
  Why using it
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Abstraction level for the clients. With microservice architecture, if you add some API services and retire others, clients can still find all your services in the same place.&lt;/li&gt;
&lt;li&gt;Protect your APIs from overuse and abuse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-public-clouds-offers"&gt;
  &lt;/a&gt;
  What public clouds offers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#amazon-api-gateway"&gt;
  &lt;/a&gt;
  &lt;a href="https://aws.amazon.com/api-gateway/"&gt;Amazon API Gateway&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkI6ZDyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/serverless/New-API-GW-Diagram.c9fc9835d2a9aa00ef90d0ddc4c6402a2536de0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkI6ZDyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/serverless/New-API-GW-Diagram.c9fc9835d2a9aa00ef90d0ddc4c6402a2536de0d.png" alt="Alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uisng Amazon API Gateway, you can create RESTful APIs and Websockets APIs. AWS provides benefits like monitoring (integrates with &lt;a href="https://aws.amazon.com/cloudwatch/"&gt;Amazon CloudWatch&lt;/a&gt;), authentication, authorization, throttling, etc. With an API Requests price as low as $0.90 per million requests at the highest tier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gcp-api-gateway"&gt;
  &lt;/a&gt;
  &lt;a href="https://cloud.google.com/api-gateway"&gt;GCP API Gateway&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;GCP provides API gateway service, which can create, secure and monitor APIs for Google Cloud serveless backends, including Cloud functions, Cloud Run and App Engine. Looks like the supported services behind the api gateway are still limited.&lt;/p&gt;

&lt;p&gt;The billing model is similar to AWS, which is charged by number of API calls. The price seems to be cheaper than AWS gateway though.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;API calls per month per billing account&lt;/th&gt;
&lt;th&gt;Cost per million API calls&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0-2M&lt;/td&gt;
&lt;td&gt;$0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2M-1B&lt;/td&gt;
&lt;td&gt;$3.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1B+&lt;/td&gt;
&lt;td&gt;$1.50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#open-source-solutions"&gt;
  &lt;/a&gt;
  Open source solutions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kong-gateway"&gt;
  &lt;/a&gt;
  &lt;a href="https://konghq.com/kong/"&gt;Kong Gateway&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Kong Gateway is the most popular open-source cloud-native API gateway built on top of a lightweight proxy. It is written in Lua running with the help of the Nginx.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tyk"&gt;
  &lt;/a&gt;
  &lt;a href="https://tyk.io/open-source-api-gateway/"&gt;Tyk&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tyk is an enterprise-ready open-source API gateway. You have an option to either go for self-hosted or managed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goku"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/eolinker/goku_lite"&gt;Goku&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Goku API Gateway is an umbrella project of EOLINK Inc. It is a Golang-based microservice gateway that enables high-performance dynamic routing, service orchestration, multi-tenancy management, API access control, etc.&lt;/p&gt;

</description>
      <category>systems</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Winning my first Hacktoberfest!</title>
      <author>SHOURYA GUPTA</author>
      <pubDate>Sun, 17 Oct 2021 05:43:45 +0000</pubDate>
      <link>https://dev.to/shouryabrahmastra/winning-my-first-hacktoberfest-3fba</link>
      <guid>https://dev.to/shouryabrahmastra/winning-my-first-hacktoberfest-3fba</guid>
      <description>&lt;p&gt;🎆Hello!! Everyone reading this.✨&lt;/p&gt;

&lt;p&gt;This is my first post on &lt;a href="https://dev.to/"&gt;dev&lt;/a&gt; &amp;amp; I'm so excited to tell my journey of my first Hacktoberfest Event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;It all started when I came across this event on the very 1st day of this October month when I came across a WhatsApp forward that enthusiastic coder and developers can contribute to a month long festival of contributing to the open source. Truly speaking the winning swag by contributing to Open-Source attracted me more than the contribution that I made.&lt;br&gt;
But still with no pre-knowledge of how to contribute to this open source world I just blindly jumped into this task and with the help of the web and YouTube and my persisting knowledge of DSA I some how learnt to create my first pull request. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-was-a-leap-of-new-era-for-my-coding-career-as-well-i-learnt-more-than-i-could-contribute-to-this-open-source-world"&gt;
  &lt;/a&gt;
  It was a leap of new era for my coding career as well; I learnt more than I could contribute to this open source world.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#main-event"&gt;
  &lt;/a&gt;
  Main Event
&lt;/h2&gt;

&lt;p&gt;My first PR to count towards the event was :&lt;br&gt;
&lt;a href="https://github.com/qwert-ji/the-c/pull/10"&gt;qwert-ji&lt;/a&gt; which was on 1st Oct.&lt;br&gt;
Seeing that already 1 out of 4 PR was already done, I was on a rampage to find more repos tagged with the &lt;code&gt;hacktoberfest&lt;/code&gt; labels to contribute to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;Here's the list of the PR's that I submitted, counted towards the event :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/STICMedicaps/Hacktoberfest/pull/20"&gt;STICMedicaps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/qwert-ji/the-c/pull/10"&gt;qwert-ji&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Astrodevil/Programming-Basics/pull/289"&gt;Astrodevil&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/AkshayNachappa/Hacktoberfest_2021/pull/33"&gt;AkshayNachappa&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ieeeiasvit/ProLang-IAS/pull/34"&gt;ieeeiasvit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/rohithmaddz/Programs/pull/8"&gt;rohithmaddz&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/guptaravi5400/hacktoberfest_2021/pull/15"&gt;guptaravi5400&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/throwaway-root/DataStructers/pull/62"&gt;throwaway-root&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/manish-virgat/Hacktoberfest-C-Program/pull/101"&gt;manish-virgat&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/basava1134/First-PR-Hacktoberfest/pull/29"&gt;basava1134&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/hctnm2/Open-Source-Enthusiast/pull/128"&gt;hctnm2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/JayanthSriram27/Hacktoberfest2k21/pull/40"&gt;JayanthSriram27&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you'll look at all the PR's I've made during this time, you'll notice that all of them are minor yet notable changes and these contributions meet the criteria for being counted towards the &lt;em&gt;hacktoberfest&lt;/em&gt; event.&lt;/p&gt;

&lt;p&gt;I'm starting to get the hang of it now by actually interacting with maintainers and other contributors. It's such a welcoming community who guide beginners with such patience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;As the minimum PRs required to win some swag, mine were only waiting for the review period of 14 days to complete today.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8G_ooJzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydpirltglggrfk8kyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8G_ooJzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydpirltglggrfk8kyk.png" alt="My Hacktoberfest page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time &lt;a href="https://hacktoberfestswaglist.com/#swag-list-2021"&gt;official event swag&lt;/a&gt; include:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2n2O80g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8wucw2a6x3iwqxo093i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2n2O80g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8wucw2a6x3iwqxo093i.png" alt="Hacktoberfest T-shirt"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;T-Shirts&lt;br&gt;
-&amp;gt;Stickers&lt;br&gt;
-&amp;gt;&lt;a href="https://shop.dev.to/products/dev-hacktoberfest-badge"&gt;Dev.to badge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These rewards can be claimed after 4 of you're PRs have successfully passed the review.&lt;/p&gt;

&lt;p&gt;Thank's for reading this article.&lt;br&gt;
🎉🎉And congratulations to everyone if you've also won this time hacktoberfest event &lt;em&gt;&lt;code&gt;treat please&lt;/code&gt;😅&lt;/em&gt;.✨🎊🎊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socials"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Shourya_Nishi"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShouryaBrahmastra"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/profile.php?id=100008282954303"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//gptshourya02@gmail.com"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>(Arrow, Functions) =&gt; in Javascript</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Sun, 17 Oct 2021 05:36:46 +0000</pubDate>
      <link>https://dev.to/turpp/arrow-functions-in-javascript-1m42</link>
      <guid>https://dev.to/turpp/arrow-functions-in-javascript-1m42</guid>
      <description>&lt;p&gt;Thanks to ES6 we have an alternative way to declare functions in our JavaScript code. The syntax is quite a bit different than the traditional way but once you get the hang of it you'll fall in love. This article will be a short and sweet overview of arrow functions. Let me know in the comments if you like this short and example based article or if you like more detailed explanations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-arrow-function"&gt;
  &lt;/a&gt;
  What is an Arrow Function
&lt;/h2&gt;

&lt;p&gt;An Arrow function is nothing but a short hand way for declaring a function. The easiest way to get a grasp of this syntax is to convert the traditional function declaration into an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;First:&lt;/strong&gt; We do not need the &lt;code&gt;function&lt;/code&gt; keyword so lets remove it and assign the function to a variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//arrow conversion&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Second:&lt;/strong&gt; We are getting close. Instead of using the &lt;code&gt;(){}&lt;/code&gt; we use &lt;code&gt;=&amp;gt;&lt;/code&gt;. I wonder where it gets its name from?? Lets changes those out and move everything on one line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//arrow conversion completed&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada!!! It is that easy. Now there are some niche rules to keep in mind. Depending on the complexity of your function will determine the exact syntax you will use. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h4&gt;

&lt;p&gt;Depending on the number of parameters you have will determine if you need to use the &lt;code&gt;()&lt;/code&gt; or not. Easy rule to remember =&amp;gt; If you have 1 parameter no need for &lt;code&gt;()&lt;/code&gt;. If you have no parameters or more than one you will need to use the &lt;code&gt;()&lt;/code&gt; around your parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//one parameter so no ()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//no parameter so must have ()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//more than one parameter so must use ()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-curly-braces"&gt;
  &lt;/a&gt;
  {} curly braces
&lt;/h4&gt;

&lt;p&gt;Depending on the body of you function will determine if you will need to use curly braces or not. If it there is only one return expression and everything is on one line you can omit the &lt;code&gt;{}&lt;/code&gt;. If there is additional logic that spans over multiple lines you must include the &lt;code&gt;{}&lt;/code&gt; and also use the &lt;code&gt;return&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//simple on liner = no need for {}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//body has multiple lines so will need to use {} and return&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;findAvg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a lot of syntactic sugar at work here. Arrow functions do not use the &lt;code&gt;function&lt;/code&gt; keyword. This is why we assign it to a variable. We can still use parameters in our function. This is the first thing we place before the &lt;code&gt;=&amp;gt;&lt;/code&gt;. The &lt;code&gt;=&amp;gt;&lt;/code&gt; is what we use instead of &lt;code&gt;(parameter){logic}&lt;/code&gt;. Anything to the left of the &lt;code&gt;=&amp;gt;&lt;/code&gt; will be the parameters and anything to the right will be the body of our function. One interesting thing about arrow functions is that the return is implied. If there is only one returning expression we can omit the &lt;code&gt;return&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this"&gt;
  &lt;/a&gt;
  This
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;This&lt;/code&gt; is the main difference between the two different function types. &lt;code&gt;This&lt;/code&gt; can be confusing. If you are not aware of what &lt;code&gt;this&lt;/code&gt; is I encourage you to go look at some documentation to better understand. As far as arrow functions go, you can not bind &lt;code&gt;this&lt;/code&gt;. Normally &lt;code&gt;this&lt;/code&gt; would refer to the object it is being called on. This is not the case for an arrow function. In an arrow function &lt;code&gt;this&lt;/code&gt; is inherited from the parent scope and is normally the &lt;code&gt;window/global object&lt;/code&gt;. Keep this in mind when deciding which type of function to use.&lt;/p&gt;

&lt;p&gt;That is a short a simple overview of arrow functions. I hope you find this helpful and can use this as a quick refresher on how to compose your arrow functions. These are great for your simple functions and even better as callbacks. Let me know if you like this short code example heavy article or if you would rather have more detail and text describing the differences.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Database Normalization</title>
      <author>Fajar Zuhri Hadiyanto</author>
      <pubDate>Sun, 17 Oct 2021 05:30:07 +0000</pubDate>
      <link>https://dev.to/fajarzuhrihadiyanto/database-normalization-jil</link>
      <guid>https://dev.to/fajarzuhrihadiyanto/database-normalization-jil</guid>
      <description>&lt;p&gt;Database normalization is a process of restructuring database tables in order to minimize data redundancy and avoid data anomalies such as insert anomaly, delete anomaly, and update anomaly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--291bXbQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7ubg8q8lj76y5yocm6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--291bXbQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7ubg8q8lj76y5yocm6l.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Insert anomaly&lt;/strong&gt; occurs when we have to insert unnecessary similar data. for example when we have the data above. in that case, if we want to add another student that has the same course, then we have to add the same course information such as the lecturer's name, even though that is unnecessarily needed, because, for each same course, the lecturer will be the same.&lt;/p&gt;

&lt;p&gt;Next, there is a &lt;strong&gt;delete anomaly&lt;/strong&gt; that occurs when we want to delete data in a certain domain and it affects the loss of other data domains. let's take the previous table as an example. when all students in the fundamental programming course have passed the course, we might delete those students' information because we don't need those students in that table anymore. When we remove the data, it will impact the loss of course information, such as who teaches that course. In this case, we will lose the information on who teaches the fundamental programming course.&lt;/p&gt;

&lt;p&gt;And then, there is an &lt;strong&gt;update anomaly&lt;/strong&gt; that occurs when we have to replace all same existing data that belongs to the same data in a data domain. let's take the previous table again as an example. Just imagine that somehow, the lecture that teaches the fundamental programming course (Mr. Marc Whitfield) cannot teach the fundamental programming anymore and have to be replaced by another lecturer, just call him mr. Trystan Mccall. Because of that, we have to replace all lecturer data that belongs to the fundamental programming course (Mr. Marc Whitfield) with mr. Trystan Mccall.&lt;/p&gt;

&lt;p&gt;There are some steps to normalize the database table, which are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1nf"&gt;1NF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2nf"&gt;2NF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3nf"&gt;3NF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bcnf"&gt;BCNF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4nf"&gt;4NF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5nf"&gt;5NF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1nf"&gt;
  &lt;/a&gt;
  1NF &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_IACdVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aycskzj4samv77l83ox9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_IACdVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aycskzj4samv77l83ox9.png" alt="Original Table"&gt;&lt;/a&gt;in order to make the table satisfy the first normal form, there is one simple rule that has to be applied for each table, which is to make every attribute or column in each table store a single &lt;strong&gt;atomic data, not a group of data&lt;/strong&gt;. In the example above, a student have more than one course which is violae the first normal form. we can separate those course data into different rows without the loss of the student and lecturer information, so the table will look like this. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5olhIBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmo77iknxabqldfze8au.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5olhIBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmo77iknxabqldfze8au.png" alt="First Normal Form Table"&gt;&lt;/a&gt; The table above satisfies the first normal form of a database table, but there is partial dependency and transitive dependency which will be discussed in the higher normal form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2nf"&gt;
  &lt;/a&gt;
  2NF &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In order to make the table satisfy the second normal form, the table must be in the first normal form. Then, there is an additional rule, the table has &lt;strong&gt;no partial dependency&lt;/strong&gt;. Partial dependency is the dependency of a non-primary attribute which only on a part of a composite primary key, not a whole composite primary key. In the previous table, there is a composite primary key formed by &lt;em&gt;student_number&lt;/em&gt; and &lt;em&gt;course_code&lt;/em&gt; attribute. There are some attributes that depend only on one primary key, such as &lt;em&gt;student_name&lt;/em&gt; that depends only on the &lt;em&gt;student_number&lt;/em&gt; attribute, and &lt;em&gt;course_name&lt;/em&gt; that depends only on the &lt;em&gt;course_code&lt;/em&gt;. These attributes violate the second normal form.&lt;/p&gt;

&lt;p&gt;To get rid of that problem, we have to &lt;strong&gt;separate the partial dependent attribute&lt;/strong&gt; into a new table with the corresponding primary key. So, the tables will look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TgyVEXKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1gmgrj4jmrxkk8sohym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TgyVEXKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1gmgrj4jmrxkk8sohym.png" alt="Second Normal Form Tables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3nf"&gt;
  &lt;/a&gt;
  3NF &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In order to make the table satisfy the third normal form, the table must be in the second normal form. Then, there is an additional rule, the table has &lt;strong&gt;no transitive dependency&lt;/strong&gt;. Transitive dependency is the dependency of a non-primary attribute on another non-primary attribute. In the previous table, we get rid of student_name and course name that depends on one of the composite primary key, but what about the &lt;em&gt;lecturer_name&lt;/em&gt; attribute? it doesn't depend on any of a composite primary key, but instead, it depends on &lt;em&gt;lecturer_code&lt;/em&gt; which is not a part of composite primary key nor a single primary key itself.&lt;/p&gt;

&lt;p&gt;to convert the table to satisfy the third normal form, we have to &lt;strong&gt;separate the transitive dependent attribute&lt;/strong&gt; into a new table with the corresponding primary key, so the table will look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHg6WZQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk2ix5d2i1h3kwac7x5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHg6WZQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk2ix5d2i1h3kwac7x5f.png" alt="Third Normal Form Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bcnf-boycecodd-normal-form"&gt;
  &lt;/a&gt;
  BCNF (Boyce-Codd Normal Form) &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The table should be converted to BCNF only if the table is in the third normal form and &lt;strong&gt;every determinant attribute in the table is a candidate key&lt;/strong&gt;. In the previous table, besides the &lt;em&gt;student_number&lt;/em&gt; and &lt;em&gt;course_code&lt;/em&gt; that were chosen to be a composite key, there is also another determinant attribute that is also a candidate key, that is &lt;em&gt;lecturer_code&lt;/em&gt;, but for some reason, it was not chosen to be a part of the composite primary key. If we observe, one course can be taught by many lecturers, but one lecturer only teaches one course, which means that the course depends on another non-primary key attribute. This condition obviously violates the BCNF.&lt;/p&gt;

&lt;p&gt;To convert the table into a BCNF, we can &lt;strong&gt;modify the composite primary key&lt;/strong&gt; from &lt;em&gt;student_number&lt;/em&gt; + &lt;em&gt;course_code&lt;/em&gt; into &lt;em&gt;student_number&lt;/em&gt; + &lt;em&gt;lecturer_code&lt;/em&gt;, then we move attribute course code into the lecturer's table. Therefore, there is no candidate key and the tables will look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxpZJS0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvb9xagfam7mzbe91ogq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxpZJS0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvb9xagfam7mzbe91ogq.png" alt="Boyce-Codd Normal Form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4nf"&gt;
  &lt;/a&gt;
  4NF &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To achieve the fourth normal level of a database table, the table must have &lt;strong&gt;no multivalued dependency&lt;/strong&gt;. Multivalued dependency is a dependency of two or more non-primary keys on a primary key or composite of it, where these non-primary keys are independent of each other. Let's take another example in the table below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HrE18MBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4590ffbhuljq3z8nvnds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HrE18MBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4590ffbhuljq3z8nvnds.png" alt="Multivalued Dependency Example"&gt;&lt;/a&gt;In that table, there are language and skill attribute that depend on the same primary key (EmployeeId), but those attributes are not related to each other. In other words, the dependency of those attributes violates the fourth normal form of the database table. To deal with this, we can &lt;strong&gt;separate both dependent attribut&lt;/strong&gt; into a new table with the primary key, so the table will look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qqLmRvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pri7ky51x11tkjb9ytr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qqLmRvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pri7ky51x11tkjb9ytr.png" alt="Fourth Normal Form Tables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5nf"&gt;
  &lt;/a&gt;
  5NF &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The table can satisfy the fifth normal form if the table is in the fourth normal form and &lt;strong&gt;the table cannot be decomposed into some smaller tables without losing some information&lt;/strong&gt;. It's a bit complicated to understand, but let's try to take a look at the table of relationship between brand, distributor and the customer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XXRgtGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3osrriz0rp36sx1xppki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XXRgtGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3osrriz0rp36sx1xppki.png" alt="Original Table"&gt;&lt;/a&gt;There are some relationships that exist between the data, such as distributors that sell stuff with a certain brand name, customers that buy stuff from distributors, and customers that buy stuff with a certain brand name. Let's try to decompose the table into three different tables that represent those relationships.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Chsm2_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11ns2h2or8xppgb6nngf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Chsm2_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11ns2h2or8xppgb6nngf.png" alt="Decomposed Table"&gt;&lt;/a&gt; From the Brand Customer table, we can see that Reggie Pearson buys stuff with brand ASUS. Now let's find out from which distributor Reggie Pearson buys ASUS stuff. If we observe the Distributor Customer Table, Reggie Pearson only buys stuff from distributors AAX, KGR, and BGC. If we observe the Brand Distributor table, only distributors AAX, KGR, and BGC that sell ASUS stuff. From this information, we know that Reggie Pearson might buy ASUS stuff from distributors AAX, KGR, or BGC, but if we take a look back at the original table, Reggie Pearson only buys ASUS stuff from distributor AAX. This misleading information might be caused by some conditions, maybe there is someone that buy ASUS stuff from distributor KGR and BGC, or maybe there is another brand that bought by Reggie Pearson from distributor KGR and BGC. That's why we cannot decompose the original table into some smaller tables because we lose information on who is actually buying stuff with which brand name from which distributor. In other words, the original table already satisfies the fifth normal form.&lt;/p&gt;

</description>
      <category>database</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
