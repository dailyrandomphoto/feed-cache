<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JAVASCRIPT IRL: Examples of JavaScript's filter function in real life</title>
      <author>Shailesh Vasandani</author>
      <pubDate>Thu, 14 Jan 2021 18:33:38 +0000</pubDate>
      <link>https://dev.to/shaileshcodes/javascript-irl-examples-of-javascript-s-filter-function-in-real-life-589g</link>
      <guid>https://dev.to/shaileshcodes/javascript-irl-examples-of-javascript-s-filter-function-in-real-life-589g</guid>
      <description>&lt;p&gt;JavaScript array methods are super useful, and learning how to use them can really help improve the readability of your code. This is the third and final part of this series, and today I'll be discussing the &lt;code&gt;filter&lt;/code&gt; function and how you can use it to make your code more concise. It's probably the easiest of the three to understand, since it's fairly straightforward, but it's always helpful to have examples on hand to understand exactly how it does and doesn't work.&lt;/p&gt;

&lt;p&gt;Psst — don't have time to read through the entire article? Follow me on &lt;a href="https://instagram.com/shaileshcodes"&gt;Instagram&lt;/a&gt; to get short, digestible posts on all things web development.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function is called on an array and — like &lt;code&gt;map&lt;/code&gt; — takes in one parameter: a callback. It performs this callback function on every element in the array, and includes the element in a &lt;strong&gt;new&lt;/strong&gt; array if the callback returns true. Now, you might think that you can replicate this functionality without too much effort using &lt;code&gt;map&lt;/code&gt;, but the key difference here is that &lt;code&gt;map&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; returns an array with the same length as the original. (Well, almost always, but that's a bit more complicated and not really in the spirit of &lt;code&gt;map&lt;/code&gt; to begin with.) On the other hand, &lt;code&gt;filter&lt;/code&gt; will create an array that's only as large as the number of elements that pass the callback.&lt;/p&gt;

&lt;p&gt;That may seem like a lot, but it honestly works just like you'd expect to. Let's take a look at a simple example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-trivial-example" class="anchor"&gt;
  &lt;/a&gt;
  A trivial example
&lt;/h4&gt;

&lt;p&gt;Here, we add filter the array to only include all elements greater than 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newarr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newarr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The important thing to note here is that &lt;code&gt;newarr&lt;/code&gt; is only of length 3; it doesn't return a &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; for the first two elements — it simply omits them entirely. We'll use this property to our advantage in the very next example.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deleting-caches-but-properly-this-time" class="anchor"&gt;
  &lt;/a&gt;
  Deleting caches (but properly this time)
&lt;/h4&gt;

&lt;p&gt;If you've read my &lt;a href="https://shaile.sh/codes/posts/2021/01/06/javascript-map-in-real-life/"&gt;article on the map function&lt;/a&gt;, you'll recognize this example. However, it can still be improved: the &lt;code&gt;null&lt;/code&gt; values that we returned could end up throwing an error later down the line. To avoid that, we're going to use &lt;code&gt;filter&lt;/code&gt; to return an array that consists &lt;em&gt;only&lt;/em&gt; of the elements that match the condition.&lt;/p&gt;

&lt;p&gt;This is what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Delete all caches that aren't named currentCache.&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheNames&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentCache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting out of date cache:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}));&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again, very similar to the previous example. The key difference here is that &lt;em&gt;before&lt;/em&gt; we map each cache to its &lt;code&gt;delete&lt;/code&gt; function, we're filtering out all the caches that don't match our condition. That way, the &lt;code&gt;currentCache&lt;/code&gt; won't appear in the array being passed to the &lt;code&gt;map&lt;/code&gt; and thus we avoid any &lt;code&gt;null&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;Let's look another example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filtering-posts-in-a-blog" class="anchor"&gt;
  &lt;/a&gt;
  Filtering posts in a blog
&lt;/h4&gt;

&lt;p&gt;On my &lt;a href="https://shaile.sh/codes"&gt;blog page&lt;/a&gt;, I use a tagging system to allow users to filter content and view only the posts they're interested in. To do this, I actually created a JavaScript library called &lt;a href="https://svasandani.github.io/dynamic-tags/"&gt;dynamic-tags&lt;/a&gt;. While creating it, I needed to find a way to take all of the posts on the page and only display the ones that matched the given filter.&lt;/p&gt;

&lt;p&gt;While this could have devolved into a nasty mess of &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;if&lt;/code&gt; statements, I used the &lt;code&gt;filter&lt;/code&gt; function to make things both readable and efficient. Here's how it ended up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filterPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;activePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;tagFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;activePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;activePosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tagDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Effectively three lines of code do much of the heavy lifting. In it, we go through each selected tag and call &lt;code&gt;filter&lt;/code&gt; on &lt;code&gt;activePosts&lt;/code&gt; to progressively remove any post that doesn't contain that tag. Even though &lt;code&gt;filter&lt;/code&gt; might seem like a very minor abstraction over a plain &lt;code&gt;for&lt;/code&gt; loop, we can see in this example just how concise and readable it makes your code.&lt;/p&gt;

&lt;p&gt;Let's take a look at one final example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#making-things-searchable" class="anchor"&gt;
  &lt;/a&gt;
  Making things searchable
&lt;/h4&gt;

&lt;p&gt;As an extension to the library I created above, I also wanted to create a system where users could search for topics and filter posts based on that. This is still a work in progress, but it already includes several useful examples of the &lt;code&gt;filter&lt;/code&gt; function in action.&lt;/p&gt;

&lt;p&gt;Let's take a look at my favorite one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="nx"&gt;populateSearchBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;searches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allTags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;searchBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classListToSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchBoxClass&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;searchBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="nx"&gt;searches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTagTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchBox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this snippet, instead of filtering out posts, we're actually filtering out suggestions in the search box. Here, the &lt;code&gt;filter&lt;/code&gt; function is used to ensure we're only appending suggestions that haven't already been selected. That is, we don't want a user to be filtering by topics that they've already filtered out.&lt;/p&gt;

&lt;p&gt;The actual &lt;code&gt;filter&lt;/code&gt; function is quite interesting — it looks for all the tags that contain the phrase inside the search bar. For example, given the tags &lt;code&gt;['May', 'June', 'July']&lt;/code&gt;, typing a 'y' into the search bar should return &lt;code&gt;['May', 'July']&lt;/code&gt;. On the other hand, typing 'J' should return &lt;code&gt;['June', 'July']&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrapping-it-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h4&gt;

&lt;p&gt;And that's a wrap! I hope these examples gave you an idea of how the &lt;code&gt;filter&lt;/code&gt; function is used in production, and how it can help make code more readable and versatile. Let me know in the comments if you've used the &lt;code&gt;filter&lt;/code&gt; function in a cool way, and make sure to read the other two posts in the series if you haven't already!&lt;/p&gt;

&lt;p&gt;As always, don't forget to follow me for more content like this. I'm currently writing on &lt;a href="https://shaile.sh/devto"&gt;dev.to&lt;/a&gt; and &lt;a href="https://shaile.sh/medium"&gt;Medium&lt;/a&gt;, and your support on either platform would be very much appreciated. I also have a &lt;a href="https://www.buymeacoffee.com/shailesh/posts"&gt;membership&lt;/a&gt; set up, where you can get early previews of articles and exclusive access to a whole bunch of resources. Also, if you've particularly enjoyed this post, consider supporting me by &lt;a href="https://shaile.sh/coffee"&gt;buying me a coffee&lt;/a&gt;. Until next time!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>arrays</category>
    </item>
    <item>
      <title>Flask Tutorial - The Interactive way, Ask Me Anything for three hours</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 14 Jan 2021 17:31:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-tutorial-the-interactive-way-ask-me-anything-for-three-hours-56a1</link>
      <guid>https://dev.to/sm0ke/flask-tutorial-the-interactive-way-ask-me-anything-for-three-hours-56a1</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;My (nick)name is Sm0ke and I'm using &lt;strong&gt;&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt;&lt;/strong&gt; for more than 5 years to code almost anything: simple one-page projects, API's and eCommerce-based platforms. The deployments were made starting with Apache, Nginx, Gunicorn, and uWSGI .. etc. Regarding this &lt;strong&gt;Flask Tutorial&lt;/strong&gt;, the content will be provided based on your questions, starting with just a few links. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks in advance for your ... questions!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I'll be around here for 3hours - feel free to ask me anything. During this timeframe I'll do my best to provide quality answers based on my practical knowledge - &lt;strong&gt;Some Flask-related&lt;/strong&gt; links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; - the official website&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/tutorial-flask"&gt;Flask Tutorial&lt;/a&gt; - (Github) Content provided by experienced developers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.appseed.us/flask-how-to-code-simple-tasks/"&gt;Flask - A list of useful “HOW TO’s”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.appseed.us/flask-cheat-sheet-and-free-templates-63zo/"&gt;Flask Cheat Sheet&lt;/a&gt; - And FREE samples&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Suggested Topics:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deployment on CentOS, Ubuntu using Apache/Nginx&lt;/li&gt;
&lt;li&gt;Start app using Gunicorn, uWSGI&lt;/li&gt;
&lt;li&gt;What is WSGI&lt;/li&gt;
&lt;li&gt;How to structure a project&lt;/li&gt;
&lt;li&gt;ORM - how to use it and manage DB information with ease&lt;/li&gt;
&lt;li&gt;Migrations - using &lt;a href="https://flask-migrate.readthedocs.io/en/latest/#flask-migrate"&gt;Flask Migration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Flask Admin - using roles in a Flask application&lt;/li&gt;
&lt;li&gt;Protecting routes in Flask&lt;/li&gt;
&lt;li&gt;Session-based authentication via &lt;a href="https://flask-login.readthedocs.io/en/latest/#flask-login"&gt;Flask-Login&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Using the Flask CLI&lt;/li&gt;
&lt;li&gt;Create custom (CLI) commands using &lt;strong&gt;&lt;a href="https://click.palletsprojects.com/"&gt;Click&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Create tables dynamically - &lt;strong&gt;at first request&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>Running a serverless API using Netlify Functions</title>
      <author>Adam Goth</author>
      <pubDate>Thu, 14 Jan 2021 16:36:30 +0000</pubDate>
      <link>https://dev.to/adamgoth/running-a-serverless-api-using-netlify-functions-42dl</link>
      <guid>https://dev.to/adamgoth/running-a-serverless-api-using-netlify-functions-42dl</guid>
      <description>&lt;p&gt;Over the last few years, serverless applications have been growing in popularity. There are many use cases in which a serverless solution is more practical and more convenient than the traditional server solution. In this post, we'll look at setting up a serverless Express.js API using Netlify functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;Before we dive into the code for this demo application, let's talk about a few concepts at a high-level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverless" class="anchor"&gt;
  &lt;/a&gt;
  Serverless
&lt;/h3&gt;

&lt;p&gt;"Serverless" is a term that is used for what can generally be thought of as a method of providing backend services on an as-used basis. Rather than setting up specific infrastructure, or a server, to provide the backend services, you can utilize a "serverless" provider to handle this functionality instead. This was first popularized by AWS Lambda but is now a service offered by many other companies as well, including the one we'll be looking at today, Netlify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-lambda" class="anchor"&gt;
  &lt;/a&gt;
  AWS Lambda
&lt;/h3&gt;

&lt;p&gt;As mentioned above, &lt;a href="https://aws.amazon.com/lambda"&gt;AWS Lambda&lt;/a&gt; is the most popular provider of serverless computing. Here's how AWS Lamba describes itself in its own words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume.&lt;/p&gt;

&lt;p&gt;With Lambda, you can run code for virtually any type of application or backend service - all with zero administration. Just upload your code and Lambda takes care of everything required to run and scale your code with high availability. You can set up your code to automatically trigger from other AWS services or call it directly from any web or mobile app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As great as this sounds (and it really is great), setting up an AWS lambda function can be a tedious process, requiring quite a bit of configuration that can be easily confusing to someone is who new to serverless functions. If you're curious to see for yourself, here's an &lt;a href="https://docs.aws.amazon.com/toolkit-for-eclipse/v1/user-guide/lambda-tutorial.html"&gt;example tutorial&lt;/a&gt; directly from the AWS docs. But not to worry, that's why we're here to talk about Netlify Functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netlify-functions" class="anchor"&gt;
  &lt;/a&gt;
  Netlify Functions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/products/functions"&gt;Netlify Functions&lt;/a&gt; greatly simplifies the process for running serverless functions. Using Netlify Functions, we can simply write our lambda function and drop it into the functions folder of our Netlify-hosted application. Behind the scenes, Netlify handles the interaction with AWS for us. We don't even need an AWS account. Every Netlify account is set up for this feature out of the box. There's no setup, servers, or ops required.&lt;/p&gt;

&lt;p&gt;Let's see what this looks like in code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-application" class="anchor"&gt;
  &lt;/a&gt;
  The application
&lt;/h3&gt;

&lt;p&gt;The code for this demo can be found &lt;a href="https://github.com/adamgoth/netlify-serverless-demo"&gt;here&lt;/a&gt;. Since the purpose of this post is to show how to set up a serverless API, rather than do anything specific with the API, this particular demo application will serve up an extremely basic API with two endpoints that don't do much. I will assume the reader has some basic familiarity with &lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt; and Node as we will be using these to build the API.&lt;/p&gt;

&lt;p&gt;If we take a look at our package dependencies, we have just five packages:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodemon&lt;/code&gt; is used to automatically restart our server while we're working on it in development&lt;/p&gt;

&lt;p&gt;&lt;code&gt;express&lt;/code&gt; gives us our API framework&lt;/p&gt;

&lt;p&gt;&lt;code&gt;body-parser&lt;/code&gt; is middleware that allows us the parse our request bodies&lt;/p&gt;

&lt;p&gt;&lt;code&gt;serverless-http&lt;/code&gt; allows us to wrap our API for serverless use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;netlify-lambda&lt;/code&gt; is a tool that helps us build our application code so that it can be consumed correctly by Netlify using Netlify Functions&lt;/p&gt;

&lt;p&gt;The other thing to note in the &lt;code&gt;package.json&lt;/code&gt; file are the two scripts. We have &lt;code&gt;"start": "nodemon server-local.js"&lt;/code&gt; which is used for development, and &lt;code&gt;"build": "netlify-lambda build express"&lt;/code&gt; which is used to build and deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "scripts": {
    "build": "netlify-lambda build express",
    "start": "nodemon server-local.js"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; script is fairly straight forward, it will just execute our &lt;code&gt;server-local.js&lt;/code&gt; file which in turn is calling &lt;code&gt;express/server.js&lt;/code&gt;. This works for local development, but we need to do additional work in our &lt;code&gt;build&lt;/code&gt; script for the application to work as a serverless function once deployed to Netlify. In the &lt;code&gt;build&lt;/code&gt; script, we call &lt;a href="https://github.com/netlify/netlify-lambda#netlify-lambda-build"&gt;&lt;code&gt;netlify-lambda build&lt;/code&gt;&lt;/a&gt; which takes a source folder as an argument (&lt;code&gt;express&lt;/code&gt; in our case) and outputs it to a built folder. The built folder is where Netlify will look for our serverless functions. We have a couple of options for how we specify this. We could specify the designated folder within Netlify's application settings using Netlify's web app, or within our application code, we can specify the designated folder with a &lt;code&gt;netlify.toml&lt;/code&gt; configuration file. In our case, we'll use a configuration file that lives in our root directory that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// netlify.toml

[build]
  command = "npm install &amp;amp;&amp;amp; npm run build"
  functions = "functions"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With our scripts and build configuration accounted for, let's take a look at the core of the application.&lt;/p&gt;

&lt;p&gt;The core of the application lives in the &lt;code&gt;express/server.js&lt;/code&gt; file, and in our case, is just 29 lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverless&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serverless-http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/.netlify/functions/server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// path must route to lambda&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h1&amp;gt;Up and running&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/doSomething&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// maybe do some database interaction or third-party API call here!&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bad request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serverless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you've ever worked with Express.js, this should look pretty familiar to you. We have two endpoints, one &lt;code&gt;GET&lt;/code&gt; endpoint at &lt;code&gt;/&lt;/code&gt; and one &lt;code&gt;POST&lt;/code&gt; endpoint at &lt;code&gt;/doSomething&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These endpoints don't do much, but you could do just about anything you would normally do with &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; endpoints here. Hit a third-party API, connect to a database, fire off some sort of transaction, etc.&lt;/p&gt;

&lt;p&gt;The two lines in the application that are specific to using Netlify's serverless functions are line 9 and line 29.&lt;/p&gt;

&lt;p&gt;As we specified in our &lt;code&gt;netlify.toml&lt;/code&gt; configuration file, our function code is going to live at &lt;code&gt;./netlify/functions/server&lt;/code&gt;. So we will tell our express app on line 9 to use our &lt;code&gt;router&lt;/code&gt; object anytime a request is sent to this server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use("/.netlify/functions/server", router)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lastly, on line 29, we will utilize the &lt;a href="https://github.com/dougmoscrop/serverless-http"&gt;&lt;code&gt;serverless-http&lt;/code&gt;&lt;/a&gt; package to wrap our application up for serverless use. This means our application can work as expected without any HTTP server, ports, or sockets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports.handler = serverless(app)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With that, the application is all set to &lt;a href="https://docs.netlify.com/site-deploys/overview/#deploy-summary"&gt;deploy to Netlify&lt;/a&gt;. If you've never deployed on Netlify before, you'll be amazed at how simple it is. This post won't go into details but it isn't much more than authenticating your GitHub account and selecting the repo and branch to deploy. Once the application is deployed, you can start accessing the endpoints we created at &lt;code&gt;&amp;lt;your site URL&amp;gt;/.netlify/functions/server/&amp;lt;your endpoint&amp;gt;&lt;/code&gt;. We now have a basic yet fully-functioning API, without having to run or provision a dedicated and separate server!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;Hopefully you were able to follow along in creating this Netlify serverless function. Serverless computing is still a developing and evolving technology but its popularity continues to grow as more developers find it more suitable to their needs than traditional server applications.&lt;/p&gt;

&lt;p&gt;The particular use case that led me to using Netlify functions is that I needed to make a third-party API call from my client application that required a private API key in the header. With just client-side code, there is no good way to keep your private API key private. I decided I needed a server to proxy the request through, but I didn't want to create and dedicate an entire server just to pass one small API request through. So this ended up being a perfect solution. Now that I know how convenient and simple this can be, I will be looking for more opportunities to utilize Netlify Functions.&lt;/p&gt;

&lt;p&gt;For more technical information regarding the usage and implementation of Netlify Functions, be sure to visit &lt;a href="https://docs.netlify.com/functions/overview/#manage-your-serverless-functions"&gt;the docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post or found it useful, please consider &lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fwww.adamgoth.com%2Frunning-a-serverless-api-using-netlify-functions"&gt;sharing it on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to stay updated on new posts, &lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonType%3DFollowButton%26query%3Dhttps%253A%252F%252Ftwitter.com%252Finit_adam%26widget%3DButton&amp;amp;ref_src=twsrc%5Etfw&amp;amp;region=follow_link&amp;amp;screen_name=init_adam&amp;amp;tw_p=followbutton"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions, comments, or just want to say hello, &lt;a href="https://twitter.com/messages/compose?recipient_id=33618361"&gt;send me a message&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>serverless</category>
      <category>netlify</category>
    </item>
    <item>
      <title>HERN Stack, Comin’ In Hot </title>
      <author>Margo McCabe</author>
      <pubDate>Thu, 14 Jan 2021 15:56:56 +0000</pubDate>
      <link>https://dev.to/harperdb/hern-stack-comin-in-hot-pa6</link>
      <guid>https://dev.to/harperdb/hern-stack-comin-in-hot-pa6</guid>
      <description>&lt;p&gt;New tech terms and lingo are constantly popping up in the development world. It’s hard to keep up! People also love to share and debate about their favorite tech stacks and tools / frameworks. That said, there is no ultimate right or wrong answer when it comes to choosing a tech stack because it really depends on the specific use case it’s meant to solve for. &lt;/p&gt;

&lt;p&gt;Today, let’s take a look at the HERN stack. Ever heard of it? It’s a new “buzz word” as they say, and I thought it might be helpful to provide some clarity. The HERN stack stands for HarperDB, Express, React, and Node, the four technologies that make up this particular stack, and they’re all written using JavaScript. This is a full-stack solution that follows a common 3-tier architecture (front end, application, and database). &lt;/p&gt;

&lt;p&gt;As mentioned, there are numerous stacks out there and different factors play a role in the decision around which is right for your specific end goal. Remember that you have the freedom to choose and try different stacks! To make sure we’re all on the same page, Stackshare defines a tech stack as “the set of technologies an organization uses to build a web or mobile application. It is a combination of programming languages, frameworks, libraries, patterns, servers, UI/UX solutions, software, and tools used by its developers.” So as you can see, the combinations and possibilities are endless! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-makes-up-the-hern-stack" class="anchor"&gt;
  &lt;/a&gt;
  What Makes up the HERN Stack?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://harperdb.io/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;HarperDB&lt;/a&gt;: Distributed SQL / NoSQL hybrid database accessed via a REST API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt;: Open source, back end web application framework for Node.js, designed for building web applications and APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;: Open source, front end, JavaScript library for building user interfaces or UI components.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;: Open source, cross-platform, back-end JavaScript runtime environment that executes JavaScript code outside a web browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are several reasons that these technologies work well together and serve as a great full-stack solution for projects like app development and web development. There are also variants of this stack that would work just as well, such as swapping out and incorporating frameworks like Vue, Angular, or &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;Fastify&lt;/a&gt;. HEAN, HEVN, HFRN… don’t be afraid to get creative and choose what technologies make the most sense for you! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-hern-stack-work" class="anchor"&gt;
  &lt;/a&gt;
  How Does the HERN Stack Work?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMNRUr90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dl7t9aedt9coln6e9ngr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMNRUr90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dl7t9aedt9coln6e9ngr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like most tech stacks, this one has a frontend, backend, and database tier. The HERN stack allows you to write everything in Javascript, ultimately simplifying and streamlining the development process. Each component of the HERN stack provides a unique benefit, and data flows naturally through each of the three tiers, enabling rapid development and simple upkeep. (&lt;em&gt;Fun fact - HarperDB is actually the only database that was built from the ground up in Node.js, which you can read more about &lt;a href="https://dev.to/harperdb/building-a-database-written-in-node-js-from-the-ground-up-2hgm"&gt;here&lt;/a&gt;&lt;/em&gt;!)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#frontend" class="anchor"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h4&gt;

&lt;p&gt;React serves as the frontend or web tier of the HERN stack. Among the many reasons React is &lt;a href="https://insights.daffodilsw.com/blog/7-reasons-why-reactjs-is-taking-over-frontend-development"&gt;taking over frontend development&lt;/a&gt;, it enables faster development, simplifies coding and integration, and comes with a strong community. The HarperDB &lt;a href="https://studio.harperdb.io/sign-up?utm_source=devto&amp;amp;utm_medium=margopost"&gt;Management Studio&lt;/a&gt; was written in React. React has improved the quality of front end development and allowed us to quickly make changes and improvements to our application.&lt;/p&gt;

&lt;p&gt;HarperDB also provides a great &lt;a href="https://www.npmjs.com/package/use-harperdb"&gt;React SDK&lt;/a&gt;, if that’s your style, or you could make calls directly to HarperDB via our built-in, easy to use API. Either way, you can query data directly from within your client-side application if you choose. &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt; are a great place to manage your API calls and how responses are handled within your app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#backend" class="anchor"&gt;
  &lt;/a&gt;
  Backend
&lt;/h4&gt;

&lt;p&gt;Node.js and Express.js serve as the backend, server, or application tier of the HERN stack. Express essentially operates inside a Node server, as the server-side framework. &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; is a minimal and flexible framework, with numerous HTTP utility methods and middleware at your disposal. &lt;/p&gt;

&lt;p&gt;The idea here is that you build your custom API functions (GET, POST, etc.) with Express to be called by the React front end. These functions then make calls from the server to HarperDB to access and modify the database. You can utilize the HarperDB &lt;a href="https://www.npmjs.com/package/harperive"&gt;Node.js client&lt;/a&gt;, which natively supports promises and callbacks. The library makes HarperDB interactions feel more native to JavaScript by exposing each HarperDB operation as a function on the client object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database" class="anchor"&gt;
  &lt;/a&gt;
  Database
&lt;/h4&gt;

&lt;p&gt;If you need to store or transport any type of data, which you probably do, you will also need a database. Why not choose the quickest, easiest, and most intuitive database out there? HarperDB provides full document store capability plus enterprise grade ACID-compliant SQL, effectively allowing you to run SQL on JSON. The database is accessed via a single endpoint REST API using SQL and NoSQL operations. HarperDB has simplified much of the work when it comes to database installation, configuration, and administration. It’s really a great option for developers of any skill level. Check out &lt;a href="https://harperdb.io/developers/harperdb-cloud/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;HarperDB Cloud&lt;/a&gt; if you’re building in the cloud, or you can also do a local &lt;a href="https://harperdb.io/developers/get-started/"&gt;install on your server&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-hern-your-next-fullstack-solution" class="anchor"&gt;
  &lt;/a&gt;
  Is HERN Your Next Full-Stack Solution?
&lt;/h3&gt;

&lt;p&gt;You can essentially build anything with the HERN stack, and it’s especially great for JavaScript developers and projects with lots of JSON data. With a dynamic schema, HarperDB was designed to ingest and handle any type of data at scale. You no longer need to pick a database based on the structure of your data. HarperDB provides the flexibility to work with the frameworks of your choice, and ability to connect to your favorite reporting or analysis tools. &lt;/p&gt;

&lt;p&gt;Scaling is easy with HarperDB’s clustering and replication features, and our data model, built on top of LMDB, is enabling us to break records on both read and write speeds. HarperDB works extremely well with Express, React, and Node, and with this tech stack you can maximize your time writing code, and work on your project instead of debugging and other administration tasks. &lt;/p&gt;

&lt;p&gt;Don’t get stuck in your old ways! Try the new HERN, HEAN, or HEVN stack and let us know what you think. We would love to hear what you’re working on! &lt;/p&gt;

</description>
      <category>database</category>
      <category>react</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Back to Basics: Conditional Statements in JavaScript</title>
      <author>Alisa Bajramovic</author>
      <pubDate>Thu, 14 Jan 2021 15:15:03 +0000</pubDate>
      <link>https://dev.to/alisabaj/back-to-basics-conditional-statements-in-javascript-2feo</link>
      <guid>https://dev.to/alisabaj/back-to-basics-conditional-statements-in-javascript-2feo</guid>
      <description>&lt;p&gt;This series discusses the building blocks of JavaScript. Whether you're new to the language, you're preparing for a technical interview, or you're hoping to brush up on some key JS concepts, this series is for you.&lt;/p&gt;

&lt;p&gt;Today's post is about conditional statements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-conditional-statements"&gt;What are conditional statements?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ifelse-statements"&gt;If...else statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#switch-statements"&gt;Switch statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-ternary-operator"&gt;The ternary operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-conditional-statements" class="anchor"&gt;
  &lt;/a&gt;
  What are conditional statements?
&lt;/h2&gt;

&lt;p&gt;Conditional statements tell your program to do a certain set of commands if a certain condition is true. In JavaScript, there are &lt;code&gt;if...else&lt;/code&gt; statements and &lt;code&gt;switch&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Conditional statements are used all the time in the non-programming world. Let's say your friend asks you to pick them up some ice cream from the grocery store. They tell you, "If the store has mint chocolate chip ice cream, please get it. If the store doesn't have that, please get cookies and cream. If the store doesn't have that either, just get me chocolate ice cream." Written another way, your friend is saying:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the store has mint chocolate chip ice cream: buy that.&lt;/li&gt;
&lt;li&gt;Otherwise, if it has cookies and cream ice cream: buy that.&lt;/li&gt;
&lt;li&gt;Otherwise: buy chocolate ice cream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each one of these statements has a condition ("the store has mint chocolate chip ice cream") and a statement to execute if that condition is true ("buy that"). It's also important to note that the &lt;strong&gt;order&lt;/strong&gt; matters in these statements. Your friend doesn't want you to buy chocolate ice cream if cookies and cream is an option.&lt;/p&gt;

&lt;p&gt;When working with conditional statements, it's important to keep in mind what you're checking, and what order things should be checked in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ifelse-statements" class="anchor"&gt;
  &lt;/a&gt;
  If...else statements
&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;if...else statement&lt;/strong&gt; is structured like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
    statement_1;
} else {
    statement_2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;condition&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;statement_1&lt;/code&gt; will execute. Otherwise, if the condition is &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;statement_2&lt;/code&gt; will execute.&lt;/p&gt;

&lt;p&gt;It's important to note that the &lt;code&gt;else&lt;/code&gt; clause is optional. Also, you can test multiple conditions in sequential order using &lt;code&gt;else if&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition_1) {
    statement_1;
} else if (condition_2) {
    statement_2;
} else if (condition_3) {
    statement_3;
} else {
    statement_last;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When multiple conditions are being tested, only the &lt;strong&gt;first&lt;/strong&gt; condition that evaluates to &lt;code&gt;true&lt;/code&gt; is executed.&lt;/p&gt;

&lt;p&gt;To execute multiple statements, group them in a block statement, like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
    statement_1;
    statement_2;
} else {
    statement_3;
    statement_4;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, let's say we have an array that keeps track of the temperature on each day of the week. If it's the end of the week (as in, the array has 7 temperatures in it), we want to report back that it's been a whole week. Otherwise, we want to log that it's not the end of the week yet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's been a whole week!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's not the end of the week yet.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's take that example a step further, and incorporate some of the loops we talked about in &lt;a href="https://dev.to/alisabaj/back-to-basics-loops-in-javascript-59lo"&gt;Back to Basics: Loops in JavaScript&lt;/a&gt;. Rather than just logging if it's the end of the week, we should return what the average temperate was that week.&lt;/p&gt;

&lt;p&gt;There are multiple ways to find the average (or mean) of an array of numbers. One involves using a &lt;code&gt;for&lt;/code&gt; loop to find the sum of every value of the array, and then dividing it by the length of the array (average is total sum divided by count). We'll start by initializing a variable which will equal the sum of every value in the array. Because we only want to find the average temperature of a full week, we will do this in the statement following the &lt;code&gt;if&lt;/code&gt; condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//initialize sum at 0 because we need to add values to it&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's not the end of the week yet.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we can use a &lt;code&gt;for&lt;/code&gt; loop to go over each value of the array, and add it to &lt;code&gt;sum&lt;/code&gt;. The &lt;code&gt;for&lt;/code&gt; loop will start a counter at &lt;code&gt;0&lt;/code&gt;, because &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#accessing_array_elements"&gt;arrays are zero-indexed in JavaScript&lt;/a&gt;. It will go until the length of the array, or &lt;code&gt;arr.length&lt;/code&gt;. And we want to check each element of the array, one at a time, so we will increment by &lt;code&gt;1&lt;/code&gt; each time. Inside of the &lt;code&gt;for&lt;/code&gt; loop, we want to add the current value of the array to &lt;code&gt;sum&lt;/code&gt;. We can access the value of the array with &lt;code&gt;arr[i]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// this could also be written as sum += arr[i]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's not the end of the week yet.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the &lt;code&gt;for&lt;/code&gt; loop is done executing, &lt;code&gt;sum&lt;/code&gt; contains the total sum of every temperate that week. Since we want to return the average temperature, we can divide &lt;code&gt;sum&lt;/code&gt; by 7 (the number of days in the week), and console log that value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// this could also be written as sum += arr[i]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's been a whole week! This week's average temperature was &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;degrees.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's not the end of the week yet.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#switch-statements" class="anchor"&gt;
  &lt;/a&gt;
  Switch statements
&lt;/h2&gt;

&lt;p&gt;The other kind of conditional statment supported in JavaScript is the &lt;strong&gt;switch statement&lt;/strong&gt;. A &lt;code&gt;switch&lt;/code&gt; statement evaluates an expression, and depending on that evaluation, tries to match it to a specified &lt;code&gt;case&lt;/code&gt;. If a &lt;code&gt;case&lt;/code&gt; matches, then that &lt;code&gt;case&lt;/code&gt;'s statement executes. A &lt;code&gt;switch&lt;/code&gt; statement looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (expression) {
    case label_1:
        statement_1;
        break;
    case label_2:
        statement_2;
        break;
    default:
        statement_default;
        break;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, &lt;code&gt;expression&lt;/code&gt; is evaluated. Then, your program will look for a &lt;code&gt;case&lt;/code&gt; whose label matches the value of the &lt;code&gt;expression&lt;/code&gt;, and then the associated statement is executed. If no matching label can be found, your program will look for the &lt;code&gt;default&lt;/code&gt; clause (which is optional), and executes the associated statement. If there is no &lt;code&gt;default&lt;/code&gt; clause, your program will simply exit the &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; statements tell your program to break out of the &lt;code&gt;switch&lt;/code&gt; once that &lt;code&gt;case&lt;/code&gt;'s statement is executed. &lt;code&gt;break&lt;/code&gt; statements are optional. If you don't include them, your program will stay in the &lt;code&gt;switch&lt;/code&gt; statement, and will execute the next statement in the &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;For example, let's say you're trying to decide what jacket to wear, and it depends on the weather. If it's hot, warm, or cold out, different jackets are appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No jacket needed.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Warm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bring a light jacket.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bring your heavy jacket.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You probably should bring a jacket anyway, just in case!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You may be wondering, what exactly do the &lt;code&gt;break&lt;/code&gt; statements do? Using the same example, let's say you didn't include any of the &lt;code&gt;break&lt;/code&gt; statements, and that &lt;code&gt;weather = "Hot"&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No jacket needed.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Warm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bring a light jacket.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bring your heavy jacket.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You probably should bring a jacket anyway, just in case!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output would be:&lt;br&gt;
&lt;code&gt;No jacket needed. Bring a light jacket. Bring your heavy jacket. You probably should bring a jacket anyway, just in case!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is because the label for the first &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;"Hot"&lt;/code&gt;, matches &lt;code&gt;weather&lt;/code&gt;, so that statement executes. Then, each subsequent statement executes, since there are no &lt;code&gt;break&lt;/code&gt;s telling your program to stop.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-ternary-operator" class="anchor"&gt;
  &lt;/a&gt;
  The ternary operator
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;ternary operator&lt;/strong&gt; is not a type of conditional statement. Instead, it's an operator that checks a condition. It's a single line of code, and because it's so condensed, it's often used as a shortened version of a simple &lt;code&gt;if...else&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The ternary operator is structured like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;condition ? expressionIfTrue : expressionIfFalse
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;condition&lt;/code&gt; is an expression that's evaluated. If &lt;code&gt;condition&lt;/code&gt; is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/truthy"&gt;&lt;em&gt;truthy&lt;/em&gt;&lt;/a&gt; (meaning that it is &lt;code&gt;true&lt;/code&gt;, or its value can be converted to &lt;code&gt;true&lt;/code&gt;), &lt;code&gt;expressionIfTrue&lt;/code&gt; is executed. If &lt;code&gt;condition&lt;/code&gt; is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/falsy"&gt;&lt;em&gt;falsy&lt;/em&gt;&lt;/a&gt; (meaning that it is &lt;code&gt;false&lt;/code&gt;, or its value can be converted to &lt;code&gt;false&lt;/code&gt;, which includes &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;expressionIfFalse&lt;/code&gt; is executed.&lt;/p&gt;

&lt;p&gt;For example, let's say the original &lt;code&gt;if...else&lt;/code&gt; statement checks if a number is positive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Positive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Negative&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The condition is &lt;code&gt;num &amp;gt;=0&lt;/code&gt;, which means that's what we're checking. Using a ternary operator, that will go on the left side of the question mark &lt;code&gt;?&lt;/code&gt;. If it's truthy, we'll want to console log &lt;code&gt;"Positive"&lt;/code&gt;, so that's the first expression after the &lt;code&gt;?&lt;/code&gt;. If it's falsy, we'll want to console log &lt;code&gt;"Negative"&lt;/code&gt;, so that's the second expression, and it comes after the colon &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can store the result of the ternary operator into a variable called &lt;code&gt;positiveCheck&lt;/code&gt;. Then, we can console log the value of that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positiveCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Positive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Negative&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positiveCheck&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Some people like ternary operators because they save space when working with simple conditional statements, but not everyone likes them or uses them. Whether or not you use ternary operators, it's important to know what they look like and how to read them in case you encounter them.&lt;/p&gt;




&lt;p&gt;Please let me know in the comments if you have any questions or other ways of thinking about conditional statements in JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>technicalinterviews</category>
      <category>conditionals</category>
    </item>
    <item>
      <title>Have you tried these cool CSS Games?</title>
      <author>Hardik Chopra</author>
      <pubDate>Thu, 14 Jan 2021 15:05:03 +0000</pubDate>
      <link>https://dev.to/hardikchopra242/have-you-tried-these-cool-css-games-33gi</link>
      <guid>https://dev.to/hardikchopra242/have-you-tried-these-cool-css-games-33gi</guid>
      <description>&lt;p&gt;There are many topics in CSS which require practice to master.&lt;br&gt;
Here I will be sharing some of the CSS games which I found worth trying if you want to make a strong grip on CSS.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#1-css-battle" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. CSS Battle&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Compete&lt;/strong&gt; with thousands of people by playing different CSS based games and completing various challenges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKjO5oAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zu6n40ftgde25ohhyz7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKjO5oAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zu6n40ftgde25ohhyz7p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://cssbattle.dev/"&gt;Click Here to Play&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#2-flexbox-froggy" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Flexbox Froggy&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Guide Froggy to the lilypad using &lt;strong&gt;Flexbox&lt;/strong&gt; properties. This game is fantastic to visualize flexbox properties as you practice them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--47iElrkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2sim8qkvtv50st8mij0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47iElrkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2sim8qkvtv50st8mij0g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://flexboxfroggy.com/"&gt;Click Here to Play&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#3-css-diner" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. CSS Diner&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Have you ever felt confused using CSS Selectors? Well, this game is for you. Write different &lt;strong&gt;CSS Selectors&lt;/strong&gt; to place different objects as mentioned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ydhl1BPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jgjpnrhhv9uda4dittdh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ydhl1BPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jgjpnrhhv9uda4dittdh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://css-diner.netlify.app/"&gt;Click Here to Play&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#4-grid-garden" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Grid Garden&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;CSS Grids is a must to learn and it gives a solution to the menace of aligning the content. &lt;br&gt;
Gird Garden is possibly the best way to get a good grip on &lt;strong&gt;CSS Grid&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puaNDd1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7oyjr1q2p2e1n7mdvxmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puaNDd1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7oyjr1q2p2e1n7mdvxmb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://cssgridgarden.com/"&gt;Click Here to Play&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#5-flexbox-defense" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Flexbox Defense&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Yet another way to practice &lt;strong&gt;flex-box&lt;/strong&gt; properties.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnxeFINF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/628lkrs5sucgneqst1js.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnxeFINF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/628lkrs5sucgneqst1js.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="http://www.flexboxdefense.com/"&gt;Click Here to Play&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;p&gt;&lt;em&gt;If you got to learn something new and useful show some love by giving this post a ❤️&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you also know other cool games then do share them in the comment section below ⬇️&lt;/p&gt;

&lt;p&gt;If you like this article then do check out my other ones 😎&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/hardikchopra242" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HO7HHQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RA8UnVhB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/539145/5833d2c6-09fc-4db8-8a2d-925fbbdac419.jpeg" alt="hardikchopra242 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hardikchopra242/cool-extensions-for-vs-code-48jc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Cool Extensions for VS Code  &lt;/h2&gt;
      &lt;h3&gt;Hardik Chopra ・ Dec 17 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/hardikchopra242" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HO7HHQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RA8UnVhB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/539145/5833d2c6-09fc-4db8-8a2d-925fbbdac419.jpeg" alt="hardikchopra242 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hardikchopra242/master-vs-code-resources-1e4b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Master VS Code + Resources!&lt;/h2&gt;
      &lt;h3&gt;Hardik Chopra ・ Dec 24 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/hardikchopra242" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HO7HHQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RA8UnVhB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/539145/5833d2c6-09fc-4db8-8a2d-925fbbdac419.jpeg" alt="hardikchopra242 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hardikchopra242/do-you-know-markdown-2d2p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Do you know Markdown!&lt;/h2&gt;
      &lt;h3&gt;Hardik Chopra ・ Dec 31 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#markdown&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 proven ways to increase your productivity as a Developer</title>
      <author>Franklin Okolie</author>
      <pubDate>Thu, 14 Jan 2021 13:58:21 +0000</pubDate>
      <link>https://dev.to/developeraspire/5-proven-ways-to-increase-your-productivity-as-a-developer-4lc0</link>
      <guid>https://dev.to/developeraspire/5-proven-ways-to-increase-your-productivity-as-a-developer-4lc0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello there, welcome back to my blog. Every developer go through burnout and stress, the worst and heartbreaking of all of them is not being productive, you may be shipping a product or building something as small as a calculator, but being productive and been able to finish that task not just on time but also very well gives some sense of satisfaction. Most developers often complain of not being productive while some complain about how their productivity drops as the day goes by. In this article, we are going to learn 5 ways we can improve our productivity as a Developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-focus-on-one-thing-at-a-time" class="anchor"&gt;
  &lt;/a&gt;
  1. Focus on one thing at a time
&lt;/h3&gt;

&lt;p&gt;I mean it when I say it, most developers and human, in general, thinks being able to multitask and do million of things at the same time is what makes you productive. That is a big lie.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the one thing you can do now, that by doing it every other thing will become easier or unnecessary? - &lt;strong&gt;Gray .W Keller&lt;/strong&gt; author of The One thing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By simply picking a task for a day and finishing it to the very end before moving to another is a proven way of being very productive. The same productivity is what the 80/20 rules talk about, what is that 20% task you can take that would produce 80% result, you just have to find it and focus on it for the rest of the day, weeks, or month as the case may be, then you can move to another task.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bit by bit, the bucket gets filled - &lt;strong&gt;Todd McLean&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-break-your-task" class="anchor"&gt;
  &lt;/a&gt;
  2. Break your task
&lt;/h2&gt;

&lt;p&gt;Just like in programming, this applies to also our work. Break your task into a smaller unit and start small. If your task is to build a full video player application,  you can start breaking it down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Day1 - Brainstorm on the process.&lt;/li&gt;
&lt;li&gt;Day2 - Make the HTML markup. e.t.c&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this, you are able to keep track of your progress and become productive by achieving each task daily. Bombarding yourself with the whole process in one day can lead to mental stress, burnout, and fatigue which in turn can lead to depression when you are unable to meet this heavy task. So break it down!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-block-distracting-appswebsites" class="anchor"&gt;
  &lt;/a&gt;
  3. Block distracting apps/websites
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://blog.rescuetime.com/communication-multitasking-switches/"&gt;research&lt;/a&gt; carried out by RescueTime, the average digital worker can’t go more than 6 minutes without checking their email or instant messaging. The digital nature of our work and social lives leaves us constantly checking for notifications and this constant distraction hampers our ability to focus on tasks for even short periods of time.&lt;/p&gt;

&lt;p&gt;This really has to change. To be very productive, developers need to minimize and control the amount of time they spend on other apps and websites.&lt;/p&gt;

&lt;p&gt;There are a number of website and app blocker tools on the market and this is one of the key features in Serene, too. You create a list of apps and websites (you can block individual pages, too), which will automatically be blocked during work sessions. You can even prevent notifications from coming through during work hours and they’ll automatically come in once the session has finished.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-choose-your-tools-right" class="anchor"&gt;
  &lt;/a&gt;
  4. Choose your tools right
&lt;/h2&gt;

&lt;p&gt;As software engineers, we are bombarded daily with different tools from different angles, Javascript alone can boast of 10 frameworks for frontend development. Can you imagine? your job as a developer who wants productivity is to pick one of the many tools available that you are most comfortable with and use it, to avoid moving from one framework to another. The same applies to programming languages. I have heard about Bootstrap, Bulma, Materialize e.t.c but I choose to go for TailwindCSS, the one I am most comfortable with.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is essential to have good tools, but it is also essential that the tools should be used in the right way.  - &lt;strong&gt;Wallace .D. Wattles&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good tool improves the way you work. A great tool improves the way you think. - &lt;strong&gt;Jeff Duntemann&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#5-create-a-dedicated-workspace" class="anchor"&gt;
  &lt;/a&gt;
  5. Create a dedicated workspace.
&lt;/h2&gt;

&lt;p&gt;This one is crucial if you work from home or remotely. Don’t just sit on the couch or at the dinner table; create a dedicated workspace where you can go to work and then leave it once you’re done.&lt;/p&gt;

&lt;p&gt;This also includes using the right hardware, for example, you can't learn and train a Machine learning model on a computer with an Intel Atom processor. Not that Intel Atom is a bad processor but it is not the right hardware for machine learning. So pick &lt;br&gt;
 the hardware that best suits your work and you are good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are tested ways and I have used them in my work and I noticed some improvement from my end so I decided to share.&lt;/p&gt;

&lt;p&gt;If you find this article useful, you can like, comment and share.&lt;br&gt;
I would be posting more articles, so be sure to follow to get notified when I post them.&lt;/p&gt;

&lt;p&gt;If you have any questions concerning Go, Javascript, TailwindCSS, Open-source, or this article? You can reach me on &lt;a href="https://twitter.com/DeveloperAspire"&gt;Twitter&lt;/a&gt;. Till next time, see ya. Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your plans to read/learn in 2021?</title>
      <author>Developer Economics</author>
      <pubDate>Thu, 14 Jan 2021 13:52:11 +0000</pubDate>
      <link>https://dev.to/deveconomics/what-are-your-plans-to-read-learn-in-2021-3nkj</link>
      <guid>https://dev.to/deveconomics/what-are-your-plans-to-read-learn-in-2021-3nkj</guid>
      <description>&lt;p&gt;In January we're focusing on planning for an unpredictable future. What are your plans to read/learn in 2021?&lt;/p&gt;

&lt;p&gt;Here are some useful resources to help you plan and focus in the coming months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-resources-amp-articles" class="anchor"&gt;
  &lt;/a&gt;
  Dev Resources &amp;amp; Articles
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.thecrazyprogrammer.com/2020/12/seminar-topics-for-computer-science-engineering.html"&gt;51 latest seminar topics for computer science engineering (CSE).&lt;/a&gt; This post will help you identify the most trending and latest seminar topics for CSE. [THECRAZYPROGRAMMER]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://markodenic.com/50-free-tools-and-resources/"&gt;50 free tools and resources.&lt;/a&gt; Free stuff is always exciting. But, what if it is free and awesome? Free tools and resources you’re gonna love. [MARKODENIC]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developereconomics.com/blog/eight-must-read-books-for-developers-in-2021"&gt;Eight must-read books for developers in 2021.&lt;/a&gt; What are the top books on your reading list this season? Whether you’re learning a new skill or adding depth to your existing knowledge in a particular development area, it’s always a good idea to get a few more recommendations to your list. [DEVELOPERECONOMICS]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=kqVpbwCaYlI"&gt;Learn easier &amp;amp; faster with side-effect learning.&lt;/a&gt; Sometimes the best way to learn is by accident. And some accidents can be...arranged. [YOUTUBE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloudcomputing-news.net/news/2021/jan/08/seven-trends-influencing-devops-and-devsecops-adoption-in-2021/"&gt;Seven trends influencing DevOps and DevSecOps adoption in 2021.&lt;/a&gt; What are these trends and how can they influence DevOps and DevSecOps adoption in tech corporations worldwide? [CLOUDCOMPUTINGNEWS]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/7-best-performance-testing-tools-to-look-out-for-i"&gt;7 best performance testing tools to look out for in 2021.&lt;/a&gt; Comprehensive list of 7 best performance testing tools used widely by performance testing services in 2021 and their key features. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/structured-vs-unstructured-data-getting-to-know-th"&gt;Structured vs. unstructured data: getting to know the difference.&lt;/a&gt; Get a clear understanding of the differences between structured and unstructured data and how you should utilize each in your strategy. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-effectively-scope-your-software-projects-from-planning-to-execution-e96cbcac54b9/"&gt;How to effectively scope your software projects.&lt;/a&gt; Angela Zhang learned that scoping is one of the hardest things to get right. Unfortunately, CS programs in universities don’t really teach you how to scope projects. Here's a consolidation of what she's learned on this topic. [FREECODECAMP]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/angular-a-development-pattern"&gt;Angular - a development pattern.&lt;/a&gt; Learn about an FSM-based state transitions technique for developing robust Angular web applications. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gamedev.net/blogs/entry/2271144-how-to-choose-which-game-to-develop-a-step-by-step-guide/"&gt;How to choose which game to develop? – A step-by-step guide.&lt;/a&gt; No game developer wants to spend months or years on something that will ultimately only sell 100 copies. Even though luck is an important part of game development, it is false to conclude that prior research can’t significantly improve your chances. [GAMEDEV]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.carmenhchung.com/how-to-improve-your-focus-in-2021.html"&gt;How to improve your focus in 2021.&lt;/a&gt; Here are a few takeaways from Carmn Chung. [CARMENCHUNG]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/comparing-9-code-quality-tools-of-2020"&gt;Comparing 9 code quality tools.&lt;/a&gt; It's always a good idea to have good code quality tools in your developer toolbox, helping you manage technical debt by writing clean and maintainable source code. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/kanbanflow-vs-trello-who-wins-the-battle"&gt;KanbanFlow vs. Trello vs. nTask&lt;/a&gt; Knowing the importance of project management software is one thing but to have an idea about the best project management software in the world is a completely different animal. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What do you value the most from developer programs? &lt;a href="https://www.developereconomics.net?utm_medium=devto&amp;amp;utm_source=dev_to&amp;amp;utm_campaign=#246_developer_programs"&gt;Share your thoughts&lt;/a&gt; in our developer survey and help to influence the offerings from the companies you use.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#industry-news" class="anchor"&gt;
  &lt;/a&gt;
  Industry News
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.emberjs.com/ember-3-24-released/"&gt;Ember 3.24 released.&lt;/a&gt; Ember.js 3.24 is an incremental, backwards compatible release of Ember with bug fixes, performance improvements, and minor deprecations. It's an LTS (Long Term Support) candidate. LTS candidates prioritize stability over the addition of new features, and have an extended support schedule. [EMBERJS]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theverge.com/2021/1/7/22212938/wifi-6e-rollout-starting-2021-smartphones-tvs-laptops-vr-routers"&gt;Wi-Fi’s biggest upgrade in decades is starting to arrive.&lt;/a&gt; Many of this year’s new phones, laptops, TVs, routers, and more will come with support for Wi-Fi 6E, a new upgrade to Wi-Fi that’s essentially like expanding your wireless connection from a two-lane road to an eight-lane highway. It’s the biggest upgrade to Wi-Fi in 20 years, and connections should be faster and a lot more reliable because of it. [THEVERGE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arstechnica.com/gadgets/2021/01/app-makers-explore-desperate-measures-to-dodge-apple-privacy-rules/"&gt;Upcoming Apple privacy update has developers desperately seeking dodges.&lt;/a&gt; App developers are exploring surreptitious new forms of user tracking to evade Apple’s new privacy rules, which threaten to upend the mobile advertising industry in the coming months. Early in 2021, an iPhone update will prevent apps from using advertising identifiers known as IDFA without obtaining each user’s explicit consent for targeting. Some app makers say they plan to use invasive tracking techniques such as “device fingerprinting” to work around the new restrictions—even though doing so risks getting them thrown off the App Store if they are caught. [ARSTECHNICA]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-5-new-networking-improvements/"&gt;.NET 5 networking improvements.&lt;/a&gt; Microsoft talk about some of the many improvements in the networking stack. This includes improvements around HTTP, Sockets, networking-related security, and other networking primitives. In this post, I will highlight some of the more impactful and interesting changes in the November release. [DEVBLOGS.MICROSOFT]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://db-engines.com/en/blog_post/85"&gt;PostgreSQL is the DBMS of the Year 2020.&lt;/a&gt;PostgreSQL has already won their DBMS of the Year award in 2017 and 2018, and now becomes the first system to win this title three times. See who the runner-ups were. [DB-ENGINES]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techcrunch.com/2021/01/13/app-stores-saw-record-218-billion-downloads-in-2020-consumer-spend-of-143-billion/"&gt;App stores saw record 218 billion downloads in 2020, consumer spend of $143 million.&lt;/a&gt; Mobile adoption continued to grow in 2020, in part due to the market forces of the COVID-19 pandemic. According to App Annie’s annual “State of Mobile” industry report, mobile app downloads grew by 7% year-over-year to a record 218 billion in 2020. Meanwhile, consumer spending grew by 20% to also hit a new milestone of $143 billion, led by markets that included China, the United States, Japan, South Korea and the United Kingdom. [TECHCRUNCH]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sdtimes.com/msft/typescript-4-2-beta-now-available/"&gt;TypeScript 4.2 beta now available.&lt;/a&gt; There are a number of new features being added, and a number of breaking changes as well. In this version, rest elements can be used in more ways than before. The release also features smarter internals. It now tracks how types were constructed and differentiates type aliases to instances of other aliases. [SDTIMES']&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dlang.org/blog/2021/01/11/a-new-year-a-new-release-of-d/"&gt;A new year, a new release of D.&lt;/a&gt; At DLang Land they are beginning the new year with a new release of the D reference compiler (DMD) and a beta release of the popular LLVM-based D compiler (LDC). D 2.095.0 is crammed full of 27 major changes and 78 fixes from 61 contributors. [DLANG]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nytimes.com/2021/01/12/technology/bitcoin-passwords-wallets-fortunes.html"&gt;Lost passwords lock millionaires out of their Bitcoin fortunes.&lt;/a&gt; Stefan Thomas, a programmer in San Francisco, has 7,002 Bitcoin tucked away — currently worth about $236 million, nearly a quarter billion dollars — but that he has no idea how to access it and can only guess two more passwords before being locked out forever. [NYTIMES] &lt;/p&gt;

&lt;p&gt;Want to receive our emails straight into your inbox? Each month we give away a cozy hoodie to one subscriber. &lt;a href="https://hubs.ly/H0DQ6Xb0"&gt;Sign up here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Minimal Python Package</title>
      <author>Waylon Walker</author>
      <pubDate>Thu, 14 Jan 2021 13:40:52 +0000</pubDate>
      <link>https://dev.to/waylonwalker/minimal-python-package-4k1j</link>
      <guid>https://dev.to/waylonwalker/minimal-python-package-4k1j</guid>
      <description>&lt;p&gt;What does it take to create an installable python package that can be hosted on pypi?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-minimal-python-package" class="anchor"&gt;
  &lt;/a&gt;
  What is the minimal python package
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;setup.py&lt;/li&gt;
&lt;li&gt;my_module.py&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is somewhat inspired by the bottle framework, which is famously created as a single python module.  Yes, a whole web framework is written in one file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-structure" class="anchor"&gt;
  &lt;/a&gt;
  Directory structure
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── setup.py
└── my_pipeline.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setuppy" class="anchor"&gt;
  &lt;/a&gt;
  setup.py
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;py_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"my_pipeline"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"kedro"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#name" class="anchor"&gt;
  &lt;/a&gt;
  name
&lt;/h2&gt;

&lt;p&gt;The name of the package can contain any letters, numbers, "_", or "-".  Even if it's for internal/personal consumption only I usually check for discrepancy with pypi so that you don't run into conflicts. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that pypi treats "-" and "_" as the same thing, beware of name clashes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#version" class="anchor"&gt;
  &lt;/a&gt;
  version
&lt;/h2&gt;

&lt;p&gt;This is the version number of your package.  Most packages follow&lt;br&gt;
&lt;a href="//semver.org"&gt;semver&lt;/a&gt;.  At a high level its three numbers separated by a &lt;code&gt;.&lt;/code&gt; that follow the format &lt;code&gt;major.minor.patch&lt;/code&gt;.  It's a common courtesy to only break APIs on major changes, new releases on minor, and fixes on patch.  This can become much more blurry in practice so checkout &lt;a href="https://semver.org/"&gt;semver.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pymodules" class="anchor"&gt;
  &lt;/a&gt;
  py_modules
&lt;/h2&gt;

&lt;p&gt;Typically most packages use the &lt;code&gt;packages&lt;/code&gt; argument combined with&lt;br&gt;
&lt;code&gt;find_packages&lt;/code&gt;, but for this minimal package, we are only creating one &lt;code&gt;.py&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-packages-instead" class="anchor"&gt;
  &lt;/a&gt;
  Using packages instead
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"kedro"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installrequires" class="anchor"&gt;
  &lt;/a&gt;
  install_requires
&lt;/h2&gt;

&lt;p&gt;These are your external dependencies that come from pypi.  They go in this list but are often pulled in from a file called &lt;code&gt;requirements.txt&lt;/code&gt;.  Other developers may look for this file and want to do a &lt;code&gt;pip install -r&lt;br&gt;
requirements.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean" class="anchor"&gt;
  &lt;/a&gt;
  Clean?
&lt;/h2&gt;

&lt;p&gt;One thing to be careful of here is that everything sits at the top level API, when you users import your module and hit tab they are going to see a lot of stuff unless you hide all of your internal functions behind an &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minimal" class="anchor"&gt;
  &lt;/a&gt;
  Minimal
&lt;/h2&gt;

&lt;p&gt;Can you create a python package with less than two files and less than 8 lines? Should you?  I really like a minimal point to get started from for quick and simple prototypes.  You can always pull a more complicated &lt;code&gt;cookiecutter&lt;/code&gt; template later if the project is successful.&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Generating Random Human-Readable Slugs in JavaScript </title>
      <author>Nick Scialli (he/him)</author>
      <pubDate>Thu, 14 Jan 2021 13:06:56 +0000</pubDate>
      <link>https://dev.to/nas5w/generating-random-human-readable-slugs-in-javascript-559b</link>
      <guid>https://dev.to/nas5w/generating-random-human-readable-slugs-in-javascript-559b</guid>
      <description>&lt;p&gt;Often, we'll see random, human-readable slugs (e.g., &lt;code&gt;brave-purple-penguin&lt;/code&gt;) in the web development world. These slugs offer the uniqueness of a number ID but can be more playful and fun.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#please-give-this-post-a-and-if-this-was-useful" class="anchor"&gt;
  &lt;/a&gt;
  Please give this post a 💓, 🦄, and 🔖 if this was useful!
&lt;/h3&gt;



&lt;h1&gt;
  &lt;a href="#how-to-generate-random-slugs" class="anchor"&gt;
  &lt;/a&gt;
  How to Generate Random Slugs
&lt;/h1&gt;

&lt;p&gt;The key to generating random slugs is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify the parts of speech in each slug position&lt;/li&gt;
&lt;li&gt;Have a list of words for each part of speech&lt;/li&gt;
&lt;li&gt;Randomly select from that list as you iterate through the positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, a common pattern for these slugs is &lt;code&gt;adjective-adjective-noun&lt;/code&gt;. You might therefore have a list of adjectives, a list of nouns, and a list of your word order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adjective&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smiley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;funny&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smelly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;brick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kangeroo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;penguin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;laptop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;adjective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;noun&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, you can &lt;code&gt;map&lt;/code&gt; over your order and grab a random element from the corresponding word list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;partOfSpeech&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;partOfSpeech&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ['funny', 'blue', 'laptop']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you will want to join this array with a &lt;code&gt;-&lt;/code&gt; character so it's kebob-cased:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 'funny-blue-laptop'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-a-package-i-wrote-it" class="anchor"&gt;
  &lt;/a&gt;
  Using a Package (I Wrote It!)
&lt;/h1&gt;

&lt;p&gt;Of course, this is a pain because you have to come up with the words yourself and it's not very configurable. Also, you run out of combinations pretty quickly.&lt;/p&gt;

&lt;p&gt;To help with this, I made an &lt;code&gt;npm&lt;/code&gt; package! It's called &lt;code&gt;random-word-slugs&lt;/code&gt; and it has over 15 million slug combinations (and counting)! Plus, there are a bunch of configuration options, such as being able to specify categories of words that you want.&lt;/p&gt;

&lt;p&gt;Read on to see how it works!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;p&gt;Install with npm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i random-word-slugs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Install with yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add random-word-slugs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;random-word-slugs&lt;/code&gt; package can be used without any parameters and defaults to a three-word, kebab-cased slug. &lt;strong&gt;Currently, the default configuration has 15,660,175 unique slug combinations&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;generateSlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;random-word-slugs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateSlug&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "elegant-green-coat"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;generateSlug&lt;/code&gt; function takes up to two arguments. The first argument is the &lt;code&gt;numberOfWords&lt;/code&gt; in the slug (defaulting to three) and the secon argument is the package &lt;code&gt;options&lt;/code&gt;. The following example makes use of both parameters and provides an option to title-case the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateSlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "Elegant Happy Green Coat"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#available-options" class="anchor"&gt;
  &lt;/a&gt;
  Available Options
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; object can have any partial set of the following key/value pairs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  format: "kebab" | "camel" | "sentence" | "lower" | "title",
  partsOfSpeech: ("adjective" | "noun")[],
  categories: {
    adjective: ("colors" | "appearance" | etc...)[],
    noun: ("person" | "animals" | etc...)[]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that, if provided, &lt;code&gt;partsOfSpeech&lt;/code&gt; must be an array the same length as the number of words you're requesting. If using Typescript, the compiler will check this for you.&lt;/p&gt;

&lt;p&gt;An example of a completed &lt;code&gt;options&lt;/code&gt; object might look like this for a three-word slug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;camel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;partsOfSpeech&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;adjective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;colors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;appearance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;animals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Based on these options, our output might look something like &lt;code&gt;blueBearTall&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typescript-support-for-options" class="anchor"&gt;
  &lt;/a&gt;
  Typescript Support for Options
&lt;/h1&gt;

&lt;p&gt;The package exposes a &lt;code&gt;RandomWordOptions&amp;lt;N&amp;gt;&lt;/code&gt; type, with &lt;code&gt;N&lt;/code&gt; being the number of words in the slug. If you want to use this type to specify an options object, it might look something like this (although a &lt;code&gt;Partial&lt;/code&gt; options object is certainly allowed and probably more common):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RandomWordOptions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;random-word-slugs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RandomWordOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;animals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;places&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;adjective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;colors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emotions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;partsOfSpeech&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Importantly, the generic &lt;code&gt;3&lt;/code&gt; here will enforce &lt;code&gt;partsOfSpeech&lt;/code&gt; being a three-element tuple.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#categories" class="anchor"&gt;
  &lt;/a&gt;
  Categories
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;categories&lt;/code&gt; option allows you to generate your random slug from a subset of categories. Perhaps you only want colorful animals! You can specify one or many categories for the adjectives and nouns that comprise your random slug. The following is a list of categories currently in the repository:&lt;/p&gt;

&lt;p&gt;Adjective Categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;appearance&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;condition&lt;/li&gt;
&lt;li&gt;personality&lt;/li&gt;
&lt;li&gt;shapes&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;li&gt;sounds&lt;/li&gt;
&lt;li&gt;taste&lt;/li&gt;
&lt;li&gt;touch&lt;/li&gt;
&lt;li&gt;quantity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Noun Categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;people&lt;/li&gt;
&lt;li&gt;family&lt;/li&gt;
&lt;li&gt;education&lt;/li&gt;
&lt;li&gt;religion&lt;/li&gt;
&lt;li&gt;business&lt;/li&gt;
&lt;li&gt;animals&lt;/li&gt;
&lt;li&gt;transportation&lt;/li&gt;
&lt;li&gt;thing&lt;/li&gt;
&lt;li&gt;technology&lt;/li&gt;
&lt;li&gt;place&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#assessing-the-combinatorics" class="anchor"&gt;
  &lt;/a&gt;
  Assessing the Combinatorics
&lt;/h1&gt;

&lt;p&gt;When using the package, you might be curious about how many different slug combinations exist. The package exposes a function to help with this called &lt;code&gt;totalUniqueSlugs&lt;/code&gt;. This function can be used without arguments and will assume a three-slug &lt;code&gt;adjective-adjective-noun&lt;/code&gt; format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;totalUniqueSlugs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;random-word-slugs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalSlugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalUniqueSlugs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalSlugs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 100000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;100000&lt;/code&gt; number shown here is just an example and not a representation of the total number of slugs in the package at any moment (that evolves as words are added).&lt;/p&gt;

&lt;p&gt;You can also assess the combinatoric space if you have a different number of words, word ordering, or a subset of categories. In the following example, we'll assume a four-word slug, in the order &lt;code&gt;adjective-noun-adjective-noun&lt;/code&gt;, with only color adjectives and animal nouns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;totalUniqueSlugs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;random-word-slugs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalSlugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalUniqueSlugs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;partsOfSpeech&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adjective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;adjective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;colors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;animals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalSlugs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again, this &lt;code&gt;1000&lt;/code&gt; is just an example. Importantly, this could help you determine that you're not comfortable with this limited combinatoric space and you can choose to add additional categories.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>CSS Flexbox: flex-direction</title>
      <author>Ayu</author>
      <pubDate>Thu, 14 Jan 2021 13:04:20 +0000</pubDate>
      <link>https://dev.to/adiatiayu/css-flexbox-flex-direction-415g</link>
      <guid>https://dev.to/adiatiayu/css-flexbox-flex-direction-415g</guid>
      <description>&lt;p&gt;Hello Fellow Codenewbies 👋&lt;/p&gt;

&lt;p&gt;Flexbox is known as &lt;em&gt;one dimension&lt;/em&gt;.&lt;br&gt;
It means that it deals with one dimension layout at a time, the column or the row.&lt;/p&gt;

&lt;p&gt;When we talk about a column or a row in flexbox, we are talking about the &lt;em&gt;main axis&lt;/em&gt; or the &lt;em&gt;cross axis&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--malgfdF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609719149841/3rx8PuitL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--malgfdF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609719149841/3rx8PuitL.jpeg" alt="cross main axis.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#making-responsive-layout-with-raw-flexdirection-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Making Responsive Layout With &lt;code&gt;flex-direction&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Before we talk about the values of &lt;code&gt;flex-direction&lt;/code&gt;, you can check the playground that I provide below.&lt;br&gt;
The screenshots that I attached in each value's explanation are based on this playground.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/adiati/embed/ZEpBeBd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-values-in-raw-flexdirection-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  The values in &lt;code&gt;flex-direction&lt;/code&gt;:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#row" class="anchor"&gt;
  &lt;/a&gt;
  row
&lt;/h3&gt;

&lt;p&gt;⭐ This the default value.&lt;br&gt;
This value makes the flex container becoming a row and the flex items become columns.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pFnf0P4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412594152/-1iup83xp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFnf0P4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412594152/-1iup83xp.jpeg" alt="row1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rowreverse" class="anchor"&gt;
  &lt;/a&gt;
  row-reverse
&lt;/h3&gt;

&lt;p&gt;Same as &lt;code&gt;row&lt;/code&gt;, but it reverses the order of the flex items.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJ06D7uF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412605130/AOPK3dhIy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJ06D7uF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412605130/AOPK3dhIy.jpeg" alt="row-reverse-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#column" class="anchor"&gt;
  &lt;/a&gt;
  column
&lt;/h3&gt;

&lt;p&gt;This value makes flex container becomes column and flex items become rows.&lt;/p&gt;

&lt;p&gt;In a glimpse, it looks like the default layout when we don't apply &lt;code&gt;display: flex&lt;/code&gt;.&lt;br&gt;
But under the hood, this value &lt;strong&gt;&lt;em&gt;switches the main axis&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
And because there is a change on the main axis, there are changes as well in the behavior of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;justify-content&lt;/code&gt;
will now work &lt;em&gt;vertically&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;align-items&lt;/code&gt;
will now work &lt;em&gt;horizontally&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kuW7iFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412527410/Qnrf-32Tv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kuW7iFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412527410/Qnrf-32Tv.jpeg" alt="column1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#columnreverse" class="anchor"&gt;
  &lt;/a&gt;
  column-reverse
&lt;/h3&gt;

&lt;p&gt;Same as &lt;code&gt;column&lt;/code&gt;, but it reverses the order of the flex items.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqM9acBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412625974/NnCaMYZe1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqM9acBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610412625974/NnCaMYZe1.jpeg" alt="column-reverse-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We usually use &lt;em&gt;media queries&lt;/em&gt; when we want to apply &lt;code&gt;flex-direction&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex-direction&lt;/code&gt; is changing the main axis around.&lt;/li&gt;
&lt;li&gt;The values of &lt;code&gt;flex-direction&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;row (&lt;strong&gt;default&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;row-reverse&lt;/li&gt;
&lt;li&gt;column&lt;/li&gt;
&lt;li&gt;column-reverse&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Author's Note:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This post is one of my TIL notes, mainly based on my learning on &lt;a href="https://scrimba.com/learn/frontend"&gt;The Frontend Developer Career Path on Scrimba&lt;/a&gt; platform.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Getting Started with TailwindCSS - An Overview and Walkthrough Tutorial</title>
      <author>Franklin Okolie</author>
      <pubDate>Thu, 14 Jan 2021 12:37:21 +0000</pubDate>
      <link>https://dev.to/developeraspire/getting-started-with-tailwindcss-an-overview-and-walkthrough-tutorial-4jig</link>
      <guid>https://dev.to/developeraspire/getting-started-with-tailwindcss-an-overview-and-walkthrough-tutorial-4jig</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello there, Welcome back to this blog, today we are going to be looking at how we can get started with TailwindCSS, an open-source CSS framework.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every software engineer is always looking for a tool that can perform the 80/20 rule, that is 20% work and 80% output and this does not exclude programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSS has been perceived to be hard to master and therefore many open-source tools have sprung up such as Bootstrap, Bulma, and the rest, all aimed at minimizing the time and effort it takes to write CSS.&lt;br&gt;
In this article, we would be looking at TailwindCSS another amazing CSS framework aimed at bringing that 80/20 to reality.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#presiquites" class="anchor"&gt;
  &lt;/a&gt;
  Presiquites
&lt;/h3&gt;

&lt;p&gt;This tutorial is aimed at beginners wanting to get started in a CSS framework and must have the knowledge of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic CSS.&lt;/li&gt;
&lt;li&gt;Basic HTML.&lt;/li&gt;
&lt;li&gt;Basic command-line knowledge
## What is TailwindCSS?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TailwindCSS is a utility-first CSS framework packed with classes like &lt;code&gt;flex, pt-4, text-center, and rotate-90&lt;/code&gt; that can be composed to build any design, directly in your markup.&lt;/p&gt;

&lt;p&gt;Utility classes help you work within the constraints of a system instead of littering your stylesheets with arbitrary values. They make it easy to be consistent with color choices, spacing, typography, shadows, and everything else that makes up a well-engineered design system.&lt;/p&gt;

&lt;p&gt;Unlike Bootstrap where classes have been declared for you to use giving zero control over your CSS, making everyone who uses Bootstrap website look alike. But with TailwindCSS, you have only be provided with the utility classes and it is left to you to know what to use them for giving control over your CSS. TailwindCSS classes are easily understood by anyone even a beginner in CSS. Example: &lt;code&gt;bg-orange-100&lt;/code&gt;, this simply means &lt;code&gt;background: orange;&lt;/code&gt; the &lt;code&gt;100&lt;/code&gt; stands for the density you need on the color, and with TailwindCSS you are given from &lt;code&gt;100-900&lt;/code&gt; for you to choose from.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-tailwindcss" class="anchor"&gt;
  &lt;/a&gt;
  Why TailwindCSS?
&lt;/h3&gt;

&lt;p&gt;This may be a question from a total beginner or an experienced CSS framework user. Well, I asked that same question myself. Tailwind gives the freedom to make customization, use utility classes and it is very low level and basic for anyone wishing to start using the CSS framework.  A total beginner in CSS can pick this up and get familiar with it in an hour or 2. Some reasons why you should choose TailwindCSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to understand CSS class name.&lt;/li&gt;
&lt;li&gt;Memorable class name.&lt;/li&gt;
&lt;li&gt;Beginner friendly.&lt;/li&gt;
&lt;li&gt;No rules on how you use class names.&lt;/li&gt;
&lt;li&gt;Totally customizable - You don't need SASS or LESS to overwrite styles.&lt;/li&gt;
&lt;li&gt;Utility-first classes.
With Tailwind you can build a fully functional website frontend without ever leaving your HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tailwindcss-classes-and-output" class="anchor"&gt;
  &lt;/a&gt;
  TailwindCSS classes and Output
&lt;/h3&gt;

&lt;p&gt;Below is a simple example of how Tailwind utility classes work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=" bg-indigo-500 text-white px-4 py-4"&amp;gt;
&amp;lt;h1&amp;gt; Hello &amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqW8hLmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610015533413/zIy3IJogP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqW8hLmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610015533413/zIy3IJogP.png" alt="Screenshot_2021-01-07 Tailwind practice(2).png"&gt;&lt;/a&gt;&lt;br&gt;
Let's deduce the above,  First, we created a &lt;code&gt;div&lt;/code&gt; giving it a Tailwind class of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-indigo-500&lt;/code&gt;: A background color of indigo with a density of 500.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-white&lt;/code&gt;: All text in this &lt;code&gt;div&lt;/code&gt; should be white in color.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;px-4&lt;/code&gt;: Give the &lt;code&gt;div&lt;/code&gt; padding 4 on the x-axis which is left and right.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;py-4&lt;/code&gt;: Give the &lt;code&gt;div&lt;/code&gt; padding 4 on the y-axis which is top and bottom.
From the output above we can tell that the classes worked!.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#basic-utility-classes-and-their-meaning" class="anchor"&gt;
  &lt;/a&gt;
  Basic Utility classes and their meaning.
&lt;/h3&gt;

&lt;p&gt;We would go over some utility classes in this section and their meaning but bear in mind, this is simple and can be taken as you are writing your own CSS only that you are doing it in your HTML file. Let dive in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-red-100&lt;/code&gt;: A background of red with a density of 100, you can choose from &lt;code&gt;100-900&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt, mb, mr, ml&lt;/code&gt;: Simply means margin-top, margin-bottom, margin-right, margin-left. You can therefore use &lt;code&gt;mx&lt;/code&gt; and &lt;code&gt;my&lt;/code&gt; to get the x-axis(left and right) and the y-axis(top and bottom).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pt, pb, pr, pl&lt;/code&gt;: Simply means padding-top, padding-bottom, padding-right, padding-left. You can also use &lt;code&gt;px&lt;/code&gt; and &lt;code&gt;py&lt;/code&gt; to get the x-axis(left and right) and the y-axis(top and bottom).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-orange-200&lt;/code&gt;: A text with the color of orange with a density of 200.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b-gradient-to-r from-pink-200 to-red-500&lt;/code&gt;: This gradient in CSS, coming from the left to right having the color pink at the left then transforming to red at the right.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-center&lt;/code&gt;- This is the same as writing &lt;code&gt;text-align: center;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;font-bold&lt;/code&gt; - The same as writing &lt;code&gt;font-weight: bold;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With TailwindCSS classes as you can see up there, they are very and very basic. It is also similar to CSS properties names. You can always look at the &lt;a href="https://tailwindcss.com/docs"&gt;documentation&lt;/a&gt;  to get the name of any class you feel your CSS needs.&lt;/p&gt;

&lt;p&gt;Another Tailwind example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="bg-gradient-to-r from-yellow-400 via-red-500 to-pink-500 p-10 text-white font-bold text-lg text-center"&amp;gt;
Hello there! My name is Franklin and we are learning TailwindCSS &amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nixtU-PM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610015231960/PsHTkq51g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nixtU-PM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610015231960/PsHTkq51g.png" alt="Screenshot_2021-01-07 Tailwind practice(1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this example, I think I laughed hard trying to recollect the number of lines I would have written in CSS, but I just spun this of with Tailwind, without leaving my HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-guide" class="anchor"&gt;
  &lt;/a&gt;
  Installation guide.
&lt;/h3&gt;

&lt;p&gt;Now that we have seen how amazing Tailwind can be, let look at how we can use it in our project by installing it in our local machine. According to the documentation, there are two ways of installing TailwindCSS. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation via npm&lt;/li&gt;
&lt;li&gt;Using it via CDN - This comes with a lot of limitations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this section, we shall be setting up our environment to be able to use Tailwind, follow along, let explore this sweet framework.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First things first, Open up your preferred Code editor, I use Visual studio code. Make sure you are connected to the internet, as &lt;code&gt;npm&lt;/code&gt; would need the internet to install Tailwind. Done? Good.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now name a folder you would love to use to practice this installation, any name at all. Now open it in your code editor.&lt;/p&gt;

&lt;p&gt;Let create a package.json file to manage our dependencies which in this case is our Tailwind we want to install.&lt;/p&gt;

&lt;p&gt;Open your terminal in your code editor with your folder opened.&lt;/p&gt;

&lt;p&gt;Type:&lt;br&gt;
&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Done? Good. We are getting there.&lt;/p&gt;

&lt;p&gt;We are going to learn how to structure our folders. Create a folder named "src", and in the folder create a CSS file. This would be used to import our tailwind &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;components&lt;/code&gt;, and &lt;code&gt;utilities&lt;/code&gt; styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* in your src/style.css  paste the tailwind directives */
@tailwind base;
@tailwind components;
@tailwind utilities;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are getting there. And you are doing fine, am proud of you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Second step, let create a folder name it anything but am calling mine "public", in this folder create the HTML file we would write the markup in and the CSS file where we shall build our &lt;code&gt;src&lt;/code&gt; file into.
Your structure should like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3uAApjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610018936482/HBZjUt-gE.png" alt="Screenshot_2021-01-07 js-bci7kp - StackBlitz.png"&gt;.
We are ready to install Tailwind, our folder is set!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now open the terminal and type: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install tailwindcss@latest autoprefixer@latest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since Tailwind does not automatically add vendor prefixes to the CSS it generates, we recommend installing autoprefixer to handle this for you as we've shown in the snippet above.&lt;/p&gt;

&lt;p&gt;Now to check if Tailwind is truly installed. Check your &lt;code&gt;package.json&lt;/code&gt; file and you see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "autoprefixer": "^10.1.0",
    "tailwindcss": "^2.0.2"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Indicating that the dependencies and their versions. Did it work? Good. You are killing it. And a file named &lt;code&gt;package.lock.json&lt;/code&gt; and the &lt;code&gt;node_modules&lt;/code&gt; folder, would be present. Like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHK3lR7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610019621121/lCgfsClhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHK3lR7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610019621121/lCgfsClhw.png" alt="Screenshot_2021-01-07 js-bci7kp - StackBlitz(1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Last step: Now let build Tailwind and export the classes to our style sheet ready for us to use. Open your &lt;code&gt;package.json&lt;/code&gt; locate the &lt;code&gt;scripts&lt;/code&gt; key and let edit to this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "build:css": "tailwind build src/style.css -o public/style.css"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From the above, we are asking tailwind to "build or export" it styles ( base, components, utilities) stored in the &lt;code&gt;src/style.css&lt;/code&gt;and export to our own style sheet in the &lt;code&gt;public/style.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now open your terminal and run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run build:css&lt;/code&gt;.  Now check your &lt;code&gt;public/style.css&lt;/code&gt; to confirm. Cheers!!! We just installed TailwindCSS. Horray.&lt;/p&gt;

&lt;p&gt;Don't forget to link to &lt;code&gt;public/stylesheet&lt;/code&gt; to your HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="public/stylesheet"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This installation may look foreign to you and that is okay, do it 3 more times and it would stick, in this  &lt;a href="https://developeraspire.hashnode.dev/consistency-as-a-developer"&gt;article&lt;/a&gt;, I talked about consistency as a developer, doing it consistently would make it stick, and you can always go back up and read through again in case you get stuck. Congratulations on choosing Tailwind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://tailwindcss.com/docs"&gt;Tailwind Docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/TailwindLabs/videos"&gt;Tailwind Labs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=UBOj6rqRUME"&gt;Traversy Media&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=bxmDnn7lrnk&amp;amp;list=PL4cUxeGkcC9gpXORlEHjc5bgnIi5HEGhw"&gt;Net Ninja series&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading, in the next article we would build something with Tailwind, so follow me to be notified when it is posted.&lt;/p&gt;

&lt;p&gt;Do you have any questions concerning Go, Javascript, Tailwind, Open-source? You can reach me on Twitter &lt;a href="https://twitter.com/DeveloperAspire"&gt;here&lt;/a&gt;. Till next time, see ya. Thank you&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
