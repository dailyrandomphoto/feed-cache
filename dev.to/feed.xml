<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 14 Dec 2021 22:36:27 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1lpg</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1lpg</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorial-time"&gt;
  &lt;/a&gt;
  Tutorial time
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/uche_azubuko"&gt;@uche_azubuko&lt;/a&gt;
, this is such a fantastic and simple-to-navigate tutorial on using Strapi to build an API. Great work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/uche_azubuko" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HZe95Y---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---rZY5ZOi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/503344/e06f7d57-97eb-4963-936f-403317dc18e6.jpg" alt="uche_azubuko"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/uche_azubuko/how-to-build-an-api-using-strapi-3ibf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Build an API using Strapi&lt;/h2&gt;
      &lt;h3&gt;Uchechukwu Azubuko „Éª Dec 7 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lets-end-the-software-fear-and-discouragement"&gt;
  &lt;/a&gt;
  Let's end the software fear and discouragement
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jordan_smith"&gt;@jordan_smith&lt;/a&gt;
's post is a fantastic look inside some of the ways that early-career developers are frequently discouraged from pursuing a career in software. Let's inform ourselves together so we can make these myths a thing of the past. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jordan_smith" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKkucfrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_MW5o2yi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/770485/2fbaed74-ccd3-4b53-82e4-b9cad28d197d.jpg" alt="jordan_smith"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jordan_smith/6-myths-keeping-you-from-becoming-a-software-engineer-4gf5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Myths Keeping You From Becoming a Software Engineer&lt;/h2&gt;
      &lt;h3&gt;Jordan Smith „Éª Dec 8 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#optimizing-sloooooow-websites"&gt;
  &lt;/a&gt;
  Optimizing sloooooow websites
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alexsan28195851"&gt;@alexsan28195851&lt;/a&gt;
 came through with a super-helpful annotated list of reasons why you are able to cook breakfast and run a few laps around the block while your website loads. Let's fix it!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexsan28195851" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzyyMC4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oXYDEFB8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/454969/4e2dc667-a386-4849-884d-533ca3d5dab3.png" alt="alexsan28195851"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexsan28195851/why-your-website-is-loading-so-slowly-2ihl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Your Website Is Loading So Slowly&lt;/h2&gt;
      &lt;h3&gt;Alex Sanders „Éª Dec 10 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#everyone-on-the-same-page"&gt;
  &lt;/a&gt;
  Everyone on the same page
&lt;/h2&gt;

&lt;p&gt;That's &lt;a class="mentioned-user" href="https://dev.to/amyoulton"&gt;@amyoulton&lt;/a&gt;
's goal when it comes to coders and non-coders! In this post, you'll find advice on "effectively explain[ing] your projects to non-coding members of your team" so that the entire org can feel unified and on the same side. üèÜ  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/amyoulton" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URMcwv1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rz8uVdo6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618716/985cdde0-41c2-4924-9c59-23cd90ce5294.jpeg" alt="amyoulton"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amyoulton/how-to-explain-coding-projects-to-a-team-of-non-coders-36eg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To: Explain Coding Projects To A Team Of Non-Coders&lt;/h2&gt;
      &lt;h3&gt;Amy Oulton „Éª Dec 8 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#no-job-is-perfect"&gt;
  &lt;/a&gt;
  No job is perfect
&lt;/h2&gt;

&lt;p&gt;Including software development. &lt;a class="mentioned-user" href="https://dev.to/vibalijoshi"&gt;@vibalijoshi&lt;/a&gt;
 takes a look at some of the downsides of working in this field so we can work together to overcome them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vibalijoshi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HS_Sh1nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uNPcFSS5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/484969/b46c134b-9635-443c-9adc-a80d19a36420.jpeg" alt="vibalijoshi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vibalijoshi/the-dark-side-of-software-development-441e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Dark Side of Software Development &lt;/h2&gt;
      &lt;h3&gt;vibalijoshi „Éª Dec 13 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#big-takeaways-from-react-conf-2021"&gt;
  &lt;/a&gt;
  Big takeaways from React Conf 2021
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alexeagleson"&gt;@alexeagleson&lt;/a&gt;
 attended React Conf 2021 and put together a list of some of the new topics they found most compelling. Take a look!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexeagleson" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuW2O9GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5rt-l1WO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/657194/09849883-a2f7-471a-8ef0-f5e3a5236849.png" alt="alexeagleson"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexeagleson/learnings-from-react-conf-2021-17lg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learnings from React Conf 2021&lt;/h2&gt;
      &lt;h3&gt;Alex Eagleson „Éª Dec 9 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#gametime"&gt;
  &lt;/a&gt;
  Gametime
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/zippcodder"&gt;@zippcodder&lt;/a&gt;
 shares their process and methods for creating games from scratch using HTML Canvas. You'll find a lot of great info in here that will help you design your own!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/zippcodder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sODuhnVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xItTDIQA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/678971/150bdcfc-9da5-4068-9153-1e91597ef2dc.jpeg" alt="zippcodder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zippcodder/complete-guide-to-building-games-in-the-browser-kp6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt; Complete Guide to Building Games in the Browser &lt;/h2&gt;
      &lt;h3&gt;Deon Rich „Éª Dec 9 „Éª 30 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#gamedev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Connecting High School Students to Internships - Interniac</title>
      <author>Christian Stefaniw</author>
      <pubDate>Tue, 14 Dec 2021 22:20:43 +0000</pubDate>
      <link>https://dev.to/christianstefaniw/connecting-high-school-students-to-internships-interniac-1m1g</link>
      <guid>https://dev.to/christianstefaniw/connecting-high-school-students-to-internships-interniac-1m1g</guid>
      <description>&lt;p&gt;Given how competitive University admissions are and how often the average University student changes majors due to career confusion, getting a high school internship is more valuable than ever before. However, pre-university work experience is difficult to come by and oftentimes opportunities are given to students who have strong networks (either through a parent or their school). Today, there is no platform through which high school students all over the country can find an internship on their own. We aim to build a platform that supports high schoolers attending public schools and empowers businesses in hiring bright students. Interniac fills the gap in our education system by simplifying the process for employers to start internship programs and source candidates who are eager to gain valuable out-of-the-classroom work experience. &lt;/p&gt;

&lt;p&gt;Our mission is to bring you opportunities, whether that be an internship or a chance to speak to professionals in the field you are interested in. We strive to help you build your future. Join our platform to learn more about what opportunities Interniac can offer you!&lt;/p&gt;

&lt;p&gt;Please check out this OPENSOURCE project here and don‚Äôt forget to leave a star!&lt;br&gt;
&lt;a href="https://www.github.com/interniac/Interniac-website"&gt;https://www.github.com/interniac/Interniac-website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>String Operations On Phone Numbers In SQL</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 14 Dec 2021 21:14:23 +0000</pubDate>
      <link>https://dev.to/arctype/string-operations-on-phone-numbers-in-sql-4p1j</link>
      <guid>https://dev.to/arctype/string-operations-on-phone-numbers-in-sql-4p1j</guid>
      <description>&lt;p&gt;When dealing with SQL databases, users will have to interact with different data types and schemas depending on the project's requirements. Since databases are used in many different applications and support multiple platforms, devices, and users, there may be differences in how data is entered, even in a simple field like a phone number.&lt;/p&gt;

&lt;p&gt;For example, one set of users will enter the phone number with the country code, while the others may simply ignore the country code. Therefore, it is essential for database users to know how to clean data in a SQL database. In this post, we will see how to utilize SQL string operations on phone number fields to properly clean, format, and extract data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-care-about-data-cleaning"&gt;
  &lt;/a&gt;
  Why do we care about data cleaning?
&lt;/h2&gt;

&lt;p&gt;Data comes in all forms and sizes. Most of the time, it will be raw data, without proper formatting. Data cleaning allows users to filter, sort, and format this raw data to extract meaningful information from it. Data cleaning also makes data analysis a much more efficient process as an additional benefit.&lt;/p&gt;

&lt;p&gt;Let's assume we have a text field that captures user information and asks users to enter valuable information like phone numbers. We need to clean this text field to make the phone numbers usable. How would we go about doing that? To begin with, we need to understand SQL string operations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-sql-string-operations"&gt;
  &lt;/a&gt;
  What are SQL string operations?
&lt;/h2&gt;

&lt;p&gt;String operations are functions that can be used to manipulate strings. These string operators (also called string functions) take a string as input, process it according to the specified function, and return a string as the output. The availability of these functions will differ depending on the database. For example, the following is a list of commonly used string functions in MySQL:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-types-of-string-operations"&gt;
  &lt;/a&gt;
  Common Types of String Operations
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LEFT / RIGHT&lt;/td&gt;
&lt;td&gt;Extract a specified number of characters from a string (starting from left or right)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRIM&lt;/td&gt;
&lt;td&gt;Remove leading or trailing spaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSITION / STRPOS&lt;/td&gt;
&lt;td&gt;Analogous to the Location function, where a numerical value of the position of the specified substring is provided.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUBSTR&lt;/td&gt;
&lt;td&gt;Extract the specified substring from a specific location to match the specified length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONCAT&lt;/td&gt;
&lt;td&gt;Combine two or more strings to make a single string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COALESCE&lt;/td&gt;
&lt;td&gt;Replace null values with a specified value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FORMAT&lt;/td&gt;
&lt;td&gt;Formats the value to the specified format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REGEXP&lt;/td&gt;
&lt;td&gt;Matches string to a regular expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REGEXP_SUBSTR&lt;/td&gt;
&lt;td&gt;Extracts value for the matching regular expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STR&lt;/td&gt;
&lt;td&gt;Convert numerical value to string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REVERSE&lt;/td&gt;
&lt;td&gt;Reverses the specified string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REPLACE&lt;/td&gt;
&lt;td&gt;Replaces the specified string with the given value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The full list of available string &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html"&gt;functions and operators&lt;/a&gt; is available in the official documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-string-operations-with-phone-numbers"&gt;
  &lt;/a&gt;
  How to use string operations with phone numbers
&lt;/h3&gt;

&lt;p&gt;Now we have a basic understanding of string operations and related functions in SQL! So, let's look at how exactly we can utilize some of these functions on phone numbers to extract and format data. For all the examples provided here, we will be using the &lt;a href="https://arctype.com/"&gt;Arctype SQL client&lt;/a&gt; with a MySQL database in a Windows environment with the following dataset.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dCIHFog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GthFAsfTQXMYTIToeauZ_WryC_tXjYRix9ltU1H6OpCDyiuyJRY4PZbH7Ipbwd-Nk85S1cIJak2nHpezbi83n0UV3goHHxCXGcdrWo3Mo7JXPs5yQlxlwWNhErxMcrXGtL85q15Y" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dCIHFog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GthFAsfTQXMYTIToeauZ_WryC_tXjYRix9ltU1H6OpCDyiuyJRY4PZbH7Ipbwd-Nk85S1cIJak2nHpezbi83n0UV3goHHxCXGcdrWo3Mo7JXPs5yQlxlwWNhErxMcrXGtL85q15Y" alt="" width="589" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#properly-format-a-phone-number"&gt;
  &lt;/a&gt;
  Properly format a phone number
&lt;/h2&gt;

&lt;p&gt;We can utilize the &lt;code&gt;SUBSTR&lt;/code&gt; command to format phone numbers. It will extract parts of the number and use the &lt;code&gt;CONCAT&lt;/code&gt; to join the specific parts together. In the following example, we have broken down the phone number into three distinct sections and combined them together with the formatting as a new field called &lt;code&gt;num_formatted&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    phone_num,
    CONCAT(
        '(',
        SUBSTR(phone_num, 1, 3),
        ') ',
        SUBSTR(phone_num, 4, 3),
        '-',
        SUBSTR(phone_num, 7)
    ) AS num_formatted
FROM
    EmpDetails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of the operation is show below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJyq0_oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/6nBWFvsiL1HDeJAjs1MtImDFOjdPospXcEgT59Cn_abDUKNKSsmy4IlLXe3fSYMMLMiIpEQ4dDmxRX8D093xBmtcuNtuRlUetyjSiP-IPIKKcckQkrh98HycVXFD03VvbQQi6MbS" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJyq0_oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/6nBWFvsiL1HDeJAjs1MtImDFOjdPospXcEgT59Cn_abDUKNKSsmy4IlLXe3fSYMMLMiIpEQ4dDmxRX8D093xBmtcuNtuRlUetyjSiP-IPIKKcckQkrh98HycVXFD03VvbQQi6MbS" alt="Cleaning phone numbers - output of example." width="880" height="857"&gt;&lt;/a&gt;&lt;br&gt;
You can create a new column to save the formatted number using the &lt;code&gt;ALTER TABLE&lt;/code&gt; command. It will create a new column and update it with the formatted numbers.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE EmpDetails
ADD formatted_number VARCHAR(255);

UPDATE
    EmpDetails
SET
    formatted_number = (
        SELECT
            CONCAT(
                '(',
                SUBSTR(phone_num, 1, 3),
                ') ',
                SUBSTR(phone_num, 4, 3),
                '-',
                SUBSTR(phone_num, 7)
            ) AS num_formatted
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of the above operation is shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V06t5tNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/x4oAVtlgD7slhbO8FNutYG522dQ-HQ1QsqnyKAjm_k-7YE-KJMoVwqrQ9WZ-I7YaAu80VlAMO37EMezP8OK2ibd25nbt61xwUZFXpOjdU62pvlSK2n1e3eV7PU6fMU-adQmQIZkK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V06t5tNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/x4oAVtlgD7slhbO8FNutYG522dQ-HQ1QsqnyKAjm_k-7YE-KJMoVwqrQ9WZ-I7YaAu80VlAMO37EMezP8OK2ibd25nbt61xwUZFXpOjdU62pvlSK2n1e3eV7PU6fMU-adQmQIZkK" alt="Screeshot of a query in Arctype." width="880" height="857"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--630II7DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lFXRuKYPsQbKejsrdMAKuF0jUk-SFjWruI0RY9NHuZgw-DWBRw2y92YYDr8o8u27rnn5q2wQG0u3QpQ6AAj2xiSGTB_3tJom_dkTRpwHoN6UVeQHJhjhWbMneznBT6DMg9ZLozcL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--630II7DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lFXRuKYPsQbKejsrdMAKuF0jUk-SFjWruI0RY9NHuZgw-DWBRw2y92YYDr8o8u27rnn5q2wQG0u3QpQ6AAj2xiSGTB_3tJom_dkTRpwHoN6UVeQHJhjhWbMneznBT6DMg9ZLozcL" alt="Screenshot of data from a query to convert phone numbers to formatted data." width="723" height="333"&gt;&lt;/a&gt;&lt;br&gt;
We can modify our SQL command to include the &lt;code&gt;REPLACE&lt;/code&gt; function if there are additional characters in the phone number field, such as dashes and brackets. This function can be used to remove unnecessary characters and whitespaces in a string. Now let's further format the &lt;code&gt;formmated_number&lt;/code&gt; field to include the country code.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    formatted_number,
    CONCAT(
        '+1 '
        '(',
        SUBSTR(num_cleansed, 1, 3),
        ') ',
        SUBSTR(num_cleansed, 5, 3),
        '-',
        SUBSTR(num_cleansed, 7)
    ) AS num_formatted
FROM
    (
        SELECT
            formatted_number,
            REPLACE(REPLACE(REPLACE(REPLACE(formatted_number, '(', ''), ')', ''), '-', ''), ' ','') as num_cleansed
        FROM
            EmpDetails
    ) FormattedPhoneNumbers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the above statement, the &lt;code&gt;REPLACE&lt;/code&gt; function is used to remove the brackets, dashes, and whitespaces from the &lt;code&gt;formatted_number&lt;/code&gt; field before undergoing the formatting process.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbK-jDwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/SHyamdLWcG-XUUs9EDR-YmfYiPqop-4EUo_eLfVBajvannfaLs-Rs0DYrUEi8zOJCcZMBhAn-q9azYBgDRNyXkmYMgi1-EaYJbJa-oOzKfg-H43MzFKe8DBMDDfrxFP9AOmbU3DH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbK-jDwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/SHyamdLWcG-XUUs9EDR-YmfYiPqop-4EUo_eLfVBajvannfaLs-Rs0DYrUEi8zOJCcZMBhAn-q9azYBgDRNyXkmYMgi1-EaYJbJa-oOzKfg-H43MzFKe8DBMDDfrxFP9AOmbU3DH" alt="Screenshot of query results." width="880" height="857"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-parts-of-a-phone-number"&gt;
  &lt;/a&gt;
  Extracting parts of a phone number
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;code&gt;LEFT&lt;/code&gt; and &lt;code&gt;RIGHT&lt;/code&gt; functions to specify and extract different parts of the phone number. In the following example, we will extract the area code of the phone number using the &lt;code&gt;LEFT&lt;/code&gt; function and the last four digits using the &lt;code&gt;RIGHT&lt;/code&gt; function based on the &lt;code&gt;num_formatted&lt;/code&gt; field.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    REPLACE(LEFT(formatted_number, 4), '(', '') As 'Area Code',
    RIGHT(formatted_number, 4) AS 'Last Four Digits'
FROM
    EmpDetails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the &lt;code&gt;REPLACE&lt;/code&gt; function is used to remove the bracket from the selected number block. The result of the query is shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0diCTznr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/q9y3zhnilW5anfcrCd7vma9yv2A9mqWqDPj9Mep7RJGt6P7KqtdgQFZkXu_3J_Qsvn3NA6bJc8oAvor_KlutuPM_Mxnw_LUocIUJAerLsENLFNPR4LoVratj3JxeGpYXOU9PiWYY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0diCTznr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/q9y3zhnilW5anfcrCd7vma9yv2A9mqWqDPj9Mep7RJGt6P7KqtdgQFZkXu_3J_Qsvn3NA6bJc8oAvor_KlutuPM_Mxnw_LUocIUJAerLsENLFNPR4LoVratj3JxeGpYXOU9PiWYY" alt="Query result in Arctype." width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-phone-numbers-from-a-text-block"&gt;
  &lt;/a&gt;
  Extracting phone numbers from a text block
&lt;/h3&gt;

&lt;p&gt;One of the most common tasks in the world of data cleaning is extracting phone numbers from a text block. The complexity and feasibility of this task will mostly depend on the composition of the text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-a-phone-number-with-regular-expressions"&gt;
  &lt;/a&gt;
  Extracting a phone number with regular expressions
&lt;/h3&gt;

&lt;p&gt;The easiest way to extract phone numbers is to utilize regular expressions to target the specific phone number formats. Extracting data has become far simpler with the introduction of functions like &lt;code&gt;REGEXP_SUBSTR&lt;/code&gt; in MySQL 8.0. We will be populating the details column with some phone numbers in different formats, as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWzFo69---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/URH-eI47WujCbzOd-iMSDw6pjIeZ_jrInGRqdAY40duKgLBohwoddkocn7m0ORZXjULHFLLU5VC0FDhlKPnMols0JZCvaZLN6BMJjb_cSzl0Nd-iGSOg5KKUMm-vKbeTuYGVMBqe" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWzFo69---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/URH-eI47WujCbzOd-iMSDw6pjIeZ_jrInGRqdAY40duKgLBohwoddkocn7m0ORZXjULHFLLU5VC0FDhlKPnMols0JZCvaZLN6BMJjb_cSzl0Nd-iGSOg5KKUMm-vKbeTuYGVMBqe" alt="Arctype showing query results." width="850" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifying-rows-with-matching-phone-numbers"&gt;
  &lt;/a&gt;
  Identifying Rows with Matching Phone Numbers
&lt;/h2&gt;

&lt;p&gt;First, we need to figure out which rows consist of data matching our requirements. In this case, the following regular expressions will be used on the details field.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any consecutive 10 digits&lt;/li&gt;
&lt;li&gt;Formatted number (XXX-XXX-XXXX)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    *
FROM
    EmpDetails
WHERE
    # Any 10 Digits
    details REGEXP '[[:digit:]]{10}'
    # Formatted Number (XXX-XXX-XXXX)
    OR details REGEXP '[0-9]{3}-[0-9]{3}-[0-9]{4}';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results of the query can be seen below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--359BAnyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/gr0M_4Igenf8SpYo-UipkxLodEw7Oj2Dbdv5RqQEjjqCUFsx7E9WFNMu7zp3dGBj9n_xLotlL2xioEWgGyRPok3HcFi6SG6SjH8xSfGWtxJCBqiIjXt5q-RESodCEAcVKOcVh0Y6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--359BAnyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/gr0M_4Igenf8SpYo-UipkxLodEw7Oj2Dbdv5RqQEjjqCUFsx7E9WFNMu7zp3dGBj9n_xLotlL2xioEWgGyRPok3HcFi6SG6SjH8xSfGWtxJCBqiIjXt5q-RESodCEAcVKOcVh0Y6" alt="Regexp query results screenshot." width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-the-phone-numbers"&gt;
  &lt;/a&gt;
  Extracting the phone numbers
&lt;/h2&gt;

&lt;p&gt;Since we have identified the rows, the next step is to extract the phone numbers. It can be done using the &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-substr"&gt;REGEXP_SUBSTR&lt;/a&gt; function to extract the substring which matches the given regular expression. As we need to query two different regular expressions, we will be using the &lt;a href="https://www.w3schools.com/sql/func_mysql_concat_ws.asp"&gt;CONCAT_WS&lt;/a&gt; function to combine the results of both expressions into a single column.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    emp_id,
    name,
    email,
    CONCAT_WS(
        '',
        REGEXP_SUBSTR(details, '^[0-9]+$', 1, 1, 'm'),
        REGEXP_SUBSTR(details, '[0-9]{3}-[0-9]{3}-[0-9]{4}', 1, 1, 'm')
    ) AS extracted_phone_numbers
FROM
    (
        SELECT
            *
        FROM
            EmpDetails
        WHERE
            details REGEXP '[[:digit:]]{10}'
            OR details REGEXP '[0-9]{3}-[0-9]{3}-[0-9]{4}'
) ExtractedDetails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of this operation can be seen below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2krFoSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/4H4EhB8hHKMbg39_i5NjVLPCMChbR797f76HxJ-LeXI2OxIHqOBpWNsgFzTIWh9R5KmkllxiEaMLt_LpqwQAGgXIVwA9mJkuUKN4Op10zQ9UXH5Ytbr9lG5AWCDqwGeoIUEZZ6pv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2krFoSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/4H4EhB8hHKMbg39_i5NjVLPCMChbR797f76HxJ-LeXI2OxIHqOBpWNsgFzTIWh9R5KmkllxiEaMLt_LpqwQAGgXIVwA9mJkuUKN4Op10zQ9UXH5Ytbr9lG5AWCDqwGeoIUEZZ6pv" alt="Screenshot of phone number extraction." width="880" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-multiple-phone-numbers-in-a-single-field"&gt;
  &lt;/a&gt;
  Handling multiple phone numbers in a single field
&lt;/h2&gt;

&lt;p&gt;To query results from a single field with multiple numbers, we need to create a stored procedure that loops through the desired field to capture all matching regex patterns. For instance, let's see how to extract multiple phone numbers from the details field of emp_id 1702 (Dan).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELIMITER $$
CREATE PROCEDURE get_number_of_matches_full()
BEGIN
  DECLARE regex_match INT DEFAULT 1;
  DECLARE current_number INT DEFAULT 1;
  WHILE regex_match &amp;gt;= 1 DO
    CREATE TABLE IF NOT EXISTS extracted_numbers_table (
        `emp_id` int NOT NULL,
        `name` varchar(255) DEFAULT NULL,
        `email` varchar(255) DEFAULT NULL,
        `extracted_phone_num` varchar(255) DEFAULT NULL
    );
    INSERT INTO extracted_numbers_table (emp_id, name, email, extracted_phone_num)
    SELECT emp_id, name, email, REGEXP_SUBSTR(details, '[0-9]{3}-[0-9]{3}-[0-9]{4}', 1, current_number, 'm') FROM EmpDetails WHERE emp_id = 1702;
    SET current_number = current_number + 1;
    IF ((SELECT REGEXP_SUBSTR(details, '[0-9]{3}-[0-9]{3}-[0-9]{4}', 1, current_number, 'm') FROM EmpDetails WHERE emp_id = 1702) IS NULL) THEN
        SET regex_match = 0;
    END IF;
  END WHILE;
END $$

DELIMITER;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of this operation is shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeYKT-Bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/RFQF8Zl9riqJCxvQy7ITeuTb578Xd3Px2IodqkvWD3JT1E3Xw-kKPzWKUQIIF5zovG-CEo-LuG8QKtXOcKvov394gxQGLciADWU2Az_xVcogJI633S8D6pkGB187sB38gYhBbTeZ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeYKT-Bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/RFQF8Zl9riqJCxvQy7ITeuTb578Xd3Px2IodqkvWD3JT1E3Xw-kKPzWKUQIIF5zovG-CEo-LuG8QKtXOcKvov394gxQGLciADWU2Az_xVcogJI633S8D6pkGB187sB38gYhBbTeZ" alt="Query result in Arctype." width="880" height="703"&gt;&lt;/a&gt;&lt;br&gt;
In the above code block, we have created a stored procedure called &lt;code&gt;get_number_of_matches_full&lt;/code&gt;, which loops through the details field until all the regex matches are found on the specified row of the EmpDetails table. We are using the &lt;code&gt;REGEXP_SUBSTR&lt;/code&gt; function with the position argument to extract different matches. It updates by one at each loop run and saves the results on a newly created &lt;code&gt;extracted_numbers_table&lt;/code&gt;. Finally, the loop exits when a &lt;code&gt;NULL&lt;/code&gt; result is found.&lt;/p&gt;

&lt;p&gt;We can call this procedure and view the results by querying the &lt;code&gt;extracted_numbers_table&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CALL get_number_of_matches_full;

SELECT * FROM extracted_numbers_table;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And, shown again in Arctype:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usoirx-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/pv5RA9WI2JI2nQBdJhjscm-FLGzACvPQ2BtsynSSrFnrUPx3-MnQm-a1JiGmMLbwA3ge2Js22lptfat9YsueycFuzbybZSCc6s8lYeHtdQMwqYFbFTZ90b8n0uXmThiwKR2x_u5y" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usoirx-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/pv5RA9WI2JI2nQBdJhjscm-FLGzACvPQ2BtsynSSrFnrUPx3-MnQm-a1JiGmMLbwA3ge2Js22lptfat9YsueycFuzbybZSCc6s8lYeHtdQMwqYFbFTZ90b8n0uXmThiwKR2x_u5y" alt="Query results in Arctype." width="880" height="703"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;String operations in SQL are vital functions to clean and format data within a database. Moreover, string operations are the core component when dealing with valuable information such as phone numbers as they allow users to extract or manipulate phone numbers according to their requirements. However, it's important to remember that the exact functions available will change depending on the database type and version. Therefore, always remember to refer to the documentation to find out the available string operations and implement them to your heart's content. &lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
    </item>
    <item>
      <title>Build a data warehouse quickly with Amazon Redshift - Part 3 -  The final layer cake</title>
      <author>Wendy Wong</author>
      <pubDate>Tue, 14 Dec 2021 21:01:43 +0000</pubDate>
      <link>https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-part-3-the-final-layer-cake-5798</link>
      <guid>https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-part-3-the-final-layer-cake-5798</guid>
      <description>&lt;h2&gt;
  &lt;a href="#building-a-cloud-data-warehouse-and-business-intelligence-modernization"&gt;
  &lt;/a&gt;
  Building a cloud data warehouse and business intelligence modernization
&lt;/h2&gt;

&lt;p&gt;In this final tutorial for AWS Redshift I will explain how we can bake our cake and eat it too by loading data into the Redshift cluster through to creating data visualizations with AWS QuickSight.&lt;/p&gt;

&lt;p&gt;If you are reading this post for the first time, you may wish to read the last three tutorials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aws-builders/getting-started-with-aws-a-sweet-journey-5cjj"&gt;Getting Started with AWS - On the way to cloud&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-2op8"&gt;Build a data warehouse with AWS Redshift - Part 1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-create-an-amazon-redshift-cluster-part-2-3f64"&gt;Build a data warehouse with AWS Redshift - Part 2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quick Introduction&lt;/li&gt;
&lt;li&gt;Synopsis&lt;/li&gt;
&lt;li&gt;High level architecture&lt;/li&gt;
&lt;li&gt;Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNrbMV0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxxjry5t090xk0nx94v4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNrbMV0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxxjry5t090xk0nx94v4.png" alt="CB" width="150" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am an AWS Community Builder in data, a data scientist and also a Business Performance Analyst at Service NSW. I have consulted and instructed in data analytics and data science for government, financial services and startups for 6 years. It was at an AI startup and in Public Sector that I used Amazon services including Amazon S3, Amazon Sagemaker, AWS Glue, Amazon Redshift and Amazon QuickSight.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service NSW is part of Department of Customer Service&lt;/li&gt;
&lt;li&gt;A One stop shop NSW government agency&lt;/li&gt;
&lt;li&gt;Our vision to become the world‚Äôs most customer-centric government agency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#synopsis"&gt;
  &lt;/a&gt;
  Synopsis
&lt;/h2&gt;

&lt;p&gt;We built a well-architected modern data analytics pipeline with a fully-managed, petabyte-scale cloud data warehouse using Amazon Redshift under the Department of Customer Service using AWS Organization.&lt;/p&gt;

&lt;p&gt;With lake house architecture we integrated a data lake, data warehouse and business intelligence with security,  performance, elasticity, data velocity, cost effectiveness and governance to design a unified analytics platform for our organization-wide data architecture roadmap.&lt;/p&gt;

&lt;p&gt;Amazon Redshift has massively parallel processing (MPP) for fast and complex queries and can analyze all our data.&lt;/p&gt;

&lt;p&gt;The AWS services used to build our analytics roadmap were:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE2zNtfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnz2o5th3xe4vu4uwp0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE2zNtfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnz2o5th3xe4vu4uwp0g.png" alt="services used" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-level-architecture"&gt;
  &lt;/a&gt;
  High level architecture
&lt;/h2&gt;

&lt;p&gt;In a busy contact centre we serve customers and generate petabytpes of data in structured and un-structured data formats. One of our initial questions on the journey with AWS included how do we store all of this data? How do we create a data lake to also bring in external data from another data lake?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8euCuFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26r7owwmy6yqkoco8m68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8euCuFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26r7owwmy6yqkoco8m68.png" alt="Challenge" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Working in a sprint fashion, this greenfield government project included test, build and deploy. By understanding the current state we wanted to create a vision of the end state and how to improve customer experience for NSW citizens.&lt;/p&gt;

&lt;p&gt;Using a Miro board to sketch the high level architecture (it's ok to draw what you think might be the final solution and then consult and iterate) collaborating with platform teams and also consulting with AWS to develop a solution using AWS Cloud Formation template.&lt;/p&gt;

&lt;p&gt;With this greenfield project using my consulting hat, I helped our stakeholders develop the first use case, iterate and develop the next one and so forth. What is our minimum viable product? What are our blockers? IAM permissions and stopping and starting. Reading the database developer guide, testing with a sandbox environment and also working in a production environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-h7z9YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj37i4ek3py20c7rke1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-h7z9YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj37i4ek3py20c7rke1o.png" alt="high level solution" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-amazon-s3-data-ingestion-layer"&gt;
  &lt;/a&gt;
  1. Amazon S3 - Data Ingestion Layer
&lt;/h4&gt;

&lt;p&gt;In building a solution for the first business use case to ingest  data extracted from an external cloud and upload the csv files into folders within our Amazon S3 bucket (our data lake). Our team were given access to AWS S3 via IAM user roles under our AWS account.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-amazon-glue-studio-data-processing-layer"&gt;
  &lt;/a&gt;
  2. Amazon Glue Studio - Data Processing Layer
&lt;/h4&gt;

&lt;p&gt;Amazon Glue Studio was used to pre-process data from the 'source' Amazon S3 bucket stored in a csv file to extract, transform and load data back into a 'target' Amazon S3 bucket.&lt;/p&gt;

&lt;p&gt;Amazon Glue Studio is a great data manipulation tool or ETL to visually inspect data pre-processing steps and them if there are errors, and Python code is scripted by updating nodes and successfully completing information at each check point. There are AWS Glue Studio tutorials to get started and you may also watch on-demand sessions from AWS re:invent 2021.&lt;/p&gt;

&lt;p&gt;Dates can be updated from a string to a date data format quickly using AWS Glue Studio. At the time of writing this blog we are testing automated scripts to clean data from AWS S3 as our 'source'and AWS Redshift cluster as our 'target' and we are testing a sample table before a production solution is created.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-amazon-redshift-data-consumption-layer"&gt;
  &lt;/a&gt;
  3. Amazon Redshift - Data Consumption Layer
&lt;/h4&gt;

&lt;p&gt;A data engineer granted permissions to the AWS Redshift cluster role. Using the Query Editor, a connection to the database was created and a table was created using SQL.&lt;/p&gt;

&lt;p&gt;At the data consumption layer, data was loaded from an AWS S3 bucket into the AWS Redshift cluster using the COPY command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-amazon-quicksight-business-intelligence-and-dashboards"&gt;
  &lt;/a&gt;
  4. Amazon QuickSight - Business Intelligence and Dashboards
&lt;/h4&gt;

&lt;p&gt;Connect to the data stored in the Amazon Redshift cluster by connecting to the database using the credentials and import the data into Amazon QuickSight using SPICE(super-fast, parallel, in-memory calculation engine).&lt;/p&gt;

&lt;p&gt;Once data is loaded into SPICE, you may inspect the data using a preview feature. Once data is loaded you may create custom visualizations such as a bar chart and Amazon QuickSight will provide business intelligence informing you of the Top 10 and Bottom 10 insights of the selected data fields with a short narrative which is very useful to help you understand your data.&lt;/p&gt;

&lt;p&gt;Amazon QuickSight allows you to share your dashboard and schedule reports via email to select audiences and download the dashboard a a PDF.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-use-a-lake-house-approach"&gt;
  &lt;/a&gt;
  Why use a Lake house approach?
&lt;/h4&gt;

&lt;p&gt;We have the task to improve customer experience to understand NSW citizens by building a data architecture roadmap to include business intelligence, reporting with structured, semi-structured and unstructured data and building machine learning capability for sentiment analysis and topic modelling&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0DPqZMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr00vfcg232f6nhm2ntk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0DPqZMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr00vfcg232f6nhm2ntk.png" alt="Lake house" width="880" height="839"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of using a lake house approach included: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyze all our data, unified data access &lt;/li&gt;
&lt;li&gt;Cost-effective&lt;/li&gt;
&lt;li&gt;Scalable workloads&lt;/li&gt;
&lt;li&gt;Run fast and complex queries&lt;/li&gt;
&lt;li&gt;Access to analytical services for ETL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A checklist of business requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tableau Server and Amazon Redshift connectors&lt;/li&gt;
&lt;li&gt;Fast SQL query performance&lt;/li&gt;
&lt;li&gt;Unstructured data can be stored in Amazon S3 data lake&lt;/li&gt;
&lt;li&gt;Fully managed enterprise data warehouse on AWS&lt;/li&gt;
&lt;li&gt;Based on PostgreSQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#amazon-redshift-architecture"&gt;
  &lt;/a&gt;
  Amazon Redshift Architecture
&lt;/h4&gt;

&lt;p&gt;Amazon Redshift is an enterprise data warehouse fully managed on AWS. Customer thinks about servers. How much RAM? How much CPU is needed?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deployment Considerations: Good data model, Optimize Amazon Redshift Cluster. Columnar storage, fewer joins, denormalizing table schemas and keeping columns sizes in tables as narrow as possible. All of these will improve query performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-XSlcgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gl0xma4hbpevjkmg8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-XSlcgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gl0xma4hbpevjkmg8r.png" alt="archi" width="618" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client applications:  Amazon Redshift integrates with ETL and BI&lt;/li&gt;
&lt;li&gt;Connections: Amazon Redshift communicates with client applications using JDBC and ODBC drivers for PostgreSQL e.g. Tableau and Pentaho.&lt;/li&gt;
&lt;li&gt;Leader Node: Communicates with compute nodes to perform database operations.&lt;/li&gt;
&lt;li&gt;Compute Nodes: Leader node compiles code the execution plan and assigns the code to individual compute nodes.&lt;/li&gt;
&lt;li&gt;Node Slices: A compute node is partitioned into slices. Each node processes a portion of the workload assigned to the node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Columnar storage for tables optimizes analytic query performance to drastically reduces the overall disk I/O requirements and the amount of data you need to load from disk.&lt;/p&gt;

&lt;p&gt;With massively parallel processing (MPP), Amazon Redshift distributes the rows of a table to the compute nodes so data can be processed in parallel.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#amazon-redshift-cluster"&gt;
  &lt;/a&gt;
  Amazon Redshift Cluster
&lt;/h4&gt;

&lt;p&gt;The Amazon Redshift cluster was launched and configured using Cloud Formation template.&lt;br&gt;
The component details of the cluster included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 cluster, 1 leader node and 3 compute nodes&lt;/li&gt;
&lt;li&gt;Node type: dc2.large with storage 160 GB/node. $0.25/node/hour &lt;/li&gt;
&lt;li&gt;DC2 high performance&lt;/li&gt;
&lt;li&gt;Cluster permissions: IAM role created for the Amazon Redshift role for our IAM User Group&lt;/li&gt;
&lt;li&gt;Cluster Details:  Database details created with database port number 5439&lt;/li&gt;
&lt;li&gt;Network and security: Two subnets created in two different Availability zones to improve fault tolerance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--un1KTF7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paedf7kbaeo48ztdc09o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--un1KTF7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paedf7kbaeo48ztdc09o.png" alt="redshift solution" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-create-an-amazon-redshift-cluster"&gt;
  &lt;/a&gt;
  Demo - create an Amazon Redshift cluster
&lt;/h2&gt;

&lt;p&gt;Step 1: Login in to AWS Management Console&lt;br&gt;
In the Amazon Management Console you may type Amazon Redshift in the search bar.&lt;/p&gt;

&lt;p&gt;Step 2: Navigate to Amazon Redshift home page&lt;br&gt;
 Click on Create cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XC4aFigm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grj9eh0z0c4dvubqopt0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XC4aFigm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grj9eh0z0c4dvubqopt0.png" alt="slide 1" width="880" height="1152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3: In Cluster configuration provide a name for your cluster&lt;br&gt;
If your organization has never created an Amazon Redshift cluster you may access the Free Tier, otherwise  click Production&lt;/p&gt;

&lt;p&gt;Step 4: Configure cluster:&lt;br&gt;
Cluster identifier&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node type: dc2.large&lt;/li&gt;
&lt;li&gt;Nodes: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 5: Database configuration:&lt;br&gt;
Master username:&lt;br&gt;
Master password: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--buU1PwVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dixsllq85zf5zvtuqkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buU1PwVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dixsllq85zf5zvtuqkr.png" alt="slide 2" width="880" height="907"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 6: Configure Cluster Permissions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In order for Amazon Redshift to have access to Amazon S3 to load data an IAM role is created to access to cluster via a Redshift role&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 7: Security Group&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPC and security group attached to the VPC will be created by your administrator&lt;/li&gt;
&lt;li&gt;Subnet Group is also created by your administrator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQqgzqse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohvezt137penimjtuy8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQqgzqse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohvezt137penimjtuy8p.png" alt="slide 3" width="880" height="807"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 8: Click close to create cluster&lt;br&gt;
It will take a few minutes for the  cluster to be provisioned and you can check the status of the blue banner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yRD2Rx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s49veyh0yblgyga9tbbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRD2Rx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s49veyh0yblgyga9tbbl.png" alt="slide 4" width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 9:  Cluster created&lt;br&gt;
After your cluster has successfully been created, the banner message will turn green and the created cluster will have a green tick with the wording 'available'.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eKbccW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfbeaukh2y5l8ai8shbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eKbccW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfbeaukh2y5l8ai8shbp.png" alt="slide 5" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 10: Inspect the properties of  your Redshift cluster&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may even download any JDBC and ODBC drivers&lt;/li&gt;
&lt;li&gt;You may resize the cluster if required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xo8DG9Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scm2mktliyx3rbvz93av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xo8DG9Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scm2mktliyx3rbvz93av.png" alt="slide 6" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 11: Click Query Editor&lt;br&gt;
Connect to the database&lt;br&gt;
Enter the database credentials that were used to create the Amazon Redshift cluster&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvXh2W_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0fyt5kybxu2nq8xnn71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvXh2W_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0fyt5kybxu2nq8xnn71.png" alt="slide 7" width="880" height="842"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 12: Create a Table&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Query Editor uses standard SQL commands to create a table.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQn9nwjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fscae7knu2it5gbl3kns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQn9nwjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fscae7knu2it5gbl3kns.png" alt="slide 8" width="880" height="679"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 13: Load data from Amazon S3 into Amazon Redshift &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the COPY command. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gYZJGjM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/851ujqq3xplbo46nv3cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gYZJGjM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/851ujqq3xplbo46nv3cm.png" alt="slide 9" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 14: Fast Querying&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL queries may be saved and scheduled&lt;/li&gt;
&lt;li&gt;SQL queries can return results in milliseconds&lt;/li&gt;
&lt;li&gt;Export results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbXlooin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1ptymejg7m5oeozvp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbXlooin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1ptymejg7m5oeozvp5.png" alt="slide 10" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 15: Connect to Amazon Redshift database&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upload data by connecting to the Amazon Redshift cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 16: Review the data &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preview and format data in Amazon QuickSight before it is loaded into SPICE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXqHQ1Xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkfkubx4kwd1binxa6l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXqHQ1Xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkfkubx4kwd1binxa6l2.png" alt="slide 11" width="880" height="881"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 17: SPICE and Amazon QuickSight&lt;/p&gt;

&lt;p&gt;Once data is stored in SPICE, data visualizations can be created for reporting dashboards to provide business insights.&lt;/p&gt;

&lt;p&gt;Amazon QuickSight can provide the Top 10 and Bottom 10 insights and a narrative using machine learning to help you understand your data.&lt;/p&gt;

&lt;p&gt;Dashboards can be easily shared via email and reports may be scheduled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hL8vQOBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuhidr2b5hdcypfyuxct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hL8vQOBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuhidr2b5hdcypfyuxct.png" alt="slide 12" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may also watch on-demand from AWS re:Invent to learn more about the new add-on enterpise feature for AWS QuickSight Q that can help you author dashboards based on topics using natural language processing which is very exciting!&lt;/p&gt;

&lt;p&gt;You can read the blog &lt;a href="https://aws.amazon.com/blogs/aws/amazon-quicksight-q-business-intelligence-using-natural-language-questions/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXq7XW3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e48td82bx3cs7qxc4lbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXq7XW3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e48td82bx3cs7qxc4lbj.png" alt="slide 13" width="880" height="707"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/mgmt/query-databases.html"&gt;Query the database&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/redshift-dg.pdf"&gt;Amazon Redshift Database Developer Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/c_loading-data-best-practices.html"&gt;Amazon Redshift best practices for loading data&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/c_high_level_system_architecture.html"&gt;Data warehouse system architecture&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay informed with the latest AWS product updates from AWS Re:invent 2021:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Re-invent 2021 announcements &lt;a href="https://aws.amazon.com/blogs/aws/top-announcements-of-aws-reinvent-2021/"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until next time, happy learning!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>analytics</category>
      <category>aws</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I come up with project ideas (and never faced tutorial hell)</title>
      <author>ùïÅùï¶ùïùùïöùïí üë©üèª‚Äçüíª</author>
      <pubDate>Tue, 14 Dec 2021 20:33:03 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287</link>
      <guid>https://dev.to/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287</guid>
      <description>&lt;p&gt;I often read the term &lt;strong&gt;"tutorial hell "&lt;/strong&gt; and I always wonder why so many people get stuck while I have so many ideas in my head for my own projects. Let me explain why I've never ended up in tutorial hell and how I come up with so many different ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorials"&gt;
  &lt;/a&gt;
  Tutorials
&lt;/h2&gt;

&lt;p&gt;Of course, I watched a lot of tutorials during my learning journey, and I still do to gain more knowledge about certain things and improve my skills on a daily basis.&lt;/p&gt;

&lt;p&gt;But even as I'm watching and following along with the tutorial, I'm already taking in the good things I could use from that tutorial in my head and thinking about how I could use them in one of my own projects.&lt;/p&gt;

&lt;p&gt;A good example is the &lt;strong&gt;To Do List&lt;/strong&gt; tutorial, which everyone seems to have enough of already. And actually, I don't quite understand. If you watch a really good tutorial on how to create a to-do list, you learn one of the most important programming skills you need to understand to get a job in tech: CRUD. &lt;/p&gt;

&lt;p&gt;And since everyone knows how a to-do list works, this is the best way to learn and understand CRUD functionality.&lt;/p&gt;

&lt;p&gt;In case you don't know what &lt;strong&gt;CRUD&lt;/strong&gt; is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create (a task)&lt;/li&gt;
&lt;li&gt;Read (view/read the task)&lt;/li&gt;
&lt;li&gt;Update (the task)&lt;/li&gt;
&lt;li&gt;Delete (delete the task)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This logic appears in so many applications that I was happy to learn about it while creating a to-do list and later use it in my own projects (like &lt;a href="https://github.com/YuriDevAT/nikki-my-diary"&gt;Nikki - the online diary&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-ideas"&gt;
  &lt;/a&gt;
  Project ideas
&lt;/h2&gt;

&lt;p&gt;I'm sure everyone has a hobby or interest in certain things. My interests are Japanese language and culture and music. I studied musicology and Japanese studies, with a focus on movies/video games and their music.&lt;/p&gt;

&lt;p&gt;I therefore draw all my ideas from these hobbies, and there are many. Here are some examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a name converter from latin letters to kanji&lt;/li&gt;
&lt;li&gt;a memory game with kanji&lt;/li&gt;
&lt;li&gt;a zodiac calculator&lt;/li&gt;
&lt;li&gt;logo creation of a fictional company I saw in an anime&lt;/li&gt;
&lt;li&gt;a Pok√©dex with the PokeApi for the 25th anniversary of Pok√©mon&lt;/li&gt;
&lt;li&gt;a tribute page with various features of my favorite directors&lt;/li&gt;
&lt;li&gt;an online diary where users can pin their thoughts, using internationalization&lt;/li&gt;
&lt;li&gt;and many more&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a React Developer I was able to use many different features and logics in my projects and therefore discuss them in interviews, from useState/useEffect to ContextAPI, CRUD (localStorage and Google Firebase), internationalization, SEO, PWA, various API (data fetching), UI design, a11y, thumbnail creation, and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, all these projects are an inspiration and a result of my hobbies. They have many different functions and represent my personality. They make my projects look unique to recruiters and that's what everyone out there says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stop cloning Netflix or Instagram (except for learning purposes) and start creating your own projects that show your personality and make you stand out, make you memorable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So think about what you are interested in, what your personality looks like and start creating projects that you love to talk about because they are unique and created by you.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>1 + '2'? 3? 12! </title>
      <author>Tom Smykowski</author>
      <pubDate>Tue, 14 Dec 2021 20:02:52 +0000</pubDate>
      <link>https://dev.to/tomaszs2/1-2-3-12-fl2</link>
      <guid>https://dev.to/tomaszs2/1-2-3-12-fl2</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-8m3emUdL7M"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to find log4j vulnerable dependencies quickly across your codebase</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Tue, 14 Dec 2021 19:59:57 +0000</pubDate>
      <link>https://dev.to/sourcegraph/how-to-find-log4j-vulnerable-dependencies-quickly-across-your-codebase-32oj</link>
      <guid>https://dev.to/sourcegraph/how-to-find-log4j-vulnerable-dependencies-quickly-across-your-codebase-32oj</guid>
      <description>&lt;p&gt;To quickly determine which of your projects depend on the vulnerable versions of log4j, run these queries on Sourcegraph:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gradle"&gt;
  &lt;/a&gt;
  Gradle
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j' 2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
lang:gradle patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+lang:gradle+org%5C.apache%5C.logging%5C.log4j%5B%27%22%5D+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.65718382.1309499576.1639448422-1144514160.1639448422"&gt;Gradle&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mavin"&gt;
  &lt;/a&gt;
  Mavin
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;log4j\.version&amp;gt;2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))&amp;lt;/log4j\.version&amp;gt;
file:pom\.xml patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:pom.xml+%3Clog4j%5C.version%3E2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29%3C/log4j%5C.version%3E&amp;amp;patternType=regexp&amp;amp;_ga=2.67232849.1309499576.1639448422-1144514160.1639448422"&gt;Mavin&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivy"&gt;
  &lt;/a&gt;
  Ivy
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org="org\.apache\.logging\.log4j".*rev="2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))"
file:ivy\.xml patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:ivy.xml+org%3D%22org%5C.apache%5C.logging%5C.log4j%22+rev%3D%222%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29%22&amp;amp;patternType=regexp&amp;amp;_ga=2.67232849.1309499576.1639448422-1144514160.1639448422"&gt;Ivy&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sbtscala"&gt;
  &lt;/a&gt;
  SBT(Scala)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org.apache.logging.log4j" % "2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
file:\.sbt$ patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:%5C.sbt%24+%22org.apache.logging.log4j%22+%25+%222%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.259589194.1309499576.1639448422-1144514160.1639448422"&gt;Scala&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bazel"&gt;
  &lt;/a&gt;
  Bazel
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j: 2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
lang:bazel patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+lang:bazel+org%5C.apache%5C.logging%5C.log4j:+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.96651487.1309499576.1639448422-1144514160.1639448422"&gt;Bazel&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#any-file-containing-orgapachelogginglog4j-followed-by-a-vulnerable-version-number"&gt;
  &lt;/a&gt;
  Any file containing org.apache.logging.log4j followed by a vulnerable version number
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j 2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+org%5C.apache%5C.logging%5C.log4j+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.17986943.777352015.1639448382-1702082279.1639448382&amp;amp;_gac=1.13996357.1636895801.Cj0KCQiAhMOMBhDhARIsAPVml-GU6W22T_XZ_khgKhGR4BWZj1Bq85dwPR4AfI1Ju6PKl17Dt7qWnc0aAihpEALw_wcB"&gt;Any file containing org.apache.logging.log4j followed by a vulnerable version number&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-your-organizations-private-code"&gt;
  &lt;/a&gt;
  Search your organization‚Äôs private code
&lt;/h3&gt;

&lt;p&gt;On &lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt;, run the queries linked above in your user search context &lt;strong&gt;(context:@username)&lt;/strong&gt;, after you‚Äôve synced all of the org repositories you want to search &lt;strong&gt;(in Settings &amp;gt; Account &amp;gt; Your repositories)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On a &lt;a href="https://docs.sourcegraph.com/?_ga=2.15375984.777352015.1639448382-1702082279.1639448382&amp;amp;_gac=1.153587914.1636895801.Cj0KCQiAhMOMBhDhARIsAPVml-GU6W22T_XZ_khgKhGR4BWZj1Bq85dwPR4AfI1Ju6PKl17Dt7qWnc0aAihpEALw_wcB#quick-install"&gt;self-hosted Sourcegraph instance&lt;/a&gt;, copy and paste those queries above into the search box on your instance. After pasting, ensure the .* (regexp search) button is on for queries that contain regular expressions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indepth-log4j-0day-fixes-and-mitigations"&gt;
  &lt;/a&gt;
  In-depth Log4j 0-day fixes and mitigations
&lt;/h2&gt;

&lt;p&gt;For in-depth info on Log4j Log4Shell 0-day, check out this &lt;a href="https://about.sourcegraph.com/blog/log4j-log4shell-0-day/?utm_medium=social&amp;amp;utm_source=twitter&amp;amp;utm_campaign=blog"&gt;excellent article on finding, fixing, and track affected codebase.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Finding and fixing vulnerabilities in your codebase can be challenging, but with the right tools, you can speed up the process and secure your codebase in minimal time.&lt;/p&gt;




&lt;p&gt;Have suggestions or questions? Leave a comment, or join our &lt;a href="https://about.sourcegraph.com/community/?utm_medium=social&amp;amp;utm_source=devto&amp;amp;utm_campaign=slacklaunch"&gt;Community Slack Space&lt;/a&gt; where our team will be happy to answer any questions you may have about Sourcegraph.&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why all the Suspense? Understanding Async Consistency in JavaScript Frameworks</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 14 Dec 2021 19:54:19 +0000</pubDate>
      <link>https://dev.to/this-is-learning/why-all-the-suspense-understanding-async-consistency-in-javascript-frameworks-3kdp</link>
      <guid>https://dev.to/this-is-learning/why-all-the-suspense-understanding-async-consistency-in-javascript-frameworks-3kdp</guid>
      <description>&lt;p&gt;I had someone recently reach out to me to ask "What is Suspense in the general sense?" They said all they could find was &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; resources. And I told them that made sense they coined the term. But looking around I realized it was more than that.&lt;/p&gt;

&lt;p&gt;When I look at the topic as explained in most articles it talks about the symptoms of the Suspense component but not really what it is. So I'm going to try to show today why it is so much more than a component that renders placeholders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-in-user-interfaces"&gt;
  &lt;/a&gt;
  Consistency in User Interfaces
&lt;/h2&gt;

&lt;p&gt;Consistent display of information is a fundamental expectation of a good user interface. If you show users inconsistent information within the same page(without indicating it) it erodes trust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AxcE-zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxd9x6okpctcrs8j04kh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AxcE-zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxd9x6okpctcrs8j04kh.png" alt="Inconsistent Avatar" width="700" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From Michel Westrate's &lt;a href="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254"&gt;Becoming Fully Reactive: An in-depth explanation of MobX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your avatar is updated in one place and not another can you trust that what you are reading is up to date? You might be tempted to reload the browser page just in case. If the count of comments doesn't match the number of comments you see, even if the number is smaller you might assume you are missing something. But there are more consequential glitches, what about prices on products not matching?&lt;/p&gt;

&lt;p&gt;This goes beyond what you can see. What happens if the internal state of our web app doesn't match what we are displaying to the end-user. Could that cause them to make decisions they otherwise would not make? Decisions of consequence? And could they not even be aware of it if you are showing them one thing and doing another?&lt;/p&gt;

&lt;p&gt;Sure on the web, we are accustomed to the fact that what we see might not be the latest. There is always a delay to send it over the wire compared to the current state of the backend. While this can lead to things being out of date and certain requests we make being rejected, but inconsistent interfaces could put us in a scenario where the application believes it is doing the right thing and passes validation and it is only the end user left unaware.&lt;/p&gt;

&lt;p&gt;Luckily, we have tools built for this. Generally, modern UI libraries and frameworks are all built with consistency in mind.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#consistency-in-frameworks"&gt;
  &lt;/a&gt;
  Consistency in Frameworks
&lt;/h2&gt;

&lt;p&gt;The simplest form of consistency is ensuring that derived state stays in sync with its source state. For instance if you had a state &lt;code&gt;count&lt;/code&gt; a state &lt;code&gt;doubleCount&lt;/code&gt; would always be in fact double that count. In a reactive library we often refer to this as &lt;code&gt;glitch-free&lt;/code&gt; execution. It might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different frameworks have different ways to ensure this relationship holds. In &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; state updates aren't applied immediately in so you continue to see the previous state until a time that &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; applies all the state at the same time. Reactive libraries like Vue or &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt; tend to more aggressively update so that on the next line after an update not only is the source data updated but all derived data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// React&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2&lt;/span&gt;

&lt;span class="c1"&gt;// Solid&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 20, 40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, the difference is inconsequential as in both cases they are consistent. In the end, it has a similar result. Looking from the outside state updates are atomic, applying in all places at the same time.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#async-consistency"&gt;
  &lt;/a&gt;
  Async Consistency
&lt;/h2&gt;

&lt;p&gt;The thing is with glitch-free libraries whether the updates happen now or sometime later they all get applied synchronously. All updates are with the same tick and they all see each other. This is essential to have consistency guarantees. But what happens if everything cannot be calculated synchronously?&lt;/p&gt;

&lt;p&gt;This is a pretty hard problem and it's been the subject of many academic papers. Even stuff related to JavaScript ecosystem like &lt;a href="http://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf"&gt;this paper on Elm from 2013&lt;/a&gt;. But to illustrate the problem consider our &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;doubleCount&lt;/code&gt; again but pretend we need to go to the server to calculate &lt;code&gt;doubleCount&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Not real React code, just for illustrative purposes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchDoubleCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// somewhere else:&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our &lt;code&gt;count&lt;/code&gt; would start at 1 and &lt;code&gt;doubleCount&lt;/code&gt; would initially be undefined while it was fetching putting us in an inconsistent state. At some point later when it resolved &lt;code&gt;doubleCount&lt;/code&gt; would be 2 and we would be consistent again. This happens later when we set &lt;code&gt;count&lt;/code&gt; to 20. &lt;code&gt;doubleCount&lt;/code&gt; would be value 1 until it settled at 40. If you were logging this in a &lt;code&gt;useEffect&lt;/code&gt; you might see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That isn't unexpected but it isn't consistent. And here lies the problem. There are only 3 possible outcomes to prevent our users from seeing this inconsistent state:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-bail-out"&gt;
  &lt;/a&gt;
  1. Bail out
&lt;/h3&gt;

&lt;p&gt;Show something instead of the inconsistent state. Some sort of loading indicator to hide the inconsistency from the end-user and let things settle in the background until it is ready to be displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-stay-in-the-past"&gt;
  &lt;/a&gt;
  2. Stay in the Past
&lt;/h3&gt;

&lt;p&gt;Don't apply any of the changes and continue to show things as they were until the new content is ready to be displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-predict-the-future"&gt;
  &lt;/a&gt;
  3. Predict the Future
&lt;/h3&gt;

&lt;p&gt;Apply the changes immediately and show the future value while the asynchronous state is updating, and then when it is done replace it (but it should already be the same thing).&lt;/p&gt;




&lt;p&gt;Well, the first one is relatively easy compared to the others as a general solution. We do it all the time. We might apply the source changes right away and then show a loading indicator until we are ready to show updated content. And many people and libraries saw Suspense and stopped there.&lt;/p&gt;

&lt;p&gt;But what if we wanted to do more. Removing content and replacing it after some time can be a rather jarring user experience. I think all of us would love to live in the future but there is a certain unpracticality in this unless the user is performing a mutation. These "optimistic updates" are a great tool but they aren't perfect and aren't always applicable. If you are just trying to fetch the latest data, well you don't have what you haven't received yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKOYsB3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t438cxofqb58i1zrf2bi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKOYsB3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t438cxofqb58i1zrf2bi.jpg" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's stay in the past. The tricky part is how do we trigger the upcoming async requests if we don't apply any data changes?&lt;/p&gt;

&lt;p&gt;Well, we can make a copy of the state we wish to update in the future. Like we can have &lt;code&gt;count&lt;/code&gt;, and &lt;code&gt;futureCount&lt;/code&gt; and have &lt;code&gt;doubleCount&lt;/code&gt; be derived from &lt;code&gt;futureCount&lt;/code&gt; instead and only apply &lt;code&gt;futureCount&lt;/code&gt;'s value back to &lt;code&gt;count&lt;/code&gt; when everything has resolved. But this gets tricky. What if there are more than one thing fetching and multiple different sources. We'd need to clone everything downstream of that change.&lt;/p&gt;

&lt;p&gt;And that's what is being done more or less with &lt;a href="https://github.com/reactwg/react-18/discussions/41"&gt;Transitions&lt;/a&gt; in &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; or &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;. Concurrent Rendering exists so that the app can stay in one state while we are safe to render a new updated reality and only commit those changes when everything is settled. It is a systematic way of staying consistent in the past until we are ready.&lt;/p&gt;

&lt;p&gt;Why concurrency though? Well, you are still displaying UI to the end-user so you don't want it to just stop working completely. Things like animations and other non-destructive interactions. It means more work reconciling the changes in the end but ultimately this is an end-user experience feature.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all Together
&lt;/h2&gt;

&lt;p&gt;Suddenly &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s decision for &lt;code&gt;setState&lt;/code&gt; to stay in the past doesn't look so unusual. You don't know what might cause asynchronous derived state downstream so you would need to hedge on the side of not updating until you know. That being said these frameworks still have explicit opt-in to concurrent rendering for the same reason.&lt;/p&gt;

&lt;p&gt;Picturing writing a component that creates and updates some state. It would be very unusual if some downstream child component that received the props was responsible for isolating your state change in a Concurrent Transition by virtue of that state being a dependency. This behavior needs to be opt-in.&lt;/p&gt;

&lt;p&gt;And similarly, it may be important to be able to opt out of this behavior. Sometimes some amount of inconsistency is warranted or even desirable. For example, if you need to see the data as fast as possible.&lt;/p&gt;

&lt;p&gt;All in all, Suspense and Transitions provide very useful tools for handling the problem of making our user interfaces consistent. That's a big benefit to end-users. It isn't about performance. It isn't just about data fetching. It's about making it easier to create UIs that users can trust, that behave in expected ways, and that offer a smooth experience no matter how they navigate your web application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>solidjs</category>
    </item>
    <item>
      <title>Go Channel Patterns - Drop</title>
      <author>b0r</author>
      <pubDate>Tue, 14 Dec 2021 19:40:44 +0000</pubDate>
      <link>https://dev.to/b0r/go-channel-patterns-drop-4k19</link>
      <guid>https://dev.to/b0r/go-channel-patterns-drop-4k19</guid>
      <description>&lt;p&gt;To improve my Go Programming skills and become a better Go engineer, I have recently purchased an excellent on-demand education from &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt;. Materials are created by an expert Go engineer, &lt;a href="https://twitter.com/goinggodotnet"&gt;Bill Kennedy&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ohpow5Jt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1349881840220450826/pGwOq5tz_normal.jpg" alt="Bill Kennedy : MIA/-5 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bill Kennedy : MIA/-5
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @goinggodotnet
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Check out my conversation with &lt;a href="https://twitter.com/MGallagher2010"&gt;@MGallagher2010&lt;/a&gt;. He tells a really interesting story about how he cultivated a business being a technical recruiter. One of the best I know. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/in5XQRbHCE"&gt;ardanlabs.buzzsprout.com/1466944/968101‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:18 PM - 09 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1468963384280293380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1468963384280293380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1468963384280293380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have decide to record my process of learning how to write more idiomatic code, following Go best practices and design philosophies. &lt;/p&gt;

&lt;p&gt;This series of posts will describe channel patterns used for orchestration/signaling in Go via goroutines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drop-pattern"&gt;
  &lt;/a&gt;
  Drop Pattern
&lt;/h2&gt;

&lt;p&gt;The main idea behind &lt;strong&gt;Drop Pattern&lt;/strong&gt; is to have a limit on the amount of work that can be done at any given moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F_EKElmM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7pnsyvq3q0m19sa3tws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_EKElmM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7pnsyvq3q0m19sa3tws.png" alt="Drop Pattern" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a buffered channel that provides signaling semantic&lt;/li&gt;
&lt;li&gt;a number of worker goroutines&lt;/li&gt;
&lt;li&gt;a manager goroutine that:

&lt;ul&gt;
&lt;li&gt;takes the work and sends it to the worker goroutine&lt;/li&gt;
&lt;li&gt;if there is more work than worker goroutines can process and buffered channel is full, manager goroutine will drop the work&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Drop Pattern&lt;/strong&gt; we have a limited amount of work (&lt;code&gt;capacity&lt;/code&gt;) we can do in a day.&lt;/p&gt;

&lt;p&gt;We have predefined number of &lt;code&gt;employees&lt;/code&gt; that will do the work (&lt;code&gt;worker&lt;/code&gt; goroutines).&lt;/p&gt;

&lt;p&gt;We also have a &lt;code&gt;manager&lt;/code&gt; (&lt;code&gt;main&lt;/code&gt; goroutine) that generates work (or gets work from some predefined list of work). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Manager&lt;/code&gt; notifies employee about the work via communication channel &lt;code&gt;ch&lt;/code&gt;. &lt;code&gt;Employee&lt;/code&gt; gets the work from the communication channel &lt;code&gt;ch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Communication channel &lt;code&gt;ch&lt;/code&gt; is capable of holding a limited amount of work "in the queue" (&lt;code&gt;buffered channel&lt;/code&gt;). We say a channel has a limited &lt;code&gt;capacity&lt;/code&gt;. Once channel &lt;code&gt;ch&lt;/code&gt; is full, &lt;code&gt;manager&lt;/code&gt; can't send new work and instead decides to &lt;strong&gt;DROP&lt;/strong&gt; that unit of work and tries to send a new unit of work to the channel (maybe this time there is some space on the &lt;code&gt;ch&lt;/code&gt;). &lt;code&gt;Manager&lt;/code&gt; will do that as long as there is available work to do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h4&gt;

&lt;p&gt;Good use case for this pattern would be a DNS server. A DNS server has a limited capacity, or limited amount of requests that it can process at any given moment. If there are more requests sent to the DNS server we can decide to overload and kill the server, or to &lt;strong&gt;DROP&lt;/strong&gt; new requests until DNS server has capacity to process the request.&lt;/p&gt;

&lt;p&gt;Feel free to try the example on &lt;a href="https://play.golang.com/p/vTnynyXgs_l"&gt;Go Playground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// capacity&lt;/span&gt;
    &lt;span class="c"&gt;// max number of active requests at any given moment&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;cap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;

    &lt;span class="c"&gt;// buffered channel is used to determine when we are at capacity&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// a worker goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// e.g. an employee&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// for-range loop used to check for new work on communication channel `ch`&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"employee : received signal :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="c"&gt;// amount of work to do&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;

    &lt;span class="c"&gt;// range over collection of work, one value at the time&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// select-case allow us to perform multiple channel operations&lt;/span&gt;
        &lt;span class="c"&gt;// at the same time, on the same goroutine&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c"&gt;// signal/send work into channel&lt;/span&gt;
        &lt;span class="c"&gt;// start getting goroutines busy doing work&lt;/span&gt;
        &lt;span class="c"&gt;// e.g. manager sends work to employee via buffered communication channel&lt;/span&gt;
        &lt;span class="c"&gt;//      if buffer is full, default case is executed&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;"paper"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : sent signal :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// if channel buffer is full, drop the message&lt;/span&gt;
        &lt;span class="c"&gt;// allow us to detect that we are at capacity&lt;/span&gt;
        &lt;span class="c"&gt;// e.g. manager drops the unit of work&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : dropper data :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// once last piece of work is submitted, close the channel&lt;/span&gt;
    &lt;span class="c"&gt;// worker goroutines will process everything from the buffer&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : sent shutdown signal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go

manager : sent signal : 0
manager : sent signal : 1
manager : sent signal : 2
manager : sent signal : 3
manager : sent signal : 4
...
manager : dropper data : 101
manager : dropper data : 102
...
employee : received signal : paper
employee : received signal : paper
...
employee 0 : received shutdown signal
...
employee : received signal : paper
employee : received signal : paper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, drop channel pattern was described. In addition, simple implementation and use case were provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to check out excellent &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education materials to learn more.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ardanlabs.com/"&gt;Ardan Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/photo/radio-telescope-against-sky-with-stars-6325001/"&gt;Cover image by Igor Mashkov from Pexels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://habr.com/ru/company/ua-hosting/blog/490750/"&gt;Fan out picture&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Dev Environments: An Essential Tool for Software Quality</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 14 Dec 2021 19:39:39 +0000</pubDate>
      <link>https://dev.to/tinystacks/dev-environments-an-essential-tool-for-software-quality-gpd</link>
      <guid>https://dev.to/tinystacks/dev-environments-an-essential-tool-for-software-quality-gpd</guid>
      <description>&lt;p&gt;There are many steps on the road to DevOps maturity. Recently, I've been covering some of the most basic concepts,  &lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;such as stacks, stages, and Infrastructure as Code&lt;/a&gt;. Today. I'll stick to these foundational steps and talk about on-demand dev stacks. I'll focus on why dev stacks are perhaps the most important first step teams can take on their DevOps journey. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-application-on-demand"&gt;
  &lt;/a&gt;
  Your Application, On Demand
&lt;/h2&gt;

&lt;p&gt;First, let's recap some concepts from my last article. One of the great benefits of moving to a cloud platform like AWS is Infrastructure as Code. With Infrastructure as Code, you can spin up the architecture your application needs - network topology, Web servers, databases, file storage, load balancers, etc. - by programming it. &lt;/p&gt;

&lt;p&gt;Before Infrastructure as Code, standing up a new version of an app usually meant manually configuring and tending to every component of the system. It was tedious and error-prone. Defining your architecture in a programming language like Python or in a declarative language like  &lt;a href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt; means you can deploy and re-deploy your application over and over, consistently and without fear. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks-stages-and-environments"&gt;
  &lt;/a&gt;
  Stacks, Stages, and Environments
&lt;/h2&gt;

&lt;p&gt;Before I dive in, let's get clear on our terminology.&lt;/p&gt;

&lt;p&gt;Using Infrastructure as Code, you can deploy a &lt;strong&gt;stack&lt;/strong&gt; - your application plus all its supporting infrastructure - quickly and easily. Once you can deploy a stack, you can deploy multiple stacks - &lt;strong&gt;stages&lt;/strong&gt; - for various purposes - e.g., a single stack for production, plus other stacks for development and testing.&lt;/p&gt;

&lt;p&gt;People in software development talk a lot about &lt;strong&gt;environments&lt;/strong&gt; - e.g., production environments vs. dev environments. In our view, "environment" encompasses a specific runtime for your application that may or may not be hosted in the cloud. For many development teams, dev environments reside on a developer's desktop or laptop. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-stacks-and-dev-stacks"&gt;
  &lt;/a&gt;
  Production Stacks and Dev Stacks
&lt;/h2&gt;

&lt;p&gt;Many teams are drawn to Infrastructure as Code to streamline their production deployments. And indeed, repeatable production employments can greatly enhance application quality. Standing up new production stacks opens the door to numerous advanced deployment strategies such as  &lt;a href="https://whatis.techtarget.com/definition/canary-canary-testing"&gt;canary testing&lt;/a&gt; and  &lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;blue/green deployments&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But Infrastructure as Code can improve quality before your team even pushes to production. You can use the same code you use to stand up a production stacks to stand up development stacks as well!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-a-dev-stack"&gt;
  &lt;/a&gt;
  Why a Dev Stack?
&lt;/h2&gt;

&lt;p&gt;Personal dev environments are becoming increasingly standardized with tools such as  &lt;a href="https://www.gitpod.io/"&gt;Gitpod&lt;/a&gt; and  &lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;. As your team moves more toward standing up stacks, the difference between personal dev environments and dev stacks starts to fade. &lt;/p&gt;

&lt;p&gt;Dev stacks allow development teams to test their changes end to end before they're ever pushed to production. Using Infrastructure as Code, teams are assured that what they're testing is (apart from a few small config changes) identical to what will run in production. &lt;/p&gt;

&lt;p&gt;Having a central dev stack for your team is great. However, giving developers their own fully deployed stacks makes it even easier to test changes before they ever hit main. &lt;/p&gt;

&lt;p&gt;With individual dev stacks, your developers can deploy individual changes faster. This leads to greater flexibility and reliability over grouping many changes together into a single deployment. In addition, when building on cloud services, testing against a live service is better than attempting to replicate that service on a laptop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-official-dev-stage"&gt;
  &lt;/a&gt;
  The "Official" Dev Stage
&lt;/h2&gt;

&lt;p&gt;If your team hasn't started using dev stacks yet, the first step is to make a shared stack. This will be the start of your &lt;strong&gt;application pipeline&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A pipeline is a series of stages through which you can push code changes, with each stage gradually widening your user base. On large and long-running projects, pipelines can involve multiple stages and become fairly complicated. However, a simple pipeline consisting of just a dev and a prod stage is a solid start for teams just dipping their toes into the DevOps waters. &lt;/p&gt;

&lt;p&gt;To create a dev stage, you first need to create a full application stack using a language such as AWS CloudFormation. Your stack should define everything that your application needs to run. &lt;/p&gt;

&lt;p&gt;If you already have this for your production stack, then you're almost there! You may need to make a few adjustments based on how you want to launch your dev stack. You have a couple of choices here. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#launch-in-same-aws-account-as-prod"&gt;
  &lt;/a&gt;
  Launch in Same AWS Account as Prod
&lt;/h3&gt;

&lt;p&gt;The simplest strategy is launching your dev stack in the same stack as your prod account. To do this, you'll need to parameterize your Infrastructure as Code deployment so that it uses different prefixes or suffixes for resource names. This will avoid naming collisions with your prod stack. &lt;/p&gt;

&lt;p&gt;AWS CloudFormation makes this easy through the use of parameters. And actually, you don't even need to define your own parameters! You can use  &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html"&gt;CloudFormation's pseudo-parameters&lt;/a&gt; - predefined metadata parameters - to implement this quickly and easily. &lt;/p&gt;

&lt;p&gt;For example, assume you are defining an S3 bucket name and want to make sure it's distinct from your production bucket. Using CloudFormation, you can use the name of your stack as a prefix for the bucket name. In the example below (YAML), we use a regular CloudFormation stack parameter, AppVersion, and the full stack name as a pseudo-parameter to construct a unique name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BucketName: !Sub "{$AWS:StackName}-${AppVersion}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#launch-in-separate-aws-account"&gt;
  &lt;/a&gt;
  Launch in Separate AWS Account
&lt;/h3&gt;

&lt;p&gt;However, it's not a great idea to mix stacks in a single account. Ideally, you want your production stack hosted in its own AWS account. This allows you to place additional restrictions on access to production. Such restrictions are almost a necessity if your team handles personally identifiable information on customers in prod. &lt;/p&gt;

&lt;p&gt;If you launch your dev stack in a separate account, you don't need to worry about name conflicts. The only thing you should have to parameterize in this context are publicly facing values, such as your application's DNS endpoint. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-dev-stack-per-developer"&gt;
  &lt;/a&gt;
  A Dev Stack Per Developer
&lt;/h2&gt;

&lt;p&gt;Creating a central dev stack is definitely a huge step forward. However, there's still room for improvement! &lt;/p&gt;

&lt;p&gt;A central dev stack is fine for integrating changes that are getting close to production quality. Ideally, however, you want devs to be able to test in their own stacks before committing to a common Git branch. This reduces merge conflicts and helps ensure high-quality code early in the development process. &lt;/p&gt;

&lt;p&gt;If you already have code for launching a dev stack, launching individual dev stacks for developers shouldn't involve much additional work. The major issue is tracking stacks and controlling costs. Giving your entire dev team unfettered access to an AWS account - even a non-production one - can leave you scrambling to control your cloud spend. &lt;/p&gt;

&lt;p&gt;One approach is to use  &lt;a href="https://aws.amazon.com/controltower/"&gt;AWS Control Tower&lt;/a&gt;. Control Tower works in conjunction with  &lt;a href="https://aws.amazon.com/organizations/"&gt;AWS Organizations&lt;/a&gt;, which enables the creation and management of multiple AWS accounts under a single master account. You can use Control Tower in conjunction with  &lt;a href="https://aws.amazon.com/servicecatalog/"&gt;AWS Service Catalog&lt;/a&gt; to offer your dev stack as a service catalog offering that developers can install into their accounts. You can even go one step farther and deploy the stack automatically as part of the account vending process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-your-branching-strategy-with-dev-stacks"&gt;
  &lt;/a&gt;
  Defining Your Branching Strategy with Dev Stacks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;As I discussed in my last article&lt;/a&gt;, it's important when creating your CI/CD pipeline to work out a branching strategy. One of the simplest strategies is to use  &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow"&gt;feature branches&lt;/a&gt; for development work. In feature branching, devs create a branch per feature. Developers use pull requests to request integration of their work into main.&lt;/p&gt;

&lt;p&gt;Feature branching has several benefits. By using pull requests, other team members can review and vet a set of changes before they are integrated into the main branch. The entire process keeps your project's main branch clean and in a buildable, deployable state. &lt;/p&gt;

&lt;p&gt;Whatever branching strategy you choose, there's little doubt that giving developers their own fully deployed stacks makes it easier to test changes before they ever hit main. The result is faster deployments and more reliable code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tinystacks-makes-dev-stacks-easy"&gt;
  &lt;/a&gt;
  TinyStacks Makes Dev Stacks Easy
&lt;/h2&gt;

&lt;p&gt;Here at TinyStacks, we‚Äôre all about helping you deploy and manage your stacks in the cloud. We make it easy to transfer from a personal dev environment on your laptop into a development stage with a stack consistent with your production stack. Contact us today to find out more!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Top 4 Deep Learning Networks You Should Know</title>
      <author>images.cv</author>
      <pubDate>Tue, 14 Dec 2021 19:38:58 +0000</pubDate>
      <link>https://dev.to/imagescv/top-4-deep-learning-networks-you-should-know-1f06</link>
      <guid>https://dev.to/imagescv/top-4-deep-learning-networks-you-should-know-1f06</guid>
      <description>&lt;p&gt;Deep learning has become a very popular topic in recent years. Its popularity is due to its ability to train neural nets and perform classification tasks with high accuracy, even without the need for human intervention. Deep learning networks can also be trained on their own, which means they don't require pre-labeled data like other types of machine learning algorithms. Here are 4 deep neural networks that you should know about:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Convolutional Neural Network (CNN)&lt;/strong&gt;&lt;br&gt;
The first deep learning network you should know about is the Convolutional Neural Network (CNN). CNNs are used for image recognition and have been shown to be very effective in this domain. They are also used for other tasks such as natural language processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Recurrent Neural Network (RNN)&lt;/strong&gt;&lt;br&gt;
The second deep learning network you should know about is the Recurrent Neural Network (RNN). RNNs are used for tasks such as language modeling and machine translation. They are also effective at predicting the next word in a sentence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Long Short-Term Memory (LSTM)&lt;/strong&gt;&lt;br&gt;
The third deep learning network you should know about is the Long Short-Term Memory (LSTM) network. LSTMs are used for tasks such as speech recognition and natural language processing. They are also effective at predicting the next word in a sentence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Deep Belief Network (DBN)&lt;/strong&gt;&lt;br&gt;
The fourth deep learning network you should know about is the Deep Belief Network (DBN). DBNs are used for tasks such as image recognition and natural language processing. They are also effective at predicting the next word in a sentence.&lt;/p&gt;




&lt;p&gt;As you can see, there are many different types of deep learning networks that you can use for various tasks. So, which one should you use? Well, that depends on the task at hand. But, in general, it's a good idea to try out several different types of deep learning networks and see which one gives you the best results.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;üëâVisit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>deeplearning</category>
    </item>
    <item>
      <title>The hidden trap of debugger</title>
      <author>Mario Russo</author>
      <pubDate>Tue, 14 Dec 2021 19:28:41 +0000</pubDate>
      <link>https://dev.to/rmarioo/the-hidden-trap-of-debugger-gfi</link>
      <guid>https://dev.to/rmarioo/the-hidden-trap-of-debugger-gfi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"Debugging is like being the detective in a crime movie where you are also the murderer." - Filipe Fortes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-it-started-a-false-illusion"&gt;
  &lt;/a&gt;
  How it started: a false illusion
&lt;/h2&gt;

&lt;p&gt;When i had my first programming experience i was not aware of the possibility of using a debugger.&lt;br&gt;
It happened that i had to understand why my software was not working as expected , so the only way i had to understand what was going on was to add some print statements all around the code.&lt;br&gt;
Later I learnt that i can use the debugger as a tool to inspect variables and understand the status of my software in a specific time.&lt;br&gt;
I thought &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I can troubleshoot without adding new code!! &lt;br&gt;
I will be faster than before!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#how-is-going"&gt;
  &lt;/a&gt;
  How is going
&lt;/h2&gt;

&lt;p&gt;After years working on many and more complex projects  i almost totally change my mind, and realised that actually &lt;em&gt;&lt;strong&gt;the debugger slowed me down!&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
To be clear i still think that in few specific simple cases it is worth to leverage the debugger but in complex cases i think there are better alternatives.&lt;br&gt;
What happened ? &lt;br&gt;
I was thinking that &lt;em&gt;debugger was the only way to troubleshoot issues&lt;/em&gt; so i used it all the times.&lt;br&gt;
If i come back to the my most stressful working times almost all of them were moment in which i was trying to understand the code ,spending hours in long debugging sessions inspecting tons of line of code variables and stack trace.&lt;br&gt;
Can you remember your most stressful working time ? &lt;br&gt;
Can you remember if in those moment you were in long debugging sessions ? &lt;br&gt;
Probably you were trying to &lt;a href="https://www.slideshare.net/MarioRusso6/escape-the-legacy-code-matrix-vimercate"&gt;escape the legacy code matrix&lt;/a&gt; and you were stuck on the first phase: the &lt;em&gt;understanding&lt;/em&gt; phase&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#where-is-the-trap-"&gt;
  &lt;/a&gt;
  Where is the trap ?
&lt;/h2&gt;

&lt;p&gt;I will share now why in my opinion in complex use cases using the debugger actually slow us down and increase our stress and cognitive load  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Give up to learn the code&lt;/strong&gt; &lt;br&gt;
Using the debugger is like using a navigator for your car. It actually helps you but sometimes for some reason it dint work and when it happens you are totally lost because you don't know the path. &lt;br&gt;
Jumping soon to debugger prevent you to learn the code and to improve your reading and reverse engineering skills.&lt;br&gt;
Those are skill that you can acquire only reading more and more code written by someone else. The more you do the more you get better to understand it. An remember there are cases in which you cannot rely use the debugger so it is better to have an alternative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Manual actions&lt;/strong&gt; &lt;br&gt;
Inspecting a lot of lines of code and variables require manual and very repetitive action like put breakpoint , enter inside function , go to next line , inspect variable, add watches etc..&lt;br&gt;
Manual action is &lt;em&gt;much slower&lt;/em&gt; then automatic action that could performed by computers.&lt;br&gt;
Keeping in mind a lot of variable values and application state &lt;em&gt;require high cognitive load and energy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Repetitive actions&lt;/strong&gt; &lt;br&gt;
Imagine that you have the following type hierarchy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;University&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;departments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;students&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;ITALY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;SPAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;FRANCE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you need to check more than one time if an university has students from Italy&lt;br&gt;
Every time you need to inspect the country of student in university you need to do at least 5 action like five clicks , inspect variable take notes or remember their values &lt;br&gt;
If you have to it 10 times , you will have to do 50 click or debugger inspections!.&lt;/p&gt;

&lt;p&gt;An alternative approach could be write a function like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;logItalianPresenceInUniversity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;university&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;University&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that prints what you want to check. Few additional code to write and just 1 click to execute and check the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Lack of trust in tests&lt;/strong&gt; &lt;br&gt;
Someone said &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A bug is just a missing test"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of our tests is to help us to define the behaviour of our system and help us to find issues.&lt;br&gt;
An alternative way to debugging to detect an issue is to &lt;em&gt;reproduce it by adding a new test&lt;/em&gt;. &lt;br&gt;
Now if we found a bug thanks to debugger we can call in trap to think "&lt;em&gt;test suite did not help me, so i will do the fix and forget the tests&lt;/em&gt;".&lt;br&gt;
So we may enter in this dangerous loop &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hj8GC_Bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gidqt1y9ws9gp7v9lotw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hj8GC_Bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gidqt1y9ws9gp7v9lotw.png" alt="debugger loop fix without tests" width="611" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sample-case-microservice-with-many-data-transformations"&gt;
  &lt;/a&gt;
  A sample case: microservice with many data transformations
&lt;/h2&gt;

&lt;p&gt;Imagine a service exposing some functionality to the user that need to call other services to fulfil the request&lt;br&gt;
In complex cases there are many data adaptation between the &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;controller&lt;/a&gt; and the call to the other services&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gseCqw4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n022wqz85lmo2ivwovt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gseCqw4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n022wqz85lmo2ivwovt.png" alt="A service with many adaptation steps" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's suppose that there is a bug in that service and some information that arrives from the external service is not sent back to the controller and the user.&lt;br&gt;
Your task is to spot it and fix it and you need to deep dive in many adaptation layers.&lt;br&gt;
Which options you have ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1: Understand and document every little detail of the code&lt;/strong&gt;&lt;br&gt;
The safest option is to read carefully the code trying to understand it , taking notes and spot the missing point.&lt;br&gt;
This option is good but may require a lot of time and effort to deep dive in the code structure. In legacy systems or when you don't have much time &lt;em&gt;it can become an endless process&lt;/em&gt;. On other hand it on long term it &lt;em&gt;improve your skills to read the code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2: Use the application with debugger&lt;/strong&gt;&lt;br&gt;
We could put a breakpoint on controller and on client and use the application. &lt;br&gt;
In our case having a lot of adaptation layers this will be take a lot of time with debugging session and so big effort.&lt;br&gt;
For non trivial cases this approach is probably the worst one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3: Use the application with probes in code&lt;/strong&gt;&lt;br&gt;
Here you can guess what is the idea.&lt;br&gt;
You can write some small probe functions to automatically check what would manually ask the debugger to do. Remember the &lt;code&gt;logItalianPresenceInUniversity&lt;/code&gt; function described above ? .&lt;/p&gt;

&lt;p&gt;My personal approach in this cases is &lt;br&gt;
&lt;em&gt;1. identify the start and end of code section to check&lt;/em&gt;&lt;br&gt;
in this case the controller and the client &lt;br&gt;
&lt;em&gt;2. Automatize checks by writing probes functions&lt;/em&gt; &lt;br&gt;
 Example add function that print if a data structure contains the data that i am looking for &lt;br&gt;
&lt;em&gt;3. Put probes in code and create a &lt;a href="https://devconnected.com/how-to-create-and-apply-git-patch-files/"&gt;git patch&lt;/a&gt; for local changes&lt;/em&gt; &lt;br&gt;
&lt;em&gt;4. Run the application and check the probes&lt;/em&gt;&lt;br&gt;
&lt;em&gt;5. Repeat step 3 until issue is found&lt;/em&gt;&lt;br&gt;
 A &lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#Procedure"&gt;binary search algorithm&lt;/a&gt; can limit the tries &lt;br&gt;
&lt;em&gt;6. Rollback local changes when done&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;In complex scenario i find this approach &lt;em&gt;faster&lt;/em&gt; , incremental and it require less cognitive load.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue-is-found-now-what"&gt;
  &lt;/a&gt;
  Issue is found now what?
&lt;/h2&gt;

&lt;p&gt;Regardless how i found my preference is: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;highlight the issue by writing a new test and watching it fail***&lt;/li&gt;
&lt;li&gt;Fix the text&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When we have to find issues in code we have many option on the strategy to follow.&lt;br&gt;
Using the debugger is only one of them and in my opinion in some cases is not the best approach.&lt;br&gt;
Having more than one option we can choose the one that fit more our case.&lt;/p&gt;

&lt;p&gt;*** &lt;em&gt;Writing a new test can be hard in some cases you may need to break dependencies to isolate the section of code as described in &lt;a href="https://www.amazon.it/Working-Effectively-Legacy-Code-English-ebook/dp/B005OYHF0A"&gt;working effectively with legacy code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>debugging</category>
      <category>feedbackloop</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
