<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Type-Safe Usage of React Router</title>
      <author>Donghyeon Kim</author>
      <pubDate>Mon, 07 Dec 2020 15:32:56 +0000</pubDate>
      <link>https://dev.to/0916dhkim/type-safe-usage-of-react-router-5c44</link>
      <guid>https://dev.to/0916dhkim/type-safe-usage-of-react-router-5c44</guid>
      <description>&lt;p&gt;This is my approach to implement strongly typed routing using React Router and TypeScript. So that if I try to create a &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; to an unknown path, &lt;code&gt;tsc&lt;/code&gt; can warn me appropriately. Of course there are other benefits of typed routes, but let's go over what's wrong with the current implementation first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem" class="anchor"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;react-router&lt;/code&gt; takes any plain string as a path. This makes it difficult to refactor routes when it is required to rename/delete/add routes. Also typos are hard to detect.&lt;/li&gt;
&lt;li&gt;Developers need to provide types for &lt;code&gt;useParams&lt;/code&gt; hook (i.e. &lt;code&gt;useParams&amp;lt;{ id: string }&amp;gt;&lt;/code&gt;). It has the same issue with refactoring. Developers need to update &lt;code&gt;useParams&lt;/code&gt; hooks whenever there's a change in URL parameter names.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#solution-walkthrough" class="anchor"&gt;
  &lt;/a&gt;
  Solution (Walkthrough)
&lt;/h2&gt;

&lt;p&gt;I ended up implementing something I am happy with. Example source code is available on &lt;a href="https://github.com/0916dhkim/typed-react-router"&gt;a GitHub repo&lt;/a&gt;. I hope this can help others who desire typed routes. This post is mostly annotation of my implementation, so if you prefer reading source code directly, check out the GitHub repo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srchookspathstsx-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/hooks/paths.tsx&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The single source of truth for available paths is defined in this module. If a route needs to be modified, this &lt;code&gt;PATH_SPECS&lt;/code&gt; can be fixed, then TypeScript compiler will raise errors where type incompatibilities are found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PATH_SPECS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/post/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/calendar/:year/:month&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;year&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;month&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Utility types can be derived from this readonly array of spec objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PathSpec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;PATH_SPECS&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PathSpec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Find a path spec with the matching path.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;MatchPath&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Object which has matching parameter keys for a path.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;MatchPath&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PathSpec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Small amount of TypeScript magic is applied here, but the end result is quite simple. Note how &lt;code&gt;PathParams&lt;/code&gt; type behaves.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;PathParams&amp;lt;'/post/:id'&amp;gt;&lt;/code&gt; is &lt;code&gt;{ id: string }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PathParams&amp;lt;'/calendar/:year/:month'&amp;gt;&lt;/code&gt; is &lt;code&gt;{ year: string, month: string }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PathParams&amp;lt;'/'&amp;gt;&lt;/code&gt; is &lt;code&gt;{}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, a type-safe utility function is written for building URL strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Build an url with a path and its parameters.
 * @param path target path.
 * @param params parameters.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Upcast `params` to be used in string replacement.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;paramObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spec&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;PATH_SPECS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;paramObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;buildUrl&lt;/code&gt; function can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;buildUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/post/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns '/post/abcd123'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;buildUrl&lt;/code&gt; only takes a known path (from &lt;code&gt;PATH_SPECS&lt;/code&gt;) as the first argument, therefore typo-proof. Sweet!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srccomponentstypedlink-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/components/TypedLink&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Now, let's look at &lt;code&gt;TypedLink&lt;/code&gt; a type-safe alternative to &lt;code&gt;Link&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buildUrl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../hooks/paths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TypedLinkProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Type-safe version of `react-router-dom/Link`.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TypedLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;P&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="si"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;: TypedLinkProps&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;P&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;
      &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buildUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;TypedLink&lt;/code&gt; can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TypedLink&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'/post/:id'&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;to&lt;/code&gt; props of &lt;code&gt;TypedLink&lt;/code&gt; only takes a known path, just like &lt;code&gt;buildUrl&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srccomponentstypedredirecttsx-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/components/TypedRedirect.tsx&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TypedRedirect&lt;/code&gt; is implemented in same fashion as &lt;code&gt;TypedLink&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buildUrl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../hooks/paths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TypedRedirectProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Q&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Type-safe version of `react-router-dom/Redirect`.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TypedRedirect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;P&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Q&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;: TypedRedirectProps&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; Q&amp;gt;) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Redirect&lt;/span&gt;
      &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buildUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srchooksindextsx-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/hooks/index.tsx&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Instead of &lt;code&gt;useParams&lt;/code&gt; which cannot infer the shape of params object, &lt;code&gt;useTypedParams&lt;/code&gt; hook can be used. It can infer the type of params from &lt;code&gt;path&lt;/code&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Type-safe version of `react-router-dom/useParams`.
 * @param path Path to match route.
 * @returns parameter object if route matches. `null` otherwise.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTypedParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;PathParams&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// `exact`, `sensitive` and `strict` options are set to true&lt;/span&gt;
  &lt;span class="c1"&gt;// to ensure type safety.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sensitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, &lt;code&gt;useTypedSwitch&lt;/code&gt; allows type-safe &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; tree.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * A hook for defining route switch.
 * @param routes 
 * @param fallbackComponent 
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTypedSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fallbackComponent&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fallbackComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouteComponent&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;strict&lt;/span&gt; &lt;span class="na"&gt;sensitive&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RouteComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Fallback&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fallback&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's how &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is usually used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Traditional approach.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'/user/:id'&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The code above can be replaced with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TypedSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTypedSwitch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TypedSwitch&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Original&lt;/th&gt;
&lt;th&gt;Replaced&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;Link to='/user/123' /&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;TypedLink to='/user/:id' params={ id: '123' } /&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;Redirect to='/user/123'&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;TypedRedirect to='/user/:id' params={ id: '123' } /&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;useParams()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;useTypedParams('/user/:id')&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;useTypedSwitch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Type-safe alternatives are slightly more verbose than the original syntax, but I believe this is better for overall integrity of a project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developers can make changes in routes without worrying about broken links (at least they don't break silently).&lt;/li&gt;
&lt;li&gt;Nice autocompletion while editing code.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Promises for Rubyists</title>
      <author>Lola</author>
      <pubDate>Mon, 07 Dec 2020 10:57:42 +0000</pubDate>
      <link>https://dev.to/samsunginternet/promises-for-rubyists-2loe</link>
      <guid>https://dev.to/samsunginternet/promises-for-rubyists-2loe</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-soundtrack" class="anchor"&gt;
  &lt;/a&gt;
  The Soundtrack
&lt;/h1&gt;

&lt;p&gt;I tried to write a post about JavaScript Promises using Ciara - Promise, but it didn't work so instead have this genre-agnostic playlist of 10 songs with the title Promise. Don't let my hard work be in vain &amp;amp; have a listen.&lt;br&gt;
&lt;iframe width="100%" height="380px" src="https://open.spotify.com/embed/playlist/6mvCLTreLdT2gBMTwUeTKJ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-background" class="anchor"&gt;
  &lt;/a&gt;
  The Background
&lt;/h1&gt;

&lt;p&gt;JavaScript and Ruby are both single-threaded programming languages, they can really only do one thing at a time, in a particular order. This also means they're both synchronous. They run in a queue-like way, the first operation or function to get called is the first to be performed before any other operation is performed, this presents a problem the moment you want to do anything that requires multi-tasking. Both languages have workarounds, modules, gems and in-built features that can allow you to write asynchronous code, e.g. JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;Web Workers&lt;/a&gt; or background jobs in Ruby. JavaScript also has promises, the topic of today, which Ruby doesn't have an in-built match for at the moment, so I'm going to try my best to recreate what this could look like.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-promise" class="anchor"&gt;
  &lt;/a&gt;
  The Promise
&lt;/h1&gt;

&lt;p&gt;It's a commitment to give you &lt;em&gt;something&lt;/em&gt; later, it'll either be the thing you ask for or an error but you'll definitely get something.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callbacks-in-ruby" class="anchor"&gt;
  &lt;/a&gt;
  Callbacks in Ruby
&lt;/h3&gt;

&lt;p&gt;In Ruby, we really mainly deal with callbacks in the context of Rails (or other web framework) when we're manipulating objects during their creation phase. You might have used a &lt;code&gt;before_create: :do_thing&lt;/code&gt; in a model, this is generally what callbacks are in Rails (not necessarily Ruby), and there are a &lt;a href="https://guides.rubyonrails.org/active_record_callbacks.html"&gt;list of them&lt;/a&gt;. But using plain old Ruby, you'd have a method that you could pass a block to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"the total is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The callback here is the block we pass to &lt;code&gt;add_one(5)&lt;/code&gt; which is then called with our &lt;code&gt;yield&lt;/code&gt; in the definition of the method. So here we're passing the callback to the method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callbacks-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Callbacks in JavaScript
&lt;/h3&gt;

&lt;p&gt;Unlike Ruby, JavaScript functions can accept functions as arguments but not blocks which means you'd create dedicated callback functions in a JS context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the total is ${total}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTotal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we're also passing the callback to the function, similar to the Ruby implementation. This is synchronous since a blocking operation (the &lt;code&gt;addOne&lt;/code&gt;) needs to happen first before the callback can happen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation" class="anchor"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;There isn't a native way to write promises in Ruby but just to illustrate the functionality, imagine being able to send data between your controller and view without refreshing the page in Ruby, with no JavaScript. It's the stuff dreams are made of but in the real world we need JavaScript.&lt;/p&gt;

&lt;p&gt;I've been working on the &lt;a href="https://medium.com/samsung-internet-dev/samsung-the-global-goals-web-debuts-f8cdae4ec21d"&gt;Samsung's Global Goals&lt;/a&gt; PWA and in this I've had to use promises to interact with Stripe and the Payment Request API. Let's see a real world example of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPaymentIntentClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchedPaymentIntentCS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/fetchPaymentIntent/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientSecretObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchedPaymentIntentCS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clientSecretObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nx"&gt;fetchPaymentIntentClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;confirmPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paymentRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;fetchPaymentIntentClientSecret&lt;/code&gt; function is defined using the keyword &lt;code&gt;async&lt;/code&gt;, in the function we make a call to the server using &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; this call then gives us back some data which we return. The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; functions are important here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords enable asynchronous, promise-based behaviour to be written in a asynchronous style, avoiding the need to explicitly configure promise chains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function could also be written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPaymentIntentClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/fetchPaymentIntent/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// response.json also returns a promise since it has to wait for the response to finish before it can parse it&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clientSecretObj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clientSecretObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// extract the thing you need from the response&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPaymentIntentCSPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchPaymentIntentClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;confirmPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paymentRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means that &lt;code&gt;fetchPaymentIntentClientSecret&lt;/code&gt; actually returns a promise. &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are just syntactic sugar for the promises syntax. Using these keywords together, along with &lt;code&gt;fetch&lt;/code&gt; allows us to make the asynchronous call to the server. So when we actually call the function, because it's a promise, we can chain the callbacks and really take advantage of the asynchronous nature. The &lt;code&gt;clientSecret&lt;/code&gt; is returned from the server and we can pass that to the next function that needs it if the call is successful and if it's not, we can log the error instead.&lt;/p&gt;

&lt;p&gt;All without the page being refreshed or modified.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note" class="anchor"&gt;
  &lt;/a&gt;
  A Note
&lt;/h3&gt;

&lt;p&gt;You might have seen promise syntax that looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFancyFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// does something&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFancyFuncPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFancyFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and you're wondering why I haven't done that here. Well, the syntax is different if you're working with a promise-based API, which I am. In our example &lt;code&gt;fetch&lt;/code&gt; returns a promise as does &lt;code&gt;response.json&lt;/code&gt; so we need to treat them as such. &lt;code&gt;new Promise&lt;/code&gt; is used to make promises out of async APIs which are not promise based, e.g. the callback based functions we defined earlier.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why?
&lt;/h1&gt;

&lt;p&gt;Within the context web development, promises are unique to JavaScript in that they're native. Coming from a Ruby background I found them strange, why not just do these things in a background job? But honestly, a small action like retrieving a client secret doesn't need to be done in a job (and probably shouldn't be) and it's probably not the best user experience to reload the page just to get a client secret, especially if the user hasn't triggered it.&lt;/p&gt;

&lt;p&gt;Promises can also be quite complex to get your head around, this post is a primer but I'd encourage you to read more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(Using Promises)[&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(Promise)[&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>ruby</category>
    </item>
    <item>
      <title>bandDotRand: A Random Artist Generator</title>
      <author>Gavi Schneider</author>
      <pubDate>Mon, 07 Dec 2020 10:38:28 +0000</pubDate>
      <link>https://dev.to/gschnei/banddotrand-a-random-artist-generator-281k</link>
      <guid>https://dev.to/gschnei/banddotrand-a-random-artist-generator-281k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdHekIhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/943/1%2ABATSey_O6vjMgMaRC5DO6A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdHekIhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/943/1%2ABATSey_O6vjMgMaRC5DO6A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After completing my &lt;a href="https://medium.com/@gavischneider/my-capstone-project-for-udacitys-cloud-devops-engineer-nanodegree-b83c4e733cd5"&gt;DevOps project&lt;/a&gt; last month, I wanted to take the app I had built and turn it into something more permanent, something with a graphical user interface that could be used outside of the terminal. I had built the app for my capstone project, but there the main focus was on the infrastructure, not on the app itself. I quickly created a program that exposed an API endpoint and returned a random song when it received a request. The song was generated through the Musixmatch API, and would include basic song properties, such as the song ID, name, album, artist, etc.&lt;/p&gt;

&lt;p&gt;Instead of getting a random song, my new idea was to create an app that would get a random artist and display it alongside the artists discography and related artists. Every artist or album on the page would include a link to that artist / album on a music streaming service, so you could actually listen to anything you found interesting. Refreshing the page (or clicking on the next button) would load another artist, so the website could be used as a random artist generator.&lt;/p&gt;

&lt;p&gt;After initially building out a prototype for the website that would eventually become bandDotRand, I realized that the Musixmatch API wasn’t going to cut it, and I had to find a music API that would better suit my needs. Spotify was my next choice, and after diving into their API documentation, it seemed like the right choice. The one thing Spotify didn’t have was an API endpoint to access a random artist, but after reading &lt;a href="https://medium.com/@perryjanssen/getting-random-tracks-using-the-spotify-api-61889b0c0c27"&gt;this&lt;/a&gt; article on how to get random tracks using the Spotify API, I realized I could do something similar in order to get a random artist. Once I had my random artist, I’d need to make one more API call to get the artist’s albums, and then I’d be set.&lt;/p&gt;

&lt;p&gt;I had the artist data, now all that was left to do was to create a frontend that would display all that data nicely. I created all the React components that I needed, added some styles and tied it all together.&lt;/p&gt;

&lt;p&gt;Lastly, I deployed the app on Heroku. Getting the frontend to communicate with the backend turned out to be way more time consuming than I thought it would be (I swear it ran on my machine), but in the end it ran just fine. “In the end”, meaning seven hours of debugging later, but nonetheless, the app is deployed.&lt;/p&gt;

&lt;p&gt;The website is built with React on the frontend, and Node.js with Express on the backend. Both frontend and back are written in TypeScript — after watching some Pluralsight courses on the topic, I was looking for an excuse to try it out. Turns out if you’re coming from a C/C++ (or any statically typed language) background, it really isn’t that difficult to transition to from JavaScript.&lt;/p&gt;

&lt;p&gt;All of the styling was done with TailwindCSS, which is my new favorite utility-class library. The combination of React components and utility-class styling makes building reusable components that look good really simple.&lt;/p&gt;

&lt;p&gt;Looking ahead, I’d love to be able to integrate other streaming service API’s so that the user can be redirected to the service of their choice, instead of just Spotify. I’d have to figure out a way to match the artist on multiple platforms, like taking an artist I received from the Spotify API and finding it’s counterpart on Apple Music or Tidal. Getting the artists website and social accounts would also make a great addition, giving you more access to that new favorite (or not so favorite) band you just discovered.&lt;/p&gt;

&lt;p&gt;You can try out bandDotRand &lt;a href="https://band-dot-rand.herokuapp.com/"&gt;here&lt;/a&gt;. Let &lt;a href="https://twitter.com/gschnei"&gt;me&lt;/a&gt; know what you think, and tell me which new bands you’ve discovered.&lt;/p&gt;

</description>
      <category>expressjs</category>
      <category>react</category>
      <category>music</category>
      <category>node</category>
    </item>
    <item>
      <title>4 Must-Know TypeScript Tips &amp; Tricks</title>
      <author>Sam Piggott</author>
      <pubDate>Mon, 07 Dec 2020 09:21:08 +0000</pubDate>
      <link>https://dev.to/sam_piggott/4-must-know-typescript-tips-tricks-3g8b</link>
      <guid>https://dev.to/sam_piggott/4-must-know-typescript-tips-tricks-3g8b</guid>
      <description>&lt;p&gt;TypeScript has some incredibly nifty utilities that can be used to make your codebase more readable, efficient and safer. &lt;/p&gt;

&lt;p&gt;In this article, I've compiled a list of four of my favourite utilities that I use in my daily workflow, along with some examples and explanations of each. &lt;/p&gt;

&lt;p&gt;They've helped my TypeScript workflow - I hope they help yours, too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Before we get started...
&lt;/h2&gt;

&lt;p&gt;If you're new to TypeScript, I have a full course for beginners available right here on my &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;YouTube channel!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It covers all the essentials you need to get started with TypeScript as a JavaScript developer. &lt;/p&gt;

&lt;p&gt;If that sounds like something you're looking for, &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;check it out here&lt;/a&gt; - I'd love to hear your thoughts on it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pick-and-omit" class="anchor"&gt;
  &lt;/a&gt;
  Pick and Omit
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Pick&lt;/code&gt; and &lt;code&gt;Omit&lt;/code&gt; are special utility types that TypeScript provides as a way to add more convenience and power when creating new types for object shapes. Let's take a look at each one in detail with some examples...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pick" class="anchor"&gt;
  &lt;/a&gt;
  Pick
&lt;/h3&gt;

&lt;p&gt;In the following example, we've constructed an &lt;code&gt;interface&lt;/code&gt; type called &lt;code&gt;Consumable&lt;/code&gt;, which has got a bunch of properties that relate to something you could eat or drink.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;TypeScript provides the &lt;code&gt;Pick&lt;/code&gt; utility to allow us to "pluck" properties from our object shape types, and create a new type from that. Let's create a new type, &lt;code&gt;Pizza&lt;/code&gt;, by simply picking out the relevant properties from the &lt;code&gt;Consumable&lt;/code&gt; type.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Nice! Let's go over that in a little more detail. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first parameter that we pass into the &lt;code&gt;Pick&lt;/code&gt; utility is the type that we want to pick from. &lt;/li&gt;
&lt;li&gt;The second parameter is either a single value or a union type of all of the properties we want to pick out from the type we passed in as the first parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above example, we're picking &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;caloriesPerServing&lt;/code&gt; from the &lt;code&gt;Consumable&lt;/code&gt; type to construct our brand new type, &lt;code&gt;Pizza&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's go one step further. The cool thing about creating a new type is that we can use it just like anything else - so let's extrapolate our &lt;code&gt;Pizza&lt;/code&gt; type and add a &lt;code&gt;toppings&lt;/code&gt; property to our object shape...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In this example, we're declaring &lt;code&gt;Pizza&lt;/code&gt; as an &lt;code&gt;interface&lt;/code&gt;, so that we can extend from our new &lt;code&gt;Pick&lt;/code&gt;ed type and add a brand new parameter, &lt;code&gt;toppings&lt;/code&gt;, to it. That means that our &lt;code&gt;Pizza&lt;/code&gt; interface, after being compiled, would have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;size&lt;/strong&gt;: 'large' | 'medium' | 'small'&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;caloriesPerServing&lt;/strong&gt;: number&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toppings&lt;/strong&gt;: string[]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#omit" class="anchor"&gt;
  &lt;/a&gt;
  Omit
&lt;/h3&gt;

&lt;p&gt;Omit works just like &lt;code&gt;Pick&lt;/code&gt; - but the inverse. &lt;/p&gt;

&lt;p&gt;We pass &lt;code&gt;Pick&lt;/code&gt; the properties we wish to pluck out from the object type, but with &lt;code&gt;Omit&lt;/code&gt;, we pass the properties we wish to &lt;strong&gt;exclude&lt;/strong&gt; from the initial object type.&lt;/p&gt;

&lt;p&gt;Let's take a look at an example to make things a little clearer. Just like with &lt;code&gt;Pick&lt;/code&gt;, we'll use the same &lt;code&gt;Consumable&lt;/code&gt; type once again as a base - but this time, we'll create a new type called &lt;code&gt;Sandwich&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;Consumable&lt;/code&gt; type has a property on it called &lt;code&gt;millilitresPerServing&lt;/code&gt;. That's not really relevant to a sandwich - so by using &lt;code&gt;Omit&lt;/code&gt;, we can pass in two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the type that we wish to use as a base... &lt;/li&gt;
&lt;li&gt;...followed by a single or union type of the keys that we wish to &lt;strong&gt;omit&lt;/strong&gt; from that interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Just like with &lt;code&gt;Pick&lt;/code&gt;!)&lt;/p&gt;

&lt;p&gt;That means in this example, our &lt;code&gt;Sandwich&lt;/code&gt; type would have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;size&lt;/strong&gt;: 'large' | 'medium' | 'small'&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;caloriesPerServing&lt;/strong&gt;: number&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;gramsPerServing&lt;/strong&gt;: number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that &lt;code&gt;millilitresPerServing&lt;/code&gt; isn't present in that list - that's because our &lt;code&gt;Sandwich&lt;/code&gt; type intentionally omits that from our new type by using the &lt;code&gt;Omit&lt;/code&gt; utility as described above.&lt;/p&gt;

&lt;p&gt;What's just as cool - just like with &lt;code&gt;Pick&lt;/code&gt;, the previous example, we can use the new type generated by the &lt;code&gt;Omit&lt;/code&gt; utility as a base to extend from. Let's extend our &lt;code&gt;Sandwich&lt;/code&gt; type by adding some &lt;code&gt;fillings&lt;/code&gt;...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Omit&lt;/strong&gt; and &lt;strong&gt;Pick&lt;/strong&gt; really come into their own in more complex applications, particularly when you have a lot of overlapping object shapes that have properties which should remain identical in type. They're a dream for composition!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#required-amp-partial" class="anchor"&gt;
  &lt;/a&gt;
  Required &amp;amp; Partial
&lt;/h2&gt;

&lt;p&gt;Just like &lt;code&gt;Pick&lt;/code&gt; and &lt;code&gt;Omit&lt;/code&gt; that we covered above, &lt;code&gt;Required&lt;/code&gt; and &lt;code&gt;Partial&lt;/code&gt; are utility types that allow us to create new types from our object types. Let's take a look into each one to see how they could be used as part of a workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#required" class="anchor"&gt;
  &lt;/a&gt;
  Required
&lt;/h3&gt;

&lt;p&gt;Okay, simple example - we have an interface for a (fictional) sign-up form on a website, with all the usual suspects present.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Notice that in the above example, we've got a few &lt;code&gt;?&lt;/code&gt;s in there. &lt;/p&gt;

&lt;p&gt;Those are use to indicate that those properties are &lt;strong&gt;optional&lt;/strong&gt; - which means that they're allowed to be &lt;code&gt;undefined&lt;/code&gt;. Let's create an input object using our type:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;(Note: I could have also just omitted all of of the properties with &lt;code&gt;undefined&lt;/code&gt; as a value, but I wanted this example to be a bit more explicit for easy reading!)&lt;/p&gt;

&lt;p&gt;Let's say for example that we have another form in our web app elsewhere, which uses the same shape of input - but this time, requires that we supply values to &lt;strong&gt;all&lt;/strong&gt; of the properties in our &lt;code&gt;MyFormInputs&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If we wanted to, we could just re-write that same interface again, keeping all our keys and value types the same - but removing those pesky &lt;code&gt;?&lt;/code&gt;s to ensure that we can't pass any &lt;code&gt;undefined&lt;/code&gt; values in...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;...but, following the classic DRY rule, this should start to leave a bit of a bad taste in your mouth. There must be a better way...&lt;/p&gt;

&lt;p&gt;Thankfully, that's where the wonderful &lt;code&gt;Required&lt;/code&gt; utility comes in!&lt;/p&gt;

&lt;p&gt;Let's create a new type called &lt;code&gt;MyFormInputsRequired&lt;/code&gt; and make all of the properties on it non-nullable.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Required&lt;/code&gt; simply takes one parameter - the interface or object type that we want to make all properties enforced. In the above example, we also create a new object using that interface, and ensure that every single property has a corresponding value.&lt;/p&gt;

&lt;p&gt;If the key wasn't present in &lt;code&gt;requiredInputs&lt;/code&gt;, or if we supplied &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as any of the values, this would throw an exception at compile-time. &lt;/p&gt;

&lt;p&gt;Nice and safe!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partial" class="anchor"&gt;
  &lt;/a&gt;
  Partial
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Partial&lt;/code&gt; is the exact opposite of &lt;code&gt;Required&lt;/code&gt; - instead of making all the properties in an interface or object type &lt;strong&gt;required&lt;/strong&gt;, it makes them all &lt;strong&gt;optional&lt;/strong&gt;. (if you've read this entire article from the top, you're probably beginning to notice a pattern...)&lt;/p&gt;

&lt;p&gt;Let's take a look at an example on how it could be used. We'll go back to videogames to maintain some semblance of variation...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the above example, we've introduced our &lt;code&gt;VideoGame&lt;/code&gt; interface, which has three properties on it which are all &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we wanted to create a new type making all of the properties &lt;strong&gt;optional&lt;/strong&gt;. We'll use the power of &lt;code&gt;Partial&lt;/code&gt; to make this happen...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the example above, we create a new type named &lt;code&gt;VideoGamePartial&lt;/code&gt;, and, just like how we used &lt;code&gt;Required&lt;/code&gt; above, we pass the &lt;code&gt;Partial&lt;/code&gt; utility a single object type.&lt;/p&gt;

&lt;p&gt;This creates a new type, copying the exact shape of the &lt;code&gt;VideoGame&lt;/code&gt; interface, but making all of the properties optional.&lt;/p&gt;

&lt;p&gt;When we create a new object using our new &lt;code&gt;VideoGamePartial&lt;/code&gt; type (as demonstrated in the &lt;code&gt;nintendoGame&lt;/code&gt; value at the bottom of the above example), we can see that we're able to skip two of the previously required values - &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;ageRating&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Taking this to an extreme, because &lt;code&gt;Partial&lt;/code&gt; makes &lt;strong&gt;all&lt;/strong&gt; of our properties optional, it would actually be valid to use that type to simply create an empty object...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;...but that's probably more of a hypothetical use-case, as I can't imagine that being super useful in day-to-day 😅&lt;/p&gt;

&lt;p&gt;Finally, topping it all off (and attempting to drive home how cool these utilities are) - let's use our new &lt;code&gt;Partial&lt;/code&gt; type as a base to extend from!&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the above example, we create a new type called &lt;code&gt;SonyVideoGame&lt;/code&gt;, which extends from our &lt;code&gt;VideoGame&lt;/code&gt; type that has a set of properties which are all optional.&lt;/p&gt;

&lt;p&gt;We've then added a new (required!) type to it called &lt;code&gt;platform&lt;/code&gt;. That means that all of the properties (and their respective optional states would be as follows):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt;: string - &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;description&lt;/strong&gt;: string - &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ageRating&lt;/strong&gt;: '3+' | '10+' | '16+' - &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform&lt;/strong&gt;: 'PS2' | 'PS3' | 'PS4' | 'PS5' - &lt;strong&gt;Required&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using composition and the power of TypeScript utilities, we've created a complex type which has a series of properties which are both optional &amp;amp; required. Neat, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;And that concludes our whistle-stop tour on some of TypeScript's powerful utilities that are provided with the language. There's plenty of others that you can delve into &lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;over at the TypeScript handbook&lt;/a&gt; - but these four are some of my favourites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9o6PKG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QO9lI9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9o6PKG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QO9lI9f.png" alt="CodeSnap Promo Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're looking for more TypeScript learnings, I have a full video course on the basics of TypeScript over on my &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;YouTube channel&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Happy TypeScript'ing!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Security 101</title>
      <author>Charlotte Fereday</author>
      <pubDate>Mon, 07 Dec 2020 08:22:00 +0000</pubDate>
      <link>https://dev.to/charlottebrf_99/javascript-security-101-2lag</link>
      <guid>https://dev.to/charlottebrf_99/javascript-security-101-2lag</guid>
      <description>&lt;p&gt;&lt;em&gt;This blog post was originally published in Tes Engineering blog &lt;a href="https://engineering.tes.com/post/javascript-security"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I recently completed the &lt;a href="https://www.pluralsight.com/courses/javascript-security-best-practices"&gt;JavaScript Security: Best Practices course&lt;/a&gt; by &lt;a href="https://twitter.com/marcin_hoppe"&gt;Marcin Hoppe&lt;/a&gt; and wanted to share some key practical take aways I learnt on how to write more secure JavaScript.&lt;br&gt;
As well as reading this blog, I'd also highly recommend completing the course. It's short and sweet and hands on!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#javascript-threat-environments" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript Threat Environments
&lt;/h2&gt;

&lt;p&gt;It's worth noting that there are two different threat environments: client-side JavaScript vs server-side JavaScript. For client-side JavaScript the browser operates on a low trust &amp;amp; highly restricted basis, necessarily so because it works with JavaScript from uncontrolled sources by virtue of users navigating the web.&lt;br&gt;
In comparison for server-side JavaScript Node.js works on a high trust &amp;amp; privileged basis, because it's a controlled source (i.e. Engineering teams have written the code) and it doesn't change during runtime.&lt;br&gt;
There's a more detailed summary of these differing threat environments in the &lt;a href="https://nodesecroadmap.fyi/chapter-1/threats.html"&gt;Roadmap for Node.js Security&lt;/a&gt;, and it's important to keep this difference in mind when writing JavaScript. &lt;/p&gt;

&lt;p&gt;The dynamic nature of JavaScript on the one hand makes it incredibly versatile, and on the other creates a number of security pitfalls. Here are three key pitfalls in JavaScript and how to avoid them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-comparisons-amp-conversions-abuse" class="anchor"&gt;
  &lt;/a&gt;
  1. Comparisons &amp;amp; conversions abuse
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;&lt;br&gt;
JavaScript has a dynamic type system which can have some dangerous but avoidable consequences. Use the JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;Strict mode&lt;/a&gt; to help avoid pitfalls such as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness"&gt;loose comparison&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some examples...&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#nan-null-amp-undefined" class="anchor"&gt;
  &lt;/a&gt;
  NaN, Null &amp;amp; undefined
&lt;/h4&gt;

&lt;p&gt;Automated conversions can lead unexpected code to be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// number&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, this &lt;code&gt;calculatingStuff&lt;/code&gt; function relies on the input being a number. Without any validation to guard against the input being &lt;code&gt;NaN&lt;/code&gt;, the function still runs because &lt;code&gt;NaN&lt;/code&gt; is classed as a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculatingStuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's important to have guard clauses and error handling in place to avoid unexpected behaviour in automated conversions. For instance in this version of &lt;code&gt;calculatingStuffv2&lt;/code&gt; we throw an error if the input is &lt;code&gt;NaN&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a number!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Error: Not a number!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Error: Not a number!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;isNaN()&lt;/code&gt; also guards against undefined, but will not guard against &lt;code&gt;null&lt;/code&gt;. As with everything in JavaScript, there are many ways you could write checks to guard against these &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
A more reliable approach to "catch 'em all" is to &lt;a href="https://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in"&gt;check for truthiness&lt;/a&gt;, as all of these values are falsy they will always return the error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a number!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Error: Not a number!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Error: Not a number!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// // Error: Not a number!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatingStuffv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#loose-comparison" class="anchor"&gt;
  &lt;/a&gt;
  Loose comparison
&lt;/h4&gt;

&lt;p&gt;Loose comparison is another way code could be unexpectedly executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the strict comparison &lt;code&gt;===&lt;/code&gt; would rule out the possibility of unexpected side effects, because it always considers operands of different types to be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-injection-attacks-from-dynamically-executed-code" class="anchor"&gt;
  &lt;/a&gt;
  2. Injection attacks from dynamically executed code
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;&lt;br&gt;
Be sure to always validate data before using it in your application, and avoid passing strings as arguments to JavaScript functions which can dynamically execute code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some examples...&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#eval" class="anchor"&gt;
  &lt;/a&gt;
  eval()
&lt;/h4&gt;

&lt;p&gt;As described in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Never_use_eval!"&gt;mdn docs&lt;/a&gt; eval 'executes the code it's passed with the privileges of the caller'. &lt;/p&gt;

&lt;p&gt;This can become very dangerous if, for example, eval is passed an unvalidated user input with malicious code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;script type=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;some malicious code&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#unsafe-variants-of-browser-apis" class="anchor"&gt;
  &lt;/a&gt;
  Unsafe variants of browser APIs
&lt;/h4&gt;

&lt;p&gt;Both &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"&gt;setTimeout&lt;/a&gt; &amp;amp; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval"&gt;setInterval&lt;/a&gt; have an optional syntax where a string can be passed instead of a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;script type=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;some malicious code&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Just like the &lt;code&gt;eval()&lt;/code&gt; example this would lead to executing the malicious code at runtime. This can be avoided by always using the passing a function as the argument syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-attacks-from-prototype-pollution" class="anchor"&gt;
  &lt;/a&gt;
  3. Attacks from Prototype pollution
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;&lt;br&gt;
Every JavaScript object has a prototype chain which is mutable and can be changed at runtime. Guard against this by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Freezing the prototype to prevent new properties being added or amended &lt;/li&gt;
&lt;li&gt;Create objects without a prototype&lt;/li&gt;
&lt;li&gt;Prefer &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;Map&lt;/a&gt; over plain &lt;code&gt;{}&lt;/code&gt; objects&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Some examples...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's an example where the value of the &lt;code&gt;toString&lt;/code&gt; function in the prototype is changed to execute the malicious script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cutePuppy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Beagle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;cutePuppy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;malicious&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A couple of approaches to mitigate this risk is to be careful when initiating new objects, to either create them removing the prototype, freeze the prototype or use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;Map object&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// remove&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cutePuppyNoPrototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Beagle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// freeze&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cutePuppyNoPrototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Map&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;puppyMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;cutePuppyNoPrototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Beagle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Prototypal inheritance is an &lt;a href="https://portswigger.net/daily-swig/prototype-pollution-the-dangerous-and-underrated-vulnerability-impacting-javascript-applications"&gt;underrated threat&lt;/a&gt; so it's definitely worth considering this to guard against JavaScript being exploited in a variety of ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling" class="anchor"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;Finally, beyond being aware of these pitfalls of JavaScript, there are a number of tools you could use to get early feedback during development. It's important to consider security concerns for both JavaScript that you have written, and third party JavaScript introduced through dependencies.&lt;/p&gt;

&lt;p&gt;Here are a few highlights from some great Static code analysis (SAST) tools listed in &lt;a href="https://github.com/lirantal/awesome-nodejs-security"&gt;Awesome Node.js security&lt;/a&gt; &amp;amp; &lt;a href="https://guidesmiths.github.io/cybersecurity-handbook/tooling"&gt;Guidesmiths Cybersecurity handbook&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-your-code" class="anchor"&gt;
  &lt;/a&gt;
  In your code
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Always &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;&lt;code&gt;use strict&lt;/code&gt; development mode&lt;/a&gt; when writing JavaScript&lt;/li&gt;
&lt;li&gt;Use a linter, for example &lt;a href="https://eslint.org/"&gt;eslint&lt;/a&gt; can configured to guard against some of the pitfalls we explored above by editing the rules:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"no-eval"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"no-implied-eval"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"no-new-func"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use a security plugin in your text editor, for example &lt;a href="https://www.npmjs.com/package/eslint-plugin-security"&gt;eslint-plugin-security&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#in-your-javascript-dependencies-code" class="anchor"&gt;
  &lt;/a&gt;
  In your JavaScript dependencies code
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://docs.npmjs.com/cli/v6/commands/npm-audit/"&gt;npm audit&lt;/a&gt; to check for known vulnerabilities&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/lirantal/lockfile-lint"&gt;lockfile lint&lt;/a&gt; to check changes in the &lt;code&gt;package-lock.json&lt;/code&gt; which is typically not reviewed&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/verifynpm/tbv"&gt;trust but verify&lt;/a&gt; to compare an npm package with its source repository to ensure the resulting artifact is the same&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>security</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Symfony and Hexagonal Architecture</title>
      <author>AlessandroMinoccheri</author>
      <pubDate>Mon, 07 Dec 2020 08:07:35 +0000</pubDate>
      <link>https://dev.to/minompi/symfony-and-hexagonal-architecture-5c91</link>
      <guid>https://dev.to/minompi/symfony-and-hexagonal-architecture-5c91</guid>
      <description>&lt;p&gt;I have been working on many Symfony projects in my career and one of the most common problems where customers call our company is that their software is blocked in the old framework version, or they are not maintainable because it costs a lot to find and fix bugs.&lt;/p&gt;

&lt;p&gt;Usually, I try to understand well why those legacy projects are in that state. And often I have found a common pattern: the team at the beginning of the project needs to create an application from zero in a rapid way because there is a strict deadline.&lt;br&gt;
Usually, they start in this way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Symfony skeleton project with composer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;remove demo code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;auto-generate entities&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;auto-generate controllers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ready to develop the application&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These steps for me are not the best practice because they started immediately to code something instead of understanding the domain and behaviors.&lt;br&gt;
I think that in the situation explained previously they were guided from the framework.&lt;br&gt;
In my opinion, it is better to concentrate your effort on the domain and you need to treat Symfony (or a framework in general) as a tool not the main core of the software because the real value of your software is the domain, the solution that you implement to solve problems.&lt;/p&gt;

&lt;p&gt;Be guided from the framework has many side effects and one of the most dangerous is coupling domain and framework that can create many problems like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;impossible to upgrade framework and vendors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cost of maintenance, because every bug or new features takes a lot of time to be completed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;developers are not motivated because the stack it’s very old for the reason of point one&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;not maintainable application&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a lot of technical debt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But don’t be scared, there is an architecture that can help you to avoid these problems: &lt;strong&gt;hexagonal architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hexagonal-architecture-history" class="anchor"&gt;
  &lt;/a&gt;
  Hexagonal architecture history
&lt;/h2&gt;

&lt;p&gt;The hexagonal architecture was invented by Alistair Cockburn in an attempt to avoid known structural pitfalls in object-oriented software design, such as undesired dependencies between layers and contamination of user interface code with business logic, and published in 2005.&lt;/p&gt;

&lt;p&gt;The hexagonal architecture divides a system into several loosely-coupled interchangeable components, such as the application core, the database, the user interface, test scripts, and interfaces with other systems. This approach is an alternative to the traditional layered architecture. (&lt;em&gt;Wikipedia&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;When I read and explain this definition many times developers ask me: is it an over-engineer strategy?&lt;/p&gt;

&lt;p&gt;Well, you have more classes, more concepts, and more moments where you need to think a lot about the correct position of a class, naming a class, or a better name for a variable; again it depends on you, I can only recommend to try to apply this strategy and improve your skill with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reallife-problems" class="anchor"&gt;
  &lt;/a&gt;
  Real-life problems
&lt;/h2&gt;

&lt;p&gt;A project written 10 years ago is blocked into an old PHP version and you would like to migrate to a new version.&lt;br&gt;
Upgrade PHP means that you need to upgrade the framework and vendors touching the business logic because everything is coupled.&lt;br&gt;
You can’t upgrade in a securly way because the code is not fully covered by tests.&lt;br&gt;
In that case, you have a not maintainable application.&lt;br&gt;
All these problems are common if you have coupled your domain and framework.&lt;/p&gt;

&lt;p&gt;With hexagonal architecture, you can separate framework and domain so you can upgrade vendors and framework touching a little specific part of your code and not the business logic.&lt;br&gt;
To separate framework and domain, I mean in practice to split them into different directories. I will treat it in a moment.&lt;/p&gt;

&lt;p&gt;Another good example of a coupling code is when you have remote services and they change something.&lt;/p&gt;

&lt;p&gt;Let’s imagine that you have a payment gateway provider that releases a new version of it and your current version used in your application is not already supported.&lt;br&gt;
You can switch to a new version or replace it with another gateway provider but you know that you have to refactor many parts all over the project because your domain is strictly coupled with the library or service.&lt;br&gt;
So you need to put a lot of effort into rewriting many parts and you can introduce bugs.&lt;/p&gt;

&lt;p&gt;With hexagonal architecture, you can replace, and change only adapters, &lt;strong&gt;without touching your domain logic&lt;/strong&gt; because it is decoupled from the framework.&lt;/p&gt;

&lt;p&gt;Example of coupled code:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Payment {
    public function pay(Request $request): void
    {
        $gateway = new YourBankGateway();
        $gateway-&amp;gt;pay($request-&amp;gt;get(‘amount’)));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the previous class there are some problems in my opinion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You are calling the method pay with a Request object that represents an HTTP Web request. This means that you can’t call this method from a CLI command, if you need it, you have to duplicate this code or change something.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instantiating the service YourBankGateway inside the method means that if you would like to replace that service with another one, you need to change it all over the code base all lines like that.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's try to decouple that code&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface GatewayProvider {
    public function pay(Money $amount): void
}

class YourBankGateway implements GatewayProvider {
    public function pay(Money $amount): void
    {
        //do stuff..
    }
}

class Payment {
    private GatewayProvider $gateway;

    public function __construct(GatewayProvider $gateway)
    {
        $this-&amp;gt;gateway = $gateway;
    }

    public function payThroughGateway(Money $amount): void
    {
        $this-&amp;gt;gateway-&amp;gt;pay($amount));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this case, and many others, the use of interfaces and dependency injection pattern allow developers to decouple the code because whenever you want you can change the implementation with a new one that implements that interface.&lt;/p&gt;

&lt;p&gt;Another advantage of the decoupling example is: now you can call the class Payment from an HTTP web request or CLI command because you need to pass an object Money (usually I try to pass a typed object or DTO) instead of a Request object.&lt;/p&gt;

&lt;p&gt;The coupling domain and framework have the dark side effect of creating a &lt;strong&gt;not maintainable application&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maintainable-application" class="anchor"&gt;
  &lt;/a&gt;
  Maintainable application
&lt;/h2&gt;

&lt;p&gt;For maintainability I mean is the absence (reduction) of technical debt.&lt;br&gt;
Technical debt is the debt we pay for our (bad) decisions, and it’s paid back in time and frustration.&lt;/p&gt;

&lt;p&gt;A maintainable application is one that increases technical debt at the slowest rate we can feasibly achieve.&lt;/p&gt;

&lt;p&gt;What are the measures of a highly maintainable application?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Changes in one part of an application should affect as few other places as possible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding features shouldn’t require to touch any part of the code-base&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding new ways to interact with the application should require as few changes as possible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugging should require as few workarounds&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Testing should be relatively easy&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To touch less code as possible for new features or legacy features it’s important to delegate a specific class that has one single responsibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-responsibility" class="anchor"&gt;
  &lt;/a&gt;
  Single responsibility
&lt;/h2&gt;

&lt;p&gt;A good concept to follow is the single responsibility for the code but it exists also for the architecture: what changes for the same reason should be grouped, for examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All things related to the framework&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All things related to the domain logic&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All things related to APIs call&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can create the most important distinction in our project: Domain, Application, and infrastructure.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;domain&lt;/strong&gt; I mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;entities: models, value objects, and aggregates…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;interfaces for boundary objects&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;strong&gt;application&lt;/strong&gt; I mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use cases (application services)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;strong&gt;infrastructure&lt;/strong&gt; I mean&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;framework&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;implementations for boundary objects&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;controllers, CLI commands&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-a-hexagon" class="anchor"&gt;
  &lt;/a&gt;
  Why a Hexagon?
&lt;/h2&gt;

&lt;p&gt;The number of sides is arbitrary.&lt;br&gt;
The point is that it has many sides.&lt;br&gt;
Each side represents a “port” into or out of our application.&lt;br&gt;
Each &lt;strong&gt;port&lt;/strong&gt; can be used by &lt;strong&gt;adapters&lt;/strong&gt; to make our system work fine.&lt;br&gt;
Let’s explain what ports and adapters mean in depth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ports" class="anchor"&gt;
  &lt;/a&gt;
  Ports
&lt;/h3&gt;

&lt;p&gt;Ports are like contracts so they will not have any representation in the codebase.&lt;/p&gt;

&lt;p&gt;There is a port for every way a use case of the application can be invoked (through the UI, API, etc.) as well as for all the ways data leaves the application (persistence, notifications to other systems, etc…). Cockburn calls these primary and secondary ports or usually, developers call them input and output ports.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Primary&lt;/strong&gt; and &lt;strong&gt;secondary&lt;/strong&gt; are the distinction between intention for communication and the supporting implementation.&lt;/p&gt;

&lt;p&gt;Example of port:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface ProductRepositoryInterface
{
    public function find(ProductId $id): ?Product;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Ports are only definitions of what we would like to do. They are not saying how to achieve them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adapters" class="anchor"&gt;
  &lt;/a&gt;
  Adapters
&lt;/h3&gt;

&lt;p&gt;Adapters are the implementation of the ports because for each of these abstract ports we need some code to make the connection work.&lt;/p&gt;

&lt;p&gt;They are very concrete and contain low-level code, and are by definition decoupled from their ports.&lt;/p&gt;

&lt;p&gt;Example of the adapter:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class MysqlProductRepository implements ProductRepositoryInterface
{

    private $repository;

    public function __construct(ProductRepository $repository)
    {
        $this-&amp;gt;repository = $repository;
    }

    public function find(ProductId $id): ?Product
    {
        return $this-&amp;gt;repository-&amp;gt;find(id);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let's try to represent our ports and adapters inside a real system&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BULr60Vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Au07J5_wFKQcoznEmvNFDnQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BULr60Vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Au07J5_wFKQcoznEmvNFDnQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have CLI command or HTTP Request that are calling our input adapters inside the infrastructure layer. The Adapters implement our input ports inside the domain layer.&lt;br&gt;
On the other side, we have our output adapters inside the infrastructure layer, which are implementing our output ports inside the domain and can interact with an external system like a database.&lt;/p&gt;

&lt;p&gt;So in our PHP Application, we can have a structure like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRiyJ4ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Awfj-PT9lBMpbYgQ1-o1Mdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRiyJ4ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Awfj-PT9lBMpbYgQ1-o1Mdg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, you have two different contexts: Payment and Cart.&lt;br&gt;
Under each context, in this example, there is a distinction between domain, application, and infrastructure. It's not mandatory to have all these directories, sometimes could not exists application layer or infrastructure layer.&lt;/p&gt;

&lt;p&gt;In your domain, you have your domain logic without reference to any vendors (not always true, for example usually in my domain I use Ramsey/UUID).&lt;br&gt;
Inside this folder, you have also all the ports to specify how you want that data using objects.&lt;/p&gt;

&lt;p&gt;In your application folder, you can have services and use cases.&lt;/p&gt;

&lt;p&gt;In your infrastructure folder you can have framework code and adapters, so the implementation of domain ports using vendors and technology that you prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-inversion-principle" class="anchor"&gt;
  &lt;/a&gt;
  Dependency inversion principle
&lt;/h2&gt;

&lt;p&gt;Now If you now combine hexagonal architecture with the dependency inversion principle you can improve again a lot your projects. &lt;br&gt;
The dependency inversion principle means that High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcjyPAbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AvQujDoxIN5AgZWsbuhfTFQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcjyPAbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AvQujDoxIN5AgZWsbuhfTFQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So an infrastructure class can depend on an application class and domain class.&lt;br&gt;
An application class can depend on a domain class but can’t depend on an infrastructure class.&lt;/p&gt;

&lt;p&gt;A domain class can’t depend on an infrastructure or application class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-hexagonal-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Advantages of using hexagonal architecture
&lt;/h2&gt;

&lt;p&gt;There are a lot of advantages for me using hexagonal architecture like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Separating the domain from infrastructure increases testability because many parts of the code don’t need a database connection, internet connection, or filesystem. You can create a lot of unit tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can replace an adapter without affecting the ports, you can change the database and the domain doesn’t need to change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can postpone the choice of vendors, databases, servers, etc… because it’s more important to model your domain, so you can have more knowledge when you need to make that choice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can update vendors and frameworks without touching your domain code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  When to use it
&lt;/h2&gt;

&lt;p&gt;At the moment I am trying to use this architecture always because when you start to think with this mindset it’s very difficult to come back.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-legacy-code-without-hexagonal-architecture" class="anchor"&gt;
  &lt;/a&gt;
  How about legacy code without hexagonal architecture?
&lt;/h2&gt;

&lt;p&gt;Usually, with a legacy application that doesn’t follow this architecture, I suggest to the team to start to try new things to make the domain and the code better and clear.&lt;/p&gt;

&lt;p&gt;It starts with creating new directories like Infrastructure and domain.&lt;/p&gt;

&lt;p&gt;Now new concepts and features could be developed into those directories.&lt;/p&gt;

&lt;p&gt;With old features, if it’s possible and small I try to create pull requests to migrate little concepts with the new architecture.&lt;br&gt;
When I migrate an old legacy piece of code I try to follow a golden rule that I love the boy scout rule:&lt;/p&gt;

&lt;p&gt;Leave your code better than you found it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-improve-again-our-projects" class="anchor"&gt;
  &lt;/a&gt;
  Let’s improve again our projects
&lt;/h2&gt;

&lt;p&gt;To improve your domain and your code I can suggest using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DDD (Domain-driven design)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CQRS pattern (Command Query Responsibility Segregation)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Event sourcing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TDD&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BDD&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these concepts methodologies and approaches can improve again your projects.&lt;/p&gt;

</description>
      <category>php</category>
      <category>symfony</category>
      <category>code</category>
      <category>hexagonalarchitecture</category>
    </item>
    <item>
      <title>What is TCP/IP? Layers and protocols explained</title>
      <author>Victoria Drake</author>
      <pubDate>Mon, 07 Dec 2020 08:01:22 +0000</pubDate>
      <link>https://dev.to/victoria/what-is-tcp-ip-layers-and-protocols-explained-358b</link>
      <guid>https://dev.to/victoria/what-is-tcp-ip-layers-and-protocols-explained-358b</guid>
      <description>&lt;p&gt;A significant part of the process of creation is the ability to imagine things that do not yet exist. This skill was instrumental to the creation of the Internet. If no one had imagined the underlying technology that most now take for granted every day, there would be no cat memes.&lt;/p&gt;

&lt;p&gt;To make the Internet possible, two things that needed imagining are &lt;em&gt;layers&lt;/em&gt; and &lt;em&gt;protocols.&lt;/em&gt; Layers are conceptual divides that group similar functions together. The word “protocol,” means “the way we’ve agreed to do things around here,” more or less. In short, both layers and protocols can be explained to a five-year-old as “ideas that people agreed sounded good, and then they wrote them down so that other people could do things with the same ideas.”&lt;/p&gt;

&lt;p&gt;The Internet Protocol Suite is described in terms of layers and protocols. Collectively, the suite refers to the communication protocols that enable our endless scrolling. It’s often called by its foundational protocols: the Transmission Control Protocol (TCP) and the Internet Protocol (IP). Lumped together as TCP/IP, these protocols describe how data on the Internet is packaged, addressed, sent, and received.&lt;/p&gt;

&lt;p&gt;Here’s why the Internet Protocol Suite, or TCP/IP, is an imaginary rainbow layer cake.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layers-are-imaginary" class="anchor"&gt;
  &lt;/a&gt;
  Layers are imaginary
&lt;/h2&gt;

&lt;p&gt;If you consider the general nature of a rainbow layer sponge cake, it’s mostly made up of soft, melt-in-your mouth vanilla-y goodness. This goodness is in itself comprised of something along the lines of eggs, butter, flour, and sweetener.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ieUhib_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/free-cake.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieUhib_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/free-cake.png" alt="Cartoon of a slice of rainbow layer cake, reads &amp;amp;ldquo;Yay! Free cake!&amp;amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There isn’t much to distinguish one layer of a rainbow sponge cake from another. Often, the only difference between layers is the food-coloring and a bit of frosting. When you think about it, it’s all cake from top to bottom. The rainbow layers are only there because the baker thought they ought to be.&lt;/p&gt;

&lt;p&gt;Similar to cake ingredients, layers in the context of computer networking are mostly composed of protocols, algorithms, and configurations, with some data sprinkled in. It can be easier to talk about computer networking if its many functions are split up into groups, so certain people came up with descriptions of layers, which we call network models. TCP/IP is just one network model among others. In this sense, layers are concepts, not things.&lt;/p&gt;

&lt;p&gt;Some of the people in question are part of the Internet Engineering Task Force (IETF). They created the &lt;a href="https://tools.ietf.org/html/rfc1122"&gt;RFC-1122&lt;/a&gt; publication, discussing the Internet’s communications layers. Half of a whole, the standard:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…covers the communications protocol layers: link layer, IP layer, and transport layer; its companion &lt;a href="https://tools.ietf.org/html/rfc1123"&gt;RFC-1123&lt;/a&gt; covers the application and support protocols.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The layers described by RFC-1122 and RFC-1123 each encapsulate protocols that satisfy the layer’s functionality. Let’s look at each of these communications layers and see how TCP and IP stack up in this model of the Internet layer cake.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-layer-protocols" class="anchor"&gt;
  &lt;/a&gt;
  Link layer protocols
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rtE7MEQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/link.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rtE7MEQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/link.png" alt="Link cake layer cartoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://tools.ietf.org/html/rfc1122#page-21"&gt;link layer&lt;/a&gt; is the most basic, or lowest-level, classification of communication protocol. It deals with sending information between hosts on the same local network, and translating data from the higher layers to the physical layer. Protocols in the link layer describe how data interacts with the transmission medium, such as electronic signals sent over specific hardware. Unlike other layers, link layer protocols are dependent on the hardware being used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internet-layer-protocols" class="anchor"&gt;
  &lt;/a&gt;
  Internet layer protocols
&lt;/h2&gt;

&lt;p&gt;Protocols in the &lt;a href="https://tools.ietf.org/html/rfc1122#page-27"&gt;Internet layer&lt;/a&gt; describe how data is sent and received over the Internet. The process involves packaging data into packets, addressing and transmitting packets, and receiving incoming packets of data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59QITS9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/internet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59QITS9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/internet.png" alt="Internet cake layer cartoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most widely known protocol in this layer gives TCP/IP its last two letters. IP is a connectionless protocol, meaning that it provides no guarantee that packets are sent or received in the right order, along the same path, or even in their entirety. Reliability is handled by other protocols in the suite, such as in the transport layer.&lt;/p&gt;

&lt;p&gt;There are currently two versions of IP in use: IPv4, and IPv6. Both versions describe how devices on the Internet are assigned IP addresses, which are used when navigating to cat memes. IPv4 is more widely used, but has only &lt;a href="https://tools.ietf.org/html/rfc791#section-2.3"&gt;32 bits for addressing&lt;/a&gt;, allowing for about 4.3 billion (ca. 4.3×10&lt;sup&gt;9&lt;/sup&gt;) possible addresses. These are running out, and IPv4 and will eventually suffer from address exhaustion as more and more people use more devices on the Internet.&lt;/p&gt;

&lt;p&gt;The successor version IPv6 aims to solve address exhaustion by &lt;a href="https://tools.ietf.org/html/rfc8200#section-1"&gt;using 128 bits for addresses&lt;/a&gt;. This provides, um, a &lt;em&gt;lot&lt;/em&gt; more address possibilities (ca. 3.4×10&lt;sup&gt;38&lt;/sup&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transport-layer-protocols" class="anchor"&gt;
  &lt;/a&gt;
  Transport layer protocols
&lt;/h2&gt;

&lt;p&gt;In May 1974, Vint Cerf and Bob Kahn (collectively often called “the fathers of the Internet”) published a paper entitled &lt;a href="https://web.archive.org/web/20160304150203/http://ece.ut.ac.ir/Classpages/F84/PrincipleofNetworkDesign/Papers/CK74.pdf"&gt;A Protocol for Packet Network Intercommunication&lt;/a&gt;. This paper contained the first description of a Transmission Control Program, a concept encompassing what would eventually be known as the Transmission Control Protocol (TCP) and User Datagram Protocol (UDP). (I had the pleasure of meeting Vint and can personally confirm that yes, he does look exactly like The Architect in the Matrix movies.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PY5LRBXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/transport.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PY5LRBXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/transport.png" alt="Transport cake layer cartoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://tools.ietf.org/html/rfc1122#page-77"&gt;transport layer&lt;/a&gt; presently encapsulates TCP and UDP. Like IP, UDP is connectionless and can be used to prioritize time over reliability. TCP, on the other hand, is a connection-oriented transport layer protocol that prioritizes reliability over latency, or time. TCP describes transferring data in the same order as it was sent, retransmitting lost packets, and controls affecting the rate of data transmission.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-layer-protocols" class="anchor"&gt;
  &lt;/a&gt;
  Application layer protocols
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7XGYPjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/application.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7XGYPjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/application.png" alt="Application cake layer cartoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application layer describes the protocols that software applications interact with most often. The specification includes descriptions of the remote login protocol &lt;a href="https://tools.ietf.org/html/rfc1123#section-3"&gt;Telnet&lt;/a&gt;, the &lt;a href="https://tools.ietf.org/html/rfc1123#section-4"&gt;File Transfer Protocol (FTP)&lt;/a&gt;, and the &lt;a href="https://tools.ietf.org/html/rfc1123#section-5"&gt;Simple Mail Transfer Protocol (SMTP)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also included in the application layer are the Hypertext Transfer Protocol (HTTP) and its successor, Hypertext Transfer Protocol Secure (HTTPS). HTTPS is secured by Transport Layer Security, or TLS, which can be said to be the top-most layer of the networking model described by the Internet protocol suite. If you’d like to further understand TLS and how this protocol secures your cat meme viewing, I invite you &lt;a href="https://victoria.dev/blog/tls"&gt;read my article about TLS and cryptography&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-internet-cake-is-still-baking" class="anchor"&gt;
  &lt;/a&gt;
  The Internet cake is still baking
&lt;/h2&gt;

&lt;p&gt;Like a still-rising sponge cake, descriptions of layers, better protocols, and new models are being developed every day. The Internet, or whatever it will become in the future, is still in the process of being imagined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxum20dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/cake.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxum20dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/cake.png" alt="Cartoon of the full Internet layer cake, topped with Nyan Cat memes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I'd love to know. Join the thousands of people who learn along with me on &lt;a href="https://victoria.dev/"&gt;victoria.dev&lt;/a&gt;! Visit or &lt;a href="https://victoria.dev/index.xml"&gt;subscribe via RSS&lt;/a&gt; for more programming, cybersecurity, and cat meme cartoons.&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything about package.json</title>
      <author>Sanchithasr</author>
      <pubDate>Mon, 07 Dec 2020 07:58:42 +0000</pubDate>
      <link>https://dev.to/sanchithasr/everything-about-package-json-2119</link>
      <guid>https://dev.to/sanchithasr/everything-about-package-json-2119</guid>
      <description>&lt;p&gt;&lt;strong&gt;Package.json&lt;/strong&gt; is a file in the root directory of a Node.js project that holds various information relevant to the project. This file gives information to npm that allows it to identify the project as well as handle the project’s dependencies.&lt;/p&gt;

&lt;p&gt;A package.json file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lists the packages your project is dependent on&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;specifies versions of a package that your project can use/ using&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;makes your build reproducible, and therefore easier to share with other developers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;contains other metadata such as a &lt;em&gt;project description, the version of the project in a particular distribution, license information, even configuration data etc&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is vital to both &lt;em&gt;npm&lt;/em&gt; and the end-users of the package&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-the-packagejson-file" class="anchor"&gt;
  &lt;/a&gt;
  How to create the package.json file?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the command line, navigate to the root directory of your project.&lt;/li&gt;
&lt;li&gt;Run the following command
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Answer the questionnaire in the command line.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE0zub3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGfsaaSHySsyhlmOU7UK4eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE0zub3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGfsaaSHySsyhlmOU7UK4eg.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the following command if you want to create the file using default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init --yes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TQDD7RDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQlNpEYhWUe_gU60G8X77mA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQDD7RDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQlNpEYhWUe_gU60G8X77mA.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-properties-of-packagejson" class="anchor"&gt;
  &lt;/a&gt;
  Understanding the Properties of package.json
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#name-" class="anchor"&gt;
  &lt;/a&gt;
  name —
&lt;/h4&gt;

&lt;p&gt;This is the most important and required field in the package.json file. This should represent the name of the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"name": "my-blog-backend",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#version-" class="anchor"&gt;
  &lt;/a&gt;
  version —
&lt;/h4&gt;

&lt;p&gt;This is also a mandatory property of the package.json file just like the name. This property represents the version of the module of the project. The rules to be followed for this field are specified here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"version": "1.0.0",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#description-" class="anchor"&gt;
  &lt;/a&gt;
  description —
&lt;/h4&gt;

&lt;p&gt;You can type in the description of the project with more specifics to understand the project as a string. This helps people discover your package, as it’s listed in npm search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"description": "This project is the personal blog",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#main-" class="anchor"&gt;
  &lt;/a&gt;
  main —
&lt;/h4&gt;

&lt;p&gt;The main field represents the file which is the primary entry point to your program. This should point to the file that serves as the entry point to your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"main": "server.js",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scripts-" class="anchor"&gt;
  &lt;/a&gt;
  scripts —
&lt;/h4&gt;

&lt;p&gt;The “scripts” property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event and the value is the command to run at that point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "start": "npx babel-node src/server.js",
  "dev": "npx babel-node src/server.js",
  "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1",
  "lint": "eslint ./server"
},
people fields: author, contributors —
The “author” is one person. “contributors” are an array of people. We can use either of the fields according to our needs to list the people involved in the project.
"author": {
  "name": "Sanchitha",
  "email": "s@sharma.com",
  "url": "http://wordspoolsite.wordpress.com/"
},
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bugs-" class="anchor"&gt;
  &lt;/a&gt;
  bugs —
&lt;/h4&gt;

&lt;p&gt;This field contains the URL to your project’s issue tracker and/or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"bugs":
{
  "url": "https://github.com/owner/project/issues",
  "email": "project@hostname.com"
},
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#homepage-" class="anchor"&gt;
  &lt;/a&gt;
  homepage —
&lt;/h4&gt;

&lt;p&gt;The URL to the project homepage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"homepage": "https://github.com/owner/project#readme"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#keywords-" class="anchor"&gt;
  &lt;/a&gt;
  keywords —
&lt;/h4&gt;

&lt;p&gt;This helps people discover your package as it’s listed in npm search You can add the keywords in it as an array of strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"keywords": [
    "node",
    "vue",
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#private-" class="anchor"&gt;
  &lt;/a&gt;
  private —
&lt;/h4&gt;

&lt;p&gt;If you set "private": true in your package.json, then npm will refuse to publish it. The default value will be false .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dependencies-" class="anchor"&gt;
  &lt;/a&gt;
  dependencies —
&lt;/h4&gt;

&lt;p&gt;Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string that has one or more space-separated descriptors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependencies": {
  "express": "^4.17.1"
},
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#devdependencies-" class="anchor"&gt;
  &lt;/a&gt;
  devDependencies —
&lt;/h4&gt;

&lt;p&gt;If someone is planning on downloading and using your module in their program, then they probably don’t want or need to download and build the external test or documentation framework that you use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"devDependencies": {
  "@babel/cli": "^7.12.8",
  "@babel/core": "^7.12.9",
  "@babel/node": "^7.12.6",
  "@babel/preset-env": "^7.12.7"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#repository-" class="anchor"&gt;
  &lt;/a&gt;
  repository —
&lt;/h4&gt;

&lt;p&gt;Specify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the npm docs command will be able to find you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"repository": {
  "type" : "git",
  "url" : "https://github.com/npm/cli.git"
}
"repository": {
  "type" : "svn",
  "url" : "https://v8.googlecode.com/svn/trunk/"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#license-" class="anchor"&gt;
  &lt;/a&gt;
  license —
&lt;/h4&gt;

&lt;p&gt;You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you’re placing on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“license”: “ISC”,
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Below is the example of the package.json file that has all the fields that I have explained here. There are still many other fields in package.json. You can find more about them &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {
    "name": "my-blog-backend",
    "version": "1.0.0",
    "description": "This project is the personal blog",
    "private": true,
    "main": "index.js",

    "scripts": {
      "start": "npx babel-node src/server.js",
      "dev": "npx babel-node src/server.js",
      "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1",
      "lint": "eslint ./server"
    },
    "keywords": [
      "node",
      "vue"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/cli.git"
    },
    "author": {
      "name": "Sanchitha",
      "email": "s@sharma.com",
      "url": "http://wordspoolsite.wordpress.com/"
    },
    "bugs": 
    {
      "url": "https://github.com/owner/project/issues",
      "email": "project@hostname.com"
    },
    "homepage": "https://github.com/owner/project#readme",
    "license": "ISC",
    "dependencies": {
      "express": "^4.17.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.12.8",
      "@babel/core": "^7.12.9",
      "@babel/node": "^7.12.6",
      "@babel/preset-env": "^7.12.7"
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating Apps with ElectronJS</title>
      <author>QLabs</author>
      <pubDate>Mon, 07 Dec 2020 04:41:18 +0000</pubDate>
      <link>https://dev.to/quantalabs/creating-apps-with-electronjs-2850</link>
      <guid>https://dev.to/quantalabs/creating-apps-with-electronjs-2850</guid>
      <description>&lt;p&gt;Twitch, Visual Studio Code, WhatsApp, and Microsoft Teams, just to name a few, are all apps that are created with Electron. But why use it? What is it? What makes it better than another framework? And finally, of course, how do you use it? Let's dive in deep with Electron to answer these questions.&lt;/p&gt;







&lt;h1&gt;
  &lt;a href="#what-is-electronjs-and-why-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  What is ElectronJS, and why to use it?
&lt;/h1&gt;

&lt;p&gt;ElectronJS is a JavaScript framework created to help you create apps, without you having to do all the hard parts. It has built-in crash reporting, debugging and profiling, and notifications among other things. It's open-source and free to use and takes around 5 minutes to convert a pre-existing HTML page or project to a desktop app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basic-electron" class="anchor"&gt;
  &lt;/a&gt;
  Basic Electron
&lt;/h1&gt;

&lt;p&gt;First, make sure you have NodeJS and NPM installed, as we'll be using them to install packages, test, and run our app. If you don't have it, you can install it &lt;a href="https://nodejs.org/en/"&gt;here&lt;/a&gt;. Once it's installed, check it's installed correctly by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;node -v
npm -v
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A basic electron app will consist of the following files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my-electron-app/
├── package.json
├── main.js
└── index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's first create the &lt;code&gt;pacakge.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm init -y
npm i --save-dev electron
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you don't understand the previous commands, let me go through them right now. The first command, &lt;code&gt;npm init -y&lt;/code&gt;, creates the &lt;code&gt;package.json&lt;/code&gt; file, which stores the info of your NodeJS project, and we'll use commands which are stored in the file later on. The second command, &lt;code&gt;npm i --save-dev electron&lt;/code&gt;, installs electron and saves it as a developer dependency. This means that we use the package to develop our project, but it isn't needed to be installed by the user.&lt;/p&gt;

&lt;p&gt;Now that we have set up the &lt;code&gt;package.json&lt;/code&gt; file, let's create the &lt;code&gt;main.js&lt;/code&gt;. The &lt;code&gt;main.js&lt;/code&gt; is the file which tells electron what to do. Put the following code into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;nodeIntegration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whenReady&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darwin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllWindows&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's go through it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we import the &lt;code&gt;BrowserWindow&lt;/code&gt; and &lt;code&gt;app&lt;/code&gt; modules of the electron package.&lt;/li&gt;
&lt;li&gt;We now create a function to create a browser window and define the details of the window such as the width and height of the window. We load the &lt;code&gt;index.html&lt;/code&gt; file as the body of the window.

&lt;ul&gt;
&lt;li&gt;We then create the window once Electron is initialized. &lt;/li&gt;
&lt;li&gt;When all the windows are closed, we quit the application since the application should no longer be running.&lt;/li&gt;
&lt;li&gt;We then check whether to create a new window, which we do only if no browser windows are visible.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, the hard part is done, let's get to the &lt;code&gt;index.html&lt;/code&gt; file. This is where we'll create the body of our function. There's nothing really special about this, so just put in any &lt;code&gt;HTML&lt;/code&gt; that you want in it and then you're good. To test, you could put in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello there! Hello World!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        Hello World!
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, go back to the &lt;code&gt;package.json&lt;/code&gt; and we're going to modify it a little. It should look something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-electron-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-electron-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron ."&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This now changes 2 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We changed the main script to &lt;code&gt;main.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We added a start script and removed the test script, so now when we run &lt;code&gt;npm start&lt;/code&gt;, it will run our app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've done it! Open up your console and type &lt;code&gt;npm start&lt;/code&gt;, and you're app should be up and running!&lt;/p&gt;

&lt;p&gt;Now that we've covered creating a basic electron app, we can move on to more complex things such as testing, adding a custom menu, keyboard shortcuts, notifications, multiple windows, and even detecting wether the user is offline or online! We'll cover all of this in the next article of the series, so stay tuned!&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>electronjs</category>
      <category>electron</category>
    </item>
    <item>
      <title>UI Design Trend of 2021</title>
      <author>Harsh Singh</author>
      <pubDate>Mon, 07 Dec 2020 03:46:26 +0000</pubDate>
      <link>https://dev.to/harshhhdev/ui-design-trend-of-2021-4fb7</link>
      <guid>https://dev.to/harshhhdev/ui-design-trend-of-2021-4fb7</guid>
      <description>&lt;p&gt;In todays tutorial we're going to briefly go over what glassmorphism is, and create a design using it in &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;The new UI trend we're going to be talking about today is Glassmorphism.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXDu1704--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5008109/screenshots/14702832/media/7ab3b7e6f73b0493ec7693bdc1d3ad20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXDu1704--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5008109/screenshots/14702832/media/7ab3b7e6f73b0493ec7693bdc1d3ad20.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Glassmorphism is possibly the new UI Design Trend of 2021, which in my opinion has a lot of potential.&lt;/p&gt;

&lt;p&gt;The design trend for 2020 was Neumorphism... which had some rather obvious issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uag4FsnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101303255-a04b0980-380b-11eb-982b-963a392676a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uag4FsnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101303255-a04b0980-380b-11eb-982b-963a392676a5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People started to use this with a lot of things, which were driving people a little bonkers. &lt;/p&gt;

&lt;p&gt;I'm not bashing neumorphism, I myself like the idea of it somewhat, but there are of course accesibility issues for people who have eyeshight issues, which I'm not fond of to say the least.&lt;/p&gt;

&lt;p&gt;Glassmorphism, in my humble opinion, in terms of accesibility has improved SIGNFICANTLY if you compare it with glassmorphism. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qTU1F-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1344595/screenshots/14707126/media/3be1aec8be15423677abe06f46cfde80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qTU1F-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1344595/screenshots/14707126/media/3be1aec8be15423677abe06f46cfde80.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image above, the visibility of the text, the layout, everything is much more visible as compared to Neumorphism, and it doesn't get annoying to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-make-our-first-design" class="anchor"&gt;
  &lt;/a&gt;
  Let's make our first design!
&lt;/h1&gt;

&lt;p&gt;So, let's hop into &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; and create a new file. &lt;/p&gt;

&lt;p&gt;Next, I'll search for some &lt;a href="https://duckduckgo.com/?q=mesh+gradients&amp;amp;t=brave&amp;amp;atb=v248-7&amp;amp;iax=images&amp;amp;ia=images"&gt;Mesh Gradients&lt;/a&gt; and pick one which I really like. I think I'll settle for this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNNNA7AE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304060-72ff5b00-380d-11eb-8c58-a3172d791c9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNNNA7AE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304060-72ff5b00-380d-11eb-8c58-a3172d791c9c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's just copy and paste this image file into Figma. I'll set the size to 1920x1080px. &lt;/p&gt;

&lt;p&gt;Next, let's just create a simple rectangle. I'll dimensions to 900x500px and set the border radius to 30px.&lt;/p&gt;

&lt;p&gt;Now, let's go in the rectangle toggle a few things. &lt;/p&gt;

&lt;p&gt;First, I'll get started by the colour. Go over to the fill, and change it from solid to a linear gradient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll move the two points diagonally across the small box we just made. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l8JAbMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304677-d6d65380-380e-11eb-9ba9-64451b0d3d91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l8JAbMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304677-d6d65380-380e-11eb-9ba9-64451b0d3d91.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's toggle the colours for these two. I'll go to the one up top and change the colour white (#FFFFFF) and set opacity to 70%.&lt;/p&gt;

&lt;p&gt;Let's toggle the bottom one. I'll set the colour to white (#FFFFFF) and set opacity to 40%.&lt;/p&gt;

&lt;p&gt;Here's a code for the linear gradient, for those interested.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;107&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;18&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;84&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, let's give it a small outline. I'll go to outline, hit the "+" and create a new outline. I'll give this a thickness of 5px.&lt;/p&gt;

&lt;p&gt;Let's go into colours again, and also make the colour on this a gradient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll follow the same process as I did last time with the background colour. I'll move the two points diagonally from the top left corner to the bottom right one. &lt;/p&gt;

&lt;p&gt;I'll give the top one a colour of white (#FFFFFF) with a opacity of 30%.&lt;/p&gt;

&lt;p&gt;I'll give the top one a colour of white (#FFFFFF) with an opacity of 20%.&lt;/p&gt;

&lt;p&gt;Great! Now we have a cool looking outline. &lt;/p&gt;

&lt;p&gt;Next, let's add some blur. Go into "effects", hit "+" and toggle the setting to layer blur.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IK1RxAWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305354-7f38e780-3810-11eb-99ec-5f25b07a6594.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IK1RxAWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305354-7f38e780-3810-11eb-99ec-5f25b07a6594.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's not go anywhere too crazy on this. I'll just set it 5.&lt;/p&gt;

&lt;p&gt;Now, let's add some background blur. Do the same as said before. I'll set it to... maybe 15 for now. &lt;/p&gt;

&lt;p&gt;Then, to show this effect I'll just add some text. Let's choose a colour of white (#FFFFFF), size of 144px a font of Poppins Bold.&lt;/p&gt;

&lt;p&gt;Let's move it below the glass rectangle we created, and tada 🎉 you can now see the effect. &lt;/p&gt;

&lt;p&gt;Spoiler: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlW_vbWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305713-451c1580-3811-11eb-822b-973faa5c740e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlW_vbWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305713-451c1580-3811-11eb-822b-973faa5c740e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#foreword" class="anchor"&gt;
  &lt;/a&gt;
  Foreword
&lt;/h1&gt;

&lt;p&gt;I have a Linux system (and no money) so I can't use Adobe Xd, therefore I'm only able to show this effect to you in Figma. &lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://www.youtube.com/watch?v=0cmVsdOFyiI"&gt;tutorial&lt;/a&gt; I will recommend to you, if you're interested in learning how to achieve this in Adobe Xd.&lt;/p&gt;

&lt;p&gt;I personally have been learning about an experimenting with glassmorphism myself too. Check out this &lt;a href="https://dribbble.com/shots/14714519-Glassmorphism-Resturaunt-Landing-Page"&gt;dribbble design post&lt;/a&gt; for my latest creation with it!&lt;/p&gt;

&lt;p&gt;You can view the &lt;a href="https://www.figma.com/file/ivRYzAHY3CXDWB3MzHXUJo/Glassmorphism?node-id=4%3A0"&gt;Figma Board&lt;/a&gt; for this project, along with the board for my &lt;a href="https://www.figma.com/file/uBv1BSHYEOmJSndLVIESZc/Maharaja?node-id=0%3A1"&gt;First one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To sum everything up, Glassmorphism is in my opinion a great new design trend which I seem emerging and taking the place of Neumorphism in 2020. It has a lot of potential, as there are not nearly as many accessibility issues with it as when compared to Neumorphism.&lt;/p&gt;

</description>
      <category>design</category>
      <category>tutorial</category>
      <category>css</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>5 Things I Learned by Asking Developers One Question</title>
      <author>Shaundai Person</author>
      <pubDate>Mon, 07 Dec 2020 02:49:12 +0000</pubDate>
      <link>https://dev.to/shaundai/5-things-i-learned-by-asking-developers-one-question-52h7</link>
      <guid>https://dev.to/shaundai/5-things-i-learned-by-asking-developers-one-question-52h7</guid>
      <description>&lt;p&gt;Breaking into engineering is no easy task.&lt;/p&gt;

&lt;p&gt;Over the past year, I’d gradually built the skills needed to transition from the only career I’ve ever known - sales - into UI engineering.    Prior to beginning this self-taught journey, I had no technical background &lt;em&gt;(uh, unless a basic working knowledge of Excel counts)&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;As a full-time working mom, I needed to be strategic about how I spent my time.  To make sure I was learning the right things and building the right stuff, I went to developers at all levels - from Junior to VP - and asked the same question: &lt;em&gt;As someone coming from a non-technical role - how can I make myself stand out?&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-yes-you-should-build-a-portfolio" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(1) Yes, you &lt;em&gt;should&lt;/em&gt; build a portfolio&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Especially consider putting together a portfolio if you’re coming in at an entry level or switching to engineering from an otherwise non-traditional role &lt;em&gt;(like me)&lt;/em&gt;.  Don’t worry - you don’t need to spend months building a portfolio from scratch.  Host one easily using Github Pages or a website-generation platform like Wix or Squarespace.&lt;/p&gt;

&lt;p&gt;The most important part is being strategic about the &lt;em&gt;types&lt;/em&gt; of projects you put in your portfolio.  Remember that recruiters and hiring managers are looking through a lot of other portfolios like yours and when they get 200 applicants for one opening, they need to make tough decisions about how to narrow down the applicant pool.  Make your portfolio stand out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make it obvious which languages/frameworks you've used so they can see how your skills match the role you’re looking for.&lt;/li&gt;
&lt;li&gt;Narrow it down to 2-4 key projects that really show the breadth and depth of your skills and only include these in the portfolio.  There is no way a recruiter is going to look through all 25-30 of the projects from every single candidate who crosses their path.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;IMPORTANT:&lt;/b&gt; Go for "corporate-style" projects.  Yes, the random gif generators and random cat generators are adorable.  If you're applying to work at a corporation (or an agency that does work for corporations), the recruiter will want to see polished projects that aim to serve a business purpose.  &lt;em&gt;(Think fake client websites, clones of part of an existing platform like Twitter or Uber, or something that solves a problem in your everyday life)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-build-a-network" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(2) Build a network&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;You might be wondering why/if building a network is really important.&lt;/p&gt;

&lt;p&gt;First, being an employee referral increases your chances of getting the job by 10x.  That’s not all — building a network will help you to stay on top of new things going in the tech industry, meet potential mentors/mentees/advocates/hiring managers/etc, enhance the skills you'll need to level up your career, and keep you motivated during those tough times.&lt;/p&gt;

&lt;p&gt;For the introverts out there, I get it.  Networking can be pretty awkward and super stressful.  But it's a necessary evil and with practice, it will just get easier.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-if-you-want-to-be-a-good-frontend-developer-you-should-learn-at-least-a-little-about-a-backend-framework" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(3) If you want to be a good frontend developer, you should learn at least a little about a backend framework&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Or vice versa.  While you’re at it, learn a little bit about design, too - especially if you want to freelance, work for a large company, or eventually move into management.  Your work as a dev will require you to understand requirements from someone who essentially is speaking a different language than you, then pass off your work to someone who uses &lt;em&gt;another&lt;/em&gt; language!&lt;/p&gt;

&lt;p&gt;Coming from the software sales world, I see how often devs get stuck in their own bubble and oftentimes don't even know how to use the product they're building!  They don't take the time to get a wholistic understanding of their product from the customer side, sales side, or even the design side.  You can make yourself stand out by understanding at least a little about what is going on over the fence and how the work you do will make an impact, or what you could do to make your colleagues' jobs easier.  Take a course in something new or talk with someone else who is in the role.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-several-lines-readable-of-code-gt-one-line-of-code-that-only-you-understand" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(4) Several lines readable of code &amp;gt; one line of code that only you understand&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This goes along with the last piece of advice.  Even if you don’t expect to be working on a team, remember that one day, you’ll need to read your own code again after not-having looked at it for several months.  Do your future self/future colleagues a favor and name your functions something like &lt;em&gt;formatPhoneNumber&lt;/em&gt; instead of &lt;em&gt;fixFon&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5talk-about-what-youre-working-on-a-lot" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(5)Talk about what you're working on (a LOT)&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;It’s YOUR JOB to make sure you’re putting your work in front of the people who need to see it.  Talk about what you’re working on (often) and show off your progress.  It’s a tough shift to make for people who - like me - were taught that tooting your own horn makes you braggy.  Here are some ways to put yourself out there without coming off as obnoxious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Solve a problem/complete a project, then write a blog post about how you did it.  Share the blog post with an engineering manager and ask for feedback&lt;/li&gt;
&lt;li&gt;Commit to writing social media posts 3x week about the progress on your current project&lt;/li&gt;
&lt;li&gt;Invite engineers from your company or from meetups to talk 1:1 over coffee (or tea. or water.) Ask about their career journey and exciting projects they are working on.  Tell them what you're working on and ask for their feedback on current projects or your portfolio.&lt;/li&gt;
&lt;li&gt;Accept compliments by simply saying “thank you.”  This may sound like a no-brainer but for women in particular, we often meet compliments with fairly negative comments or we use it as an opportunity to give someone else credit for our work ("Well, without so-and-so, this would have never gotten done!" or "Oh, this was so stressful to do and I'm not really happy with the way it came out because...").  Just say thank you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What advice would you give to developers trying to move into engineering from non-traditional roles?&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.twitter.com/shaundai"&gt;Twitter&lt;/a&gt; and on &lt;a href="https://www.linkedin.com/in/shaundai"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create your own NPM Card! Part 2</title>
      <author>Cameron Thompson</author>
      <pubDate>Mon, 07 Dec 2020 02:22:38 +0000</pubDate>
      <link>https://dev.to/cdthomp1/create-your-own-npm-card-part-2-3651</link>
      <guid>https://dev.to/cdthomp1/create-your-own-npm-card-part-2-3651</guid>
      <description>&lt;p&gt;This is the second part of the "Create your own NPM Card" series.&lt;/p&gt;

&lt;p&gt;We are going to cover testing the code locally before we publish to NPM, creating an NPM account, and publishing the package to NPM for all to use! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-npm" class="anchor"&gt;
  &lt;/a&gt;
  Sign up for NPM
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dont-have-an-account" class="anchor"&gt;
  &lt;/a&gt;
  Don't have an account?
&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;a href="https://npmjs.com"&gt;npmjs.com&lt;/a&gt; and click sign up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3z6nTjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jd4cy6zj4l4yqpalbxke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3z6nTjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jd4cy6zj4l4yqpalbxke.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in the form and remember your username and password as we will need it soon! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uL3GN_Oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64bhfjg6pn8flaqzjsz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uL3GN_Oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64bhfjg6pn8flaqzjsz8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-an-account" class="anchor"&gt;
  &lt;/a&gt;
  Have an account
&lt;/h3&gt;

&lt;p&gt;if you already have an NPM account, navigate to &lt;a href="https://npmjs.com"&gt;npmjs.com&lt;/a&gt; and click sign in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-before-publish" class="anchor"&gt;
  &lt;/a&gt;
  Test before publish
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#getting-ready" class="anchor"&gt;
  &lt;/a&gt;
  Getting ready
&lt;/h3&gt;

&lt;p&gt;Now that we are completed with our package, we can test the package in two ways. One is to type &lt;code&gt;node index.js&lt;/code&gt; in the command line in our directory. This is a great way to test while we are developing our package and check for errors, functionality, and other debugging needs.&lt;/p&gt;

&lt;p&gt;We are going to run a command that will allow us to truly test our package. Type &lt;code&gt;npm link&lt;/code&gt; in the command line. NPM will install our package for us, even though it is not publish to the NPM Registry. This will allow us to use it as a local package, to make sure we got the package set up correctly.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-test-directory" class="anchor"&gt;
  &lt;/a&gt;
  Create a test Directory
&lt;/h3&gt;

&lt;p&gt;Open a new terminal window or type &lt;code&gt;cd ..&lt;/code&gt; to exit your current directory or the directory of your npm package. For this tutorial, I am going to open a new terminal window. &lt;/p&gt;

&lt;p&gt;In my new window, I am going to make sure I am in the directory where I keep my projects. For me it is the &lt;code&gt;Documents&lt;/code&gt; folder. Once I am there, I will create a new directory for us to "link" our package. &lt;code&gt;mkdir package-testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once inside this directory, type &lt;code&gt;npm link yourname&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are on Mac OS and/or you are receiving errors while running &lt;code&gt;npm link&lt;/code&gt; or &lt;code&gt;npm link yourname&lt;/code&gt;, a quick solution is to prefix those commands with &lt;code&gt;sudo&lt;/code&gt; to run them as administrator. For a permanent solution, please read the official NPM solution &lt;a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#publish" class="anchor"&gt;
  &lt;/a&gt;
  Publish
&lt;/h2&gt;

&lt;p&gt;Now that our package is working locally and we can use it in a different directory, we are ready to publish to the NPM Registry! Hooray! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Navigate back to your project directory so that we publish the our code and not our test directory. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to need to login to NPM through the command line. To this, type &lt;code&gt;npm adduser&lt;/code&gt;. Remember your username and password from a few steps ago? Type them into their appropriate fields to login. &lt;/p&gt;

&lt;p&gt;Now that we are logged in and we are ready to publish our package! Type &lt;code&gt;npm publish --access public&lt;/code&gt; in the terminal to publish. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-did-it" class="anchor"&gt;
  &lt;/a&gt;
  You Did It!
&lt;/h2&gt;

&lt;p&gt;Congratulations, you have published your own personal NPM business card for others to use. Give your command to others for them to check out your card. Remember, this is your card, make it YOURS! I would love to see all of your cards in the comments below. &lt;/p&gt;

&lt;p&gt;Happy Coding!  &lt;/p&gt;

</description>
      <category>npm</category>
      <category>node</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
