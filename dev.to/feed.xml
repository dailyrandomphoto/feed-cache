<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Everything you need to know about linux File System directories!</title>
      <author>mohammed afif ahmed</author>
      <pubDate>Tue, 15 Jun 2021 03:05:53 +0000</pubDate>
      <link>https://dev.to/afif_ahmed/everything-you-need-to-know-about-linux-directories-57ha</link>
      <guid>https://dev.to/afif_ahmed/everything-you-need-to-know-about-linux-directories-57ha</guid>
      <description>&lt;h2&gt;
  &lt;a href="#history-of-linux-and-windows"&gt;
  &lt;/a&gt;
  History of Linux and Windows
&lt;/h2&gt;

&lt;p&gt;Okay, before starting with the actual topic, let’s discuss what makes Linux different from windows. If you are a Windows user you might have seen different drives such as C, D, E, etc which are absent in Linux instead it has folders named /bin, /sbin, /usr, /etc.&lt;/p&gt;

&lt;p&gt;For new Linux users, let us tell you about how Linux and windows evolved. Windows was installed on top of DOS(Disk operating system), which was a command-line tool where you can run programs, games, etc. It used letters to assign removable discs such as floppy drives, i.e. A and B. When the hard drive was introduced, the letter C was assigned for the internal disk and the next available letter for the next disk.&lt;/p&gt;

&lt;p&gt;Microsoft evolved their kernel so that windows boots are less dependent on DOS and eventually without DOS at all. Linux follows the Unix tradition which is why it uses forward slash unlike backslash in windows. It is also case sensitive, also macOS has similar features as it is a common Unix-based ancestor.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-now-lets-jump-into-the-linux-filesystem"&gt;
  &lt;/a&gt;
  So now let’s jump into the Linux filesystem.
&lt;/h2&gt;

&lt;p&gt;A filesystem is used to control the flow of how data is stored or distributed or retrieved from a physical storage device such as HDD, SSD, etc. Its main purpose is to make users and the operating system store files in such a manner that all the different directories can utilize them efficiently.&lt;/p&gt;

&lt;p&gt;The OS plays the role of intermediate that facilitates the data transfer for storage on a storage device. Linux uses a directory tree to manage directories and files. The tree information is also stored on a storage device and this part is called the root file system or root directory.&lt;/p&gt;

&lt;p&gt;The root directory is the most important as all other directories are derived from it and it is responsible for booting, repairing, and restoring the Linux system.&lt;/p&gt;

&lt;p&gt;The File hierarchy for Linux defines the Linux directory structure. We can refer to the sequential directories in those directories by using directory names connected by a forward slash (/) such as /var/log and /var/spool/mail. These are called paths.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-let-us-explore-these-subdirectories-of-the-root-directory-one-by-one"&gt;
  &lt;/a&gt;
  Now let us explore these sub-directories of the root directory one by one.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hUu8cAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rs-online.com/designspark/rel-assets/dsauto/temp/uploaded/linux-filesystem.png%3Fw%3D1042" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hUu8cAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rs-online.com/designspark/rel-assets/dsauto/temp/uploaded/linux-filesystem.png%3Fw%3D1042" alt="lfs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bin"&gt;
  &lt;/a&gt;
  /bin
&lt;/h3&gt;

&lt;p&gt;This is a subdirectory of the root which stands for binaries and contains the executable programs, which are used for minimal functionality for booting or repairing. It usually contains the shell commands like cp(copy), rm(remove), ls, etc. It also contains programs that boot scripts may depend on. Bin folders can also be found in other sections of the file system tree.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sbin"&gt;
  &lt;/a&gt;
  /sbin
&lt;/h3&gt;

&lt;p&gt;This stands for system binaries that a system administrator may use and a standard user would not have access without permission. This folder, along with the one above it,contains the files that must be accessible while running in single-user mode (this mode boots you in as a root user to enable you to perform device repairs,updates, and testing) rather than multi-user mode.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#boot"&gt;
  &lt;/a&gt;
  /boot
&lt;/h3&gt;

&lt;p&gt;This directory contains all the executables or programs responsible for booting up a Linux machine whether it is ubuntu or kali or mint. As a result, the data used until even the Linux kernel starts to run some program is stored in the /boot directory.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dev"&gt;
  &lt;/a&gt;
  /dev
&lt;/h3&gt;

&lt;p&gt;This directory houses some exclusive or device-specific files. Everything in Linux is categorized as a file or a directory, as this command emphasizes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt; /dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see all the partitions on the system. /dev/cdrom represents our CD-ROM. Here the nested files represent a hardware device and any changes to them will be reflected in our hardware. For example, /dev/dsp represents the speakers and if you make changes to it, it will be reflected in the speakers. For instance, it will make a sound if you cat something on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /boot/vminux &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/dsp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#etc"&gt;
  &lt;/a&gt;
  /etc
&lt;/h3&gt;

&lt;p&gt;This directory contains all your configurations. Here configuration refers to those which are system-wide and not just for a particular user such as /etc/apt contains the sources list which contains the repo’s the system connects to and its various settings.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lib-lib32-lib64"&gt;
  &lt;/a&gt;
  /lib, /lib32, /lib64
&lt;/h3&gt;

&lt;p&gt;These are the directories where the libraries are stored. Libraries are files that the application uses to perform various functions, and these are required by the binaries in the /bin directory.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#media-and-mnt-mount"&gt;
  &lt;/a&gt;
  /media and /mnt (mount)
&lt;/h3&gt;

&lt;p&gt;These are the directories where we can find our other mounted drives such as USB,floppy disks, or external hard drives, etc. The /media folder wasn’t there before. &lt;br&gt;
It was just /mnt, but nowadays most Linux distros automatically mount devices in /media directory. But why two directories for mounting? Well, When manually mounting files, we use the /mnt directory and leave the /media directory to the operating system.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#opt-this-is-the-optional-folder"&gt;
  &lt;/a&gt;
  /opt (this is the optional folder)
&lt;/h3&gt;

&lt;p&gt;This folder usually contains manually installed software from any third-party vendors. This is the place where you can install the software created by you.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#proc"&gt;
  &lt;/a&gt;
  /proc
&lt;/h3&gt;

&lt;p&gt;This directory contains all the pseudo files that have information about the system processes and resources. Every process has a directory (named after the process ID) that contains all the necessary information on that process and these are not saved on the hard drive. The files here are translated by the kernel to generate some other information. for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/cpuinfo 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command prints out the information about the CPU.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#root"&gt;
  &lt;/a&gt;
  /root
&lt;/h3&gt;

&lt;p&gt;This is the home directory of the root user. It does not contain typical directories and does not reside in the /home directory, unlike a user's /home directory. You can store the files here but you need to have root access. This directory's location also means that the root has constant access to its /home folder.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  /run
&lt;/h3&gt;

&lt;p&gt;This directory is relatively new, and various distributions use it in different ways. It's a tempfs file system, which means everything in it is deleted when the system is rebooted or shut down. It is used to store runtime information that processes use to work early in&lt;br&gt;
the boot method.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srv"&gt;
  &lt;/a&gt;
  /srv
&lt;/h3&gt;

&lt;p&gt;This is called a service directory where data from the service is saved. For you, it will most likely be null, but if you run a web server or an FTP server, you will store files here that will be accessed by other users. Since it is at the root of the drive, it provides better&lt;br&gt;
protection.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sys"&gt;
  &lt;/a&gt;
  /sys
&lt;/h3&gt;

&lt;p&gt;This is called a system directory, It's been around for quite some time. It's a method of communicating with the kernel. This directory is similar to the /run directory in that it is not written to the disc physically. It's generated every time the machine starts up, so you wouldn't save anything here, and nothing is mounted here.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmp"&gt;
  &lt;/a&gt;
  /tmp
&lt;/h3&gt;

&lt;p&gt;It is a temp (temporary) directory. This is where the program temporarily stores files that could be used during a session. For example, when you write a document in a program in vscode, it will save a temporary copy of what you're writing here on a regular basis. If the program crashes, you can search here to see if you have a recently saved copy that you can restore.&lt;/p&gt;

&lt;p&gt;When you reboot your computer, this folder is normally empty. Any files or directories may still be present or may have been stuck because the machine was unable to remove them. This isn't a concern unless there are hundreds of files taking up disc space, in which case you'll need to log in as root and manually delete them.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usr"&gt;
  &lt;/a&gt;
  /usr
&lt;/h3&gt;

&lt;p&gt;In contrast to the /bin directory, which is used by the system and system administrator to perform maintenance, this is the user application space where programs that are used by the user will be installed. Any program installed here is considered non-essential for basic system service, and it is also known as Unix System Resource. &lt;/p&gt;

&lt;p&gt;The installed programme can be found in a variety of locations, including /usr/bin, /usr/sbin, and /usr/local. The local directory is where most programs installed from source code end up. The /usr/share is where many larger programs mount themselves.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#var"&gt;
  &lt;/a&gt;
  /var
&lt;/h3&gt;

&lt;p&gt;This is the directory for variables. It contains files and directories that are expected to grow in size over time, such as dynamic data. /var/log contains system and application log files, which will grow in size as you use the system. Other items included here include mail databases and temporary storage for printer queues, also known as /spool.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#home"&gt;
  &lt;/a&gt;
  /home
&lt;/h3&gt;

&lt;p&gt;Each user has this directory. The /home directory is where you store your file and documents. Each user can access only their folder unless admin permissions.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And, phew...! finally we have reach the end. In this article, we have covered all the different Linux File system directories. We have also seen what makes Linux FS different from Windows FS and how Linux evolved. I  certainly hope that you now have knowledge of what each directory in Linux FS means and its true functionality as well as its role in OS.&lt;/p&gt;

&lt;p&gt;liked the post? &lt;br&gt;
&lt;a href="https://ko-fi.com/I2I639WWJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKanlt08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>os</category>
      <category>windows</category>
    </item>
    <item>
      <title>searchBar</title>
      <author>4-in-1 Telecommunications</author>
      <pubDate>Tue, 15 Jun 2021 01:57:12 +0000</pubDate>
      <link>https://dev.to/tookooltech/searchbar-107j</link>
      <guid>https://dev.to/tookooltech/searchbar-107j</guid>
      <description>&lt;p&gt;SearchBar is a swiftui demo applications.&lt;/p&gt;

</description>
      <category>swift</category>
      <category>swiftui</category>
    </item>
    <item>
      <title>Como publicar seu primeiro package TS e automatizar com Github Actions</title>
      <author>Thiago Moraes</author>
      <pubDate>Tue, 15 Jun 2021 01:30:25 +0000</pubDate>
      <link>https://dev.to/thiagomr/como-publicar-seu-primeiro-package-ts-e-automatizar-com-github-actions-2p4m</link>
      <guid>https://dev.to/thiagomr/como-publicar-seu-primeiro-package-ts-e-automatizar-com-github-actions-2p4m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Nesse artigo vou abordar a criação e publicação de um package escrito em Typescript para o NPM. A minha principal motivação é escrever algo que seja simples mas não deixe de levar em consideração fatores importantes, como versionamento, atualização, testes e automatização. O que será abordado:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Criar um package em TS&lt;/li&gt;
&lt;li&gt;Boas práticas de teste pre release&lt;/li&gt;
&lt;li&gt;Publicar um package público no npm&lt;/li&gt;
&lt;li&gt;Gerenciar atualizações&lt;/li&gt;
&lt;li&gt;Noções de versionamento&lt;/li&gt;
&lt;li&gt;Automatizar a publicação com github actions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pr%C3%A9requisitos"&gt;
  &lt;/a&gt;
  Pré-requisitos
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Criar uma conta no &lt;a href="https://github.com/join"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Criar uma conta no &lt;a href="https://www.npmjs.com/signup"&gt;NPM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configurando-o-ambiente-para-o-package"&gt;
  &lt;/a&gt;
  Configurando o ambiente para o package
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#criando-o-reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  Criando o repositório
&lt;/h3&gt;

&lt;p&gt;Nosso package vai se chamar math-ops e será responsável por fazer operações matemáticas básicas. Sendo assim, vamos criar um novo repositório com o nome escolhido:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq7gpVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3euz259a1uu7ynxddm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq7gpVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3euz259a1uu7ynxddm4.png" alt="Screenshot from 2021-06-13 19-07-03"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inicializando-o-reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  Inicializando o repositório
&lt;/h3&gt;

&lt;p&gt;Vamos criar um novo diretório e acessá-lo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;math-ops &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;math-ops
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida vamos configurar o repostório git e enviar o primeiro commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"# math-ops"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; README.md
git init
git add README.md
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"first commit"&lt;/span&gt;
git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
git remote add origin git@github.com:thiagomr/math-ops.git
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configurando-o-package"&gt;
  &lt;/a&gt;
  Configurando o package
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#inicializando-as-configura%C3%A7%C3%B5es-do-npm"&gt;
  &lt;/a&gt;
  Inicializando as configurações do NPM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como resultado deste comando teremos a seguinte saída:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@thiagomr/math-ops"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git+https://github.com/thiagomr/math-ops.git"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thiago Moraes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bugs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops/issues"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops#readme"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nessa etapa é importante notar que definimos o nome do package (você deve mudar de acordo com o seu nome de usuário ou nome do package que você desejar), que será utilizado para instalar o mesmo. Também foi definida a versão 0.1.0, seguindo os padrões de &lt;strong&gt;Semantic Version&lt;/strong&gt;. Este é um padrão que nos permite incrementar a versão de acordo com o tipo da atualização. Você pode se aprofundar sobre o assunto &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;aqui&lt;/a&gt;. Vamos considerar que estamos criando uma release não oficial, ou seja, anterior à versão 1.0.0. É interessante também perceber que como ja temos o git configurado nesse diretório, o npm automaticamente sugere o preenchimento das configurações de url e homepage do mesmo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instalando-as-depend%C3%AAncias"&gt;
  &lt;/a&gt;
  Instalando as dependências
&lt;/h3&gt;

&lt;p&gt;Em seguida vamos instalar as dependências que utilizaremos no projeto, que são basicamente o Typescript e o Jest (e alguns auxiliares para ambos):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;typescript jest @types/jest ts-jest &lt;span class="nt"&gt;--save&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos adicionar o arquivo &lt;code&gt;tsconfig.json&lt;/code&gt; com as configurações que usaremos para compilar o projeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//tsconfig.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"declaration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"**/*.spec.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida, iremos adicionar alguns scripts para fazer o build do projeto e uma configuração bem simples para o &lt;code&gt;Jest&lt;/code&gt;, ferramenta que usaremos para criar testes para as funcionalidades. Nosso arquivo com as alterações ficará da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@thiagomr/math-ops"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.7.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A package to make basic math operations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib/index.d.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"clean"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rimraf lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run clean &amp;amp;&amp;amp; tsc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prepublish"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run test &amp;amp;&amp;amp; npm run build"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thiago Moraes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git+https://github.com/thiagomr/math-ops.git"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bugs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops/issues"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops#readme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"testEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"coveragePathIgnorePatterns"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"/node_modules/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"lib"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"lib/**/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.0.23"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^27.0.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts-jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^27.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Algumas explicações mais detalhadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"main": "lib/index.js",&lt;/code&gt; Será o arquivo que vai expor a API pública do nosso pacote.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"types": "lib/index.d.ts",&lt;/code&gt; Indica a declaração de tipos do TS, gerado automáticamente de acordo com as nossas configurações de compilação feitas anteriormente.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"jest": {...}&lt;/code&gt; Configuração para que o Jest funcione usando TS e indicação de arquivos a serem ignorados.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"files": {...}&lt;/code&gt; Arquivos que desejamos incluir no nosso pacote.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"prepublish"&lt;/code&gt; Executa um script antes de publicar o package. Neste caso vamos rodar os testes unitários.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"build"&lt;/code&gt; Faz a compilação do projeto. De maneira bem resumida, seria o processo de typechecking e transpilação do código TS para JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para finalizar essa etapa, vamos criar um arquivo &lt;code&gt;.gitignore&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.gitignore&lt;/span&gt;

&lt;span class="nx"&gt;node_modules&lt;/span&gt;
&lt;span class="nx"&gt;lib&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E então vamos enviar toda a configuração para o repositório:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add dependecies"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#criando-a-primeira-funcionalidade"&gt;
  &lt;/a&gt;
  Criando a primeira funcionalidade
&lt;/h2&gt;

&lt;p&gt;Agora vamos adicionar o arquivo com a primeira funcionalidade, que irá retornar a soma entre dois números:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/sum.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos criar também um arquivo de entrada para exportar a API  pública do nosso package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testando-o-package"&gt;
  &lt;/a&gt;
  Testando o package
&lt;/h2&gt;

&lt;p&gt;Vamos escrever nosso primeiro teste untário para a funcionalidade de &lt;code&gt;sum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/sum.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a sum of two numbers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rodando os testes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora que já temos nosso primeiro teste unitário, vamos testar o uso real do package. Nós vamos utilizar o comando &lt;code&gt;npm link&lt;/code&gt;. Isso fará com que o npm crie uma referência local para esse projeto, podendo ser utilizado de forma direta em outros projetos. É uma forma de testar seu package no ambiente de desenvolvimento sem precisar publicá-lo várias vezes.&lt;/p&gt;

&lt;p&gt;O primeiro comando será executado no diretório do package e o segundo em um novo diretório para testes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# math-ops&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt;

&lt;span class="c"&gt;# testdir&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt; @thiagomr/math-ops
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No diretório de testes, vamos criar um arquivo que importa e utiliza a funcionalidade &lt;code&gt;sum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// testdir/index.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@thiagomr/math-ops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// sum is 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`sum is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para finalizar, vamos atualizar nosso repositório com as novas mudanças:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add sum feature"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#publicando-no-npm-registry"&gt;
  &lt;/a&gt;
  Publicando no NPM registry
&lt;/h2&gt;

&lt;p&gt;Agora que já temos nosso pacote funcional e testado localmente, vamos para a fase de publicação. Vamos adicionar um arquivo .npmignore que vai excluir os arquivos desnecessários, enviando apenas o essencial e diminuindo o tamanho do package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.npmignore&lt;/span&gt;

&lt;span class="nx"&gt;src&lt;/span&gt;
&lt;span class="nx"&gt;node_modules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Iremos fazer o login no npm com a conta desejada:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por padrão o versionamento do NPM utiliza o sistema de tags do GIT para indicar a publicação de novas versões. É importante manter o versionamento do NPM e GIT sincronizados, mas vale ressaltar que não há nenhuma regra que faça uma ligação entre as duas coisas. Existem alguns packages que facilitam o gerenciamento de ambos, mas como a intenção aqui é mostrar a funcionalidade básica e o mais pura possível, não utilizaremos nenhuma ferramenta adicional.&lt;/p&gt;

&lt;p&gt;Vamos atualizar o repositório com a tag de versão incial e em seguida publicar no npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git tag v0.1.0
git push &lt;span class="nt"&gt;--tags&lt;/span&gt;
npm publish &lt;span class="nt"&gt;--access&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora já temos nosso pacote publicado e disponível para instalação (O meu está em uma versão um pouco a frente pois fiz alguns testes para o artigo):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LAItngAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrjr9scufv5oc882s0d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAItngAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrjr9scufv5oc882s0d2.png" alt="Screenshot from 2021-06-14 20-51-47"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adicionando-novas-funcionalidades"&gt;
  &lt;/a&gt;
  Adicionando novas funcionalidades
&lt;/h2&gt;

&lt;p&gt;Nessa etapa vamos adicionar uma nova feature. Isso vai reforçar os conceitos aplicados, trazendo familiaridade com o processo. Vamos adicionar uma funcionalidade que retorna o resultado da multiplicação entre dois números &lt;code&gt;index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/times.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;times&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./times&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seguindo o processo anterior, vamos escrever um teste unitário para a nova funcionalidade:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/times.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./times&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the multiplication of two numbers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos atualizar o repositório e publicar a nova versão:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add times feature"&lt;/span&gt;
npm version minor
git push &lt;span class="nt"&gt;--tags&lt;/span&gt;
npm publish &lt;span class="nt"&gt;--access&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora você poderá o ver o package atualizado no NPM registry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatizando-a-publica%C3%A7%C3%A3o-com-github-actions"&gt;
  &lt;/a&gt;
  Automatizando a publicação com Github Actions
&lt;/h2&gt;

&lt;p&gt;Agora que já vimos como fazer todo o processo manualmente, vamos automatizar a publicação utilizando Github Actions.&lt;br&gt;
Vamos criar um token no NPM &lt;a href="https://docs.npmjs.com/creating-and-viewing-access-tokens"&gt;aqui&lt;/a&gt;, para que seja possível fazer a publicação através do Github.&lt;br&gt;
Vamos inserir nosso token como uma variável de ambiente do GIT, acessando o repostório e em seguida selecionado as opçoes &lt;code&gt;Settings &amp;gt; Secrets &amp;gt; New Repository Secret&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L60Ll_-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g4gj966vmsxaywlan3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L60Ll_-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g4gj966vmsxaywlan3s.png" alt="Screenshot from 2021-06-14 20-58-56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em seguida vamos criar o arquivo de configuração do pipeline para que seja executado sempre que ouver uma alteração na branch main e no arquivo &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/publish.yml&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;package.json'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;publish&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JS-DevTools/npm-publish@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para testar o pipeline, nós criaremos a última funcionalidade ao nosso package, capaz de subtrair dois números:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;subtract&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos novamente atualizar a entrada do package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./times&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assim como nos passos anteriores, vamos criar um teste unitário para o mesmo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/subtract.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the subtraction of two numbers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos enviar nossas alterações para o repositório e atualizar a versão do nosso package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add subtract feature"&lt;/span&gt;
npm version minor
git push &lt;span class="nt"&gt;--tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se a nossa configuração estiver correta e tudo ocorrer bem, podemos verificar o pipeline no Github executado com sucesso e a nova versão publicada no NPM:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCLWEfOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moumenbtxhpe7lbvhfhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCLWEfOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moumenbtxhpe7lbvhfhy.png" alt="Screenshot from 2021-06-14 21-04-51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGowOe3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28774hsw4b3371yzdgrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGowOe3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28774hsw4b3371yzdgrg.png" alt="Screenshot from 2021-06-14 21-05-12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos adicionar um exemplo de uso do package que também estará no &lt;code&gt;README.md&lt;/code&gt; do repositório:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// Install
npm &lt;span class="nb"&gt;install&lt;/span&gt; @thiagomr/math-ops
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@thiagomr/math-ops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Isso é tudo pessoal. Aqui está o &lt;a href="https://github.com/thiagomr/math-ops"&gt;link do repistório&lt;/a&gt; com todo o código utilizado. Espero que tenha ficado claro e que de alguma forma possa ajudar vocês a publicarem seus próprios packages. Gostaria de ouvir feedbacks, opiniões, sugestões e o que mais desejarem. Me sigam no &lt;a href="https://twitter.com/thiagodmor"&gt;Twitter&lt;/a&gt; para mais novidades. Grande abraço e até a próxima!&lt;/p&gt;

</description>
      <category>node</category>
      <category>github</category>
      <category>tutorial</category>
      <category>npm</category>
    </item>
    <item>
      <title>Que es Git Flow y porque tenemos que aprenderlo</title>
      <author>Axel Valdez</author>
      <pubDate>Tue, 15 Jun 2021 00:37:08 +0000</pubDate>
      <link>https://dev.to/axelvaldez13/que-es-git-flow-y-porque-tenemos-que-de-aprenderlo-290f</link>
      <guid>https://dev.to/axelvaldez13/que-es-git-flow-y-porque-tenemos-que-de-aprenderlo-290f</guid>
      <description>&lt;p&gt;Todos damos por entendido que es git y, para quienes no lo saben, esto sirve para hacer un control de versionado sobre tu código. Escribiéndolo así a lo criollo: sirve para poder trabajar código de manera mas eficiente donde lo aloja una repo y de ahí varios desarrolladores clonan tal repo y lo modifican a su gusto o semejanza. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: pido disculpas por la foto que elegí de portada, busque una foto que haya sacado con ramas y encontré esta de un viaje a Iguazú. Para la próxima espero poder encontrar una adecuada.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#los-comandos-mas-reconocibles-que-tenemos-en-git-son"&gt;
  &lt;/a&gt;
  Los comandos mas reconocibles que tenemos en git son:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;span class="c1"&gt;// Para iniciar entorno git&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;
&lt;span class="c1"&gt;// Para saber el status de nuestra version&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt;
&lt;span class="c1"&gt;// Para actualizar nuestra rama con nuestra ultima version&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt;
&lt;span class="c1"&gt;// Para clonar un repositorio&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt;
&lt;span class="c1"&gt;// Para mandar nuestra version a la rama que queremos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pasemos-a-gitflow"&gt;
  &lt;/a&gt;
  Pasemos a Gitflow
&lt;/h2&gt;

&lt;p&gt;Gitflow es un flujo de trabajo que trabaja con las metodologías ágiles y se compone de diferentes tipos de ramas: la master y la dev que son las mas conocidas por todo el mundo de desarrollo pero a esto le agregamos hotfix y feature. Pasemos a explicar todo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKeCkXJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77s0bt9x8sb41trniix6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKeCkXJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77s0bt9x8sb41trniix6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Master&lt;/strong&gt;&lt;br&gt;
Acá ya es producción, todo lo que pasa acá lo ve el usuario final. Hablándolo en criollo: es la pagina final, fin de la historia&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dev&lt;/strong&gt;&lt;br&gt;
Todo lo que nosotros vemos y probamos antes de mandarnos de lleno a producción. Si primero nos tenemos que mandar un moco, el primer lugar va a ser en desarrollo. Cuando este todo funcional y sin desperfectos, lo mandamos a prod. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCkuFBy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwocseo5euxk54mnstz6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCkuFBy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwocseo5euxk54mnstz6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;br&gt;
Esta rama nos sirve para crear una nueva función o feature a nuestro desarrollo para posteriormente mandar un merge request a nuestra rama dev. En simples palabras, creo algo en una rama llamada feature y lo mando a dev para ver si se rompe todo o si funciona bien.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hotfix&lt;/strong&gt;&lt;br&gt;
Esta rama es más que nada para arreglar algo rápido, no es tan complejo y el fix es mas que nada para salir directo a producción sin pasar por dev. Por ejemplo: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;te olvidaste de algún error de ortografía? haces un hotfix, lo fixeas y ya salís a producción.&lt;/li&gt;
&lt;li&gt;el color que pusiste no es el que esta en el design system? creas un hotfix, lo arreglas y lo mandas a prod.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tal como lo dice la palabra, es un arreglo en caliente. Si entienden el chiste de arreglos en producción, van a saber qué viene de esta palabra. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pasos-para-crear-un-entorno-con-gitflow"&gt;
  &lt;/a&gt;
  Pasos para crear un entorno con gitflow
&lt;/h2&gt;

&lt;p&gt;Primero tienen que iniciar gitflow y nombran las ramas a su preferencia.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;span class="c1"&gt;// para iniciar gitflow a tu repo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En el primero van a llamar a la rama master, que en este caso, seria producción. Dependiendo donde sea su repo, posiblemente sea main o master. &lt;strong&gt;En github aparece como main&lt;/strong&gt; así que vamos a escribir en esta opción como &lt;strong&gt;main&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtBNISfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7nrs9zznvjhxp9eo7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtBNISfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7nrs9zznvjhxp9eo7u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En el segundo paso nos va a pedir como se va a llamar la rama de desarrollo así que vamos a nombrarla como dev&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOR_c4af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3pqiozl57zratyuzjv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOR_c4af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3pqiozl57zratyuzjv2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y por ultimo dejamos tal cual como están las siguientes ramas que serian feature, release, hotfix, y demás. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0_KeP7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1fjowpdpychiap55l8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0_KeP7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1fjowpdpychiap55l8r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#los-pasos-para-crear-una-nueva-rama-tanto-en-hotfix-como-en-feature-son-los-siguientes"&gt;
  &lt;/a&gt;
  Los pasos para crear una nueva rama tanto en hotfix como en feature son los siguientes:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nombre del branch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// para crear una rama en feature&lt;/span&gt;

&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="nx"&gt;hotfix&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nombre del branch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// para crear una rama en hotfix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eso es todo, happy coding✨✨&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>gitflow</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>A Command Line Key-Value Data Store using the Rust Programming Language.</title>
      <author>John Idogun</author>
      <pubDate>Tue, 15 Jun 2021 00:24:08 +0000</pubDate>
      <link>https://dev.to/sirneij/a-command-line-key-value-data-store-using-the-rust-programming-language-33b6</link>
      <guid>https://dev.to/sirneij/a-command-line-key-value-data-store-using-the-rust-programming-language-33b6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prelude"&gt;
  &lt;/a&gt;
  Prelude
&lt;/h2&gt;

&lt;p&gt;Rust is an imperative, super fast, and type-safe programming language that empowers you — a Software Engineer — "to reach farther, to program with confidence in a wider variety of domains than you did before." No wonder it has consistently maintained its deserved spot &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;as the most loved programming language&lt;/a&gt; for half a decade!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-are-building"&gt;
  &lt;/a&gt;
  What we are building
&lt;/h2&gt;

&lt;p&gt;Using barebone &lt;code&gt;rust&lt;/code&gt; code, we will be building a simple command line &lt;code&gt;key-value data store&lt;/code&gt; like &lt;code&gt;Redis&lt;/code&gt;. It should take in two command line arguments and assign the first as the &lt;code&gt;key&lt;/code&gt; while the second, &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If installed on your machine, it can be used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;rust-kvstore needle haystack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a file, aptly named &lt;code&gt;kv.db&lt;/code&gt;. It's content can then be read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;kv.db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whose output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;───────┬─────────────────────────────────────────────────────
       │ File: kv.db
───────┼─────────────────────────────────────────────────────
   1   │ needle  haystack
───────┴─────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you have the source files, you can simply &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; it using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;cargo run needle haystack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is simply for learning sake and no other motive is intended.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaimer"&gt;
  &lt;/a&gt;
  DECLAIMER
&lt;/h3&gt;

&lt;p&gt;This example is &lt;a href="https://www.merriam-webster.com/words-at-play/based-on-vs-based-off"&gt;based off of&lt;/a&gt; a &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;two-part tutorial anchored by the beloved Ryan Levick&lt;/a&gt;. The only significant additions are: the use of a &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Iterator&amp;lt;Item = String&amp;gt;&lt;/code&gt;; fixing this bug&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;thread &lt;span class="s1"&gt;'main'&lt;/span&gt; panicked at &lt;span class="s1"&gt;'Corrupt database: Os { code: 2, kind: NotFound, message: "No such file or directory" }'&lt;/span&gt;, src/main.rs:12:40
note: run with &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="sb"&gt;`&lt;/span&gt; environment variable to display a backtrace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
 by checking if &lt;code&gt;kv.db&lt;/code&gt; already exists and if not create it using Rust's &lt;a href="https://doc.rust-lang.org/std/path/struct.PathBuf.html"&gt;PathBuf&lt;/a&gt; standard library; using a &lt;a href="https://doc.rust-lang.org/std/fs/struct.File.html"&gt;more efficient&lt;/a&gt; file reader; and using &lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.split_once"&gt;split_once()&lt;/a&gt; instead of &lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.rsplit"&gt;rsplit()&lt;/a&gt; among others.&lt;br&gt;
&lt;strong&gt;It is highly recommended to &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;check out the awesome livestreams on youtube&lt;/a&gt;&lt;/strong&gt;. I must confess, it was a total tear down and dissection.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assumptions"&gt;
  &lt;/a&gt;
  Assumptions
&lt;/h2&gt;

&lt;p&gt;It is assumed that you have read &lt;a href="https://doc.rust-lang.org/stable/book/"&gt;The Rust book&lt;/a&gt; to some extent or have &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;checked out the awesome livestreams on youtube by Ryan Levick&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h3&gt;

&lt;p&gt;As usual, you can get the full version of the source files for this article on &lt;a href="https://github.com/Sirneij/rust-kvstore"&gt;github&lt;/a&gt;. Just clone it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij Projects]&lt;span class="nv"&gt;$ &lt;/span&gt; git clone https://github.com/Sirneij/rust-kvstore.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and open it in your favourite text editor, mine is &lt;a href="https://code.visualstudio.com/"&gt;vs code&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij Projects]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;rust-kvstore &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proper-implementation"&gt;
  &lt;/a&gt;
  Proper implementation
&lt;/h2&gt;

&lt;p&gt;Going by the assumptions made above, I will only point out some of my inputs. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Taking arguments as vectors:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since our little project wants to get two command line arguments, Rust provides a function &lt;code&gt;args()&lt;/code&gt; which can be found in the &lt;code&gt;std::env&lt;/code&gt; library. This function returns an iterator of the command line arguments. The &lt;code&gt;.collect()&lt;/code&gt; converts the returned iterator into a &lt;code&gt;vector&lt;/code&gt;. Its implementation for this project looks this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be noted that &lt;code&gt;&amp;amp;args[0]&lt;/code&gt; gives the path to our &lt;code&gt;executable&lt;/code&gt; which in this case should be &lt;code&gt;"target/debug/rust-kvstore"&lt;/code&gt;. You can see what is in &lt;code&gt;args&lt;/code&gt; by printing it to the console using &lt;code&gt;println!()&lt;/code&gt; macro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"target/debug/rust-kvstore"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"needle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"haystack"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you pass &lt;code&gt;needle haystack&lt;/code&gt; as arguments using &lt;code&gt;cargo run&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;cargo run needle haystack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are only concerned with arguments we passed, which starts from &lt;code&gt;&amp;amp;args[1]&lt;/code&gt;, we overlooked &lt;code&gt;&amp;amp;args[0]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fixing "No such file or directory" bug:&lt;/strong&gt;
If &lt;code&gt;kv.db&lt;/code&gt; is not manually created or not present at the start of the program's usage, an error of this form will surface:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;thread &lt;span class="s1"&gt;'main'&lt;/span&gt; panicked at &lt;span class="s1"&gt;'Corrupt database: Os { code: 2, kind: NotFound, message: "No such file or directory" }'&lt;/span&gt;, src/main.rs:12:40
note: run with &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="sb"&gt;`&lt;/span&gt; environment variable to display a backtrace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fix this, we need to check whether or not &lt;code&gt;kv.db&lt;/code&gt; has been created. If not create it on the fly. To accomplish this, we use this awesome &lt;code&gt;std::path::PathBuf&lt;/code&gt; library in our "constructor", &lt;code&gt;new()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PathBuf&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kv.db"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="nf"&gt;.exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buf_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;BufReader&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;buf_reader&lt;/span&gt;&lt;span class="nf"&gt;.read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kv.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using the more efficient &lt;code&gt;std::io::BufReader&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
It can also be seen in the snippet above that instead of using the &lt;code&gt;std::read_to_string&lt;/code&gt;, we opted for the more efficient &lt;code&gt;std::io::BufReader::new(file);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;split_once() implemented:&lt;/strong&gt;&lt;br&gt;
When Ryan was livestreaming, &lt;code&gt;split_once()&lt;/code&gt; was only available in the &lt;code&gt;nightly&lt;/code&gt; version of Rust so he opted for &lt;code&gt;rsplit()&lt;/code&gt;. However, I think it is stable now and the full implementation is shown as follows:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;     &lt;span class="o"&gt;...&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="nf"&gt;.lines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="nf"&gt;.split_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Corrupt database"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Nifty and awesome. To build the project from scratch, &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;code along with Ryan Levick.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kindly drop your comments, reactions and suggestions. Make me a better writer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;Introduction to Rust&lt;/a&gt; - &lt;cite&gt;by Ryan Levick&lt;/cite&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/stable/book/"&gt;The Rust Programming Language&lt;/a&gt; - &lt;cite&gt;by Steve Klabnik and Carol Nichols, with contributions from the Rust Community&lt;/cite&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;Stack Overflow Developer Survey - Most Loved, Dreaded, and Wanted Languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cover image made by &lt;a href="https://www.flaticon.com/authors/flat-icons"&gt;Flat Icons&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rust</category>
      <category>cli</category>
      <category>cargo</category>
      <category>database</category>
    </item>
    <item>
      <title>Dragon game</title>
      <author>Karen Molina</author>
      <pubDate>Tue, 15 Jun 2021 00:17:31 +0000</pubDate>
      <link>https://dev.to/voidrizoma/dragon-game-19e7</link>
      <guid>https://dev.to/voidrizoma/dragon-game-19e7</guid>
      <description>&lt;p&gt;Hello!&lt;br&gt;
Ok, let's start! Now, we can create a new game, you know the same book.&lt;br&gt;
I'm gonna put the code first, then I gotta explain it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random
import time

def displayIntro():
    print("You are in a land full of dragons, In front of you,")
    print("you see two caves. In one cave, the dragons id friendly")
    print("and will share his treasure with you. The other dragon")
    print("is greedy and hungry, and will eat you in sight")

def chooseCave():
    cave = ""
    while cave != "1" and cave != "2":
        print("Which cave will you go into? (1 or 2)")
        cave = input()

    return cave

def checkCave(chooseCave):
    print("You approach the cave...")
    time.sleep(2)
    print("It is dark and spooky...")
    time.sleep(2)
    print("A large dragon jumps out in front of you! HE open his jaws...")
    print()
    time.sleep(2)

    friendlyCave = random.randint(1,2)

    if chooseCave == str(friendlyCave):
        print("Gives you his treasure!")
    else:
        print("Gobbles you down in one bite!")

playAgain = "yes"

while playAgain == "yes" or playAgain == "y":
    displayIntro()
    caveNumber = chooseCave()
    checkCave(caveNumber)
    print("Do you want to play again? (yes or no)")
    playAgain = input()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this program we use two modules: random and time module. &lt;/p&gt;

&lt;p&gt;Currently we use functions, the function is a way to say what to do and how. In python the functions has been writing with the statement defines or def. So, we have the firts block to code inside a function called displayIntro.&lt;br&gt;
Inside displayIntro function, we write a few print methods to introduce the user inside the game.&lt;/p&gt;

&lt;p&gt;Then we have the chooseCave function. Inside it, we put a empty varibale. Below we can write a while loop. Inside it, we have to compar two options or values: 1 and 2. Those values, are going to be the user options.&lt;/p&gt;

&lt;p&gt;The next function we have is called checkCave. In this function we have to write a twice print methods to start the story. Then, we have to question to user which are the way to choose. Immediately we have to do the comparison between his choose and a random number. This is why we use random module. To choose randomdly two options: number 1 or 2. The options that we return to user, depends that return the random module.&lt;/p&gt;

&lt;p&gt;Finnaly, we have to do another function to know if the user want to continue or left the game.  &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Write better functions in Python!!</title>
      <author>Vishnubhotla V D V Bharadwaj</author>
      <pubDate>Tue, 15 Jun 2021 00:11:16 +0000</pubDate>
      <link>https://dev.to/bharadwaj6262/write-better-functions-in-python-103h</link>
      <guid>https://dev.to/bharadwaj6262/write-better-functions-in-python-103h</guid>
      <description>&lt;p&gt;By seeing the title you may get an idea of what we are going to discuss. So, let's waste no time and dive into the topic. After writing functions for nearly three years, I have figured out some Six points to write them effectively. Here I am going to discuss them as crisp as I can.&lt;/p&gt;

&lt;p&gt;Keys to a Good Function.!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sensible naming&lt;/li&gt;
&lt;li&gt;Has a single responsibility&lt;/li&gt;
&lt;li&gt;Includes a docstring&lt;/li&gt;
&lt;li&gt;Returns a value&lt;/li&gt;
&lt;li&gt;Is no longer than 50 lines&lt;/li&gt;
&lt;li&gt;Is idempotent and, if possible, pure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's go deep into each concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Naming!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prefer full English words to abbreviations and non-universally known acronyms. The only reason one might abbreviate words is to save typing, but every modern editor has autocomplete. So, you'll be typing that full name once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A function should have a single responsibility. That is, it should do one thing and only one thing. One great reason is that if every function only does one thing. There is only one reason ever to change it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docstrings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have recently come to know about this. And from then onwards for every function, I have written, I have included them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every function requires a docstring.&lt;/li&gt;
&lt;li&gt;Use proper grammar and punctuation. Write in complete sentences.&lt;/li&gt;
&lt;li&gt;Begins with a one-sentence summary of what the function does.&lt;/li&gt;
&lt;li&gt;Uses prescriptive rather than descriptive language.&lt;/li&gt;
&lt;li&gt;Can be used as comments also(added advantage).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Return Values&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Functions can(and should) be thought of as little self-contained programs. They take some input in the form of parameters and return some results. Parameters are of course optional. Return values, however, are not optional from a Python internals perspective. Even if you try to create a function that doesn't return a value, you can't. If a function would not return a value, the Python interpreter forces it to return none.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function Length&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The length of the function directly affects readability and thus maintainability. So, keep your functions short. 50 lines is a totally arbitrary number that seemed reasonable to me. Most functions you write will(hopefully) be quite a bit shorter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idempotency and Functional Purity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An idempotent function always returns the same value given the same set of arguments, regardless of how many times it is called. The result does not depend on non-local variables, the mutability of arguments, or data from any I/O streams.&lt;/p&gt;

&lt;p&gt;Pure functions do not have logging statements or print() calls. They do not make use of databases or internet connections. They don't access or modify non-local variables. And they don't call any other non-pure functions.&lt;/p&gt;

&lt;p&gt;That's the end friends. These are the things I learned about functions in my coding journey. Hope you enjoyed it. Connect with me on &lt;a href="https://twitter.com/Bharadwaj6262"&gt;Twitter&lt;/a&gt; for more awesome content.&lt;/p&gt;

</description>
      <category>python</category>
      <category>100daysofcode</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to stay productive as a developer</title>
      <author>Krowser Web Services </author>
      <pubDate>Mon, 14 Jun 2021 23:43:45 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-stay-productive-as-a-developer-53md</link>
      <guid>https://dev.to/krowser/how-to-stay-productive-as-a-developer-53md</guid>
      <description>&lt;p&gt;Since I am not getting paid by the hour (except in some cases), staying productive and healthy as a developer is critical. Here are some things I've learned over the years that help me stay on top of things.&lt;/p&gt;

&lt;p&gt;I am a software developer that loves to code. I am also a person that likes to spend time with family and friends, go out for a run, take in a good movie and enjoy the great outdoors. Unfortunately, my work responsibilities make it difficult to do all of these things because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have deadlines&lt;/li&gt;
&lt;li&gt;I need to ensure the quality of my work&lt;/li&gt;
&lt;li&gt;I have multiple projects that require constant attention&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I am not getting paid by the hour (except in some cases), staying productive and healthy as a developer is critical. Here are some things I've learned over the years that help me stay on top of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It's OK to say "no"&lt;/strong&gt;&lt;br&gt;
I have a problem with saying "yes" too often, especially when the person asking is a co-worker or someone I know socially. If I'm not careful, it will affect my productivity. Sometimes it's more efficient to take on less work than it is to rush through everything and start falling behind on deadlines due to fatigue. I'm still learning how to say no but in the meantime, I have found that being upfront about my schedule and priorities helps everyone be better organized and effective, myself included.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't forget about yourself&lt;/strong&gt;&lt;br&gt;
There are plenty of people out there who aren't afraid to make sacrifices for their families or careers but that doesn't mean you have to be one of them. Having good relationships with your family and friends is important; they help you make better decisions at work and can even protect you from burnout during stressful times. When you feel like you are in need of a break, take one. Whether it's lunchtime or the end of the day, just taking 15 minutes for yourself can do wonders for your productivity (and sanity) levels in the long run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prioritize tasks&lt;/strong&gt;&lt;br&gt;
When you have many different tasks on your schedule, prioritize them by importance and urgency, and put the most important ones first. Be realistic about how much time you can spend on each task without neglecting other responsibilities. If something is not a high priority but is taking away from something that is more important, see if there's a way to end or modify it for the good of your overall goals. This will keep things from getting out of control later on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make use of tools&lt;/strong&gt;&lt;br&gt;
There are many tools available online that provide great support for developers such as Google Docs/Drive (for collaboration), Slack (for communication), Buffer (for scheduling social media posts), Trello (for task management), and Github (to manage code revisions). These tools allow teams to stay connected without having constant meetings or phone calls all day long; using these types of tools has actually made me more productive by reducing some of the distractions in my life instead of adding more distractions via email messages/texts/phone calls/meetings etc... The key is training others on how these systems work so they also understand why certain functions don't exist within those tools - for example, slack has no direct way to post status updates via Twitter so another tool is needed, for example, Zapier or IFTTT.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn from mistakes&lt;/strong&gt;&lt;br&gt;
The best way to improve is to learn from your mistakes. If you find yourself working on something that's taking longer than expected, don't just say "well I'll get it done tomorrow," instead take the time to stop, reflect and think about where you went wrong. Maybe you didn't plan enough time for testing or maybe you didn't know what was required in the first place so took a "shot in the dark" approach. Either way, try not to repeat that mistake again and if possible, come up with some sort of documentation explaining exactly what needs to be done and how long it should take so others can pick up where you left off without needing a ton of hand-holding or supervision.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find a good work/life balance&lt;/strong&gt;&lt;br&gt;
If you are constantly working late nights and weekends, it's going to affect your personal relationships and your health. If you don't have any free time to do things you enjoy, then you will burn out sooner or later. I've been burned out before and in some cases, it was due to personal reasons I could not control (such as the death of a family member) but for the most part, it was from not listening to my body's warning signs when I was overworked. To avoid this, make sure you get enough sleep (7 hours is recommended), eat healthy food, exercise regularly, and take breaks during the workday even if others don't seem to notice or care that you're gone - they just may appreciate it more than they realize!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make time for fun activities&lt;/strong&gt;&lt;br&gt;
During hackathons or marathons where we work around the clock on a project for 24+ hours straight, drinking energy drinks and having snacks delivered can help keep us going but sometimes the best thing for productivity is taking a break! Taking 15-30 minutes here or there throughout the day for yourself can boost your overall morale which helps in other areas of life such as work, school, and home, etc... It also helps to deal with bad news better if something goes wrong during the day because at least I know there is some downtime coming up in my schedule that will allow me to recover mentally so I'm not carrying those feelings into future tasks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn how to say "no"&lt;/strong&gt;&lt;br&gt;
This one goes hand-in-hand with #1 above. Saying "yes" too much can lead to burnout just as easily as saying "no" too often. Try cutting down what is asked of you by doing more research on what needs to be done before accepting any new responsibilities. This way if it turns out you cannot complete all requests in a timely manner then others won't be waiting around while you try and figure everything out at once. Be upfront about your workload so co-workers/clients understand what's going on instead of simply giving an excuse such as "I'll get it done tomorrow." In many cases, people will be respectful if you explain clearly why something isn't possible without going into details unless they ask for more detail first.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;br&gt;
While it may not be possible to avoid burnout 100% of the time, it's important to recognize when you're starting to feel overwhelmed and take steps to mitigate the situation as soon as possible. If you don't, you could end up taking your work home with you, or worse yet, quitting your job altogether.  By knowing the warning signs and how to prevent burnout before it happens, you'll be able to utilize your energy more effectively and enjoy your work more than ever before.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Crypto Mining is Killing All Free CI/CD Platforms</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 14 Jun 2021 23:33:09 +0000</pubDate>
      <link>https://dev.to/n3wt0n/crypto-mining-is-killing-all-free-ci-cd-platforms-4chc</link>
      <guid>https://dev.to/n3wt0n/crypto-mining-is-killing-all-free-ci-cd-platforms-4chc</guid>
      <description>&lt;p&gt;We all know that crypto mining is negatively impacting many things in the world. And now it's ruining something else in a way no one has seen coming. This is why mining crypto currencies is killing every free CI / CD platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9TOJqJSHVvI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/9TOJqJSHVvI"&gt;Link to the video: https://youtu.be/9TOJqJSHVvI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Today I have to talk about something I'd prefer not to, but unfortunately this is happening, and it's happening hard. So let's talk about crypto mining and its deleterious effect on free CI/CD platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-work-on-mining"&gt;
  &lt;/a&gt;
  A Work on Mining
&lt;/h3&gt;

&lt;p&gt;We all know crypto mining, the process in which transactions for various forms of cryptocurrency are verified and added to the blockchain digital ledger, using the computing power of computers or graphics card, and for which miners are rewarded with crypto currencies directly.&lt;/p&gt;

&lt;p&gt;We probably all know that this is affecting many aspects of our current time. For example, the current and past generation of graphics cards are so good and fast for mining that it's basically impossible to buy a graphics card right now, or if you find one the price is crazy. All the supply is basically taken up by miners, and few very lucky gamers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-mining-cryptocurrencies-affect-ci-platforms"&gt;
  &lt;/a&gt;
  How Does Mining Cryptocurrencies Affect CI Platforms
&lt;/h3&gt;

&lt;p&gt;Ok, but how does this affect the CI/CD platforms? I'm glad you asked.&lt;/p&gt;

&lt;p&gt;Due to the lack of availability of graphics cards, and the constantly increasing number of miners thanks to the rise in value of cryptocurrencies, miners have started trying to find alternative ways for mining. &lt;/p&gt;

&lt;p&gt;They first started using Cloud services but quickly realized that the cost for always running large instances was higher than the gain they were able to get. And this is when they started looking at the free CI providers. &lt;/p&gt;

&lt;p&gt;Hosted Build agents are fairly powerful, having to take care of compilation etc., and most platforms have a free tier, especially for public repositories. Powerful machines for free, a miner's dream come true.&lt;/p&gt;

&lt;p&gt;And this is exactly the problem. They have started writing script, pushing them to public repositories, and take advantage of those free CI agents to run their mining software. And as the different providers started blocking those attempts, miners adapted and started writing fairly complex software and scripts to "mask" the real reasons why they were using the repos and CI agents.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h3&gt;

&lt;p&gt;There are countless examples, but here is one just to make you understand the gravity of the problem. There was a user on GitHub who created a simple repo, which seemed a legit one at a first look.&lt;/p&gt;

&lt;p&gt;In the repo this user had the definition for 5 different CI providers, including GitHub Actions, CircleCI, TravisCI and others, and all were configured in automatic CI. The user had roughly 1 commit every hour, which in turn kicked off all 5 of those CI... and the script that was run was in fact a crypto miner. You can imagine how much resources that user alone has consumed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-effects"&gt;
  &lt;/a&gt;
  The Effects
&lt;/h3&gt;

&lt;p&gt;And in fact, if you have noticed your hosted CI agent being slower than usual or picking up jobs with a greater delay most likely it's because of this. And not only on free CI, but also on paid CI platforms... because the resources are the same. But if the problem was just some slowness, we wouldn't be here talking about this.&lt;/p&gt;

&lt;p&gt;The problem is much bigger. So much so that basically all the CI providers have stopped offering free tiers or, in the best cases, they've implemented great limitations on the services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#industry-reactions"&gt;
  &lt;/a&gt;
  Industry Reactions
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#azure-devops"&gt;
  &lt;/a&gt;
  Azure DevOps
&lt;/h4&gt;

&lt;p&gt;Microsoft is not providing anymore free concurrent CI for their Azure Pipelines for new organizations. If the users want them, they need to request for them and provide additional information to verify they are eligible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wIv9CT-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bvey4m7t1qwh6416hkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIv9CT-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bvey4m7t1qwh6416hkq.png" alt="Azure DevOps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#travisci"&gt;
  &lt;/a&gt;
  TravisCI
&lt;/h4&gt;

&lt;p&gt;TravisCI is taking it a step further, completely removing the free tier, and giving to existing users a trial with an amount of free credits. When the credits are exhausted, if a user wants to keep using CI then they will have to buy a paid plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTtUUt1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf0t2rpdy1m04u37q10g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTtUUt1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf0t2rpdy1m04u37q10g.png" alt="TravisCI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gitlab"&gt;
  &lt;/a&gt;
  GitLab
&lt;/h4&gt;

&lt;p&gt;GitLab, takes a different approach. &lt;/p&gt;

&lt;p&gt;First, they require new users to verify their account adding a credit card to their account before they can start using the hosted CI agents. Existing users are not currently required to insert a credit card number, but they may be in future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c0YRaKcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uvmwqbmbqr9uxnctdb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c0YRaKcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uvmwqbmbqr9uxnctdb8.png" alt="GitLab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second, they are removing the unlimited free minutes that were previously assigned to public projects, and setting a limit to 400 free minutes instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5E6ncqBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awd6anryw7uruvpzgn73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5E6ncqBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awd6anryw7uruvpzgn73.png" alt="GitLab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#circleci"&gt;
  &lt;/a&gt;
  CircleCI
&lt;/h4&gt;

&lt;p&gt;Circle CI has never had a completely free plan, but only a free grant of 2500 credits per month. &lt;/p&gt;

&lt;p&gt;While they haven't change that, at least not yet, they 've published an article saying that they have a whole team, and I quote, "&lt;em&gt;of security experts, operations engineers, data scientists, and developers whose ongoing work comprises spotting and eradicating abuse of our platform&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fqr3yrb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukvd2c7ob6km6y8t0mzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fqr3yrb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukvd2c7ob6km6y8t0mzd.png" alt="CircleCI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This of course is a huge cost for the company, and if things will continue like this they will need to find a way to get the money back... you make of this what you want.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h4&gt;

&lt;p&gt;Finally, GitHub Actions is the only provider that I'm aware of which has still a completely free unlimited use of their CI and has not changed that.&lt;/p&gt;

&lt;p&gt;However, they did mention in a post on their public blog that the Actions teams have spent thousands of hours fighting against miners. As in the CircleCI case, this comes at a cost. Having engineering teams focusing on fighting miners most likely means they have less time to focus on improving and developing the service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UH9S-A6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvbrq7spynqd9y9qbutr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UH9S-A6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvbrq7spynqd9y9qbutr.png" alt="GitHub Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And they are also saying that they are rolling out features and improvements to help maintainer of Open Source projects having a better control of their CI when it comes to Pull Requests and Forks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISaDViod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxso1qf2n9gi3nccqjov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISaDViod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxso1qf2n9gi3nccqjov.png" alt="GitHub Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I could continue for long, because similar things are happening from each and every CI provider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution?
&lt;/h3&gt;

&lt;p&gt;Is there anything we can do to avoid this? Unfortunately, I'm afraid the answer is no.&lt;/p&gt;

&lt;p&gt;Providers can do their best to enforce terms of service and take other measures, but as long as it's profitable and untraceable to make such attacks, miners will continue to become more sophisticated and circumvent measures.&lt;/p&gt;

&lt;p&gt;The only hope is for crypto networks to fully disable the current computation-based mining as a way to earn new coins, switching entirely to a proof-of-stake (POS) validation model. It sounds impossible, but it is actually already happening. Ethereum in fact recently announced they will do exactly that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comment section below what you think about this sensitive topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9TOJqJSHVvI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>devops</category>
      <category>cicd</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Creating S3 Object Lambda with CDK for C#</title>
      <author>Oksana Horlock</author>
      <pubDate>Mon, 14 Jun 2021 23:06:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/creating-s3-object-lambda-with-cdk-for-c-24lo</link>
      <guid>https://dev.to/aws-builders/creating-s3-object-lambda-with-cdk-for-c-24lo</guid>
      <description>&lt;p&gt;The moment I learnt that S3 Object Lambda was out, I knew I’d want to experiment with it. Why? For two reasons really – at work we have quite a few scenarios when the same objects in S3 need to be presented in different shapes or forms, data extracted, or content transformed. So I’ve volunteered to speak about it and its use cases. The second reason is to practise using AWS CDK for C# more – I’ve mentioned a few times that there are very few examples in C#, and I thought it’s be a good idea to provide one more and hopefully make someone’s life easier.&lt;/p&gt;

&lt;p&gt;In a nutshell, S3 Object Lambda allows you to amend the data that you usually get by using S3 Get requests. The main characters in the story are:&lt;br&gt;
An S3 Bucket where we drop files we want to transform:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var bucket = new Bucket(this, "xmlBucket", new BucketProps
{
    BucketName = "oxies-xml-bucket",
    RemovalPolicy = RemovalPolicy.DESTROY
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Lambda function which will do the transformation. My Lambda function does a simple XML transformation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]
namespace TransformXML.Lambda
{    public class Handler
    {
        protected async Task&amp;lt;HttpResponseMessage&amp;gt; Transform(JObject request, ILambdaContext context)
        {
            try
            { 
                var s3Client = new AmazonS3Client();

                var input3Url = request["getObjectContext"]["inputS3Url"].ToString();
                var reqRoute = request["getObjectContext"]["outputRoute"].ToString();
                var token = request["getObjectContext"]["outputToken"].ToString();                

                using var httpClient = new HttpClient();
                var original = await httpClient.GetAsync(input3Url);

                var content = await original.Content.ReadAsStringAsync();

                var receivedXml = XDocument.Parse(content);
                var transformedXml = new XElement("article", receivedXml.Root.Element("body").Value);

                var toSend = new WriteGetObjectResponseRequest()
                {
                    Body = ToStream(transformedXml),
                    RequestRoute = reqRoute,
                    RequestToken = token
                };
                var response = await s3Client.WriteGetObjectResponseAsync(toSend);
            }
            catch (Exception ex)
            {
                context.Logger.Log($"ERROR: {ex.Message}; {ex.StackTrace}");              
            }
            return new HttpResponseMessage() { StatusCode = System.Net.HttpStatusCode.OK };            
        }

        private Stream ToStream(XElement onlyBodyXML)
        {
            return new MemoryStream(Encoding.UTF8.GetBytes(onlyBodyXML.ToString()));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is worth noting here is that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The request that is sent from the Lambda contains &lt;em&gt;getObjectContext&lt;/em&gt; property that contains inputs3Url which you use to get the original object&lt;/li&gt;
&lt;li&gt;You need to use a new &lt;em&gt;WriteGetObjectResponseRequest&lt;/em&gt; method that is used to include the transformed content. &lt;em&gt;WriteGetObjectResponseAsync&lt;/em&gt; sends the transformed object when Object Lambda Access Points are called.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;RequestToken&lt;/em&gt; allows the Lambda to connect the response with the caller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we start looking at the main part of the CDK stack, I’m going to use namespace aliases to save some typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using S3ObjectLambdaCfnAccessPoint = Amazon.CDK.AWS.S3ObjectLambda.CfnAccessPoint;
using S3ObjectLambdaCfnAccessPointProps = Amazon.CDK.AWS.S3ObjectLambda.CfnAccessPointProps;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then define the resources in the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var function = new Function(this, "XMLTransformBody", new FunctionProps
{
    Runtime = Runtime.DOTNET_CORE_3_1,
    Code = Code.FromAsset("./TransformXMLLambda/bin/Release/netcoreapp3.1/publish"),
    Handler = "TransformXML.Lambda::TransformXML.Lambda.Handler::Transform",
    FunctionName = "XMLTransform",
    Timeout = Duration.Minutes(1)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to give the Lambda execution role appropriate permissions like so (if you don't, ERROR: Forbidden will be returned from &lt;em&gt;WriteGetObjectResponseAsync&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var policy = new PolicyStatement(new PolicyStatementProps
{
    Effect = Effect.ALLOW,
    Actions = new[] { "s3-object-lambda:WriteGetObjectResponse" },
    Resources = new[] { "*" }
});

function.AddToRolePolicy(policy);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, the S3 Object Lambda Access Point. This is the access point that should be used in the application when making a &lt;em&gt;GetObject&lt;/em&gt; request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var objectLambdaAccessPoint = new S3ObjectLambdaCfnAccessPoint(this, "S3ObjectLambdaAccessPoint", new S3ObjectLambdaCfnAccessPointProps
{
    Name = "transformxml",
    ObjectLambdaConfiguration = new S3ObjectLambdaCfnAccessPoint.ObjectLambdaConfigurationProperty()
    {
        CloudWatchMetricsEnabled = true,

        SupportingAccessPoint = supportingAccessPoint,

        TransformationConfigurations = new object[]
        {
            new S3ObjectLambdaCfnAccessPoint.TransformationConfigurationProperty()
            {
                Actions = new string[] { "GetObject" },

                ContentTransformation = new Dictionary&amp;lt;string, object&amp;gt;()
                {
                    { 
                        "AwsLambda", new Dictionary&amp;lt;string, string&amp;gt;()
                        {
                            {"FunctionArn", function.FunctionArn }
                        } 
                    }
                }
            }
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things here: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Actions array will always have only one element "GetObject" since it's the only operation supported with the Object Lambda.&lt;/li&gt;
&lt;li&gt;With CDK in C# you need to use a Dictionary when there are Javascript arrays or untyped objects. I must say this bit is so much simpler in Typescript!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some other findings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This error occurred when I changed the name of the Access Point to contain some capital letters or hyphens. So I just left it in lowercase.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0hALjcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fayl2w4dmofc6q39j2u7.JPG" alt="error"&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;ContentTransformation&lt;/em&gt; container you can also send &lt;em&gt;FunctionPayload&lt;/em&gt;, and customize the behaviour of the function based on that payload.&lt;/li&gt;
&lt;li&gt;To use the Object Lambda Access Point all you need to do is to replace the &lt;em&gt;BucketName&lt;/em&gt; value of &lt;em&gt;GetObjectRequest&lt;/em&gt; with the ARN of the Object Lambda Access Point:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GetObjectRequest request = new GetObjectRequest
{
    BucketName = "arn:aws:s3-object-lambda:us-east-1:&amp;lt;account-id&amp;gt;:accesspoint/transformxml",
    Key = "example.xml"
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full example is in my &lt;a href="https://github.com/OksanaH/s3ObjectLambda"&gt;Github repo&lt;/a&gt;&lt;br&gt;
It took me a while to build the stack since I’ve not worked with L1 Constructs much before. A huge thanks to &lt;a href="https://twitter.com/petrabarus"&gt;Petra Novandi&lt;/a&gt; and the CDK team for giving me a hand, helping me to learn how S3 Object Lambda works, improving my knowledge of the CDK and enabling me to share my learnings with the world.&lt;/p&gt;

&lt;p&gt;Useful resources:&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/transforming-objects.html"&gt;Transforming objects with S3 Object Lambda&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=GgLQWG0ifeI"&gt;Demo - S3 Object Lambda | AWS Events&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/work-with-cdk-csharp.html"&gt;Working with CDK in C#&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambda</category>
      <category>awscdk</category>
    </item>
    <item>
      <title>Object Oriented Programming in Javascript 🤓</title>
      <author>Pepe Benitez</author>
      <pubDate>Mon, 14 Jun 2021 22:42:43 +0000</pubDate>
      <link>https://dev.to/elpepebenitez/object-oriented-programming-in-javascript-51p9</link>
      <guid>https://dev.to/elpepebenitez/object-oriented-programming-in-javascript-51p9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-programming-can-be-overwhelming-but-once-you-are-comfortable-with-some-basic-concepts-it-starts-to-feel-like-a-superpower-and-javascript-is-one-of-the-coolest-languages-to-learn"&gt;
  &lt;/a&gt;
  Hi! Programming can be overwhelming 😫 but once you are comfortable with some basic concepts, it starts to feel like a superpower 🦸‍♀️ and Javascript is one of the coolest languages to learn! 💯
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#in-this-document-you-can-find-a-summary-of-object-oriented-programming-in-javascript-we-will-cover"&gt;
  &lt;/a&gt;
  In this document you can find a summary of Object Oriented Programming in Javascript. We will cover:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What is Object Oriented Programming?&lt;/li&gt;
&lt;li&gt;OOP in Javascript&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Prototype Model&lt;/li&gt;
&lt;li&gt;Guiding Principles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-object-oriented-programming"&gt;
  &lt;/a&gt;
  What is Object Oriented Programming?
&lt;/h2&gt;

&lt;p&gt;When we talk about Object Oriented Programming or OOP, we are really talking about how we organize our code. Many times, deciding where we put our code is not straight forward or easy. OOP gives us a paradigm to start working with.&lt;/p&gt;

&lt;p&gt;The main point is to model things from real life using objects, which can contain data or properties, and can execute actions or methods. For example, a person can have many attributes such as name, age or nationality, and it can perform several actions such as running or eating.&lt;/p&gt;

&lt;p&gt;If we want to create a lot of different people in our code, things can get out of hand very quickly.&lt;/p&gt;

&lt;p&gt;OOP has several concepts that help us maintain our code manageable. We do no want &lt;a href="https://en.wikipedia.org/wiki/Spaghetti_code"&gt;Spaghetti Code&lt;/a&gt; 🍝  Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Abstraction −&lt;/strong&gt; We provide only essential information to the outside world while hiding their background details. As you build more and more complicated objects, abstractions helps us simplify things.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Encapsulation −&lt;/strong&gt; Refers to storing all of our data and functionality into a single unit. It is also a way of restricting access to certain properties.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inheritance −&lt;/strong&gt; It is the ability to give data and functionality to an object based on another object. It helps us write a lot less code and promotes reusability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#oop-in-javascript"&gt;
  &lt;/a&gt;
  OOP in Javascript
&lt;/h2&gt;

&lt;p&gt;Javascript is a very flexible language, and you can use different paradigms to build your code. There are also a lot of strong opinions on the subject of using OOP with javascript, so take this article not as a definitive guide of how to do things, but rather a guide on what OOP is and how you can you use it in your advantage. &lt;/p&gt;

&lt;p&gt;Different languages have different ways of doing things, and there is not necessarily a better way of doing things. In Javascript, you have several options to take advantage of the uses of OOP. &lt;/p&gt;

&lt;p&gt;Objects is Javascript are like objects in real life, with things they have (properties) and things they do (methods).&lt;/p&gt;

&lt;p&gt;You might have heard that "Everything is JS is an object". Although not entirely true, even things that are not objects, such as primitive types, can behave like objects sometimes because javascript wraps them into objects in the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// primitive type&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;String object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// objects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea at the hearth of object oriented programming is that we are not limited to built-in objects. We can make our own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-literal-notation"&gt;
  &lt;/a&gt;
  Object literal notation
&lt;/h3&gt;

&lt;p&gt;We can build our own objects using the object literal notation, with whatever properties and methods we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pepe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;has logged in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the &lt;code&gt;this&lt;/code&gt; keyword is inside of an object, this refers to the object itself.&lt;/p&gt;

&lt;p&gt;We can use dot nation to change data from our objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;userOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also user bracket notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;userOne&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Another name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also create or define new properties or methods using dot or bracket notation, even if they don't already exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;userOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we can start noticing some problems. It is probably better to put everything in the object literal notation, instead of adding new properties later in the code, so everything is &lt;strong&gt;encapsulated&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Also, if we want to create several object instances of user, we would need to repeat a lot of our code and work hard to change all users if we decide that the properties and methods of users need to change instead of them &lt;strong&gt;inheriting&lt;/strong&gt; from one single source of truth. This is where we can tap into javascript functionality such as classes, constructors and prototypes to help us. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prototype-model-vs-classes"&gt;
  &lt;/a&gt;
  Prototype model vs Classes
&lt;/h3&gt;

&lt;p&gt;There are not real classes built into javascript. Everything is based on the Prototype Model under the hood, but with ES6 we can emulate the idea of classes to make things a bit easier to understand. This is what we call syntactic sugar. You can use either, and we will explain how classes and the prototype model work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;Classes are blueprints of an object, but they are not specific. We identify and define that an object will have specific properties, but we don't specify their values.&lt;/p&gt;

&lt;p&gt;The cool things in that when we create instances, they will already have all the basic functionality built-in, and we can pass values dynamically through parameters.&lt;/p&gt;

&lt;p&gt;To use classes we define them using the keyword &lt;code&gt;class&lt;/code&gt; and the name of the class. By convention, we capitalize and CamelCase class names. Inside we put all data and functionality (properties and methods).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#constructor"&gt;
  &lt;/a&gt;
  Constructor
&lt;/h3&gt;

&lt;p&gt;Although you may see similarities between class and object syntax, there is one important method that sets them apart. It’s called the constructor method. JavaScript calls the constructor() method every time it creates a new instance of a class.&lt;/p&gt;

&lt;p&gt;An instance is an object that contains the property names and methods of a class, but with unique property values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of the constructor() method, we use the &lt;code&gt;this&lt;/code&gt; keyword. In the context of a class, &lt;code&gt;this&lt;/code&gt; refers to an instance of that class.&lt;/p&gt;

&lt;p&gt;We don't want to hard-code the data, we want to pass it as arguments.&lt;/p&gt;

&lt;p&gt;To create a new instance we use the &lt;code&gt;new&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;el@pepebenitez.dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pepe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword does 3 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates an empty object { }&lt;/li&gt;
&lt;li&gt;Sets the value of &lt;code&gt;this&lt;/code&gt; to the new empty object&lt;/li&gt;
&lt;li&gt;Calls the constructor method, runs the code inside of it, and then returns the new instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#class-methods"&gt;
  &lt;/a&gt;
  Class methods
&lt;/h3&gt;

&lt;p&gt;To use methods, we don't define them inside of the constructor, we do it outside of it. You cannot use commas between the methods.&lt;/p&gt;

&lt;p&gt;We have access to the &lt;code&gt;this&lt;/code&gt; keyword inside of methods as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just logged in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just logged out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;el@pepebenitez.dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pepe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;userOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// el@pepebenitez.dev just logged in&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for calling methods and getters on an instance is the same as calling them on an object — append the instance with a period, then the property or method name. For methods, you must also include opening and closing parentheses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-inheritance"&gt;
  &lt;/a&gt;
  Class inheritance
&lt;/h3&gt;

&lt;p&gt;When multiple classes share properties or methods, they become candidates for inheritance — a tool we can use to decrease the amount of code we need to write.&lt;/p&gt;

&lt;p&gt;With inheritance, you can create a parent class (also known as a superclass) with properties and methods that multiple child classes (also known as subclasses) share. The child classes inherit the properties and methods from their parent class, by extending them from the parent.&lt;/p&gt;

&lt;p&gt;When we call extends in a class declaration, all of the parent methods are available to the child class. In addition to the inherited features, child classes can contain their own properties, getters, setters, and methods.&lt;/p&gt;

&lt;p&gt;With inheritance we can pass al the basic functionality easily into other classes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;usesLitter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usesLitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usesLitter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s pay special attention to our new keywords: &lt;code&gt;extends&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;extends&lt;/code&gt; keyword makes the methods of the parent class available inside the child class.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;super&lt;/code&gt; keyword calls the constructor of the parent class. In this case, super(name) passes the name argument of the Cat class to the constructor of the Animal class. &lt;/p&gt;

&lt;p&gt;usesLitter is a new property that is unique to the Cat class, so we set it in the Cat constructor.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IMPORTANT&lt;/code&gt; In a constructor(), you must always call the super method before you can use the this keyword — if you do not, JavaScript will throw a reference error. To avoid reference errors, it is best practice to call super on the first line of subclass constructors.&lt;/p&gt;

&lt;p&gt;You can find more resources on Javascript classes here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/class"&gt;Class basic syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"&gt;Classes - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLtwj5TTsiP7uTKfTQbcmb59mWXosLP_7S"&gt;JavaScript Classes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prototype-model"&gt;
  &lt;/a&gt;
  Prototype Model
&lt;/h2&gt;

&lt;p&gt;Remember that we are just using pretend classes. The javascript prototype model was the original way to create or emulate using classes before the class keyword, and under the hood javascript is still using the prototype model. &lt;/p&gt;

&lt;p&gt;Some people don't like the use of classes in Javascript. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@rajaraodv/is-class-in-es6-the-new-bad-part-6c4e6fe1ee65"&gt;Is "Class" In ES6 The New "Bad" Part?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So knowing how the prototype model works will help us become better developers, have more flexibility and be more efficient at debugging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constructor-functions"&gt;
  &lt;/a&gt;
  Constructor Functions
&lt;/h3&gt;

&lt;p&gt;We still need to use a constructor function. A constructor function is what creates objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can still use the &lt;code&gt;new&lt;/code&gt; keyword. And it is still doing the same things (creating a new object, binding the context of the &lt;code&gt;this&lt;/code&gt; keyword equal to that object, and passes it to the constructor function). We also have access to the &lt;code&gt;this&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;has logged in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we don't usually put our methods inside of the constructor function. That is when we use the prototype property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prototype-property"&gt;
  &lt;/a&gt;
  Prototype property
&lt;/h3&gt;

&lt;p&gt;All objects have a prototype property. A prototype is like a map for the object type and its methods. We use the prototype property to store and define our methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;has logged in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all going on in the background when we use class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prototype-inheritance"&gt;
  &lt;/a&gt;
  Prototype inheritance
&lt;/h3&gt;

&lt;p&gt;We can also use inheritance with prototype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;// here we are using a rest parameter&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to call the User constructor method from the Admin constructor method, so that it inherits the basic functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;// here we are using a rest parameter&lt;/span&gt;
    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// takes the user constructor function and runs it&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the apply method we want to pass two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the context of &lt;code&gt;this&lt;/code&gt;. Sounds weird but we just need to pass &lt;code&gt;this&lt;/code&gt; because we are calling it inside of a constructor function, so &lt;code&gt;this&lt;/code&gt; in that context refers to the instance to which we are applying the new inherited properties and methods.&lt;/li&gt;
&lt;li&gt;The actual arguments we are receiving in an array format.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;// here we are using a rest parameter&lt;/span&gt;
    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// takes the user constructor function and runs it&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Administrator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to inherit methods, we use the prototype property of the child object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that using classes can make some thins a lot simpler and easier, but it is still very good to understand what is actually going on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guiding-principles"&gt;
  &lt;/a&gt;
  Guiding principles
&lt;/h2&gt;

&lt;p&gt;When we are talking about OOP, it is difficult not to mention the SOLID principles. There principles are meant to guide us when we are designing our code structure. Two good goals to have in mind is for everything to have only one responsibility and that everything should work individually as we want them to, without relying on other objects:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-responsibility-principle"&gt;
  &lt;/a&gt;
  Single Responsibility Principle
&lt;/h3&gt;

&lt;p&gt;One of the most important things to remember is the Single Responsibility Principle which states that a class (or object) should only have one responsibility. This doesn’t mean that an object can only do one thing, but it does mean that everything an object does should be part of one responsibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loosely-coupled-objects"&gt;
  &lt;/a&gt;
  Loosely Coupled Objects
&lt;/h3&gt;

&lt;p&gt;Obviously, all of our objects are intended to work together to form our final application. You should take care, however, to make sure that your individual objects can stand alone as much as possible. Tightly coupled objects are objects that rely so heavily on each other that removing or changing one will mean that you have to completely change another one.&lt;/p&gt;

&lt;p&gt;You can read more about the SOLID principles here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thefullstack.xyz/solid-javascript/"&gt;5 Principles that will make you a SOLID JavaScript Developer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa"&gt;S.O.L.I.D The first 5 principles of Object Oriented Design with JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  Static Methods
&lt;/h3&gt;

&lt;p&gt;Sometimes you will want a class to have methods that aren’t available in individual instances, but that you can call directly from the class You can use the static keyword to define static methods that can only be called from the class and not from the instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;generateName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Angel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buffy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Willow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because of the static keyword, we can only access .generateName() by appending it to the Animal class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// returns a name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tyson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tyson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;tyson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-chaining"&gt;
  &lt;/a&gt;
  Method chaining
&lt;/h3&gt;

&lt;p&gt;A little trick to call several methods with less code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;userOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to do this we need to return the instance of the object. The instance is stored in the keyword &lt;code&gt;this&lt;/code&gt;. We just need to return &lt;code&gt;this&lt;/code&gt; at the end of every method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just logged in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just logged out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-resources-on-javascript"&gt;
  &lt;/a&gt;
  Useful resources on Javascript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;JavaScript | MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;freeCodeCamp.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript"&gt;JavaScript Tutorial: Learn JavaScript For Free | Codecademy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codetogo.io/javascript/"&gt;JavaScript Code to go&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hi! My name is Pepe 👾, and I am from Panama in Central America 🌴🌞🌴 You can find me in &lt;a href="https://www.linkedin.com/in/pepebenitez/"&gt;linkedin&lt;/a&gt;, &lt;a href="https://twitter.com/elpepebenitez"&gt;twitter&lt;/a&gt; or &lt;a href="https://github.com/elpepebenitez"&gt;github.&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you found this useful feel free to share it!&lt;/li&gt;
&lt;li&gt;If you have any questions, recommendations or general comments feel free to drop me a message!&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Conhecendo o Actuator do Spring Boot</title>
      <author>Henrique Lobo Weissmann (Kico)</author>
      <pubDate>Mon, 14 Jun 2021 22:26:32 +0000</pubDate>
      <link>https://dev.to/loboweissmann/conhecendo-o-actuator-do-spring-boot-4f9h</link>
      <guid>https://dev.to/loboweissmann/conhecendo-o-actuator-do-spring-boot-4f9h</guid>
      <description>&lt;p&gt;Um dos recursos que mais gosto no Spring Boot e que normalmente é negligenciado por quem usa o framework é o &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html"&gt;Actuator&lt;/a&gt;: natural, dado que o foco normalmente está no código sendo escrito e não após ter sido implantado. &lt;/p&gt;

&lt;p&gt;O Actuator é um recurso do Spring Boot que nos permite &lt;strong&gt;monitorar e gerenciar&lt;/strong&gt; aplicações escritas neste framework em seu ambiente de implantação. É bastante rico e fácil de ser usado: já vêm com diversos recursos prontos pra uso sem que você precise escrever uma única linha de código e será nosso assunto aqui.&lt;/p&gt;

&lt;h2&gt;A curiosa história deste texto e dos próximos&lt;/h2&gt;

&lt;p&gt;Quando comecei a escrever este texto lembrei que pouca gente conhecia um recurso similar que temos no Java SE chamado JMX, então escrevi &lt;a href="https://devkico.itexto.com.br/?p=3169"&gt;aquele post&lt;/a&gt; apresentando a tecnologia. Quando finalmente voltei ao objetivo inicial o resultado foi um texto &lt;strong&gt;imenso&lt;/strong&gt;. Sendo assim resolvi dividi-lo em partes: nesta primeira vou apresentar uma visão geral sobre o Actuator e nos restantes vamos ver os recursos que mais usamos em nosso dia a dia.&lt;/p&gt;

&lt;p&gt;Vou te mostrar o que é o Actuator, suas principais aplicações (por alto, vou detalhar tudo isto nos posts mais a frente (já estão prontos, "só falta testar")), as principais configurações e, finalmente, pontos fundamentais relativos à segurança do seu projeto.&lt;/p&gt;

&lt;h1&gt;O que é o Actuator?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDy_CLUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/spring_boot_actuator-1024x398.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDy_CLUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/spring_boot_actuator-1024x398.jpg" alt="O que é o Spring Boot Actuator?"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Talvez o Actuator não seja tão usado e conhecido pelo modo como é apresentado pela equipe do Spring Boot e traduzido para o português: &lt;em&gt;"production-ready features"&lt;/em&gt;, aí traduzem como &lt;em&gt;"funcionalidades para o ambiente de produção"&lt;/em&gt;. Pior: a maior parte dos livros em português tem como foco a escrita de código e no máximo a implantação, ignorando aquela que pra mim é a fase mais importante: &lt;strong&gt;a pós implantação&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O Spring Boot oferece à equipe de desenvolvimento todo o ferramental necessário para que possa monitorar e gerenciar sua aplicação após ter sido implantada. Com ele você pode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitorar a aplicação, isto é, acompanhar diversos aspectos da sua execução após implantada.&lt;/li&gt;
&lt;li&gt;Gerenciar a aplicação, ou seja, interagir com o sistema com ele em execução operando ações neste como, por exemplo, limpeza de cache, tarefas administrativas, alteração de configurações e muito mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, você leu o &lt;a href="https://devkico.itexto.com.br/?p=3169"&gt;meu texto sobre JMX&lt;/a&gt; e viu as mesmas frases. Então &lt;strong&gt;qual a diferença?&lt;/strong&gt; Há algumas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O protocolo padrão é o HTTP usando REST como padrão, o que facilita seu uso (há riscos de segurança que vou ensinar a minimizar mais a frente).&lt;/li&gt;
&lt;li&gt;Além do protocolo HTTP também pode usar JMX, que é o mecanismo padrão de instrumentação do Java.&lt;/li&gt;
&lt;li&gt;Assim como o JMX já vêm com uma série de indicadores relativos ao funcionamento da JVM por padrão, o Actuator trás &lt;strong&gt;diversas outras categorias de indicadores&lt;/strong&gt;, a maior parte &lt;strong&gt;voltados para o contexto de aplicações web&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Tem como base o Spring Boot - está amarrado ao framework portanto, você não conseguirá usá-lo de forma fácil em outros frameworks.&lt;/li&gt;
&lt;li&gt;Fornece a plataforma para que diversos módulos do Spring Boot possam fornecer seus próprios.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resumindo: o Actuator nos dá todos os recursos que precisamos para monitorar e gerenciar aplicações no contexto web, o que é vital se você implementa uma arquitetura baseada em micro serviços.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Lembra do texto do Martin Fowler que popularizou os micro serviços? Um dos pontos fundamentais era justamente o monitoramento, e o Actuator entra exatamente aí. Não leu o texto? Aqui o &lt;a href="https://martinfowler.com/articles/microservices.html"&gt;link&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Monitorar o que?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKiJhD1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/spring_cockpit-1024x382.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKiJhD1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/spring_cockpit-1024x382.jpg" alt="Monitorar o que?"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Toda esta conversa sobre monitoramento é muito bonita mas talvez você se sinta perdido pois há inúmeras opções. Que aspectos relativos à execução do seu projeto interessam ser monitorados? Quais novos indicadores o Actuator trás pra nós? &lt;/p&gt;

&lt;h3&gt;Indicadores customizados pelo desenvolvedor&lt;/h3&gt;

&lt;p&gt;Se você leu &lt;a href="https://devkico.itexto.com.br/?p=3169"&gt;meu texto sobre JMX&lt;/a&gt;, temos aqui o mesmo conceito dos MBeans. Você pode implementar beans aqui capazes de oferecer as seguintes funcionalidades:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obtenção de dados - verificar espaço em disco, por exemplo.&lt;/li&gt;
&lt;li&gt;Executar ações - tarefas administrativas como limpeza de cache, remoção de arquivos temporários ou qualquer outro tipo de funcionalidade administrativa que você precise em produção.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sua imaginação e necessidade são os limites aqui. Você poderia implementar isto como endpoints convencionais do Spring que executassem estas operações, é verdade, mas para o caso de tarefas administrativas o ideal é que até por questões de segurança seja um código isolado.&lt;/p&gt;

&lt;h3&gt;Checagem de qualidade de serviço (health checks)&lt;/h3&gt;

&lt;p&gt;Talvez meu uso favorito do Actuator: código de health checking é aquele responsável por verificar se o sistema está executando em condições adequadas. Vamos a alguns exemplos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verificar espaço em disco.&lt;/li&gt;
&lt;li&gt;Quantidade de memória disponível.&lt;/li&gt;
&lt;li&gt;Acesso ao banco de dados (checagem dos data sources).&lt;/li&gt;
&lt;li&gt;Se você realiza interação com outros serviços externos, se consegue se conectar a estes.&lt;/li&gt;
&lt;li&gt;Integridade do sistema de arquivos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um dos textos desta série é justamente sobre health checking. É interessante aqui observar que diversos módulos do Spring Boot (como Redis, JPA e muitos outros) adicionam seus próprios testes de verificação de qualidade sem que você precise escrever uma linha de código sequer. A imagem a seguir expõe um exemplo de health checking detalhado usando o que já vêm com o módulo JPA:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoFpOrcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoFpOrcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-8.png" alt="health checking em ação"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Bem legal hein? E eu não escrevi uma linha sequer de código pra verificar se o acesso ao banco de dados está funcionando. Observe que também há um teste sobre espaço em disco: também não escrevi este teste, veio de graça com o Actuator!&lt;/p&gt;

&lt;p&gt;E eu te contei que você pode escrever seus próprios testes? Vamos ver isto no próximo post!&lt;/p&gt;

&lt;h3&gt;Logging&lt;/h3&gt;

&lt;p&gt;O Actuator pode facilitar bastante o acesso ao conteúdo do arquivo de log da aplicação. E este é um uso bastante útil, essencialmente, para ver o log principal da aplicação você apenas acessa o endpoint &lt;em&gt;/actuator/logfile &lt;/em&gt;e &lt;strong&gt;boom:&lt;/strong&gt; o log principal da aplicação está ali. Abaixo você pode ver um exemplo de saída:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNm6p-cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNm6p-cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-9.png" alt="saída de log"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;É possível até mesmo usando o comando curl obter a sua própria versão do "tail", veja este exemplo:&lt;/p&gt;

&lt;pre&gt;curl 'http://localhost:8080/actuator/logfile' -i -X GET&lt;/pre&gt;

&lt;p&gt;É possível também ver a lista de todos os loggers presentes na aplicação, assim como seus níveis de acesso.&lt;/p&gt;

&lt;p&gt;Não pretendo me aprofundar neste tema, mas se você quiser, este é o &lt;a href="https://docs.spring.io/spring-boot/docs/2.4.1/actuator-api/htmlsingle/#logfile-retrieving"&gt;link a seguir&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Métricas (metrics) - profilando sua aplicação&lt;/h3&gt;

&lt;p&gt;No caso das métricas temos aqui a medição de um aspecto da aplicação específico (consumo de CPU, memória, conexões ativas com banco de dados, etc), no momento atual. Essencialmente este indicador responde a seguinte questão: "&lt;strong&gt;qual o valor do indicador X agora?&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;Isto te permite montar gráficos que possibilitam acompanhar ao longo do tempo o desempenho destes componentes, tal como o gráfico abaixo, que expõe o uso de CPU ao longo do tempo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1S1PAVUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-10-1024x443.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1S1PAVUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-10-1024x443.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infelizmente o Actuator não vêm com o ferramental que produz este tipo de gráfico, mas provê conectores para diversas ferramentas que podem gerar isto para você, tais como JMX, New Relic, Datadog, Dynatrace, Elastic e muitos outros que você pode ver &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics"&gt;neste link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mas não acaba aí! &lt;/strong&gt;Você também pode monitorar o tempo de resposta dos seus endpoints com estas métricas. Veja o exemplo a seguir, real, extraído da API do /dev/All:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LuUhS-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LuUhS-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-11.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando adicionamos a anotação @Timed (io.micrometer.core.annotation.Timed) na classe do nosso controlador, podemos extrair métricas como número de requisições recebidas, tempo máximo de processamento e outros detalhes, apenas acessando o endereço /actuator/metrics/site (notou que "site" é o valor que passei pra anotação @Timed?). Veja o print a seguir: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djleqo18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djleqo18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-12.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É possível anotar apenas alguns endpoints também, o que te permite acompanhar a evolução do desempenho dos mesmos. Notou que obtive tudo isto incluindo apenas &lt;strong&gt;uma&lt;/strong&gt; anotação? Pode aguardar que tem post detalhando este assunto vindo.&lt;/p&gt;

&lt;h3&gt;Informações genéricas (Info)&lt;/h3&gt;

&lt;p&gt;Outro grupo de informações muito útil é o info: quem nunca precisou verificar qual a versão da aplicação está em produção? Mas não se limita a apenas isto: você pode incluir literalmente qualquer coisa aqui, até mesmo informações relativas ao Git. &lt;/p&gt;

&lt;p&gt;Sim, há um post só sobre este ponto aqui saindo no futuro. Neste primeiro momento pense nas informações genéricas como "a sua base chave/valor de dados no Actuator".&lt;/p&gt;

&lt;h3&gt;Menções honrosas&lt;/h3&gt;

&lt;p&gt;Meu objetivo neste e nos próximos posts é mostrar quais os recursos do Actuator que acho mais interessantes com base na minha experiência. Mas há alguns outros recursos providos por padrão que devem ser mencionados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Auditoria&lt;/strong&gt; - te possibilita registrar e monitorar eventos de autenticação bem ou mal sucedida e acesso não autorizado aos seus endpoints. Muito útil, leia mais &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-auditing"&gt;neste link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Listagem de rotas&lt;/strong&gt; - muito útil, especialmente quando você está lidando com sistemas pré-existentes. Mais detalhes &lt;a href="https://docs.spring.io/spring-boot/docs/2.4.1/actuator-api/htmlsingle/#mappings"&gt;aqui&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Gestão do processo principal&lt;/strong&gt; - sabia que você pode &lt;strong&gt;finalizar&lt;/strong&gt; o processo da sua aplicação pelo Actuator? Yeap, você pode: é o endpoint &lt;strong&gt;/actuator/shutdown&lt;/strong&gt;. Em momentos críticos pode te ajudar bastante (pense num bug bruto em produção gerando prejuízos por segundo). Leia mais &lt;a href="https://docs.spring.io/spring-boot/docs/2.4.1/actuator-api/htmlsingle/#shutdown"&gt;aqui&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Actuator na prática&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqQbJCvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/starting-1024x343.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqQbJCvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/starting-1024x343.jpg" alt="Iniciando"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;O Actuator está presente desde a primeira versão do Spring Boot. Neste texto estou falando da última versão do framework (2.4.1), e incluí-lo em sua aplicação é muito simples. Se está usando Maven, basta incluir a dependência a seguir:&lt;/p&gt;

&lt;pre&gt;&amp;lt;dependency&amp;gt; 
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; 
   &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; 
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;

&lt;p&gt;Usa Gradle? Tão fácil quanto: inclua a dependência tal como no exemplo a seguir:&lt;/p&gt;

&lt;pre&gt;dependencies { 
   implementation 'org.springframework.boot:spring-boot-starter-actuator' 
}&lt;/pre&gt;

&lt;p&gt;Inicie seu projeto e, na sequência, acesse este endereço: http://localhost:8080/actuator (imaginando que seu contexto seja "/"). Você verá uma resposta similar a esta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0PGJ2-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0PGJ2-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-13.png" alt="endereços essenciais"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Super legal: o Actuator está te mostrando quais os endpoints de monitoramento/gerenciamento disponíveis. Por padrão estão visíveis apenas os endpoints de saúde (health) e informações gerais (info). Experimente navegar por eles, será uma experiência frustrante após ter lido este meu texto, pois você não vê nada do que prometi. Vamos resolver isto agora.&lt;/p&gt;

&lt;h2&gt;Endpoints - expostos vs habilitados&lt;/h2&gt;

&lt;p&gt;A unidade base do Actuator é o endpoint. Qualquer ação que você realize no Actuator envolve o acesso a um dos endereços disponibilizados pelo framework. Por segurança não temos todos os endpoints expostos, especialmente por que estamos usando um protocolo que, por padrão, não é seguro, o HTTP (não confundir com HTTPS, que também não é tão seguro assim quanto as propagandas da internet ("Ops!") vendem).&lt;/p&gt;

&lt;p&gt;Sendo assim é necessário alterar as configurações do Spring Boot (não sabe como fazer com segurança? Já escrevi sobre elas &lt;a href="https://devkico.itexto.com.br/?p=3157"&gt;aqui&lt;/a&gt;) para identificar quais os itens que serão expostos. Quer expor todos? Então mude o valor da configuração management.endpoints.web.exposure.include com o valor * tal como no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;management.endpoints.web.exposure.include=*&lt;/pre&gt;

&lt;p&gt;Atenção: se sua configuração estiver no formato yaml, digite '*' ao invés de *. Acesse novamente o endereço base do Actuator: http://localhost:8080/actuator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LolgTyf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LolgTyf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-14.png" alt="Listagem dos endpoints"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Olha aí um monte de endpoints disponíveis pra você agora (inclusive o "shutdown", que habilitei de propósito e é desabilitado por padrão). Há dois conceitos aqui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Endpoints ativos&lt;/strong&gt; - todos (com exceção de um (então não são todos, qual é este? é o shutdown)) são ativos por padrão, isto é, podem ser executados.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Endpoints expostos&lt;/strong&gt; - são os endpoints que podem ser acessados remotamente por HTTP ou JMX.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O endpoint pode estar visível por essencialmente dois protocolos quando estamos tratando do Actuator: JMX ou HTTP. Neste post vamos falar só de HTTP, mas você pode aprender mais sobre o que é o JMX &lt;a href="https://devkico.itexto.com.br/?p=3169"&gt;neste meu texto&lt;/a&gt; e como trabalhar com JMX e Actuator &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-jmx"&gt;neste link&lt;/a&gt; da documentação.&lt;/p&gt;

&lt;p&gt;Não é uma boa ideia expor todos os endpoints. O ideal é que você exponha &lt;strong&gt;apenas o que realmente faz sentido&lt;/strong&gt;, pois quanto mais pontos de monitoramento estiverem visíveis, maior é a área de ataque aos seus sistemas. Sendo assim entra um novo conceito aqui: o &lt;strong&gt;identificador do endpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Todo indicador (endpoint) no Actuator tem seu próprio identificador. A lista dos identificadores padrão pode ser conferida neste &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Como ativar endpoints&lt;/h3&gt;

&lt;p&gt;Você deve seguir a seguinte sintaxe para ativar um endpoint individualmente:&lt;/p&gt;

&lt;pre&gt;management.endpoint.[identificador do endpoint].enabled=(true|false)&lt;/pre&gt;

&lt;p&gt;Vamos a alguns exemplos, habilitando o info e desabilitando o shutdown:&lt;/p&gt;

&lt;pre&gt;management.endpoint.info.enabled=true&lt;br&gt;management.endpoint.shutdown.enabled=false&lt;/pre&gt;

&lt;p&gt;Como mencionei agora há pouco, todos os endpoints estão ativados por padrão com exceção do "shutdown". Mas e se você não quiser este comportamento? E se quiser habilitar um a um os endpoints que deseja? Aí basta alterar a configuração management.endpoints.enabled-by-default tal como no exemplo a seguir:&lt;/p&gt;

&lt;pre&gt;# pronto, agora você vai ter de definir um a um os endpoints ativos&lt;br&gt;management.endpoints.enabled-by-default=false&lt;/pre&gt;

&lt;h3&gt;Como expor endpoints&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GIjAhn9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/hidden.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GIjAhn9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/hidden.jpg" alt="Expondo e ocultando endpoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por padrão apenas os endpoints info e health estão expostos por padrão ao protocolo HTTP. É muito importante que você leve &lt;strong&gt;segurança&lt;/strong&gt; em consideração aqui, sendo assim recomendo que você exponha apenas os endpoints que sejam &lt;strong&gt;realmente importantes&lt;/strong&gt; para sua equipe.&lt;/p&gt;

&lt;p&gt;Novamente, vamos lidar com algumas configurações do Spring Boot aqui. A primeira delas diz quais os endpoints que você quer expor: management.endpoints.web.exposure.include. Ela pode receber dois valores: "*" ou a lista de identificadores separados por vírgula, tal como no exemplo a seguir:&lt;/p&gt;

&lt;pre&gt;# expondo todos os endpoints&lt;br&gt;management.endpoints.web.exposure.include=*&lt;br&gt;# expondo apenas os endpoints que nos interessam: health, info, metrics&lt;br&gt;management.endpoints.web.exposure.include=health,info,metrics&lt;/pre&gt;

&lt;p&gt;Mas pra complicar (ou não) um pouquinho as coisas há outra propriedade que também define os endpoints que desejamos &lt;strong&gt;ocultar&lt;/strong&gt;. É a configuração management.endpoints.web.exposure.exclude. Exclude tem precedência sobre o que será exposto. E a mesma sintaxe que temos para o include, temos para o exclude.&lt;/p&gt;

&lt;h1&gt;Segurança&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXh7kgyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/seguranca-1024x422.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXh7kgyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/seguranca-1024x422.jpg" alt="Segurança"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Tudo muito bonito: com o Actuator podemos ver praticamente tudo sobre o estado corrente da nossa aplicação e também o ambiente no qual ela está sendo executada. E com as configurações padrão inclusive &lt;strong&gt;quem não deveria ter acesso a estas informações&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Alguém interessado em lhe causar problemas sabe tudo sobre sua aplicação: quais pontos da aplicação podem não estar funcionando corretamente (healthcheck), quanta memória está disponível, idem espaço de armazenamento, quantas requisições por segundo sua aplicação recebe, o que sai no log, como está seu banco de dados... enfim, é o prato cheio pra quem quer invadir sua plataforma. E claro, usando um protocolo disponível a todos: HTTP. Com um browser qualquer descubro como lhe causar pesadelos. Vejamos como evitar isto.&lt;/p&gt;

&lt;h2&gt;Spring Security&lt;/h2&gt;

&lt;p&gt;Se sua aplicação usa Spring Security (use), é relativamente fácil limitar o acesso aos endpoints do Actuator com base nas permissões do usuário. O caminho mais popular é estender a classe de configuração WebSecurityConfigurerAdapter sobrescrevendo o método configure tal como no exemplo a seguir:&lt;/p&gt;

&lt;pre&gt;@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
   @Override
   protected void configure(HttpSecurity http) throws Exception {
     http
       .sessionManagement()
       .sessionCreationPolicy(SessionCreationPolicy.NEVER)
       .and()
         .authorizeRequests()
         &lt;strong&gt;.antMatchers("/actuator/&lt;/strong&gt;").hasAuthority("ROLE_ADMIN")
         .anyRequest().authenticated()
      .and()
        .csrf().disable();
   }
}&lt;/pre&gt;

&lt;p&gt;Observe, este é um código de mera referência, vai dar um pouquinho mais de trabalho no seu projeto, pegue apenas a ideia geral. Neste caso, apenas os usuários com a permissão (authority) ROLE_ADMIN terão acesso aos endpoints.&lt;/p&gt;

&lt;p&gt;Caso queira mais exemplos, sugiro que você confira &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-security"&gt;este&lt;/a&gt; e &lt;a href="https://stackoverflow.com/questions/56117631/how-to-secure-actuator-endpoints-with-role-in-spring-boot-2"&gt;este&lt;/a&gt; link. Mas o ponto é: &lt;strong&gt;restrinja o acesso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Caso o Spring Security não seja uma opção, há outras: você pode implementar um filtro, por exemplo, e neste adotar outro tipo de autenticação, como Basic Auth (não recomendo) por exemplo ou mesmo headers de API Keys.&lt;/p&gt;

&lt;h2&gt;Mude as configurações padrão&lt;/h2&gt;

&lt;h3&gt;Mudando o base path padrão &lt;/h3&gt;

&lt;p&gt;Se eu quiser varrer sua rede em busca de informações sobre sua infra a primeira coisa que farei é buscar endereços padrão. O endereço padrão do Actuator é "/actuator". Sendo assim, vamos mudar esta configuração? É simples, você usa a chave management.endpoints.web.base-path , tal como no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;# mudando de /actuator para /segredos&lt;br&gt;management.endpoints.web.base-path=/segredos&lt;/pre&gt;

&lt;p&gt;Recomendo que você use sua criatividade neste nome, o que pelo menos irá dar um pouco mais de trabalho para quem estiver tentando encontrar seu endereço base do Actuator.&lt;/p&gt;

&lt;h3&gt;Use outra porta&lt;/h3&gt;

&lt;p&gt;Esta é outra boa dica. Você pode configurar o Actuator para usar uma porta diferente daquela adotada por sua aplicação. Sendo assim sua API poderia operar na porta 443 (HTTPS) por exemplo, e o Actuator na porta 1979. Com isto, configurando seu firewall (ou regras de acesso a portas do seu serviço cloud) você consegue limitar quais endereços poderão ter acesso ao Actuator na porta customizada. A chave de configuração usada é a management.server.port. O exemplo abaixo define a porta 1979 para o Actuator:&lt;/p&gt;

&lt;pre&gt;management.server.port=1979&lt;/pre&gt;

&lt;p&gt;Tente acessar o Actuator pela porta padrão da aplicação e o que você recebe? 404!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B317Ajai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B317Ajai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/image-15.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Configure CORS&lt;/h2&gt;

&lt;p&gt;Se você quer que código JavaScript cliente acesse seus endpoints do Actuator (tem certeza disto?) é possível habilitar CORS para os endpoints usando as chaves expostas no exemplo a seguir:&lt;/p&gt;

&lt;pre&gt;# as origens
&lt;strong&gt;management.endpoints.web.cors.allowed-origins&lt;/strong&gt;=https://itexto.com.br
# quais métodos
&lt;strong&gt;management.endpoints.web.cors.allowed-methods&lt;/strong&gt;=GET,POST&lt;/pre&gt;

&lt;p&gt;Não sabe o que é CORS? Leia este &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;texto&lt;/a&gt;. Mais detalhes sobre o uso de CORS na documentação oficial do Actuator &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-cors"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;SSL&lt;/h2&gt;

&lt;p&gt;Já que você definiu uma porta diferente pro seu servidor, por que não jogar um certificado SSL no mesmo pra deixar a coisa ainda mais segura?&lt;/p&gt;

&lt;p&gt;A configuração a seguir expõe exatamente isto:&lt;/p&gt;

&lt;pre&gt;# a porta customizada do servidor
&lt;strong&gt;management.server.port&lt;/strong&gt;=1979 
# habilitando SSL nesta porta
&lt;strong&gt;management.server.ssl.enabled&lt;/strong&gt;=true 
# o keystore que contém seu certificado
&lt;strong&gt;management.server.ssl.key-store&lt;/strong&gt;=classpath:management.jks 
# a senha de acesso ao keystore
&lt;strong&gt;management.server.ssl.key-password&lt;/strong&gt;=secret&lt;/pre&gt;

&lt;p&gt;Maiores detalhes neste &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-management-specific-ssl"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Concluindo a introdução e preparando a jornada&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZs119FQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/finalizando.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZs119FQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devkico.itexto.com.br/wp-content/uploads/2020/12/finalizando.jpg" alt="Finalizando"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Nosso caminho com Actuator está só começando. Meu objetivo neste post foi te mostrar o que é esta ferramenta, abrir seus olhos para algumas das possibilidades que ela nos dá e, principalmente, te preparar para o maior risco que vêm com ela: a exposição de dados sensíveis a partir dos endpoints disponibilizados.&lt;/p&gt;

&lt;p&gt;A partir de agora meu objetivo é ir pra prática: vou te ensinar a implementar seus próprios endpoints de health checking, como enriquecer as informações apresentadas pelo seu sistema, lidar com auditoria e implementar seus próprios endpoints.&lt;/p&gt;

&lt;p&gt;Até lá!&lt;/p&gt;

&lt;h2&gt;Para saber mais&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Documentação oficial do Actuator&lt;/strong&gt; - &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html%20"&gt;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API do Actuator&lt;/strong&gt; - te expõe todos os detalhes sobre os endpoints padrão disponibilizados pela ferramenta - &lt;a href="https://docs.spring.io/spring-boot/docs/2.4.1/actuator-api/htmlsingle/"&gt;https://docs.spring.io/spring-boot/docs/2.4.1/actuator-api/htmlsingle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entendendo as configurações do Spring Boot&lt;/strong&gt; - é fundamental que você entenda como as configurações do Spring Boot funcionam. Então escrevi &lt;a href="https://devkico.itexto.com.br/?p=3157"&gt;este texto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conheça JMX&lt;/strong&gt; - o texto que nasceu deste aqui e que contém muitos conceitos que você deve conhecer também. Leia &lt;a href="https://devkico.itexto.com.br/?p=3169"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentação oficial do Spring Security&lt;/strong&gt; - &lt;a href="https://docs.spring.io/spring-security/site/docs/5.4.2/reference/html5/"&gt;https://docs.spring.io/spring-security/site/docs/5.4.2/reference/html5/&lt;/a&gt;&lt;/p&gt;



</description>
      <category>springboot</category>
      <category>spring</category>
      <category>java</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
