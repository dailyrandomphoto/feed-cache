<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What jobs can you get as a Python Developer</title>
      <author>Jonny coder</author>
      <pubDate>Thu, 28 Oct 2021 06:50:13 +0000</pubDate>
      <link>https://dev.to/jonnywq/what-jobs-can-you-get-as-a-python-developer-429n</link>
      <guid>https://dev.to/jonnywq/what-jobs-can-you-get-as-a-python-developer-429n</guid>
      <description>&lt;p&gt;Pythoneer job role and requirements:&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.codelivly.com/what-jobs-can-you-get-as-a-python-developer/"&gt;https://www.codelivly.com/what-jobs-can-you-get-as-a-python-developer/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>30 amazing 🤩 GitHub respo that will help you 🪄 make a Beautiful Project </title>
      <author>Jonny coder</author>
      <pubDate>Thu, 28 Oct 2021 06:41:24 +0000</pubDate>
      <link>https://dev.to/jonnywq/30-amazing-github-respo-that-will-help-you-make-a-beautiful-project-5fi4</link>
      <guid>https://dev.to/jonnywq/30-amazing-github-respo-that-will-help-you-make-a-beautiful-project-5fi4</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;30 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>useNavigate tutorial React JS</title>
      <author>Saleh-Mubashar</author>
      <pubDate>Thu, 28 Oct 2021 06:27:53 +0000</pubDate>
      <link>https://dev.to/salehmubashar/usenavigate-tutorial-react-js-aop</link>
      <guid>https://dev.to/salehmubashar/usenavigate-tutorial-react-js-aop</guid>
      <description>&lt;p&gt;Hi guys !.&lt;/p&gt;

&lt;p&gt;In this post we will learn how to use the useNavigate hook in React JS. useNavigate is part of React Router and has replaced useHistory, although it is similar to useHistory, but with more useful features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useNavigate&lt;/strong&gt; is a new hook introduced in React Router v6 and it is extremely useful and easy to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uses"&gt;
  &lt;/a&gt;
  Uses:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the previous or next pages&lt;/li&gt;
&lt;li&gt;Redirect user to a specific Url&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, lets start !&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h2&gt;

&lt;p&gt;Install React Router as useNavigate is part of the react router dom package. Install using the following 2 commands:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : useNavigate is only available in React Router Dom v6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;npm install --save history&lt;/code&gt;&lt;br&gt;
and&lt;br&gt;
&lt;code&gt;npm install react-router@next react-router&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h2&gt;

&lt;p&gt;Import &lt;strong&gt;useNavigate&lt;/strong&gt; from React Router using the following code. This line of code can be added in any react class or function (however we are using a functional component in this example).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h2&gt;

&lt;p&gt;Now we will assign the useNavigate() function to a variable for ease of use. Add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h2&gt;

&lt;p&gt;Now you can use the variable name anywhere to navigate to a page, previous page or next page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1:
&lt;/h4&gt;

&lt;p&gt;Redirect user to another page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, the navigate('/home') is used to redirect the user on button click.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2:
&lt;/h4&gt;

&lt;p&gt;In this example, we will see how to redirect to previous page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example-3"&gt;
  &lt;/a&gt;
  Example 3:
&lt;/h4&gt;

&lt;p&gt;In this example, we will see how to redirect user to the next page (in history)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above two examples, -1 is used to go to the previous page while 1 is used to go to the next page.&lt;/p&gt;




&lt;p&gt;And there you go Thanks for reading.&lt;br&gt;
Have a good day!&lt;br&gt;
Bye&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Nebula Explorer: A Tool to Visualize Graph Data Easily</title>
      <author>lisahui</author>
      <pubDate>Thu, 28 Oct 2021 06:11:10 +0000</pubDate>
      <link>https://dev.to/lisahui/nebula-explorer-a-tool-to-visualize-graph-data-easily-1761</link>
      <guid>https://dev.to/lisahui/nebula-explorer-a-tool-to-visualize-graph-data-easily-1761</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqOqZrpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139035653-d03f7c75-f6b2-47eb-ac55-a32351c6429d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqOqZrpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139035653-d03f7c75-f6b2-47eb-ac55-a32351c6429d.jpg" alt="Nebula Explorer" width="880" height="375"&gt;&lt;/a&gt;&lt;br&gt;
Nebula Explorer is a visualization tool of the Nebula Graph ecosystem. With it, you can easily access Nebula Graph, and then query and retrieve graph data via GUI without having to learn nGQL. It can display graph data as a graph on a canvas for you to visually analyze data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-graph-data"&gt;
  &lt;/a&gt;
  Querying Graph Data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8je8x-pL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139034825-447c58a9-27d8-40fa-84ec-31cb0a018a95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8je8x-pL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139034825-447c58a9-27d8-40fa-84ec-31cb0a018a95.png" alt="Querying Graph Data" width="612" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nebula Explorer provides various methods for querying graph data. For example, you can specify a VID list or tags (with their indexes) to query vertices, or specify one or more VIDs to query a subgraph. When the queried vertices are retrieved, you can select one or more for further exploration. For example, you can query for the shared neighbors and the related paths of each pair of vertices. Through progressive queries, you can improve and enrich the data on the canvas for further graph analysis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4WMZEpDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139036362-29b7520c-6e59-46b1-8d6a-a9802cadc511.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WMZEpDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139036362-29b7520c-6e59-46b1-8d6a-a9802cadc511.png" alt="Querying Graph Data" width="612" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#displaying-graph-data"&gt;
  &lt;/a&gt;
  Displaying Graph Data
&lt;/h2&gt;

&lt;p&gt;When the graph data is retrieved, you can manipulate it on the canvas flexibly, including drag-and-drop, zoom-in or zoom-out, click-and-drag, and marking vertices with colors or icons. Nebula Explorer enables you to have fun with the graph data model by providing various features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LcssoIUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139036868-adcac1fe-8b97-4acb-8e69-25af5a936ace.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LcssoIUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139036868-adcac1fe-8b97-4acb-8e69-25af5a936ace.png" alt="Displaying Graph Data" width="612" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap
&lt;/h2&gt;

&lt;p&gt;Besides querying and exploring data, Nebula Explorer will support graph computing in the future, which will enable the Nebula Graph users to use appropriate methods to query and analyze graph data in various business scenarios.&lt;/p&gt;

&lt;p&gt;Currently, Nebula Explorer is only available for Enterprise users. If you are interested, please send an email with “Require Dashboard” as the subject to &lt;a href="mailto:inquiry@vesoft.com"&gt;inquiry@vesoft.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>database</category>
      <category>opensource</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to perform non updating upserts in Prisma</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 28 Oct 2021 06:05:35 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-to-perform-non-updating-upserts-in-prisma-4e3a</link>
      <guid>https://dev.to/dailydevtips1/how-to-perform-non-updating-upserts-in-prisma-4e3a</guid>
      <description>&lt;p&gt;In our example yesterday, we are &lt;a href="https://daily-dev-tips.com/posts/nextjs-posting-data-to-postgres-through-prisma/"&gt;pushing specific playlists to our database&lt;/a&gt;. However, if we add a playlist twice, we will see that the URI is not unique and exists already.&lt;/p&gt;

&lt;p&gt;There are several ways to go about this.&lt;br&gt;
And for this example, I want to look at doing a non-updating upsert.&lt;/p&gt;

&lt;p&gt;This means we check if the URI already exists. If this is the case, we perform an update.&lt;br&gt;
If it doesn't exist, we perform the creation.&lt;/p&gt;

&lt;p&gt;The small caveat here is that we push an empty update object.&lt;/p&gt;

&lt;p&gt;This will result in the API returning the old existing object without updating it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#upsert-in-prisma"&gt;
  &lt;/a&gt;
  Upsert in Prisma
&lt;/h2&gt;

&lt;p&gt;To perform an upsert in Prisma, you can use the &lt;code&gt;upsert&lt;/code&gt; command.&lt;br&gt;
It takes a where a query that should query on a unique field.&lt;/p&gt;

&lt;p&gt;Then it comes with both the update and create functions like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;playlistItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you go. This gives us a super good way only to create this if it doesn't exist functionality.&lt;/p&gt;

&lt;p&gt;You can find the complete example based on the Spotify database on &lt;a href="https://github.com/rebelchris/next-spotify-login/tree/upsert-data"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>database</category>
    </item>
    <item>
      <title>Simple Script To Send Emails In Python</title>
      <author>All About Python</author>
      <pubDate>Thu, 28 Oct 2021 06:02:57 +0000</pubDate>
      <link>https://dev.to/visheshdvivedi/simple-script-to-send-emails-in-python-11ee</link>
      <guid>https://dev.to/visheshdvivedi/simple-script-to-send-emails-in-python-11ee</guid>
      <description>&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-NlhES-ojmpE/YR1NQnS04KI/AAAAAAAAAeA/S22tLiOAdaMIEjtTZhQ-Pxw15cTZ9_JKQCLcBGAsYHQ/s1280/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2BEmails.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btq-B0oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-NlhES-ojmpE/YR1NQnS04KI/AAAAAAAAAeA/S22tLiOAdaMIEjtTZhQ-Pxw15cTZ9_JKQCLcBGAsYHQ/w640-h358/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252BEmails.png" alt="Simple Script To Send Emails In Python -&amp;lt;br&amp;gt;
Emails" title="Simple Script To Send Emails In Python - Emails" width="640" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Email"&gt;Emails&lt;/a&gt; are, nowadays, a common way of formal communication, which is also good for the transfer of files easily from person to person. Almost every person who has some identity over the internet, or simply uses it, has an email ID of his own, be it &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;outlook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now of all the awesome stuff that can be done in python, one of those is to be able to send or receive &lt;a href="https://en.wikipedia.org/wiki/Email"&gt;emails&lt;/a&gt;. Python programming&lt;br&gt;
libraries can be used to send mails or to list all the mails within your email account. You can also perform some basic actions, like marking the mail as read, using python.&lt;/p&gt;

&lt;p&gt;And in this blog, I am gonna show you, how you can do this yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About Mail Servers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-alQJy_Z_noE/YR1NmQV9u_I/AAAAAAAAAeI/fQ1lEWQGBB0tapeGv5XBTTOx8-1PeBuDgCLcBGAsYHQ/s2997/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2BSMTP%2Band%2BIMAP%2BMail%2BServers.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYjrctLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-alQJy_Z_noE/YR1NmQV9u_I/AAAAAAAAAeI/fQ1lEWQGBB0tapeGv5XBTTOx8-1PeBuDgCLcBGAsYHQ/w640-h224/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252BSMTP%252Band%252BIMAP%252BMail%252BServers.jpg" alt="Simple Script To Send Emails In Python - SMTP and IMAP Mail&amp;lt;br&amp;gt;
Servers" title="Simple Script To Send Emails In Python - SMTP and IMAP Mail Servers" width="640" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we start with the coding part, you need to have some basic&lt;br&gt;
information about mails and mail servers.&lt;/p&gt;

&lt;p&gt;Mail servers are basically servers that are used to manage &lt;a href="https://en.wikipedia.org/wiki/Email"&gt;emails&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt;, Yahoo, Hotmail, etc. have their own mail servers that manage their mail services. Mail servers can further be classified into two categories;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SMTP Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SMTP stands for &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;Simple Mail Transfer Protocol&lt;/a&gt;.This server is responsible for sending or transferring mail from server to server i.e. whenever you send a mail to someone, you typically make use of the SMTP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMAP Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IMAP stands for &lt;a href="https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol"&gt;Internet Message Access Protocol&lt;/a&gt;.This server is responsible for storing and listing mails from your server i.e. whenever you open your &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt;, you typically make use of the IMAP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSL and TLS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two types of encryption protocols used for&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Email"&gt;emails&lt;/a&gt;, SSL (&lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0"&gt;Secure Socket Layer&lt;/a&gt;) and TLS (&lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;Transport Layer Security&lt;/a&gt;).&lt;br&gt;
Whenever you will connect to any mail server, you will connect through one of these protocols. Each protocol has its port assigned to the server.&lt;/p&gt;

&lt;p&gt;TLS - port 587&lt;br&gt;
SSL - port 465&lt;/p&gt;

&lt;p&gt;Although &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt; server support both these protocols, we are gonna use only TLS protocol in this post for simplicity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sending Mails using Python&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-lkyurw5VAtI/YR1OAnZAUaI/AAAAAAAAAeQ/xbT0ZOWMRNIDmzKLnDOs_dvsuakk7G_KACLcBGAsYHQ/s1280/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2BSending%2Bmails%2Busing%2Bpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kw5lRiLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-lkyurw5VAtI/YR1OAnZAUaI/AAAAAAAAAeQ/xbT0ZOWMRNIDmzKLnDOs_dvsuakk7G_KACLcBGAsYHQ/w640-h432/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252BSending%252Bmails%252Busing%252Bpython.png" alt="Simple Script To Send Emails In Python - sending mails using&amp;lt;br&amp;gt;
python" title="Simple Script To Send Emails In Python - sending mails using python" width="640" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we are clear about mail servers, let's create our first script to send mail using python&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing the library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-eeDjAGu_aLA/YR1OWkDQwxI/AAAAAAAAAeY/wo06MeFGVRgWl3OiRFFy3239_XEkmz7OgCLcBGAsYHQ/s2048/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bpython%2Blibrary%2Bto%2Bsend%2Bmails.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rwEIhty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-eeDjAGu_aLA/YR1OWkDQwxI/AAAAAAAAAeY/wo06MeFGVRgWl3OiRFFy3239_XEkmz7OgCLcBGAsYHQ/w640-h426/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bpython%252Blibrary%252Bto%252Bsend%252Bmails.jpg" alt="Simple Script To Send Emails In Python - python library to send&amp;lt;br&amp;gt;
mails" title="Simple Script To Send Emails In Python - python library to send mails" width="640" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using the smtplib library of python to send &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt; mail. This library comes built-in in python, so you don't need to download it from elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here's how the script would look like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-uHUX2Nso6uQ/YR1OxolUNqI/AAAAAAAAAeg/DRGyTX_tZjEaH6XIUj5f0AXftEiu3lMzwCLcBGAsYHQ/s1366/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bpython%2Bscript%2Bto%2Bsend%2Bmails.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0huRJzp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-uHUX2Nso6uQ/YR1OxolUNqI/AAAAAAAAAeg/DRGyTX_tZjEaH6XIUj5f0AXftEiu3lMzwCLcBGAsYHQ/w640-h342/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bpython%252Bscript%252Bto%252Bsend%252Bmails.PNG" alt="Simple Script To Send Emails In Python - python script to send&amp;lt;br&amp;gt;
mails" title="Simple Script To Send Emails In Python - python script to send mails" width="640" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The script may look complicated, but we will go line-by-line to discuss each function and class of the script and understand its use&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-z-rc47TPTEQ/YR1PQRCKI7I/AAAAAAAAAeo/oVF72gI7pvwPB4ERR23uN8TSpmqs0fV3wCLcBGAsYHQ/s152/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bimport%2Blibraries.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmyJFa5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-z-rc47TPTEQ/YR1PQRCKI7I/AAAAAAAAAeo/oVF72gI7pvwPB4ERR23uN8TSpmqs0fV3wCLcBGAsYHQ/w400-h124/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bimport%252Blibraries.png" alt="Simple python script to send emails - import&amp;lt;br&amp;gt;
libraries" title="Simple python script to send emails - import libraries" width="152" height="47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The script starts with importing smtplib and getpass library. We are using the getpass library so that we can retrieve the password from the&lt;br&gt;
user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-wDGAtsEE83s/YR1Q8BOJQnI/AAAAAAAAAew/KQnYH71cEcEZy7RAVeQtFhQ8NzL6XHocACLcBGAsYHQ/s403/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bemail%2Band%2Bpassword.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UF6LXdYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-wDGAtsEE83s/YR1Q8BOJQnI/AAAAAAAAAew/KQnYH71cEcEZy7RAVeQtFhQ8NzL6XHocACLcBGAsYHQ/w400-h84/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bemail%252Band%252Bpassword.PNG" alt="simple script to send emails in python - email and&amp;lt;br&amp;gt;
password" title="simple script to send emails in python - email and password" width="400" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, we ask the user to enter the credentials for their mail account, which will be used to send the mail. We use getpass to ask the user for the password. Since we are using getpass, the password that the user will enter will not be displayed on the screen but will be saved within the variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/--nIYKydzfNo/YR1RNf-1UKI/AAAAAAAAAe4/LAX8PHAS4Gkmd9wrcu40gA2g0i-dlq8DgCLcBGAsYHQ/s434/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bset%2Bhost%2Band%2Bport.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ARt9-uq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/--nIYKydzfNo/YR1RNf-1UKI/AAAAAAAAAe4/LAX8PHAS4Gkmd9wrcu40gA2g0i-dlq8DgCLcBGAsYHQ/w400-h194/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bset%252Bhost%252Band%252Bport.PNG" alt="simple script to send emails in python - set host and&amp;lt;br&amp;gt;
port" title="simple script to send emails in python - set host and port" width="400" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step, we set up the SMTP server host and port to be used. If the entered email ID is a &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; account, the host will be set to &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; SMTP server, or else if it is &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt;, the ost&lt;br&gt;
will be set to &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt; SMTP server.&lt;br&gt;
We set the port to 587 as we had discussed above within the 'SSL and TLS heading. In case if the entered email ID cannot be identified as &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Gmail&lt;/a&gt; or&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook"&gt;Outlook&lt;/a&gt;, the script will give an error message and exit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-cUFEIlwJ1yM/YR1RXHQteoI/AAAAAAAAAe8/S_Q-rUbNlAE4Llw-Pd9gMuPfMJJ4GPnWQCLcBGAsYHQ/s461/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bsmtplib.SMTP%2Bclass%2Bobject.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2csAON1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-cUFEIlwJ1yM/YR1RXHQteoI/AAAAAAAAAe8/S_Q-rUbNlAE4Llw-Pd9gMuPfMJJ4GPnWQCLcBGAsYHQ/w400-h139/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bsmtplib.SMTP%252Bclass%252Bobject.PNG" alt="simple script to send emails in python - smtplib.SMTP class&amp;lt;br&amp;gt;
object" title="simple script to send emails in python - smtplib.SMTP class object" width="400" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step, we will create the SMTP class object, which will be used to perform the actions. We create an object of smtplib.SMTP class and save the object by the name 'server'. The class object requires two parameters, the hostname, and the port. &lt;/p&gt;

&lt;p&gt;Once we have created the object, we call the ehlo() function of the class object, which is basically used to send a greeting message to the mail server. This step is crucial, as not performing this step may cause problems in communicating with the mail server. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-QAltlFCcouA/YR1Rf9sAzmI/AAAAAAAAAfE/Yvr9_HpdvDsV6sc37BErPvIo9P6SgJk5QCLcBGAsYHQ/s537/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bstart%2Btls%2Bencryption.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AydXFO9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-QAltlFCcouA/YR1Rf9sAzmI/AAAAAAAAAfE/Yvr9_HpdvDsV6sc37BErPvIo9P6SgJk5QCLcBGAsYHQ/w400-h41/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bstart%252Btls%252Bencryption.png" alt="simple script to send emails in python - start tls&amp;lt;br&amp;gt;
encryption" title="simple script to send emails in python - start tls encryption" width="400" height="41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After receiving a successful response from the server, we call the starttls() function to start TLS encryption. This step is only required for TLS connection and not for SSL connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-o88SInWtQ6Q/YR1R4HZC88I/AAAAAAAAAfU/nEAcbcKHrzoRjv4qOHB-FNbkqiPMRB8aQCLcBGAsYHQ/s426/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Blogin%2Bto%2Bmail%2Bserver.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_BzRV-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-o88SInWtQ6Q/YR1R4HZC88I/AAAAAAAAAfU/nEAcbcKHrzoRjv4qOHB-FNbkqiPMRB8aQCLcBGAsYHQ/w400-h153/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Blogin%252Bto%252Bmail%252Bserver.PNG" alt="simple script to send emails in python - login to mail&amp;lt;br&amp;gt;
server" title="simple script to send emails in python - login to mail server" width="400" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, we call the login() function to log in to the mail account. The function requires two parameters, the email ID and the password, which we had retrieved from the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-E0rbx8h68ME/YR1R_gXFJTI/AAAAAAAAAfc/ASO4-kqbgCs0EaiAzU0HQGZS9iUK_umsACLcBGAsYHQ/s458/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bget%2Bemail%2Bcontent.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zKv6jjDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-E0rbx8h68ME/YR1R_gXFJTI/AAAAAAAAAfc/ASO4-kqbgCs0EaiAzU0HQGZS9iUK_umsACLcBGAsYHQ/w400-h106/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bget%252Bemail%252Bcontent.PNG" alt="simple script to send emails in python - get email content from user" title="simple script to send emails in python - get email content from user" width="400" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have successfully logged in, we ask the user for the receiver's email ID, mail's subject, and mail body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-eytSNF_SFSs/YR1SHvioJfI/AAAAAAAAAfg/I1r1aQfn-SMukMEHE9V36aZY_yrOU8eEwCLcBGAsYHQ/s495/Simple%2BScript%2BTo%2BSend%2BEmails%2BIn%2BPython%2B-%2Bsend%2Bmail.PNG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50GdDDEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-eytSNF_SFSs/YR1SHvioJfI/AAAAAAAAAfg/I1r1aQfn-SMukMEHE9V36aZY_yrOU8eEwCLcBGAsYHQ/w400-h125/Simple%252BScript%252BTo%252BSend%252BEmails%252BIn%252BPython%252B-%252Bsend%252Bmail.PNG" alt="simple script to send emails in python - sendmail&amp;lt;br&amp;gt;
function" title="simple script to send emails in python - sendmail function" width="400" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally, we call the sendmail() function and pass three parameters, sender mail ID, receiver mail ID, and the mail body (created by merging mail subject and mail content).&lt;/p&gt;

&lt;p&gt;Here is the full code &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import smtplib
import getpass

# Get email ID and password from user
email = input("Enter email ID: ")
password = getpass.getpass("Enter password: ")

# Set SMTP host and port
if "gmail" in email:
    host = "smtp.gmail.com"
    port = 587
elif "outlook" in email:
    host = "smtp-mail.outlook.com"
    port = 587
else:
    print("Invalid email ID, please try again")
    exit(0)

# Create SMTPLib object and contact server
server = smtplib.SMTP(host, port)
check = server.ehlo()
if check[0] == 250:
    print("Successfully contacted mail server")
else:
    print("Unable to contact server")
    exit(0)

# Start TLS encryption (only to be done if conencting to port 587 i.e. TLS)
server.starttls()

# Logging into the server
try:
    server.login(email, password)
    print("Login successful")
except smtplib.SMTPAuthenticationError as ex:     
    print("Exception:", ex)    
    exit(0)

# Get email details from user
sender_mail = email
receiver_email = input("Enter receiver's email: ")
subject = input("Enter email subject: ")
content = input("Enter email content: ")

# Create email body by merging emails object and content
body = "Subject: " + subject + '\n' + content

# Send the mail
output = server.sendmail(sender_mail, receiver_email, body)
if not len(output):
    print("Send mail successfully")
else:
    print("Unable to send mail, please try again")    
    exit(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And that's it, you have successfully sent a mail through python&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog, I have only covered sending mail through python. I will soon create another blog that will deal with accessing email from accounts by contacting the IMAP servers using python.&lt;/p&gt;

&lt;p&gt;Hope you liked this blog&lt;/p&gt;

&lt;p&gt;Stay safe, stay blessed, and thanks for reading.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Checklist for securing the usage of AWS account from unexpected events</title>
      <author>Igor Soroka</author>
      <pubDate>Thu, 28 Oct 2021 05:45:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/checklist-for-securing-the-usage-of-aws-account-from-unexpected-events-48e</link>
      <guid>https://dev.to/aws-builders/checklist-for-securing-the-usage-of-aws-account-from-unexpected-events-48e</guid>
      <description>&lt;p&gt;Last month I got the bill of 60 USD dollars for the usage of the AWS account. It was too much for my small experiments and blogs articles. That is why I decided to write this checklist about securing your account and making the expenses manageable for your account. As a bonus, I made a CDK project for deploying the billing alarm in the last chapter of this article.&lt;/p&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add MFA&lt;/li&gt;
&lt;li&gt;Create admin user&lt;/li&gt;
&lt;li&gt;Renew CLI access credentials &lt;/li&gt;
&lt;li&gt;Double-check all regions for resources&lt;/li&gt;
&lt;li&gt;Setup billing alert (cdk project in this guide)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-mfa-on-root-user"&gt;
  &lt;/a&gt;
  Add MFA on root user
&lt;/h3&gt;

&lt;p&gt;Passwords are already not helping with account protection. So, having one more authentication method will prevent it from being hacked. My preferred way is to use 1Password. It has built-in support for one-time codes. I found it handy when once a phone has stayed at home during my day in coworking. The 1Password application was running on my laptop with the MFA connected to the AWS account. It saved my day. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separate-user-with-administratoraccess"&gt;
  &lt;/a&gt;
  Separate user with AdministratorAccess
&lt;/h3&gt;

&lt;p&gt;There is a temptation to skip tedious user setup on a freshly created AWS account. The one wants to start using the cloud as fast as possible. I was in that situation. However, it is considered a bad practice to manage the resources from the root user. &lt;/p&gt;

&lt;p&gt;If a hacker gets account access, it will be a real issue. Somebody will have the ability to mine cryptocurrency with the EC2 instances. So, to avoid this issue - create a separate user with Console and programmatic access who has the AdministratorAccess role. Do not forget to add MFA to this account also.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#renew-programmatic-access"&gt;
  &lt;/a&gt;
  Re-new programmatic access
&lt;/h3&gt;

&lt;p&gt;I had credentials for CLI access created more than 365 days ago. It is a security risk also. The main idea here is to refresh them not tomorrow but today. Also, do not expose access key ID and secret access key, especially when committing to GitHub. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#doublecheck-all-regions-for-resources"&gt;
  &lt;/a&gt;
  Double-check all regions for resources
&lt;/h3&gt;

&lt;p&gt;There can be a situation when some costs are always in the bill. It means that something is still eating the budget. The most dangerous AWS services in terms of costs are VPC, ECS, and EC2. These have a pay-as-you-go model. &lt;/p&gt;

&lt;p&gt;It means that every instance of EC2 has billing in seconds. Another trick is that the ECS cluster with Fargate services running will have costs.  For example, it is a Java Spring app with logging every second. Fargate is a serverless way of running containers, which does not have a hefty invoice at the end of the month. Logging will require spinning up the service over and over again to infinity. That is what happened to me when I got the bill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-a-billing-alert"&gt;
  &lt;/a&gt;
  Setup a billing alert
&lt;/h3&gt;

&lt;p&gt;Billing issues are the motivation for this article, as one could guess. That is why I am suggesting setting up a billing alarm. It will send the notification to the email when the threshold crosses the desired amount in USD. For my case, I took 5 dollars. &lt;/p&gt;

&lt;p&gt;I have created a small CDK project for that. One could find it on GitHub &lt;a href="https://github.com/grenguar/cdk-billing-alert"&gt;here&lt;/a&gt;. What are we doing here? The billing alarm will have a metric for the &lt;code&gt;EstimatedCharges&lt;/code&gt;. It will notify SNS topic with an email subscription. The best part of this is that the project is entirely serverless. It will cost you nothing for the timebeing.&lt;/p&gt;

&lt;p&gt;There are several steps to achieve a calm mind regarding your expenses in the cloud:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set email with SSM, like:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ssm put-parameter &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="s2"&gt;"/billing/email"&lt;/span&gt; &lt;span class="nt"&gt;--type&lt;/span&gt; &lt;span class="s2"&gt;"String"&lt;/span&gt; &lt;span class="nt"&gt;--value&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;your email&amp;gt;"&lt;/span&gt; &lt;span class="nt"&gt;--profile&lt;/span&gt; &amp;lt;&lt;span class="k"&gt;if &lt;/span&gt;you are using it&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Clone the repo and install dependencies (in Linux/macOS case)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/Grenguar/cdk-billing-alert.git
&lt;span class="nb"&gt;cd &lt;/span&gt;cdk-billing-alert
&lt;span class="nb"&gt;cd &lt;/span&gt;infra
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;If you want to change the threshold, do it in the &lt;code&gt;infra/bin/infra.ts&lt;/code&gt; file. There is a parameter called &lt;code&gt;monetaryLimit&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Do the deployment:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx cdk deploy &lt;span class="nt"&gt;--profile&lt;/span&gt; &amp;lt;&lt;span class="k"&gt;if &lt;/span&gt;you are using it&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the result in the CloudWatch -&amp;gt; Alarms -&amp;gt; All alarms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hNtZs62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t4e5beibf05bs4sz2pz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hNtZs62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t4e5beibf05bs4sz2pz.png" alt="Billing alert demo" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Of course, these actions are not giving 100% protection from hackers or unexpected bills. However, the chance of getting strange news from AWS about your cloud resources decreases with every completed point from this checklist. Do you have any actions of improving the security and stabilizing your bill with AWS? &lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Steps to Follow during Mobile App Development to Leverage Profits for Your Venture
</title>
      <author>Vrinsoft Pty Ltd</author>
      <pubDate>Thu, 28 Oct 2021 05:20:09 +0000</pubDate>
      <link>https://dev.to/vrinsoftaustralia/steps-to-follow-during-mobile-app-development-to-leverage-profits-for-your-venture-4c82</link>
      <guid>https://dev.to/vrinsoftaustralia/steps-to-follow-during-mobile-app-development-to-leverage-profits-for-your-venture-4c82</guid>
      <description>&lt;p&gt;As per recent statistical reports, the number of mobile apps will become 258.2 billion by the close of 2022. This makes it obvious thus that the same has the capability to increase the value of profits for an entrepreneurial venture.&lt;/p&gt;

&lt;p&gt;Additionally, AppsFlyer conducted a survey. This revealed that approximately eighty percent app users usually stop using them within three months itself.&lt;/p&gt;

&lt;p&gt;Have a look at this pie chart below to get a glimpse into the total number of apps with very less downloads and apps that possess over a million downloads.&lt;/p&gt;

&lt;p&gt;This chart makes it quite clear that though the industry is flourishing, many apps fail to receive the same amount of appreciation from the end-customers. This makes it necessary to keep some important points strictly in mind so that you can successfully attract more patrons towards your entrepreneurial venture.&lt;/p&gt;

&lt;p&gt;Also, look at the graph below to take a glance through the number of apps on the different platforms like Android, iOS, etc.&lt;/p&gt;

&lt;p&gt;Getting Project Outsourced to Right &lt;a href="https://www.vrinsoft.com.au/mobile-app-development/"&gt;&lt;strong&gt;Mobile App Development Company&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
There are miscellaneous types of apps that you usually find on the Google Play Store and the iOS App Store. This includes educational apps, ecommerce apps, dating apps and financial apps, to name a few. However, not all companies specialize in building applications across these domains listed above. It is therefore advisable to expatriate your project to a company holding strong expertise and knowledge in the field of &lt;a href="https://vrinsoftau.blogspot.com/2020/10/steps-to-follow-during-mobile-app-development-to-leverage-profits-for-your-venture.html"&gt;&lt;strong&gt;Mobile App Development in Melbourne&lt;/strong&gt;&lt;/a&gt;. This will aid you in locating the right team of developers committed towards taking your trade towards the next-gen level.&lt;/p&gt;

&lt;p&gt;Pay Attention to UI of App&lt;/p&gt;

&lt;p&gt;It is important to remember that the UI or User Interface is the face of your app mainly responsible for captivating the attention of users. You should hence pay proper attention on this area. This will help to gain their confidence towards your app and encourage them thereafter to use it. You should therefore focus upon the resolution, and finally add a gesture-based interface. This will be of assistance in retaining their interest towards your application.&lt;/p&gt;

&lt;p&gt;Look at this diagram below to get educated on the different components of UI/UX design.&lt;/p&gt;

&lt;p&gt;Looking through the figure above is enough to give you knowledge about the overall significance of this important element. You should thus focus on this area in a stringent way.&lt;br&gt;
Build an App that Can Work on Miscellaneous Platforms&lt;br&gt;
You need to build an app that can work across miscellaneous platforms like Android, iOS, and Windows. This is due to the volume of mobile app users growing at a rapid scale every single day. You can thus consider using the SEMrush tool. This will help you examine the app of your competitor and analyze the performance of your app. In addition, you also shall be educated on the Operating System currently used by consumers that at the end will act as a boost for you to get a list of features committed to leverage the revenues through the application built by you.&lt;br&gt;
Include Features Enough to Preserve the Essence of Your App&lt;br&gt;
App users take no time to uninstall an app that has too many features in it. You should therefore try to identify those attributes that will aid to preserve its essence. You also need to locate those characteristics that if added in the application would aid it to stand out and attract the attention of users towards it and prevent them from deleting or uninstalling it.&lt;/p&gt;

&lt;p&gt;In addition to the steps given above, you should also analyze if customers actually are in need of the app or not, alongside examining the overall cost you need to incur for development and testing the app meticulously.&lt;/p&gt;

&lt;p&gt;All these will aid the creation of a solution that guarantees to bring competitive edge for your business, attract maximum customers towards it and drive the value of revenues for you.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>react</category>
      <category>devops</category>
      <category>android</category>
    </item>
    <item>
      <title>What is Embedded Linux?</title>
      <author>Devesh Tiwari</author>
      <pubDate>Thu, 28 Oct 2021 04:38:23 +0000</pubDate>
      <link>https://dev.to/deveshtiwari/what-is-embedded-linux-5amh</link>
      <guid>https://dev.to/deveshtiwari/what-is-embedded-linux-5amh</guid>
      <description>&lt;p&gt;The demand for faster, efficient, and high-performing computers is increasing, the dimensions of the form factors that carry them forward decrease.&lt;/p&gt;

&lt;p&gt;These days, the IT industry and engineers are constantly working on challenging tasks to consolidate more powerful computers into and onto considerable smaller chassis and printed circuit boards; To fulfil the growing demand for more reliable, smaller, robust, energy-efficient, and cost-effective computer systems.&lt;/p&gt;

&lt;p&gt;It is why we see the more innovative and lesser size, weight, power, and cost consuming systems every time in the embedded computer system market.&lt;/p&gt;

&lt;p&gt;Let's dive into this very world.&lt;/p&gt;

&lt;p&gt;Linux systems help to make embedded systems more efficient and effective.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://externlabs.com/blogs/what-is-embedded-linux/"&gt;Embedded Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linux is like any other operating system, including Windows, iOS, or Android; Linux can include graphical UIs, fully functional desktop apps like other operating systems. You might not know, but Linux is the second choice right after Windows for desktop pcs.&lt;/p&gt;

&lt;p&gt;Linux is way more valuable than an operating system because of its open-source availability. Source codes of Linux and other components are available online and free to use; Anyone can freely view them and make adjustments to the codes to use in their ways.&lt;/p&gt;

&lt;p&gt;Embedded Linux can be explained as a Linux operating system or kernel designed for embedded systems and devices. Embedded Linux uses the same kernel, but it can differ from other regular operating systems. Linux can be efficiently designed for any sized embedded system minimal than others, thus taking less processing power and energy with all necessary features and functionalities. &lt;/p&gt;

&lt;p&gt;You might know or not, but you are already using Linux in one way or another. Linux is being used in many types of devices as software. Let's take a general example; the Android OS from Google Inc. is based on Linux and a kind of Embedded Linux designed for mobile devices. Smart TV, iPads, car navigation systems are other examples of Embedded Linux. Some examples of small size embedded Linux systems:&lt;/p&gt;

&lt;p&gt;ETLinux: A complete Linux distribution designed to run on small industrial computers.&lt;br&gt;
LEM: A small (&amp;lt;8 MB) multi-user, networked Linux version that runs on 386s.&lt;br&gt;
LOAF: "Linux On A Floppy" distribution that runs on 386s.&lt;br&gt;
uClinux: Linux for systems without MMUs.&lt;br&gt;
uLinux: Tiny Linux distribution that runs on 386s.&lt;br&gt;
ThinLinux: Primarily for camera servers, X-10 controllers, MP3 players&lt;/p&gt;

&lt;p&gt;Advantages of Embedded Linux&lt;/p&gt;

&lt;p&gt;As you read in this article, Linux is being used in many different places, and embedded Linux is a part of every other electronic we use; Which proves that embedded Linux has something great to offer. Embedded Linux is compact than other operating systems and provides the same functionalities and requirements for embedded components. Some common Embedded Linux advantages are-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free to Use&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;Low development cost and time&lt;/li&gt;
&lt;li&gt;Wider support for development&lt;/li&gt;
&lt;li&gt;Highly Flexible &amp;amp; Customizable &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Addition, Most Developers use Linux for their regular uses that making it familiar to work with.&lt;/p&gt;

&lt;p&gt;The Embedded system industry is foreseen to grow swiftly and driven by potential tech developments include virtual reality, augmented reality, artificial intelligence, deep learning, machine learning, and IoT. Embedded Linux will be the main component of these upcoming technologies to make them more efficient and accurate. We already are using embedded systems with Linux and the future is ready for more.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>About Git #03</title>
      <author>Chathu Rashmini</author>
      <pubDate>Thu, 28 Oct 2021 04:21:55 +0000</pubDate>
      <link>https://dev.to/chathurashmini/about-git-03-3in7</link>
      <guid>https://dev.to/chathurashmini/about-git-03-3in7</guid>
      <description>&lt;p&gt;In this tutorial we are touching some more commands and aspects about Git.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#short-status"&gt;
  &lt;/a&gt;
  Short status
&lt;/h1&gt;

&lt;p&gt;Let's modify a file in your directory.&lt;br&gt;
&lt;code&gt;echo hey &amp;gt;&amp;gt; file1.txt&lt;/code&gt;&lt;br&gt;
When you run &lt;code&gt;git status&lt;/code&gt; it gives quiet a lot of information. But you can have summary status by simply using the command,&lt;br&gt;
&lt;code&gt;git status -s&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwOh1B9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/7_gitStatus-S.PNG%3Ftoken%3DAPOCKO5HWG744YXRUKO3F4LBPIQIO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwOh1B9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/7_gitStatus-S.PNG%3Ftoken%3DAPOCKO5HWG744YXRUKO3F4LBPIQIO" alt="7_gitStatus-S" width="235" height="52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the above screen shot we have a red 'M' as we have done modifications which have yet not in the staging area.&lt;br&gt;
Let's add file1 to the staging area and get the git status.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6gHFl7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/8_gitStatus-S.PNG%3Ftoken%3DAPOCKOYXEE3J3CQRAUHG3ODBPIQJ2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6gHFl7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/8_gitStatus-S.PNG%3Ftoken%3DAPOCKOYXEE3J3CQRAUHG3ODBPIQJ2" alt="8_gitStatus-S.PNG" width="334" height="50"&gt;&lt;/a&gt;&lt;br&gt;
Now you can see the green 'M'.&lt;br&gt;
Now let's change file1 again and get the status.&lt;br&gt;
&lt;code&gt;echo there &amp;gt;&amp;gt; file1.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git status -s&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyxMKJM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/9_gitStatus-S.PNG%3Ftoken%3DAPOCKO2LYEJAFRNG6N7H7XTBPIQMG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyxMKJM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/9_gitStatus-S.PNG%3Ftoken%3DAPOCKO2LYEJAFRNG6N7H7XTBPIQMG" alt="9_gitStatus-S.PNG" width="438" height="56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can see a green 'M' in left for the changes in the staging area which we have not yet committed, and a red 'M' in right for the changes we have not yet added to the staging area.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#staged-and-unstaged-changes"&gt;
  &lt;/a&gt;
  Staged and un-staged changes
&lt;/h1&gt;

&lt;p&gt;To check what we have in the staging area you can use the command,&lt;br&gt;
&lt;code&gt;git diff --staged&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FbWDawOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/10_gitDifStaged.PNG%3Ftoken%3DAPOCKOYHSQ2UNPPMFRQPER3BPIQNO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FbWDawOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/10_gitDifStaged.PNG%3Ftoken%3DAPOCKOYHSQ2UNPPMFRQPER3BPIQNO" alt="10_gitDifStaged" width="445" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output I got is shown in the above screen shot.&lt;br&gt;
Here we are comparing the a/fil1.txt with b/file1.txt. In other words, we are comparing two copies of file1.txt. The oldest copy is a/file1.txt. So the changes in the old copy is stated in a minus (-) sing while plus (+) sign indicates the changes of the new file. The 7th line gives us an idea on what parts of our code has changed. The part with minus sign as a prefix tells about the old copy. Hence according to my screen shot, in old copy starting from line 1, 3 lines have been extracted and shown in the terminal ( check the lines hello, world, and test in the terminal). In the new copy starting from line 1, 5 lines have been extracted. With lines hello, world, and test two more words hey and there have been added to the new copy. That is why they are green and has + as a prefix.&lt;/p&gt;

&lt;p&gt;Incase you want to see the changes in our working directory that are not staged yet, you can run the command &lt;code&gt;git diff&lt;/code&gt;.&lt;br&gt;
You can also use a diff tool like LDiff3, P4Merge, WinMerge, and VSCode to compare files. Here I am going to use VSCode as our default diff tool. So you have to set two configuration settings;&lt;br&gt;
&lt;code&gt;git config --global diff.tool vscode&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"&lt;/code&gt;&lt;br&gt;
Now check whether everything is done correctly by running the command &lt;code&gt;git config --global -e&lt;/code&gt; to edit the global configuration settings in the default editor.&lt;br&gt;
Now run the command &lt;code&gt;git difftool&lt;/code&gt; and as shown below you have to give 'Y' to open the VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LChRcoFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/11_DiffTool.PNG%3Ftoken%3DAPOCKO66FPB7L4W244VXAKLBPIQP2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LChRcoFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/11_DiffTool.PNG%3Ftoken%3DAPOCKO66FPB7L4W244VXAKLBPIQP2" alt="11_DiffTool" width="794" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When VSCode is open it will display two copies (old and new) of the file that we have changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-p5M5EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/12_DiffTool.PNG%3Ftoken%3DAPOCKO4VKXQXZLHVS5W2VVLBPIQQE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-p5M5EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/12_DiffTool.PNG%3Ftoken%3DAPOCKO4VKXQXZLHVS5W2VVLBPIQQE" alt="12_DiffTool.PNG" width="685" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it is much easier to check and compare the changes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#view-history"&gt;
  &lt;/a&gt;
  View History
&lt;/h1&gt;

&lt;p&gt;For us to view the history of our repository we can use the command &lt;code&gt;git log&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cRRIevd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/13_gitCommit.PNG%3Ftoken%3DAPOCKO367P6OU4TPKF3XQP3BPIPX6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cRRIevd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/13_gitCommit.PNG%3Ftoken%3DAPOCKO367P6OU4TPKF3XQP3BPIPX6" alt="13_gitCommit" width="730" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It displays our commits from latest to the earliest. Each commit has a unit identifier. And each commit segment displays its author, the date of commit, and your commit message. If you feels like this is too informative, you can only view commit id and message with the code &lt;code&gt;git log --oneline&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvQIRrxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/14_history01.PNG%3Ftoken%3DAPOCKO6SBFZZA3A76GZDELTBPIPZM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvQIRrxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/14_history01.PNG%3Ftoken%3DAPOCKO6SBFZZA3A76GZDELTBPIPZM" alt="14_history01" width="562" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also reverse the commit order and have the initial commit at top using the command, &lt;code&gt;git log --oneline --reverse&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#view-a-commit"&gt;
  &lt;/a&gt;
  View a commit
&lt;/h1&gt;

&lt;p&gt;To check what we have changed in a given commit we can use the command &lt;code&gt;show&lt;/code&gt; by specifying the commit you want. There are two ways to specify commits;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using its unique Id&lt;/li&gt;
&lt;li&gt;Using head pointer&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-using-commit-id"&gt;
  &lt;/a&gt;
  1. Using commit id
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git show 2d7eddb&lt;/code&gt;&lt;br&gt;
Here you need not to write complete id. You can specify first few characters of the id if there is no other id that starts with those same characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-using-head-pointer"&gt;
  &lt;/a&gt;
  2. Using head pointer
&lt;/h2&gt;

&lt;p&gt;By running the command &lt;code&gt;git log --oneline&lt;/code&gt; you can check where your head pointer is at the moment. Then to trace backward you should use the symbol &lt;strong&gt;'~'&lt;/strong&gt;. For example if you want to trace one commit back from the current head pointer, then the command should be,&lt;br&gt;
&lt;code&gt;git show HEAD~2&lt;/code&gt;&lt;br&gt;
If you set 1, that means you are referring the current head pointer. Incase you want to see all the files and directories in a commit you can use the command,&lt;br&gt;
&lt;code&gt;git ls-tree HEAD~2&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#unstaging-files"&gt;
  &lt;/a&gt;
  Unstaging Files
&lt;/h1&gt;

&lt;p&gt;How can you revert a commit that you have done? You should undo the add command. Hence you need to use the command,&lt;br&gt;
&lt;code&gt;git restore --staged fileName.extention&lt;/code&gt;&lt;br&gt;
Now file you have specified in the above command is now not in staging area.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#discarding-local-changes"&gt;
  &lt;/a&gt;
  Discarding Local Changes
&lt;/h1&gt;

&lt;p&gt;To discard local changes you can use a similar command like the one above,&lt;br&gt;
&lt;code&gt;git restore fileName.ext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you went through three tutorials about Git. So did you &lt;del&gt;Git&lt;/del&gt; get it??? 😉&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>About Git #02</title>
      <author>Chathu Rashmini</author>
      <pubDate>Thu, 28 Oct 2021 04:21:40 +0000</pubDate>
      <link>https://dev.to/chathurashmini/about-git-02-48ek</link>
      <guid>https://dev.to/chathurashmini/about-git-02-48ek</guid>
      <description>&lt;p&gt;In this tutorial we are going to cover the areas like Staging, Removing, Moving, and Ignoring Files with Git.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#staging-files"&gt;
  &lt;/a&gt;
  Staging Files
&lt;/h1&gt;

&lt;p&gt;Let's add two files to our directory.&lt;br&gt;
&lt;code&gt;echo hello &amp;gt; file1.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;echo hello &amp;gt; file2.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's check the status of the working directory and the staging area using the command &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
Then you will be able to see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPcYbVcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitStatus.PNG%3Ftoken%3DAPOCKO6PNBWQ37ZOYV3MMCDBPIOPQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPcYbVcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitStatus.PNG%3Ftoken%3DAPOCKO6PNBWQ37ZOYV3MMCDBPIOPQ" alt="gitStatus" width="871" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two files are indicated in red as they are not yet added to the staging area. To add them what you have to do is simply using one of the following commands.&lt;br&gt;
&lt;code&gt;git add file1.txt file2.txt&lt;/code&gt;&lt;br&gt;
Or&lt;br&gt;
&lt;code&gt;git add *.txt&lt;/code&gt; to add all the &lt;em&gt;text&lt;/em&gt; files available in the current directory.&lt;br&gt;
Or&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt; to add all the in the directory. But beware when using this command because there might be files which you need not to be added to the repository.&lt;br&gt;
Once again let's check the git status and if you have done your work correctly it should display like this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtXPd4zg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitStatus_Green.PNG%3Ftoken%3DAPOCKO335OR5GBPVNQAZEJLBPIO32" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtXPd4zg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitStatus_Green.PNG%3Ftoken%3DAPOCKO335OR5GBPVNQAZEJLBPIO32" alt="gitStatus_Green" width="581" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's modify out file1.txt.&lt;br&gt;
&lt;code&gt;echo world &amp;gt;&amp;gt; file1.txt&lt;/code&gt; and let's check the &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7LUD--F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitStatus_modified1.PNG%3Ftoken%3DAPOCKO3ZLBYILX4GN45OWV3BPIO42" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7LUD--F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitStatus_modified1.PNG%3Ftoken%3DAPOCKO3ZLBYILX4GN45OWV3BPIO42" alt="gitStatus_modified1" width="806" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the modified file in red color, as now the directory has the modified version of the file1 while staging area has the initial version of it. Hence you should once again add file1 to the staging area using &lt;code&gt;git add file1.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's commit our changes.&lt;br&gt;
&lt;code&gt;git commit -m "Initial Commit"&lt;/code&gt;&lt;br&gt;
Don't forget to add a meaningful commit message as it is a good habit. Now you should see something like this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XOkCocjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitCommit.PNG%3Ftoken%3DAPOCKO5QDI6M64SWWK7YRU3BPIO5S" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XOkCocjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/gitCommit.PNG%3Ftoken%3DAPOCKO5QDI6M64SWWK7YRU3BPIO5S" alt="gitCommit" width="507" height="121"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are committing code changes mind about following facts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure that your commits are not too large or too small: you need not to commit each time you do a very small update, or you should not wait till last moment to save all your updates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit Often: Normally a developer commit 5-10 times a day making each commit should contain a separate changes set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meaningful commit messages: your commit message should describe what kind of changes you have made. If it is a bug fix, you can name the commit as "Bug fix" and explain it a little bit more in the description part. This helps to other members of the team to track the history of the changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#skipping-staging-area"&gt;
  &lt;/a&gt;
  Skipping staging area
&lt;/h1&gt;

&lt;p&gt;It is not a necessity to stage the changes before committing. But you should do that only if you are 100% sure that you need not to review your changes later. To skip the staging all you need to do is committing without adding the files to the staging area. Look at the example below.&lt;br&gt;
&lt;code&gt;echo everyone &amp;gt;&amp;gt; file2.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git commit -am "Changed file2"&lt;/code&gt;&lt;br&gt;
Now the change you did to the file2 is committed skipping the staging area.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#removing-files"&gt;
  &lt;/a&gt;
  Removing files
&lt;/h1&gt;

&lt;p&gt;What should you do if there is a file that you need to remove? The command you should use is as follows.&lt;br&gt;
&lt;code&gt;rm file2.txt&lt;/code&gt;&lt;br&gt;
Now when you check the &lt;code&gt;git status&lt;/code&gt; it should be like this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--veXYhd24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/git_FileRemoved.PNG%3Ftoken%3DAPOCKO3KYFQ6RQ6I274J7Q3BPIQCM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veXYhd24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/git_FileRemoved.PNG%3Ftoken%3DAPOCKO3KYFQ6RQ6I274J7Q3BPIQCM" alt="git_FileRemoved" width="791" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How can you know whether this file is removed from the staging area? You can use &lt;code&gt;git ls-files&lt;/code&gt; to see the files available in staging area. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdzXjO2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/files_staggingArea.PNG%3Ftoken%3DAPOCKO763IJ7VNSDIS2VAGTBPIQEQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdzXjO2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/files_staggingArea.PNG%3Ftoken%3DAPOCKO763IJ7VNSDIS2VAGTBPIQEQ" alt="files_staggingArea" width="669" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the above image, the two files are yet in the staging area. Hence to remove the file2.txt from it you should add the change.&lt;br&gt;
&lt;code&gt;git add file2.txt&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, even though you are removing file2, it should be 'add' key word you should use in the command as you are 'adding' a change to the staging area.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now if you check the staging area you'll be able to see that there is no file2.txt in it. Now you can do a commit.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#renamingmoving-files"&gt;
  &lt;/a&gt;
  Renaming/Moving files
&lt;/h1&gt;

&lt;p&gt;Currently we only have file1.txt in our working directory. Let's rename this into main.js using following command.&lt;br&gt;
&lt;code&gt;mv file1.txt main.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now check your &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIDdG_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/6_renameFile.PNG%3Ftoken%3DAPOCKOY3CPFAHEUMBXHKULLBPIQF4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIDdG_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/6_renameFile.PNG%3Ftoken%3DAPOCKOY3CPFAHEUMBXHKULLBPIQF4" alt="6_renameFile" width="788" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above now you have two un-staged changes. One is deleting the file1.txt, second is having main.js as an untracked file. Git does not automatically track new files. Hence whenever you have a new file you should add it to the staged area for Git to track it.&lt;br&gt;
Run &lt;code&gt;git add file1.txt&lt;/code&gt; to stage the deletion of &lt;code&gt;file1.txt&lt;/code&gt; and run &lt;code&gt;git add main.js&lt;/code&gt; to stage creation of &lt;code&gt;main.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, than using above mentioned several steps, you can directly using the below command to rename a file.&lt;br&gt;
&lt;code&gt;git mv main.js file1.js&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ignoring-files"&gt;
  &lt;/a&gt;
  Ignoring files
&lt;/h1&gt;

&lt;p&gt;Sometimes you might have certain files to ignore without adding to the repository. For example files like log files or binary files do not need to add to the repository.&lt;br&gt;
Let's create a directory to store a log file.&lt;br&gt;
&lt;code&gt;mkdir logs&lt;/code&gt;&lt;br&gt;
&lt;code&gt;echo logInfo &amp;gt; logs/logFile.log&lt;/code&gt;&lt;br&gt;
Now let's see how we can ignore adding this file into repository. For this you have to create a file called &lt;code&gt;.gitignore&lt;/code&gt; which is a file with no name, only an extention. Hence let's run the following command.&lt;br&gt;
&lt;code&gt;echo logs/ &amp;gt; .gitignore&lt;/code&gt;&lt;br&gt;
You can check what is included in the file by opening the VScode using &lt;code&gt;code .gitignore&lt;/code&gt;.&lt;br&gt;
If you run &lt;code&gt;git status&lt;/code&gt; it does not says that we have a new directory named logs because Git ignores it. It only says we have a new file named &lt;code&gt;.gitignore&lt;/code&gt;. Now do not forget to stage &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What should you do if you want to remove a directory from the staged area? Simple. You can use the command,&lt;br&gt;
&lt;code&gt;git rm --cashed -r directoryName/&lt;/code&gt;&lt;br&gt;
This will remove the entire directory from the staging area.&lt;/p&gt;

&lt;p&gt;That's all for this tutorial. For more head over to the tutorial &lt;em&gt;'About Git #03'&lt;/em&gt;. 😀&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>About Git #01</title>
      <author>Chathu Rashmini</author>
      <pubDate>Thu, 28 Oct 2021 04:21:13 +0000</pubDate>
      <link>https://dev.to/chathurashmini/about-git-01-56ji</link>
      <guid>https://dev.to/chathurashmini/about-git-01-56ji</guid>
      <description>&lt;p&gt;Let's begin this tutorial with a scenario. Assume that you are a developer who is working on a project with another bunch of developers as a team. One of the developers in your team adds a new feature to the project. Now some functions which were functioning perfectly well before, gets crashed. What can you do now? This is where version controlling comes to play. They help to keep track of various versions of your code segments and also helps to recover any break downs that happens.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#version-control-systems-vcs"&gt;
  &lt;/a&gt;
  Version Control Systems (VCS)
&lt;/h1&gt;

&lt;p&gt;Version Control Systems keep track of the changes that we make to our files. We can edit multiple files and treat those files/ collection of edits as a single change. This is commonly known as a &lt;strong&gt;commit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two categories of version control systems;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Centralized VCS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here all team members are connected to a central server to get the latest copy of the code and share the changes with others. The issue with this category is the availability of a central point of failure. If server goes offline team members cannot collaborate with each other.&lt;br&gt;
Ex: Subversion, Team foundation server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed VCS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this category every team member has a copy of the project in the history of his machine. Hence, the snapshots of the project is saved locally to the machine. Even though the central server is offline, synchronization can be done with others.&lt;br&gt;
Ex: Git, Material&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h1&gt;

&lt;p&gt;Among various version control systems Git is the most famous one. That is because it is free, open-source, fast, and scalable. It also provides cheap branching and merging facilities. It helps a group of developers to do coding collaboratively without facing issues as it keeps tracks of different versions of the code.&lt;/p&gt;

&lt;p&gt;You can use Git via,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The command line&lt;/li&gt;
&lt;li&gt;Code editors and IDEs&lt;/li&gt;
&lt;li&gt;Graphical User Interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-git"&gt;
  &lt;/a&gt;
  Installing Git
&lt;/h2&gt;

&lt;p&gt;To check whether you already have git installed in your machine, simply open the command prompt and type the command &lt;code&gt;git --version&lt;/code&gt;. It will show the git version in your machine, and if it is higher than 2.20, you are good to proceed in this tutorial. If you get an error when you run the above command or if your version is less than 2.20 then you need to install the current version of Git. You can do so by going &lt;a href="https://git-scm.com/downloads"&gt;to this link&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-with-git"&gt;
  &lt;/a&gt;
  Starting with Git
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-global-configurations"&gt;
  &lt;/a&gt;
  Setting Global Configurations
&lt;/h3&gt;

&lt;p&gt;As I have mentioned above, Git keeps track of the things like who made changes and what changes he made. For this we need to add few configurations.&lt;br&gt;
First let git knows who the global user is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using Windows you can use Git Bash&lt;br&gt;
&lt;code&gt;git config --global user.mail "yourmailaddress@example.com"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.name "your name"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also configure an editor or an IDE. Since I am using Visual Studio, I'm going to set it by following code,&lt;br&gt;
&lt;code&gt;git config --global core.editor "code --wait"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can check all the above configuration information by opening the VScode using following command.&lt;br&gt;
&lt;code&gt;git config --global -e&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-repositories"&gt;
  &lt;/a&gt;
  Creating Repositories
&lt;/h2&gt;

&lt;p&gt;First let's create a new folder and navigate into it using following commands. &lt;br&gt;
&lt;code&gt;mkdir newFolder&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd newFolder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we are to make a git repository. You might be wondering what does Repository mean in Git. It is where all of your software packages and code files are stored. &lt;br&gt;
You should use the following command to create a git repository inside your current folder.&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
This command initializes a new &lt;em&gt;empty&lt;/em&gt; git repository in your current directory. &lt;/p&gt;

&lt;p&gt;Inside your current folder now you have a sub folder named &lt;code&gt;.git&lt;/code&gt; which is &lt;em&gt;hidden&lt;/em&gt; for the moment. If you type the command &lt;code&gt;ls&lt;/code&gt; you cannot see anything. But if you use &lt;code&gt;ls -a&lt;/code&gt; you can see the hidden &lt;code&gt;.git&lt;/code&gt; repository. So why this sub folder is hidden? Actually this folder includes information about your project history. It includes directories like branches, info, objects, references, etc. Hence this is not our business but git's to look into it. As we need not to touch this it is hidden from us.&lt;/p&gt;

&lt;p&gt;As you created a repository let's add/move any file of your choice into the folder to which you created the git repository before (I added a text file name file1.txt to my current folder 'newFolder'). Now your folder has changed. Previously it was empty, but now it has a file in it. Hence, you need to make git trace this change. To do that you should add the file using the command,&lt;br&gt;
&lt;code&gt;git add test.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the file which was only in your local machine is added to the &lt;strong&gt;Staging area(index)&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Index is a file maintained by Git that contains all of the information about what files and changes are going to go into your next commit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to get information on current working tree, you can use &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
And to make a commit which means save the changes you have done, all you need to do is,&lt;br&gt;
&lt;code&gt;git commit -m 'Commit Message'&lt;/code&gt;&lt;br&gt;
Here add a meaningful commit message stating what you have done related to the new changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-files"&gt;
  &lt;/a&gt;
  Tracking Files
&lt;/h2&gt;

&lt;p&gt;Any Git project consists of three sections;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Directory: contains the history of all the files and changes that were made&lt;/li&gt;
&lt;li&gt;Working Tree: contains the current state of the project&lt;/li&gt;
&lt;li&gt;Staging Area: contains the changes that are marked to be included in the next commit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each time you make a commit Git record a new snapshot of the state of your project at that moment. Combination of these snapshots make the history of your project. Files of a project can either be tracked or untracked. Tracked files are part of the snapshots. Untracked are not.&lt;br&gt;
Each track file can be in one of these three stages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Modified: file has changes (adding, modifying, or deleting) which have not yet committed.&lt;/li&gt;
&lt;li&gt;Staged: files which has changes that are ready to be committed&lt;/li&gt;
&lt;li&gt;Committed: files whose changes are safely stored in snapshots in git directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;To get the current configuration you can use &lt;code&gt;git config -l&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; command will give the commit history.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's pretty much on starting with Git. For you to know more about staging area, removing files and other things feel free to continue on to the next tutorial. 😃&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
