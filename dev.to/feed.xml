<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>52 Virtual Cups of Coffee: A Developers Journey for Navigating Uncertainties</title>
      <author>zahrakhadijha</author>
      <pubDate>Thu, 10 Dec 2020 00:52:00 +0000</pubDate>
      <link>https://dev.to/zahrakhadijha/52-virtual-cups-of-coffee-a-developers-journey-for-navigating-uncertainties-2j01</link>
      <guid>https://dev.to/zahrakhadijha/52-virtual-cups-of-coffee-a-developers-journey-for-navigating-uncertainties-2j01</guid>
      <description>&lt;p&gt;I have been trying to work out life's riddle for the past &lt;strong&gt;8 months&lt;/strong&gt;. After having a conversation with my roommate on how lost and clueless I felt in my job search, she recommended that I read the book &lt;a href="https://www.amazon.com/Cups-Coffee-insightful-navigating-uncertainties/dp/150060206X"&gt;52 Cups of Coffee&lt;/a&gt;. The book is about a girl who embarked on an experiment to having 1 cup of coffee each week for a year with someone she wouldn't normally meet. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Who you are in five years depends on the people you meet and the books you read."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This quote was on the first page of the book. I started pondering on it and realized how much I resonated with it. It's true, you are made up of the people you surround yourself with and the words you consume. Parts of who I am are made up of the inspiring people I've met in my life. My perspective in life has broadened because of the books I've had the opportunity to read. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-background" class="anchor"&gt;
  &lt;/a&gt;
  My background üë©üèΩ‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;I am a &lt;strong&gt;Frontend Engineer&lt;/strong&gt; looking for my first role in the tech industry! Earlier this year, I saw an opportunity to leave a career path that I was deeply unhappy in to finally pursue Software Engineering. I've been thinking about this path since 2017 when I went to a music festival in New York City and got to experience interactive art, sound systems and robots all created with code. I didn't have the guts to do anything about it then. &lt;/p&gt;

&lt;p&gt;In May 2020, I got accepted to General Assembly's Full Stack Software Engineering Immersive Program. Ever since, I'm committed to putting my 100% into making this career-transition into frontend engineering. And in the future, I'd like to get into &lt;strong&gt;robotics&lt;/strong&gt; and &lt;strong&gt;hardware&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Prior to this, I was working in Events &amp;amp; Digital Marketing and acquired a very heavy client-facing background. This is where I've developed a lot of my soft skills in working with people and being around different personalities. I love people and collaboration so I'll never turn away an opportunity to talk to others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-project-%EF%B8%8F" class="anchor"&gt;
  &lt;/a&gt;
  This Project ‚òïÔ∏è
&lt;/h2&gt;

&lt;p&gt;As I'm reading "52 Cups of Coffee," I decided that I want to have a (virtual) cup of coffee with someone, too and pick their brains about what they're up to in life. I'm inspired by all kinds of people doing all kinds of interesting and cool things, so this wouldn't be restricted to &lt;em&gt;just&lt;/em&gt; engineers. I want to get to know entrepreneurs, creators, people who are on untraditional paths to doing amazing things and learn to ask good, insightful questions.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;HOW&lt;/em&gt;? We're in a pandemic! &lt;em&gt;How do I message people I want to talk to ‚Äî who are probably getting other messages from other people ‚Äî and ask to have a zoom coffee meeting with them? How do I ask without the conversation sounding so transactional?&lt;/em&gt; I could use LinkedIn, Twitter, maybe Instagram? &lt;/p&gt;

&lt;p&gt;I've absolutely made genuine connections on &lt;a href="https://twitter.com/zahrakhadijha"&gt;Twitter&lt;/a&gt;. I think the tech community is supportive and wonderful and I learn new things all the time. And I've also had some luck on LinkedIn. But I wanted to branch out and I wanted to have genuine conversations with different kinds of people to gain perspective and navigate my own uncertainties. I decided to join LunchClub. &lt;/p&gt;

&lt;p&gt;I have my first video call with a founder of a sparkling wine brand on Friday at 9 a.m. I'm going in with the expectation that I will learn something from the choices he's made in his life and take them along with me on my own journey. &lt;/p&gt;

&lt;p&gt;I'm excited, I'm going to jot down questions to ask ü§ó So until next week...we'll see what happens!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>In JS how do you know the right condition to use inside your for loop?</title>
      <author>scothinks</author>
      <pubDate>Wed, 09 Dec 2020 23:09:03 +0000</pubDate>
      <link>https://dev.to/scothinks/in-js-how-do-you-know-the-right-condition-to-use-inside-your-for-loop-4blm</link>
      <guid>https://dev.to/scothinks/in-js-how-do-you-know-the-right-condition-to-use-inside-your-for-loop-4blm</guid>
      <description>&lt;p&gt;I'm new to JavaScript and I've been struggling with iterating with for loops. &lt;/p&gt;

&lt;p&gt;The early classes were easy to understand when the condition was simply i &amp;lt; 9 or i &amp;gt; 9. &lt;/p&gt;

&lt;p&gt;The issue I have now is knowing when to use conditions like i &amp;lt; arr.length for example. &lt;/p&gt;

&lt;p&gt;Many times when I do JS challenges and check the solution for challenges I fail, I see these type of conditions and I don't know why one condition is used instead of another. &lt;/p&gt;

&lt;p&gt;Can anyone help me out with this, please? &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Learning to code later in life</title>
      <author>holly boyles</author>
      <pubDate>Wed, 09 Dec 2020 18:21:01 +0000</pubDate>
      <link>https://dev.to/hmboyles/learning-to-code-later-in-life-3kc3</link>
      <guid>https://dev.to/hmboyles/learning-to-code-later-in-life-3kc3</guid>
      <description>&lt;p&gt;Hi!  My name is Holly and I am learning to code at 40 years old.  I started my coding journey at the young age of 37.  It stalled for a year while I was dealing with some life moments, but a year ago I picked back up where I left off.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does learning to code at my age look like?&lt;/em&gt;  I am a full time student.  I chose a path that included college because I live in a state that offers a tuition-free 2 year degree for any adult that meets the criteria for the program. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why learn to code?&lt;/em&gt;  I worked as a  dental assistant for over 15 years.  It was an amazing career for me for a long time.  Once I made the decision to go back to college, I did not immediately look at tech as an option.  I really had no clue what I wanted to do.  I just knew that I needed to be challenged.  I went through the programs offered and narrowed down my options.  Once programming was on my radar, I utilized several free coding sites to learn as much as I could to see if this was what I wanted.  I loved it! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do I believe anyone can learn to code?&lt;/em&gt;  YES! If you are passionate and dedicated to learning, you can learn to code at any age.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tell me, how old were you when you started your journey?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Ugly Sweater CSS</title>
      <author>Chris Jarvis</author>
      <pubDate>Wed, 09 Dec 2020 17:35:11 +0000</pubDate>
      <link>https://dev.to/jarvisscript/ugly-sweater-css-36am</link>
      <guid>https://dev.to/jarvisscript/ugly-sweater-css-36am</guid>
      <description>&lt;p&gt;Back in October I did a series of faces made with CSS for &lt;a href="https://dev.to/jarvisscript/css-alien-face-wip-38ig"&gt;Halloween&lt;/a&gt;. Now that it's holiday season I'm was looking around for blog ideas. I thought about ornaments but I wanted something that was more fun. &lt;br&gt;
I have a LEGO Advent Calendar that has Star Wars Characters wearings ugly sweaters. I saw this BB-8 sweater and thought that's it, Ugly Sweaters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc96Z0VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yodaarchives.files.wordpress.com/2020/12/poe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc96Z0VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yodaarchives.files.wordpress.com/2020/12/poe.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used the dev tools to get the sweater color. To make the collar and bottom of the sweater, I made a div for each and inserted 10 divs with width of 10%. I named these divs "stitch." I used &lt;code&gt;border: 2px dashed black;&lt;/code&gt; with the sections next to each other the sides were doubled and too thick, so I reduced the &lt;code&gt;border-Left:&lt;/code&gt; and &lt;code&gt;border-Right:&lt;/code&gt; to 1px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.collar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.stitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmkjEcJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yfl3jashg9co58locpj9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmkjEcJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yfl3jashg9co58locpj9.jpg" alt="graphic to simulate a sweater. The background is green, snow is falling."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used a similar method to make the red and green pattern. This time I used a dotted border to change the look of the stitching. The green section originally didn't have a background color and was just transparent to show the sweater background. But when I added a snow graphic as a background image, the snow showed in the "green" sections. I added green back to cover the snow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.red_stitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dotted&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.transparent_stitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3d8425&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dotted&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The background snow was a tip from &lt;a href="https://carloseo.com/let-it-snow-css-animation/"&gt;Carlos Escalera&lt;/a&gt;. I thought about trying to code snow myself but this background image tip was so direct to the point and my challenge was to make the character. &lt;/p&gt;

&lt;p&gt;That's the overall sweater now it's time to add our little friend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-draw-two-circles" class="anchor"&gt;
  &lt;/a&gt;
  First draw two circles
&lt;/h2&gt;

&lt;p&gt;BB-8's body and head are both circular. They began as rectangles and were rounded with &lt;code&gt;border-radius&lt;/code&gt;. The body has the same &lt;code&gt;border-radius&lt;/code&gt; all around but I played with the radiuses on the top and bottom till I got the half sphere of BB-8's head. The head has a bottom border color that matches the sweater.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rIKz4Iwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2x9k2laxphqt98kt5tpw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rIKz4Iwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2x9k2laxphqt98kt5tpw.jpg" alt="bb-8 on a green ugly sweater. It is snowing."&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.droid_body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.droid_head&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;88px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3d8425&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-125px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The orange circle on the body is just a circle with a thick border.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;            

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.droid_circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;BB's head contains several rectangles and squares. The biggest note here is that the antenna is taller than the head. They are the same color so you can only see what extends out of the head div. The antenna is visible due to the &lt;code&gt;overflow: visible;&lt;/code&gt; on the head div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_head"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;         
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_eye"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_antenna"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_dot"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.droid_attenna&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-i-learned" class="anchor"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h2&gt;

&lt;p&gt;This was a fun project. I enjoyed building the sweater out of shapes and layer the shapes into something recognizable. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2i_4TABT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6yyscndjujwetzykfy65.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2i_4TABT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6yyscndjujwetzykfy65.jpg" alt="minimalist bb 8"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-$JarvisScript git push
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to Make Vim a Python IDE - Best IDE for Python.</title>
      <author>ShahinSha</author>
      <pubDate>Wed, 09 Dec 2020 15:47:00 +0000</pubDate>
      <link>https://dev.to/shahinsha/how-to-make-vim-a-python-ide-best-ide-for-python-23e1</link>
      <guid>https://dev.to/shahinsha/how-to-make-vim-a-python-ide-best-ide-for-python-23e1</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
I'm back with another Linux tutorial. We are going to talk about something which is also my personal favorite - &lt;strong&gt;VIM&lt;/strong&gt;.&lt;br&gt;
We are all fed up with iDE's and text editors which takes years to open up and setting up these things takes more time than writing the whole code. That's why I have come up with the best solution.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#whats-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What's Vim?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Before we go any further, let's talk about what vim is. Vim is a very lightweight text editor that can be customized however we want. It normally runs in the terminal and is very easy to learn.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#why-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Vim?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;As I mentioned earlier, Vim is very fast and highly customizable. Also, who doesn't want to work on an IDE   which opens up within a second? Another reason to choose vim is because of its keyboard shortcuts. While using vim you don't need to touch the mouse. This will reduce your coding time by half. I'm sure by the end of the day, you will be a fan. Let's get started now.&lt;/p&gt;

&lt;p&gt;After this tutorial, our vim will look like :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9s28-ELG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnkqpo9g63fa7xgsit5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9s28-ELG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnkqpo9g63fa7xgsit5b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installing-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installing Vim&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Vim installation is a very easy step. For now, I'm going to focus on Linux installation but I'll provide the links for other operating systems.&lt;br&gt;
&lt;strong&gt;Windows&lt;/strong&gt; - &lt;a href="https://www.freecodecamp.org/news/vim-windows-install-powershell/"&gt;Vim in windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt; - We are going to install vim using &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;. Open your terminal and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew update
$ brew install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will install vim on your machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; - Installing vim in Linux is very easy. Open your terminal and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Debian based distros:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get remove vim-tiny
$ sudo apt-get update
$ sudo apt-get install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Arch based distros:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pacman -S vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For fedora:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install vim-enhanced
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#installing-plugin-manager" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installing Plugin Manager&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Vim comes with a native plugin manager but we have something better than that. We are going to install &lt;strong&gt;Vundle&lt;/strong&gt;. It makes installing and updating packages trivial.&lt;br&gt;
Let's install vundle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your terminal and type :
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This will clone the vundle repository in your machine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next step is the vim configuration file(vimrc). You will need this file throughout the tutorial. Do the following in your terminal:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~
$ touch ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add vundle to your vim configuration. Go to your terminal and type:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo nano ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;this will open the vimrc file. Now copy the code below and paste it there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;ctrl+o&lt;/code&gt; to write the file then press &lt;code&gt;Enter&lt;/code&gt; and finally &lt;code&gt;ctrl+x&lt;/code&gt; to exit the editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now let's install vundle plugin inside vim. fire up your terminal and type &lt;code&gt;vim&lt;/code&gt; and now vim will load up. Now type &lt;code&gt;:PluginInstall&lt;/code&gt; and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#making-vim-an-ide" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Making Vim an IDE&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Now comes the best part - Installing all plugins to make vim an IDE. This step is very easy, we are going to add a line in our vimrc and go to vim and install it. Dont worry this may look a bit confusing but it's very easy. Let's get started :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your terminal type &lt;code&gt;sudo nano ~/.vimrc&lt;/code&gt; and clear everything there and then paste the code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set nocompatible              " required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" All Plugins

Plugin 'mhartington/oceanic-next'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'zxqfl/tabnine-vim'
Plugin 'frazrepo/vim-rainbow'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'davidhalter/jedi-vim'
Plugin 'ycm-core/YouCompleteMe'


call vundle#end()            " required
filetype plugin indent on    " required


" setting horizontal and vertical splits
set splitbelow
set splitright

"split navigations
nnoremap &amp;lt;C-J&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-J&amp;gt;
nnoremap &amp;lt;C-K&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-K&amp;gt;
nnoremap &amp;lt;C-L&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-L&amp;gt;
nnoremap &amp;lt;C-H&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-H&amp;gt;

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap &amp;lt;space&amp;gt; za


" Setting up indendation

au BufNewFile, BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile, BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

let g:ycm_autoclose_preview_window_after_completion=1
map &amp;lt;leader&amp;gt;g  :YcmCompleter GoToDefinitionElseDeclaration&amp;lt;CR&amp;gt;

" setting up pyflakes

let python_highlight_all=1
syntax on

" nerd tree settings
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" setting up line numbering
set nu

" Rainbow bracket settings
let g:rainbow_active = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Just like we did before press &lt;code&gt;ctrl+o&lt;/code&gt; to write and &lt;code&gt;Enter&lt;/code&gt; to save. Then press &lt;code&gt;Ctrl+x&lt;/code&gt; to exit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The next step is to install everything using the plugin manager. Open the terminal and type &lt;code&gt;vim&lt;/code&gt;. Now, install the plugin by typing &lt;code&gt;:PluginInstall&lt;/code&gt;. This will take some time but it will install all the plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The ycmserver error - when you open vim you may encounter some errors but don't worry, it's very easy to fix it. open your terminal and type:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install cmake
$ cd ~/.vim/bundle/YouCompleteMe
$ ./install.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's set up a color scheme for our IDE. We are going to install the oceanic theme for now. fire up your terminal and type:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/mhartington/oceanic-next.git
$ cd oceanic-next
$ cp colors/OceanicNext.vim ~/.vim/colors
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now open your vimrc and add the color schemes. To do this open your terminal and type :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo nano ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;this will open your vimrc file. Now paste the code below there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Theme
 syntax enable
" for vim 7
 set t_Co=256

" for vim 8
 if (has("termguicolors"))
  set termguicolors
 endif

colorscheme OceanicNext
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;Ctrl+o&lt;/code&gt; to write and press &lt;code&gt;Enter&lt;/code&gt; to save it. Press &lt;code&gt;Ctrl+x&lt;/code&gt; to exit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrCvB5Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lt2ansjad8v8ejvlhfu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrCvB5Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lt2ansjad8v8ejvlhfu8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U14ihpb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iks9fprso4wxdmgf2e7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U14ihpb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iks9fprso4wxdmgf2e7k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aoqc-bPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2e0j4h15qhmcbz71sede.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aoqc-bPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2e0j4h15qhmcbz71sede.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nicely done guys. We made vim a powerful yet lightweight ide.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features-of-our-new-vim-ide" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features of our new Vim IDE&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;We did so many things but I did not explain what we were doing or what features we added to our Vim-Ide. Trust me, you guys are going to be surprised when you hear the features of your new ide. Let's get into it now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Split layout&lt;/strong&gt; - If you open a file with :sp , you split the layout vertically (opening the new file below the current file). If you reverse the keys to :vs , you get a horizontal split (opening the new file to the right of your current file).Key combos: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;j&lt;/code&gt;  move to the split below, &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;k&lt;/code&gt;move to the split above, 
&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; move to the split to the right,&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;h&lt;/code&gt; move to the split to the left.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MrZPKVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3dgx4u0z3wu2nzyv7r06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MrZPKVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3dgx4u0z3wu2nzyv7r06.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Code Folding&lt;/strong&gt; - Modern IDEs can fold the codes at functions and import statements, by showing the first line only. You can also do it here by pressing the &lt;code&gt;Space&lt;/code&gt; key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k36rW4dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0eu4jisa8s1pit2525g6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k36rW4dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0eu4jisa8s1pit2525g6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Autocomplete&lt;/strong&gt; - Just like any other IDE, vim can predict what you are going to do next.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mv83H8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rimb656db0nq5xfn0itg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mv83H8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rimb656db0nq5xfn0itg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Super Searching&lt;/strong&gt; - You can navigate to any file or any tag just by pressing &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt;. This is one of my favorite features of vim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qci2lq6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/217rs2zqpfe3ho4hnck2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qci2lq6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/217rs2zqpfe3ho4hnck2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Syntax Checking/Highlighting&lt;/strong&gt; - After you write the code in vim. Our flake-8 and syntastic plugin will highlight all the errors in your code and also tell you how to fix it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOckOuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8v7qpqmpnyxpu68x2ku4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOckOuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8v7qpqmpnyxpu68x2ku4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have added almost every feature of ide to our vim. You can now code in a feature-rich ide without having to wait an hour to open up.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#small-intro-to-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Small Intro to Vim&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;I believe some of you have experience using vim. It's okay even if you don't have any, I will give you a small intro of the basics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modes&lt;/strong&gt; - Vim is usually opened in command mode, this means that you can write anything but you do all other commands here like we installed the plugins. Commands usually start with &lt;code&gt;:&lt;/code&gt;.  In order to change from command mode to writing mode press &lt;code&gt;i&lt;/code&gt;. You are now in insert mode, you can write everything here and go back to command mode by pressing &lt;code&gt;Esc&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing, saving, and exiting&lt;/strong&gt; -  When we change to insert mode from command mode(&lt;code&gt;i&lt;/code&gt;) we can edit the code. After we finish, we need to save this and exit, but how?&lt;br&gt;
To do this, you need to go back to command mode by pressing &lt;code&gt;Esc&lt;/code&gt; and press &lt;code&gt;:w&lt;/code&gt; to write everything. you can exit the editor by using the command &lt;code&gt;:q&lt;/code&gt;. If we need to exit without saving, use the command &lt;code&gt;:q!&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Additional resource&lt;/strong&gt; - If you need to learn more about vim and its features, go to &lt;a href="http://vimcasts.org/"&gt;vimcasts&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Vim is something every programmer should try at least once. I hope this blog helped someone or encouraged someone to try it out. There are tons of plugins out there, go find yours and try them out. If you find any difficulties, please let me know in the comments. That's it for today and I will be back with another tutorial soon.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>python</category>
      <category>linux</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What External Display do you use with your computer?</title>
      <author>Andrew Baisden</author>
      <pubDate>Wed, 09 Dec 2020 14:30:54 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/what-external-display-do-you-use-with-your-computer-ci2</link>
      <guid>https://dev.to/andrewbaisden/what-external-display-do-you-use-with-your-computer-ci2</guid>
      <description>&lt;p&gt;There is so much choice when it comes to buying an external display to use with your computer. I currently have an Apple Thunderbolt Display which is cool however the product has been discontinued. And it only works with older Macs that have a MagSafe connector which limits its usage. MagSafe lacked the versatility and convienience of today's USB-C type connections. It was only a dedicated port for power supply and Apple needed something more useful.&lt;/p&gt;

&lt;p&gt;What type of external display do you use with your computer?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>watercooler</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>ShellPipe.py | A Remedy to Overkill Shell Scripting</title>
      <author>Tai Kedzierski</author>
      <pubDate>Wed, 09 Dec 2020 14:23:19 +0000</pubDate>
      <link>https://dev.to/taikedz/shellpipe-shellpipe-py-is-exactly-what-you-think-12bi</link>
      <guid>https://dev.to/taikedz/shellpipe-shellpipe-py-is-exactly-what-you-think-12bi</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/taikedz/your-bash-scripts-are-rubbish-use-another-language-5dh7"&gt;In my previous post&lt;/a&gt;, I had a bit of a rant about people not learning the idiosyncracies of the language that is bash, and more generally those of shell languages as a whole, leading to a lot of frankly horrible scripting out in the wild.&lt;/p&gt;

&lt;p&gt;I've written so much shell script - and put so much emphasis on clean code in shell - for the sake of a handful of key operations that just must be commands, where I would have rather been managing much nicer code.&lt;/p&gt;

&lt;p&gt;So today I turn that right around: rather than try to apply clean code to shell scripts (and crah against the rocky shores of other devs' "but it's just a shell script"), I'm going to bring the best part of shells to Python: &lt;a href="https://github.com/taikedz/shellpipe"&gt;ShellPipe.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The fact of the matter is, a lot of shell scripting is used to glue other tools together, and that's certainly where it excels. Python by contrast, just as most other languages, require some minor passing and tracking of outputs and inputs to achieve the same effects and, whilst generally better languages, aren't quite as eloquent to the task of unifying disparate, uninterfaceable tools. For this eason, I have continued to write bash scripts as glue, rather than try to do that passing around. For this reason in turn, I have written extensive amounts of bash that really should have been written in another language.&lt;/p&gt;

&lt;p&gt;On the last post, I got &lt;a href="https://dev.to/xtofl/comment/14ihn"&gt;a comment from @xtofl&lt;/a&gt; indicating that they'd had a quick go at re-purposing the bitwise OR operator in Python into a pipe-like operator. They expanded on that technique in &lt;a href="https://dev.to/xtofl/i-want-my-bash-pipe-34i2"&gt;a later post&lt;/a&gt; with their proposition for chaining functions, pipe-style, which whilst intersting, does not meet my more basic sysadminy needs.&lt;/p&gt;

&lt;p&gt;I remembered their little comment yesterday and decided to have a go of it myself.&lt;/p&gt;

&lt;p&gt;I'm quite proud of myself. Though maybe I should feel &lt;em&gt;gravely ashamed&lt;/em&gt;. I can now do this in a python script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;shellpipe&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;

&lt;span class="c1"&gt;# Run a command
&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;'git clone https://github.com/taikedz/shellpipe'&lt;/span&gt;

&lt;span class="c1"&gt;# Chain commands, see their output. Using strings or lists, whatever.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"find shellpipe/shellpipe"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;'grep -vE ".*&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;.pyc"'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'du'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-sh'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would have ideally wanted to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql_result = sh(f'mysql {user} -p{pass} db') &amp;lt; """
CREATE TABLE ...
"""
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;which unfortunately is not possible whilst also keeping the immediacy of runs - the comparator needs to evaluate the left hand statement (LHS) entirely first, before the right hand (RHS) is checked. My current implementation runs on-creation, which means the command itself is run before the "redirect" can be processed. &lt;/p&gt;

&lt;p&gt;If I defer the execution until after the redirection is done (this was actually how the first implementation worked), I would have to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;mysql_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;f'mysql &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -p&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"""
CREATE TABLE ...
"""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which is much less elegant. Also, having the external script in an actual file is better practice in most setups so what I actually need to do with the current implmentation is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"script.mysql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;mysql_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;f'mysql &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -p&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;which is generally more reasonable, anyway. Don't hard-code other scripts in your program, store them neatly (he said, shoehorning shell commands into a Python program).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-sorcery" class="anchor"&gt;
  &lt;/a&gt;
  What is this sorcery??
&lt;/h2&gt;

&lt;p&gt;I have hijacked bitwise OR-ing. Or at least, I have for the purpose of my custom class, &lt;code&gt;ShellPipe&lt;/code&gt; (which is simply provided through sleight of assignment as &lt;code&gt;sh = ShellPipe&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;What ShellPipe does is define its own &lt;code&gt;__or__()&lt;/code&gt; function, which is called any time it is placed in a &lt;code&gt;x | y&lt;/code&gt; operation in Python. Similar things exist for &lt;code&gt;__and__&lt;/code&gt; (the &lt;code&gt;&amp;amp;&lt;/code&gt; bitwise AND operator implementor) and &lt;code&gt;__lt__&lt;/code&gt; (the less-than operator implementor) so as to be able to use custom, complex classes as sortable items.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.__or__(that)&lt;/code&gt; normally should simply return an object of the same type as &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt; , but we can abuse this a little by not requiring the one side to be of the same type as the other. Conceivably, we could return whatever we want.&lt;/p&gt;

&lt;p&gt;When invoking &lt;code&gt;x | y&lt;/code&gt;, only the &lt;code&gt;__or__()&lt;/code&gt; of the object on the left hand side of the statement gets executed, and that pair then returns usually a new object that is the union of the two.&lt;/p&gt;

&lt;p&gt;It looks like this (rather, it is exactly this):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__or__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;our_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;our_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ShellPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;our_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By invoking &lt;code&gt;ShellPipe() | "a string"&lt;/code&gt; , I capitalize on this by allowing &lt;code&gt;ShellPipe&lt;/code&gt;'s function to see that on the other side of the operation there is a string, and so it wraps that in a &lt;code&gt;ShellPipe(...)&lt;/code&gt; of its own - and the result is that the string has become a runnable piece of code, in a way.&lt;/p&gt;

&lt;p&gt;So what is happening when I invoke &lt;code&gt;ShellPipe() | "cmd1" | "cmd2"&lt;/code&gt; ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this case, the first LHS (an empty instance) doesn't do anything, as it was not built with a command (it could have been, twelve and two sixes as we say here)&lt;/li&gt;
&lt;li&gt;and it turns the RHS into a &lt;code&gt;ShellPipe("cmd1")&lt;/code&gt; and returns it - &lt;code&gt;cmd1&lt;/code&gt; immediately executes as a result of being defined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cmd1&lt;/code&gt; is now the new LHS, and it keeps a hold of its output stream, passing it into the construction of the now-new RHS, &lt;code&gt;ShellPipe("cmd2", stdin=cmd1_stdout)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on and so forth. Quite simple, really. Once the end of the chain is reached, the last item that was executed is also returned and so in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;mypipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"cmd1"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"cmd2"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"cmd3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mypipe&lt;/code&gt; is in fact the &lt;code&gt;ShellPipe("cmd3")&lt;/code&gt; object created by &lt;code&gt;cmd2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is the output of this last command that we can then inspect with &lt;code&gt;mypipe.get_stdout()&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why" class="anchor"&gt;
  &lt;/a&gt;
  But why??
&lt;/h2&gt;

&lt;p&gt;Is this useful and better than using &lt;code&gt;subprocess.Popen()&lt;/code&gt; directly? It is certainly mostly syntactic sugar, and importing features from one language into another is not always the best answer, but my use cases have veered more towards &lt;em&gt;"I want to use Python for most things, but there's that ONE tool that can only be used as a command."&lt;/em&gt; String and stream manipulation is easier in Python (once you need to manage context beyond a single line), and the rich typing experience - which allowed the &lt;code&gt;__or__()&lt;/code&gt; overloading in the first place - is better there than in shell scripts.&lt;/p&gt;

&lt;p&gt;The downside of my implementation is that it runs each command entirely before passing on to the next one - if a command should produce a large amount of output, that would be stored to file descriptor (and likely thus in RAM) before being passed to the next command. Also, if several commands take a significant amount of time to run, this is not going to work well either.&lt;/p&gt;

&lt;p&gt;But there are just &lt;em&gt;those&lt;/em&gt; times, where &lt;em&gt;that one tool&lt;/em&gt; that is available as a command only, and nobody has python-packaged for, is easier to just... use as a command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/taikedz/bash-builder"&gt;If I consider&lt;/a&gt; . &lt;a href="https://github.com/taikedz/handy-scripts/blob/master/bin/rmkernel.sh"&gt;all the&lt;/a&gt; . &lt;a href="https://gitlab.com/taikedz/bash-builder/-/tree/master/examples/ssh-connection-manager/src"&gt;bash code&lt;/a&gt; . &lt;a href="https://github.com/taikedz/git-shortcuts"&gt;I've written&lt;/a&gt; . &lt;a href="https://gitlab.com/taikedz/alpacka"&gt;where most of it&lt;/a&gt; . &lt;a href="https://github.com/taikedz/mkservice/tree/master/src"&gt;was just managing variables&lt;/a&gt; . &lt;a href="https://github.com/taikedz/github-do"&gt;for the sake of&lt;/a&gt; . &lt;a href="https://github.com/taikedz/handy-scripts/blob/master/src/wifi"&gt;a handful of&lt;/a&gt; . &lt;a href="https://github.com/taikedz/pipsy"&gt;piped shell commands&lt;/a&gt; and clean code ...&lt;/p&gt;

&lt;p&gt;... I feel vindicated. This is a &lt;em&gt;good&lt;/em&gt; abomination üòå&lt;/p&gt;

</description>
      <category>python</category>
      <category>bash</category>
      <category>linux</category>
      <category>automation</category>
    </item>
    <item>
      <title>Happiness status of your GitHub repo: repostatus</title>
      <author>Deepjyoti Barman</author>
      <pubDate>Wed, 09 Dec 2020 14:21:23 +0000</pubDate>
      <link>https://dev.to/deepjyoti30/happiness-status-of-your-github-repo-repostatus-3516</link>
      <guid>https://dev.to/deepjyoti30/happiness-status-of-your-github-repo-repostatus-3516</guid>
      <description>&lt;p&gt;People always ask "why this repo" and never ask "how is this repo", so I created an app that finds how &lt;strong&gt;happy&lt;/strong&gt; a repository is.&lt;/p&gt;

&lt;p&gt;TLDR; The app runs a sentiment analysis engine on your repo and finds how happy it is. Check &lt;a href="https://repostatus.deepjyoti30.dev"&gt;repostatus&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how" class="anchor"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;So how exactly do you find the sentiment of a non living thing? Well, even I had that thought in my mind. Any repository is made up of people that contribute to that repo, people that interact in the repo's comments.&lt;/p&gt;

&lt;p&gt;So, if we are able to run a sentiment analysis engine on the interactions of the people that are contributing to that repo, we might get somewhere?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;repostatus&lt;/code&gt; extracts three important part of the repo (by using GitHub's API):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the commit messages&lt;/li&gt;
&lt;li&gt;the comments on the issues&lt;/li&gt;
&lt;li&gt;the comments on PR's&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once, we have these three things, we can combine them, filter out the unnecessary data and run our engine on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech" class="anchor"&gt;
  &lt;/a&gt;
  Tech
&lt;/h2&gt;

&lt;p&gt;The backend is written in &lt;code&gt;Python&lt;/code&gt; (FastAPI) and the frontend is written in &lt;code&gt;Vue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First things first,  the sentiment analysis engine used by  &lt;code&gt;repostatus&lt;/code&gt; is the &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;textblob&lt;/a&gt; library. It is very easy to use and works great.&lt;/p&gt;

&lt;p&gt;So now that we have the engine at our ease, what's next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend" class="anchor"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;My goto tech stack is Python so no wonder I went with that for the API.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; for the backend. Off late, I have started liking &lt;code&gt;FastAPI&lt;/code&gt; more and more and it was an obvious no brainer to go with it for the backend. It's ease of use with the efficiency is just awesome. If you haven't checked it out, do that, I'm sure you'll love it if you're a Python developer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#services" class="anchor"&gt;
  &lt;/a&gt;
  Services
&lt;/h4&gt;

&lt;p&gt;Services that the API will offer are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Internal API for the webapp&lt;/li&gt;
&lt;li&gt;Public API&lt;/li&gt;
&lt;li&gt;Badge API (Yep, you can use repostatus badges on your README).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I wanted to provide a Public API so that people would be able to use it for their own fun projects. The API is capable of working with both private and public repo's. The details for that can be found &lt;a href="https://repostatus.deepjyoti30.dev/api"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The badge is another thing that I thought would be a nice little addition. This badge works similar to how the &lt;code&gt;travis&lt;/code&gt; build badges work or any badge. You can simply use the URL to embed it into your repositories README.&lt;/p&gt;

&lt;p&gt;More details about the badge can be found &lt;a href="https://repostatus.deepjyoti30.dev/badge"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend" class="anchor"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;I love using VueJS. It was obvious that I would use that to build the frontend. Now for the frontend I wanted to make sure that it doesn't restrict the user too much.&lt;/p&gt;

&lt;p&gt;Thus, &lt;code&gt;repostatus&lt;/code&gt; works with both private and public repos. For private repos, GitHub's OAuth is used which gives us access to that particular repo and then we run the engine over the repo.&lt;/p&gt;

&lt;p&gt;One issue that I faced while implementing the OAuth was that I wanted to make the process seamless. If you go the the app now and select on the OAuth option, you will see the process is pretty neat.&lt;/p&gt;

&lt;p&gt;Here's what it does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Opens a new window and asks the user to give access&lt;/li&gt;
&lt;li&gt;User gives access and GitHub redirects the user to my sites &lt;code&gt;callback&lt;/code&gt; endpoint.&lt;/li&gt;
&lt;li&gt;Window closes and the app shows all the users repos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps makes it look real seamless. However, the hard part for me was to figure out how do I know when the OAuth is done and then show the window.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#seamless-oauth" class="anchor"&gt;
  &lt;/a&gt;
  Seamless OAuth
&lt;/h4&gt;

&lt;p&gt;So in order to make it seamless, I implemented the following flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User clicks on OAuth button, new window is opened and the app keeps waiting for it to close.&lt;/li&gt;
&lt;li&gt;In the new window, the user is redirected to the callback URL which returns a nice HTML page that shows the user that the window will close in 5 secs. After 5 seconds the window closes and the app knows that the OAuth is done.&lt;/li&gt;
&lt;li&gt;The app then tries to find the repo's of that user and accordingly shows the user all the repos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know, it's not much. I have to say, though, I really liked implementing this one little feature and making it so seamless. I'm not even kidding, I just kept on doing OAuth on repeat after implementing it, for a while.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#badge" class="anchor"&gt;
  &lt;/a&gt;
  Badge
&lt;/h2&gt;

&lt;p&gt;An example of the badge can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFh5lO2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://apis.deepjyoti30.dev/repostatus/badge%3Frepo%3Ddeepjyoti30%252Fytmdl%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFh5lO2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://apis.deepjyoti30.dev/repostatus/badge%3Frepo%3Ddeepjyoti30%252Fytmdl%26style%3Dfor-the-badge" alt="[RepoStatus](https://repostatus.deepjyoti30.dev/badge)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isn't it cool?! It supports options like &lt;code&gt;style&lt;/code&gt; of the badge where &lt;code&gt;for-the-badge&lt;/code&gt; can be used. It changes the color of the badge based on the &lt;code&gt;happiness status&lt;/code&gt; of the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-happiness-exactly-calculated" class="anchor"&gt;
  &lt;/a&gt;
  How is happiness exactly calculated
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, the happiness of any repo depends on certain parts of the repo. Thus, once the &lt;code&gt;commit messages&lt;/code&gt;, &lt;code&gt;issue comments&lt;/code&gt; and the &lt;code&gt;PR's comments&lt;/code&gt; are extracted, they are run through a filter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-the-data" class="anchor"&gt;
  &lt;/a&gt;
  Filtering the data
&lt;/h3&gt;

&lt;p&gt;This step makes sure that the data is cleared off of any unreadable content, like an image that the user might have posted in the comments. Or some code inside a code block that the user might have added in an issue report.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-engine" class="anchor"&gt;
  &lt;/a&gt;
  Running the engine
&lt;/h3&gt;

&lt;p&gt;Once the data is cleared off all the unreadable content, it is passed to the &lt;code&gt;textblob&lt;/code&gt; library that runs the engine on the data.&lt;/p&gt;

&lt;p&gt;Now, this library returns a float &lt;code&gt;score&lt;/code&gt;. This score is between -1 and +1 where +1 indicates &lt;code&gt;happy&lt;/code&gt; and -1 indicates &lt;code&gt;sad&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thus, when the engine is run on the comments, let's say we get a score of 0.8, this means, based on the comments, the repo is not &lt;code&gt;that&lt;/code&gt; happy but it's more happier as compared to being sad. So &lt;code&gt;repostatus&lt;/code&gt; considers that based on the comments the repo is &lt;code&gt;happy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We do the above process on other aspects of the repo too, the commit messages etc.&lt;/p&gt;

&lt;p&gt;Once, all the individual scores are available, they are added up and an average is calculated. This average, mathematically, is also between &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;+1&lt;/code&gt;. This is the overall &lt;code&gt;happiness status&lt;/code&gt; of the repo.&lt;/p&gt;

&lt;p&gt;Based on this score, it is decided what color is to be assigned to the repo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching" class="anchor"&gt;
  &lt;/a&gt;
  Caching
&lt;/h3&gt;

&lt;p&gt;Since the engine takes a pretty hefty amount of memory, the score of any repo is cached for 15 days.&lt;/p&gt;

&lt;p&gt;The badges are cached for 24 hours and only after that they are updated.&lt;/p&gt;

&lt;p&gt;This caching was necessary in order to make sure the performance of the API was not effected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-repostatus-here" class="anchor"&gt;
  &lt;/a&gt;
  Try &lt;a href="https://repostatus.deepjyoti30.dev"&gt;repostatus here&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#source" class="anchor"&gt;
  &lt;/a&gt;
  Source
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;repostatus&lt;/code&gt; is open source. Source for the backend and the frontend can be found below&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trotsly"&gt;
        trotsly
      &lt;/a&gt; / &lt;a href="https://github.com/trotsly/repostatus"&gt;
        repostatus
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Get Happiness status of your repo
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/trotsly/repostatus/master/.github/logo_large.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8nMPM5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/trotsly/repostatus/master/.github/logo_large.png" alt="repostatus logo"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;
&lt;i&gt;Get Happiness status of your repo&lt;/i&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2e768dbef191b91fad8137362839b5e971e16903243a0e3d0afe77ad436a8272/68747470733a2f2f617069732e646565706a796f746933302e6465762f7265706f7374617475732f62616467653f7265706f3d74726f74736c792532467265706f737461747573267374796c653d666f722d7468652d6261646765"&gt;&lt;img src="https://camo.githubusercontent.com/2e768dbef191b91fad8137362839b5e971e16903243a0e3d0afe77ad436a8272/68747470733a2f2f617069732e646565706a796f746933302e6465762f7265706f7374617475732f62616467653f7265706f3d74726f74736c792532467265706f737461747573267374796c653d666f722d7468652d6261646765" alt="Status of repostatus"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;Backend for &lt;a href="https://repostatus.deepjyoti30.dev" rel="nofollow"&gt;repostatus&lt;/a&gt;. Repostatus lets you calculate the happiness status of your repository.&lt;/p&gt;
&lt;h2&gt;
What we do?&lt;/h2&gt;
&lt;p&gt;We consider various parts of the repo like commit messages, comments on issues, pulls etc and run a sentiment analysis engine on the data in order to find out the happiens status.&lt;/p&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;You'll need to setup an environ variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; that will contain an access token. In order to get the token, follow &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token"&gt;this&lt;/a&gt; article and accordingly save it to the environment.&lt;/p&gt;
&lt;p&gt;One way to save something to environment is:&lt;/p&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;os&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;environ&lt;/span&gt;
&lt;span class="pl-s1"&gt;environ&lt;/span&gt;.&lt;span class="pl-en"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;'GITHUB_TOKEN'&lt;/span&gt;, &lt;span class="pl-s"&gt;'&amp;lt;your_token&amp;gt;'&lt;/span&gt;)&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Otherwise, it can also be set through the rc file, i:e &lt;code&gt;zshrc, bashrc etc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Tests&lt;/h2&gt;
&lt;p&gt;For the tests, we are using &lt;a href="https://github.com/pytest-dev/pytest"&gt;pytest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you wish to run the tests yourself, make sure you have it installed. The tests can be run by the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trotsly/repostatus"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>A11 - but Y? 6 Reasons you should care about Web Accessibility</title>
      <author>Josefine Schfr</author>
      <pubDate>Wed, 09 Dec 2020 13:49:21 +0000</pubDate>
      <link>https://dev.to/s2engineers/a11-but-y-6-reasons-you-should-care-about-web-accessibility-5546</link>
      <guid>https://dev.to/s2engineers/a11-but-y-6-reasons-you-should-care-about-web-accessibility-5546</guid>
      <description>&lt;p&gt;Ever since web accessibility became a pressing topic on the project I am working on, we have been working hard to convince both (some) colleagues as well as the client that improving accessibility is definitely not just a necessary evil but a massive chance. If you are facing the same challenge or maybe still need convincing yourself, this list might be useful to you. It‚Äôs by no means extensive so please let me know in the comments what points you use to argue in favour of accessibility or what challenges you faced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-benefits-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility benefits everyone
&lt;/h2&gt;

&lt;p&gt;When talking about improving web accessibility, one quickly has just a single kind of user in mind. In reality, having a disability can mean many different things: you could for example, be dependent on using a keyboard due to a permanent impairment, like an amputee, but also just have a broken arm or simply your hands full. This kind of categorization (permanent (e.g. blindness), temporal (e.g. twisted arm) and situational (e.g. being distracted by a newborn)) can be transferred to all types of disabilities and helps illustrate that there are many, multifaceted kinds of users benefitting from an accessible product: It‚Äôs not only about developing for your (future) self, it‚Äôs in the details: adding subtitles to video content or keyboard accessibility to a form benefits everyone, regardless of ability: Whether you are on the train or at the office and can‚Äôt switch our sound on or the video isn‚Äôt in a language you are fluent in; you‚Äôre navigating a site pressing the tab key because it‚Äôs faster or you maybe have no other choice - it doesn‚Äôt matter. We have all been there: sunshine hits your phone at a funny angle and the option to increase contrasts and brightness saves your day. Accessibility benefits all of us. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stSnbsqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bu8wah4azut7ucv3jvva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stSnbsqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bu8wah4azut7ucv3jvva.png" alt="Disabilities"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-isnt-all-about-screen-readers" class="anchor"&gt;
  &lt;/a&gt;
  This isn‚Äôt (all) about Screen Readers
&lt;/h2&gt;

&lt;p&gt;Of course, screen reader accessibility is a huge topic and really important to improve the experience many people make online. While screen readers support users with visual impairments, some other groups are frequently overlooked: We need transcripts and subtitles for people with a hearing impairment, keyboard navigation for folks with physical disabilities and an option to switch to plain language or minimising distractions can help users with cognitive impairments. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seo" class="anchor"&gt;
  &lt;/a&gt;
  SEO
&lt;/h2&gt;

&lt;p&gt;SEO, meaning the optimization of a website for search engines like Google, is quite essential to reaching literally anybody on the internet. The best product, most important information and best cause won‚Äôt go far without being actually findable online. Luckily, in terms of crawling a page, Google works a little like a screen reader: it needs proper headlines, semantically correct HTML, page structures and alt tags to name a few things. Making your site accessible will affect your page rank positively, drive more traffic to your page and is likely to decrease your ad spendings. A lot of good reasons to give it a shot. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#business-value" class="anchor"&gt;
  &lt;/a&gt;
  Business Value
&lt;/h2&gt;

&lt;p&gt;If none of the above helped convince decision makers, this usually helps: the business value of accessibility is undeniable - not being accessible costs your organization a lot of potential users. A survey conducted in the US found that 20% of the overall population suffers from some kind of impairment; and especially considering that the world population is growing older every day and the different types of disabilities (situational, temporal, permanent) mentioned above should illustrate the amount of potential customers lost. &lt;br&gt;
Moreover, especially younger generations are sensitive to perceived social injustice or exposed bad practises. &lt;a href="https://www.youtube.com/user/MollyBurkeOfficial"&gt;Molly Burke‚Äôs&lt;/a&gt; (visually impaired Youtuber) over 2 Million followers might rethink their shopping decisions seeing how much blind people struggle using certain webpages. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-law" class="anchor"&gt;
  &lt;/a&gt;
  The Law
&lt;/h2&gt;

&lt;p&gt;The legal requirements regarding web accessibility differ from country to country, ranging from no regulation at all to WCAG 2.0 standards for public sector websites (as in the European Union) or much more extensive rules like in Canada, where organisations above 50 employees must follow the &lt;a href="https://www.aoda.ca/"&gt;Accessibility for Ontarians with Disabilities Act&lt;/a&gt;. Cases like the notorious Domino‚Äôs Pizza incident, where a blind man challenged and won the legal battle against the fast food chain because their website was inaccessible to him illustrate the consequences of not complying with the local laws regarding accessibility. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-as-a-human-rights-issue" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility as a human rights issue
&lt;/h2&gt;

&lt;p&gt;As the internet shapes so many essential parts of our life every day, it‚Äôs all the more pressing to provide access to everyone, regardless of their ability. The internet, after all, is meant to be for everybody, right? Creating and developing our products and services with accessibility not only in mind but as the foundation of every step will not only help establish an inclusive environment but also make these applications better for every single user. &lt;/p&gt;

&lt;p&gt;There are many good reasons to keep accessibility in mind when creating an experience, of course regardless of on- or offline. While it can seem like an overwhelming challenge when first confronted with these opportunities, accessibility should by no means be an ‚Äòall or nothing‚Äô approach: every little step you take to make your website a little more inclusive is important. &lt;/p&gt;

</description>
      <category>a11y</category>
      <category>seo</category>
      <category>wcag</category>
      <category>codeiscolorful</category>
    </item>
    <item>
      <title>Simple Dark-Light toggle with VanillaJs</title>
      <author>Vaishnav </author>
      <pubDate>Wed, 09 Dec 2020 12:59:34 +0000</pubDate>
      <link>https://dev.to/vaishnavme/simple-dark-light-toggle-with-vanillajs-2cbj</link>
      <guid>https://dev.to/vaishnavme/simple-dark-light-toggle-with-vanillajs-2cbj</guid>
      <description>&lt;p&gt;Dark mode designs and functionality that enable to toggle between Dark and Light theme is trending UI/UX Designüî•. So, here's the guide to create Simple dark-light toggle.&lt;br&gt;
I wanted this to be simple so I didn't create any fancy toggle switch just use simple button.&lt;br&gt;
&lt;small&gt;Codepen at end.ü§ñ&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-start-with-html" class="anchor"&gt;
  &lt;/a&gt;
  Let's Start with HTML
&lt;/h3&gt;

&lt;p&gt;I'm using list for navbar elements, so&lt;br&gt;
&lt;code&gt;&amp;lt;li class="nav-item" id="toggle"&amp;gt;üåû&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and we are done with HTML. let's do CSS&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// by default dark theme

:root {
    --bg-color: #171923;
    --bg-light: #232535;
    --font-color: #c5cddb;
    --font-light: #ffffff;
}

// light theme colors

.lightMode {
  --bg-color: #E8E6DC;
  --bg-light: #DCDACA;
  --font-color: #3D3D3D;
  --font-light: #202020;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;lightMode&lt;/code&gt; is class which would be added to body using js.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#final-part-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Final Part - Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const toggle = document.querySelector("#toggle");
toggle.addEventListener("click", modeSwitch);

function modeSwitch() {
  var rootElement = document.body;
  rootElement.classList.toggle("lightMode");
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;b&gt;What is toggle?&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toggle is method of &lt;code&gt;DOMTokenList() interface.&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;It remove token from token list and return false.&lt;/li&gt;
&lt;li&gt;If token doesn't exist, then it add token and return true.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;What is happening?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;When we click on toggle button, event listener respond to it and call &lt;code&gt;modeSwitch()&lt;/code&gt; function. In &lt;code&gt;modeSwitch()&lt;/code&gt; function, class &lt;code&gt;lightMode&lt;/code&gt; is added to body activating &lt;code&gt;lightMode&lt;/code&gt; color schema. &lt;/p&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/vaishnav21/embed/YzGGZYe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There are different ways to crate dark-light mode toggle. This one simple way I found out to explain how it work. &lt;br&gt;
Love to here your suggestions and feedbackü§©.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>An Introduction to Cloud-Native DevOps</title>
      <author>Sara Miteva</author>
      <pubDate>Wed, 09 Dec 2020 08:34:19 +0000</pubDate>
      <link>https://dev.to/microtica/an-introduction-to-cloud-native-devops-15n2</link>
      <guid>https://dev.to/microtica/an-introduction-to-cloud-native-devops-15n2</guid>
      <description>&lt;p&gt;DevOps, the method of &lt;strong&gt;automating processes between development and operations&lt;/strong&gt;, is one of the essential factors of successfully implementing a cloud-native approach. Since cloud-native has a purpose to &lt;strong&gt;reduce go-to-market time and bring more efficiency to companies&lt;/strong&gt;, DevOps is what streamlines individuals, tools, and systems, contributing to the overall success of the enterprise. This is what makes cloud-native DevOps a logical step towards improved productivity. &lt;/p&gt;

&lt;p&gt;Both cloud-native and DevOps movements are on the rise. &lt;a href="https://www.reportsanddata.com/report-detail/devops-market"&gt;Reports and Data&lt;/a&gt; predict that &lt;em&gt;the global DevOps market will grow from $4.49 billion in 2019 to $17.27 billion in 2027.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;What is more, &lt;a href="https://microtica.com/devops-covid-19-pandemic/"&gt;the COVID-19 pandemic significantly influenced cloud adoption&lt;/a&gt;. &lt;a href="https://www.techrepublic.com/article/idc-worldwide-it-predictions-for-2021-that-cios-need-to-know/"&gt;Predictions&lt;/a&gt; say that by the end of 2021, &lt;strong&gt;80% of companies will double the adoption of cloud-centric infrastructure and apps.&lt;/strong&gt; This is mainly due to the shift to a remote-first workforce.  &lt;/p&gt;

&lt;p&gt;A cloud-native DevOps approach maximizes agility with continuous deployment. Moreover, it scales up systems and applications without the need for drastic changes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let‚Äôs dive in and see what this approach really means.&lt;/em&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-cloudnative-approach-to-software-development" class="anchor"&gt;
  &lt;/a&gt;
  What is the cloud-native approach to software development?
&lt;/h1&gt;

&lt;p&gt;Adopting the cloud-native approach means embracing many new options for leveraging innovations. The primary tools cloud-native teams use are &lt;em&gt;offered by the cloud instead of on-premise infrastructure&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Cloud-native applications are &lt;strong&gt;agile, adaptable, robust, and easy to monitor&lt;/strong&gt;. This means that teams build them with frequent and quick deployments and iterations. Instead of preventing failure, they embrace it and have &lt;strong&gt;the ability to improve in real-time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, they don‚Äôt rely on external factors when it comes to monitoring. Instead, the application can be controlled from the inside. &lt;/p&gt;

&lt;p&gt;The cloud-native beginnings date from around ten years ago, when a group of tech leaders introduced it to the public. &lt;a href="http://pzf.fremantle.org/2010/05/cloud-native.html"&gt;This blog post&lt;/a&gt; by Paul Fremantle, VP of Technical Product Strategy at Weaveworks, is among the first related articles. In the post, he claims that applications should be written FOR the cloud to behave well ON the cloud. &lt;/p&gt;

&lt;p&gt;Then, in 2015, Matt Stine, Executive Director at JPMorgan Chase, cleared the cloud-native concept in his book &lt;a href="https://www.oreilly.com/library/view/migrating-to-cloud-native/9781492047605/"&gt;Migrating to Cloud-Native Application Architectures&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;the cloud-native umbrella covers many tools and methods, including microservices, containers, CI/CD, multi-cloud,&lt;/strong&gt; etc. &lt;a href="https://landscape.cncf.io/"&gt;The CNCF Cloud Native Interactive Landscape&lt;/a&gt; provides a great overview of most of the tools used in the cloud-native approach.  To help and provide development communities with good alternatives for building cloud-native applications, the CNCF cultivates this landscape of open source tools.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-cloudnative-devops" class="anchor"&gt;
  &lt;/a&gt;
  What is cloud-native DevOps?
&lt;/h1&gt;

&lt;p&gt;If we combine the two definitions, cloud-native DevOps turns into &lt;strong&gt;a set of practices that consists of constant development, automated actions, and cross-functional teams,&lt;/strong&gt; which result in improving the entire experience of the end-user. Cloud-native DevOps is all about &lt;strong&gt;making your company more flexible.&lt;/strong&gt; You achieve this through technologies like Kubernetes and containers, which can automate processes and make applications more scalable. &lt;/p&gt;

&lt;p&gt;All these practices apply to almost every aspect of the company. This means changing the entire culture which involves tools, people, and processes. When it comes to &lt;strong&gt;culture&lt;/strong&gt;, you need to &lt;a href="https://microtica.com/want-to-move-from-ops-to-devops-here-is-what-you-should-know/"&gt;adopt a DevOps-oriented approach&lt;/a&gt;. This will foster better alignment between people and tools.&lt;/p&gt;

&lt;p&gt;You have to motivate your employees to collaborate more effectively, encouraging a faster feedback circle. Faster feedback will enable quick iterations and real-time improvements.&lt;/p&gt;

&lt;p&gt;You‚Äôll also have to make some &lt;strong&gt;technical changes&lt;/strong&gt;. This refers to adopting technologies that are in the center of cloud-native DevOps, such as containerization and microservices. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1xWTFc3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0microtica2di3k2co.kinstacdn.com/wp-content/uploads/2020/12/Untitled-3-01-1-1536x804.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1xWTFc3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0microtica2di3k2co.kinstacdn.com/wp-content/uploads/2020/12/Untitled-3-01-1-1536x804.png" alt="cloud-native devops components"&gt;&lt;/a&gt;&lt;/p&gt;
The main technologies in Cloud-Native DevOps




&lt;h1&gt;
  &lt;a href="#how-to-get-started-with-cloudnative-devops" class="anchor"&gt;
  &lt;/a&gt;
  How to get started with cloud-native DevOps?
&lt;/h1&gt;

&lt;p&gt;These are the options to get started with a cloud-native strategy: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementing a cloud-first strategy by choosing a cloud provider instead of an on-premises one&lt;/li&gt;
&lt;li&gt;Adopting a multi-cloud strategy if it meets business needs more closely&lt;/li&gt;
&lt;li&gt;Embracing DevOps, which is obviously what we‚Äôre going to focus on further in this post. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When companies realize that agile development requires both automation and culture transformation to produce quality applications faster, DevOps becomes a priority. Handling multiple hybrid environments or streamlining infrastructure stuff can get very complicated. That‚Äôs why the popularity of tools that align cloud-native and DevOps processes is rising rapidly. &lt;/p&gt;

&lt;p&gt;To make the implementation of cloud-native DevOps easier, these are some suggestions you should pay attention to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Containerization&lt;/strong&gt; enables the creation of environment-agnostic software. It also eliminates implementation conflicts between developers and operation departments, enabling developers and testers to communicate easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://microtica.com/why-transition-from-monolith-to-microservices/"&gt;Going from monolith to microservices&lt;/a&gt;&lt;/strong&gt; also makes the company more agile. This establishes a set of tools, terms, and processes for both development and operation teams. With microservices, you get sophisticated process automation and an easier transition towards agile product development, which is what continuous delivery requires.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Using a container orchestration platform.&lt;/strong&gt; The most popular is Kubernetes because it solves the challenges related to underlying computing, storage, and networking.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automating CI/CD pipelines&lt;/strong&gt; in order to reduce complexity and the chances of errors. This automation can save a lot of headaches for developers. Moreover, it allows them to focus on the actual product instead of fixing issues. &lt;/li&gt;
&lt;li&gt;Writing code according to the 12 factors also makes things more transparent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#most-common-mistakes-in-adopting-cloudnative-devops" class="anchor"&gt;
  &lt;/a&gt;
  Most common mistakes in adopting cloud-native DevOps
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#using-too-many-tools" class="anchor"&gt;
  &lt;/a&gt;
  Using too many tools
&lt;/h2&gt;

&lt;p&gt;Once you switch to cloud-native DevOps, you‚Äôll try automating as many processes as possible. However, you don‚Äôt do this by just adding and adding tools. You have to pick the right tools and make the best combination that‚Äôs right for your application. Overusing tools will also cost you a lot of time and money. &lt;/p&gt;

&lt;p&gt;Another mistake here is that developers often get too reliable of a certain tool. The essence of DevOps, however, lies in the team spirit and the implementation of correct practices that contribute to increased productivity and enhanced processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-continuous-monitoring" class="anchor"&gt;
  &lt;/a&gt;
  Avoiding continuous monitoring
&lt;/h2&gt;

&lt;p&gt;While testing inside the implementation pipelines makes things more straightforward and flowing, it also makes them limited and incomplete. Continuous monitoring, on the other hand, can optimize the entire process by highlighting each malfunction that happens even after the testing.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-paying-enough-attention-to-security" class="anchor"&gt;
  &lt;/a&gt;
  Not paying enough attention to security
&lt;/h2&gt;

&lt;p&gt;Security checks can be quite time-consuming and costly. Teams often think of that security checking capabilities as something that is put to use within the CI/CD workflows. The implementation of a separate tool that takes care of security is a critical move for DevOps to turn and avoid any vulnerabilities in the process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-transition-too-fast" class="anchor"&gt;
  &lt;/a&gt;
  Making the transition too fast
&lt;/h2&gt;

&lt;p&gt;Adopting cloud-native DevOps should be a slow process with a lot of learning on the way. Expecting a company that has been using on-premise applications to immediately align all their structures and platforms into a single cloud-native architecture is simply impossible. Maybe you can quickly make new cloud-native applications, but transitioning existing applications will take a while. &lt;/p&gt;

&lt;p&gt;The best solution would be to go step-by-step. Start by migrating applications to the cloud and continue with transitioning from monolith to microservices. Then, you can set up containers and container orchestration platforms. However, none of this will be successful unless you undergo the culture shift we talk about so much. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-wrap-things-up" class="anchor"&gt;
  &lt;/a&gt;
  To wrap things up
&lt;/h1&gt;

&lt;p&gt;Effective implementation of cloud-native DevOps helps businesses to market fresh technologies more rapidly, speeding up their digital transformation. Through cutting enormous cloud costs and rising efficiency and performance, the cloud-native approach has become a blessing to companies with software products. Completely relying on the potential of cloud-native DevOps, unlocks on-demand, unlimited software development powers.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>cloudnative</category>
      <category>microservices</category>
    </item>
    <item>
      <title>How Cohesion and Coupling Correlate</title>
      <author>Tomas Tulka</author>
      <pubDate>Wed, 09 Dec 2020 08:27:15 +0000</pubDate>
      <link>https://dev.to/ttulka/how-cohesion-and-coupling-correlate-4pbj</link>
      <guid>https://dev.to/ttulka/how-cohesion-and-coupling-correlate-4pbj</guid>
      <description>&lt;p&gt;As I was finishing my blog post about &lt;a href="https://blog.ttulka.com/monolithic-objects"&gt;defining service boundaries&lt;/a&gt;, I had a very strong feeling that there must be some abstract concept of what I was trying to explain on concrete examples‚Ä¶&lt;/p&gt;

&lt;p&gt;Of course, there is! It‚Äôs the concept of &lt;em&gt;cohesion&lt;/em&gt; and &lt;em&gt;coupling&lt;/em&gt; I will discuss in this post.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with little definitions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)"&gt;Cohesion&lt;/a&gt; is the degree to which the elements inside a module belong together.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)"&gt;Coupling&lt;/a&gt; is the degree of interdependence between software modules.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;High cohesion and loose coupling are the most important principles in software engineering. They manifest themselves everywhere from code to team organization.&lt;/p&gt;

&lt;p&gt;Cohesion and coupling are tightly related. Why are they so important? Both help us reduce complexity, the true fun killer of software development.&lt;/p&gt;

&lt;p&gt;To a lot of people, sadly, the concepts sound too academic and are therefore often poorly understood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cohesion-anyway" class="anchor"&gt;
  &lt;/a&gt;
  What is cohesion, anyway?
&lt;/h2&gt;

&lt;p&gt;Tough question. The definition is pretty broad and there are several interpretations out there. Not all of them are necessarily wrong, the valid question is: which one is the most beneficial? I use the following definition as I believe it always leads to cohesive components with tight coupling inside and loose coupling outside, which is exactly what we want:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The degree of cohesion of a component by a particular key equals the number of elements cohesive by the key within the component divided by the sum of the total number of elements cohesive by the key in the whole system and the number of elements not cohesive by the key inside the component.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This long definition can be expressed as a simple formula:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AihMylfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uggijqa4pf4tnkhb4nlk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AihMylfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uggijqa4pf4tnkhb4nlk.png" alt="The cohesion formula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code&gt;c&lt;/code&gt; stands for the component, &lt;code&gt;k&lt;/code&gt; stands for the key, and &lt;code&gt;N&lt;/code&gt; stands for the number of elements. Obviously, the maximal cohesion of a component is equal to one. This is what we strive for.&lt;/p&gt;

&lt;p&gt;I want to emphasize that &lt;strong&gt;cohesion doesn‚Äôt depend on the number of connections&lt;/strong&gt; between elements, that‚Äôs what coupling is all about. Cohesion is rather about &lt;em&gt;belonging together&lt;/em&gt;. However, cohesive components do tend to have a higher degree of coupling within the component, but that‚Äôs just a symptom of high cohesion, not the cause.&lt;/p&gt;

&lt;p&gt;The definition above might look complicated, but it‚Äôs rather quite easy. Let‚Äôs illustrate it with some examples. We measure the degree of cohesion by the &lt;em&gt;violet&lt;/em&gt; key for the components bordered with a dashed line in the following systems:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtDuVaBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fedfhmecdmgutnisohcl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtDuVaBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fedfhmecdmgutnisohcl.png" alt="Example measurements of cohesion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functionality (business) is always the right key to use. Violet and blue can stand for sales and accounting, a product and an invoice, or user registration and ordering.&lt;/p&gt;

&lt;p&gt;Notice that my definition may be a bit oversimplified as the boundaries are not always as solid and obvious. This is why business experts must be involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-busted" class="anchor"&gt;
  &lt;/a&gt;
  Myth busted
&lt;/h2&gt;

&lt;p&gt;Cohesion and coupling are almost always discussed together as they tightly correlate. The relation is sometimes a source of confusion as well, although its understanding is very useful to gain the most for the software system under development.&lt;/p&gt;

&lt;p&gt;A typical myth, I often hear people believe in, puts cohesion and coupling in opposition. Practically, they say that &lt;em&gt;‚Äúthe higher cohesion the tighter coupling‚Äù&lt;/em&gt;. I‚Äôll show you how wrong this statement is.&lt;/p&gt;

&lt;p&gt;This is usually illustrated with an example: Consider the highest possible cohesion of the system where every module is represented by a single line of code (or a single function, an object with a single method, etc.). Such a degree of cohesion will inevitably increase the coupling between modules to the maximum.&lt;/p&gt;

&lt;p&gt;As the conclusion is true, there is a small problem in the prerequisite. To find it out, we have to recall the definition of cohesion once again. It talks about &lt;em&gt;belonging together&lt;/em&gt;, the strength of &lt;em&gt;relationship&lt;/em&gt; of elements, and a &lt;em&gt;common purpose&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What does it mean in practice? In fact, splitting elements that belong together makes cohesion actually lower. So, in the example above, the system really doesn‚Äôt have the highest possible cohesion, in the opposite: breaking modules into the smallest possible elements will separate related concepts and will lead to a pretty low cohesion.&lt;/p&gt;

&lt;p&gt;The moral here is: &lt;strong&gt;Cohesion is not something you can create automatically&lt;/strong&gt;. &lt;strong&gt;Cohesion is discovered in a particular context&lt;/strong&gt;. That‚Äôs why it is so hard for cohesion to be reliably measured. We will discuss this in detail later, stay tuned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cohesion-and-coupling" class="anchor"&gt;
  &lt;/a&gt;
  Cohesion and coupling
&lt;/h2&gt;

&lt;p&gt;Let me show you some pictures. In each figure below, there are the very same elements with the very same dependencies. Those are further differently organized. Related domain concepts are represented with the same color:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3Eq7mQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j8ts8qilytl5ne8irw44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3Eq7mQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j8ts8qilytl5ne8irw44.png" alt="Low cohesion, tight coupling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Elements in the first picture have no explicit boundaries, it‚Äôs an example of so-called coincidental cohesion. Such architecture is known as the Big Ball of Mud or the God Object (in OOP code).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWlAazEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ojm41ku67q5ddt6gfkw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWlAazEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ojm41ku67q5ddt6gfkw.png" alt="High cohesion, tight coupling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second picture shows a system with three modules and a lot of dependencies between them. Although the modules are highly cohesive, they are cohesive by the &lt;em&gt;wrong key&lt;/em&gt;. This happens when code is organized by other than a domain relationship. A typical example is a logical organization of code in the &lt;a href="https://en.wikipedia.org/wiki/Multitier_architecture"&gt;Layered Architecture&lt;/a&gt;: just image modules such as controllers, repositories, services, etc. Have you seen these already somewhere? Hell yeah!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LpcuLTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z1itjkzs1wfg2qnadusf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LpcuLTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z1itjkzs1wfg2qnadusf.png" alt="High cohesion, loose coupling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The system in the third picture shows the ideal case: correctly organized modules leading to high cohesion and loose coupling. The right key for organization is functionality, in other words, a business domain. &lt;strong&gt;The domain defines abstractions with a stable purpose the cohesion is driven upon.&lt;/strong&gt; By the way, that‚Äôs the main idea of the &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design"&gt;Domain-Driven Design&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-cohesion-not-coupling" class="anchor"&gt;
  &lt;/a&gt;
  Focus on cohesion, not coupling
&lt;/h3&gt;

&lt;p&gt;We exhausted all variants except one: a system with low cohesion and loose coupling. Is it even possible to have such an architecture? Unfortunately, it is, and it‚Äôs actually pretty common.&lt;/p&gt;

&lt;p&gt;Systems with low cohesion and loose coupling are results of incorrect understanding of the domain and applying purely technical approaches to decouple the modules in an arbitrary way. &lt;em&gt;Interfaces everywhere&lt;/em&gt; with no abstraction representing a domain purpose are typical for systems built in this way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.ttulka.com/too-many-interfaces"&gt;Misuse of interfaces&lt;/a&gt; won‚Äôt actually reduce coupling anyway, it just moves it into the runtime.&lt;/p&gt;

&lt;p&gt;Striving for loose coupling at any cost can (and will) harm cohesion. As &lt;strong&gt;loose coupling is driven by high cohesion&lt;/strong&gt;, we should strive for high cohesion in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#level-of-abstraction" class="anchor"&gt;
  &lt;/a&gt;
  Level of abstraction
&lt;/h3&gt;

&lt;p&gt;Yes, high cohesion doesn‚Äôt only make the system easy to understand and change, it also &lt;strong&gt;reduces the level of coupling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How is this even possible? Common sense says that the dependencies don't disappear simply by reorganizing elements. While this is true for the overall system dependencies, high cohesion does reduce dependencies on a higher level of abstraction.&lt;/p&gt;

&lt;p&gt;That is, although the absolute amount of dependencies remains the same, the coupling is tackled on different levels of abstraction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The whole is greater than the sum of the parts.&lt;/em&gt; ~ Aristotle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, we can ignore the interdependencies inside modules getting so a simplified big picture with only three loosely coupled elements:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aAdLrHUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/01x22ajwkxlpi4bma45l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aAdLrHUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/01x22ajwkxlpi4bma45l.png" alt="Coupling on the higher level of abstraction is dramatically reduced"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neat. As we see, &lt;strong&gt;high cohesion actually results in loose coupling&lt;/strong&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk-to-me-in-code" class="anchor"&gt;
  &lt;/a&gt;
  Talk to me in code!
&lt;/h2&gt;

&lt;p&gt;Pictures are nice, but as software developers, we trust only code, don‚Äôt we? Alright, I have some code for you. Consider a simple class for a Book Store (in JavaScript, whatever):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BookStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;sale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;receiptFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This class does literally everything. Its cohesion is pretty low and all clients, whatever their needs are, will be coupled to it. It‚Äôs an example of a God Object. We can do better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Inventory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sales&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;receiptFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Inventory&lt;/code&gt; class looks fine, but what about &lt;code&gt;Sales&lt;/code&gt;? Must sales and accounting really be so tightly related? Maybe it‚Äôd be better to split the functionalities into more cohesive classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sales&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Accounting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;receiptFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But what if our Book Store is just a small family business with one clerk doing sales together with accounting on one old cash desk? We just hit the nail on the head: we can‚Äôt really know what the right cohesion key is unless we know the domain really well. True &lt;strong&gt;cohesion is defined by the clients&lt;/strong&gt;. High cohesion is achieved when there‚Äôs no way to split the module any further while still satisfying the client‚Äôs needs. By the way, this is exactly what the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt; teaches us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;High cohesion and loose coupling are the main design drivers towards simple system architecture, that is easy to understand, change, and maintain. High cohesion and loose coupling help us reduce accidental complexity and create modules with well-defined boundaries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coupling is about connections, cohesion is about belonging together.&lt;/li&gt;
&lt;li&gt;Cohesion can‚Äôt be created automatically, instead it‚Äôs discovered in a context.&lt;/li&gt;
&lt;li&gt;Cohesion is defined by the clients.&lt;/li&gt;
&lt;li&gt;True cohesion is domain-driven.&lt;/li&gt;
&lt;li&gt;High cohesion results in loose coupling.&lt;/li&gt;
&lt;li&gt;High cohesion is to die for. It enables all others, loose coupling included.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://blog.ttulka.com/how-cohesion-and-coupling-correlate"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
