<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Truly Protected React Routes</title>
      <author>Daggala Gudmundsdottir</author>
      <pubDate>Tue, 26 Jan 2021 14:02:15 +0000</pubDate>
      <link>https://dev.to/daggala/truly-protected-react-routes-b8a</link>
      <guid>https://dev.to/daggala/truly-protected-react-routes-b8a</guid>
      <description>&lt;p&gt;Are you in doubt that your React routes are really protected ? There are lots of tutorials out there that talk about “secured routes”, “protected routes”, “private routes” or “restricted routes”. It’s pretty misleading because even though you have protected routes, &lt;strong&gt;it is possible&lt;/strong&gt; to get past your login page and get access to all the code in your protected routes.&lt;/p&gt;

&lt;p&gt;Perhaps people are telling you that it isn’t worth going for server side rendering (SSR) in order to truly protect the graphic content of your website. Maybe they’re saying that securing the backend should be enough because that will prevent you from displaying any sensitive data to fake-logged-in users. But &lt;strong&gt;WHAT IF&lt;/strong&gt; you still want more security and you want to block all access? After all, you don’t want your competitors to hack into your admin dashboard, to see how you’re progressing or stealing your ideas.&lt;/p&gt;

&lt;p&gt;This article will answer the following questions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#secure"&gt;what's not secure about protecting routes in the client?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;why do we protect routes in the client?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when"&gt;in which case do I want to have truly protected routes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#protected"&gt;how to truly protect routes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="secure"&gt;What's not secure about protecting routes in the client?&lt;/h2&gt;

&lt;p&gt;In React there is nothing such as truly private routes as it's a single page application (SPA) which means that all the code is served to the browser.&lt;/p&gt;

&lt;p&gt;This is typically how we protect routes in the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrivateRoutes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; : &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PublicRoutes&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this code here above, you can't guarantee that the user won't tweak your javascript, change &lt;code&gt;isLoggedIn&lt;/code&gt; to value true and pretend to be an authenticated user.&lt;/p&gt;

&lt;p&gt;Let's see how we can get access to ALL the code of your application. Here's a &lt;a href="https://codesandbox.io/s/hacking-past-react-login-page-t4hzj?file=/src/App.js"&gt;sandbox example&lt;/a&gt; where I've made a typical login system with protected routes. Notice that I lazy loaded two components: "PrivatePage" and the "LoginPage". Then I used the "classic" way of importing "AnotherPrivatePage" even though that component is not being used (this is on purpose).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AnotherPrivatePage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AnotherPrivatePage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrivatePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./PrivatePage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./LoginPage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAuthenticated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrivatePage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginPage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can either follow the article or test yourself by opening up the sandbox example, and opening page in new window by clicking on the two squares in the upper right corner (the icon can vary between browsers):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_bzXeuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/7f28fdcbf8b0a686cafd119239f7094d/fc2a6/screenshot_codesandbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_bzXeuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/7f28fdcbf8b0a686cafd119239f7094d/fc2a6/screenshot_codesandbox.png" alt="codesandbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to devtools by right clicking, choose "Inspect" (if you're in Chrome). Then go to "Sources".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPSgpdyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/d332e1fcb9cc600109662e184a1397e0/47218/source_chrome.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPSgpdyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/d332e1fcb9cc600109662e184a1397e0/47218/source_chrome.png" alt="source_chrome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here above you can see that we have two components loaded to the browser, "LoginPage" because isAuthenticated = false. We also have "AnotherPrivatePage" because if you don't lazy load, we can very easily access that component as well. The "hacker" doesn't even have to hack to look around and read the code and maybe see some static data.&lt;/p&gt;

&lt;p&gt;It needs a bit more effort to get hold of the other component "PrivatePage.js" as it's lazy loaded. There are lots of ways to do that, but here's one:&lt;br&gt;
Install React dev tools if you don't have it already, go to ⚛️Components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev-WeMTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/04d0a228ac045b4e133ee99cbc574f2f/fcda8/devtools1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev-WeMTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/04d0a228ac045b4e133ee99cbc574f2f/fcda8/devtools1.png" alt="devtools1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on "App" and change hook's state to true:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hrVT6Okn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/0baf76bf063776cf34280137ec575050/fcda8/devtools2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hrVT6Okn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/0baf76bf063776cf34280137ec575050/fcda8/devtools2.png" alt="devtools2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you'll see how we get access to the "PrivatePage", the last component we didn't have loaded in of our application and was supposed to be protected. There are of course lots of other ways to hack React. To increase security you could for example disable access to devtools in production but there's most often some other way to get around things.&lt;/p&gt;

&lt;h2 id="why"&gt;But why do we then protect our routes in the front end?&lt;/h2&gt;

&lt;p&gt;You can protect your components/graphics on a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;component level&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;route level&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either way, the main reason for why we're protecting those graphics is just to make the user experience nicer. The reason why we do it on a route level is just to make our code more organized by avoiding duplications.&lt;/p&gt;

&lt;p&gt;How are protected routes nicer for the user ? Imagine, the user has already visited our page. Next time he visits, he'll tap the url of your website and his browser autocompletes the website url without adding /login to the end of the URL. He goes straight to &lt;a href="http://www.somewebsite.com"&gt;http://www.somewebsite.com&lt;/a&gt;, but he's not authenticated anymore (let's say that he logged out the last time or his authorization token has expired). And because he's not logged in anymore the user will see the page without any content and no possibility to interact with anything that has to do with server data. It would be nicer for the user to have no direct access to the private pages and instead automatically land on the login page.&lt;/p&gt;

&lt;h2 id="when"&gt;But is it so important to have truly protected routes?&lt;/h2&gt;

&lt;p&gt;In the worst case scenario, the user can hack its way with javscript to your private routes and will see some empty tables, graphs, or messages that tell you that there is no data etc. And without content, your website will look like nothing, might even be ugly or at least it will be unusable. Well that's not so serious, we could even say that our hacker deserves that! 😈. But you have to make sure that there is no possibility for the hacker to access sensitive data 🔓 You should not leave any sensitive static data in your client and ensure that all your API endpoints are secure and make the server throw 401 if the user is not really authenticated and authorized.&lt;/p&gt;

&lt;p&gt;But is that really enough? Like I said above you might have built an admin dashboard for your company. Even without access to sensitive data, your competitor could possibly deduce where your company is heading by reading any static texts in your app, or by trying to make sense of your graphics, even though they're missing the content. Apart from that, truly securing the private part of your app adds an extra layer of security to your app, which can only be positive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dw0fbUt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/e1e5545adcbdbd635e7dd96b90f755e5/1c72d/gandalf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw0fbUt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/e1e5545adcbdbd635e7dd96b90f755e5/1c72d/gandalf.jpg" alt="gandalf"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2 id="protected"&gt;How to make truly secured routes?

&lt;/h2&gt;
&lt;p&gt;There are several ways to achieve this. You could use SSR to solve this problem or you could stay with 100% SPA and serve your application in two parts. I've an example of the how to achieve the latter solution. There are lots of ways to do this and here I have an example of this using Express server in Node.js that serves two different SPAs, one containing the login page and the other containing the app itself. You can see this project &lt;a href="https://github.com/daggala/secured-routes"&gt;here on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you clone that project and run it, you should be aware that it takes pretty much time. Instead you can also just follow the article and check out the code.&lt;/p&gt;

&lt;p&gt;If you run the project and go to devtools, you'll see in "sources" that you only have the login page loaded to the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa0E8G0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/3abc06b3ca12f34a548220de040c717c/fcda8/unauthenticated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa0E8G0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/3abc06b3ca12f34a548220de040c717c/fcda8/unauthenticated.png" alt="unauthenticated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here there's no possibility to access the authenticated part of the application because it won't be served to the browser &lt;strong&gt;unless&lt;/strong&gt; you provide the correct auth inputs in username and password thanks to this code in server.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/protected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signedCookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;privatePage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/build`&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;privatePage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/build/index.html`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can try to log in, username: &lt;code&gt;admin&lt;/code&gt; and password: &lt;code&gt;123&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;and voilà:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdSgsMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/014c6e05e4f53841532255d3f1e47b64/fcda8/authenticated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdSgsMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/014c6e05e4f53841532255d3f1e47b64/fcda8/authenticated.png" alt="authenticated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we're logged in and now we have the authenticated part of the application loaded in the browser and as a side effect, the login page is no more loaded in the browser.&lt;/p&gt;

&lt;p&gt;I hope this article has been useful for boosting the security of some of your websites that might use some extra layer of restriction! If you found this article helpful, don't hesitate to leave a comment or share it with others. Same of course if you have something that you would like to point out :) &lt;/p&gt;

</description>
      <category>react</category>
      <category>security</category>
    </item>
    <item>
      <title>Lessons learnt on my road to code...</title>
      <author>Katie Hawcutt</author>
      <pubDate>Tue, 26 Jan 2021 12:23:48 +0000</pubDate>
      <link>https://dev.to/katiehawcutt/lessons-learnt-on-my-road-to-code-43cb</link>
      <guid>https://dev.to/katiehawcutt/lessons-learnt-on-my-road-to-code-43cb</guid>
      <description>&lt;p&gt;Last week I officially graduated from the &lt;a href="https://www.schoolofcode.co.uk/"&gt;School of Code&lt;/a&gt; Bootcamp (🎉) and as such I've been reflecting on my journey into coding over the past year. Without trying to sound overly dramatic (okay maybe I do want it to sound a little bit dramatic...) I really have had the most amazing, life-changing experience and one which has led to a career change that I never planned to have at the grand old age of 32. Having spent the last decade as a professional musician and teacher, building a career in which I have shared some of my favourite moments in life with some of my favourite people in life, I was ready for a new challenge. (I have an insatiable appetite for personal progress in life... often a blessing, occasionally a curse.) I needed a new adventure. A new way to fulfill my potential. I found that desire satisfied in technology. And more specifically in coding. &lt;/p&gt;

&lt;p&gt;Inspired by one of my favourite people (I won't say who because he'd be awfully embarrassed and probably kill me) I embarked on my journey from musician to programmer. I swapped the saxophone for a keyboard, exchanged the language of jazz for the language of JavaScript and went from complete newbie, to self-taught coder, to School of Code bootcamper, to School of Code graduate who's workplace-ready and probably the most enthusiastic junior on the planet right now, in less than a year. And on my road to code I learnt a lesson or two about the world of tech. I don't claim to know it all (or even half of it all) but these are some of my musings so far...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RTFv9dp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z6quoxqmsndx33vrttk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RTFv9dp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z6quoxqmsndx33vrttk3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tech-is-about-team" class="anchor"&gt;
  &lt;/a&gt;
  Tech is about team
&lt;/h1&gt;

&lt;p&gt;This is something which probably surprised me the most at the beginning. Being from a non-programming background, I always had that stereotypical image in my head of a lone-ranger, genius developer, sitting alone in a basement somewhere, sleeping for a few hours a day, coding all night, and somehow doing amazing, clever programming things which were changing the world. Turns out I was only right about one thing there. (Incase I need to clarify it's the bit about technology changing the world.) These days, tech is all about TEAM! This pleases me greatly as I love team. I love people. I love communicating and getting to know people. I love the push and pull of working together, the discussions, the tensions, the glorious moments of unity and progress. I can do team. The ability to think creatively and solve problems by working with others is a vital skill to cultivate as working on a project or delivering a product requires expertise and experience in &lt;em&gt;many&lt;/em&gt; fields. &lt;/p&gt;

&lt;p&gt;To quote the late Steve Jobs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Great things in business are never done by one person. They're done by a team of people". &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A huge part of the bootcamp has been learning how to work with others in Agile, cross-functional teams - something that has been made even more challenging by the fully remote nature of the course. But it has been worth persevering with because today's world is so complex that it is simply impossible to solve problems effectively alone. Teamwork and collaboration is not an opinion. Countless studies have proved the importance of healthy collaboration and teamwork on an organization's ability to make an impact. It's been amazing to see how each person in our bootcamp has been able to contribute different strengths and skills to their teams which resulted in some really creative final projects. We've all got something to bring. A skill you have, which you might take for granted, could be exactly what a team is missing and looking for. So try not to compare yourself to others. Just do your thing and do it really well. In fact, become the best at your thing. It's very likely that someone out there will like your thing and want your thing. (Okay I've said thing enough now...)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfm-lnjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a5xpon9z0chubae1wcxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfm-lnjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a5xpon9z0chubae1wcxd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youll-never-stop-learning" class="anchor"&gt;
  &lt;/a&gt;
  You'll never stop learning
&lt;/h1&gt;

&lt;p&gt;What I love about technology is the constant progression, the change, the sense of moving forward. It satisfies my need for adventure and progress. From what I gather from the more experienced among us, by embarking on a tech career you are pretty much committing yourself to a lifelong education - there is always more to learn!&lt;/p&gt;

&lt;p&gt;I have a theory about this. (It could be completely wrong so be sure to make up your own mind.) This 'you never know everything' reality kind of makes everyone a little bit more equal. You may have been working in your first coding job for a couple of months or you may be two decades into a successful career and the CTO of a big company, but you still need to commit time to your own educational journey, to look into and learn new technologies, to be willing to adapt to changing business environments or adopt the latest best practices. Maybe that's why I've found the tech community to be so helpful and encouraging in comparison to some other professions - no matter how experienced you are you can still remember what it's like to be a junior because the learning never stops. &lt;/p&gt;

&lt;p&gt;So how I am feeling about this 'learning never stops' thing? Well, basically... great! It means that there's the potential for a really exciting and varied career, I'm pretty sure I'm never going to get bored at work, and I'm confident that I'm going to meet lots of amazing people along the way. Although I've learnt a lot over these past four months and made very rapid progress in a short amount of time, I am under no illusion that I am only at the very beginning of my programming journey. There are so many more languages to learn, technologies to master, processes to understand and situations to negotiate. On a good day this challenge can feel exciting. However, on a less good day it can feel a little overwhelming or even downright scary. But it shouldn't. And that's why I think that it's super important to make sure you always celebrate milestones and look back at how far you've already come. Which brings me nicely on to my next point. (It's almost as if I've planned this...)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCl4Xacf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uces1az19kl86as4hqls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCl4Xacf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uces1az19kl86as4hqls.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reflection-is-key" class="anchor"&gt;
  &lt;/a&gt;
  Reflection is key
&lt;/h1&gt;

&lt;p&gt;I started documenting my learning journey a while before I joined the School of Code. Early last year, with the support of my other half (who had recently made the jump into tech himself), I was teaching myself HTML, CSS and JavaScript basics using a combination of online resources, tutorials and kid's coding books (honestly the perfect level for me at the start). After a few months I was making good progress but some days I was finding it hard to stay motivated and see my progress. I didn't know what I was aiming for. It was then that I stumbled across the &lt;a href="https://www.100daysofcode.com/"&gt;100 Days Of Code challenge&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now anyone who knows me well knows that I love a good challenge. I'll do anything for a badge. (Unfortunately there are no badges for 100 Days of Code but the pride was enough in this instance.) I was immediately hooked. It gave me fresh drive to keep learning as I wanted something new to tweet about each day. Tweeting with the #100DaysOfCode hashtag immediately made me feel part of something bigger (I'll come back to this later) and alongside tweeting I also committed to keeping quite a detailed learning diary in which I documented my progress, my thoughts that day and links to any work or resources I used. I continued with this throughout the summer, into September (the first day of the bootcamp was Day 53) and into November. When I finished my 100th day on the 17th November, I knew I had to keep the diary going (I'd begun to see it's value) right up until our School of Code final projects began! It was a commitment, and sometimes the last thing I felt like doing after an whole day of intense, remote learning but it was absolutely, 100% worth it and I'm so proud that I finished it! And here's why...&lt;/p&gt;

&lt;p&gt;Firstly, having to write down exactly what I'd learnt each day really helped me to consolidate my learning. Some days I found it harder to articulate what I'd done which often meant that I hadn't quite grasped the concepts fully yet. This often led to another hour or so of me looking into things and going over them again in order to be able to clearly document them in my diary. At the time, this often felt like very hard work and a bit of a drain, but in hindsight it was this dedication to my diary that enabled me to make such rapid progress and build on my understanding each day without getting behind on the bootcamp. Consolidation is key!&lt;/p&gt;

&lt;p&gt;Secondly, in those moments when things are a bit tough or I'm out of energy or I'm wondering if I made the right choice or if I'm simply wondering what I've done with all my time over the past 6 months, I can look back and see how much I've achieved and how far I've come. Even if no-one ever reads it apart from you it's worth doing. And to quote my mother, "if a job's worth doing, it's worth doing properly". So document, reflect and do it well! (If you want to &lt;a href="https://github.com/katiehawcutt/100DaysOfCode"&gt;see my 100 Days of Code / School of Code diary you can do so here&lt;/a&gt;...)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2d-ayvUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p56e17yijo8uxzeu5hqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2d-ayvUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p56e17yijo8uxzeu5hqr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theres-a-community-out-there" class="anchor"&gt;
  &lt;/a&gt;
  There's a community out there
&lt;/h1&gt;

&lt;p&gt;I mentioned earlier that one of the things I have enjoyed about getting into coding is the tech community that surrounds it. Sadly (due to the current pandemic which we shall not dwell on) I have not yet had to chance to experience these communities in person but I have been able to join them online. People seem very helpful and from my experiences so far, senior developers always come across as willing to help us less experienced developers and point us in the right direction. Many even give up their time to mentor or coach others for no financial reward. (I know, these people are wonderful and brilliant.) Although I am new to this scene I have felt very welcome and get the impression that there are lots of people cheering me on, who want me to be successful and do well. Coming from a very competitive profession previously where it was a little more (very at times) dog-eat-dog this feels amazing! There's space for all of us. I really love that.&lt;/p&gt;

&lt;p&gt;I know that my journey into tech would not have been what it is without my amazing School of Code family. The School of Code team have a done a great job of cultivating a close knit community but I think it's ultimately the intensity of the experience which really knits each cohort together. If I think back to the start of my bootcamp experience...I was thrown together with 47 other bootcampers from all different backgrounds, different ages, different life situations. Before you even speak to them for the first time you know that there's something special about these people as they've already successfully completed a rigorous interview process, they've all decided to step out of their comfort zones and been willing to try something completely new, they've left their jobs and have sacrificed having an income for the next 4 months, and all of this to try to learn to code - which I'd just like to mention is one of the hardest skills to learn and at this stage they've got no idea if they're even going to enjoy it or be good at it! These people are special. Or crazy. (I'm allowed to say that because I am one of them.) And that's before we even get started on the course. It's instantly 0 to 100 mph on the learning front, 8 hour teaching days on Zoom, homework, projects, recap tasks, afternoon energisers (these are fun), mine you lunch (only eat something you can mine), pair programming, guest lectures, waking up in the middle of the night thinking about code (who am I now?), group presentations, mastery tasks, daily squats (yes my legs are like tree trunks), trying to explain to your friends and family what exactly you're doing with your time. And then there's all the blood, sweat and tears. The blood is metaphorical. The sweat and tears are not. (Believe me, you don't know what a cold sweat is until you've had to do a live demo of your product in front of hundred's of potential employers on Demo Day.) All of this bonds you together. I will never forget my bootcamp experience or any of the friends I have made along the way. We walked through the fire of SoC together and have made it to the other side. (For those of you who think I'm being dramatic again, it really does feel like this!)&lt;/p&gt;

&lt;p&gt;Many ex-bootcampers now come back as mentors or to give lectures on the course and there's something really nice about seeing this full circle of education. The student becomes the teacher. It's inspiring for current bootcampers to see where they might be in a few years and it's also rewarding for ex-bootcampers to be able to give back to an organisation which changed the direction of their life (for the better!). I know that it's definitely something that I'd like to do as I continue in my tech career. I'm so thankful that I've had the opportunity to embark on this amazing adventure and I want to help others make this journey and excel on it as they go. It seems that once you've been a bootcamper, you'll never really leave the School of Code family.💖 &lt;/p&gt;

&lt;p&gt;So if you're new to tech or trying to learn to code I would encourage you to find a tribe. Whether it's a community on Twitter, a channel on Slack, by joining 100 Days of Code, or finding out what's going on in your local town or city (there will be something tech related for sure) - go for it! It helps to accelerate your learning, build understanding and you might come away with some really great friends. I can highly recommend it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYNEmkSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/94a20vlaauhrd5nrwlgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYNEmkSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/94a20vlaauhrd5nrwlgr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tech-needs-you" class="anchor"&gt;
  &lt;/a&gt;
  Tech needs YOU!
&lt;/h1&gt;

&lt;p&gt;I wanted to end with this point as I believe it's an important one. Diversity and inclusion is one of the biggest challenges facing the tech industry today. Sure, it's come a long way in the past few years but there is still so much further to go. Technology now rules the world. People across every corner of the earth now use or rely on technology in some way (even if they don't realise it) and we need to make sure that the businesses creating this technology have the same diversity of thought and perspectives as their users. &lt;/p&gt;

&lt;p&gt;This is the part where I'm going to big up the School of Code. The School of Code aims to get more and different types of people into tech and they are doing a fantastic job of it! A big blocker for a many people wanting to get into technology is the cost of retraining but the School of Code bootcamp is free. Yes you heard, FREE! This means that a career change into tech is an option for so many more people. If you’d told me two years ago that as a jazz musician I was soon to become a software developer and land my first job in the tech industry I would never have believed it. (I still have to pinch myself!)&lt;/p&gt;

&lt;p&gt;So if you live in the West Midlands (UK) and are ready for a new challenge in life, hungry to learn new skills, willing to put in LOTS of hard work and wanting to start a new career in tech, this might be the perfect opportunity for you! You can &lt;a href="https://www.schoolofcode.co.uk/"&gt;find out more about how the School of Code works and how to apply on their website&lt;/a&gt;. &lt;/p&gt;




&lt;p&gt;So there we have it. A few thoughts from a recently graduated bootcamper. There's more stuff I could talk about (wotwotwot, that really important day Tommy slept in, the terrible happy birthday singing, sign off's, silent zoom clapping, "you're on mute", etc. etc.) but I'm going to leave it there. &lt;/p&gt;

&lt;p&gt;My closing thoughts (I know you're dying to hear them...) - there is room for you in this industry. Whatever your background, age or experiences you've got something to offer to the world of technology. What are you waiting for? Tech needs you! 🙂&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
      <category>firstyearincode</category>
    </item>
    <item>
      <title>JS Basics: Difference between "null" and "undefined"</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 26 Jan 2021 10:22:23 +0000</pubDate>
      <link>https://dev.to/ms_yogii/js-basics-difference-between-null-and-undefined-i3o</link>
      <guid>https://dev.to/ms_yogii/js-basics-difference-between-null-and-undefined-i3o</guid>
      <description>&lt;p&gt;Hi Folks,&lt;/p&gt;

&lt;p&gt;If you are working in javascript, you must be knowing these two keywords, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. Although we understand both of them, it becomes difficult to answer this particular question. So in today’s post let’s understand the difference between &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Null and undefined are both &lt;strong&gt;falsy values&lt;/strong&gt; and they are one of the javascript primitives ('string','number','null','undefined','boolean','symbol', 'bigint'). Now let's understand their difference.&lt;/p&gt;

&lt;p&gt;The keyword &lt;code&gt;undefined&lt;/code&gt;, as its verbal meaning says, is not defined. For example, If you are declaring a variable &lt;code&gt;a&lt;/code&gt; and you are not passing any value to it. This means its value is not defined and so the variable &lt;code&gt;a&lt;/code&gt; will get value &lt;code&gt;undefined&lt;/code&gt;. Whenever you call a function or a variable and javascript do not know its value it will always return undefined. Try to do this, Declare a variable &lt;em&gt;num&lt;/em&gt; and don't pass any value to it. Now let's print the variable num's value &lt;code&gt;console.log(num)&lt;/code&gt; in your browser console and you will see undefined getting printed. This happened because your browser did not know the value of num as we had not defined it before! Also, as it is one of the javascript primitives, the type of undefined is also &lt;code&gt;undefined&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;We already have understood that, if something is not defined javascript gives it value is undefined. But then what about null? So null is something whose value you want to be nothing. Let me explain, suppose you have defined a variable a and you want its value to be nothing initially, So, instead of not giving it any value and making it undefined, you pass it Null meaning no value. Also, the type of null is an &lt;code&gt;object&lt;/code&gt;. This is why according to &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive"&gt;MDN documentation&lt;/a&gt;, javascript has 6 primitives and there also is null, which is seemingly primitive, but indeed is a special case for every Object&lt;/p&gt;

&lt;p&gt;So though null and undefined are almost the same, they have these differences in their types. While doing equality comparison in both, as both are falsy values == will give you a result true, but as both have different types, === will give you the result as false. &lt;/p&gt;

&lt;p&gt;That’s all about Null and undefined. &lt;/p&gt;

&lt;p&gt;Though this is a very basic topic, it becomes a tricky question for an interview! So share your comments/feedback about the article and also any of such tricky interview questions from your javascript interviews. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>You wouldn’t expect to learn this from React documentation!</title>
      <author>AnnaBuller</author>
      <pubDate>Tue, 26 Jan 2021 09:29:27 +0000</pubDate>
      <link>https://dev.to/annabuller/you-wouldn-t-expect-to-learn-this-from-react-documentation-3ioh</link>
      <guid>https://dev.to/annabuller/you-wouldn-t-expect-to-learn-this-from-react-documentation-3ioh</guid>
      <description>&lt;p&gt;Sometimes you may feel that your documentation, article, or post lacks something. You may see people lost while reading your texts. You may get too many questions about things that - you're sure - you've included in a guide or an e-mail. Where is the reason for this? &lt;br&gt;
Do you know React only as a front-end library? Have you ever thought: "React documentation rules!"?. Well, I have. And here is why.&lt;br&gt;
Compare your texts to the below list based on React documentation and check if you can make your writing better and your readers happier!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-selfexplanatory-subtitles" class="anchor"&gt;
  &lt;/a&gt;
  1. Self-explanatory subtitles
&lt;/h2&gt;

&lt;p&gt;Let the readers scan the text so they can easily find what they need. Avoid these shrouded in mystery subheadings like “Your mum taught you to clean up after yourself” when you just want to tell about clearing an interval in the componentWillUnmount() method.&lt;br&gt;
Here is a perfect example. You wouldn't even need a &lt;code&gt;Ctrl+F&lt;/code&gt; shortcut to find a paragraph about the Custom Hook. You would just find it while scrolling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFwGGFKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfmetgbn0fb3jlfahphg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFwGGFKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfmetgbn0fb3jlfahphg.png" alt="A self-explanatory subtitle in React documentation saying: Extraction od Custom Hook"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
A self-explanatory subtitle. The screenshot comes from: &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;https://reactjs.org/docs/hooks-custom.html&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#2-lists-and-stickout-keywords" class="anchor"&gt;
  &lt;/a&gt;
  2. Lists and stickout keywords
&lt;/h2&gt;

&lt;p&gt;When there is too much "dense text" we lose interest, we lose focus. And when there are no &lt;strong&gt;visible keywords&lt;/strong&gt; we can't even find an appropriate piece of information. It takes more time to work through. See an unordered list and highlighted keywords below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFrWgP31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ee8kb5amdglvwpolemfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFrWgP31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ee8kb5amdglvwpolemfz.png" alt="A screenshot with highlighted keywords and a bullet list"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
An example of a list and noticeable keywords. The screenshot comes from: &lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;https://reactjs.org/docs/higher-order-components.html&lt;/a&gt;



&lt;p&gt;But don't overdo keyword marking. It may cause an opposite effect like in &lt;a href="https://usabilitygeek.com/white-spaces-improving-usability-web-designs/"&gt;this article&lt;/a&gt; about white space ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-links" class="anchor"&gt;
  &lt;/a&gt;
  3. Links
&lt;/h2&gt;

&lt;p&gt;Give your readers some useful additional information so they don’t have to search for it on their own. Provide links or a short explanation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-transparent-guidance" class="anchor"&gt;
  &lt;/a&gt;
  4. Transparent guidance
&lt;/h2&gt;

&lt;p&gt;Guide the readers. Make sure they always know where they are and what they should do next.&lt;br&gt;
Here is an example of providing additional information and guiding the reader to the next section.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gbBrwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8akhappodt0lwxjvigzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gbBrwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8akhappodt0lwxjvigzl.png" alt='A screenshot with a highlighted link and "what to do next" information'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
The end of a chapter with a useful link and a "what to do next" piece of information. The screenshot comes from: &lt;a href="https://reactjs.org/docs/add-react-to-a-website.html"&gt;https://reactjs.org/docs/add-react-to-a-website.html&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#5-important-information-and-tips" class="anchor"&gt;
  &lt;/a&gt;
  5. Important information and tips
&lt;/h2&gt;

&lt;p&gt;Where there is a really important or useful piece of information make it stand out. Use different color, font or put them into a frame.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wun4Wi8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/poy8tuk3hcyyy6inkhx8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wun4Wi8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/poy8tuk3hcyyy6inkhx8.png" alt='A visible piece of useful information named as a "Note"'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
A visible note with additional explanation. The screenshot comes from: &lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;https://reactjs.org/docs/hooks-state.html&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#6-warnings" class="anchor"&gt;
  &lt;/a&gt;
  6. Warnings
&lt;/h2&gt;

&lt;p&gt;When you know some frequently made mistakes, write them down. One doesn’t always have to learn from their mistakes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xc6rH2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0ejnuelbd8jcxzxuungu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xc6rH2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0ejnuelbd8jcxzxuungu.png" alt="A stickout note with warning against a popular mistake"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
A stickout warning. The screenshot comes from: &lt;a href="https://reactjs.org/docs/react-component.html#constructor"&gt;https://reactjs.org/docs/react-component.html#constructor&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#7-white-space" class="anchor"&gt;
  &lt;/a&gt;
  7. White space
&lt;/h2&gt;

&lt;p&gt;Care for your readers’ eyes. Remember about a nice amount of space between subtitles, lines, list items, etc. You will find an example of a good white space amount on each screenshot in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-possibility-to-experiment-with-code" class="anchor"&gt;
  &lt;/a&gt;
  8. Possibility to experiment with code
&lt;/h2&gt;

&lt;p&gt;Your readers would be absolutely thrilled when you provide a possibility to try the code out - on CodePen for example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OcpCCitQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3sdc0kc3tgmgfm5t9wzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OcpCCitQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3sdc0kc3tgmgfm5t9wzm.png" alt="A code snippet with a possibility to try the code out on CodePen"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
A code snippet with a possibility to try the code out on CodePen. The screenshot comes from: &lt;a href="https://reactjs.org/docs/lists-and-keys.html"&gt;https://reactjs.org/docs/lists-and-keys.html&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#9-lack-of-spelling-and-punctuation-mistakes" class="anchor"&gt;
  &lt;/a&gt;
  9. Lack of spelling and punctuation mistakes
&lt;/h2&gt;

&lt;p&gt;Mistakes can change the meaning of the whole sentence. Some mistake-sensitive readers may be put off the stride and may lose their train of thought. Check your text before publishing!&lt;/p&gt;




&lt;p&gt;Now take your post, article, or piece of documentation that you've recently written and check it with those 9 tips. Can you make your text better?&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
      <category>react</category>
      <category>writing</category>
      <category>documentation</category>
    </item>
    <item>
      <title>An Introduction to Scraping (Almost) Anything With Puppeteer and Node.js</title>
      <author>Jacob Lee</author>
      <pubDate>Tue, 26 Jan 2021 07:46:39 +0000</pubDate>
      <link>https://dev.to/hacubu/an-introduction-to-scraping-almost-anything-with-puppeteer-and-node-js-e9g</link>
      <guid>https://dev.to/hacubu/an-introduction-to-scraping-almost-anything-with-puppeteer-and-node-js-e9g</guid>
      <description>&lt;p&gt;Despite the macabre name, headless browsers aren't scary (at least, to most people). They're similar to standard web browsers, but are controlled through code instead of with a mouse and keyboard. You can do almost anything with a headless browser on a page that you can do with a normal web browser, including submit forms, wait for asynchronous JavaScript, and set cookies. When used in combination with modern cloud platforms, it's easier than ever to create automated scrapers.&lt;/p&gt;

&lt;p&gt;In this article, I'll walk you through a few web scraping tricks and examples using &lt;a href="https://pptr.dev"&gt;Puppeteer&lt;/a&gt;, a headless browser based on Chromium that has become an industry standard, and Node.js. We'll also use &lt;a href="https://autocode.com"&gt;Autocode&lt;/a&gt; to easily run and iterate on our scraper code.&lt;/p&gt;

&lt;p&gt;All you need to get started is a free Autocode account. Let's dive in!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr-30s" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR (30s)
&lt;/h1&gt;

&lt;p&gt;Getting a basic scraper working is simple. Start by going to &lt;a href="https://autocode.com"&gt;https://autocode.com&lt;/a&gt; and creating or logging into your account. Create a new project, and paste the following code into the editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// authenticates you with the API standard library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STDLIB_SECRET_TOKEN&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autocode-puppeteer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.youtube.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Any URL you'd like&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Autocode will automatically add required dependencies, so all you need to do now is, press the &lt;strong&gt;Save&lt;/strong&gt; or &lt;strong&gt;Run&lt;/strong&gt; button to push your code live. And that's it! You're now scraping the title of the page (what you'd see in the tab bar when you open the site in Chrome) with Puppeteer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnfiZ_qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zb15ntjzp0t6pjl5sxz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnfiZ_qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zb15ntjzp0t6pjl5sxz5.png" alt="Scraping the title from youtube.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#breaking-it-down" class="anchor"&gt;
  &lt;/a&gt;
  Breaking It Down
&lt;/h1&gt;

&lt;p&gt;Here's what happens in the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We require a &lt;a href="https://www.npmjs.com/package/autocode-puppeteer"&gt;variant of Puppeteer configured to work in the Autocode environment&lt;/a&gt;. Note that the default Puppeteer package will not work due to dependency size constraints.&lt;/li&gt;
&lt;li&gt;We prepare Puppeteer by launching it and opening a new page.&lt;/li&gt;
&lt;li&gt;We navigate to the desired page with &lt;code&gt;await page.goto()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once on the right page, we use the &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pagetitle"&gt;&lt;code&gt;page.title()&lt;/code&gt;&lt;/a&gt; method to scrape the page title.&lt;/li&gt;
&lt;li&gt;We close the browser instance when we're finished.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This flow is analogous to opening Chrome on your computer, typing &lt;code&gt;https://youtube.com/&lt;/code&gt; in the navbar, checking the title of the page, and finally closing the browser. We'll follow this general pattern when web scraping with Puppeteer. &lt;/p&gt;

&lt;p&gt;We're just scratching the surface of what's possible, but there's something important to emphasize first.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#with-great-power" class="anchor"&gt;
  &lt;/a&gt;
  With Great Power...
&lt;/h1&gt;

&lt;p&gt;Many websites disallow scraping, and use tools like reCAPTCHA or contain a &lt;a href="https://en.wikipedia.org/wiki/Robots_exclusion_standard"&gt;robots.txt&lt;/a&gt; file containing guidelines for scrapers and other automated tools. You should always check and respect site rules before scraping.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scraping-data-from-page-content" class="anchor"&gt;
  &lt;/a&gt;
  Scraping Data From Page Content
&lt;/h1&gt;

&lt;p&gt;Now that you've got the basics down, let's explore how to scrape more useful data from a page. One key piece of functionality Puppeteer provides is the ability to query a page for HTML elements with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"&gt;CSS selectors&lt;/a&gt;. For example, Puppeteer's &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pageevalselector-pagefunction-args"&gt;&lt;code&gt;page.$$eval()&lt;/code&gt;&lt;/a&gt; method takes a selector and allows you to run code in the context of the browser on all elements matching the selector.&lt;/p&gt;

&lt;p&gt;Here's what it looks like in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// authenticates you with the API standard library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STDLIB_SECRET_TOKEN&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autocode-puppeteer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.youtube.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;videoData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a#video-title-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;titleLinkEls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;titleLinkEls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;titleLinkEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;titleLinkEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://youtube.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;titleLinkEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;videoData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foiKP_nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h6rgv349ppgd3gae26a1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foiKP_nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h6rgv349ppgd3gae26a1.png" alt="The results of scraping video links and titles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we've loaded YouTube in a page, we can use the &lt;code&gt;page.$$eval()&lt;/code&gt; function to query for each video link on the front page and return the name of the video and a link to it. We've essentially created a custom trending video API!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#crafting-selectors-with-chrome-devtools" class="anchor"&gt;
  &lt;/a&gt;
  Crafting Selectors With Chrome Devtools
&lt;/h1&gt;

&lt;p&gt;One tricky part about creating scrapers is figuring out what elements of the page contain relevant data - after all, it's not immediately obvious that &lt;code&gt;a#video-title-link&lt;/code&gt; matches all the video links on YouTube. One convenient tool for this is the inspector in Chrome's devtools.&lt;/p&gt;

&lt;p&gt;You can open the inspector under &lt;strong&gt;View &amp;gt; Developer &amp;gt; Inspect Elements&lt;/strong&gt; in the topbar, or by using the keyboard shortcut &lt;strong&gt;CMD + Option + C&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBvy2P61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpx3qixio92pe8s4h90l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBvy2P61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpx3qixio92pe8s4h90l.png" alt="Accessing the Chrome inspector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have the inspector open, you can mouse over elements on the page and see them highlighted. Clicking one will show the element in the devtools window, including its attributes and position in the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EfRROeMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8byhz5nwg6d36mz7sg4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EfRROeMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8byhz5nwg6d36mz7sg4p.png" alt="Highlighting elements in the Chrome inspector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the inspector, you should be able to figure out a way to reference the correct elements and scrape the data you want.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#debugging-with-screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Debugging With Screenshots
&lt;/h1&gt;

&lt;p&gt;Puppeteer allows you to take screenshots of pages using the &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pagescreenshotoptions"&gt;&lt;code&gt;page.screenshot()&lt;/code&gt;&lt;/a&gt; method. This can be especially useful to see the current page state when composing flows that involve interaction with &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pageclickselector-options"&gt;&lt;code&gt;page.click()&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pageselectselector-values"&gt;&lt;code&gt;page.select()&lt;/code&gt;&lt;/a&gt;, much like a &lt;code&gt;console.log&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;For example, let's say you want to build a flow that involves clicking on the first video on the front page of YouTube to scrape its like and dislike count. You might try something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// authenticates you with the API standard library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STDLIB_SECRET_TOKEN&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autocode-puppeteer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
* An HTTP endpoint that acts as a webhook for HTTP(S) request event
* @returns {object.http} result
*/&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.youtube.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a#video-title-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;screenshot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To make the screenshot return as an image rather than just binary data, we must pass back the proper &lt;code&gt;Content-Type&lt;/code&gt; header. The above code is an example of how to do this in Autocode with the &lt;code&gt;object.http&lt;/code&gt; return type. To return other types of data, you'll need to remove the return type or change the return type to match the type of data you're returning. For more information, you can read about the &lt;a href="https://github.com/functionscript/functionscript#types"&gt;FunctionScript specification&lt;/a&gt; Autocode uses for parameters and return types.&lt;/p&gt;

&lt;p&gt;If you were to try running the above code a few times, you would notice that the screenshot is either not changing from the main page, or that you'd see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dmvuQCQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i0rkb9ecaa3i1r9832ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dmvuQCQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i0rkb9ecaa3i1r9832ag.png" alt="Loading state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would clue you in to the fact that you need to wait for parts of the page to load using something like &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pagewaitforselectorselector-options"&gt;&lt;code&gt;page.waitForSelector()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// authenticates you with the API standard library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STDLIB_SECRET_TOKEN&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autocode-puppeteer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
* An HTTP endpoint that acts as a webhook for HTTP(S) request event
* @returns {object.http} result
*/&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.youtube.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a#video-title-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitForSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#top-level-buttons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;screenshot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Other use-cases include combining screenshots with the &lt;a href="https://docs.autocode.com/getting-started/creating-your-first-project/the-autocode-scheduler/"&gt;Autocode scheduler&lt;/a&gt;, a file hosting platform like &lt;a href="https://box.com"&gt;Box&lt;/a&gt;, and a package like &lt;a href="https://github.com/mapbox/pixelmatch"&gt;pixelmatch&lt;/a&gt; to create daily screenshot diffs for regression testing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other-tips" class="anchor"&gt;
  &lt;/a&gt;
  Other Tips
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#tuning-your-scraper" class="anchor"&gt;
  &lt;/a&gt;
  Tuning Your Scraper
&lt;/h2&gt;

&lt;p&gt;The web is a wild place, and new standards are appearing all the time. If a technique doesn't work the way you expect on a first attempt, you may need to try a different method, like waiting for a selector or even just waiting for a set amount of time rather than a &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, or using a different selector. Luckily, Puppeteer has plenty of options!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increasing-your-autocode-timeout" class="anchor"&gt;
  &lt;/a&gt;
  Increasing Your Autocode Timeout
&lt;/h2&gt;

&lt;p&gt;Complicated flows that involve visiting multiple pages or flows that visit slow pages may require more than the default 10 second timeout on Autocode. If your scraper is consistently timing out, you can try increasing the timeout under &lt;strong&gt;Advanced Settings&lt;/strong&gt; in the bottom left corner of the Autocode editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h6FXJ7Cl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0aliamwshsebmvzb58xt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h6FXJ7Cl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0aliamwshsebmvzb58xt.png" alt="Increasing your Autocode timeout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free accounts can increase their timeouts to up to 30 seconds, while &lt;a href="https://autocode.com/pricing"&gt;Professional Tier accounts&lt;/a&gt; can go up to 2 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simulating-loggedin-states-advanced" class="anchor"&gt;
  &lt;/a&gt;
  Simulating Logged-In States (Advanced)
&lt;/h2&gt;

&lt;p&gt;Many websites show different data based on whether or not the current viewer is logged in. To simulate this state in Puppeteer, you might be able to use the &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pagesetcookiecookies"&gt;&lt;code&gt;page.setCookie()&lt;/code&gt;&lt;/a&gt; method using cookies obtained from the Chrome devtools. You can also attempt to use and submit a site's login form directly with your username and password, but many sites use CAPTCHAs to prevent this.&lt;/p&gt;

&lt;p&gt;Be careful not to set cookies under the wrong domain if you try this!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#limitations" class="anchor"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h1&gt;

&lt;p&gt;Because web scrapers usually rely on the structure of the DOM for pages they visit, frontend updates can break scrapers. For this reason, it's often better to use a supported API if it is available to you. &lt;/p&gt;

&lt;p&gt;If your desired data follows a specific format and the page you're scraping obfuscates their CSS attributes or changes them frequently, Puppeteer does have a &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v5.5.0&amp;amp;show=api-pagecontent"&gt;&lt;code&gt;page.content()&lt;/code&gt;&lt;/a&gt; method that returns the current DOM structure of the page as a string. You can then use a regex or some other method to extract your data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h1&gt;

&lt;p&gt;Puppeteer is an extremely powerful tool, and if you're interested in a deeper dive, I would encourage you to check out &lt;a href="https://pptr.dev"&gt;the official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or feedback, a good place to get in touch with me is the Autocode community Slack channel. You can get an invite under &lt;strong&gt;Docs &amp;gt; Ask for Help in Slack&lt;/strong&gt; in the topbar on autocode.com. You can also reach out to me on Twitter &lt;a href="https://twitter.com/Hacubu"&gt;@Hacubu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to stay up to date on the latest from Autocode, I would also encourage you to follow &lt;a href="https://twitter.com/AutocodeHQ"&gt;@AutocodeHQ&lt;/a&gt;. Happy hacking!&lt;/p&gt;

</description>
      <category>webscraping</category>
      <category>node</category>
      <category>puppeteer</category>
      <category>autocode</category>
    </item>
    <item>
      <title>How I Set Up VSCode For Recording a Screencast</title>
      <author>Stephanie Eckles</author>
      <pubDate>Tue, 26 Jan 2021 03:48:31 +0000</pubDate>
      <link>https://dev.to/5t3ph/how-i-set-up-vscode-for-recording-a-screencast-be7</link>
      <guid>https://dev.to/5t3ph/how-i-set-up-vscode-for-recording-a-screencast-be7</guid>
      <description>&lt;p&gt;In the spring of 2020, I joined &lt;a href="https://5t3ph.dev/egghead"&gt;egghead as an instructor&lt;/a&gt; where I publish video lessons on various front-end web development topics. This short tutorial is focused on my setup process of recording a coding screencast.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Egghead has &lt;a href="https://egghead.io/courses/record-badass-screencasts-for-egghead-io"&gt;a particular method&lt;/a&gt; of recording screencasts which you should also check out for some very good tips if you're brand new to screencasting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#vscode-settings" class="anchor"&gt;
  &lt;/a&gt;
  VSCode Settings
&lt;/h2&gt;

&lt;p&gt;There are a few parts to setting up VSCode. To make it easier from one lesson to the next, I recommend creating a base project that you re-use. The main reason is that we'll be creating workspace settings, including disabling certain extensions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vscode-workspace-settings" class="anchor"&gt;
  &lt;/a&gt;
  VSCode Workspace Settings
&lt;/h3&gt;

&lt;p&gt;An important part of setting up for a screencast is ensuring viewers can easily see what you're typing!&lt;/p&gt;

&lt;p&gt;If you don't have a workspace settings file already created, you can add one at the root of your project by creating the directory &lt;code&gt;.vscode&lt;/code&gt; and the file &lt;code&gt;settings.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are my recommended essential settings for screencasts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.lineHeight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"window.zoomLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.lineNumbers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.quickSuggestionsDelay"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"breadcrumbs.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.activityBar.visible"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.statusBar.visible"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first three work together to adjust the font size. You may choose to set a higher value for &lt;code&gt;fontSize&lt;/code&gt; and &lt;code&gt;lineHeight&lt;/code&gt; and perhaps not set the &lt;code&gt;zoomLevel&lt;/code&gt;. The reason I am setting all three is because &lt;code&gt;zoomLevel&lt;/code&gt; also impacts the panel text, such as the Folders, and occasionally I need to show how that is setup as well.&lt;/p&gt;

&lt;p&gt;Here is a screenshot to show relative sizing with these settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q74MS6DG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5xhsfr7pbe46qnhmsal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q74MS6DG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5xhsfr7pbe46qnhmsal.png" alt="View of VSCode with an HTML file open and showing how the code editor font size appears about 2.5x larger than the window panel text, where the Folders panel is expanded"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pit stop to say my current theme is &lt;a href="https://marketplace.visualstudio.com/items?itemName=jglovier.apollo-midnight-color-theme"&gt;Apollo Midnight&lt;/a&gt;. While we all have our preferences, for screencasting it is recommended to choose a high-contrast theme in consideration of accessibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, if you typically use a code formatted like Prettier, you may wish to turn this off, which is the &lt;code&gt;"editor.formatOnSave": false&lt;/code&gt;. There are two reasons I turn it off:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tutorials are usually very focused on small blocks of code that aren't too difficult to keep formatted&lt;/li&gt;
&lt;li&gt;When this is off, I can force certain blocks out of view to better focus on the in-progress block.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following that, I remove line numbers just to extra reduce clutter. If I want to call attention to a line or block of code, I'll use my mouse to draw the eye, or temporarily highlight it.&lt;/p&gt;

&lt;p&gt;While I love Intellisense in my normal code flow, it can be very distracting during tutorials (and it took me awhile to figure out how to dismiss it, so you'll see it interfering in my earlier lessons!). There are several options of how to handle hiding these popups.&lt;/p&gt;

&lt;p&gt;My preference of setting &lt;code&gt;"editor.quickSuggestionsDelay": 1500&lt;/code&gt; essentially means that at my normal typing speed, Intellisense and other types of suggestion popups are not likely to appear. But, the one type I occasionally want is Emmet. So with this setting, if I wait 1500ms (1.5 seconds) I can still have Emmet access. &lt;/p&gt;

&lt;p&gt;If you'd rather completely disable all suggestion popups, you can instead set &lt;code&gt;"editor.quickSuggestions": false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The final three settings help hide workspace clutter. If you were not familiar with the names, the &lt;code&gt;activityBar&lt;/code&gt; is the side icon menu, and the &lt;code&gt;statusBar&lt;/code&gt; is the message panel that by default displays across the bottom of VSCode.&lt;/p&gt;

&lt;p&gt;If you don't normally have word wrapping turned on, you may also want to add &lt;code&gt;"editor.wordWrap": "on"&lt;/code&gt; for your lessons to prevent line-lengths exceeding the editor width, which is reduced from the increased font size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-workspace-cleanup" class="anchor"&gt;
  &lt;/a&gt;
  Additional Workspace Cleanup
&lt;/h3&gt;

&lt;p&gt;One item you are not able to control via &lt;code&gt;settings.json&lt;/code&gt; is what's visible in the sidebar. But, you can change it by clicking the "three dots" menu next to the "Explorer" title.&lt;/p&gt;

&lt;p&gt;I tend to hide all but the "Folders" during a lesson:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22vI1XwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ohscmogs7rx2yd9n2wlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22vI1XwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ohscmogs7rx2yd9n2wlz.png" alt="Preview of where to access the menu to hide what's visible in the sidebar, as described prior"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And while you also can't hide the sidebar in your settings, I recommend learning the keyboard shortcut to quickly toggle it as you move through your lesson. You can also hide it via the menu under View &amp;gt; Appearance &amp;gt; Show Side Bar (click to toggle it).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-extension-explorer-exclude" class="anchor"&gt;
  &lt;/a&gt;
  Recommended Extension: Explorer Exclude
&lt;/h3&gt;

&lt;p&gt;Usually there are extra files - or perhaps sensitive files - you don't want to display during your lessons.&lt;/p&gt;

&lt;p&gt;Examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vscode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To allow clean up of those, install the extension &lt;a href="https://marketplace.visualstudio.com/items?itemName=RedVanWorkshop.explorer-exclude-vscode-extension"&gt;Explorer Exclude&lt;/a&gt; which will create an additional "Hidden Items" Explorer panel where you can add files, file types, and directories to hide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjust-invasive-extension-settings" class="anchor"&gt;
  &lt;/a&gt;
  Adjust Invasive Extension Settings
&lt;/h3&gt;

&lt;p&gt;There are some other extensions that may add additional clutter that you'll want remove from your lesson view. To do this, find and select the extension, and then select the dropdown next to "Disable" to select "Workspace".&lt;/p&gt;

&lt;p&gt;For myself, I disable GitLens and stylelint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screen-display-settings" class="anchor"&gt;
  &lt;/a&gt;
  Screen Display Settings
&lt;/h2&gt;

&lt;p&gt;Now that VSCode is set up, you'll want to prepare your screen for recording.&lt;/p&gt;

&lt;p&gt;First, it's helpful to adjust your screen resolution to a 16x9 ratio. Egghead recommends either 1280x720 or 1920x1080.&lt;/p&gt;

&lt;p&gt;If you're on a Mac, you may need to find a utility to help make that adjustment. I use &lt;a href="https://www.madrau.com/"&gt;SwitchResX&lt;/a&gt; (small one-time purchase).&lt;/p&gt;

&lt;p&gt;Next, I set VSCode to fullscreen. If I need the browser as well, I position it to share the minimum amount of space it needs to show the content to allow the code as much room as possible &lt;em&gt;most of the time&lt;/em&gt;. This tends to flex both between and even during lessons since I tend to share responsive design techniques.&lt;/p&gt;

&lt;p&gt;If I need Terminal, I only allow it into view when I'm actively using it to explain a lesson concept. And when in use, I (try to remember to) drag it up to about halfway just to help it take focus vs. the code.&lt;/p&gt;

&lt;p&gt;Remember: The best part of screencasting is you can edit your mistakes! You can also edit transitions if you need to flip between desktops to check your reference code and notes (if you usually use only a laptop screen, like me).&lt;/p&gt;

&lt;p&gt;I like to set up my virtual desktops on my Mac so that my reference code and notes are to the right of my main recording screen. Being consistent helps me stay in the flow as I move through my lesson but always have quick access to the reference material.&lt;/p&gt;




&lt;p&gt;I hope these tips help you feel prepared to record your screencast. Drop a comment if you have other tips, or additional questions!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to check out &lt;a href="https://5t3ph.dev/egghead"&gt;my front-end lessons on egghead&lt;/a&gt;, and &lt;a href="https://twitter.com/5t3ph"&gt;follow @5t3ph on Twitter&lt;/a&gt; for front-end web development tips and tutorials.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>vscode</category>
    </item>
    <item>
      <title>What is fork() system call and how to fork using Python</title>
      <author>Javed Shaikh</author>
      <pubDate>Tue, 26 Jan 2021 02:35:22 +0000</pubDate>
      <link>https://dev.to/shaikh/what-is-fork-system-call-and-how-to-fork-using-python-1ide</link>
      <guid>https://dev.to/shaikh/what-is-fork-system-call-and-how-to-fork-using-python-1ide</guid>
      <description>&lt;p&gt;Before going into fork, lets understand what is process.  A &lt;strong&gt;process&lt;/strong&gt; in computer term is a program being executed currently by a computer. Each process is unique and can be identified by its PID or process ID.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note: All the examples and demo codes shown below were tried on Ubuntu 20.04 LTS and Python v3.8.5.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visit my Github page for all the demo code snippets  &lt;a href="https://github.com/jaqsparow/fork-demos"&gt;https://github.com/jaqsparow/fork-demos&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-we-will-learn-in-this-post" class="anchor"&gt;
  &lt;/a&gt;
  What we will learn in this post?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What is fork 💡&lt;/li&gt;
&lt;li&gt;How to call fork in python 📗&lt;/li&gt;
&lt;li&gt;How to get process id or PID in Python 📙 &lt;/li&gt;
&lt;li&gt;How to identify parent and child process 📕&lt;/li&gt;
&lt;li&gt;Examples with code snippets 💻 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction-what-is-fork-system-call" class="anchor"&gt;
  &lt;/a&gt;
  Introduction : What is fork system call?
&lt;/h3&gt;

&lt;p&gt;Fork is one of the most important concept in Unix and Linux operating system. In short note, fork is nothing but cloning a process. That means fork will create a new process with exact copy of calling process. So when a program encounters a fork() system call, it will create another process with same copy of memory. So here comes the concept of parent and child process.&lt;/p&gt;

&lt;p&gt;The main or first process which calls fork and creates a new process is called &lt;strong&gt;parent process&lt;/strong&gt;. The new process created by fork is known as &lt;strong&gt;child process&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-identify-parent-and-child-process" class="anchor"&gt;
  &lt;/a&gt;
  How to identify parent and child process?
&lt;/h3&gt;

&lt;p&gt;Since both processes child and parent have exact same copy of memory, then comes the question how can we identify which of them is parent and which one is child. As I mentioned above, each process has unique ID known as process ID or PID which can be used to differentiate among processes. &lt;/p&gt;

&lt;p&gt;To identify parent and child process, we need to check the return code of fork system call. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#return-code-of-fork" class="anchor"&gt;
  &lt;/a&gt;
  Return code of fork()
&lt;/h4&gt;

&lt;p&gt;Return code of fork system call determines the parent or child process.&lt;br&gt;
When the parent process calls fork, fork returns ** PID of child process just created** to parent process and **0 **to child process. So basically if return code from fork call is zero, then its child process and if its a positive value, then it must be the parent process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;ZERO&lt;/strong&gt; If return code is 0, then it must be the child process&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A positive value&lt;/strong&gt; , If return code is positive value (or child's PID), then its parent process&lt;/li&gt;
&lt;li&gt;*&lt;em&gt;Negative *&lt;/em&gt;, If return code is negative, then child process creation is failed and unsuccessful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PR4g8zmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1603476927418/IDJMNLLyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PR4g8zmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1603476927418/IDJMNLLyf.png" alt="fork.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-fork-using-python" class="anchor"&gt;
  &lt;/a&gt;
  How to fork using Python?
&lt;/h3&gt;

&lt;p&gt;Python's &lt;strong&gt;os&lt;/strong&gt; module provides a function &lt;strong&gt;fork()&lt;/strong&gt; to create a child process. To know the PID of any process, use function &lt;strong&gt;getpid()&lt;/strong&gt; from &lt;strong&gt;os&lt;/strong&gt; module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now lets do some demos to understand whats going on&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-1-to-check-process-id-of-any-process" class="anchor"&gt;
  &lt;/a&gt;
  DEMO 1: To check process ID of any process
&lt;/h4&gt;

&lt;p&gt;In below example we are just checking how getpid() can be used to get the PID of current process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'I am the only process, My PID:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;demo1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axzP7QOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1603465824199/6lUSzeXhS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axzP7QOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1603465824199/6lUSzeXhS.png" alt="demo1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-2-create-one-child-process-using-fork" class="anchor"&gt;
  &lt;/a&gt;
  DEMO 2: Create one  child process using fork()
&lt;/h4&gt;

&lt;p&gt;In below example we are printing process ID before and after fork() call. That means before fork, we have one process and after call we got another new process with total of 2 processes. &lt;/p&gt;

&lt;p&gt;Lets check the output of below snippets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Before calling fork(),PID: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'After calling fork(), PID: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;demo2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here goes output: -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;shaikh&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Jupyter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt; &lt;span class="n"&gt;demos&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;demo2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;Before&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;PID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;6837&lt;/span&gt;
&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;PID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;6837&lt;/span&gt;
&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;PID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;6838&lt;/span&gt;
&lt;span class="n"&gt;shaikh&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Jupyter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt; &lt;span class="n"&gt;demos&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As displayed above, before fork() we only had one process with PID 6837 and after fork we have a new process with PID 6838. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-3-to-identify-parent-and-child" class="anchor"&gt;
  &lt;/a&gt;
  Demo 3: To identify parent and child
&lt;/h4&gt;

&lt;p&gt;Lets see, how we can identify parent and child programmatically. As mentioned in the last section, that if return code from fork is zero, then its child process and if its a positive value then its parent process. Lets check the same here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Before calling fork(),PID: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'I am child, PID: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'I am parent,PID:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Child process creation failed!!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;demo3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@ubuntu:~/Jupyter/fork demos&lt;span class="nv"&gt;$ &lt;/span&gt;python3 demo3.py
Before calling fork&lt;span class="o"&gt;()&lt;/span&gt;,PID:  7316
I am parent,PID: 7316
I am child, PID:  7317
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets understand what happened above. Before fork we had only one process with PID 7316 and the moment it called fork(), we got another process. Each of those processes have different copy of return code &lt;strong&gt;rc&lt;/strong&gt;. The parent has rc with positive value (PID of child process) and child has the rc equals to &lt;strong&gt;zero&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-4-lets-create-two-child-process" class="anchor"&gt;
  &lt;/a&gt;
  Demo 4: Lets create two child process
&lt;/h4&gt;

&lt;p&gt;In below example, we are calling fork() twice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo4&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#No fork, only one process
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Before any fork,  PID:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c1"&gt;#First fork
&lt;/span&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'After first fork, PID:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c1"&gt;#Second fork
&lt;/span&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'After second fork,PID:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;demo4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here goes the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@ubuntu:~/Jupyter/fork demos&lt;span class="nv"&gt;$ &lt;/span&gt;python3 demo4.py
Before any fork,  PID: 7471
After first fork, PID: 7471
After first fork, PID: 7472
After second fork,PID: 7471
After second fork,PID: 7473
After second fork,PID: 7472
After second fork,PID: 7474
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Before first fork there was only one process&lt;/li&gt;
&lt;li&gt;After first fork, total processes  are two &lt;/li&gt;
&lt;li&gt;After second call, total processes are four&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If we call fork 3 times, guess the number of processes that will be created in the comment section 🙂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#demo-5-lets-do-it-for-fun" class="anchor"&gt;
  &lt;/a&gt;
  Demo 5: Lets do it for fun
&lt;/h4&gt;

&lt;p&gt;Below example will show that after fork call both parent and child will have different copies of variable &lt;strong&gt;num&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo5&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'num: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;demo5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And guess the output 🙂&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@ubuntu:~/Jupyter/fork demos&lt;span class="nv"&gt;$ &lt;/span&gt;python3 demo5.py
num:  7825
num:  0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So in above code, only parent process can go inside &lt;strong&gt;if&lt;/strong&gt; statement because it has the positive response code which is PID of child process. Since &lt;strong&gt;rc&lt;/strong&gt; for child is &lt;strong&gt;ZERO&lt;/strong&gt;, it will still have the original copy of &lt;strong&gt;num&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Hope this was fun and interesting learning 🙂. fork is very common way to create a child process in any Linux operating system. It is being used to create multiple processes and the most common use case is web server that forks a new process on each http request.&lt;/p&gt;

&lt;p&gt;Be careful when you use fork and make sure you have exited the process successfully after completion of a task else there will be high memory and cpu usage and may create memory leak situation which is called &lt;strong&gt;fork bomb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the demos are in my GitHub page.  &lt;a href="https://github.com/jaqsparow/fork-demos"&gt;Click here to visit&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www2.cs.uregina.ca/~hamilton/courses/330/notes/unix/fork/fork.html"&gt;http://www2.cs.uregina.ca/~hamilton/courses/330/notes/unix/fork/fork.html&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://people.cs.pitt.edu/~aus/cs449/ts-lecture14.pdf"&gt;http://people.cs.pitt.edu/~aus/cs449/ts-lecture14.pdf&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#similar-posts" class="anchor"&gt;
  &lt;/a&gt;
  Similar posts
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt; How to manage processes in Linux &lt;a href="https://shaikhu.com/how-to-manage-background-processes-in-linux"&gt;All about process&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;How to monitor CPU utilization in Linux  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux"&gt;cpu utilization&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;How to schedule jobs using crontab  &lt;a href="https://shaikhu.com/how-to-schedule-and-manage-tasks-using-crontab"&gt;How to use crontab&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>python</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Web Crawling in Python: Dive Into Beautiful Soup</title>
      <author>Whiteboarding with Erik</author>
      <pubDate>Mon, 25 Jan 2021 23:43:06 +0000</pubDate>
      <link>https://dev.to/erikhei/web-crawling-in-python-dive-into-beautiful-soup-4bdd</link>
      <guid>https://dev.to/erikhei/web-crawling-in-python-dive-into-beautiful-soup-4bdd</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/erikhei/help-pierre-the-py-pirate-solve-this-knapsack-problem-7jo"&gt;&amp;lt; Week 17: Knapsack&lt;/a&gt; | &lt;a href="https://github.com/erik-hei/whiteboarding-with-erik/blob/master/misc/web_scraping.py"&gt;View Solution on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJu9lL-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.sndimg.com/food/image/upload/c_thumb%2Cq_80%2Cw_562%2Ch_316/v1/img/recipes/11/21/33/picZciKrq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJu9lL-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.sndimg.com/food/image/upload/c_thumb%2Cq_80%2Cw_562%2Ch_316/v1/img/recipes/11/21/33/picZciKrq.jpg" alt="alphabet soup"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(Image: Food.com)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What is Beautiful Soup? Something your mom makes for you on a cold January day? I hope so. Beautiful Soup is a webscraping Python library, and however difficult you thought webscraping would be, Beatiful Soup makes it so much easier. For instance, I used it on one &lt;a href="https://github.com/erik-hei/lyrical"&gt;project&lt;/a&gt;, when I had to scrape the Genius website, since their API doesn't actually provide song lyrics (I know right? You had one job, Genius). &lt;/p&gt;

&lt;p&gt;Let's look at a sample technical interview question:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Crawl a webpage and print the most common word with 
# the count of that word.

# Page to crawl:
# https://en.wikipedia.org/wiki/Microsoft

# Only words from the section “history” should be accounted for.

# Example of the expected result
#     # of occurrences
# The 205
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We're given the Microsoft wikipedia page, and we want to find the most common word in the "history" section. So let's get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-setup-and-installation" class="anchor"&gt;
  &lt;/a&gt;
  1. Setup and Installation
&lt;/h2&gt;

&lt;p&gt;First we need to import Beautiful Soup. Install from the command line via &lt;code&gt;pip3 install bs4&lt;/code&gt; (or however you have pip configured). Check the &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;documentation&lt;/a&gt; if you're having issues with installation. &lt;/p&gt;

&lt;p&gt;Then, let's require our library at the top of the code. Here's everything we'll need:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from bs4 import BeautifulSoup, Tag
import requests

from collections import defaultdict
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Next, we're ready to define our function.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def find_most_common():
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#2-get-the-page" class="anchor"&gt;
  &lt;/a&gt;
  2. Get the Page
&lt;/h2&gt;

&lt;p&gt;Let's get our page and parse it with Beautiful soup. To get the page, we use the &lt;code&gt;requests&lt;/code&gt; library:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  page = requests.get("https://en.wikipedia.org/wiki/Microsoft")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Next, we parse the page text using Beautiful Soup.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  soup = BeautifulSoup(page.text, "html.parser")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;How do we get just the history section? We have to take a look at the HTML of the page. There's a lot of random-looking gibberish, which I've tried to clean up:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h2&amp;gt;
    &amp;lt;span class="mw-headline" id="History"&amp;gt;History&amp;lt;/span&amp;gt;
&amp;lt;/h2&amp;gt;
&amp;lt;div ...&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;div ...&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;h3&amp;gt;
    &amp;lt;span ...&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class="mw-headline" id="1972–1985:_Founding"&amp;gt;1972–1985: Founding&amp;lt;/span&amp;gt;
&amp;lt;/h3&amp;gt;
.
.
.
&amp;lt;p&amp;gt;Childhood friends &amp;lt;a href="/wiki/Bill_Gates" title="Bill Gates"&amp;gt;Bill Gates&amp;lt;/a&amp;gt; and &amp;lt;a href="/wiki/Paul_Allen" title="Paul Allen"&amp;gt;Paul Allen&amp;lt;/a&amp;gt; sought to make a business using their skills in &amp;lt;a href="/wiki/Computer_programming" title="Computer programming"&amp;gt;computer programming&amp;lt;/a&amp;gt;.....
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;For some reason, Wikipedia seems to have all their content in one div. This means that the "history" section is not its own div, but a header and some stuff inside a parent div, which contains all the sections. To get only the history section, the best we can do for now is to just grab that header and everything after it. We grab the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag with ID "History", and then go to its parent, the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;. To get everything after it, we can use the BeautifulSoup notation, &lt;code&gt;next_siblings&lt;/code&gt;. Altogether:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  history = soup.find(id="History").parent.next_siblings
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#3-count-the-words" class="anchor"&gt;
  &lt;/a&gt;
  3. Count the Words
&lt;/h2&gt;

&lt;p&gt;Let's initialize a couple variables. We'll need the most common word and the number of times it appears. We'll also use a dictionary to store the count of each word. If you've been following this blog, you've probably guessed that we'll use a default dicitonary for this (if you don't remember, we can set the dictionary's default type to integers. That way, if we access a key that doesn't exist, the default value is already 0). &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  max_count = 0
  max_word = ""
  dd = defaultdict(int)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we're ready to crawl. Let's loop through &lt;code&gt;history&lt;/code&gt; and look at each element, &lt;code&gt;elem&lt;/code&gt;. However, Beautiful Soup sometimes returns something called a "Navigable String" instead of an element. We'll filter out everything that isn't an element using the &lt;code&gt;isinstance()&lt;/code&gt; method from our library.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  for elem in history:
    if isinstance(elem, Tag):
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let's think of what happens next. We need to look at the text for each element in &lt;code&gt;history&lt;/code&gt;, and count the instance of each word. However, remember, we need to stop when we're no longer in the history section. The next section is the same div, but starts with an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tag. Then, we can end the function by printing the most common word and its count. I'll return &lt;code&gt;max_count&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  for elem in history:
    if isinstance(elem, Tag):
      if elem.name == "h2":
        print(max_word, "is the most common, appearing", max_count, "times.")
        return max_count
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But what if it's not the end of the section? We need to get the text by calling the BeautifulSoup &lt;code&gt;get_text()&lt;/code&gt; method, and then split it into words by calling &lt;code&gt;split()&lt;/code&gt; on each space. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      words = elem.get_text().split()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What's next? Loop through each word and update its count in the dictionary. Since we're using a default dictionary, we don't have to check to see if the word is already in there before adding 1 to it. Also, don't forget to update the &lt;code&gt;max_word&lt;/code&gt; and &lt;code&gt;max_count&lt;/code&gt; if we find a word that's more common than what we had previously. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      for word in words:
        dd[word] += 1
        if dd[word] &amp;gt; max_count:
          max_count = dd[word]
          max_word = word 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And that's it! The code should work...unless Wikipedia changes the layout of their site. Let's add a final check at the end in case that happens. Altogether:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from bs4 import BeautifulSoup, Tag
import requests

from collections import defaultdict

def find_most_common():
  page = requests.get("https://en.wikipedia.org/wiki/Microsoft")
  soup = BeautifulSoup(page.text, "html.parser")
  history = soup.find(id="History").parent.next_siblings
  max_count = 0
  max_word = ""
  dd = defaultdict(int)

  for elem in history:
    if isinstance(elem, Tag):
      if elem.name == "h2":
        print(max_word, "is the most common, appearing", max_count, "times.")
        return max_count
      words = elem.get_text().split()
      for word in words:
        dd[word] += 1
        if dd[word] &amp;gt; max_count:
          max_count = dd[word]
          max_word = word

  return "Error"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#try-it-out" class="anchor"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;This function prints the result, so we can simply run it with &lt;code&gt;find_most_common()&lt;/code&gt;. Running the code gives us the result:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;the is the most common, appearing 221 times.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And there you have it! Granted, this function only works for this specific page, at the time of writing this--the main problem with web crawling is that it can break if the website owner alters their content in the slightest fashion. We also didn't account for casing or punctuation, something you may want to try and implement on your own. Just a few things to think about. See you next time!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/erikhei/help-pierre-the-py-pirate-solve-this-knapsack-problem-7jo"&gt;&amp;lt; Week 17: Knapsack&lt;/a&gt; | &lt;a href="https://github.com/erik-hei/whiteboarding-with-erik/blob/master/misc/web_scraping.py"&gt;View Solution on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Erik Heikkila is a Teaching Assistant at General Assembly. This blog is not associated with GA.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to use GraphQL on the Client-side with React and TypeScript</title>
      <author>Ibrahima Ndaw</author>
      <pubDate>Mon, 25 Jan 2021 23:29:55 +0000</pubDate>
      <link>https://dev.to/takeshape/how-to-use-graphql-on-the-client-side-with-react-and-typescript-93n</link>
      <guid>https://dev.to/takeshape/how-to-use-graphql-on-the-client-side-with-react-and-typescript-93n</guid>
      <description>&lt;p&gt;In this tutorial, we will be looking at using GraphQL on the client-side with React, TypeScript, and Apollo Client. This article is a follow-up of &lt;a href="https://www.takeshape.io/articles/how-to-use-typescript-with-graphql/"&gt;How to use TypeScript with GraphQL (server-side)&lt;/a&gt; in which we built a GraphQL API using TypeScript and TypeGraphQL. We’ll be using the API we created in that article, so if you haven’t already, you may want to catch up before diving into the client-side because. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This guide assumes that you have basic experience with React and TypeScript. You will learn how to use GraphQL in a React App to interact with a GraphQL API and then retrieve the data using Apollo Client. We’ll be building a Todo App that relies on the API to add and fetch the Todos.&lt;/p&gt;

&lt;p&gt;You can preview the GraphQL API in this &lt;a href="https://codesandbox.io/s/typegraphql-api-tyoku"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up" class="anchor"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h2&gt;

&lt;p&gt;To start a new React App, execute this command on the command-line-interface (CLI):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app react-typescript-graphql
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we have to install the Apollo and GraphQL libraries. The Apollo Client will allow us to communicate with a GraphQL API. Open the React App directory in your CLI and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add apollo-boost @apollo/react-hooks graphql
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or for &lt;code&gt;npm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;apollo-boost @apollo/react-hooks graphql
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let’s structure the project as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;src
| ├── components
| |  ├── AddTodo.tsx
| |  └── Todo.tsx
| ├── &lt;span class="nb"&gt;type&lt;/span&gt;
| |  └── Todo.ts
| ├── App.tsx
| ├── useRequest.ts
| ├── graphql.ts
| ├── index.ts
| └── index.css
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are two files to take special notice of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useRequest.ts&lt;/code&gt; is a custom hook that helps fetch data using Apollo Client.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;graphql.ts&lt;/code&gt; holds the GraphQL logic to interact with the API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this folder structure in place, we can get our hands dirty and create our TypeScript Types!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-typescript-types" class="anchor"&gt;
  &lt;/a&gt;
  Creating the TypeScript Types
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;types/Todo.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ITodos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ITodoMutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let’s explore what each type describes. The &lt;code&gt;ITodo&lt;/code&gt; type describes the shape of a Todo. We use the &lt;code&gt;ITodo&lt;/code&gt; type to create &lt;code&gt;ITodos&lt;/code&gt; which returns an array of Todos from the API. Finally, we rely on &lt;code&gt;ITodo&lt;/code&gt; to define the type expected by the GraphQL mutation query &lt;code&gt;ITodoMutation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we’ll add Apollo Client into our React App.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-react-to-apollo-client" class="anchor"&gt;
  &lt;/a&gt;
  Connecting React to Apollo Client
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-boost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/react-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://tyoku.sse.codesandbox.io/graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ApolloProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ApolloProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After importing &lt;code&gt;ApolloClient&lt;/code&gt;, we create a new instance of it and pass in the URL of the GraphQL API. To connect it with React, we need to pass the &lt;code&gt;client&lt;/code&gt; object to the &lt;code&gt;ApolloProvider&lt;/code&gt; component. Apollo client can now be used to retrieve data from the API.&lt;/p&gt;

&lt;p&gt;Next we’ll use &lt;code&gt;gql&lt;/code&gt; and the hooks provided by Apollo Client to send the GraphQL queries to the API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-graphql-queries" class="anchor"&gt;
  &lt;/a&gt;
  Writing the GraphQL queries
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;graphql.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql-tag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_TODOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  {
    getTodos {
      id
      title
      description
      status
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADD_TODO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  mutation AddTodo($title: String!, $description: String!) {
    addTodo(todoInput: { title: $title, description: $description }) {
      id
      title
      description
      status
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;GET_TODOS&lt;/code&gt; is a GraphQL Query for retrieving all Todos from the API and a GraphQL Mutation &lt;code&gt;ADD_TODO&lt;/code&gt; for adding a new Todo. The mutation query expects a &lt;code&gt;title&lt;/code&gt;, and a &lt;code&gt;description&lt;/code&gt; in order to create a new Todo on the backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetching-the-todos-from-the-graphql-api" class="anchor"&gt;
  &lt;/a&gt;
  Fetching the Todos from the GraphQL API
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useRequest.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DocumentNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/react-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ITodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITodoMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types/Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useTodoQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gqlQuery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITodos&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gqlQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useTodoMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gqlQuery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITodoMutation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gqlQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This custom hook is optional. You can skip it and use the Apollo hooks directly in your components.&lt;/p&gt;

&lt;p&gt;In this file, we first have a function &lt;code&gt;useTodoQuery&lt;/code&gt; that expects a GraphQL Query to fetch all Todos from the API and then returns the data. Next, we use the &lt;code&gt;useTodoMutation&lt;/code&gt; method to create a new Todo based on the data received as a parameter.&lt;/p&gt;

&lt;p&gt;So far, we have connected React and Apollo and created the GraphQL queries to access the API. Next, let’s build the React components to that will consume the returned data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-components" class="anchor"&gt;
  &lt;/a&gt;
  Creating the components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;components/Todo.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../types/Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Todo&lt;/code&gt; component is responsible for the display of a Todo object. It receives the data of type &lt;code&gt;Itodo&lt;/code&gt; and then uses destructuring (JavaScript expression for unpacking values from arrays or objects into distinct variables.) to pull out the &lt;code&gt;title&lt;/code&gt; and the &lt;code&gt;description&lt;/code&gt; of the Todo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;components/AddTodo.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloCache&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/react-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FetchResult&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-boost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTodoMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../useRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ADD_TODO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GET_TODOS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITodoMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITodos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../types/Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITodo&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodoMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_TODO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSaveTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApolloCache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITodoMutation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;FetchResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITodoMutation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cacheData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GET_TODOS&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ITodos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GET_TODOS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;cacheData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Form"&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSaveTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleForm&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Description&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleForm&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add Todo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After importing the &lt;code&gt;useTodoMutation&lt;/code&gt; hook into our component, we pass in the GraphQL mutation query &lt;code&gt;ADD_TODO&lt;/code&gt; as an argument. Next, we handle the data entered by the user with the &lt;code&gt;handleForm&lt;/code&gt; function and &lt;code&gt;useState&lt;/code&gt;. Once the user submits the form, we call the &lt;code&gt;addTodo&lt;/code&gt; method to create the Todo with the mutation query. To preview the Todo created, we need to update the Apollo cache by spreading the old Todos with the new one in an array of Todos.&lt;/p&gt;

&lt;p&gt;We are now able to create and display a list of Todos. Finally, let’s put it all together and use the components in the &lt;code&gt;App.ts&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-the-todos" class="anchor"&gt;
  &lt;/a&gt;
  Showing the Todos
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;App.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GET_TODOS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTodoQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/AddTodo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types/Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodoQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_TODOS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Something went wrong!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Todos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddTodo&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this &lt;code&gt;App&lt;/code&gt; component, we use the &lt;code&gt;useTodoQuery&lt;/code&gt; hook to retrieve all Todos from the GraphQL API. Next, we loop through the response data and display it using the &lt;code&gt;Todo&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;With this step, the app is ready to be tested on the browser. Open the project directory in the CLI and run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If everything works as expected, you should be able to see the React app here: &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ON_4JKAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97BE7739B2275450FC3A3714142956FE1D1377B65D8BD847EAB462957E492AD1_1603457616031_app-preview.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ON_4JKAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97BE7739B2275450FC3A3714142956FE1D1377B65D8BD847EAB462957E492AD1_1603457616031_app-preview.PNG" alt="https://paper-attachments.dropbox.com/s_97BE7739B2275450FC3A3714142956FE1D1377B65D8BD847EAB462957E492AD1_1603457616031_app-preview.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;app-preview&lt;/p&gt;

&lt;p&gt;And that’s it! Our React app is looking good!&lt;/p&gt;

&lt;p&gt;We’ve built a Todo App with React, TypeScript, GraphQL, and Apollo Client. You can preview the finished project in this &lt;a href="https://codesandbox.io/s/react-graphql-typescript-54uye"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we learned how to use GraphQL on the client-side with React, TypeScript, and Apollo Client. We also used the GraphQL API built with TypeGraphQL as a backend to finish up with a full-stack strongly-typed app. A very exciting stack to try on your next project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Check out these resources to dive deeper into the content of this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo Client React Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/react.html"&gt;React TypeScript Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://graphql.org/learn/"&gt;GraphQL Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Demystifying CORS, CSRF tokens, SameSite &amp; Clickjacking - Web Security</title>
      <author>Michael Z</author>
      <pubDate>Mon, 25 Jan 2021 22:34:32 +0000</pubDate>
      <link>https://dev.to/michi/demystifying-cors-csrf-tokens-samesite-clickjacking-web-security-20n9</link>
      <guid>https://dev.to/michi/demystifying-cors-csrf-tokens-samesite-clickjacking-web-security-20n9</guid>
      <description>&lt;p&gt;One of the best features of the web is its backwards compatibility. But ironically, this also makes the web somewhat insecure by default.&lt;/p&gt;

&lt;p&gt;Understanding the different techniques and attack vectors can be quite complex. While the internet is filled with a lot of correct info, it's also filled with a lot of sparse, outdated, incorrect, or partial information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-dive-in" class="anchor"&gt;
  &lt;/a&gt;
  Before we dive in
&lt;/h2&gt;

&lt;p&gt;This series tackles security on the web, specifically, the browser. CORS, CSRF tokens, SameSite, clickjacking, httpOnly &amp;amp; secure cookies, XSS, CSP, &lt;code&gt;http://&lt;/code&gt;, and all the questions that might come with it: Does SameSite=Lax eliminate CSRF tokens and/or CORS?, Do React/Vue/etc. really protect you from all XSS attack vectors? Do I still need to worry about JSON hijacking? Can I use CSRF tokens with a SPA? etc 🤯&lt;/p&gt;

&lt;p&gt;💡 Please let me know in the comments or through my email (depending on where you see this) if I either missed something, made a mistake, or simply if this helped you better understand this big topic.&lt;/p&gt;

&lt;p&gt;If you don't want to read everything, you can search for the following text in the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each section includes a "TLDR;" portion containing the gist&lt;/li&gt;
&lt;li&gt;Each question starts with a "🤔"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, let's cover CORS, CSRF tokens, SameSite, clickjacking, and JSON hijacking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are primarily interested in the question "Can I use CSRF tokens for a SPA?", this article deal as a prerequisite before being able to answer the question.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-dive-in" class="anchor"&gt;
  &lt;/a&gt;
  Let's dive in
&lt;/h2&gt;

&lt;p&gt;For the scenarios, let's consider that you develop banking software. We focus on two endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /accounts -&amp;gt; to list a users' accounts&lt;/li&gt;
&lt;li&gt;POST /transfer -&amp;gt; to transfer money&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the user to use your software, he has to sign in by the &lt;strong&gt;use of cookies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The whole security dilemma stems from one of your users being tricked to access a phishing site from an attacker.&lt;/p&gt;

&lt;p&gt;Why is this dangerous? Because as of 2021, most modern browsers still send all cookies along with a request. Even in a third-party context like a phishing site. So, since the user has cookies on your bank site, a request to your bank will also send along those cookies that are used to identify them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on-the-phishing-site-can-the-attacker-put-malicious-javascript-to-both-get-your-accounts-get-request-as-well-as-transfer-money-post-request-both-using-a-simple-ajax-request" class="anchor"&gt;
  &lt;/a&gt;
  🤔 On the phishing site, can the attacker put malicious JavaScript to both get your accounts (GET request), as well as transfer money (POST request), both using a simple AJAX request?
&lt;/h4&gt;

&lt;p&gt;The answer is: No! Unless the bank server explicitly allows it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-cors" class="anchor"&gt;
  &lt;/a&gt;
  Introducing CORS
&lt;/h3&gt;

&lt;p&gt;CORS, or Cross-Origin Resource Sharing, is a &lt;strong&gt;browser&lt;/strong&gt; security feature which prevents AJAX requests in a third-party context.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The option can be tweaked by setting various HTTP headers since sometimes you really want to allow certain third parties to communicate with the server (e.g. SPA app &amp;lt;&amp;gt; API server). So if the bank accidentally set the wrong CORS headers, it can be a big problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-does-cors-protect-the-user-from-ajax-requests" class="anchor"&gt;
  &lt;/a&gt;
  🤔 How does CORS protect the user from AJAX requests?
&lt;/h4&gt;

&lt;p&gt;Let's first cover the HTTP method GET:&lt;/p&gt;

&lt;p&gt;CORS will prevent the attacker from accessing the response of the request in JavaScript. Additionally, you will see a CORS violation error in the console.&lt;/p&gt;

&lt;p&gt;Note however that whatever the bank server does for the GET route will actually be executed! This is because the browser doesn't know the CORS headers until it gets the response.&lt;/p&gt;

&lt;p&gt;This is usually not a problem as in GET requests, all you do is &lt;em&gt;get&lt;/em&gt; information. You should not perform any destructive actions in a GET request like deleting a database entry.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-about-post-put-delete-and-patch-requests-these-are-all-destructive-actions-do-i-need-to-worry" class="anchor"&gt;
  &lt;/a&gt;
  🤔 What about POST, PUT, DELETE and PATCH requests? These are all destructive actions, do I need to worry?
&lt;/h4&gt;

&lt;p&gt;No! In those requests, the browser will first do a so-called preflight request using the HTTP method &lt;code&gt;OPTION&lt;/code&gt;. This will not execute any code but will return the CORS headers. The browser will then judge if it is safe to send the real request or not.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that this is only an issue because the cookie in the browser gets sent along. So if an attacker tries to send a CURL request to your bank from a server script, where CORS doesn't apply, he can't do much here. (as long as he doesn't have your cookie..., more on that another time)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TLDR;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CORS prevents AJAX requests in a third-party context&lt;/li&gt;
&lt;li&gt;For GET requests, it does so by disallowing JavaScript to read the response, but your server code for the route still has to run first&lt;/li&gt;
&lt;li&gt;For other HTTP verbs, it sends a preflight request &lt;code&gt;OPTION&lt;/code&gt; first to avoid running any destructive action on your server.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;But an attacker may have other tricks up his sleeve.&lt;/p&gt;

&lt;p&gt;Instead of performing an API request they can put a &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; on their phishing site with the action pointing to your site and submit it automatically. This will perform top-level navigation to your site (means, it will literally take you to your site in the browser), sending the cookies along with it. That's, of course, problematic for destructive actions, such as the money transfer endpoint at our bank.&lt;/p&gt;

&lt;p&gt;This is called Cross-Site Request Forgery (CSRF), and since it's not an AJAX request but works through top-level navigation, CORS will not protect you from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-csrf-tokens" class="anchor"&gt;
  &lt;/a&gt;
  Introducing CSRF tokens
&lt;/h2&gt;

&lt;p&gt;This is not an in-built browser feature, but a common solution for this problem.&lt;/p&gt;

&lt;p&gt;It works like this:&lt;br&gt;
Every &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; on the bank has to include a CSRF token like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"C4N-U_R34D+T#15?"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Of course, this token is not just hardcoded but changes every time you refresh the page.&lt;/p&gt;

&lt;p&gt;Using frameworks, the token is usually added to the &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ csrfField() }}
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now when the attacker puts the &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; on his phishing site, he won't have the CSRF token, so the form submission will always fail with a &lt;code&gt;403 forbidden&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-might-be-asking-couldnt-the-attacker-have-a-server-script-to-circumvent-cors-to-fetch-the-contents-of-any-of-the-banks-site-with-a-raw-ltform-gt-endraw-extract-the-csrf-token-from-the-html-put-it-in-his-evil-form-and-submit-it-just-fine" class="anchor"&gt;
  &lt;/a&gt;
  🤔 You might be asking, couldn't the attacker have a server script (to circumvent CORS) to fetch the contents of any of the bank's site with a &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt;, extract the CSRF token from the HTML, put it in his evil form and submit it just fine?
&lt;/h4&gt;

&lt;p&gt;The answer is: No! That's because CSRF tokens are bound to the users' session. So &lt;strong&gt;your&lt;/strong&gt; CSRF tokens won't work for &lt;strong&gt;me&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In case you are not using a framework and you implement CSRF tokens using a standalone library, you have to make sure you &lt;strong&gt;integrate&lt;/strong&gt; them correctly to prevent the above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#do-i-still-need-cors-now-that-i-have-csrf-tokens" class="anchor"&gt;
  &lt;/a&gt;
  🤔 Do I still need CORS now that I have CSRF tokens?
&lt;/h4&gt;

&lt;p&gt;Yes! While the attacker would also need your CSRF token to do an AJAX request, he won't need it to perform GET requests to get your accounts for example. Technically you could protect GET requests with a token, but usually, you want your user to just access &lt;code&gt;/accounts&lt;/code&gt;, bookmark it and open it later again, without any token in the URL that expires after a short while.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-only-communicate-to-my-server-through-an-api-not-through-the-browsers-raw-ltform-gt-endraw-element-do-i-need-to-be-careful" class="anchor"&gt;
  &lt;/a&gt;
  🤔 I only communicate to my server through an API, not through the browser's &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; element. Do I need to be careful?
&lt;/h4&gt;

&lt;p&gt;Yes, because the attacker can still put a &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; on his evil site with an action pointing to your API endpoint. Whether you use APIs or not is not important.&lt;/p&gt;

&lt;p&gt;TLDR;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSRF tokens are a common, custom solution to prevent CSRF which is done through the &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; element &amp;amp; top-level navigation instead of AJAX&lt;/li&gt;
&lt;li&gt;They are coupled with the users' session&lt;/li&gt;
&lt;li&gt;They also prevent POST, PUT, PATCH and DELETE AJAX requests, but usually not GET requests. Keep on using CORS!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To put it bluntly, it kind of sucks that we have to implement CSRF tokens on every website. While my explanation (hopefully :D) was simple, in practice there are a few complications like SPAs, token expiry, etc.&lt;/p&gt;

&lt;p&gt;Wouldn't it be great if browsers just wouldn't send cookies when the request, AJAX or not, is in a third-party context?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-samesite" class="anchor"&gt;
  &lt;/a&gt;
  Introducing SameSite
&lt;/h2&gt;

&lt;p&gt;SameSite is a cookie attribute with which you can specify when a cookie should be sent along with a request.&lt;/p&gt;

&lt;p&gt;It can be set to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;None: The cookies will always be sent no matter the context. This only works for cookies with the "secure" flag&lt;/li&gt;
&lt;li&gt;Lax: The cookie will not be sent for AJAX requests in a third-party context, as well as top-level navigations ( requests) using the POST method. &lt;strong&gt;This is what we want!&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Strict: Same as Lax, but the cookie will also not be sent for top-level navigations using the GET method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This sounds very good, doesn't it! And the good news is that browsers have already started to make SameSite=Lax the default option, giving the web more security out of the box. Hopefully, all vendors will implement this soon.&lt;/p&gt;

&lt;p&gt;If you are confused about "Strict"..., it's really super strict. It means if you click a link on site A to site B (where you are logged in), the cookie won't be sent along and you won't be logged in on site B (You would have to refresh or click any link on site B to appear logged in again).&lt;/p&gt;

&lt;p&gt;So, let's tackle a few common questions!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-considered-same-site" class="anchor"&gt;
  &lt;/a&gt;
  🤔 What is considered "same" site?
&lt;/h4&gt;

&lt;p&gt;Basically the apex domain (the TLD and the part before it). So if you have &lt;code&gt;http://client.bank.com&lt;/code&gt; and &lt;code&gt;https://www.api.bank.com&lt;/code&gt;, it still counts as "same-site".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wait-so-what-about-sites-like-github-pages-its-all-under-raw-githubio-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  🤔 Wait, so what about sites like GitHub pages? It's all under &lt;code&gt;github.io&lt;/code&gt;...
&lt;/h4&gt;

&lt;p&gt;There is a &lt;a href="https://publicsuffix.org/"&gt;public suffix list&lt;/a&gt; to fix those.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cors-stands-for-crossorigin-whats-the-difference-between-origin-and-site" class="anchor"&gt;
  &lt;/a&gt;
  🤔 CORS stands for "cross-origin...". What's the difference between "origin" and "site"?
&lt;/h4&gt;

&lt;p&gt;We already covered the meaning of "site". "origin" is a lot stricter. Both sites need to have the same scheme(HTTP/HTTPS), port, and subdomain.&lt;/p&gt;

&lt;p&gt;More info here: &lt;a href="https://web.dev/same-site-same-origin/"&gt;https://web.dev/same-site-same-origin/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#do-we-still-need-csrf-tokens-with-samesitelaxstrict" class="anchor"&gt;
  &lt;/a&gt;
  🤔 Do we still need CSRF tokens with SameSite=Lax/Strict?
&lt;/h4&gt;

&lt;p&gt;It depends. SameSite is a rather new feature and is not in legacy browsers or even older versions of modern browsers. If you can allow it, block the use of legacy browsers for your website.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#do-we-still-need-to-be-protective-about-cors" class="anchor"&gt;
  &lt;/a&gt;
  🤔 Do we still need to be protective about CORS?
&lt;/h4&gt;

&lt;p&gt;If you support not up-to-date browsers: Yes!&lt;br&gt;
If not: Probably..., but why risk it?&lt;/p&gt;

&lt;p&gt;SameSite prevents cookies from being sent in a third-party context. So if you disable CORS, an attacker can send a cookie-free AJAX request in the browser, the same way they could send a CURL request from a server script. Sounds like we don't need CORS anymore right?&lt;/p&gt;

&lt;p&gt;Let's not forget one thing: The web doesn't just work using cookies. A site could also deliver different info based on other factors like your IP address for example. Or maybe(?) the browser could return a cached result that actually contains sensitive data.&lt;/p&gt;

&lt;p&gt;I just don't see any benefit in risking it. Unlike CSRF token, which comes with a certain complexity, CORS is just an HTTP header, enabled by default.&lt;/p&gt;

&lt;p&gt;TLDR;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cookie attribute &lt;code&gt;SameSite=Lax&lt;/code&gt; prevents cookies being sent in a third-party context (both API requests and top-level navigation POST requests) making CSRF tokens obsolete&lt;/li&gt;
&lt;li&gt;It's not supported in legacy browsers&lt;/li&gt;
&lt;li&gt;Going forward, &lt;code&gt;SameSite=Lax&lt;/code&gt; will be the default if not explicitly set to something else&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Okay, so we can prevent ajax requests &amp;amp; &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; submissions in a third-party context. But, what if the attacker goes a different route.&lt;/p&gt;

&lt;p&gt;Instead of submitting a form, they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;load the bank site in an iframe&lt;/li&gt;
&lt;li&gt;make it invisible through various CSS rules&lt;/li&gt;
&lt;li&gt;absolutely position a button over the iframe on top of a form submit button inside the iframe.&lt;/li&gt;
&lt;li&gt;give the button the CSS rule "pointer-events: none", so the click gets propagated to the element beneath it (the iframe)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now clicking the button from the attacker will submit the form on the invisible iframe :/&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#clickjacking" class="anchor"&gt;
  &lt;/a&gt;
  Clickjacking
&lt;/h2&gt;

&lt;p&gt;This attack is called clickjacking, and you can get really creative with it, like making a user think he's playing "whack-a-mole" while actually, he's navigating a shopping site for you.&lt;/p&gt;

&lt;p&gt;How to prevent clickjacking?&lt;/p&gt;

&lt;p&gt;If SameSite is set correctly, then the cookies will not be passed in a third-party context, even for iframes. So if the site authenticates using cookies, this makes it much safer.&lt;/p&gt;

&lt;p&gt;But the attacker could still trick you to first sign in, and then do the other stuff...&lt;/p&gt;

&lt;p&gt;You can prevent your page from being embeddable via iframes by setting the following HTTP-header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X-Frame-Options: DENY
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But sometimes, you want your page to be embeddable like a social-media like-button.&lt;/p&gt;

&lt;p&gt;Until recently, the only secure way to do this was to not use iframes and use a link that opens a popup instead.&lt;/p&gt;

&lt;p&gt;But with modern JavaScript, you can detect if your site is 100% visible or not, even in an iframe, using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;intersection observer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see in action how the intersection observer works and more details about this topic, I highly recommend watching this video on the topic: &lt;a href="https://www.youtube.com/watch?v=EIH6IQgwdAc"&gt;https://www.youtube.com/watch?v=EIH6IQgwdAc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TLDR;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clickjacking is an attack that tricks people into unwantedly clicking on a site inside an (invisible) iframe&lt;/li&gt;
&lt;li&gt;You can prevent your site from being embeddable via iframes by setting the header "X-Frame-Options" to "DENY"&lt;/li&gt;
&lt;li&gt;For modern browsers, you can use the intersection observer to make sure your site (in an iframe) is really visible&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Now, before finishing up this post, there is one more attack vector to be aware of, and that is JSON hijacking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json-hijacking" class="anchor"&gt;
  &lt;/a&gt;
  JSON hijacking
&lt;/h2&gt;

&lt;p&gt;This is not a problem in modern browsers, but it's a problem that could surface again with new additions to JavaScript.&lt;/p&gt;

&lt;p&gt;It basically allowed you to circumvent CORS in the browser by loading an API through the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (where CORS doesn't apply), sending along the cookies if SameSite doesn't apply.&lt;/p&gt;

&lt;p&gt;Usually this just executes the script. But by overwriting &lt;code&gt;Array&lt;/code&gt; you were able to listen to native array constructions. So if an array was returned, you could read the contents.&lt;/p&gt;

&lt;p&gt;That's why Facebook starts all their API requests with an infinite &lt;code&gt;for&lt;/code&gt; loop. So the browser never gets to execute the array portion.&lt;/p&gt;

&lt;p&gt;There are some more interesting bits to the story, you can find more details about it &lt;a href="https://dev.to/antogarand/why-facebooks-api-starts-with-a-for-loop-1eob"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Next time, let's tackle the glaring question if CSRF tokens can be used in a SPA or not.&lt;/p&gt;

</description>
      <category>security</category>
    </item>
    <item>
      <title>Chrome Extensions: Making changes to a web page</title>
      <author>Paula Santamaría</author>
      <pubDate>Mon, 25 Jan 2021 22:11:01 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/chrome-extensions-making-changes-to-a-web-page-1n5f</link>
      <guid>https://dev.to/paulasantamaria/chrome-extensions-making-changes-to-a-web-page-1n5f</guid>
      <description>&lt;p&gt;In this post, I will focus on &lt;strong&gt;content scripts&lt;/strong&gt; and how to use them to make changes to a web page. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;main concepts&lt;/strong&gt; we will explore are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using content scripts to make changes to a web page.

&lt;ul&gt;
&lt;li&gt;Attaching HTML&lt;/li&gt;
&lt;li&gt;Adding new styles&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Sending messages between the background script and the content script&lt;/li&gt;
&lt;li&gt;Accessing our extension's resources from the content script&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-example"&gt;The example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#about-content-scripts"&gt;About content scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#lets-get-coding"&gt;Let's get coding!&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-create-a-new-command"&gt;1. Create a new command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-register-the-content-script"&gt;2. Register the content script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-display-the-notification"&gt;3. Display the notification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#done"&gt;Done!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-repo"&gt;The repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-example" class="anchor"&gt;
  &lt;/a&gt;
  The example
&lt;/h1&gt;

&lt;p&gt;For this post's example, I will keep adding features to our initial sample extension: We will use &lt;strong&gt;content scripts&lt;/strong&gt; to display a notification at the bottom right of the currently active page. &lt;br&gt;
We will also rely on what we learned previously in this series: A &lt;strong&gt;command&lt;/strong&gt; will trigger the notification to be handled by our &lt;strong&gt;background script&lt;/strong&gt;. Finally, the background script will &lt;em&gt;message&lt;/em&gt; the &lt;strong&gt;content script&lt;/strong&gt;, to activate the notification showing the title of the page at the bottom-right of the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8sfxlzdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/rD5vZMv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8sfxlzdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/rD5vZMv.gif" alt="A small portion of a DEV.to's web page appears, and the notification is displayed with the text &amp;quot;DEV Community&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#about-content-scripts" class="anchor"&gt;
  &lt;/a&gt;
  About content scripts
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Content scripts are files that &lt;strong&gt;run in the same context as the web page&lt;/strong&gt; the user visited. &lt;/li&gt;
&lt;li&gt;They share access with the page's DOM.&lt;/li&gt;
&lt;li&gt;Within these scripts, we can use &lt;strong&gt;JavaScript&lt;/strong&gt; to access the web page elements, read its contents and make changes. And we can use &lt;strong&gt;CSS&lt;/strong&gt; to add new styles to the web page.&lt;/li&gt;
&lt;li&gt;They allow you to extract information from the page and send it to other scripts or receive messages from our extension.&lt;/li&gt;
&lt;li&gt;Finally, content scripts have access to some of the chrome APIs, which allows us to do stuff like get the current URL, access the extension's storage, etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#lets-get-coding" class="anchor"&gt;
  &lt;/a&gt;
  Let's get coding!
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#1-create-a-new-command" class="anchor"&gt;
  &lt;/a&gt;
  1. Create a new command
&lt;/h2&gt;

&lt;p&gt;In the previous post of this series, we added two commands to our example extension. Now we are going to add a third one.&lt;br&gt;
To do that, first, we will define the command and it's suggested shortcut in the &lt;code&gt;manifest.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Acho, where are we?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"commands"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"bark"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"suggested_key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alt+Shift+3"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Makes Acho bark the title at the bottom right of the current page."&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;....&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;commands&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now, we need to handle our command by listening to the &lt;code&gt;onCommand&lt;/code&gt; event. This should be done in the background script:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// background.js&lt;/span&gt;

&lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;barkTitle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Command &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; not found`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;barkTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;currentWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;tabTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So, once the &lt;code&gt;bark&lt;/code&gt; command is executed, we will send a &lt;em&gt;message&lt;/em&gt; indicating the currently active tab's title. &lt;br&gt;
Now our content script needs to listen to that message and display the notification.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;About Messages&lt;/strong&gt;: Content scripts don't run in the context of the extension but in the context of the web page. They need a way to communicating with the extension. We can do that using &lt;em&gt;messages&lt;/em&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To send a message &lt;strong&gt;to&lt;/strong&gt; a content script, use &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt;  and specify the &lt;code&gt;TabId&lt;/code&gt;. The message will be sent to the content script running in that tab.&lt;/li&gt;
&lt;li&gt;To send a message &lt;strong&gt;from&lt;/strong&gt; a content script, use &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#2-register-the-content-script" class="anchor"&gt;
  &lt;/a&gt;
  2. Register the content script
&lt;/h2&gt;

&lt;p&gt;To create a content script, the first thing we need to do is (yes, you guessed it!) add it to the &lt;code&gt;manifest.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Acho, where are we?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"content_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"matches"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;all_urls&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"content.js"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"content.css"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"web_accessible_resources"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"images/icon32.png"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;content_scripts&lt;/code&gt;: An array of content scripts. We can register multiple scripts, each with different configurations.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;matches&lt;/code&gt;: An array of string expressions that specify which pages will this particular content script be injected into. You can use &lt;code&gt;"matches": ["&amp;lt;all_urls&amp;gt;"]&lt;/code&gt; to inject it in any URL.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;js&lt;/code&gt;: An array of javascript files. These files will handle the logic for our content scripts.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;css&lt;/code&gt;: An array of CSS files. In this case, we will use a CSS file to define our notification styles.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;web_accessible_resources&lt;/code&gt;: A list of resources we will need to access from our content scripts. Since the content script runs in a different context than the extension, any extension resource we want to access must be explicitly made available here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#3-display-the-notification" class="anchor"&gt;
  &lt;/a&gt;
  3. Display the notification
&lt;/h2&gt;

&lt;p&gt;Let's start by adding the logic to &lt;code&gt;content.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Notification body.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acho-notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Notification icon.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images/icon32.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Notification text.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notificationText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notificationText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add to current page.&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sendResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acho-notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notificationText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;notificationText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabTitle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now let's inspect the previous code more carefully:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we create a &lt;code&gt;div&lt;/code&gt;, which will be our notification body. We also assign it a &lt;code&gt;class&lt;/code&gt; that will help us define styles for it later.&lt;/li&gt;
&lt;li&gt;Then, we attach an &lt;code&gt;img&lt;/code&gt; to the previous &lt;code&gt;div&lt;/code&gt;. This will add the icon of our extension to the notification box. 

&lt;ul&gt;
&lt;li&gt;To get the icon of our extension, we must use &lt;code&gt;chrome.runtime.getURL&lt;/code&gt;. Remember, the content script doesn't run in the same context as the extension, so we can't just access our extension's resources directly. That's also why we added the &lt;code&gt;icon32.png&lt;/code&gt; file to the &lt;code&gt;manifest.json&lt;/code&gt; as a &lt;em&gt;web-accessible resource&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next, we add a &lt;code&gt;p&lt;/code&gt; element where we will later attach the notification text.&lt;/li&gt;
&lt;li&gt;Finally, we append the notification to the web page's body.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These first 15 lines will ensure that every page loaded has our notification structure. To finally display the notification, we added a listener for the &lt;code&gt;chrome.runtime.onMessage&lt;/code&gt;. Let's inspect that code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once we receive the message, the first thing to do is find the notification's structure within the current web page. We use &lt;code&gt;document.getElementsByClassName&lt;/code&gt; to get the notification's body, and from there we get the &lt;code&gt;p&lt;/code&gt; element inside it using &lt;code&gt;getElementsByTagName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remember that the message sent by our &lt;code&gt;background.js&lt;/code&gt; script includes the &lt;code&gt;tabTitle&lt;/code&gt;, so we use that value from &lt;code&gt;request.tabTitle&lt;/code&gt; and set it as the content of the notification's text element.&lt;/li&gt;
&lt;li&gt;We make sure our notification is visible by setting the &lt;code&gt;display&lt;/code&gt; property to &lt;code&gt;flex&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, we use &lt;code&gt;setTimeout&lt;/code&gt; to hide the notification again after 5 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great! We are almost done. Let's add some styles to the notification inside the &lt;code&gt;content.css&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.acho-notification&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;77&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;320px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.acho-notification&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#done" class="anchor"&gt;
  &lt;/a&gt;
  Done!
&lt;/h2&gt;

&lt;p&gt;And that's it! This is how our notification will look when the user presses &lt;code&gt;Alt+Shift+3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mp3jj2eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ep4CUYC.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mp3jj2eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ep4CUYC.gif" alt="After a second, the notification appears at the bottom-right displaying the title of the page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-repo" class="anchor"&gt;
  &lt;/a&gt;
  The repo
&lt;/h1&gt;

&lt;p&gt;I'm keeping this repo updated with all my Chrome Extensions examples:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pawap90"&gt;
        pawap90
      &lt;/a&gt; / &lt;a href="https://github.com/pawap90/acho-where-are-we"&gt;
        acho-where-are-we
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Acho (a cute pup) tells you the title of the current page on your browser. A sample chrome extension.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>chromeextension</category>
      <category>chrome</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to use TypeScript with GraphQL</title>
      <author>Ibrahima Ndaw</author>
      <pubDate>Mon, 25 Jan 2021 22:01:27 +0000</pubDate>
      <link>https://dev.to/takeshape/how-to-use-typescript-with-graphql-3k98</link>
      <guid>https://dev.to/takeshape/how-to-use-typescript-with-graphql-3k98</guid>
      <description>&lt;p&gt;GraphQL is a powerful query language that allows you to build flexible APIs. It lets you define a type system for your data, so when you execute a query, it returns only the data you need.&lt;/p&gt;

&lt;p&gt;GraphQL can offer a better developer experience when used with TypeScript because they are both typed language. TypeScript is a typed superset of JavaScript that extends it by adding types. So, using these technologies together will certainly help you to build predictable and strongly-types APIs.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will first explain why combining such technologies, and then show you how to use TypeScript with GraphQL by building an API from scratch using TypeGraphQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This tutorial assumes that you have some experience using TypeScript, particularly TypeScript classes and decorators. Knowledge of GraphQL will come in handy but is not mandatory.&lt;/p&gt;

&lt;p&gt;In this guide, we will be using &lt;a href="https://typegraphql.com/"&gt;TypeGraphQL&lt;/a&gt;, which is a modern framework for building GraphQL API using Node.js and TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-typescript-with-graphql" class="anchor"&gt;
  &lt;/a&gt;
  Why use TypeScript with GraphQL
&lt;/h2&gt;

&lt;p&gt;TypeScript is a popular programming language developed and maintained by Microsoft. It is a superset of JavaScript that uses static type-checking to make your code predictable.&lt;/p&gt;

&lt;p&gt;Over the years, TypeScript has proven to be a valuable language for large codebases. TypeScript enhances code quality with its types, which adds many benefits, such as robustness, understandability, and predictability.&lt;/p&gt;

&lt;p&gt;GraphQL solves the problem of over-fetching or under-fetching APIs. It provides one single endpoint for all requests using a &lt;em&gt;&lt;code&gt;Post&lt;/code&gt;&lt;/em&gt; method to get exactly the data you need, nothing more and nothing less. In this way, GraphQL makes your queries flexible, and your API readable and easy to learn.&lt;/p&gt;

&lt;p&gt;TypeScript and GraphQL both rely on types to make your code understandable. However, GraphQL types can only be defined in a GraphQL schema using the method &lt;code&gt;buildSchema&lt;/code&gt; or a file with &lt;code&gt;.gql&lt;/code&gt; extension. The GraphQL types are not supported on GraphQL resolvers because resolvers are just regular JavaScript functions, not GraphQL code. TypeScript solves this issue because, as we mentioned earlier, it’s a superset of JavaScript. So, It can set types on the GraphQL resolvers. This is the reason why using TypeScript along with GraphQL makes sense.&lt;/p&gt;

&lt;p&gt;GraphQL handles the types for the GraphQL schemas, and TypeScript sets the types on the GraphQL resolvers. However, because you are handling multiple languages, building strongly-typed APIs using Node.js, GraphQL, and TypeScript can be a challenge to maintain.&lt;/p&gt;

&lt;p&gt;Maintaining consistency between your schema and resolvers is what TypeGraphQL intends to solve. TypeGraphQL allows you to use TypeScript classes and decorators to create the schema, types, and resolvers of your API. It uses TypeScript to build the entire GraphQL API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uB0Yw7H---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1600278411563_illustration.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uB0Yw7H---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1600278411563_illustration.png" alt="https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1600278411563_illustration.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;illustration&lt;/p&gt;

&lt;p&gt;So far, we have learned why pairing TypeScript with GraphQL can be useful and why TypeGraphQL is handy for building and maintaining GraphQL APIs that use TypeScript.&lt;/p&gt;

&lt;p&gt;Without further ado, let’s dive into the practice part and build up the GraphQL API using TypeGraphQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up" class="anchor"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h2&gt;

&lt;p&gt;To use TypeScript and GraphQL, we first need to create a new Node.js app.&lt;/p&gt;

&lt;p&gt;Open your command-line interface (CLI) and run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or for &lt;code&gt;npm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You’ll need to respond to a few configuration questions which will emit a &lt;code&gt;package.json&lt;/code&gt; file. Next, install the dependencies needed for this tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add express apollo-server-express graphql reflect-metadata type-graphql class-validator
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For &lt;code&gt;npm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express apollo-server-express graphql reflect-metadata type-graphql class-validator
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will break these packages down later and explain what they do. For now, let’s install their types so TypeScript can understand the libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/express @types/node nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; @types/express @types/node nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that we installed &lt;code&gt;nodemon&lt;/code&gt; as well to enable live-reloading whenever a change occurs.&lt;/p&gt;

&lt;p&gt;Here’s what each of the installed libraries do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;express&lt;/code&gt; is a minimalist web framework for Node.js&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apollo-server-express&lt;/code&gt; is a middleware that allows using &lt;code&gt;express&lt;/code&gt; in an Apollo GraphQL server.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reflect-metadata&lt;/code&gt; enables TypeScript decorators to add the ability to augment a class and its members when the class is defined. It’s a dependency of TypeGraphQL.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;class-validator&lt;/code&gt; allows TypeGraphQL to use decorator and non-decorator based validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to structure the project as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;src
| ├── resolvers
| |  └── todoResolver.ts
| └── schemas
| |  └── Todo.ts
| └── index.ts
├── tsconfig.json
├── package.json
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, there are four files to underline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The entry point of the server (&lt;code&gt;index.ts&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;schemas&lt;/code&gt; folder that contains the GraphQL Schema of the project.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;resolvers&lt;/code&gt; folder that holds the resolvers of the API.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;tsconfig.json&lt;/code&gt; file tells to TypeScript how to compile the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in place, we can now add a script to start the server in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon --exec ts-node src/index.ts"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This script will start the server using &lt;code&gt;nodemon&lt;/code&gt;. And whenever our code is updated, it will restart.&lt;/p&gt;

&lt;p&gt;Let’s now configure the &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"emitDecoratorMetadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"experimentalDecorators"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These two properties should be set to &lt;code&gt;true&lt;/code&gt; to be able to use TypeScript decorators in the project.&lt;/p&gt;

&lt;p&gt;We can now build a GraphQL Schema for the API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-the-graphql-schema" class="anchor"&gt;
  &lt;/a&gt;
  Build the GraphQL Schema
&lt;/h2&gt;

&lt;p&gt;TypeGraphQL allows you to build a schema using TypeScript classes and decorators. It’s just syntactic sugar because under the hood TypeGraphQL will still generate regular GraphQL code. We will see the code generated later - for now, let’s create the schema.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;schemas/Todo.ts&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ObjectType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InputType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ObjectType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;InputType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoInput&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At the first the syntax might look weird, however, it’s relatively simple to understand. It’s just TypeScript decorators and classes.&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;@ObjectType()&lt;/code&gt; provided by TypeGraphQL enables creating a new object or schema. The &lt;code&gt;Todo&lt;/code&gt; class reflects the shape of a Todo object, and the &lt;code&gt;TodoInput&lt;/code&gt; defines the expected data for adding a new Todo.&lt;/p&gt;

&lt;p&gt;Now, let’s write the same code using GraphQL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;TodoInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, the logic is the same. The only difference is that here, we don’t use TypeScript.&lt;/p&gt;

&lt;p&gt;Now we’re ready to create our GraphQL resolvers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-graphql-resolver" class="anchor"&gt;
  &lt;/a&gt;
  Create the GraphQL resolver
&lt;/h2&gt;

&lt;p&gt;Unlike GraphQL, TypeGraphQL puts the GraphQL query or mutation in the resolvers. The name of the function will be used as an endpoint when querying or mutating data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resolvers/todoResolver.ts&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Mutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Arg&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TodoInput&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;schemas&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Resolver&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoResolver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Mutation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todoInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;TodoInput&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// not really unique&lt;/span&gt;
            &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we use the &lt;code&gt;Resolver&lt;/code&gt; decorator to create a new GraphQL resolver that returns a Todo. Next, we build a GraphQL query to fetch all Todos.&lt;/p&gt;

&lt;p&gt;After that, we define a mutation query that expects a &lt;code&gt;title&lt;/code&gt;, and a &lt;code&gt;description&lt;/code&gt; to add a new Todo on the array of data.&lt;/p&gt;

&lt;p&gt;By the way, you don’t need to use async/await here, because this won’t take time to complete. But, I add it here for reference when you need to deal with a real server.&lt;/p&gt;

&lt;p&gt;Let’s now convert the code to GraphQL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Mutation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TodoInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this in place, we can build the server that uses the schema and resolver we’ve just created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-server" class="anchor"&gt;
  &lt;/a&gt;
  Create the Server
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src/index.ts&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;apollo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;buildSchema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TodoResolver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;resolvers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;todoResolver&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;buildSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TodoResolver&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;emitSchemaFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is running on http://localhost:4000/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see here, we import &lt;code&gt;TodoResolver&lt;/code&gt;, which needs to be passed as a resolver to the &lt;code&gt;buildSchema&lt;/code&gt; method. With that, TypeGraphQL can build a new GraphQL Schema based on the Todo resolver.&lt;/p&gt;

&lt;p&gt;Next, we pass the &lt;code&gt;schema&lt;/code&gt; object (it contains the GraphQL schemas and resolvers) to Apollo to create the server.&lt;/p&gt;

&lt;p&gt;Setting the property &lt;code&gt;emitSchemaFile: true&lt;/code&gt; allows TypeGraphQL to generate a &lt;code&gt;schema.gql&lt;/code&gt; file at build-time.&lt;/p&gt;

&lt;p&gt;Let’s check if the app works. Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Visit &lt;code&gt;http://localhost:4000/graphql&lt;/code&gt;, and then add this code block below to GraphQL Playground to create a new Todo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is my todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Todo object should be created successfully!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8m2MqlmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1599926790317_add-todo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8m2MqlmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1599926790317_add-todo.PNG" alt="https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1599926790317_add-todo.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;todo-created&lt;/p&gt;

&lt;p&gt;Now query for the newly created Todo using the following GraphQL query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;getTodos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should see that all Todos have been returned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKWp-wlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1599926830468_all-todos.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKWp-wlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1599926830468_all-todos.PNG" alt="https://paper-attachments.dropbox.com/s_FE1E1F2FD073B6FBA4EBF25A186A644F8A1660C235BABE83F3933C922FDEEEEB_1599926830468_all-todos.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all-todos&lt;/p&gt;

&lt;p&gt;Great! Our app looks good.&lt;/p&gt;

&lt;p&gt;We have now finished building a GraphQL API using TypeScript.&lt;/p&gt;

&lt;p&gt;You can find the finished project in this &lt;a href="https://github.com/ibrahima92/typescript-graphql-api"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphql-in-takeshape" class="anchor"&gt;
  &lt;/a&gt;
  GraphQL in TakeShape
&lt;/h2&gt;

&lt;p&gt;TakeShape provides a flexible GraphQL API to manage your content easily. It gives you the ability to immediately see how changes to your content model will impact your API using the API Explorer. You don’t have to build any backend on your own, everything is set up for you. TakeShape automatically generates a secure GraphQL API to expose all of your content and services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;Check out these resources to dive deeper into the content of this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://typegraphql.com/docs/introduction.html"&gt;TypeGraphQL Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/decorators.html"&gt;TypeScript Decorators Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/classes.html"&gt;TypeScript Classes Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://typegraphql.com/docs/examples.html"&gt;TypeGraphQL Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://graphql.org/learn/"&gt;GraphQL Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>graphql</category>
    </item>
  </channel>
</rss>
