<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cheat Sheets that always save my time during web development</title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 15:06:11 +0000</pubDate>
      <link>https://dev.to/jcc/cheat-sheets-that-always-save-my-time-during-web-development-1033</link>
      <guid>https://dev.to/jcc/cheat-sheets-that-always-save-my-time-during-web-development-1033</guid>
      <description>&lt;p&gt;During Coding I often forget exact properties and at that time searching on google take time at least for me ( because I don't know about you 😁😅).&lt;/p&gt;

&lt;p&gt;So I always prefer cheatsheets because in 90% of cases I got my answer from them.&lt;/p&gt;
&lt;p&gt;So today I'm going to share a list of top cheatsheets that save my time during development. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/cheat-sheets-that-always-save-my-time-during-web-development/&amp;amp;ved=2ahUKEwiDjqvU_OnzAhVST30KHROPChIQFnoECAUQAQ&amp;amp;usg=AOvVaw1Ee26Ybt7AWL4eGcmh8Y_X"&gt;Cheat Sheets that always save my time during web development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Common MISTAKES made by C# developers (+ How to avoid them)</title>
      <author>Dotnetsafer</author>
      <pubDate>Thu, 28 Oct 2021 14:33:47 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/7-common-mistakes-made-by-c-developers-how-to-avoid-them-1na4</link>
      <guid>https://dev.to/dotnetsafer/7-common-mistakes-made-by-c-developers-how-to-avoid-them-1na4</guid>
      <description>&lt;p&gt;Developers will &lt;strong&gt;always&lt;/strong&gt; make mistakes; no one is impeccable. Many of them, particularly C# developers, learn and grow via &lt;strong&gt;trial and error&lt;/strong&gt;. I prefer to refer to it as "transitioning" from junior to senior developer.&lt;/p&gt;

&lt;p&gt;Although this "technique" of &lt;strong&gt;trial and error&lt;/strong&gt; works, if a developer does not identify errors, they might &lt;strong&gt;cause several efficiency and quality issues&lt;/strong&gt; in the developed application.&lt;/p&gt;

&lt;p&gt;In this article, I've compiled a list of &lt;strong&gt;the most frequent and not-so-common mistakes made by C# developers.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-usage-of-string-concatenation"&gt;
  &lt;/a&gt;
  1. Usage of String Concatenation
&lt;/h2&gt;

&lt;p&gt;String Concatenation Functions are really simple to use.&lt;/p&gt;

&lt;p&gt;When something is added to the string, a new address is &lt;strong&gt;immediately created&lt;/strong&gt; in memory. The previous string is &lt;strong&gt;transferred to the new section&lt;/strong&gt;, which now has a different location (this is not efficient at all).&lt;/p&gt;

&lt;p&gt;Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;dotnetsaferTools&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="s"&gt;"Shield"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Secrets"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Linker"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dotnetsaferTools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;   
  &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Creates a copy of the string in memory&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;The way to solve this is simple, you have to use &lt;code&gt;StringBuilder&lt;/code&gt; object instead of &lt;strong&gt;string aggregation&lt;/strong&gt; which will keep the same position in memory without any copy task.&lt;/p&gt;

&lt;p&gt;This simplifies and &lt;strong&gt;speeds up&lt;/strong&gt; the string concatenation process, allowing us to smoothly add all of the actions we require.&lt;/p&gt;

&lt;p&gt;This is how it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;toolsBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dotnetsaferTools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;toolsBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tool&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#2-iterating-with-values-instead-of-with%C2%A0linq"&gt;
  &lt;/a&gt;
  2. Iterating with Values instead of with LINQ
&lt;/h2&gt;

&lt;p&gt;This problem happens when you attempt to iterate through a list of records using a loop, &lt;strong&gt;which is not optimum.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;CustomerList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ES"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tax&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Instead of doing this, we should &lt;strong&gt;simply use LINQ&lt;/strong&gt; which will allow us to query objects easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;tax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomerList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ES"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;📚Note:&lt;/strong&gt; This is more efficient than a foreach loop.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#3-not-using-yield%C2%A0return"&gt;
  &lt;/a&gt;
  3. Not using Yield Return
&lt;/h2&gt;

&lt;p&gt;This is for when you need to &lt;strong&gt;create&lt;/strong&gt; an &lt;strong&gt;object enumeration&lt;/strong&gt; for some other caller. Using this function will greatly improve performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;To prevent making this error, simply do not attempt to build a return collection. The main benefit of utilizing &lt;code&gt;yield&lt;/code&gt; return is that &lt;strong&gt;the complete collection does not need to be held in memory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will allow you to have control after each iteration and you will &lt;strong&gt;only&lt;/strong&gt; process the results that you need and that are &lt;strong&gt;necessary.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-deferred-execution-in%C2%A0linq"&gt;
  &lt;/a&gt;
  4. Deferred Execution in LINQ
&lt;/h2&gt;

&lt;p&gt;The main one of &lt;strong&gt;LINQ&lt;/strong&gt; is to facilitate querying data in case we use &lt;code&gt;foreach&lt;/code&gt; loops (an example is nested if blocks). To get a list of clients, I recommend using &lt;strong&gt;LINQ-to-SQL.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt; &lt;span class="nf"&gt;GetCustomer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DBContext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;
      &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Balance&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt;
      &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything appears to be in order, doesn't it? &lt;strong&gt;Only until&lt;/strong&gt; we try to count the items in the collection (it will return an exception).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LINQ&lt;/em&gt; will not conduct any queries until we try to enumerate the results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;The solution is simple, just convert all &lt;em&gt;LINQ&lt;/em&gt; queries to a &lt;code&gt;ToArray()&lt;/code&gt;. By doing this, &lt;em&gt;LINQ&lt;/em&gt; &lt;strong&gt;should evaluate&lt;/strong&gt; the queries before anything else.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-accessing-virtual-members-within-a-constructor"&gt;
  &lt;/a&gt;
  5. Accessing Virtual Members within a Constructor
&lt;/h2&gt;

&lt;p&gt;Although this error is not one of the first, it is one of the &lt;strong&gt;most common&lt;/strong&gt;, although it may not seem so.&lt;/p&gt;

&lt;p&gt;When an overridden method is called directly from the constructor of a base class, this &lt;strong&gt;error will appear&lt;/strong&gt; because it comes from executing code before its time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parent Ctor"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parent method"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Child&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Child Ctor"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Child method"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Although it may seem very complex, it is actually very easy. We simply have to &lt;strong&gt;mark that class as sealed.&lt;/strong&gt;&lt;br&gt;
By doing this, we make sure that when we call the virtual method, we will not receive any warning.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#6-not-knowing-the-importance-of-using-for-object%C2%A0disposal"&gt;
  &lt;/a&gt;
  6. Not knowing the importance of USING for Object Disposal
&lt;/h2&gt;

&lt;p&gt;As partech.nl says, many C# developers are +&lt;em&gt;unfamiliar&lt;/em&gt;* with the concept that the using keyword is not only used as a directive for adding &lt;strong&gt;namespaces&lt;/strong&gt;, but is also very beneficial for &lt;strong&gt;object removal.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;If you are really sure that an object should be deleted when performing certain actions, simply use the &lt;code&gt;using&lt;/code&gt; statement to &lt;strong&gt;make sure&lt;/strong&gt; that the object has been &lt;strong&gt;deleted correctly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DisposableClass&lt;/span&gt; &lt;span class="n"&gt;DisposableObject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DisposableClass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;DisposableObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoTheJob&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;// Does the same as:DisposableClass DisposableObject = new DisposableClass();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;DisposableObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoTheJob&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;DisposableObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7-using-weak-cryptographic-algorithms"&gt;
  &lt;/a&gt;
  7. Using Weak Cryptographic Algorithms
&lt;/h2&gt;

&lt;p&gt;Here we agree with Stackify, this error is simply based on the fact that many developers use &lt;strong&gt;obsolete&lt;/strong&gt; or &lt;strong&gt;vulnerable encryption algorithms&lt;/strong&gt; (which is very easy to avoid).&lt;/p&gt;

&lt;p&gt;In this case we have for example SHA1 or RIPEMD160, which do not offer a current and very good level of security.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Security.Cryptography&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;...&lt;/span&gt;   
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;hashAlg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SHA1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;The solution to this is to** use stronger encryption algorithms**, for example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SHA256&lt;/strong&gt; instead of &lt;strong&gt;SHA1&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;SHA512&lt;/strong&gt; instead of &lt;strong&gt;RIPEMD160&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;AES&lt;/strong&gt; instead of &lt;strong&gt;TripleDES&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Software development is the process of developing applications that can be shared with others. As software developers, &lt;strong&gt;we are responsible for creating the code that makes up the application&lt;/strong&gt;, as well as designing and testing it. We are also responsible for updating or adding new features to an existing application when necessary.&lt;/p&gt;

&lt;p&gt;The world of software development &lt;strong&gt;is changing:&lt;/strong&gt; it's no longer just about coding, but also about solving problems, understanding user behavior and much more. That's why I hope you found this article useful!!&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>netcore</category>
    </item>
    <item>
      <title>Build Universal Web Components with LitElement</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 28 Oct 2021 14:13:10 +0000</pubDate>
      <link>https://dev.to/codesphere/build-universal-web-components-with-litelement-2kam</link>
      <guid>https://dev.to/codesphere/build-universal-web-components-with-litelement-2kam</guid>
      <description>&lt;p&gt;It feels like every day a new web framework appears fighting for your attention. With all these different frameworks, however, you might find yourself rewriting code to get your components working right on a new framework.&lt;/p&gt;

&lt;p&gt;If you're looking to create a universal component library, look no further than &lt;a href="https://lit-element.polymer-project.org/guide"&gt;LitElement&lt;/a&gt;, a simple base class for creating cross-library components with their own embedded styling and javascript.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll be showing you how to create your first LitElement component and render it in a vanilla HTML file.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;To get started, we're going to create a new npm project with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are then going to install lit-element and Polymer with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i lit-element polymer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Polymer isn't 100% necessary, but will just allow us to test this component easily.&lt;/p&gt;

&lt;p&gt;Finally, let's create an &lt;code&gt;index.html&lt;/code&gt; and a &lt;code&gt;card.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch index.html card.js&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Our &lt;code&gt;index.html&lt;/code&gt; can be as simple as:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Note that all we need is the inclusion of the script tags to our custom component, as well as the component itself of course.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;Card.js&lt;/code&gt; can then look as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And that's all it takes! We can then serve this page live with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;polymer server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And lo and behold:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l3bcA2wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqh9jrc31ku3sv2zusuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3bcA2wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqh9jrc31ku3sv2zusuw.png" alt="Image description" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#using-lit-element%C2%A0anywhere"&gt;
  &lt;/a&gt;
  Using Lit Element Anywhere
&lt;/h3&gt;

&lt;p&gt;We can then use this exact same LitElement class in React, Vue, Angular, or whatever web framework you or your fellow developers prefer. All that needs to be done is to install Litelement and then access the custom tag you created.&lt;/p&gt;

&lt;p&gt;So what do you think? Do you see a benefit of using LitElement, or is this just an extraneous layer? Let us know down below.&lt;/p&gt;

&lt;p&gt;As always, happy coding from your friends at &lt;a href="https://link.codesphere.com/EZ"&gt;Codesphere&lt;/a&gt;, the most intuitive cloud provider on the market.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>html</category>
    </item>
    <item>
      <title>Want to have tech recruiters find you? Sixteen important things to remember
</title>
      <author>Eliot Sanford</author>
      <pubDate>Thu, 28 Oct 2021 14:12:19 +0000</pubDate>
      <link>https://dev.to/techieeliot/want-to-have-tech-recruiters-find-you-sixteen-important-things-to-remember-4jjd</link>
      <guid>https://dev.to/techieeliot/want-to-have-tech-recruiters-find-you-sixteen-important-things-to-remember-4jjd</guid>
      <description>&lt;p&gt;I've used LinkedIn to find my last three developer jobs, and that was also my first three developer jobs ever.&lt;/p&gt;

&lt;p&gt;Hands down, the most important thing on LinkedIn is a well-crafted headline at the top of your banner. &lt;/p&gt;

&lt;p&gt;I suggest placing the title of the role (in multiple ways) &lt;br&gt;
that you are seeking with the tech stack that you know.&lt;/p&gt;

&lt;p&gt;For example, if you are a web developer, I wouldn't say "Web Developer at Acme" or "Owner at YourLLC".&lt;/p&gt;

&lt;p&gt;Say something like "React Front-End Software Engineer | React.js, Redux, and Node JS | Web Developer".&lt;/p&gt;

&lt;p&gt;Search can't find keywords that are not there.&lt;/p&gt;

&lt;p&gt;The second most important thing is a professional mugshot.&lt;/p&gt;

&lt;p&gt;✓ Doesn't have to cost a lot or be a professional&lt;/p&gt;

&lt;p&gt;✓ Find a friend to take free pics&lt;/p&gt;

&lt;p&gt;✓ nice work-appropriate collared shirt or dress&lt;/p&gt;

&lt;p&gt;✓ big grin on your face. &lt;/p&gt;

&lt;p&gt;✓ No selfie pics from your bathroom mirror or car.&lt;/p&gt;

&lt;p&gt;The third most important thing is your featured section.&lt;/p&gt;

&lt;p&gt;You should have one or more:&lt;/p&gt;

&lt;p&gt;✓ polished projects&lt;br&gt;
✓ published blogs or articles&lt;br&gt;
✓ some accolades that you received&lt;br&gt;
✓ AWS cloud certificates (practically one of the only certifications that matter to tech recruiters)&lt;br&gt;
✓ anything that you would brag about (if you were the bragging type).&lt;/p&gt;

&lt;p&gt;The fourth most important thing is your About section.&lt;/p&gt;

&lt;p&gt;include these things:&lt;/p&gt;

&lt;p&gt;✓ the stack you want to build in and currently build in&lt;br&gt;
✓ what role you are seeking&lt;br&gt;
✓ 1-3 sentences to summarize what you can do to help an employer&lt;br&gt;
✓ invite them to message you&lt;/p&gt;

&lt;p&gt;The fifth most important thing is your recommendation:&lt;/p&gt;

&lt;p&gt;✓ ask mentors, instructors, and co-workers to give a positive recommendation&lt;br&gt;
✓ find people who know you well enough to speak to your character and tech skills&lt;br&gt;
✓ find people to recommend you for work that you've done recently&lt;/p&gt;

&lt;p&gt;Think of it like this:&lt;/p&gt;

&lt;p&gt;You're up against an equally qualified candidate for the last interview slot. They also have 1 through 4 down, but...&lt;/p&gt;

&lt;p&gt;They have 5 sterling recommendations and you have zero. &lt;/p&gt;

&lt;p&gt;Who gets the last interview?&lt;/p&gt;

&lt;p&gt;The sixth most important thing:&lt;/p&gt;

&lt;p&gt;3-5 well-written bullets for past work experience and any volunteering. &lt;/p&gt;

&lt;p&gt;✓ bullets should start with descriptive verbs other than "Responsible for" or "Worked"&lt;br&gt;
✓ weave in the tech skills that you want to get hired for&lt;br&gt;
✓ craft the title for your role for what you actually did with the tech stack included, e.g. not Software Engineer I (What is that anyway?) but React Front-End Software Engineer.&lt;/p&gt;

&lt;p&gt;The seventh most important thing but maybe it's the most important really in terms of leaving a positive impression:&lt;/p&gt;

&lt;p&gt;No typos on your profile&lt;/p&gt;

&lt;p&gt;✓ Don't use poor grammar&lt;br&gt;
✓ Use words that you actually use&lt;br&gt;
✓ But write formally&lt;br&gt;
✓ Triple check&lt;br&gt;
✓ Ask a friend to proof your profile and offer feedback&lt;/p&gt;

&lt;p&gt;The eighth most important thing:&lt;/p&gt;

&lt;p&gt;Link relevant projects underneath your roles and volunteerism. &lt;/p&gt;

&lt;p&gt;✓ Try to show a before and after shot&lt;br&gt;
✓ Tell your reader what you specifically did to create or contribute to the work&lt;br&gt;
✓ Give details in terms of numbers or stats&lt;br&gt;
✓ Demonstrate results with great visuals and meta images on links&lt;/p&gt;

&lt;p&gt;The ninth most important thing:&lt;/p&gt;

&lt;p&gt;Don't add fluff or vague clichés&lt;/p&gt;

&lt;p&gt;Be descriptive and include examples of what you know and what you've done.&lt;/p&gt;

&lt;p&gt;Describe what you did as if you're painting a picture with words.&lt;/p&gt;

&lt;p&gt;Don't give someone the impression that you're a newb. Try to convey that you're a pro who can step in and give the employer value.&lt;/p&gt;

&lt;p&gt;The tenth most important thing:&lt;/p&gt;

&lt;p&gt;Be active on LinkedIn&lt;/p&gt;

&lt;p&gt;✓ Create a meaningful well-written typo-free post regularly (more often and consistent is better)&lt;br&gt;
✓ Try to offer value to your reader&lt;br&gt;
✓ Comment on a trending relevant topic&lt;br&gt;
✓ Mention people who don't mind being mentioned&lt;/p&gt;

&lt;p&gt;The eleventh most important thing:&lt;/p&gt;

&lt;p&gt;Network with other people&lt;/p&gt;

&lt;p&gt;✓ Attend popular live streams&lt;br&gt;
✓ Follow cool people&lt;br&gt;
✓ Like cool people's posts&lt;br&gt;
✓ Comment on their posts&lt;br&gt;
✓ Send new connections a request with a thoughtful note based on mutual interests&lt;br&gt;
✓ Be kind and treat others how you want to be treated&lt;/p&gt;

&lt;p&gt;The twelve most important thing:&lt;/p&gt;

&lt;p&gt;Don't put your best projects at the bottom of the profile where no one clicks&lt;/p&gt;

&lt;p&gt;✓ Best projects need to go in featured or under the role&lt;br&gt;
✓ No one will click on the link that's at the very bottom with no picture or description... no one&lt;/p&gt;

&lt;p&gt;The thirteenth most important thing:&lt;/p&gt;

&lt;p&gt;Don't be too wordy or put links in the about or roles&lt;/p&gt;

&lt;p&gt;If the links aren't active as they are in the about section and in the work experience bullets, then no one will copy and paste it&lt;/p&gt;

&lt;p&gt;You need to be brief and write with bullets mostly.&lt;/p&gt;

&lt;p&gt;No one will read a lengthy paragraph&lt;/p&gt;

&lt;p&gt;The fourteenth most important thing:&lt;/p&gt;

&lt;p&gt;A good banner picture doesn't hurt&lt;/p&gt;

&lt;p&gt;✓ Avoid landscapes with no words&lt;br&gt;
✓ Find open source images from Unsplash and Pixabay&lt;br&gt;
✓ Go for images with technology in it&lt;br&gt;
✓ Bonus points for using Canva to add your name, a short summary of you, and contact information in an attractive, legible color and font&lt;/p&gt;

&lt;p&gt;The fifteenth most important thing:&lt;/p&gt;

&lt;p&gt;Don't be afraid to use emojis.&lt;/p&gt;

&lt;p&gt;Yes, emojis on a LinkedIn profile.&lt;/p&gt;

&lt;p&gt;✓ Emojis in good taste can improve your clickthrough rate&lt;br&gt;
✓ Google emojis that get traction and engagement&lt;br&gt;
✓ Use them appropriately and sparingly&lt;/p&gt;

&lt;p&gt;The sixteenth most important thing:&lt;/p&gt;

&lt;p&gt;Don't include your current company in your tagline and about section.&lt;/p&gt;

&lt;p&gt;No one will search for it to find you. No one.&lt;/p&gt;

&lt;p&gt;You have them listed in your work experience.&lt;/p&gt;

&lt;p&gt;That's where it should go.&lt;/p&gt;

&lt;p&gt;What have I missed?&lt;/p&gt;

&lt;p&gt;After the top four, this list is probably unordered really and would be bonus points, but the top four-six are must-haves.&lt;/p&gt;

&lt;p&gt;Hope this helps you. That's it. Thanks for reading.&lt;/p&gt;

&lt;p&gt;All the best on your LinkedIn improvements and job search.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Performance capabilities of data warehouses and how Cube can help</title>
      <author>Adnan Rahić</author>
      <pubDate>Thu, 28 Oct 2021 14:05:40 +0000</pubDate>
      <link>https://dev.to/cubejs/performance-capabilities-of-data-warehouses-and-how-cube-can-help-257d</link>
      <guid>https://dev.to/cubejs/performance-capabilities-of-data-warehouses-and-how-cube-can-help-257d</guid>
      <description>&lt;p&gt;Don't you really hate latency?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07OXtoKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0e9294f4-211b-4b75-9c0f-8893ba7ae7d3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07OXtoKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0e9294f4-211b-4b75-9c0f-8893ba7ae7d3.gif" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0e9294f4-211b-4b75-9c0f-8893ba7ae7d3.gif" width="380" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah, I hate it too.&lt;/p&gt;

&lt;p&gt;Today, I want to talk about building applications on top of data warehouses. I want to discuss how to achieve low latency if your app is consuming data from BigQuery, Snowflake, Redshift, or any other cloud-based data warehouse.&lt;/p&gt;

&lt;p&gt;My goal is to give you a crash course into data warehouse performance, explain how to understand the performance of data APIs and highlight a few tools that help build responsive apps on top of data warehouses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-data-warehouses"&gt;
  &lt;/a&gt;
  What are Data Warehouses?
&lt;/h2&gt;

&lt;p&gt;Broadly speaking, data warehouses are central locations for data from multiple sources. Call it a single source of truth. It's up to you to set up a process to extract, transform, and load (ETL) data from source systems based on a schedule or a set of events. Then you usually run reporting and data analysis to get some business insights.&lt;/p&gt;

&lt;p&gt;Data warehouses are usually optimized for online analytical processing (&lt;a href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;OLAP&lt;/a&gt;). It means running a relatively low volume of complex analytical queries with heavy joins of billion-row tables. The queries will often include numerical calculations using aggregate functions like &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COUNT DISTINCT&lt;/code&gt;, &lt;code&gt;PERCENTILE_CONT&lt;/code&gt;, and many more like them.&lt;/p&gt;

&lt;p&gt;As a direct consequence, data warehouses are often designed as auto-scaling and heavily distributed systems with columnar storage engines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.snowflake.com"&gt;Snowflake Data Cloud&lt;/a&gt;, &lt;a href="https://cloud.google.com/bigquery"&gt;Google BigQuery&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/redshift"&gt;Amazon Redshift&lt;/a&gt; are all good examples of such data warehouses and the most used and popular choice for storing huge amounts of data. If your company has a data warehouse in use, chances are it's one of these behemoths.&lt;/p&gt;

&lt;p&gt;OLAP is often opposed to &lt;a href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;OLTP&lt;/a&gt;, which stands for online transaction processing. It means running a high volume of not-so-complex queries where the data is mostly inserted or updated rather than being read. However, the spectrum is much wider and there are more dimensions to it (pun intended).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhQ3wotC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/358cd2a3-14cd-45da-a3be-967a90231a0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhQ3wotC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/358cd2a3-14cd-45da-a3be-967a90231a0b.png" alt="query-latency-01.png" width="880" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As companies collect and transfer crazy volumes of data into their data warehouses, they want insight into this data. Your internal users become more interested in getting on-demand reports instead of weekly printouts. Your business becomes less tolerant of BI tools with time-to-insight comparable to how long it takes to make a cup of coffee rather than the time it takes to think about making one.&lt;/p&gt;

&lt;p&gt;You, as an application developer, suddenly need to figure out how to build responsive and performant apps on top of data warehouses while keeping your business and users happy. But what exactly does &lt;em&gt;"responsive and performant"&lt;/em&gt; mean? Let's figure that out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-warehouse-performance-from-an-app-developers-perspective"&gt;
  &lt;/a&gt;
  Data Warehouse Performance from an App Developer's Perspective
&lt;/h2&gt;

&lt;p&gt;As application developers, we'd like our users to maintain the feeling that they operate directly on the data regardless of an operation, data volume, or amount of other users acting in parallel. &lt;a href="https://www.nngroup.com/articles/response-times-3-important-limits/"&gt;Studies&lt;/a&gt; say that an app reacts "instantaneously" if it responds to user actions within 10 ms, and 1 second is the limit above which an app risks interrupting their flow of thought. Here we come to query latency.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latency"&gt;
  &lt;/a&gt;
  Latency
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Query latency is the amount of time it takes to execute a query and receive the result.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's take the speed of light into account! Seriously, let's imagine that a user from California sends a request to your app deployed in a popular region, e.g., &lt;code&gt;us-east-1&lt;/code&gt; on AWS. With the roundtrip of twice the distance of 3,000 miles and the speed of light of 186,000 mi/s, the minimum delay between sending the request and getting the response would be 30 ms. Wait, and what about our overseas users? You can actually use massively distributed CDNs like &lt;a href="https://aws.amazon.com/cloudfront/"&gt;CloudFront&lt;/a&gt; or &lt;a href="https://www.netlify.com/products/edge/"&gt;Netlify Edge&lt;/a&gt; to bring your app closer to users, but how practical is it for the data warehouses that your app interacts with?&lt;/p&gt;

&lt;p&gt;It means that any request that your app makes to a data warehouse should take less than 1 second. Actually, &lt;em&gt;way less than 1 second&lt;/em&gt; if we'd like to account for the speed of light, network delays, query execution time, time to run our business logic on top of the data, etc.&lt;/p&gt;

&lt;p&gt;What affects the query execution time? Primarily, it's the amount of data that needs to be scanned. With larger datasets, these scans take more time. To distribute load, data warehouses use multiple nodes, which introduces delays for inter-node communications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--30tPcBKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2833aee2-f396-47bd-b735-616982719509.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30tPcBKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2833aee2-f396-47bd-b735-616982719509.png" alt="query-latency-02.png" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's see what real-world data warehouses can offer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#query-latency-in-bigquery"&gt;
  &lt;/a&gt;
  Query Latency in BigQuery 🔍
&lt;/h3&gt;

&lt;p&gt;Let's start with &lt;a href="https://cloud.google.com/bigquery"&gt;BigQuery&lt;/a&gt;, a serverless big data warehouse available as a part of the Google Cloud Platform. It's highly scalable, meaning that it can process tiny datasets as well as petabytes of data in seconds, using more cloud capacity as needed. You're able to manage its performance by choosing the pricing model (on-demand by default, flat-rate available as an option) which affects how BigQuery allocates &lt;a href="https://cloud.google.com/bigquery/docs/slots"&gt;slots&lt;/a&gt;, its virtual compute units with CPUs, memory, and temporary storage used to execute queries. BigQuery automatically calculates how many slots are required by each query, depending on query size and complexity. It's worth noting that every query competes for the slots with other queries within a GCP project, and also with other projects if you stick with the default on-demand pricing model as many do.&lt;/p&gt;

&lt;p&gt;Let's use BigQuery's interactive console in GCP to estimate possible latencies.&lt;/p&gt;

&lt;p&gt;After importing &lt;a href="http://www.tpc.org/tpch/"&gt;TPC-H data&lt;/a&gt; with 150 million rows into my own data set, I wanted to figure out a few sample queries I'd need for my analytics.&lt;/p&gt;

&lt;p&gt;First of all, I'd want to see a list of all orders per day of certain status.&lt;/p&gt;

&lt;p&gt;Here's the SQL query I ran in BigQuery.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ce4TkO3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5430a053-f2e8-4c36-afb3-cd899d79b3c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ce4TkO3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5430a053-f2e8-4c36-afb3-cd899d79b3c3.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5430a053-f2e8-4c36-afb3-cd899d79b3c3.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The query takes 1.4 seconds to run, and it processed 2.7 GB. If you run it twice, you'll see that the second run latency is well under a second because the results of the first run were cached.&lt;/p&gt;

&lt;p&gt;However, if you change the query, maybe add or update a filter in the &lt;code&gt;WHERE&lt;/code&gt; clause, you'll still experience the same query latency of around a second and a half.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;The answer is caching. BigQuery will cache the response of a query so the subsequent identical query gets a much quicker response time.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://cloud.google.com/bigquery/docs/cached-results"&gt;BigQuery docs explain in more detail&lt;/a&gt; what cached results are. But, what you need to know is that to retrieve data from the cache, the duplicate query text must be exactly the same as the original query. All query results are cached in temporary tables for approximately 24 hours.&lt;/p&gt;

&lt;p&gt;The pricing of cached queries is confusing. You are not charged for queries that use cached results, but these queries are subject to the BigQuery &lt;a href="https://cloud.google.com/bigquery/quotas"&gt;quota policies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;BigQuery is distributed by nature and its compute units are by default shared between users. That's why, in BigQuery, query latency includes not only &lt;em&gt;query execution time&lt;/em&gt; but also &lt;em&gt;&lt;a href="https://stackoverflow.com/questions/42429093/why-is-bigquery-so-slow-on-non-large-data-sizes"&gt;initialization time&lt;/a&gt;&lt;/em&gt; which is spent to build a query plan, check &lt;a href="https://cloud.google.com/bigquery/quotas"&gt;quotas and limits&lt;/a&gt;, and allocate slots.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why it's unrealistic to expect BigQuery to provide sub-second query latency.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, but what about Snowflake?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#query-latency-in-snowflake"&gt;
  &lt;/a&gt;
  Query Latency in Snowflake ❄️
&lt;/h3&gt;

&lt;p&gt;Unlike BigQuery, &lt;a href="https://www.snowflake.com"&gt;Snowflake&lt;/a&gt; doesn't share its compute resources between users. It processes queries using so-called &lt;em&gt;&lt;a href="https://docs.snowflake.com/en/user-guide/warehouses.html"&gt;virtual warehouses&lt;/a&gt;&lt;/em&gt;, and each virtual warehouse contains multiple dedicated compute nodes allocated from a cloud provider for your project. So, each virtual warehouse does not share compute resources with other virtual warehouses and has no impact on the performance of other virtual warehouses. However, your own queries will indeed compete for the resources of your virtual warehouses.&lt;/p&gt;

&lt;p&gt;Snowflake’s query latency is improved by having pre-allocated virtual warehouses. However, everything comes at a price, pun intended.&lt;/p&gt;

&lt;p&gt;Running a virtual warehouse will cost you something from 1 to 128 &lt;em&gt;&lt;a href="https://docs.snowflake.com/en/user-guide/warehouses-considerations.html#how-are-credits-charged-for-warehouses"&gt;credits per hour&lt;/a&gt;.&lt;/em&gt; This ends up being between $50 and $6000 USD per day, according to Snowflake's &lt;a href="https://www.snowflake.com/blog/how-usage-based-pricing-delivers-a-budget-friendly-cloud-data-warehouse/"&gt;usage-based pricing model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mt4Zrzlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/9cc41464-fb1f-42f4-a875-8e2bb4c8efed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mt4Zrzlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/9cc41464-fb1f-42f4-a875-8e2bb4c8efed.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/9cc41464-fb1f-42f4-a875-8e2bb4c8efed.png" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nobody likes to throw money down the drain for nothing, so Snowflake supports &lt;a href="https://docs.snowflake.com/en/user-guide/warehouses-considerations.html#automating-warehouse-suspension"&gt;auto-suspending&lt;/a&gt; idle virtual warehouses after a specified amount of time. A suspended warehouse doesn't consume credits, but when a query comes, it should be re-provisioned.&lt;/p&gt;

&lt;p&gt;Snowflake claims that warehouse provisioning generally takes 1 or 2 seconds, however, depending on the size of the warehouse and the availability of compute resources, it can take longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It means that with Snowflake we should either pay a significant premium or expect intermittent delays when a suspended virtual warehouse is being provisioned.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's use Snowflake's interactive console to check our intuition. I picked the TPC-H &lt;a href="https://docs.snowflake.com/en/user-guide/sample-data-tpch.html"&gt;public dataset&lt;/a&gt; and used the built-in sample database provided by Snowflake. This data is provided in several schemas in the &lt;code&gt;SNOWFLAKE_SAMPLE_DATA&lt;/code&gt; shared database, based on the exponent of 10, increasing from the base data set of around a few several million elements.&lt;/p&gt;

&lt;p&gt;The schema I used is the &lt;code&gt;TPCH_SF100&lt;/code&gt; schema with 150 million rows.&lt;/p&gt;

&lt;p&gt;The data I want is an exact match for the query I ran against BigQuery in the example above. I want to see the total amount of orders grouped by day and status in a period between the years 1998 and 1999.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f67lGNdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2823111e-fb8b-463c-8f47-5d0b9cc219a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f67lGNdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2823111e-fb8b-463c-8f47-5d0b9cc219a7.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2823111e-fb8b-463c-8f47-5d0b9cc219a7.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The query ran for 4.7 seconds. It returned 214 rows from a data set containing 150 million elements. I used the X-Small compute instance in Snowflake for this test. Of course, you can scale up the compute instances. But, how much money are you willing to spend?&lt;/p&gt;

&lt;p&gt;So, it puts us in a world where getting a sub-second query latency from a data warehouse is something like a magic unicorn. 🦄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zUD0LyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/cb76c13e-5eb9-4937-b5b5-9c4c617ddb62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zUD0LyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/cb76c13e-5eb9-4937-b5b5-9c4c617ddb62.png" alt="query-latency-03.png" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I've only been talking about latency so far. We can all agree there are many more factors in play. Let me continue by explaining a few of them below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latency-vs-concurrency"&gt;
  &lt;/a&gt;
  Latency vs. Concurrency
&lt;/h3&gt;

&lt;p&gt;As application developers, we build products used by hundreds, thousands, and millions of users. Rarely is it ever a lone user executing a single query at a given time. Your app should be able to run multiple queries against a data warehouse in parallel. The issue is that these queries will compete for available resources.&lt;/p&gt;

&lt;p&gt;The question is, how would these parallel competing queries impact query latency? We know that BigQuery can provide an approximate 3 second response time for a query that processes vast amounts of data, possibly petabytes.&lt;/p&gt;

&lt;p&gt;What would the response times be for 10 simultaneous queries? Or maybe, during Black Friday, even a few hundred queries?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query concurrency is the amount of actively co-executing parallel queries.&lt;/strong&gt; The "actively" part is important here because data warehouses can queue queries over a certain limit and run them only when previous queries are completed.&lt;/p&gt;

&lt;p&gt;In BigQuery, according to its &lt;a href="https://cloud.google.com/bigquery/quotas#query_jobs"&gt;quotas and limits&lt;/a&gt;, concurrency is capped at 100 queries per project. That's a relatively high number, just beware of that "per project" part. It means that the quota is shared between all apps that interact with the same GCP project.&lt;/p&gt;

&lt;p&gt;Queries with results that are returned from the query cache are also subject to the quota. The reason is that BigQuery needs to determine that it is a cache hit. However, you're not charged money for queries that use cached results.&lt;/p&gt;

&lt;p&gt;Because BigQuery is such a black box, the best course of action is to improve query performance. Luckily, there's a &lt;a href="https://cloud.google.com/bigquery/docs/best-practices-performance-overview"&gt;detailed explanation in the BigQuery docs&lt;/a&gt; on how to achieve this. Here's a quick rundown.&lt;/p&gt;

&lt;p&gt;You should limit the input data and data sources; the fewer bytes your query reads, the better. Never use &lt;code&gt;SELECT * ...&lt;/code&gt; as it will scan all columns in the data set. Next, improve communication between slots, by reducing data before using a &lt;code&gt;GROUP BY&lt;/code&gt; or &lt;code&gt;JOIN&lt;/code&gt; clause.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; only in the outermost query to improve the computation performance of queries and manage the query output. Remember, keeping the output bytes low is also important.&lt;/p&gt;

&lt;p&gt;Because BigQuery is capped at 100 concurrent queries per project, using these best practices to improve query performance is definitely a must.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwV8DwYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f99a1179-543c-4634-8335-e1611087d811.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwV8DwYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f99a1179-543c-4634-8335-e1611087d811.png" alt="query-latency-04.png" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Snowflake is a bit different. It can use node sizes anywhere from 1 to 128 credits in a warehouse. &lt;a href="https://docs.snowflake.com/en/user-guide/warehouses-considerations.html#how-are-credits-charged-for-warehouses"&gt;Here's an explanation of how credits are charged&lt;/a&gt;. A warehouse can scale horizontally like a cluster if you select adding warehouses to a multi-cluster warehouse.&lt;/p&gt;

&lt;p&gt;Resizing a warehouse can improve query performance, particularly for larger, more complex queries. However, warehouse resizing is not intended for handling concurrency issues; instead, use additional warehouses to handle the workload or use a multi-cluster warehouse.&lt;/p&gt;

&lt;p&gt;Keep in mind that larger warehouses are not faster for smaller, more basic, queries. Small queries do not need a larger warehouse because they won’t benefit from the additional resources, regardless of the number of queries being processed concurrently. In general, you should try to match the size of the warehouse to the expected size and complexity of the queries to be processed by the warehouse.&lt;/p&gt;

&lt;p&gt;So, if we expect multiple queries to run in parallel, we should research and be aware of query latency &lt;em&gt;degradation&lt;/em&gt; that happens when the concurrency grows. Let's benchmark BigQuery to know for sure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latency-vs-concurrency-in-bigquery"&gt;
  &lt;/a&gt;
  Latency vs. Concurrency in BigQuery
&lt;/h3&gt;

&lt;p&gt;I decided to run a few load-test benchmarks with &lt;a href="http://k6.io"&gt;k6.io&lt;/a&gt; to measure the response-time percentile when querying BigQuery directly by using the SDK through a Node.js API. &lt;a href="https://github.com/cube-js/cube.js/tree/master/examples/data-warehouse-performance-benchmarks/bigquery"&gt;Here's the source code&lt;/a&gt; for the load tests. I decided to run a set of randomly generated queries.&lt;/p&gt;

&lt;p&gt;BigQuery is &lt;a href="https://cloud.google.com/blog/products/gcp/understanding-bigquerys-rapid-scaling-and-simple-pricing"&gt;incredibly scalable and elastic&lt;/a&gt;, however, only up to 100 concurrent users.&lt;/p&gt;

&lt;p&gt;First of all, I ran a benchmark with 1 concurrent user for 10 seconds. I can already see the percentile latency is unacceptable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 1 concurrent user

p(90)=2.51s
p(95)=2.58s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then decided to run the same benchmark with 10 concurrent users for 10 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 10 concurrent users

p(90)=2.31s
p(95)=2.41s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, a load test with 30 concurrent users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 30 concurrent users

p(90)=2.25s
p(95)=2.55s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the latency stays almost the same as BigQuery is autoscaling to handle the load. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-MAy1aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0b035852-f54b-40d0-b04a-84d044fedd39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-MAy1aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0b035852-f54b-40d0-b04a-84d044fedd39.png" alt="query-latency-05.png" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks almost the same even with 100 concurrent users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 100 concurrent users

p(90)=2.16s
p(95)=2.4s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the issues pop up with more than 100 concurrent users. Request iterations started failing due to the concurrency limit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-concurrency-with-subsecond-latency"&gt;
  &lt;/a&gt;
  High concurrency with sub-second latency 🦄
&lt;/h2&gt;

&lt;p&gt;Here comes the real question. How to get acceptable latency with high concurrency? Does this unicorn even exist?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7sYkdW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/3abac828-3f7d-4928-9535-23c24b081edd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7sYkdW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/3abac828-3f7d-4928-9535-23c24b081edd.png" alt="query-latency-06.png" width="880" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this to become reality, you need materialized views. It's a set of pre-computed results from queries. You also need OLAP cubes.&lt;/p&gt;

&lt;p&gt;Remember at the beginning of the article I mentioned OLAP? Well, here's why it's important. OLAP cubes are pre-computed multi-dimensional datasets. By using OLAP cubes you can filter a dataset by one or more dimensions and aggregate values along select dimensions.&lt;/p&gt;

&lt;p&gt;By using materialized views with OLAP cubes, you can generate a condensed version of the source data by specifying attributes from the source itself.&lt;/p&gt;

&lt;p&gt;This simple yet powerful optimization can reduce the size of the data set by several orders of magnitude, and ensures subsequent queries can be served by the same condensed data set if any matching attributes are found.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-cube"&gt;
  &lt;/a&gt;
  What is Cube?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cube.dev/"&gt;Cube is an API server&lt;/a&gt; for making sense of huge datasets. It doesn't get any simpler than that. It's the de-facto Analytics API for Building Data Apps.&lt;/p&gt;

&lt;p&gt;Why is Cube so cool? Let me tell you.&lt;/p&gt;

&lt;p&gt;It's open-source with more than &lt;a href="https://github.com/cube-js/cube.js"&gt;11,000 stars on GitHub&lt;/a&gt;. Cube also &lt;a href="https://cube.dev/docs/config/databases"&gt;integrates with every major database&lt;/a&gt; on the market today. &lt;/p&gt;

&lt;p&gt;With Cube, you can create a semantic API layer on top of your data, manage access control, cache, and aggregate data. Cube is also visualization agnostic. It's up to you to use any front-end visualization library to build your own dashboards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-an-analytics-api"&gt;
  &lt;/a&gt;
  Building an Analytics API
&lt;/h3&gt;

&lt;p&gt;I'll run a Cube instance to build the actual analytics API. It'll generate all the queries I need to run against BigQuery. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Keep in mind you can set up Cube with any database of your choice, including Snowflake, Redshift, or any other data warehouse from &lt;a href="https://cube.dev/docs/config/databases"&gt;the list here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Configuring Cube with Docker Compose is the simplest way to get started. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This example will run a single cube instance. For &lt;a href="https://cube.dev/docs/caching/running-in-production"&gt;production&lt;/a&gt;, I recommend running multiple Cube instances. They include an API, a refresh worker, and Cube Store for caching. I'll talk about production-ready configs a bit further down in the article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First up, create a new directory. Give it a name and make a &lt;code&gt;docker-compose.yaml&lt;/code&gt; file. Copy this code into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2.2'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;cube&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cubejs/cube:latest&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;4000:4000&lt;/span&gt;  &lt;span class="c1"&gt;# Cube.js API and Developer Playground&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;  &lt;span class="c1"&gt;# Dashboard app, if created&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CUBEJS_DEV_MODE=true&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CUBEJS_DB_TYPE=bigquery&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CUBEJS_DB_BQ_PROJECT_ID=your-project-id&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CUBEJS_DB_BQ_KEY_FILE=/path/to/your/key.json&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CUBEJS_API_SECRET=somesecret&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/cube/conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-access-to-bigquery"&gt;
  &lt;/a&gt;
  Configuring Access to BigQuery
&lt;/h3&gt;

&lt;p&gt;In my GCP account, I added a service account for accessing BigQuery. Here are the permissions I needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqovVA4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4fa33691-fe4d-4e57-b82b-44d0ca3a6561.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqovVA4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4fa33691-fe4d-4e57-b82b-44d0ca3a6561.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4fa33691-fe4d-4e57-b82b-44d0ca3a6561.png" width="566" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I then created a key for this service account and downloaded it to my local machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pz7BnAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/21ddfb71-6315-4f63-bc63-87a8a0550966.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pz7BnAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/21ddfb71-6315-4f63-bc63-87a8a0550966.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/21ddfb71-6315-4f63-bc63-87a8a0550966.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means I can programmatically access this dataset once I start building my analytics API. Yes!&lt;/p&gt;

&lt;p&gt;Make sure to set the &lt;code&gt;CUBEJS_DB_TYPE&lt;/code&gt; to &lt;code&gt;bigquery&lt;/code&gt;. The &lt;code&gt;CUBEJS_DB_BQ_PROJECT_ID&lt;/code&gt; value should match the Project ID you created above. And the &lt;code&gt;CUBEJS_DB_BQ_KEY_FILE&lt;/code&gt; is the JSON key you create for your Service Account.&lt;/p&gt;

&lt;p&gt;What I tend to do is paste the &lt;code&gt;key.json&lt;/code&gt; in the Cube directory. Referencing it in the &lt;code&gt;docker-compose.yaml&lt;/code&gt; is simpler that way.&lt;/p&gt;

&lt;p&gt;Next up, start Docker Compose. Open a terminal window in the Cube directory and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the Cube API server and the Developer Playground. The Playground is used to test queries, create schemas, generate SQL, and so much more. Open up &lt;code&gt;localhost:4000&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;p&gt;Navigate to the Schema page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1O_xDoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/26e2730a-8e29-4c15-9563-d9467e76b00a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1O_xDoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/26e2730a-8e29-4c15-9563-d9467e76b00a.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/26e2730a-8e29-4c15-9563-d9467e76b00a.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I generated a Schema from the &lt;code&gt;orders&lt;/code&gt; table in the TPC-H data set. You'll see a file show up under &lt;code&gt;Files&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-3VQodu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2f9e7f21-3fb8-4a2d-b5d1-101fefda47d5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-3VQodu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2f9e7f21-3fb8-4a2d-b5d1-101fefda47d5.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2f9e7f21-3fb8-4a2d-b5d1-101fefda47d5.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the autogenerated Schema file that will contain measures and dimensions for all analytics values. I did need to edit a time dimension, however, to &lt;code&gt;CAST()&lt;/code&gt; it to a &lt;code&gt;TIMESTAMP&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;oOrderdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`CAST(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;CUBE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;O_ORDERDATE&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt; AS TIMESTAMP)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`time`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, I ran the same query against the TPC-H data set through the Playground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1OM7Yhp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8e261ec5-e1d9-4f04-acdb-3c390cdd9d8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OM7Yhp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8e261ec5-e1d9-4f04-acdb-3c390cdd9d8a.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8e261ec5-e1d9-4f04-acdb-3c390cdd9d8a.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I get the same result set, which means the config works! &lt;/p&gt;

&lt;p&gt;You can also see the generated SQL query.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LNV8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/70de1d9c-cda2-4d7e-8453-df5e3da49f39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LNV8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/70de1d9c-cda2-4d7e-8453-df5e3da49f39.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/70de1d9c-cda2-4d7e-8453-df5e3da49f39.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm running this query without &lt;a href="https://cube.dev/docs/caching/pre-aggregations/getting-started"&gt;pre-aggregations&lt;/a&gt;, meaning it will almost take as long as querying BigQuery directly. This might be fine for testing but not for running in production.&lt;/p&gt;

&lt;p&gt;There are two ways you can go about running Cube in production. First, you can use the &lt;a href="https://cube.dev/cloud"&gt;hosted Cloud deployment of Cube&lt;/a&gt;. Or, run a &lt;a href="https://cube.dev/docs/deployment/overview"&gt;production-ready setup&lt;/a&gt; yourself.&lt;/p&gt;

&lt;p&gt;Pre-aggregations will cache your data and make it available for quicker querying. It's the bread and butter of Cube, and what makes it so powerful for building apps on top of Data Warehouses. I'll explain it in more detail in the section below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-improvement-with-preaggregations"&gt;
  &lt;/a&gt;
  Performance Improvement with Pre-Aggregations
&lt;/h3&gt;

&lt;p&gt;In simple English, a &lt;a href="https://cube.dev/docs/caching/using-pre-aggregations"&gt;pre-aggregation is a condensed version of source data&lt;/a&gt;. A pre-aggregation specifies attributes from the source, which Cube uses to condense the data. This optimization can reduce the size of the data set by several orders of magnitude, and ensures subsequent queries can be served by the same condensed data set if any matching attributes are found.&lt;/p&gt;

&lt;p&gt;When you run a query in the Playground, you'll see a button show up called &lt;code&gt;Query was not accelerated with pre-aggregation&lt;/code&gt;. Clicking on it opens this popup below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J51sYikE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d6077c62-25e4-4fad-80e8-aa9590321b7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J51sYikE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d6077c62-25e4-4fad-80e8-aa9590321b7f.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d6077c62-25e4-4fad-80e8-aa9590321b7f.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a guide on how to enable a pre-aggregation for this query.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;schema&lt;/code&gt; folder in my Cube app, I opened the &lt;code&gt;Orders.js&lt;/code&gt; file and added this piece of code in the pre-aggregations block. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;Orders.js&lt;/code&gt; file is located under the Schema tab in Cube Cloud.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Orders`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="na"&gt;preAggregations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nx"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nx"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oOrderstatus&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;refreshKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;every&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`1 hour`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;updateWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`7 day`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;incremental&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;partitionGranularity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`month`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;timeDimension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oOrderdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;granularity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`day`&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I specify what to pre-aggregate. I want a &lt;code&gt;rollup&lt;/code&gt; on the &lt;code&gt;count&lt;/code&gt; measure and the &lt;code&gt;oOrderstatus&lt;/code&gt; dimension.&lt;/p&gt;

&lt;p&gt;After adding the pre-aggregation, I ran the same query again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3qL5m8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d524a003-383b-4420-bc24-bd3f1ca63514.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3qL5m8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d524a003-383b-4420-bc24-bd3f1ca63514.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d524a003-383b-4420-bc24-bd3f1ca63514.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time it ran in under 200 ms. I consider this a win!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raw-data-warehouse-vs-cube-performance-benchmarks"&gt;
  &lt;/a&gt;
  Raw Data Warehouse vs. Cube Performance Benchmarks
&lt;/h3&gt;

&lt;p&gt;I ran a few load tests with &lt;a href="http://k6.io"&gt;k6.io&lt;/a&gt; to measure the response-time percentile differences between querying BigQuery directly by using the SDK through a Node.js API, versus using Cube through a Node.js API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cube-js/cube.js/tree/master/examples/data-warehouse-performance-benchmarks/bigquery"&gt;Here's the source code&lt;/a&gt; for the load tests. The tests themselves generate random queries that hit the database, with the sole purpose of avoiding the query cache. This will benchmark the raw performance of the database itself.&lt;/p&gt;

&lt;p&gt;Let me remind you that with 30 concurrent users querying the BigQuery SDK for 10 seconds I see percentiles between 4 and 5 seconds, which is astonishingly far from ideal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 30 concurrent users
# BigQuery SDK

p(90)=2.25s
p(95)=2.55s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Cube, I see percentiles around a half of a second with the same amount of concurrent users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 30 concurrent users
# Cube

p(90)=452.07ms
p(95)=660.03ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, I see a significant performance difference when running with more than 100 concurrent users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 100 concurrent users
# Cube

p(90)=598.92ms
p(95)=656.78ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's significantly quicker than it would take to query BigQuery directly with even one concurrent user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yjoq_OzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0d8d1da9-3833-4444-8920-8da70a2b6d38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yjoq_OzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0d8d1da9-3833-4444-8920-8da70a2b6d38.png" alt="query-latency-07.png" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;In this blog post, I've tried making sense of data warehouse performance. I've also explored their theoretical and practical limits in terms of query latency and query concurrency.&lt;/p&gt;

&lt;p&gt;You've learned how to find the magic unicorn of high concurrency and sub-second latency by creating an analytics API with Cube that adds a powerful caching layer on top of any data warehouse.&lt;/p&gt;

&lt;p&gt;I hope you're now confident that it's possible to drop latency to below a second while getting a consistent concurrency of above 30 queries per second. The cool part is that the &lt;code&gt;p(90)&lt;/code&gt; latency with Cube at 200 queries per second will stay below the &lt;code&gt;p(90)&lt;/code&gt; latency of BigQuery at 30 queries per second.&lt;/p&gt;

&lt;p&gt;I'd love to hear your feedback about these benchmarks in the Cube Community Slack. &lt;a href="https://slack.cube.dev/"&gt;Click here to join&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Until next time, stay curious, and have fun coding. Also, feel free to &lt;a href="https://github.com/cube-js/cube.js"&gt;leave Cube a ⭐ on GitHub&lt;/a&gt; if you liked this article. ✌️&lt;/p&gt;

</description>
      <category>bigdata</category>
      <category>database</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building reusable components, using Typescript, React and Styled-Components
</title>
      <author>vova ushenko</author>
      <pubDate>Thu, 28 Oct 2021 13:54:19 +0000</pubDate>
      <link>https://dev.to/vovacodesca/building-reusable-components-using-typescript-react-and-styled-components-1apo</link>
      <guid>https://dev.to/vovacodesca/building-reusable-components-using-typescript-react-and-styled-components-1apo</guid>
      <description>&lt;h3&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h3&gt;

&lt;p&gt;Being able to build a solid component system that can be seamlessly reused in many projects is absolutely crucial for modern web-development. Precisely for this reason, I would love to walk you through the process of construction of several components that are ready for the challenges of today's dynamic Web landscape. 🚀&lt;/p&gt;

&lt;p&gt;We will be building not only beautiful, but also highly-dynamic components that have different states for different scenarios. Which in turn will allow us to seamlessly build dynamic web applications. 🚀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remark"&gt;
  &lt;/a&gt;
  Remark
&lt;/h3&gt;

&lt;p&gt;This article is particularly aimed at beginners and those who want to familiarize themselves with Typescript, React, styled components and how to glue it all together. However, even seasoned developers might learn a trick or two, so stay tuned! 🚀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h3&gt;

&lt;p&gt;Today we will start our journey from a relatively simple &lt;a href="https://my-components-playground.vercel.app/components/ultimate-button"&gt;button.&lt;/a&gt; component, will build it using Typescript and styled-components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syllabus-of-todays-article"&gt;
  &lt;/a&gt;
  Syllabus of today's article
&lt;/h3&gt;

&lt;p&gt;We will learn a few cool tricks about:&lt;br&gt;
⭐ Isomorphic components in React&lt;br&gt;
⭐ How to use Typescript with React and styled-components effectively&lt;br&gt;
⭐ Using custom props with styled-components&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sneak-peak"&gt;
  &lt;/a&gt;
  Sneak Peak
&lt;/h3&gt;

&lt;p&gt;Here's how our button will look at the end.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNLzk7Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7fy9ogy1b0ahp4rlgig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNLzk7Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7fy9ogy1b0ahp4rlgig.png" alt="Image description" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've also built a component sandbox where you can just play around with all the components.&lt;/p&gt;

&lt;p&gt;Feel free to visit my components sandbox and look at the &lt;br&gt;
&lt;a href="https://my-components-playground.vercel.app/components/ultimate-button"&gt;final results of our today's work.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🚀🚀🚀 Enough words, let’s build the button 🚀🚀🚀&lt;/p&gt;

&lt;p&gt;Let’s firstly plan what we want to achieve and program purely on interfaces! So let’s start from the Button’s interface (what kind of props it will receive):&lt;/p&gt;

&lt;p&gt;In the simplest approximation, it will look like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where, the &lt;code&gt;isLoading&lt;/code&gt; flag will be indicating whether we are fetching something or carrying out some operation - basically the loading variant of the button. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;isCompleted&lt;/code&gt; flag - indicates whether some operation (async or not) is successfully completed. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Disabled&lt;/code&gt; - indicates whether the button is disabled, and finally &lt;code&gt;children&lt;/code&gt; prop indicates what will be wrapped and displayed in the button, be it some text or icon. &lt;/p&gt;

&lt;p&gt;💡 Let’s think about what we can also add to the interface! The button will be receiving some &lt;code&gt;onClick&lt;/code&gt; actions, and we will definitely need to keep this in mind and add this to the interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="nl"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 💡 added onClick support&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This kind of works, but, and this is a big BUT - this is super inconvenient and mechanical. &lt;/p&gt;

&lt;p&gt;Let’s imagine that we would want to add more and more standard button props (aria labels for example), so we would end up constantly reflecting this in the interface.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-can-do-way-better"&gt;
  &lt;/a&gt;
  We can do way better
&lt;/h4&gt;

&lt;p&gt;💡 Not only can we do this automatically, but we can also preserve all the Typescript type safety and code-hinting by simply extending already existing standard interfaces.&lt;/p&gt;

&lt;p&gt;So, let’s continue our interface programming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ComponentPropsWithoutRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 Notice how our interface extends React.ComponentPropsWithoutRef with the ‘button’ generic.&lt;/p&gt;

&lt;p&gt;This simply means that our button will be able to get onClick and all standard native button props - automatically. Which is cool!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives-to-this-approach"&gt;
  &lt;/a&gt;
  Alternatives to this approach
&lt;/h4&gt;

&lt;p&gt;Actually there are several ways to perform this trick with type extension. You can also end up doing something like this (also valid):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ButtonHTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or even like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DetailedHTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
   &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ButtonHTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;
 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;💡💡💡&lt;/span&gt; &lt;span class="nx"&gt;OUR&lt;/span&gt; &lt;span class="nx"&gt;CUSTOM&lt;/span&gt; &lt;span class="nx"&gt;PROPS&lt;/span&gt; &lt;span class="nx"&gt;GO&lt;/span&gt; &lt;span class="nx"&gt;HERE&lt;/span&gt;&lt;span class="err"&gt;💡💡💡&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚀 The same spiel! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#approach-that-we-will-employ"&gt;
  &lt;/a&gt;
  Approach that we will employ 👷
&lt;/h3&gt;

&lt;p&gt;Although there are many ways of achieving this task, we will use the first variant when we extend React.ComponentPropsWithoutRef and here is why.&lt;/p&gt;

&lt;p&gt;By doing so we can achieve the nifty 💡 flexibility 💡 of our component.&lt;/p&gt;

&lt;p&gt;Let’s imagine the case when we have an external link &lt;code&gt;&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; to some resource and it should be styled like this button component, but it should have all the native link props. &lt;/p&gt;

&lt;p&gt;We also don't want to lose any type safety.&lt;/p&gt;

&lt;p&gt;The first reflex is to build a separate link component and just borrow some button styles or class. But, we've got...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#polymorphic-components-in-react"&gt;
  &lt;/a&gt;
  Polymorphic Components in React
&lt;/h3&gt;

&lt;p&gt;With built-in polymorphism in React we can employ a way better strategy! &lt;br&gt;
We can use nifty ‘as’ prop to render our component however we want, be it a link or our standard button!&lt;/p&gt;

&lt;p&gt;❗ However, with Typescript this can be quite painful, since we have some limiting type rigor.&lt;/p&gt;

&lt;p&gt;Let’s again program on interfaces a little, and see how this problem can be solved!&lt;/p&gt;

&lt;p&gt;I’ve already written &lt;a href="https://dev.to/vovacodesca/building-custom-usetypedfetch-hook-in-react-with-typescript-mig"&gt;one article&lt;/a&gt; on dynamic typing in Typescript (in the context of api calls).&lt;/p&gt;

&lt;p&gt;💡 Here we will follow exactly the same approach - we will use generics! &lt;/p&gt;

&lt;p&gt;Here’s the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;renderAs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;ComponentPropsWithoutRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 💡&amp;amp;💡 means that we simply add some type or interface to our props &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s understand it. &lt;/p&gt;

&lt;p&gt;1️⃣ We pass generic  to the props which extends ElementType (&lt;code&gt;ButtonProps&amp;lt;T extends ElementType&amp;gt;&lt;/code&gt;). Element Type is a nifty React utility type - which essentially means that we will be using any valid HTML element or React Component (if we will specify invalid HTML element, an error will be thrown).&lt;/p&gt;

&lt;p&gt;2️⃣ Next we pass this generic to the props and specify in &lt;code&gt;renderAs?: T&lt;/code&gt; that the button will be rendered “as” this generic. &lt;/p&gt;

&lt;p&gt;3️⃣ Finally we add &amp;amp; ComponentPropsWithoutRef to get all native HTML element props right out of the box. &lt;/p&gt;

&lt;p&gt;To make this super clear, if we will specify renderAs = ‘button’ we will automatically get all standard button props, whereas if ‘a’ will be specified, we will get link props (such as href). Cool!&lt;/p&gt;

&lt;p&gt;🚀🚀 We have our interface and now we are ready to proceed and prepare the scaffold for the button. 🚀🚀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaffold"&gt;
  &lt;/a&gt;
  Scaffold
&lt;/h3&gt;

&lt;p&gt;Let's create two files.&lt;/p&gt;

&lt;p&gt;UltimateButton.styles.tsx for the styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;UltimateButton.tsx for the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ComponentPropsWithoutRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UltimateButton.styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;renderAs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;ComponentPropsWithoutRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 💡 In generic the HTML type of component will be specified. And by default it is button&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UltimateButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ElementType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="nx"&gt;renderAs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt;
     &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderAs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Styled.BTN&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UltimateButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we already thought in great detail over the Button’s interface. I think everything should be very self-explanatory.&lt;/p&gt;

&lt;p&gt;❗ Please note, in the Button’s generic &lt;code&gt;&amp;lt;T extends ElementType = 'button'&amp;gt;&lt;/code&gt; we specify the default value of ‘button’. So, if generic will not be specified, this will be our default. ❗&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-the-scaffold"&gt;
  &lt;/a&gt;
  Testing the Scaffold
&lt;/h3&gt;

&lt;p&gt;Let’s test our button in the wild. We will render it as &lt;code&gt;button&lt;/code&gt; and as &lt;code&gt;link&lt;/code&gt;, and as a button with href prop(this case should error out).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXPXbUtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7jjo2fenqwttfwzyrfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXPXbUtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7jjo2fenqwttfwzyrfe.png" alt="Testing Button" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ Please note, in the first case we haven’t specified “renderAs” and the button defaulted to the behavior of the button. It receives native onClick, even though it does not have it in the interface.&lt;/p&gt;

&lt;p&gt;⭐ In the second case, we specified “render as a” and now the button is rendered as a link and accepts all the semantic link props without any errors ( we specified href, target and rel).&lt;/p&gt;

&lt;p&gt;⭐ Finally, in the third case we render a button, but we use “href” prop and this case will error out. Which is great. Also, errors will be thrown if we will specify some incompatible tags that do not exist.&lt;/p&gt;

&lt;p&gt;🖌️ Great! Now we can proceed to styling and making our button - beautiful!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling 🖌️
&lt;/h3&gt;

&lt;p&gt;As I’ve already mentioned, in this series we will be using styled components. &lt;/p&gt;

&lt;p&gt;We want to build a really versatile component with a ton of states. In this case, I do enjoy creating separate styles for each of those states, which will pay-off in readability and maintainability.&lt;/p&gt;

&lt;p&gt;In styled-components we can use &lt;code&gt;css&lt;/code&gt; for this case. &lt;/p&gt;

&lt;p&gt;Here’s how the initial styles backbone looks like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---X4EXjxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9xlkk3rv8u0rs85482b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---X4EXjxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9xlkk3rv8u0rs85482b.png" alt="Styles scaffold" width="880" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These styles styling states live separate of each other, which will allow us seamlessly add new states without any styling issues.&lt;/p&gt;

&lt;p&gt;💡 In &lt;code&gt;buttonCustomProps&lt;/code&gt; we will initialize our CSS custom props aka CSS variables. This actually addresses one of the biggest styled-component’s weaknesses - re-injection classes and re-rendering in the case when some of the styled props have changed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9wInKd5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rhgueqte9fne6twtwma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9wInKd5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rhgueqte9fne6twtwma.png" alt="Custom props" width="880" height="390"&gt;&lt;/a&gt;&lt;br&gt;
You can read about this in great detail in this &lt;a href="https://www.joshwcomeau.com/css/styled-components/"&gt;fantastic article&lt;/a&gt;. Thanks Josh! &lt;/p&gt;

&lt;p&gt;💡Please note, we set initial custom props to the above hard-coded values, or we can use also use global styled theme provider (if we use one) as we did with --mainBg on the 3rd line. We can also pass these custom props as style object to address the performance limitations of styled components (if we are concerned with them of course).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-styles"&gt;
  &lt;/a&gt;
  Default styles
&lt;/h3&gt;

&lt;p&gt;Let’s consume these variables and add default styles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYFBHSKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v13isx33a8x6xry558r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYFBHSKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v13isx33a8x6xry558r.png" alt="Default styles" width="880" height="1270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing fancy.&lt;/p&gt;

&lt;p&gt;We first reset default button styles with “all:unset” and then gradually construct what we want to be our default button.&lt;/p&gt;

&lt;p&gt;🌶️ In order to make our button a little more spicy, I added a small 3d-effect using :before and linear gradient with a sophisticated border radius (will add cool 3d effect).&lt;/p&gt;

&lt;p&gt;Then we can add all these good things to our Styled Button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEmPMlLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dovlso901ov8l5p81mku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEmPMlLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dovlso901ov8l5p81mku.png" alt="Styled Button Styling" width="826" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s the result of our hard word - our default button! Looks kind of cool, isn’t it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCao1dbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmyfeyd1zapp1cjvipg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCao1dbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmyfeyd1zapp1cjvipg2.png" alt="Default button look" width="546" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#button-states"&gt;
  &lt;/a&gt;
  Button States
&lt;/h3&gt;

&lt;p&gt;We already have set the foundation! Let’s enhance it with multiple states and looks!&lt;/p&gt;

&lt;p&gt;Essentially the button should support the following states : hovered, focused, disabled, loading, active and completed.&lt;/p&gt;

&lt;p&gt;Also, it would be great, if it would be easy to add even more custom states (if need be) without and styling problems.&lt;/p&gt;

&lt;p&gt;Let's start with introducing a separate interface for styled props that our styled component will receive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--750b56qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lo214mbzkdbih6xhxbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--750b56qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lo214mbzkdbih6xhxbs.png" alt="Styled Props" width="762" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s firstly deal with native button states - focused, active, hovered and disabled.&lt;/p&gt;

&lt;p&gt;I think that we must separate these native states from custom one’s. More particularly, when we hover over the button we want to apply hovered styles, but when it is in a loading or disabled state we don’t want to do this.&lt;/p&gt;

&lt;p&gt;Since in styled components we can use the full power of Javascript, this can be accomplished in many ways.&lt;/p&gt;

&lt;p&gt;I would prefer to manage states like this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdZjCwwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2rxcsos065a31x2fnxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdZjCwwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2rxcsos065a31x2fnxj.png" alt="Button State Management" width="880" height="734"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 Notice, we receive &lt;code&gt;isLoading&lt;/code&gt; and &lt;code&gt;isCompleted&lt;/code&gt; from the passed props and then we also use standard css pseudo-classes &lt;code&gt;:hover, :focus, :active and :disabled&lt;/code&gt; to apply different styles to different states.&lt;/p&gt;

&lt;p&gt;💫 Now we are ready to add some fill the placeholders of states with some styles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hovered-button"&gt;
  &lt;/a&gt;
  1️⃣ Hovered button
&lt;/h3&gt;

&lt;p&gt;Super simple. We will not be using any super sophisticated styles today, but I encourage you to experiment and be as creative as possible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOCd0eWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwd1z26uxu4clsbozpr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOCd0eWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwd1z26uxu4clsbozpr3.png" alt="Hovered Button" width="778" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focused-button"&gt;
  &lt;/a&gt;
  2️⃣ Focused button
&lt;/h3&gt;

&lt;p&gt;We will add more visibility and prominence for those who navigate our website using the keyboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H44Vc6ch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5gpowedhvw3u3tolhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H44Vc6ch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5gpowedhvw3u3tolhd.png" alt="Focused button" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use nifty &lt;code&gt;:focus-visible&lt;/code&gt; &lt;a href="https://css-tricks.com/almanac/selectors/f/focus-visible/"&gt;pseudo-class&lt;/a&gt; to apply our styles only when the button has focus, but this focus is not triggered by a click. This will greatly enhance the element’s accessibility and will not interfere with the button’s design.&lt;/p&gt;

&lt;p&gt;When the button is focused (through TAB) it will look something like this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4KMUhz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crgb1g9ybl8y6zrke4qk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4KMUhz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crgb1g9ybl8y6zrke4qk.png" alt="Focused button look" width="528" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disabled-button"&gt;
  &lt;/a&gt;
  3️⃣ Disabled button
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zFTEIg9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fobcmkq2aobxmcsghqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFTEIg9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fobcmkq2aobxmcsghqo.png" alt="Disabled button" width="810" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#active-button"&gt;
  &lt;/a&gt;
  4️⃣ Active button
&lt;/h3&gt;

&lt;p&gt;By clicking on the button and triggering this state, I want to emphasize its spicy 🌶️ 3D effect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJAEM-cP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2ymkc2mifq4bxc159oj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJAEM-cP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2ymkc2mifq4bxc159oj.png" alt="Active button" width="880" height="833"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On click, an initial 3D gradient in :before will be hidden, and mirrored gradient will be added to :after.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completed-button"&gt;
  &lt;/a&gt;
  5️⃣ Completed button
&lt;/h3&gt;

&lt;p&gt;This state will be used to indicate a successful finish of some operation, which in turn will make user experience far smoother.&lt;/p&gt;

&lt;p&gt;In our case we will not go crazy. Just add good old green appealing color (however in your projects, I encourage you to go crazy).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBwncdRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zstakq2lvc7b4a461j3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBwncdRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zstakq2lvc7b4a461j3e.png" alt="Completed button" width="844" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also play with the content of the button depending on the state of this flag (isCompleted).&lt;/p&gt;

&lt;p&gt;For instance...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKCm2uZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qidqqnz2r65zj66cw6jq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKCm2uZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qidqqnz2r65zj66cw6jq.png" alt="Using isCompleted" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-finally-tackle-the-big-beast-loading-state"&gt;
  &lt;/a&gt;
  6️⃣ Let’s finally tackle the big beast - loading state
&lt;/h3&gt;

&lt;p&gt;It would be cool to add some loading animation,and not just a boring spinner that is used in 90% of component libraries.&lt;/p&gt;

&lt;p&gt;Let's add a repeating linear gradient and liven it with some animation.&lt;/p&gt;

&lt;p&gt;In styled components, for animations we can borrow &lt;code&gt;keyframes&lt;/code&gt; or write plain old css. Depends on your preference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8OLFvBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8z3ww5vfgzwfwalw8dz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8OLFvBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8z3ww5vfgzwfwalw8dz.png" alt="Loading keyframes" width="860" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s our loading button styles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aWqumOsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1q2938k5o3qvf5z363a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWqumOsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1q2938k5o3qvf5z363a.png" alt="Loading button styles" width="880" height="808"&gt;&lt;/a&gt;&lt;br&gt;
💡 In &lt;code&gt;:before&lt;/code&gt; we add wide gradient and simply animate its transition on X axis. As simple as that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;Oof! That was a lot of work! &lt;br&gt;
I hope you enjoyed this whole rodeo and learned something useful.&lt;/p&gt;

&lt;p&gt;Let’s wrap up. &lt;/p&gt;

&lt;p&gt;🏆 We've built a polymorphic component that can be used as a button and link.&lt;br&gt;
🏆 We've nicely separated styles of different component states from each other and now can add even more states without any problems.&lt;/p&gt;

&lt;p&gt;🎊  If you enjoyed what we've done, consider giving article a like and subscribing to &lt;a href="https://github.com/vovaushenko"&gt;my github&lt;/a&gt; for more updates! 🎊   &lt;/p&gt;

&lt;p&gt;Cheers! &lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hactoberfest and me!😀</title>
      <author>Veera Srivastava</author>
      <pubDate>Thu, 28 Oct 2021 13:54:12 +0000</pubDate>
      <link>https://dev.to/veerasrivastava/hactoberfest-and-you-4ch0</link>
      <guid>https://dev.to/veerasrivastava/hactoberfest-and-you-4ch0</guid>
      <description>&lt;p&gt;I completed the Hactoberfest, 2nd year in a row!!&lt;br&gt;
With the arrival of the October, being able to be driven into scouring through Github to find a repo that suits me is kind of fun!!&lt;/p&gt;

&lt;p&gt;Every year, there are new repos and along come opportunities for more learning, It really does change our community of open source! Thanks to &lt;a class="mentioned-user" href="https://dev.to/digitalocean_staff"&gt;@digitalocean_staff&lt;/a&gt;
 &amp;amp;&amp;amp; &lt;a class="mentioned-user" href="https://dev.to/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt;
 for the whole experience!!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>My Hacktober contributions in 2021</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 28 Oct 2021 13:48:35 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/my-hacktober-contributions-in-2021-1756</link>
      <guid>https://dev.to/alvaromontoro/my-hacktober-contributions-in-2021-1756</guid>
      <description>&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt;I wasn't too active at Hacktoberfest this year :S&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>Mouse tracking eye using Vue 3, VueUse and CSS</title>
      <author>Taliesin</author>
      <pubDate>Thu, 28 Oct 2021 13:41:21 +0000</pubDate>
      <link>https://dev.to/taliescript/mouse-tracking-eye-using-vue-3-vueuse-and-css-44of</link>
      <guid>https://dev.to/taliescript/mouse-tracking-eye-using-vue-3-vueuse-and-css-44of</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this blog, I will be showing you have to make a mouse-tracking eye component using Vue 3, VueUse and a sprinkle of CSS. This eye-catching component will make a quirky addition to your future projects.&lt;/p&gt;

&lt;p&gt;Firstly let's break the eyes, my name is Taliesin, and I work at &lt;a href="https://www.pixelhop.io/"&gt;Pixelhop&lt;/a&gt;. I made this for our Halloween special project we at Pixelhop made called &lt;a href="https://trick-or-treat.pixelhop.io/"&gt;trick-or-treat&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you would like to get your eyes on the whole code example, please find it &lt;a href="https://codesandbox.io/s/mouse-tracking-eye-rpzyt?file=/src/App.vue"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Readers are recommended to have a basic understanding of Vue 3 using the composition API, also not recommended for anyone with Ommetaphobia or if you have anything against terrible eye puns. So if we see eye to eye, let's crack on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;So, to summer-eyes, for this to work, we will need to have an SVG of an eye with the pupil to one side. We are then just going to set the transform rotate property to point the pupil in the direction of the mouse as it moves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;If you already have a project and an eye SVG ready, you can roll your eyes on to the next section. But if you're like the alien called Alen and missing an eye, here I will just be setting up a basic Vue 3 project and setting the foundation of what we are making.&lt;br&gt;
So first, we want to set up a basic Vue 3 project. The easiest way to do this is using npx and the Vue CLI by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @vue/cli create mouse-tracking-eye
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the default vue 3 preset &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWqVGrN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qwz07rdcnoo7zsbrbaf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWqVGrN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qwz07rdcnoo7zsbrbaf.jpeg" alt="Selecting the default vue 3 preset" width="808" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your dependancies manager (I'm using npm)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kLN6VGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvi55hx9kg8eqkw6jgyu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kLN6VGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvi55hx9kg8eqkw6jgyu.jpeg" alt="Selecting npm" width="880" height="100"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the folder and install the dependancies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;mouse-tracking-eye/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now remove all the bits the vue cli gives us that we don't need. First, remove the components and assets folders. Then in the &lt;code&gt;App.vue&lt;/code&gt;, we should remove all the base stuff it gives us. You are just left with the template, script and style tag.&lt;/p&gt;

&lt;p&gt;I am using the &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; syntax, which you can read about &lt;a href="https://v3.vuejs.org/api/sfc-script-setup.html#basic-syntax"&gt;here&lt;/a&gt; and typescript because why not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.js --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to eye up the template, I'm using the SVG I used for our Halloween project. Add a div and give it a class of &lt;code&gt;container&lt;/code&gt;, then paste the SVG inside the container div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.ts &amp;gt; temaplate --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
    &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 33 33"&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      ...
  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Centre the eye and add a black background, so the eye stands out with a bit of CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* App.js &amp;gt; style */&lt;/span&gt;

&lt;span class="nc"&gt;.conatainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.eye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Spec-tacular! Now, if you run your project, you should have an eye in the middle of your screen and a black background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mouse-tracking-functionality"&gt;
  &lt;/a&gt;
  Mouse tracking functionality
&lt;/h3&gt;

&lt;p&gt;This section will focus on getting the eye to follow the mouse.&lt;/p&gt;

&lt;p&gt;As previously mentioned, we will be using the vueuse library. Vueuse is a super helpful function library for Vue 3 with a few functions that will simplify this. So let's install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @vueuse/core
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import the functions we need into our app and we might as well import the function we need from Vue as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!--&lt;/span&gt; &lt;span class="na"&gt;App&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vue&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; script --&amp;gt;
import &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useMouse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useWindowSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;debouncedWatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;throttledWatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt; from '@vueuse/core';
import &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt; from 'vue';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eye eye, now we got those imported, we can start using them. The first two we will use are &lt;code&gt;useMouse&lt;/code&gt; and &lt;code&gt;useWindowSize&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;useMouse&lt;/code&gt; returns the x and y of the mouse position, and &lt;code&gt;useWindowSize&lt;/code&gt; returns... You guessed it, the window size width and height.&lt;br&gt;
So just under the import, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.vue &amp;gt; script&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mouseX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mouseY&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMouse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useWindowSize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to get the eye location on the screen, to do this add a ref to the SVG in the template. So it will be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.vue &amp;gt; template --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
  &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"eye"&lt;/span&gt;
  &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 33 33"&lt;/span&gt;
  &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now we can reference it in the script, we just need to add a ref variable with null as its starting value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.vue &amp;gt; script&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eye&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; If you are using a setup function inside a regular script tag, make sure you add the ref to the return object, or it will not work.&lt;/p&gt;

&lt;p&gt;Now define the eye location reference&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.vue &amp;gt; script&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eyeLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DOMRect&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I am setting the eye location inside the &lt;code&gt;onMounted&lt;/code&gt; function we import from vue earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.vue &amp;gt; script&lt;/span&gt;
&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;eyeLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also want to set the eye's location when the screen size is changed because depending on where it is this might move the eye. To achieve this we can use the &lt;code&gt;debounceWatch&lt;/code&gt;&lt;br&gt;
To summarise what happening here; we are watching for a change in the window height and width and for a change and running a debounce function when it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.vue &amp;gt; script&lt;/span&gt;
&lt;span class="nx"&gt;debouncedWatch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;eyeLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we've now we've got an eye on its location, let's get the ball rolling and actually make the eye move.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.vue &amp;gt; script&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rotationDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;throttledWatch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;mouseX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mouseY&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eyeLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;radianDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;atan2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;eyeLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;eyeLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;rotationDegrees&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radianDegrees&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if you got an eye for this sort of thing, then you'll be able to understand it, but if you're like a blind Bambi and have no-eye-deer. Don't worry; I'll give a quick summary of what's happening;&lt;/p&gt;

&lt;p&gt;Firstly, we define the ref &lt;code&gt;rotationDegrees&lt;/code&gt; which will be the number of degrees we need to rotate our eye. Next, we are using the &lt;code&gt;throttledWatch&lt;/code&gt; function to watch the mouse location, then set the &lt;code&gt;rotationDegrees&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, it gets the &lt;code&gt;radianDegrees&lt;/code&gt; using the &lt;code&gt;Math.atan2&lt;/code&gt; function; read more &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2"&gt;here&lt;/a&gt;. Basically, it receives the radian between the eye location and the mouse. I am using the top and right locations of the eye, but depending on where your eye's pupil is pointing, you may need to use a different location. Then we convert the radian into degrees we can use to rotate the eye.&lt;/p&gt;

&lt;p&gt;This function is then throttled to 60 times per second as we don't need to run this more than that as most screens only run a 60 hertz anyway.&lt;/p&gt;

&lt;p&gt;Now all we need to do is set the transform rotate property to the SVG and you'll really be turning some eyes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.vue &amp;gt; temaplate --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
  &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"eye"&lt;/span&gt;
  &lt;span class="na"&gt;:style=&lt;/span&gt;&lt;span class="s"&gt;"`transform: rotate(${rotationDegrees - 40}deg) translateZ(0)`"&lt;/span&gt;
  &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 33 33"&lt;/span&gt;
  &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; You may need to do what I did by adding or subtracting a few degrees if your eye is not pointing precisely left or right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Because we are getting the eye location on mounted and screen size change, you can place your eye anywhere on the screen, and it will still work.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this mini tutorial, and it helps you create some fun projects. Feel free to send us your creations. I would love to eye them up. You can find our contact details at &lt;a href="https://www.pixelhop.io/contact/"&gt;https://www.pixelhop.io/contact/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested to see the original eye, I made and our Halloween special project, check it out here: &lt;a href="https://trick-or-treat.pixelhop.io/"&gt;https://trick-or-treat.pixelhop.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please keep your eyes peeled for our new blogs at &lt;a href="https://www.pixelhop.io/writing/"&gt;https://www.pixelhop.io/writing/&lt;/a&gt; or sign up for our newsletter.&lt;/p&gt;

&lt;p&gt;See you later 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Quiz📣: How Well Do You Understand Asynchronous JavaScript?</title>
      <author>Ekaterina Vujasinović</author>
      <pubDate>Thu, 28 Oct 2021 13:37:47 +0000</pubDate>
      <link>https://dev.to/ditdot/quiz-how-well-do-you-understand-asynchronous-javascript-5e4j</link>
      <guid>https://dev.to/ditdot/quiz-how-well-do-you-understand-asynchronous-javascript-5e4j</guid>
      <description>&lt;p&gt;Over the last few weeks, we had a lot of discussions on asynchronous JavaScript and patterns we use in our projects to build performant apps. It resulted in an article - &lt;a href="https://www.ditdot.hr/en/4-tips-better-asynchronous-javascript-code"&gt;4 tips on writing better async/await code&lt;/a&gt;. Besides practical aspects like asynchronous coding patterns and best practices, one of the discussed topics was the importance of understanding how JavaScript handles asynchronous code under the hood.&lt;/p&gt;

&lt;p&gt;Asynchronous code is passed to wait in one of the queues and executed whenever the call stack is empty. Tasks in the queues and call stack are coordinated by the event loop - the key mechanism used by JavaScript to avoid blocking the main thread. Learn more about it &lt;a href="https://blog.bitsrc.io/understanding-asynchronous-javascript-the-event-loop-74cd408419ff"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We've collected 4 interesting examples of code (it looks like 4 is our favorite number 😉) that will help you test your knowledge of event loop and JavaScript asynchronous execution flow. Let's start ⏬&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-which-queue-is-executed-first"&gt;
  &lt;/a&gt;
  1. Which Queue Is Executed First?
&lt;/h2&gt;

&lt;p&gt;Before diving deep into the event loop, call stack, and tasks, let's begin with a little warm-up question.&lt;/p&gt;

&lt;p&gt;Not all queues were created equal. Knowing that &lt;code&gt;setTimeout()&lt;/code&gt; callback is pushed to the task queue, and &lt;code&gt;then()&lt;/code&gt; callback to the microtask queue, which one do you think will log first?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Task queue &lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timeout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Microtask queue &lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  Show the answer 👇
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; 
&lt;span class="nx"&gt;timeout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The tasks scheduled in the task queue will run first. But wait, how come the output logged from the &lt;code&gt;setTimeout()&lt;/code&gt; callback appears second in our example?&lt;/p&gt;

&lt;p&gt;In each iteration, the event loop will run the oldest initially existing task in the task queue first, and all the microtasks in the microtask queue second. When the event loop starts its first iteration, the task queue contains only one task - the main program script run. The &lt;code&gt;setTimeout()&lt;/code&gt; callback is added to the task queue during the first iteration and will be queued from tasks only during the next iteration.&lt;/p&gt;

&lt;p&gt;To better understand these mind-blowing concepts, check this &lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/#why-this-happens"&gt;animated diagram&lt;/a&gt; by Jake Archibald.&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-is-the-output-of-the-code-below"&gt;
  &lt;/a&gt;
  2. What Is the Output of the Code Below?
&lt;/h2&gt;

&lt;p&gt;To answer this question, you need to be familiar with the concepts like synchronous vs. asynchronous code order of execution and how the event loop is running tasks.&lt;/p&gt;

&lt;p&gt;Equally important, you also need to know which code runs synchronously and which asynchronously. Hint: not all Promise-related code is asynchronous. 🤯&lt;/p&gt;

&lt;p&gt;There are four &lt;code&gt;console.log()&lt;/code&gt; calls below.  What will be logged in the console and in which order?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//A&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// B&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  Show the answer 👇
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* B */&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="cm"&gt;/* D */&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="cm"&gt;/* C */&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="cm"&gt;/* A */&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The code inside the &lt;code&gt;new Promise&lt;/code&gt; executor function runs synchronously before the Promise goes to a resolved state (when &lt;code&gt;resolve()&lt;/code&gt; is called). For this reason example code logs &lt;code&gt;1&lt;/code&gt; and sets variable &lt;code&gt;a&lt;/code&gt; value to &lt;code&gt;3&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The variable value remains unchanged in all further &lt;code&gt;console.log()&lt;/code&gt;calls.&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-in-what-order-will-letters-be-logged"&gt;
  &lt;/a&gt;
  3. In What Order Will Letters Be Logged?
&lt;/h2&gt;

&lt;p&gt;How do DOM events fit in the event loop task handling mechanism?  What we have here is a &lt;code&gt;div&lt;/code&gt; container containing a &lt;code&gt;button&lt;/code&gt; element. Event listeners are added to both the button and the container. Since the click event will bubble up,  both listener handlers will be executed on a button click.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the output after button click?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; 
  &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  Show the answer 👇
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;B&lt;/span&gt;
&lt;span class="nx"&gt;A&lt;/span&gt;
&lt;span class="nx"&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;No surprise here. The task of dispatching &lt;code&gt;click&lt;/code&gt; event and executing handler will be invoked via the event loop, with synchronous code logging first and &lt;code&gt;then()&lt;/code&gt; callback logging second. Next, the event bubbles up and the container event handler is executed.&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-will-the-output-change"&gt;
  &lt;/a&gt;
  4. Will the Output Change?
&lt;/h2&gt;

&lt;p&gt;The code is the same as in the previous example, with a small addition of &lt;code&gt;button.click()&lt;/code&gt; at the end. It is a weird UI design pattern where the button is clicked automatically. Do you think it's a game-changer or logging order stays the same? 🤔&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; 
  &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  Show the answer 👇
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;B&lt;/span&gt;
&lt;span class="nx"&gt;C&lt;/span&gt;
&lt;span class="nx"&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The strings are indeed logged in different order. &lt;code&gt;button.click()&lt;/code&gt; is making all the difference, sitting at the bottom of the call stack and preventing microtask queue tasks from executing. Only after the call stack is emptied, &lt;code&gt;() =&amp;gt; console.log('A')&lt;/code&gt; will be queued from the microtasks.&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Feel free to share your mind-boggling async &amp;amp; event loop related code examples in the comments ✍️. Don't forget to ❤️ and follow for more web dev content. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>quiz</category>
    </item>
    <item>
      <title>Looking into Flutter: Secrets of its Success &amp; Review of Popular UI Libraries and Components</title>
      <author>Pavel Lazarev</author>
      <pubDate>Thu, 28 Oct 2021 13:30:38 +0000</pubDate>
      <link>https://dev.to/plazarev/looking-into-flutter-secrets-of-its-success-review-of-popular-ui-libraries-and-components-fa1</link>
      <guid>https://dev.to/plazarev/looking-into-flutter-secrets-of-its-success-review-of-popular-ui-libraries-and-components-fa1</guid>
      <description>&lt;p&gt;In recent years, cross-platform development has become one of the hottest trends in the world of programming. And it is not surprising, since this approach brings in a lot of significant advantages. Product owners can expect that the use of multi-platform technologies will reduce development costs and ensure faster time to market. Developers, in turn, can use the same business logic for web, mobile, and desktop versions applications and consequently have less trouble with code maintenance.&lt;/p&gt;

&lt;p&gt;Developing a platform-independent application is a challenging task. So if you decide to start such a project, you will certainly require a special framework. Fortunately, there are plenty of them available out there. But right now, Flutter is one of the most promising tools on the landscape of cross-platform technologies. In this article, you will become familiar with Flutter, review a range of ready-made UI components for this framework, and learn about upcoming commercial Flutter components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flutter-and-why-is-it-so-popular"&gt;
  &lt;/a&gt;
  What is Flutter and Why is it so Popular?
&lt;/h2&gt;

&lt;p&gt;Flutter is a relatively new declarative UI framework designed and maintained by Google to facilitate the implementation of cross-platform software solutions. Launched just in 2018, it has already gained recognition and popularity among developers. Responders of the popular &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-other-frameworks-libraries-and-tools-loved3"&gt;Developer Survey 2020&lt;/a&gt; held by Stack Overflow recognized Flutter as one of the most loved tools and technologies of the last year. A fresh &lt;a href="https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/"&gt;developer survey&lt;/a&gt; from Statista names Flutter the most popular cross-platform framework utilized by software developers worldwide. Moreover, it has already reached the mark of 132K stars on &lt;a href="https://github.com/flutter/flutter"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AiNJKVn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5cjr72r4ou86ih3morv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AiNJKVn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5cjr72r4ou86ih3morv.png" alt="Survey from Statista" width="704" height="415"&gt;&lt;/a&gt;&lt;br&gt;
Source: &lt;a href="https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/"&gt;Statista&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So why is this technology so popular among professional developers?&lt;/p&gt;

&lt;p&gt;First of all, Flutter enables you to build performant applications that feel natural on various platforms using almost the same codebase. Flutter uses the Dart as the programming language and allows you to benefit from its numerous features.  For instance, the hot reload function makes it much easier to add new features to a Flutter project and test them without restarting the app. The popularity of Flutter continues growing very fast thanks in large part to strong support from a large community led by Google.&lt;/p&gt;

&lt;p&gt;In Flutter, everything revolves around widgets. They play a key role in the Flutter hierarchy, serving as building blocks of all graphical objects in an app’s UI. The framework comes with two built-in sets of reusable widgets (Material Design and Cupertino) that can be customized to provide the desired UI and UX. If that’s not enough for your app, I’ve prepared a review of some interesting UI libraries and components that can be useful in Flutter-based applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opensource-ui-libraries-and-components-for-flutter"&gt;
  &lt;/a&gt;
  Open-Source UI Libraries and Components for Flutter
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#getwidget"&gt;
  &lt;/a&gt;
  GetWidget
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6qrUGw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8by7slgyd20kxo404dob.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6qrUGw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8by7slgyd20kxo404dob.jpg" alt="GetWidget component" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ionicfirebaseapp/getwidget"&gt;GetWidget&lt;/a&gt; (previously known as GetFlutter) is probably one of the largest and most well-known UI libraries designed with the use of Flutter SDK. It comprises a huge collection (1000+) of reusable widgets intended for covering various cross-platform development needs. With GetWidget, you can easily create widely used UI elements such as tabs, buttons, menus, lists, sliders, and many others. According to the GetWidget team, the library helps to cut the development time by 30–40%. Here is an open-source &lt;a href="https://www.ionicfirebaseapp.com/products/flutter-news-app"&gt;News application&lt;/a&gt; based on GetWidget and Flutter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutterneumorphic"&gt;
  &lt;/a&gt;
  Flutter-Neumorphic
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJkvMxGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3ap0adpf0037x5i29au.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJkvMxGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3ap0adpf0037x5i29au.png" alt="Flutter-Neumorphic component" width="599" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you follow web design trends, then you are certainly familiar with the term neumorphism. It relates to a new design approach that obtained quite extensive popularity in recent times.  A neumorphic design implies extensive usage of shadows and gradients. Many developers find it difficult to implement UI elements with this kind of design with Flutter. If you are one of them, &lt;a href="https://github.com/Idean/Flutter-Neumorphic"&gt;Flutter-Neumorphic&lt;/a&gt; is exactly what you need. This UI package will help you to create neumorphic UIs in Flutter apps much faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plutogrid"&gt;
  &lt;/a&gt;
  PlutoGrid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKwNNd6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlnxg3s0a1t7fx51bonk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKwNNd6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlnxg3s0a1t7fx51bonk.png" alt="PlutoGrid component" width="607" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A grid functionality is a vital aspect of any application, especially if you are working on a data-intensive solution. You can consider &lt;a href="https://github.com/bosskmk/pluto_grid"&gt;PlutoGrid&lt;/a&gt; to make the implementation of this important element easier in Flutter apps. This is a client-side UI grid component for creating standard data tables that render well across various platforms. It can be navigated via the keyboard. Using this component, you can add many useful features to the table such as sorting&amp;amp;filtering, frozen columns, multiselection, cell renderer, grid as a popup, etc. It is also possible to enable a dark theme for the whole data table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#staggered-gridview"&gt;
  &lt;/a&gt;
  Staggered GridView
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxyU2RvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cr7csedztcvo4z10ll6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxyU2RvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cr7csedztcvo4z10ll6.jpg" alt="Staggered GridView component" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/letsar/flutter_staggered_grid_view"&gt;Staggered GridView&lt;/a&gt; is a useful instrument for displaying images in a feed-like manner that is not typical for a standard GridView. This approach is used in popular social networks (Instagram) and photo hostings (Pinterest). Staggered GridView comes with multiple columns, rows of varying sizes, and many other helpful features allowing you to easily present groups of images with different height and width parameters. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boxy"&gt;
  &lt;/a&gt;
  Boxy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbKdnF7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9labu0rpekbbk0kofrox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbKdnF7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9labu0rpekbbk0kofrox.png" alt="Boxy component" width="464" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you ever used Flutter’s built-in layout widgets, then you should know that it has some limitations related to the implementation of flex and custom layouts. You can overcome these difficulties by using &lt;a href="https://github.com/PixelToast/flutter-boxy"&gt;Boxy&lt;/a&gt;. This tool is utilized for creating complex layouts with multiple children that help to arrange the interface structure of your Flutter app. Boxy offers a set of utilities for layouts, dynamic widget inflation, slivers, and many other useful things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timelinetile"&gt;
  &lt;/a&gt;
  TimelineTile
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gySPLFIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srf2e7p5thfix6c3thwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gySPLFIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srf2e7p5thfix6c3thwu.png" alt="TimelineTile component" width="524" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/JHBitencourt/timeline_tile"&gt;TimelineTile&lt;/a&gt; is a UI component that enables you to represent events or processes in chronological order via a timeline in Flutter. Using TimelineTile, you can build a vertical or horizontal timeline and complement it with additional items (icons, images, text). This component gives you the freedom to customize any timeline element according to your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#charts-library"&gt;
  &lt;/a&gt;
  Charts library
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gUwQahr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6h703077to7vr1nauke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gUwQahr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6h703077to7vr1nauke.png" alt="Charts library for Flutter" width="783" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data visualization is a tricky task for any programmer. Therefore it is nice to have a good charting library in your arsenal. &lt;a href="https://github.com/google/charts"&gt;Charts&lt;/a&gt; is a charting library that certainly deserves your attention. It is designed internally at Google, though it is not the company’s official product. Written in Dart and based on Material Design, this library suits well for various data visualization purposes in Flutter apps. It supports an array of charts (bar, line, time series, pie, scatter plot, etc.) for visualizing complex data and making it more comprehensible for further analysis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fl-chart"&gt;
  &lt;/a&gt;
  FL Chart
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPLlhi2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzqc4tviva2ba8b143hd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPLlhi2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzqc4tviva2ba8b143hd.png" alt="FL Chart component" width="656" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/imaNNeoFighT/fl_chart"&gt;FL Chart&lt;/a&gt; is one more charting option for the Flutter ecosystem that I would recommend for consideration. It is a robust Flutter chart library used for creating popular charts. Currently, the list of available chart types includes the following: line chart, bar chart, pie chart, scatter chart, and radar chart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter-formbuilder"&gt;
  &lt;/a&gt;
  Flutter FormBuilder
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZOyaylj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukgxgivubx476k4cnxnb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZOyaylj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukgxgivubx476k4cnxnb.jpg" alt="FormBuilder component" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danvick/flutter_form_builder"&gt;Flutter FormBuilder&lt;/a&gt; is an intuitive tool designed to help you in creating cross-platform forms, and thereby provide a reliable communication channel between users and a Flutter application. It comprises a range of input widgets encountered in standard forms: text field, checkbox, slider, rangepicker, datepicker, etc. If needed, this form maker also gives you an opportunity to produce custom input fields. Numerous built-in validators (number, mail, min, max, etc.)  help to ensure that users submit only valid data. You can incorporate a combination of several validators and conditional validation (the validation of one field depends on the value entered in other specific fields).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tablecalendar"&gt;
  &lt;/a&gt;
  TableCalendar
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CsfydfWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbjn9773wkxkjs1etim7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsfydfWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbjn9773wkxkjs1etim7.png" alt="TableCalendar component" width="530" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you require assistance in arranging activities (meetings, tasks, appointments) in a time sequence in Flutter projects, take a look at &lt;a href="https://github.com/aleksanderwozniak/table_calendar"&gt;TableCalendar&lt;/a&gt;. This widget has a rich API allowing you to build multifunctional calendars with multiple view formats (week, two weeks, month) and customizable styling. Besides standard one-day activities, you can schedule custom events such as recurring ones. It also supports dynamic events and holidays. The localization feature will help you to reach more potential users from different countries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter-map"&gt;
  &lt;/a&gt;
  Flutter Map
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_fSbcH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o942compgxror76az9pe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_fSbcH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o942compgxror76az9pe.jpg" alt="Map component for Flutter" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fleaflet/flutter_map"&gt;Flutter Map&lt;/a&gt; is a map widget that brings the ability to visualize geographic data to your app. In fact, it is a Dart implementation of a popular JS mapping library named Leaflet. With Flutter Map, you can build interactive maps and enrich them with various features (panning, zooming, markers, etc.). It also supports offline maps. Numerous plugins allow extending the core feature set with additional functionalities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-commercial-ui-solutions-for-flutter"&gt;
  &lt;/a&gt;
  What about Commercial UI Solutions for Flutter
&lt;/h2&gt;

&lt;p&gt;Open-source components for Flutter are great and they help to achieve different development goals absolutely for free. But what if you need more advanced components with a regularly updated feature set and technical support? In such cases, it is better to opt for commercial UI libraries.&lt;/p&gt;

&lt;p&gt;The main issue here is that it is really hard to find any commercial UI components for Flutter on the market. I’ve managed to find just one solution - a package of Flutter widgets from Syncfusion. Although this library is still under active development, it already can offer you a lot of useful widgets such as grid, sliders, event calendar, and numerous data visualization tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGpFvrdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw4x918s3y06gvsrwgc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGpFvrdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw4x918s3y06gvsrwgc9.png" alt="DHTMLX Gantt for Flutter" width="880" height="660"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Taking into account the scarcity of complex UI components for Flutter, the DHTMLX team seriously considers the possibility of developing Flutter Gantt that will enable developers to build project management apps with Flutter. The company has abundant experience in providing Gantt libraries for popular front-end technologies. Currently, the DHTMLX product portfolio already includes Gantt components for JS, React, Vue.js, and Svelte. And Flutter Gantt can become the next step. That’s how the development team sees &lt;a href="https://dhtmlx.com/docs/products/dhtmlxGantt-for-Flutter/"&gt;DHTMLX Gantt for Flutter&lt;/a&gt; right now. On this landing page, you can make a pre-order for Flutter Gantt.&lt;/p&gt;

&lt;p&gt;This article was originally published on &lt;a href="https://dhtmlx.medium.com/looking-into-flutter-secrets-of-its-success-review-of-popular-ui-libraries-and-components-e32089172146"&gt;medium.com&lt;/a&gt; on July 27th, 2021.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>flutter</category>
      <category>mobile</category>
      <category>programming</category>
    </item>
    <item>
      <title>VSCode - Extensions</title>
      <author>Leandro Torres</author>
      <pubDate>Thu, 28 Oct 2021 13:08:57 +0000</pubDate>
      <link>https://dev.to/leandroats/vscode-extensions-5a2</link>
      <guid>https://dev.to/leandroats/vscode-extensions-5a2</guid>
      <description>&lt;p&gt;O VSCode é uma ferramenta incrível. Como possui o recurso de Extensões, você consegue aprimorar ainda mais a experiência, deixar tudo com a sua cara e de quebra aumentar a sua produtividade. Vou listar algumas extensões que eu utilizo.&lt;/p&gt;

&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;CodeSnap - adpyke&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ajuda nos prints 😁&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEJ88-ZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://adpyke.gallerycdn.vsassets.io/extensions/adpyke/codesnap/1.3.4/1625238962906/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEJ88-ZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://adpyke.gallerycdn.vsassets.io/extensions/adpyke/codesnap/1.3.4/1625238962906/Microsoft.VisualStudio.Services.Icons.Default" width="256" height="256"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;CodeTour - Jonathan Carter&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma forma bastante interessante de documentar.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UPQ6woj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vsls-contrib.gallerycdn.vsassets.io/extensions/vsls-contrib/codetour/0.0.58/1625784500119/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UPQ6woj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vsls-contrib.gallerycdn.vsassets.io/extensions/vsls-contrib/codetour/0.0.58/1625784500119/Microsoft.VisualStudio.Services.Icons.Default" width="128" height="128"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=jmMeessen.jenkins-declarative-support&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;Declarative Jenkinsfile Support - JM Meessen&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pipeline do Jenkins de forma mais amigável.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bchmPRUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jmmeessen.gallerycdn.vsassets.io/extensions/jmmeessen/jenkins-declarative-support/0.1.0/1493632413360/Microsoft.VisualStudio.Services.Icons.Default" width="185" height="256"&gt;
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;Dracula Official - Dracula Theme&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Meu tema preferido, normalmente coloco esse padrão de cores nas ferramentas que utilizo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QgeJHFHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dracula-theme.gallerycdn.vsassets.io/extensions/dracula-theme/theme-dracula/2.24.0/1630671466069/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QgeJHFHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dracula-theme.gallerycdn.vsassets.io/extensions/dracula-theme/theme-dracula/2.24.0/1630671466069/Microsoft.VisualStudio.Services.Icons.Default" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;Live Server - Ritwick Dey&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cria um servidor web com  um click.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BvIAhKI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvIAhKI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default" width="256" height="256"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;Markdown Preview Github Styling - Matt Bierner&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Preview do markdown no estilo do GitHub.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oJJEglK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bierner.gallerycdn.vsassets.io/extensions/bierner/markdown-preview-github-styles/0.2.0/1618262856034/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oJJEglK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bierner.gallerycdn.vsassets.io/extensions/bierner/markdown-preview-github-styles/0.2.0/1618262856034/Microsoft.VisualStudio.Services.Icons.Default" width="128" height="128"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;REST Client - Huachao Mao&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Funciona como um client Rest, suporta scripts que são tranquilos de fazer de entender.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7LA3WHrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://humao.gallerycdn.vsassets.io/extensions/humao/rest-client/0.24.5/1617725796156/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7LA3WHrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://humao.gallerycdn.vsassets.io/extensions/humao/rest-client/0.24.5/1617725796156/Microsoft.VisualStudio.Services.Icons.Default" width="256" height="256"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;🎯&lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons&amp;amp;WT.mc_id=devto-blog-leandroats"&gt;&lt;em&gt;vscode-icons - VSCode Icons Team&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma quantidade gigante de ícones para qualquer linguagem de programação.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pFIC8Vah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vscode-icons-team.gallerycdn.vsassets.io/extensions/vscode-icons-team/vscode-icons/11.6.0/1627842034344/Microsoft.VisualStudio.Services.Icons.Default" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFIC8Vah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vscode-icons-team.gallerycdn.vsassets.io/extensions/vscode-icons-team/vscode-icons/11.6.0/1627842034344/Microsoft.VisualStudio.Services.Icons.Default" width="128" height="128"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Referências:&lt;br&gt;
👉 &lt;a href="https://code.visualstudio.com/?WT.mc_id=devto-blog-leandroats"&gt;VSCode&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://draculatheme.com/?WT.mc_id=devto-blog-leandroats"&gt;Dracula Theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Até a próxima!👊&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;us Now you can support me by buying a coffee&lt;br&gt;
pt Agora você pode me apoiar comprando um café&lt;br&gt;
☕😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/leandroats"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>vscode</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
