<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Acra. Features: Searchable encryption</title>
      <author>Cossack Labs</author>
      <pubDate>Thu, 02 Dec 2021 18:01:45 +0000</pubDate>
      <link>https://dev.to/cossacklabs/searchable-encryption-4gjl</link>
      <guid>https://dev.to/cossacklabs/searchable-encryption-4gjl</guid>
      <description>&lt;p&gt;Cloud storage technologies have their gains and pains. While they enable distributed operations, they also raise the question of &lt;strong&gt;keeping data well-protected&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Encrypting sensitive data is one of the first steps in this field. However, encryption makes it harder to search over the data once it is encrypted, which is both what encryption is needed for and a huge operational downside. In an ideal world, it would be convenient to keep the data encrypted and still be able to securely search over it, without constraining the application architecture. And &lt;strong&gt;today it's possible.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;To solve the issue, we built a technology called &lt;strong&gt;Acra Searchable Encryption&lt;/strong&gt;. It‚Äôs basic version is available in Acra Community Edition, a more sophisticated one‚Äîin Acra Enterprise Edition. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/cossacklabs/acra"&gt;Use Acra Community Edition for free&lt;/a&gt;. Check out &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt; tailored for solutions with high security requirements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#searchable-encryption"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Searchable encryption
&lt;/h2&gt;

&lt;p&gt;Searchable encryption means that data is stored encrypted in the database, yet it‚Äôs possible to run simple queries on encrypted fields without decrypting them. &lt;/p&gt;

&lt;p&gt;üí° There are &lt;strong&gt;various searchable encryption schemes&lt;/strong&gt; available, but in Acra we use one that balances security and usability the best‚Äîit's &lt;strong&gt;keyword search.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.cossacklabs.com/acra/security-controls/searchable-encryption/"&gt;Acra‚Äôs search through encrypted data&lt;/a&gt; is based on blind indexing with probabilistic bloom filters, built around strong AES-GCM-256 and HMAC.&lt;/p&gt;

&lt;p&gt;Acra encrypts data fields and builds a searchable index for them. Acra supports exact queries out of the box (&lt;code&gt;select * from emails where email=&amp;lt;query&amp;gt;&lt;/code&gt;), and allows building compound encrypted indexes to make even sophisticated queries possible over encrypted data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Unlike the existing solutions, Acra provides adjustable performance-leakage ratio for protected search, strict separation of duties which guarantees absence of cryptographic key leakage from application, secure storage and management of cryptographic keys, and a set of additional security features that better correspond to the real-world threats.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---X-CsSZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjk2ux7kl0pfxakxn2j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---X-CsSZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjk2ux7kl0pfxakxn2j.gif" alt="Searchable encryption" width="862" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üî• Ready to learn more Acra features? Follow the link to get acquainted with another feather in our cap :)&lt;/p&gt;

</description>
      <category>cryptography</category>
      <category>security</category>
      <category>encryption</category>
      <category>database</category>
    </item>
    <item>
      <title>Acra. Features: Application-level encryption</title>
      <author>Cossack Labs</author>
      <pubDate>Thu, 02 Dec 2021 17:58:38 +0000</pubDate>
      <link>https://dev.to/cossacklabs/application-level-encryption-4n32</link>
      <guid>https://dev.to/cossacklabs/application-level-encryption-4n32</guid>
      <description>&lt;p&gt;Ultramodern industries that operate on sensitive data, like fintech and neobanking, require sharp and accurate data security solutions that can be easily maintained and controlled. &lt;/p&gt;

&lt;p&gt;Keeping this in mind we &lt;a href="https://www.cossacklabs.com/blog/acra-0-90-0/"&gt;updated Acra database security suite&lt;/a&gt;, our flagship software security solution, to a new release full of the most required and advanced cryptographic protection. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/cossacklabs/acra"&gt;Use Acra Community Edition for free&lt;/a&gt;. Check out &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt; tailored for solutions with high security requirements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#applicationlevel-encryption"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Application-level encryption
&lt;/h2&gt;

&lt;p&gt;Application-level encryption means that &lt;strong&gt;data is encrypted on the application side before sending it to the database for storage, and stays encrypted during the maximum of its lifecycle&lt;/strong&gt;. Application-level encryption works together with data at rest encryption (database-level) and data in transit encryption (TLS).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acra supports easy-to-use and hard-to-misuse encryption. Acra is the easiest way to integrate encryption into your applications without significantly altering the data flow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üí° &lt;strong&gt;Deploy Acra SQL proxy transparently:&lt;/strong&gt; &lt;a href="https://docs.cossacklabs.com/acra/acra-in-depth/architecture/acraserver/"&gt;AcraServer&lt;/a&gt; sits between an app and a database as a cryptographic proxy, transparently encrypting and decrypting chosen data fields that run through it. Just deploy AcraServer and direct your application to talk to it instead of the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mm0vHLmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8svan6mc3fwz7g9glqn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mm0vHLmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8svan6mc3fwz7g9glqn6.png" alt="Deploy Acra SQL proxy transparently" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üí° &lt;strong&gt;Deploy Acra as an API server:&lt;/strong&gt;  &lt;a href="https://docs.cossacklabs.com/acra/acra-in-depth/architecture/acratranslator/"&gt;AcraTranslator&lt;/a&gt; works as Encryption-as-a-Service using HTTP or gRPC API, and encrypts/decrypts data that the application sends it. Application controls which data fields to encrypt. This layout is useful for encrypting only a chosen subset of larger data structures to attain optimal performance/security balance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQzutunn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcd2594doqccerhjievh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQzutunn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcd2594doqccerhjievh.png" alt="Deploy Acra by Cossack Labs as an API server" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üí° &lt;strong&gt;Use client-side encryption and decryption:&lt;/strong&gt; in some cases, client-side encryption/decryption is required. Use the Acra &lt;a href="https://docs.cossacklabs.com/acra/acra-in-depth/architecture/sdks/"&gt;client-side SDKs&lt;/a&gt; to encrypt/decrypt data on the application side, and combine with AcraServer or AcraTranslator.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This approach gives architectural flexibility&lt;/strong&gt;: build end-to-end encrypted data flows, or encrypt data before sending it via untrusted networks and control the decryption point inside the trusted perimeter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üí° &lt;strong&gt;Acra uses &lt;a href="https://docs.cossacklabs.com/acra/acra-in-depth/cryptography-and-key-management/"&gt;multi-layered encryption&lt;/a&gt;:&lt;/strong&gt; each data field is encrypted with data keys, then data keys are encrypted with access keys, which are encrypted with client keys. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This approach allows to perform key rotation easily and guarantees that the brute force decryption will take ages. Acra uses &lt;a href="https://docs.cossacklabs.com/acra/acra-in-depth/data-structures/"&gt;two different cryptographic containers:&lt;/a&gt; blazing fast AcraBlock (AES-256-GCM) and flexible AcraStruct (AES-256-GCM + ECDH).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üî• But Acra possibilities &lt;a href="https://docs.cossacklabs.com/acra/acra-in-depth/security-features/"&gt;are not limited to encryption alone.&lt;/a&gt; We designed it to be a robust data protection software at your fingertips. Follow the series to read about some other prominent Acra features.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out üëâ &lt;a href="https://github.com/cossacklabs/acra"&gt;Acra Community Edition&lt;/a&gt; (open-source, available for free) or learn about üëâ &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cryptography</category>
      <category>security</category>
      <category>encryption</category>
      <category>database</category>
    </item>
    <item>
      <title>Loops in Javascript</title>
      <author>Mysterio</author>
      <pubDate>Thu, 02 Dec 2021 17:41:26 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/loops-in-javascript-2g9g</link>
      <guid>https://dev.to/shubhamtiwari909/loops-in-javascript-2g9g</guid>
      <description>&lt;p&gt;Hello guys Today i am going to discuss Loops in javascript&lt;/p&gt;

&lt;p&gt;What is a loop?&lt;br&gt;
Loops can execute a block of code a number of times until a given condition returns false and the loop breaks.&lt;/p&gt;

&lt;p&gt;Loops are handy, if you want to run the same code over and over again, each time with a different value.&lt;/p&gt;

&lt;p&gt;Example - &lt;br&gt;
Suppose we have an array -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Volvo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ford&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fiat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Audi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to print the element of this array So , &lt;br&gt;
Instead of writing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BMW
Volvo
Saab
Ford
Fiat
Audi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different Kinds of Loops -&lt;br&gt;
JavaScript supports different kinds of loops:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for - loops through a block of code a number of times&lt;/li&gt;
&lt;li&gt;for/in - loops through the properties of an object&lt;/li&gt;
&lt;li&gt;for/of - loops through the values of an iterable object&lt;/li&gt;
&lt;li&gt;while - loops through a block of code while a specified condition is true&lt;/li&gt;
&lt;li&gt;do/while - also loops through a block of code while a specified condition is true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The For Loop - &lt;br&gt;
The for loop has the following syntax:&lt;/p&gt;

&lt;p&gt;for (initialization; condition;increment/decrement) {&lt;br&gt;
  // code block to be executed&lt;br&gt;
}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initialization - The initial value of the loop&lt;/li&gt;
&lt;li&gt;condition  - To check that the condition is satisfied or not to come out of the loop&lt;/li&gt;
&lt;li&gt;increment/decrement - To increase or decrese the value and get  to the next iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The number is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The number is 0
The number is 1
The number is 2
The number is 3
The number is 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the example above, you can read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Statement 1 sets a variable before the loop starts (let i = 0).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Statement 2 defines the condition for the loop to run (i must be less than 5).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Statement 3 increases a value (i++) each time the code block in the loop has been executed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The For In Loop - &lt;br&gt;
The JavaScript for in statement loops through the properties of an Object&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
for (key in object) {&lt;br&gt;
  // code block to be executed&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;John Doe 25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example Explained&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The for in loop iterates over a person object&lt;/li&gt;
&lt;li&gt;Each iteration returns a key (x)&lt;/li&gt;
&lt;li&gt;The key is used to access the value of the key&lt;/li&gt;
&lt;li&gt;The value of the key is person[x]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The For Of Loop - &lt;br&gt;
The JavaScript for of statement loops through the values of an iterable object.&lt;/p&gt;

&lt;p&gt;It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
for (variable of iterable) {&lt;br&gt;
  // code block to be executed&lt;br&gt;
}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iterable - An object that has iterable properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Volvo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mini&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BMW
Volvo
Mini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The While Loop - &lt;br&gt;
The while loop loops through a block of code as long as a specified condition is true.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
while (condition) {&lt;br&gt;
  // code block to be executed&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The number is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The number is 0
The number is 1
The number is 2
The number is 3
The number is 4
The number is 5
The number is 6
The number is 7
The number is 8
The number is 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE - If you forget to increase the variable used in the condition, the loop will never end. This will crash your browser.&lt;/p&gt;

&lt;p&gt;Do While Loop -&lt;br&gt;
The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
do {&lt;br&gt;
  // code block to be executed&lt;br&gt;
}&lt;br&gt;
while (condition);&lt;br&gt;
Example&lt;br&gt;
The example below uses a do while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The number is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The number is 0
The number is 1
The number is 2
The number is 3
The number is 4
The number is 5
The number is 6
The number is 7
The number is 8
The number is 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Array.forEach() - &lt;br&gt;
The forEach() method calls a function (a callback function) once for each array element.&lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;45
4
9
16
25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the function takes 3 arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The item value&lt;/li&gt;
&lt;li&gt;The item index&lt;/li&gt;
&lt;li&gt;The array itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The example above uses only the value parameter. It can be rewritten to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;THANK YOU FOR READING THIS POST AND IF YOU WANT TO GIVE ANY SUGGESTION OR FIND ANY ERROR PLEASE MENTION IT IN THE COMMENT SECTION&lt;/p&gt;

&lt;p&gt;SOURCE - &lt;a href="https://www.w3schools.com/js/js_loop_for.asp"&gt;https://www.w3schools.com/js/js_loop_for.asp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A practical, step-by-step guide to using Chrome's DevTools</title>
      <author>Kyle Sheehan</author>
      <pubDate>Thu, 02 Dec 2021 17:32:50 +0000</pubDate>
      <link>https://dev.to/khsheehan/a-practical-step-by-step-guide-to-using-chromes-devtools-4dam</link>
      <guid>https://dev.to/khsheehan/a-practical-step-by-step-guide-to-using-chromes-devtools-4dam</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, we'll aim to cover practical techniques developers can use to debug, manipulate, and otherwise probe running web applications via Chrome's built-in devtools. The goal is to articulate the specific steps and shortcuts we would use at Reflect, and to favor breadth over depth. Readers can follow the guide step-by-step and try it out themselves at the provided link provided below. With that in mind, let's imagine the following (contrived) scenario.&lt;/p&gt;

&lt;p&gt;You are an engineer recently put in charge of leading your organization's webapp development. You have relatively little experience with the codebase, and the last person who was in charge has since left. A support ticket comes in from a frustrated user complaining that a specific page in your app is slow. There is no additional context and there have been no deployments for a week. Rather than jumping right into your editor and trying to aimlessly solve the problem there, let's instead use devtools to begin the investigation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-amp-walkthrough"&gt;
  &lt;/a&gt;
  Demo &amp;amp; Walkthrough
&lt;/h2&gt;

&lt;p&gt;Let's assume you or your team has already looked at the health of the services / APIs that power the app and everything looks good. It appears that the issue reported by the user is isolated to the frontend itself.&lt;/p&gt;

&lt;p&gt;The first thing we'd like to do is just load the page and see if anything jumps out at us. All we know is that the user complained that the app is "slow".&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-0-open-the-link-below-in-a-new-tabwindow-and-confirm-it-loads"&gt;
  &lt;/a&gt;
  Step 0: Open the link below in a new tab/window and confirm it loads
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://reflect.run/article-assets/devtools-step-by-step-example/"&gt;Walkthrough Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The page in question has very little going on. A single image and some scrollable text. Intuitively, a few things stand out. The first is that when the user says the app is "slow" they likely mean one of two things&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The text and image are slow to load. You've already counted this out by inspecting the network and confirming pages load quickly&lt;/li&gt;
&lt;li&gt;The text jitters while being scrolled and leads to a janky experience&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You try scrolling the text and observe that it's smooth. Now what.&lt;/p&gt;

&lt;p&gt;We've taken some time to inspect the page visually and cannot repro the reported experience ourselves. Let's open devtools and start poking around under the hood.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-1-use-raw-cmdalti-endraw-on-mac-to-open-devtools-ensure-you-are-on-the-elements-panel"&gt;
  &lt;/a&gt;
  Step 1: Use &lt;code&gt;cmd+alt+i&lt;/code&gt; (on mac) to open devtools. Ensure you are on the Elements panel.
&lt;/h5&gt;

&lt;p&gt;Note: The rest of this article assumes your devtools are docked to the right side of the page and that they are wide enough to position subpanels side-by-side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LwV0W-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-open.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LwV0W-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-open.png" alt="" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start by taking a closer look at the image on the page&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-2-open-the-console-at-bottom-of-devtools-by-pressing-the-raw-esc-endraw-key"&gt;
  &lt;/a&gt;
  Step 2: Open the console at bottom of devtools by pressing the &lt;code&gt;esc&lt;/code&gt; key
&lt;/h5&gt;

&lt;p&gt;We want to grab the image element and log it to the console. We could use &lt;code&gt;document.querySelector('img')&lt;/code&gt; to find it but in this case we can instead use the globally defined &lt;code&gt;$&lt;/code&gt; function. This function is built into devtools and will work as a shorthand for &lt;code&gt;document.querySelector&lt;/code&gt; as long as the underlying application does not overwrite it (e.g. if the app loaded jquery then &lt;code&gt;$&lt;/code&gt; would be overwritten).&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-3-find-the-element-with-raw-img-endraw-"&gt;
  &lt;/a&gt;
  Step 3: Find the element with &lt;code&gt;$('img')&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;The element is now logged in the console and we want to inspect it in the DOM itself&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-4-right-click-the-element-in-the-console-and-select-reveal-in-elements-panel"&gt;
  &lt;/a&gt;
  Step 4: Right click the element in the console and select "Reveal in Elements panel"
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPswBnrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-reveal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPswBnrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-reveal.png" alt="" width="880" height="685"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the tiny inline &lt;code&gt;== $0&lt;/code&gt; next to the element in the Elements panel? This indicates that the element has been assigned to the global &lt;code&gt;$0&lt;/code&gt; variable.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-4-confirm-this-is-the-case-by-typing-raw-0-endraw-then-raw-enter-endraw-in-the-console-observe-that-the-element-has-been-logged-again"&gt;
  &lt;/a&gt;
  Step 4: Confirm this is the case by typing &lt;code&gt;$0&lt;/code&gt; then &lt;code&gt;enter&lt;/code&gt; in the console. Observe that the element has been logged again
&lt;/h5&gt;

&lt;p&gt;We'll now start investigating this element and look for any red flags. Remember that we have nothing to go on beyond the single support ticket. Looking at the styles attached to this element, nothing in particular stands out.&lt;/p&gt;

&lt;p&gt;Note: The styles seem a bit odd given what they actually achieve, but we'll ignore this for the sake of the demo.&lt;/p&gt;

&lt;p&gt;After inspecting the styles, let's see if there is any javascript-based functionality attached to this element.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-5-in-the-top-right-of-the-elements-panel-select-the-event-listeners-tab-it-may-be-hidden-behind-a-raw-gtgt-endraw-button"&gt;
  &lt;/a&gt;
  Step 5: In the top right of the Elements panel, select the "Event Listeners" tab. It may be hidden behind a &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; button.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXcnyVeu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-event-listeners.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXcnyVeu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-event-listeners.png" alt="" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright! We've identified that there's an event listener bound to this element that we weren't aware of before. In this case, it's some functionality bound to the &lt;code&gt;click&lt;/code&gt; event. Let's try clicking on the image and see what happens...&lt;/p&gt;

&lt;p&gt;Nothing.&lt;/p&gt;

&lt;p&gt;That's odd, we expect something to happen when a user clicks based on the &lt;code&gt;click&lt;/code&gt; event listener we found in the Event Listeners tab. Let's take a closer look at exactly &lt;em&gt;what&lt;/em&gt; was supposed to happen.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-6-expand-the-raw-click-endraw-event-and-observe-the-link-to-the-listeners-source-click-it"&gt;
  &lt;/a&gt;
  Step 6: Expand the &lt;code&gt;click&lt;/code&gt; event and observe the link to the listener's source. Click it!
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VnPWqjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-source.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VnPWqjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-source.png" alt="" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devtools has now brought us to the Sources panel, and specifically to the line in our application that defines the listener. Taking a closer look, we see that the behavior on click is conditional based on whether or not the user was holding the &lt;code&gt;shift&lt;/code&gt; key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onKeyUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shiftKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fun-animation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we better understand the source we can try it out ourselves. We want to verify that the listener is definitely executing when the user holds &lt;code&gt;shift&lt;/code&gt; and clicks. A good approximation for this would be to just try it out ourselves but we can be more certain if we use the debugger.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-7-right-click-on-the-first-line-of-the-conditional-in-the-listener-and-add-a-conditional-breakpoint-of-raw-eshiftkey-endraw-"&gt;
  &lt;/a&gt;
  Step 7: Right click on the first line of the conditional in the listener and add a conditional breakpoint of &lt;code&gt;e.shiftKey&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpRDE6sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-breakpoint-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpRDE6sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-breakpoint-1.png" alt="" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xO0XFIU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-breakpoint-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xO0XFIU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-breakpoint-2.png" alt="" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now hold &lt;code&gt;shift&lt;/code&gt; and click the image. You'll observe that execution was paused at our breakpoint and we're definitely going to execute the listener. Remove the breakpoint by clicking on the orange line marker and click the "Resume execution" button in the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bB-v-yuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-breakpoint-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bB-v-yuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-breakpoint-3.png" alt="" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üö® Bad Performance Alert üö® Not only have we figured out a way to trigger the functionality attached to the element, but we've just seen our first big red flag. CSS animations are one of many very common performance pitfalls. We haven't yet figured out exactly what the problem is, but this is a great direction to focus in on.&lt;/p&gt;

&lt;p&gt;Note: You've now spoken to your manager and confirmed it is absolutely essential to the business that this image animates under these conditions, and it animates precisely the way it's written. Sorry.&lt;/p&gt;

&lt;p&gt;We can't ourselves observe any obvious performance issues, but that may be because you're working on a much more powerful machine than the user who reported the slowness. We can't assume that the issue does not repro or is not caused by the animation just because we can't experience it firsthand. We have tools that allow us to measure performance.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-8-reload-the-page-with-raw-cmdr-endraw-so-were-back-in-the-original-state-open-the-performance-panel-in-the-top-row-of-devtools-and-begin-recording-for-about-23-seconds-then-trigger-the-animation-with-raw-shiftclick-endraw-wait-another-23-seconds-then-finish-the-recording-if-the-graph-is-too-short-to-see-you-can-once-again-close-the-console-by-pressing-raw-esc-endraw-"&gt;
  &lt;/a&gt;
  Step 8: Reload the page with &lt;code&gt;cmd+r&lt;/code&gt; so we're back in the original state. Open the performance panel in the top row of devtools and begin recording for about 2-3 seconds. Then trigger the animation with &lt;code&gt;shift+click&lt;/code&gt;, wait another 2-3 seconds, then finish the recording. If the graph is too short to see, you can once again close the console by pressing &lt;code&gt;esc&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TK_h6Y_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-performance.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TK_h6Y_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-performance.png" alt="" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jackpot. The performance panel is telling us that we have a serious problem with "layout shift". We won't cover this topic in depth in this article, just know that Layout is one of the steps in the rendering pipeline and is responsible for computing where every node on the page will ultimately be rendered, and at what size. Because all nodes in the DOM can affect the position/size of all other nodes, this process is complicated and we want to keep layout shift to a minimum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hUOWdgp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layout-shift.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUOWdgp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layout-shift.png" alt="" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our goal now is to identify why precisely these layout shift events are constantly firing and to figure out a way to minimize or remove them entirely while preserving the animation.&lt;/p&gt;

&lt;p&gt;Let's jump into the Layers panel to get a better sense of how the renderer "sees" the page.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-9-press-raw-cmdshiftp-endraw-to-bring-up-the-command-menu-and-start-typing-layers-press-raw-enter-endraw-when-show-layers-is-highlighted-i-also-suggest-checking-the-paints-checkbox-to-see-the-pixels-that-are-being-rendered"&gt;
  &lt;/a&gt;
  Step 9: Press &lt;code&gt;cmd+shift+p&lt;/code&gt; to bring up the Command Menu and start typing "layers". Press &lt;code&gt;enter&lt;/code&gt; when "Show Layers" is highlighted. I also suggest checking the "Paints" checkbox to see the pixels that are being rendered.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evr2-qic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-show-layers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evr2-qic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-show-layers.png" alt="" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: The command menu acts as a shortcut to many of the most common actions you'd take in devtools. It is one of the best optimizations in devtools and can be used to change settings, switch panels, and more. Play with it!&lt;/p&gt;

&lt;p&gt;We're now on the Layers panel. If you've never seen this before, don't worry, there's not much we need to understand in order to use it in this example. The critical piece of information to know is that this is essentially a 3D model of the way our application is layered from the rendering pipeline's perspective. When the browser rasterizes the parts of the page into pixels at the compositing stage, these 3D layers will be rendered onto the 2D plane of the viewport.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckYTxi0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckYTxi0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layers.png" alt="" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Layers panel isn't particularly interesting looking in its current state. All we see is a big rectangle that represents our page. But this is actually a clue to where the layout shift is coming from! When the image is animating (changing dimensions) it is on the same layer as everything else in the browser. This means that any changes to the image must result in the browser recalculating the layout of the entire document constantly. You can observe that everything is on a single layer by pressing &lt;code&gt;v&lt;/code&gt; to enter rotate mode, then  clicking and dragging the layers to rotate them in 3D space. You'll see that the image is rendered on the "base" layer, along with the text that does not scroll.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvcArOkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layers-rotated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvcArOkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layers-rotated.png" alt="" width="880" height="685"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on what we observe on the page, there's no reason why the image should not be on its own layer. If it were lifted above the rest of the document then any changes to its dimensions will, by definition, have no layout impact on the rest of the document. The image and the document should be modeled as completely distinct entities allowing one to change without impacting the other.&lt;/p&gt;

&lt;p&gt;But hold on. The browser is reporting that there's a constant layout shift occurring, but we're not certain what specifically is shifting. The text on the page doesn't appear to move, so it's possible something else. Let's try and identify where this layout shift is happening.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-10-press-raw-cmdshiftp-endraw-to-bring-up-the-command-menu-and-start-typing-layout-shift-press-raw-enter-endraw-when-show-layout-shift-regions-is-highlighted"&gt;
  &lt;/a&gt;
  Step 10: Press &lt;code&gt;cmd+shift+p&lt;/code&gt; to bring up the Command Menu and start typing "layout shift". Press &lt;code&gt;enter&lt;/code&gt; when "Show layout shift regions" is highlighted
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vlamRK9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layout-shift-marker.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vlamRK9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-layout-shift-marker.png" alt="" width="880" height="795"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We found it! There's a region next to the image that is constantly having its layout shifted. If you take a look at the DOM in the Elements panel you'll find a single &lt;code&gt;div&lt;/code&gt; with nothing but a blank space in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'tracking'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Problem solved! You could just remove that div and the layout shifts will go away.&lt;br&gt;
There are two problems with this approach.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It does not solve for the issue originally discovered in the Layers panel.&lt;/li&gt;
&lt;li&gt;That's the marketing team's tracking &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Yes, it's used in a webapp in the middle of a document, and yes it's a div for some reason, and no you can't move it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So our goal is still the same. We want to move the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; onto its own layer so that the animation does not cause any layout shift. There are a few ways to do this, but for the sake of this article we'll use a specific positioning strategy we know will force the element onto its own layer.&lt;/p&gt;

&lt;p&gt;When an element uses fixed positioning, it is (generally) taken out of the normal flow of the document and positioned relative to the viewport itself. This forces the element onto its own layer, and thus hopefully solves the problem. Let's try this out&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-11-inspect-the-raw-ltimggt-endraw-element-again-in-the-elements-panel-you-can-use-the-technique-described-in-step-4-or-use-the-inspect-element-button-in-the-top-left-of-devtools-then-switch-to-the-styles-tab"&gt;
  &lt;/a&gt;
  Step 11: Inspect the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element again in the Elements panel. You can use the technique described in Step 4, or use the "inspect element" button in the top left of devtools, then switch to the "Styles" tab.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l5ajaXcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-inspect-element.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5ajaXcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-inspect-element.png" alt="" width="880" height="790"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-12-replace-the-raw-position-relative-endraw-style-with-raw-position-fixed-endraw-"&gt;
  &lt;/a&gt;
  Step 12: Replace the &lt;code&gt;position: relative&lt;/code&gt; style with &lt;code&gt;position: fixed&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gNoNWvFx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-position-fixed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gNoNWvFx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-position-fixed.png" alt="" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-13-now-navigate-to-the-layers-panel-and-expand-the-first-item-in-the-sidebar-observe-there-is-now-an-raw-img-endraw-layer-you-can-further-confirm-this-layer-is-distinct-by-rotating-the-model-and-observing-a-separate-layer-for-the-image"&gt;
  &lt;/a&gt;
  Step 13: Now navigate to the Layers panel and expand the first item in the sidebar. Observe there is now an &lt;code&gt;img&lt;/code&gt; layer. You can further confirm this layer is distinct by rotating the model and observing a separate layer for the image
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKwap2qC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-final-layers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKwap2qC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reflect.run/images/articles/devtools-final-layers.png" alt="" width="880" height="690"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-14-navigate-back-to-the-performance-tab-record-for-23-seconds-raw-shiftclick-endraw-the-image-wait-for-23-more-seconds-then-stop-recording"&gt;
  &lt;/a&gt;
  Step 14: Navigate back to the performance tab, record for 2-3 seconds, &lt;code&gt;shift+click&lt;/code&gt; the image, wait for 2-3 more seconds, then stop recording
&lt;/h5&gt;

&lt;p&gt;üéâ Congratulations! üéâ The change you made to the positioning strategy forced the element onto its own layer, which in turn meant that it has no layout impact on the rest of the document. You can observe that the latest performance recording shows no more layout shifts happening!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using only devtools we were able to identify the root cause &lt;em&gt;and fix&lt;/em&gt; for a performance issue in a codebase with which we were not familiar. Keep these tips in mind the next time you're trying to debug an application and keep in mind that devtools + the browser itself are &lt;em&gt;extensions&lt;/em&gt; of a webapp development environment, like being part of an IDE.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cmd+alt+i&lt;/code&gt; opens devtools&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;esc&lt;/code&gt; will toggle a drawer containing the Console and other tools across all panels&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; is shorthand for &lt;code&gt;document.querySelector&lt;/code&gt; (assuming the page has not defined &lt;code&gt;$&lt;/code&gt; itself)&lt;/li&gt;
&lt;li&gt;You can right click elements in the console and reveal them in the Elements panel&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$0&lt;/code&gt; is a global variable referring to the currently selected element in the Elements panel&lt;/li&gt;
&lt;li&gt;You can set conditional breakpoints in the Sources panel by right clicking on a line&lt;/li&gt;
&lt;li&gt;The Layers panel gives you insights into how the renderer "sees" your application before compositing&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cmd+shift+p&lt;/code&gt; opens the Command Menu and can be used as a shortcut for most devtools actions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#caveat"&gt;
  &lt;/a&gt;
  Caveat
&lt;/h2&gt;

&lt;p&gt;The example used in this article is contrived for simplicity, and the performance issues would be better solved using other techniques like only allowing css transformations on styles that can be accelerated by the GPU. The goal is to show the reader devtools techniques with applications in the real world, not to espouse the actual code-writing skills needed to build a performant application.&lt;/p&gt;

</description>
      <category>devtools</category>
      <category>javascript</category>
      <category>debug</category>
      <category>performance</category>
    </item>
    <item>
      <title>Add flying emoji reactions to a React video chat app</title>
      <author>Kimberlee Johnson </author>
      <pubDate>Thu, 02 Dec 2021 17:26:38 +0000</pubDate>
      <link>https://dev.to/trydaily/add-flying-emoji-reactions-to-a-react-video-chat-app-5hma</link>
      <guid>https://dev.to/trydaily/add-flying-emoji-reactions-to-a-react-video-chat-app-5hma</guid>
      <description>&lt;p&gt;If a picture is worth a thousand words, what does that mean for emoji? For decades they‚Äôve been used to add color to all sorts of written communications, from text messages to entire translations of &lt;a href="http://emojidick.com/"&gt;Moby Dick&lt;/a&gt; to ‚Äî most relevant to this blog post ‚Äî video calls. &lt;/p&gt;

&lt;p&gt;We build developer tools at &lt;a href="https://www.daily.co/?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;Daily&lt;/a&gt; that enable new ways to communicate online. Adding emoji reactions to video chats gives participants a familiar (and fun!) way to express themselves.&lt;/p&gt;

&lt;p&gt;In this tutorial we‚Äôll add a set of flying emoji reactions to a custom video call built on the Daily &lt;a href="https://docs.daily.co/call-object?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;call object&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJHT_FY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc76n3m5q6h3t9mqrgwf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJHT_FY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc76n3m5q6h3t9mqrgwf.gif" alt="Participant on video call clicks star icon and then a Squid that flies across screen" width="800" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve this we will: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a button that sends an emoji of our choice flying on click &lt;/li&gt;
&lt;li&gt;Send our emoji reaction to all other participants using the Daily &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/send-app-message?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;&lt;code&gt;sendAppMessage()&lt;/code&gt;&lt;/a&gt; method&lt;/li&gt;
&lt;li&gt;Render the emoji for both the local participant who sent it and the remote participants who receive it &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will do all of these things  in a Next.js demo app that we built in a previous &lt;a href="https://www.daily.co/blog/build-a-real-time-video-chat-app-with-next-js-and-daily/?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;post&lt;/a&gt;. Reference that tutorial for details on the foundation of the app, like participant, device, and track management. This post just focuses on the emoji üòé&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The demo and code snippets are React-based, but you can still apply the essence of the steps outlined in the tutorial to work with other frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To run the demo locally: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork and clone the &lt;code&gt;daily-demos/examples&lt;/code&gt; &lt;a href="https://github.com/daily-demos/examples/tree/main/custom?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;repository&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd examples/custom/flying-emojis&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Set your &lt;code&gt;DAILY_API_KEY&lt;/code&gt; and &lt;code&gt;DAILY_DOMAIN&lt;/code&gt; env variables (see &lt;code&gt;env.example&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yarn&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yarn workspace @custom/flying-emojis dev&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that, our emoji are ready to fly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/bcZ8T9ctIriAU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bcZ8T9ctIriAU/giphy.gif" alt="Witch waves at flying monkeys and says fly my pretties fly" width="300" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-button-that-sends-an-emoji-flying"&gt;
  &lt;/a&gt;
  Create a button that sends an emoji flying
&lt;/h2&gt;

&lt;p&gt;The star icon, labeled "Emoji" in the call tray component, (&lt;a href="https://github.com/daily-demos/examples/blob/main/custom/flying-emojis/components/Tray.js?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;&lt;code&gt;Tray.js&lt;/code&gt;&lt;/a&gt;), reveals available emoji reactions, and allows participants to pick one to send. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw3LYY8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6ektjuqdn1ub4iwccra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw3LYY8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6ektjuqdn1ub4iwccra.png" alt="Icons at the bottom of a video call for call controls, Star icon on click reveals three emoji" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs that component‚Äôs structure, with tangential elements removed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Tray.js &lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showEmojis&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sendEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fire&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;üî•&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sendEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;squid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;ü¶ë&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sendEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;laugh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;ü§£&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TrayButton&lt;/span&gt;
    &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emoji&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowEmojis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;showEmojis&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IconStar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TrayButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the star icon is clicked, it displays the available emoji. When a participant selects an emoji, the component calls &lt;code&gt;sendEmoji()&lt;/code&gt; and passes a string representing the selection. For example, after clicking on "ü¶ë" &lt;code&gt;onClick={() =&amp;gt; sendEmoji('squid')}&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at &lt;code&gt;sendEmoji()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Tray.js &lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reaction_added&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;setShowEmojis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;sendEmoji()&lt;/code&gt; triggers a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"&gt;&lt;code&gt;CustomEvent&lt;/code&gt;&lt;/a&gt; that we named &lt;code&gt;reaction_added&lt;/code&gt;. The string representing the emoji is &lt;code&gt;reaction_added&lt;/code&gt;‚Äôs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail"&gt;&lt;code&gt;CustomEvent.detail&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôll listen for the &lt;code&gt;reaction_added&lt;/code&gt; event in &lt;code&gt;FlyingEmojisOverlay.js&lt;/code&gt;, via &lt;code&gt;window.addEventListener('reaction_added', handleSendFlyingEmoji);&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-raw-sendappmessage-endraw-to-broadcast-the-emoji-to-other-call-participants"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;sendAppMessage()&lt;/code&gt; to broadcast the emoji to other call participants
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;handleSendFlyingEmoji()&lt;/code&gt; gets the string representing the emoji from &lt;code&gt;CustomEvent.detail&lt;/code&gt;, and broadcasts it to all other call participants using the Daily &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/send-app-message?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;&lt;code&gt;sendAppMessage()&lt;/code&gt;&lt;/a&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FlyingEmojiOverlay.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSendFlyingEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendAppMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;handleDisplayFlyingEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;sendAppMessage()&lt;/code&gt; emits a corresponding &lt;a href="https://docs.daily.co/reference/daily-js/events/participant-events#app-message?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;&lt;code&gt;app-message&lt;/code&gt;&lt;/a&gt; event that all remote participants receive. The &lt;code&gt;&amp;lt;FlyingEmojiOverlay /&amp;gt;&lt;/code&gt; component listens for the event and calls &lt;code&gt;handleReceiveFlyingEmoji()&lt;/code&gt; when a message is received: &lt;code&gt;callObject.on('app-message', handleReceiveFlyingEmoji);&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FlyingEmojisOverlay.js &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleReceiveFlyingEmoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;overlayRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;handleDisplayFlyingEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;handleDisplayFlyingEmoji&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;handleReceiveFlyingEmoji()&lt;/code&gt; passes the message data from &lt;code&gt;e.data.message&lt;/code&gt; along to &lt;code&gt;handleDisplayFlyingEmoji()&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-the-emoji-for-both-the-local-sender-and-the-remote-recipient"&gt;
  &lt;/a&gt;
  Render the emoji for both the local sender and the remote recipient
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;handleDisplayFlyingEmoji()&lt;/code&gt; is called both on sending, in &lt;code&gt;handleSendFlyingEmoji()&lt;/code&gt; and upon receiving in &lt;code&gt;handleReceiveFlyingEmoji()&lt;/code&gt;. That‚Äôs because &lt;code&gt;app-message&lt;/code&gt; only fires for remote participants, but we want the local participant to see their own emoji reaction as well. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;handleDisplayFlyingEmoji()&lt;/code&gt; function takes a string as a parameter. &lt;code&gt;handleSendFlyingEmoji()&lt;/code&gt; passes the display handler a string from the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail"&gt;&lt;code&gt;CustomEvent.detail&lt;/code&gt;&lt;/a&gt; from the window event, while &lt;code&gt;handleReceiveFlyingEmoji()&lt;/code&gt; passes a string from the &lt;code&gt;app-message&lt;/code&gt; event object, &lt;code&gt;e.data.message&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now that we know how and when &lt;code&gt;handleDisplayFlyingEmoji()&lt;/code&gt; is executed, let‚Äôs have a look at its definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FlyingEmojisOverlay.js &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDisplayFlyingEmoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;overlayRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;EMOJI_MAP&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji wiggle-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji wiggle-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;overlayRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;animationend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;handleRemoveFlyingEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;handleRemoveFlyingEmoji&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs break it all down. &lt;/p&gt;

&lt;p&gt;First, it creates a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, and appends the selected emoji in a text node to that div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FlyingEmojiOverlay.js &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;EMOJI_MAP&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gets the emoji by referencing a CONSTANT &lt;code&gt;EMOJI_MAP&lt;/code&gt; object whose keys map to emoji:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FlyingEmojisOverlay.js &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EMOJI_MAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üî•&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;squid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü¶ë&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;laugh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the emoji is added, the function applies styles. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt; sets the &lt;code&gt;className&lt;/code&gt; to either &lt;code&gt;'emoji wiggle-1'&lt;/code&gt; or &lt;code&gt;'emoji wiggle-2'&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;FlyingEmojisOverlay&lt;/span&gt;&lt;span class="nc"&gt;.js&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;wiggle-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;wiggle-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These classes determine where the emoji starts wiggling on the screen. &lt;code&gt;Math.random()&lt;/code&gt; also determines the degree to which the emoji rotates, and its &lt;code&gt;left&lt;/code&gt; position.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// FlyingEmojiOverlay.js &lt;/span&gt;

&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
       &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji wiggle-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji wiggle-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With styling set, the emoji is ready to be added to &lt;code&gt;overlayRef&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FlyingEmojisOverlay.js&lt;/span&gt;

&lt;span class="nx"&gt;overlayRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, &lt;code&gt;handleDisplayFlyingEmoji()&lt;/code&gt; listens for the emoji animation to end, &lt;code&gt;node.addEventListener('animationend', (e) =&amp;gt; handleRemoveFlyingEmoji(e.target));&lt;/code&gt; and then removes the appended child:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleRemoveFlyingEmoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;overlayRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;overlayRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What‚Äôs next ‚ùì
&lt;/h2&gt;

&lt;p&gt;We hope this tutorial has helped you add personality to your video calls. To build on this &lt;a href="https://github.com/daily-demos/examples/tree/main/custom/flying-emojis?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;demo&lt;/a&gt;, you could customize the animations (maybe make the emoji grow and shrink in size), generate random emoji, or add reactions to a &lt;a href="https://www.daily.co/blog/tag/webinar/?utm_source=dev&amp;amp;utm_campaign=dev-flying-emojis"&gt;webinar&lt;/a&gt; app. The world is your oyster, üåçü¶™.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Want to buy or sell a startup?</title>
      <author>Bryan</author>
      <pubDate>Thu, 02 Dec 2021 17:26:34 +0000</pubDate>
      <link>https://dev.to/bryanellis95/want-to-buy-or-sell-a-startup-2jap</link>
      <guid>https://dev.to/bryanellis95/want-to-buy-or-sell-a-startup-2jap</guid>
      <description>&lt;p&gt;We just launched seedacquire.com a few days ago to help founders and people who want to own their own company do just that! With SeedAcquire you can buy or sell a startup, web app or app. The best part you can join for free! We have many features including listings(private/public), request(and chat), founders forum and so much more.&lt;/p&gt;

&lt;p&gt;Check it out at &lt;a href="//seedacquire.com"&gt;website&lt;/a&gt; or our &lt;a href="//app.seedacquire.com"&gt;app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We cant wait to see what you will do&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>startup</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>What is the best way to implement a WYSIWYG editor?</title>
      <author>lumenwrites</author>
      <pubDate>Thu, 02 Dec 2021 17:19:18 +0000</pubDate>
      <link>https://dev.to/lumenwrites/what-is-the-best-way-to-implement-a-wysiwyg-editor-19f9</link>
      <guid>https://dev.to/lumenwrites/what-is-the-best-way-to-implement-a-wysiwyg-editor-19f9</guid>
      <description>&lt;p&gt;Hi! I'm building a react app that needs a very powerful and customizable WYSIWYG editor. I will start by implementing things that  Ghost, Medium, Typora, and Gitbook editor can do, and then maybe need to add other powerful features including collaboration. My project is in early prototype stage, so I don't even know what kind of features I may need to build in the future.&lt;/p&gt;

&lt;p&gt;What are my best options, which libraries should I consider?&lt;/p&gt;

&lt;p&gt;Did anyone experiment with Slate.js, ProseMirror, Tiptap, other libraries I may not be aware of? Which ones are the most flexible/powerful, and future proof enough to build a long term project around?&lt;/p&gt;

&lt;p&gt;Also, a side question - how hard is it to implement google-docs-like pagination in a WYSIWYG web text editor? I've asked on Slate.js chat, and apparently it's very hard, although I don't quite understand the reasons and details. Any tips on tackling that?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>saas</category>
    </item>
    <item>
      <title>1 line of code: How to create a range array</title>
      <author>martin krause</author>
      <pubDate>Thu, 02 Dec 2021 17:13:24 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-create-a-range-array-3i3k</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-create-a-range-array-3i3k</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new array with numeric items in the given range.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Debugging Multer and other middle-wares</title>
      <author>bacloud14</author>
      <pubDate>Thu, 02 Dec 2021 17:11:43 +0000</pubDate>
      <link>https://dev.to/bacloud14/debugging-multer-and-other-middle-wares-3d2</link>
      <guid>https://dev.to/bacloud14/debugging-multer-and-other-middle-wares-3d2</guid>
      <description>&lt;p&gt;I've been sipping coffee, rolling cigarettes,  and pulling my hair since the day before yesterday.&lt;/p&gt;

&lt;p&gt;I have trouble setting what I thought a useful dynamic middle-ware for later implementations. (Post request with so much constraints, now and surely in future).&lt;/p&gt;

&lt;p&gt;The issue is with Multer (or &lt;code&gt;connect-sequence&lt;/code&gt; see later). If you know, Multer is a Node.js middleware for handling (including parsing) &lt;code&gt;multipart/form-data&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;What I expect could differ though and this is why I'm setting this super intelligent middle-ware. &lt;/p&gt;

&lt;p&gt;I found how to chain middle-wares on runtime, which is not a very usual task, but possible and very useful for my case: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sirap-group/connect-sequence/"&gt;connect-sequence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solution dates a bit as you can see. Anyway, here is a slice of my middle-ware code (that constructs and runs other middle-wares in return).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function magicMiddleware(req, res, next) {
    const contentType = req.get('content-type')
    const form = formidable({})

    if (contentType.indexOf('multipart/form-data') &amp;gt; -1) {
        await form.parse(req, function (err, fields, files) {
            if (err) {
                console.log(String(err));
                return;
            }
            magicMiddleware_(fields)
        })
    } else {
        magicMiddleware_(req)
    }

    const section = req.params[0]
    const method = req.method

    const magicMiddleware_ = (body) =&amp;gt; {
        const {
            secured,
            upload,
            geolocation,
            illustrations,
            schema
        } = constraints[process.env.NODE_ENV][method][section]
        singletonSchema = schema()

        // Third party middlewares
        var seq = new ConnectSequence(req, res, next)
        debugger;
        const validating = celebrate({
            [Segments.BODY]: singletonSchema,
        })
        if (upload) { 
            console.log('attaching multer')
            seq.append(ops.multer) 
        }
        if (!singletonSchema.called) {
            seq.append(validating)
        }
        seq.append(errors())
        if (secured) { 
            console.log('attaching multer')
            seq.append(ops.auth0) 
        }
        seq.run()
        console.log(req.body)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It is to know that third party middle-wares could mismatch. One adds something to req and one remove the same thing for instance.&lt;/p&gt;

&lt;p&gt;I run debugger and couldn't find out but I think &lt;code&gt;multer&lt;/code&gt; specifically is not running &lt;em&gt;well&lt;/em&gt;, It is running but not well; &lt;code&gt;req.body&lt;/code&gt; is &lt;code&gt;{}&lt;/code&gt;, not undefined and not anything else.&lt;/p&gt;

&lt;p&gt;I put &lt;code&gt;multer&lt;/code&gt; at first in the sequence to be able to parse &lt;code&gt;multipart/form-data&lt;/code&gt; data I'm testing right now, then there is &lt;code&gt;celebrate&lt;/code&gt; (Joi based validation middle-ware). Then there is &lt;code&gt;auth0&lt;/code&gt; too (for passwordless authentication).&lt;/p&gt;

&lt;p&gt;Of course there are multiple application middle-ware attached when the app starts. But none is susceptible of causing harm as if I push &lt;code&gt;multer&lt;/code&gt;, &lt;code&gt;celebrate&lt;/code&gt; and &lt;code&gt;auth0&lt;/code&gt; as middle-wares directly (as usual), all works fine.&lt;/p&gt;

&lt;p&gt;So data is parsed, &lt;code&gt;req.body&lt;/code&gt; is there with the uploaded file and input text fields.&lt;/p&gt;

&lt;p&gt;I'm pulling my hair, really. As I don't want to cancel all this and start from zero pushing middle-wares directly on multiple post requests (with different constraints: like one runs without authentication, the other expects &lt;code&gt;text/plain&lt;/code&gt; all combinations might behave differently on different environments, like no upload when testing with Postman).&lt;/p&gt;

&lt;p&gt;If you have a hint, I will follow up with test. If you want to jump on code, here is the &lt;a href="https://github.com/bacloud14/Classified-ads-48/blob/hacktoberfest_only_branch/lib/services/middlewares.js"&gt;file&lt;/a&gt; and here is the &lt;a href="https://github.com/bacloud14/Classified-ads-48"&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: there is a bug in &lt;code&gt;connect-sequence&lt;/code&gt;. It is expecting &lt;code&gt;err&lt;/code&gt; (passed through next(err)) to be different that &lt;code&gt;undefined&lt;/code&gt;. But Multer appears to push &lt;code&gt;null&lt;/code&gt; when there is no error. So there is this, I modified code accordingly.&lt;/p&gt;

&lt;p&gt;From this:&lt;br&gt;
&lt;a href="https://github.com/sirap-group/connect-sequence/blob/dacd6d992545de8b2332912672d2dc810b0fc194/lib/ConnectSequence.js#L81"&gt;&lt;code&gt;if (err !== undefined) {&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this:&lt;br&gt;
&lt;code&gt;if(err)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Final note: I want to believe in in &lt;code&gt;connect-sequence&lt;/code&gt; as I couldn't find my way adding middle-wares at runtime. I went through code (not debugging) and all seems well to my eyes.&lt;/p&gt;

&lt;p&gt;Thanks a lot !!!&lt;/p&gt;

</description>
      <category>help</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Developer Portfolio with React.js</title>
      <author>Ashik Ahamed</author>
      <pubDate>Thu, 02 Dec 2021 17:01:38 +0000</pubDate>
      <link>https://dev.to/ahamedashik01/developer-portfolio-with-reactjs-2la4</link>
      <guid>https://dev.to/ahamedashik01/developer-portfolio-with-reactjs-2la4</guid>
      <description>&lt;p&gt;I build my developer portfolio using react.js and I would like to have it reviewed by our awesome community.ü§çüñ§&lt;br&gt;
I have tried to keep the UI design minimalistic and modern and I'm loving it. &lt;br&gt;
Any feedback, suggestions, or comments are welcome. If you like the website please leave a mail from the contact page. I promise it won't take long.&lt;br&gt;
Thank You!&lt;br&gt;
Website Link:- &lt;a href="https://personal-portfolio-30590.web.app/"&gt;https://personal-portfolio-30590.web.app/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--en450Os4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgu6fru1o0y794ugicn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--en450Os4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgu6fru1o0y794ugicn.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjQBZZBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jmncxqmzuywty6gayc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjQBZZBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jmncxqmzuywty6gayc2.png" alt="Image description" width="880" height="1147"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Can Anyone help me with my journey?</title>
      <author>Abdinajib Junior</author>
      <pubDate>Thu, 02 Dec 2021 16:42:28 +0000</pubDate>
      <link>https://dev.to/juniori_1/can-anyone-help-me-with-my-journey-19f9</link>
      <guid>https://dev.to/juniori_1/can-anyone-help-me-with-my-journey-19f9</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey, Dev community&lt;/em&gt;, I hope everyone is reading my post is well.&lt;br&gt;
As we know the main purpose we joined this community is to help each other!&lt;br&gt;
Recently I joined developer community And I have 2-3 month experience about programming languages Such as HTML, Css, Media Quary and basic of java and the Concept of Web developer, So I want to work fast to gain more experience about programming languages to get remotely jobs ASAP. Although  I met many challenges like 'English problem' but it seems that I tackle it.&lt;br&gt;
I started to learn at Udemy and Coursera and they helped me a lot. &lt;br&gt;
Can anyone help me learning Node.js or recommended me the best Course of Node.js.because I'm looking for Full-Stack Engineer.&lt;/p&gt;

&lt;p&gt;Finally I would to drop your advice.&lt;br&gt;
If something wrong with my post, please click comment below.&lt;br&gt;
Thank you üòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Coop : An App for Students</title>
      <author>param-19</author>
      <pubDate>Thu, 02 Dec 2021 16:39:44 +0000</pubDate>
      <link>https://dev.to/parambhatt/coop-an-app-for-students-14jb</link>
      <guid>https://dev.to/parambhatt/coop-an-app-for-students-14jb</guid>
      <description>&lt;p&gt;//Include all the motivation here&lt;br&gt;
With the corona pandemic, a lot of the work that was generally done offline or via certified institutions has shifted online. This has resulted in massive amounts of information and numerous courses available online,that we as teenagers, college students cannot verify it nor completely rely on them. There are forums like reddit and quora, but the issue of trustable information or guidelines is still missing. Hence, we present coop, an application that can be used by a closed community to interact and share knowledge. The issue of trust is resolved simply because of the closed community, for example, we as BITSians will trust any information given to us by a fellow BITSian, who has not only any motivation to cheat with us, but also is an alumni and a part of the culture. &lt;/p&gt;

&lt;p&gt;//Choice of technology&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kotlin : One of the open source languages recognised by google for android development, it has extensive support across platforms and communities, and is completely interoperable with java. It is very easy to learn, and reduces the boiler plate code ( or the extra code that we need to write ), for example, in java. It has a byte code structure, which enhances the performance of our apps. In addition, it allows both inline and lambda functions making the execution speed even lower than the same code in java!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase : We went for the firebase firestore ( cloud db ), since our app is yet on the beginning stage, and doesnt have such a userbase that needs a real time database. Provided by google, it reduces the need to work with several third party environments and also allows server code if the need ever comes to that. For an app like ours, a no sql database is preferred because of the dexterity and flexibility that is offered by the entire data structure making firebase just the ideal choice.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//Sign in page&lt;br&gt;
When a user first opens our app, the first thing he sees is a splash screen of our app icon, and our app then checks if the user has signed in or not. In the case that the user hasnt signed in, hes given an option to sign in with google. Firebase handles the signing in and storing of the user on our application. Simultaneously, we also add the name and user details to our custom user database for our purposes. Once the sign in is verified, he is redirected to his home page.&lt;/p&gt;

&lt;p&gt;//General layout&lt;br&gt;
All our application activities have an additional sidepanel and topbar. The topbar is a search bar, that can be used for searching through all the topics that our application has so far. The sidepanel is used for navigating through the application, and moving through the various activities. Currently, the sidepanel has the user information ( the user name, the user email and the user profile photo ), the home page, the user profile page and the facility to navigate through to any of his followed topics within the application.&lt;/p&gt;

&lt;p&gt;//Home page &lt;br&gt;
The home page is, as the name suggests, the home page for the user. This is where he can see all the posts of the respective topics to which he has subscribed, including both the old and the new posts. The user can also see the topic to which the post belongs to, and can click on it and navigate to the individual post view if he wishes to. &lt;/p&gt;

&lt;p&gt;//Sidepanel&lt;br&gt;
The sidepanel has 3 main subparts : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The profile part : This part contains the user name, email and profile photo. On clicking on this part, the user is directed to profile page&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The home part : This is a home tab, with the help of which the user can navigate back to his home page of the application anytime he wishes to. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following topic part : The following tab, is a scrollable list of all the topics that the user has been following at that point of time. He can navigate to any of the topics from the tabs, and go see all the posts within the respective topic as and when he wishes to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//Search bar&lt;br&gt;
The search bar is present across the application, which you can use to search for topics that are present in the application, whether the user is already following it or wishes to explore a new topic.&lt;/p&gt;

&lt;p&gt;//Profile page&lt;br&gt;
The profile page is the page that contains all the information that we as developers have for each individual user. The layout has been segmented into 3 different tabs : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The user-info tab :&lt;br&gt;
This tab displays the user based information like user name, their email, their profile picture etc. In the future, we also aim to include more information for users and customization options for them. Additionally, this also contains the sign out functionality from which a user can signout. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The posts tab :&lt;br&gt;
This tab contains the various posts that a user has made, be it whichever topic he has contributed to. He can see the post title, the post body as well as the topic name so that he has complete information about his content, and can navigate to see the entire post properly in the post view from there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The comments tab :&lt;br&gt;
This tab contains all the comments that the user has made across various posts and topics. In effect, this is all the content contributed by the user and he can once more, navigate across the app to the respective post on which he commented on clicking on the comments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//Topic view&lt;br&gt;
The topic view has the heading with the topic name, referring to the respective topic which you are viewing. You can reach here either by searching for it, or going to it from the user sidepanel. This also shows the number of followers the topic currently has, and gives the user option to follow the topic or unfollow it if he is already following it.&lt;br&gt;
Below the header, the posts within the topics are shown to the user, and he can navigate to the respective posts by clicking on them. &lt;br&gt;
Finally, there is also a floating action button, that can be used by the user to make a post within the respective topic. If he wishes to make a post under a different topic, he will have to search up the topic, go within it and then click on the make post button there.  &lt;/p&gt;

&lt;p&gt;//Post view&lt;br&gt;
The post view has the post title as its header, and the post body below it. The post body currently allowed is text only, we plan to add media support to the body very soon. The view also has the number of upvotes/downvotes that are given by the other users of the community. The user can also choose to upvote/downvote the post depending on how useful he found the content, and help the community. In addition, he also gets the option to comment his opinion,findings,inferences etc about the post in a textview below, and other users can also read them to gain valuable insights about it. &lt;/p&gt;

&lt;p&gt;//Make a post&lt;br&gt;
Coming to contributing to the community, the users can make posts within respective topics. The process is relatively very simple : All they have to do is enter the topic title, and the topic body ( blanks are not allowed ), and press the floating tick button to post it. Once he makes a post, he is redirected back to the topic view, where he can see that his post has been posted successfully.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>firebase</category>
    </item>
  </channel>
</rss>
