<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Week III Task Force 4.0</title>
      <author>Placideh</author>
      <pubDate>Sun, 14 Nov 2021 21:24:01 +0000</pubDate>
      <link>https://dev.to/placideh/week-iii-task-force-40-o94</link>
      <guid>https://dev.to/placideh/week-iii-task-force-40-o94</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Code Can't Lie 🤣 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello again, now I could say that I am already a Task Force🦾 , this week was cool and super I have experienced working as a team and the merits from it. Basically this is the week that the team(Task-Force) really become one element, by this we started working together brainstorming to come up with a great &lt;strong&gt;MVP&lt;/strong&gt;(Minimum Viable Product), I have also liked the way we started sharing our own personal life experience which was also a great takeaway like Empathy.&lt;/p&gt;

&lt;p&gt;I have loved the Soft skills that I have been introduced to, ain't going to lie it was really a valuable sessions. As Backend Developers we also have to work and collaborate on Technical skills that's where the team working , cooperation and creativity comes to play, This week we have worked on &lt;strong&gt;ERD&lt;/strong&gt; &lt;em&gt;Entity relationship diagram&lt;/em&gt; mainly we've designed possible Entities to be used in our project not only that we have  created their cardinalities as well as creating their &lt;em&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;/em&gt; queries . throughout SQL I have come to see a &lt;em&gt;&lt;strong&gt;json&lt;/strong&gt;&lt;/em&gt; datatype in MySql🤔 That's made me  realize that This Field is all about learning journey, The more you learn the more you tend to find you know less but, in anyways it is great and super.&lt;/p&gt;

&lt;p&gt;I can't wait to see you the next Week !!! ✌.&lt;/p&gt;

</description>
      <category>coding</category>
      <category>teamwork</category>
    </item>
    <item>
      <title>TypeScript ANY vs UNKNOWN—A Deep Dive</title>
      <author>Tom Dohnal</author>
      <pubDate>Sun, 14 Nov 2021 21:23:30 +0000</pubDate>
      <link>https://dev.to/tomdohnal/typescript-any-vs-unknown-a-deep-dive-3iem</link>
      <guid>https://dev.to/tomdohnal/typescript-any-vs-unknown-a-deep-dive-3iem</guid>
      <description>&lt;p&gt;In this blog post, we'll dive deep into what &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt; types are, what are their similarities and differences, and when (not) to use them.&lt;/p&gt;

&lt;p&gt;(You can find a video version of this article on YouTube! 📺)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O6UUEeq0oSg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ANY&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anyValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// OK in TypeScript (error in runtime!) 👇&lt;/span&gt;
&lt;span class="nx"&gt;anyValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stupid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 


&lt;span class="c1"&gt;// UNKNOWN&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unknownValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatever, too&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Fails TypeScript check (prevents runtime error) 👇&lt;/span&gt;
&lt;span class="nx"&gt;unknownValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stupid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mnemonics to help you remember the difference 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;any&lt;/code&gt;&lt;/strong&gt; -&amp;gt; first letter is an "A" -&amp;gt; &lt;em&gt;Avoid&lt;/em&gt; TypeScript&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;unknown&lt;/code&gt;&lt;/strong&gt; -&amp;gt; first letter is a "U" -&amp;gt; &lt;em&gt;Use&lt;/em&gt; TypeScript&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;The &lt;code&gt;any&lt;/code&gt; Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;The &lt;code&gt;unknown&lt;/code&gt; Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Use Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-raw-any-endraw-type"&gt;
  &lt;/a&gt;
  The &lt;code&gt;any&lt;/code&gt; Type
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;any&lt;/code&gt; type is something like an escape hatch from TypeScript. &lt;/p&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

&lt;p&gt;If your variable is of type &lt;code&gt;any&lt;/code&gt;, you can:&lt;br&gt;
&lt;strong&gt;1. Assign whatever you want to it 👇&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;anyValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;

&lt;span class="nx"&gt;anyValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi, how is you? :)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;anyValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. "Do" whatever you want with it 👇&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;anyValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="c1"&gt;// OK in TypeScript but error in runtime&lt;/span&gt;
&lt;span class="c1"&gt;// ("...is not a function")&lt;/span&gt;
&lt;span class="nx"&gt;anyValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// OK in TypeScript but error in runtime&lt;/span&gt;
&lt;span class="c1"&gt;// ("...Cannot read properties of undefined")&lt;/span&gt;
&lt;span class="nx"&gt;anyValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generally speaking, using &lt;code&gt;any&lt;/code&gt; allows you to use variables &lt;em&gt;without&lt;/em&gt; type checking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOHRx9PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sndm73objhbmpssml6gx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOHRx9PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sndm73objhbmpssml6gx.jpg" alt='soldier being shot by an arrow saying "any"' width="636" height="767"&gt;&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://devrant.com/rants/3015646/i-dont-usually-post-memes-but-this-one-is-just-a-little-too-on-the-nose"&gt;https://devrant.com/rants/3015646/i-dont-usually-post-memes-but-this-one-is-just-a-little-too-on-the-nose&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This means that you lose the main benefit TypeScript has to offer–preventing runtime errors due to accessing non-existing properties.&lt;/p&gt;

&lt;p&gt;You might now wonder &lt;strong&gt;why the heck would I even use &lt;code&gt;any&lt;/code&gt;&lt;/strong&gt; if it means giving up type checking altogether?&lt;/p&gt;

&lt;p&gt;Generally speaking, you should strive to avoid it. To do that, I'd advise you to:&lt;br&gt;
&lt;strong&gt;1) Use &lt;code&gt;"strict": true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt; file to disable &lt;em&gt;implicit&lt;/em&gt; &lt;code&gt;any&lt;/code&gt; types&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Implicit any&lt;/em&gt; means that if you don't annotate a variable or a function parameter in TypeScript, it'll be &lt;code&gt;any&lt;/code&gt; by default. With &lt;code&gt;"strict": true&lt;/code&gt;, the TypeScript compiler will throw an error if you've got an unannotated variable of type &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2) Use the &lt;a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md"&gt;&lt;code&gt;no-explicit-any&lt;/code&gt;&lt;/a&gt; rule in &lt;a href="https://github.com/typescript-eslint/typescript-eslint"&gt;TypeScript ESLint&lt;/a&gt;.&lt;/strong&gt; This will give you an ESLint warning whenever you use &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, there are some situations where &lt;code&gt;any&lt;/code&gt; is helpful. We'll cover the main use cases in &lt;a href="#chapter-3"&gt;the final section&lt;/a&gt; in depth. Nonetheless, it can be useful when migrating JavaScript code to TypeScript or when dealing with untyped external libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Careful! Some built-in TypeScript types use &lt;code&gt;any&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
When using functions like &lt;code&gt;JSON.parse(...)&lt;/code&gt; or &lt;code&gt;fetch(...).then(res =&amp;gt; res.json())&lt;/code&gt;, the type of the result is &lt;code&gt;any&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;You can use something like &lt;code&gt;JSON.parse(...) as { message: string }&lt;/code&gt; to give it a proper type. Nonetheless, it's useful to know about these as it's very easy to accidentally use &lt;code&gt;any&lt;/code&gt; without even knowing about it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use rules such as &lt;a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md"&gt;&lt;code&gt;no-unsafe-assingment&lt;/code&gt;&lt;/a&gt; in &lt;a href="https://github.com/typescript-eslint/typescript-eslint"&gt;TypeScript ESLint&lt;/a&gt; to get warnings in such scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why does TypeScript behave in this &lt;em&gt;not&lt;/em&gt; type-safe manner? Well, one of the possible explanations is that there was no other way to type these built-in JavaScript functions as there was no &lt;code&gt;unknown&lt;/code&gt; type that would be better suited for this job. Let's have a look at what it does and how it differs from the &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-raw-unknown-endraw-type"&gt;
  &lt;/a&gt;
  The &lt;code&gt;unknown&lt;/code&gt; Type
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;unknown&lt;/code&gt; type was added to TypeScript in 2018 with its version &lt;code&gt;3.0&lt;/code&gt; release. Its purpose was to provide a type-safe alternative to &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From the official docs:&lt;br&gt;
TypeScript 3.0 introduces a new top type &lt;code&gt;unknown&lt;/code&gt;. &lt;code&gt;unknown&lt;/code&gt; is the type-safe counterpart of &lt;code&gt;any&lt;/code&gt;. (&lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type"&gt;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What does that mean?&lt;/strong&gt;&lt;br&gt;
As the phrase "type-safe counterpart of &lt;code&gt;any&lt;/code&gt;" suggests, the &lt;code&gt;unknown&lt;/code&gt; type is similar to the &lt;code&gt;any&lt;/code&gt; type in some way but different in others (namely, unlike &lt;code&gt;any&lt;/code&gt;, it's type-safe).&lt;/p&gt;

&lt;p&gt;Let's first examine the similarities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You &lt;em&gt;can&lt;/em&gt; assign whatever you want to an &lt;code&gt;unknown&lt;/code&gt; type&lt;/strong&gt;&lt;br&gt;
This works pretty much the same way as the &lt;code&gt;any&lt;/code&gt; type 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unknownValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;

&lt;span class="nx"&gt;unknownValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey, how&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;re you doing? :)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;unknownValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With variables of type &lt;code&gt;any&lt;/code&gt; you could do anything with such variables (call them, access random properties on them, etc.). This is &lt;em&gt;not&lt;/em&gt; the case with &lt;code&gt;unknown&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;unknown&lt;/code&gt;, TypeScript &lt;strong&gt;makes &lt;em&gt;no&lt;/em&gt; assumptions about your variables&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unknownVariable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;

&lt;span class="c1"&gt;// Error in TypeScript 👇&lt;/span&gt;
&lt;span class="nx"&gt;unknownVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Error in TypeScript 👇&lt;/span&gt;
&lt;span class="nx"&gt;unknownVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;how&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;today?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Error in TypeScript 👇&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unknownVariable&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very helpful as it prevents you from accidentally accessing non-existent properties, treating strings like functions etc.&lt;/p&gt;

&lt;p&gt;You can &lt;em&gt;think&lt;/em&gt; of the &lt;code&gt;unknown&lt;/code&gt; type as of something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Disclaimer: this is &lt;em&gt;not&lt;/em&gt; the actual definition of the &lt;code&gt;unknown&lt;/code&gt; type. It's just a simplified model to give you a better intuition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#type-narrowing-with-raw-unknown-endraw-"&gt;
  &lt;/a&gt;
  Type narrowing with &lt;code&gt;unknown&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As we saw in the code snippet above, TypeScript doesn't allow you to do almost anything with the &lt;code&gt;unknown&lt;/code&gt; type. &lt;/p&gt;

&lt;p&gt;On one hand, it's very useful as it keeps your code type-safe and prevents you from the dreaded runtime JavaScript TypeErrors.&lt;/p&gt;

&lt;p&gt;On the other hand, it's quite limiting as we'd like to be able to manipulate our variables, call properties on them, etc.&lt;/p&gt;

&lt;p&gt;We've got 2 options for how to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Type Guards&lt;/strong&gt;&lt;br&gt;
We can use type guards to narrow down the possible types. You can use &lt;code&gt;if&lt;/code&gt; statements or custom &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"&gt;type predicates&lt;/a&gt; to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logSecretMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// in this if-block we know `message` is of type string&lt;/span&gt;
    &lt;span class="c1"&gt;// so we can call the `toLowerCase()` method on it&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2) Type Assertions (&lt;em&gt;not&lt;/em&gt; type-safe)&lt;/strong&gt;&lt;br&gt;
Alternatively, we can always use type assertions. This is way easier but we lose the type-safety as we use whatever type we want and TypeScript will just "trust" us that we made no mistake:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unknownVariable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// OK 👇&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unknownVariable&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// OK in TypeScript but it *fails* in runtime 👇&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unknownVariable&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-cases-for-raw-any-endraw-and-raw-unknown-endraw-types"&gt;
  &lt;/a&gt;
  Use Cases for &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt; Types
&lt;/h1&gt;

&lt;p&gt;Now that we've got understanding of what the &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt; types mean, let's have a look at when (not) to use each of them.&lt;/p&gt;

&lt;p&gt;The rule of thumb is that &lt;code&gt;any&lt;/code&gt; should be avoided since using it makes you lose most of the TypeScript benefits. If you don't know what type a certain variable or a function parameter is, always prefer &lt;code&gt;unknown&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that being said, there are some valid use cases for &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-to-typescript-from-javascript"&gt;
  &lt;/a&gt;
  Migrating to TypeScript (from JavaScript)
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;any&lt;/code&gt; is very useful when migrating JavaScript codebase into TypeScript. &lt;/p&gt;

&lt;p&gt;Let's say you've got a large JavaScript file which exports many functions and you want to convert it to TypeScript. Without using &lt;code&gt;any&lt;/code&gt;, you'd need to type every single function in this file.&lt;/p&gt;

&lt;p&gt;That's a lot of work and you might just be interested in typing one of the exported functions.&lt;/p&gt;

&lt;p&gt;In this case, you can use &lt;code&gt;any&lt;/code&gt; to quickly type the functions you're not interested in and only give proper types to the one function you're currently working with.&lt;/p&gt;

&lt;p&gt;It might be also useful to create an alias for &lt;code&gt;any&lt;/code&gt; (such as &lt;code&gt;type TODO = any&lt;/code&gt;) so that you can later come back to your temporarily typed functions and give them proper types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// auth.ts (migrating from auth.js)&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TODO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;

&lt;span class="c1"&gt;// We can just type the `signUp` function&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use `TODO` to quickly type the `resetPassword` function&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resetPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use `TODO` to quickly type the `logIn` function&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions-with-unknown-arguments"&gt;
  &lt;/a&gt;
  Functions with unknown arguments
&lt;/h2&gt;

&lt;p&gt;As previously stated, the &lt;code&gt;unknown&lt;/code&gt; type should be preferred when dealing with variables which types we can't determine.&lt;/p&gt;

&lt;p&gt;An example could be a generic logger function 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;development&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendMessageToAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Had we used &lt;code&gt;any&lt;/code&gt; instead, we could have accidentally tried to use properties such as &lt;code&gt;.toLowerCase()&lt;/code&gt; (wrongly) assuming that &lt;code&gt;message&lt;/code&gt; is of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thus, using &lt;code&gt;unknown&lt;/code&gt; instead keeps things safe for us 😇&lt;/p&gt;

</description>
      <category>typescript</category>
    </item>
    <item>
      <title>HACKTOBERFEST 2021</title>
      <author>Siddhartha Mishra</author>
      <pubDate>Sun, 14 Nov 2021 20:33:15 +0000</pubDate>
      <link>https://dev.to/sid0542/hacktoberfest-2021-35j9</link>
      <guid>https://dev.to/sid0542/hacktoberfest-2021-35j9</guid>
      <description>&lt;p&gt;It was a great experience participating in Hacktoberfest this year. This was my second participation in Hacktoberfest. I am glad to share that I have successfully completed Hacktoberfest and learned a lots of things.&lt;/p&gt;

&lt;p&gt;Also, I just ordered my Hacktoberfest badge.&lt;/p&gt;

&lt;p&gt;Thank you Hacktoberfest!!&lt;br&gt;
Thank you Digital Ocean!!&lt;br&gt;
Thank you DEV!! &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Our Product Supply Chain Hub (SCH)</title>
      <author>Soumyojit Sen</author>
      <pubDate>Sun, 14 Nov 2021 20:33:02 +0000</pubDate>
      <link>https://dev.to/soumyojit/our-product-supply-chain-hub-sch-mml</link>
      <guid>https://dev.to/soumyojit/our-product-supply-chain-hub-sch-mml</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQMIYweE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914274519/wZCFh-ym8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQMIYweE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914274519/wZCFh-ym8.png" alt="Screenshot 2021-11-14 21.23.22.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our New Revolutionary Enterprise Product -  &lt;a href="https://www.eimsolutions.com"&gt;SCH ( Supply Chain Hub )&lt;/a&gt; , from EIM Solutions, SCHinfoTech.com, is helping Companies streamline their business processes. It helps companies digitize the connections, interactions &amp;amp; end to end business process integration with :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Suppliers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Manufacturing&lt;/strong&gt; ( Factory )&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It connects an organization's ERP systems, digital landscape and digital processes to the &lt;strong&gt;LAST MILE&lt;/strong&gt;. SCH ( supply chain hub ) has 4 modules, that addresses the above 4 business functions, namely :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SCH Supplier&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCH Customer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCH Factory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCH Maintenance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our customers can subscribe to 1 or more of the above modules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kz-Z8AS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636916968316/lkCZmm-H5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kz-Z8AS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636916968316/lkCZmm-H5.png" alt="SCHLogo_Blue.png" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SCH is a cloud based PWA Web Application that can run on its own, or integrate with Backend Systems like SAP ERP or any others systems, depending on customer preference. It can run on any cloud platform, even on-premise in customer's data center.&lt;/p&gt;

&lt;p&gt;It can run on any browser, any device, of any screen size ( mobile / tablet/ laptop/ desktop ). It can also be installed as a Native App on Windows or Mobile, from Browser, Google PlayStore or IOS AppStore.&lt;/p&gt;

&lt;p&gt;It has a very attractive, user friendly and interesting UI Experience, which is very intuitive and easy to operate for any Non IT business user. Its screens are mobile responsive and behaves like any other Native App when it runs on mobile.&lt;/p&gt;

&lt;p&gt;A company can subscribe to multiple SCH modules. After a user logs in, he/she can see those modules, which he/she has access to, as clickable UI cards as shown in the above image. He/ She can click one of those modules, to get inside it, and start executing it's business processes…&lt;/p&gt;

&lt;p&gt;SCH is being used by multiple companies, across the globe, like Coca Cola , Aditya Birla, Toyota Boshuku, L&amp;amp;T IDPL, Cavinkare, Mahindra CIE, Jindal Steel Works, Olam etc. They use SCH to connect with their suppliers, customers, factory and maintenance, and make their business processes efficient, profitable, contact less, paper less, and fast.&lt;/p&gt;

&lt;p&gt;Many more customers are currently getting onboarded, as I am writing this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zE66eD2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914464234/vPvO1JPvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zE66eD2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914464234/vPvO1JPvj.png" alt="Screenshot 2021-11-14 23.43.45.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With SCH a company integrates its business with Suppliers, Customers, Factory and Maintenance. SCH also easily integrates the business data from these Last Miles, with backend ERP systems, like SAP ECC, or any other Business Systems that the company might be using.&lt;/p&gt;

&lt;p&gt;SCH &lt;strong&gt;Analytics&lt;/strong&gt; and &lt;strong&gt;Dashboards&lt;/strong&gt; provides all information at finger tips ,related to the mentioned business modules , that helps decision making fast and accurate.&lt;/p&gt;

&lt;p&gt;SCH is built on latest &amp;amp; modern technology platform. Its has cutting-edge well-formed scalable architecture, that allows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick installation,&lt;/li&gt;
&lt;li&gt;Configurable screens , process flows, and workflows&lt;/li&gt;
&lt;li&gt;Easy Customization for adding New Screens, Processes and workflows&lt;/li&gt;
&lt;li&gt;Robust Security,&lt;/li&gt;
&lt;li&gt;Seamless Operation,&lt;/li&gt;
&lt;li&gt;Easy scalability&lt;/li&gt;
&lt;li&gt;Detailed Audit Trail&lt;/li&gt;
&lt;li&gt;Device independence,&lt;/li&gt;
&lt;li&gt;OS independence,&lt;/li&gt;
&lt;li&gt;Hardware independence.&lt;/li&gt;
&lt;li&gt;Cloud Platform independence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SCH has acquired and passed necessary &lt;strong&gt;Certifications&lt;/strong&gt; like &lt;strong&gt;VAPT&lt;/strong&gt; and &lt;strong&gt;SAP Certification&lt;/strong&gt;.&lt;br&gt;
Apart from the standard features it provides, additional custom screens &amp;amp; processes can to be easily built onto it by business users, without coding, using its Low code Engine, Rule Engine, Analytics Engine, AI , and BPM Workflow Engine.&lt;/p&gt;

&lt;p&gt;Its state-of-the-art Roles and Authorization Engine ensures that, access to every Resource, Data , Menu , Screen objects are tightly controlled, authenticated, authorized and audited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6HrgGR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914719896/MdvNEAI3fW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6HrgGR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914719896/MdvNEAI3fW.png" alt="Screenshot 2021-11-14 23.45.36.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its affordable price , customizable features , excellent lifetime support, low code engine are key unique selling points..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMhSxNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914756739/LiYUqepji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMhSxNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914756739/LiYUqepji.png" alt="image (49).png" width="880" height="962"&gt;&lt;/a&gt;&lt;br&gt;
SCH - Business Modules ( supply chain hub )SCH Supplier - Business Functions.&lt;/p&gt;

&lt;p&gt;keep watching this space and profile for more updates on our digital enterprise products….&lt;/p&gt;

</description>
      <category>soumyojit</category>
      <category>software</category>
      <category>saas</category>
      <category>supplychain</category>
    </item>
    <item>
      <title>Function Smoothing</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 14 Nov 2021 20:31:21 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/function-smoothing-2a3c</link>
      <guid>https://dev.to/jayantgoel001/function-smoothing-2a3c</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/prisoner849/embed/zYZzmXB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Practice / 3.js</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 14 Nov 2021 20:30:42 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/practice-3js-51bp</link>
      <guid>https://dev.to/jayantgoel001/practice-3js-51bp</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/toshiya-marukubo/embed/oNwQjvr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Sparkly skull ✨</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 14 Nov 2021 20:28:57 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/sparkly-skull-2ldn</link>
      <guid>https://dev.to/jayantgoel001/sparkly-skull-2ldn</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Mamboleoo/embed/yLbxYdx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Host a static website on AWS under a minute with Terraform</title>
      <author>Emre Oztoprak</author>
      <pubDate>Sun, 14 Nov 2021 20:23:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/host-a-static-website-on-aws-under-a-minute-with-terraform-3hmd</link>
      <guid>https://dev.to/aws-builders/host-a-static-website-on-aws-under-a-minute-with-terraform-3hmd</guid>
      <description>&lt;p&gt;If you have a static website and you want a simple solution, S3 and Cloudfront are great choices. S3 with Cloudfront secure, scalable way to host static content. Also, we will get an SSL certificate for our domain and it will be free.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h4&gt;

&lt;p&gt;Before the deployment of this terraform module, make sure your hosted zone exists in Route 53 and move your domain to Route53 by changing NS records on your DNS provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icnRWvWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tophd1lmax66q2podj4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icnRWvWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tophd1lmax66q2podj4.jpg" alt="terraform-s3-cloudfront-route53" width="750" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use 4 AWS Services;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;S3 - Storing website files (HTML, CSS, JavaScript)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloudfront - CDN&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Certificate Manager - SSL Certificate&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Route 53 - DNS records&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are using Cloudfront we don't need the public bucket, so we will create a private S3 bucket. We will use OAI (Origin Access Identity) settings when we create Cloudfront. This means that only our Cloudfront distribution can access and read the files in our S3 bucket. Also, we will create an SSL certificate from Certificate Manager and Cloudfront redirect all HTTP traffic to HTTPS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X9mtn7kV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gxdt39ga82ch41dafw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9mtn7kV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gxdt39ga82ch41dafw6.png" alt="cloudfront-oai" width="555" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First clone the repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone git@github.com:emreoztoprak/terraform-aws-s3-cloudfront-acm.git

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change these two variables in the &lt;strong&gt;terraform.tfvars&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
SiteTags = "Example" (Tag value of the resources.)

domainName = "example.com"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now run this module when you change the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform init
terraform plan
terrafom apply --auto-approve

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the deployment is completed upload your website files to in S3 Bucket. I configured DefaultRootObject as index.html. Basically, when users access your root URL they will see index.html file.&lt;/p&gt;

&lt;p&gt;I just uploaded a simple HTML file.&lt;/p&gt;

&lt;p&gt;Congratulations. You made it. :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aE1WUO-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvx04yfdub78ls5g9z0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aE1WUO-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvx04yfdub78ls5g9z0e.png" alt="aws-cloudfront" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you find this tutorial helpful!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>terraform</category>
      <category>cloudfront</category>
      <category>s3</category>
    </item>
    <item>
      <title>Let's talk quality - Part 1</title>
      <author>Sociable Steve</author>
      <pubDate>Sun, 14 Nov 2021 20:17:23 +0000</pubDate>
      <link>https://dev.to/sociablesteve/lets-talk-quality-part-1-4ecm</link>
      <guid>https://dev.to/sociablesteve/lets-talk-quality-part-1-4ecm</guid>
      <description>&lt;p&gt;Quality of engineered software systems is something which is commonly overlooked by non-technical decision makers in many companies, of every size. There are two main reasons behind this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Engineers don't know how to discuss the problem with non-technical stake-holders&lt;/li&gt;
&lt;li&gt;There is a lack of data about how quality issues affect engineering efforts in a way that non-technical decision makers can understand&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the first part of a series about how we can understand and talk about quality in a way that our non-technical colleagues can understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-current-landscape"&gt;
  &lt;/a&gt;
  The current landscape
&lt;/h2&gt;

&lt;p&gt;Since software quality is inherently something seen and driven by engineers, the current approach to quality is to look at the problem in terms of what can be measured and understood automatically, and reported on quickly. The reports and information that are produced are technically focused, and offer little in the way of understandable reporting for the non-technical stake-holders.&lt;/p&gt;

&lt;p&gt;Tools like SonarQube, Snyk, CodeClimate, and other static analysis tools do a great job at letting software engineers know where problems exist. Tools like prometheus, NewRelic, and the ELK stack help operations understand the current issues in a running stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-code-quality"&gt;
  &lt;/a&gt;
  Beyond code quality
&lt;/h2&gt;

&lt;p&gt;Over the past few months, and even years, I've been contemplating the scope and size of quality for engineered software systems. The first step is some kind of definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A high quality software system is one that is easily maintainable, scale-able, extendable, and meets the needs of the user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a single sentence, this definition covers a wide range of activities, and we still need some way to further define how we measure and report on quality. This leads me to three broad categories of measures:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;The Development measure covers metrics related to the development process of the software system. This isn't just the code, but the quality of activities around the code as well, such as code reviews, QA activities, and developer experience.&lt;/p&gt;

&lt;p&gt;Some example measures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cyclomatic Complexity&lt;/li&gt;
&lt;li&gt;Code Duplication&lt;/li&gt;
&lt;li&gt;Test Coverage&lt;/li&gt;
&lt;li&gt;PR Review Quality&lt;/li&gt;
&lt;li&gt;Production Bugs&lt;/li&gt;
&lt;li&gt;Pre-production Bugs&lt;/li&gt;
&lt;li&gt;Dependency Management&lt;/li&gt;
&lt;li&gt;Developer Experience

&lt;ul&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Easy to get started&lt;/li&gt;
&lt;li&gt;Overly monolithic / Hard to navigate&lt;/li&gt;
&lt;li&gt;Ease of testing&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#operational"&gt;
  &lt;/a&gt;
  Operational
&lt;/h3&gt;

&lt;p&gt;The Operational measure covers metrics related to how the software runs in whatever environment is ends up in. This covers things like resource usage, scalability, observability, and issue recovery.&lt;/p&gt;

&lt;p&gt;Some example measures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resource usage

&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Disk&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Logging frequency

&lt;ul&gt;
&lt;li&gt;Overall log lines&lt;/li&gt;
&lt;li&gt;Log lines per request&lt;/li&gt;
&lt;li&gt;Log relevance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Observability

&lt;ul&gt;
&lt;li&gt;Time to understand where an issue is occurring&lt;/li&gt;
&lt;li&gt;Ability to understand usage patterns&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Scalability

&lt;ul&gt;
&lt;li&gt;How easy can the system be scaled?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Alerting

&lt;ul&gt;
&lt;li&gt;Time to know when there is an issue&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sentiment"&gt;
  &lt;/a&gt;
  Sentiment
&lt;/h3&gt;

&lt;p&gt;While we can measure how the operational and development teams are doing, there is also a reality that software systems are developed to fix a problems. Understanding the sentiment of the systems consumers (users, customers, etc.) is also a great indicator of the overall quality of a system.&lt;/p&gt;

&lt;p&gt;Some example measures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does the system meet the needs of the user?&lt;/li&gt;
&lt;li&gt;Is the system easy to use?&lt;/li&gt;
&lt;li&gt;Is the system performance sufficient?&lt;/li&gt;
&lt;li&gt;Do you worry when the system is included in product development?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;By considering quality as something more than just how well the code is written we can start to get a better understanding of quality from many different angles, and start to understand where we need to focus our efforts.&lt;/p&gt;

&lt;p&gt;In the next post I'll cover how we can start measuring these metrics, before going onto reporting!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to Improve Your Coding Skills for Free</title>
      <author>Jason Shelley</author>
      <pubDate>Sun, 14 Nov 2021 20:00:29 +0000</pubDate>
      <link>https://dev.to/kinjiru09/how-to-improve-your-coding-skills-for-free-5525</link>
      <guid>https://dev.to/kinjiru09/how-to-improve-your-coding-skills-for-free-5525</guid>
      <description>

&lt;p&gt;It is amazing how many people have join the ranks of coders over the last few years. Whether you are a professional coder or just code for fun, learning this skill will definitely change your outlook on life and how you think.&lt;/p&gt;

&lt;p&gt;With the advent of online tutorials, bootcamps, YouTube videos and blogs, learning the basics of coding is extremely easy.&lt;/p&gt;

&lt;p&gt;However, some of these resources are limited in what they offer. Sure, you can learn theory, algorithms, data structures, etc. But if new developers would like to improve certain skills, for example, how to structure a large application, how to create performant and secure code, how to create test cases, log and fix bugs, documentation, communication with other team members, etc they need to get their hands wet. One of the best ways to do this is to join an open source project.&lt;/p&gt;

&lt;p&gt;For many new developers though, joining an open source project seems daunting. They may feel they do not have the skills to contribute, and such fears are understandable. I could spend the rest of this article explaining why they shouldn't let fear stop them from joining an open source project, but instead I will offer another solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-free-alternative"&gt;
  &lt;/a&gt;
  Another Free Alternative
&lt;/h2&gt;

&lt;p&gt;Many articles talk about how to use GitHub, Gutbucket, Gitlab, or a similar open source repository to upload your code. Many of these articles fail to help new developers to see the rich and vast amount of information these free repositories have to offer to new developers.&lt;/p&gt;

&lt;p&gt;We will use GitHub as an example. You can create a free account using your email address. You can search, download, read through and play with code that experienced developers have created and uploaded for other people to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits"&gt;
  &lt;/a&gt;
  What are the benefits?
&lt;/h2&gt;

&lt;p&gt;Many of these repositories are real, live code that thousands of people use everyday. You will learn valuable lessons on how to structure code, how to use code to tackle a problem, proper documentation, proper testing, logging and resolving bugs, how to commit code with proper commit messages, how to structure branches and releases, how to use CI/CD (if the repo is using it), how to write performant code, how to write secure code, etc.&lt;br&gt;
You can learn so much from these projects. You can learn at your own pace. And this is a free method to improve your coding skills.&lt;br&gt;
The main point is you do not need to join an open source project to improve your coding skills. You are welcome to download the code, read it, run it, play with it, and learn from it.&lt;br&gt;
Build your skills. Build your knowledge. Build your confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do%C2%A0it"&gt;
  &lt;/a&gt;
  How to do it?
&lt;/h2&gt;

&lt;p&gt;Most popular projects will have a Readme file, an example folder, a test folder and a src folder. "src" is short for source, and this is where the bulk of the code can be found.&lt;br&gt;
First, read the Readme file to understand the purpose of the project and how to set up everything. Next, take a look at the example folder. Usually the examples are simple so it will be easy to understand the code. Play around with the examples. This will also help you later when you are looking in the src folder. Finally, take a look at the tests. Run them and see if you understand what's happening. See if you can write your own test case following their format. Obviously, a big project will have comprehensive test cases. But still this is good training.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just as reading books can open your mind to the world around you. Reading open source code will open your mind to the world of software development.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Uploading Docker Images to AWS ECR</title>
      <author>DH Kim</author>
      <pubDate>Sun, 14 Nov 2021 19:38:55 +0000</pubDate>
      <link>https://dev.to/icncsx/uploading-docker-images-to-aws-ecr-dgp</link>
      <guid>https://dev.to/icncsx/uploading-docker-images-to-aws-ecr-dgp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#aws"&gt;
  &lt;/a&gt;
  AWS
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#-raw-create-an-ecr-repo-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Create an ECR Repo&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr create-repository &lt;span class="nt"&gt;--repository-name&lt;/span&gt; &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-login-to-ecr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Log-in to ECR&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; region | docker login &lt;span class="nt"&gt;--username&lt;/span&gt; AWS &lt;span class="nt"&gt;--password-stdin&lt;/span&gt; &amp;lt;registry_id&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-tag-your-image-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Tag your image&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Tag your image with the Amazon ECR registry, repository, and optional image tag name combination to use. This is important if we want to push to ECR and not DockerHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker tag &amp;lt;image_id&amp;gt; &amp;lt;registry_id&amp;gt;.dkr.ecr.region.amazonaws.com/&amp;lt;repo_name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-upload-image-to-ecr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Upload image to ECR&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push &amp;lt;registryId&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;repo&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>programming</category>
    </item>
    <item>
      <title>Spring Boot Architecture</title>
      <author>Maddy</author>
      <pubDate>Sun, 14 Nov 2021 19:38:35 +0000</pubDate>
      <link>https://dev.to/maddy/spring-boot-architecture-547i</link>
      <guid>https://dev.to/maddy/spring-boot-architecture-547i</guid>
      <description>&lt;p&gt;Originally published on my &lt;a href="https://techwithmaddy.com/spring-boot-architecture"&gt;blog&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Spring Boot is a more user-friendly version of the Spring Framework. With Spring Boot, you can create autonomous and easy to run applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT IS THE DIFFERENCE BETWEEN  SPRING AND SPRING BOOT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you've ever tried to write a Java application time ago, you would have noticed how much work you had to do to perform database operations. It's a tiring process! &lt;/p&gt;

&lt;p&gt;The Spring Framework simplifies these operations, thanks to the Spring JDBC module. &lt;/p&gt;

&lt;p&gt;Spring is the combination of multiple sub-frameworks. It has many modules, for example, Spring MVC, Spring  JDBC, Spring  AOP, Spring  ORM, and Spring Test. The core feature of the Spring Framework is &lt;em&gt;Dependency Injection&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Even though Spring has made the development of Java applications easier, I think that it is vast and complicated to master.  In the past, I tried to learn the Spring Framework from scratch, and I found it a long experience. This is where &lt;strong&gt;Spring Boot&lt;/strong&gt; comes in handy, though. 😁 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT IS SPRING BOOT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot is built on top of the Spring Framework. It's a more automated and simplified version of Spring. Spring Boot makes it easy to create an up and running application in a few minutes. You go to  &lt;a href="https://start.spring.io/"&gt;Spring Initializr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6W8b1ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636841347347/XD_UTMM8P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6W8b1ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636841347347/XD_UTMM8P.png" alt="springInitializr.png" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the website will generate the application for you in an instant. &lt;/p&gt;

&lt;p&gt;If you're undecided on whether to learn Spring or Spring Boot, I'd say to at least know the basics of the Spring Framework and then jump onto Spring Boot. &lt;/p&gt;

&lt;p&gt;Now let's talk about Spring Boot Architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPRING BOOT ARCHITECTURE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot Architecture has four layers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Presentation Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistence Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Layer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcbiyJo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636840785484/hxIUT9R03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcbiyJo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636840785484/hxIUT9R03.png" alt="Spring Boot Architecture.png" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PRESENTATION LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is at the top of the architecture. This tier is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Performing authentication.&lt;/p&gt;

&lt;p&gt;✔️ Converting JSON data into an object (and vice versa).&lt;/p&gt;

&lt;p&gt;✔️ Handling HTTP requests.&lt;/p&gt;

&lt;p&gt;✔️ Transfering authentication to the business layer.&lt;/p&gt;

&lt;p&gt;The presentation layer is the equivalent of the Controller class. The Controller class handles all the incoming REST API requests (GET, POST, PUT, DELETE, PATCH) from the Client. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUSINESS LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The business layer is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Performing validation.&lt;/p&gt;

&lt;p&gt;✔️ Performing authorization.&lt;/p&gt;

&lt;p&gt;✔️ Handling the business logic and rules.&lt;/p&gt;

&lt;p&gt;This layer is the equivalent to the Service class. It's where we handle the business logic. If you're wondering what do we mean by "business logic", I found an interesting discussion on &lt;a href="https://softwareengineering.stackexchange.com/questions/234251/what-really-is-the-business-logic"&gt;StackExchange&lt;/a&gt;. In short, the business logic in software engineering is where we decide what the software needs to do. An example of this is validation. If you are ever requested to validate something, this needs to happen inside the Service class. &lt;/p&gt;

&lt;p&gt;The Business layer communicates with both the Presentation layer and the Persistence Layer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PERSISTENCE LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Containing storage logic.&lt;/p&gt;

&lt;p&gt;✔️ Fetching objects and translating them into database rows (and vice versa).&lt;/p&gt;

&lt;p&gt;This layer is the equivalent of the Repository interface. We write database queries inside this interface. &lt;/p&gt;

&lt;p&gt;The Persistence layer is the only layer that communicates with the Business layer and the Database layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DATABASE LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Performing database operations (mainly CRUD operations).&lt;/p&gt;

&lt;p&gt;This layer is simply the actual database that you decide to use to build your application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPRING BOOT WORKFLOW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoP1Cid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636842342576/7ShwFxJxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoP1Cid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636842342576/7ShwFxJxx.png" alt="Spring Boot workflow.png" width="880" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot workflow acts like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Client makes an HTTP request.&lt;/li&gt;
&lt;li&gt;The Controller class receives the HTTP request.&lt;/li&gt;
&lt;li&gt;The Controller understands what type of request will process, and then it deals with it.&lt;/li&gt;
&lt;li&gt;If it is needed, it calls the service class.&lt;/li&gt;
&lt;li&gt;The Service Class is going to handle the business logic. It does this on the data from the database.&lt;/li&gt;
&lt;li&gt;If everything goes well, we return a JSP page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading my article. Until next time! 👋🏾&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
