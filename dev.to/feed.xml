<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cross-site Request Forgery Attacks (CSRF): What a frontend developer should know</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Sun, 01 Aug 2021 21:46:51 +0000</pubDate>
      <link>https://dev.to/ms_74/cross-site-request-forgery-attacks-csrf-what-a-frontend-developer-should-know-l5b</link>
      <guid>https://dev.to/ms_74/cross-site-request-forgery-attacks-csrf-what-a-frontend-developer-should-know-l5b</guid>
      <description>&lt;p&gt;After discussing about Cross Site Scripting Attacks (XSS) in the previous posts, I am going to explain now about another type of attack &lt;strong&gt;Cross-site Request Forgery Attack&lt;/strong&gt; (CSRF or XSRF), sometimes pronounced as &lt;em&gt;"sea-surf"&lt;/em&gt;. It has number of other names such as Session Riding, Cross-Site Reference Forgery, Hostile Linking and One-click attack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csrf-attack-how-it-happens"&gt;
  &lt;/a&gt;
  CSRF attack, how it happens
&lt;/h2&gt;

&lt;p&gt;CSRF is a more common vulnerability in websites, and the attack sometimes goes unnoticed by the victim. The after effects can be damaging as it happens within an authenticated session, and can perform user actions without the user's knowledge. For example, change password of user, one-click purchase on Amazon, post obscene content in the users social platform, transfer funds and so on.&lt;/p&gt;

&lt;p&gt;The attacker may send a link via email or chat and trick the users of a web application into executing actions of the attacker’s choosing. These attacks can get serious, if the user's account is an administrative account, as the entire web application and its accounts are compromised. &lt;/p&gt;

&lt;p&gt;There are many ways in which this attack can occur&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1tampering-with-get-request"&gt;
  &lt;/a&gt;
  1.Tampering with GET request
&lt;/h3&gt;

&lt;p&gt;Suppose a website uses &lt;code&gt;GET&lt;/code&gt; request to change the state of web server, transfer parameters or execute logical actions. The attacker can exploit this vulnerability, for example by tricking the victim to click a hyperlink into the vulnerable site that performs unexpected actions. &lt;code&gt;GET&lt;/code&gt; is particularly susceptible to CSRF attacks as it exposes the all the request contents in the URL.&lt;/p&gt;

&lt;p&gt;Most forms of hyperlink on the web correspond with &lt;code&gt;HTTP GET&lt;/code&gt; requests. A basic example is &lt;code&gt;&amp;lt;a href="https://example-site.com"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; embedded in an HTML snippet. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcTXmDTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnfazbxoueq3vhrr066.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcTXmDTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnfazbxoueq3vhrr066.png" alt="CSRF techniques"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose a bank website uses a &lt;code&gt;GET&lt;/code&gt; request to transfer funds like below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://bank.com/transfer.do?acct=ANNA&amp;amp;amount=100 HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;an attacker , let's call the person &lt;code&gt;Jack&lt;/code&gt; can tamper with the query strings and make a link or an image or a script, send it to the user via an unsolicited email with HTML content or by planting it on pages that are likely to be visited by the victim while they are doing online banking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="http://bank.com/transfer.do?acct= JACK&amp;amp;amount=10000"&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="http://bank.com/transfer.do?acct=JACK&amp;amp;amount=100000" width="0" height="0" border="0"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Videos typically load into the DOM immediately, depending on the browser's
configuration. Some mobile browsers will not load until the element is interacted
with. --&amp;gt;
&amp;lt;video width="1280" height="720" controls&amp;gt;
  &amp;lt;source src="https://www.bank.com/transfer.do?
  acct=JACK&amp;amp;amount=100000" type="video/mp4"&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case of image tag, the user does not see anything or does not require any action from user to make the request, it will simply trigger as the page or email with HTML content is visited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9G5yC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szq02of5y9v1llodjqe8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9G5yC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szq02of5y9v1llodjqe8.jpg" alt="CSRF attack process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A real case example of CSRF attack was when an older iteration of Twitter, had allowed to create tweets via a &lt;code&gt;GET&lt;/code&gt; requests. The hacker used this loophole to create a viral work on Twitter, wherein a malicious link when clicked, would post a tweet containing an obscene message with the same link in it. When readers clicked the link that the first victim tweeted, they too were tricked into tweeting the same tweet. Tens of thousands of Twitter users were tricked and luckily the development team closed the security hole before the situation got worse. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-post-request"&gt;
  &lt;/a&gt;
  2. Using POST request
&lt;/h3&gt;

&lt;p&gt;Well, if you thought that using &lt;code&gt;POST&lt;/code&gt; requests are safer, it's not the case. Its just that delivering an attack through &lt;code&gt;POST&lt;/code&gt; require some more work than using a link or image tag for &lt;code&gt;GET&lt;/code&gt; request.  &lt;/p&gt;

&lt;p&gt;The attack happens typically via a &lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt; object in HTML, as it is possible to trigger a POST request on submit action without a script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form action="https://www.xxx-bank.com/transfer" method="POST"&amp;gt;
  &amp;lt;input type="hidden" name="to_user" value="hacker"&amp;gt;
  &amp;lt;input type="hidden" name="amount" value="10000"&amp;gt;
  &amp;lt;input type="text" name="username" value="username"&amp;gt;
  &amp;lt;input type="password" name="password" value="password"&amp;gt;
  &amp;lt;input type="submit" value="Submit"&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above HTML form object you can see some hidden input fields, these are used to seed data into the form without the user seeing them. &lt;/p&gt;

&lt;p&gt;In this case, the user will see a login form to a legitimate website, and after entering the username and password, the user submits the form. Upon submitting, a POST request will be made along with the hidden data to the bank, and the funds gets transferred to the attacker. There was no actual logging  in, but a request was made using the user's existing session with the bank from another web page.&lt;/p&gt;

&lt;p&gt;The below script will make the form submit on page load without requiring any user action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body onload="document.forms[0].submit()"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how the attacker took advantage of the user's current application state with the bank even if they were on a different website. This technique can also be used to make requests on behalf of a user who has access to an internal network. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-other-http-methods-put-delete"&gt;
  &lt;/a&gt;
  3. Using other HTTP methods - PUT, DELETE
&lt;/h3&gt;

&lt;p&gt;Suppose a bank uses PUT that takes a JSON block as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUT http://xxx-bank.com/transfer.do HTTP/1.1
{ "acct":"BOB", "amount":100 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These requests are executed by a script in the malicious website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
function put() {
    var x = new XMLHttpRequest();
    x.open("PUT","http://bank.com/transfer.do",true);
    x.setRequestHeader("Content-Type", "application/json");
    x.send(JSON.stringify({"acct":"BOB", "amount":100})); 
}
&amp;lt;/script&amp;gt;

&amp;lt;body onload="put()"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the mitigation against CSRF happens on the server side, even then it is important for a frontend developer to know about them, so that when you identify a vulnerability, you can notify and take necessary actions with your backend team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defense-1-follow-rest-principles"&gt;
  &lt;/a&gt;
  Defense #1 - Follow REST principles
&lt;/h2&gt;

&lt;p&gt;REST states that you should map website operations to the appropriate HTTP method according to their intention. You should fetch data or pages with GET requests, create new objects on the server (such as comments, uploads, or messages) with PUT requests, modify objects on the server with POST requests, and delete objects with DELETE requests. So &lt;strong&gt;Do not use &lt;code&gt;GET&lt;/code&gt;requests to change the state of the server&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you use it for any reason, they will require a CSRF token header (this a bad practice). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defense-2-anticsrf-tokens"&gt;
  &lt;/a&gt;
  Defense #2 - Anti-CSRF tokens
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Anti-CSRF&lt;/em&gt; tokens prevent CSRF attacks by requiring the existence of a secret, unique, and unpredictable token that is generated by the server-side application and transmitted to the client in such a way that it is included in a subsequent HTTP request made by the client. &lt;br&gt;
When the later request is made, the server-side application validates that the request includes the expected token and rejects the request if the token is missing or invalid.&lt;br&gt;
These tokens can be set for an entire user session, rotated on a regular basis, or be created uniquely for each request.&lt;/p&gt;

&lt;p&gt;The CSRF tokens can be implemented multiple ways, the common examples are &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-hidden-input-field"&gt;
  &lt;/a&gt;
  #1 Hidden input field
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="hidden" name="csrftoken" value="1df93e1eafa42012f9a8aff062eeb1db0380b"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above approach, the token is transmitted from the server to the client within a hidden field of an HTML form. The token will then be included as a request parameter when the form is submitted using POST method.&lt;/p&gt;

&lt;p&gt;To prevent the attacker manipulate the HTML document to capture its contents, the field containing the CSRF token should be inserted before any visible input fields or any locations where user-controllable data is embedded within the HTML. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-custom-request-header"&gt;
  &lt;/a&gt;
  #2 Custom Request Header
&lt;/h3&gt;

&lt;p&gt;On an initial visit, the web application sets a cookie which is scoped appropriately so that it should not be provided during cross-origin requests. The cookie typically contains a random token which may remain the same for up to the life of the web session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Server-side: set an anti-CSRF cookie that JavaScript must send as an X header, which can't be done cross-origin
Set-Cookie: CSRFTOKEN=1df93e1eafa42012f9a8aff062eeb1db0380b; Path=/; Secure; SameSite=Strict
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript operating on the client side reads its value and copies it into a custom HTTP header sent with each transactional request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Client-side, have JavaScript add it as an X header to the XMLHttpRequest
var token = readCookie(CSRFTOKEN);                   // read the cookie
httpRequest.setRequestHeader('X-CSRF-Token', token); // add it as an X-CSRF-Token header
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On request, with this header, the server then validates presence and integrity of the token. &lt;/p&gt;

&lt;p&gt;The use of a custom request header is particularly used for AJAX or API endpoints. This defence relies on the same-origin policy (SOP) restriction that only JavaScript can be used to add a custom header, and only within its origin. By default, browsers do not allow JavaScript to make cross origin requests with custom headers, thereby protecting from an attacker performing CSRF attack from another origin. &lt;/p&gt;

&lt;p&gt;Note: The protection provided by this technique can be thwarted if the target website disables its same-origin policy. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-csrf-token"&gt;
  &lt;/a&gt;
  Storing CSRF token
&lt;/h3&gt;

&lt;p&gt;Make sure that the CSRF token is not exposed any ways, not in server logs, in URL or in GET requests. It can be in hidden input fields, in javascript variable or anywhere in DOM.  &lt;/p&gt;

&lt;p&gt;A CSRF token can be also included in the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag as shown below. All subsequent calls in the page can extract the CSRF token from this  tag.&lt;br&gt;
However, &lt;strong&gt;it is not recommended to store it in cookies or browser local storage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following code snippet can be used to include a CSRF token as a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name="csrf-token" content="{{ csrf_token() }}"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The exact syntax of populating the content attribute would depend on your web application's backend programming language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#defence-3-using-samesite-cookie-attribute"&gt;
  &lt;/a&gt;
  Defence #3 - Using SameSite Cookie Attribute
&lt;/h2&gt;

&lt;p&gt;By default, a browser automatically adds the last known cookies to requests regardless of where they originate. If an attacker steals the security token from your HTML forms, and installs it in their own malicious forms, they can launch a CSRF attack, with any security cookies the server previously set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
Set-Cookie: JSESSIONID=xxxxx; SameSite=Lax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The SameSite attribute can be used to control whether and how cookies are submitted in cross-site requests. Specifying a SameSite attribute &lt;code&gt;strict&lt;/code&gt;, when you set a cookie tells the browser to strip cookies on a request to your site when the request is coming from an external domain.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Strict&lt;/code&gt; value will prevent the cookie from being sent by the browser to the target site in all cross-site browsing context, even when following a regular link. Just imagine if you have login each time in Facebook when you return from seeing a video someone shared. The default &lt;code&gt;Lax&lt;/code&gt; value provides a reasonable balance between security and usability for websites that want to maintain user's logged-in session after the user arrives from an external link as it allows only GET requests from other sites to send cookies.&lt;/p&gt;

&lt;p&gt;As of now Chrome and other modern browsers has Same-site attribute set by default (Cookies without SameSite are treated as Lax by default, SameSite=None cookies without Secure are rejected.) &lt;a href="https://web.dev/samesite-cookies-explained/"&gt;Read more here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-defences"&gt;
  &lt;/a&gt;
  Other Defences
&lt;/h2&gt;

&lt;p&gt;There are various other defence techniques and one of them is by User interaction&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-Authentication - Authorization mechanism (password or stronger)&lt;/li&gt;
&lt;li&gt;One-time Token&lt;/li&gt;
&lt;li&gt;CAPTCHA (prefer newer CAPTCHA versions without user interaction or visual pattern matching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more in depth about other defence techniques refer the &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#introduction"&gt;Cross-Site Request Forgery Prevention Cheat Sheet&lt;/a&gt; where I have taken a lot of reference from for this blog post. &lt;/p&gt;

&lt;p&gt;Hope you have a better understanding about CSRF attacks now. Please share your comments if you have any feedback or suggestions. In the next post I intend to discuss about vulnerabilities in Authentication process. Stay tuned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>JavaScript: Concept of  Promise</title>
      <author>Swarnali Roy</author>
      <pubDate>Sun, 01 Aug 2021 20:42:44 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/javascript-concept-of-promise-3ijb</link>
      <guid>https://dev.to/swarnaliroy94/javascript-concept-of-promise-3ijb</guid>
      <description>&lt;p&gt;Dear readers, this post is about a very useful and important concept of &lt;em&gt;JavaScript&lt;/em&gt;. I think every beginner should have this basic knowledge while developing any project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise
&lt;/h3&gt;

&lt;p&gt;In JavaScript, &lt;code&gt;Promise&lt;/code&gt; is a very important concept.The &lt;em&gt;Promise&lt;/em&gt; object represents the eventual &lt;code&gt;completion&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt; of an &lt;em&gt;asynchronous operation&lt;/em&gt; and its &lt;em&gt;resulting value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;👉🏻 A &lt;em&gt;Promise&lt;/em&gt; is a proxy with an &lt;em&gt;unknown value&lt;/em&gt; whenever a Promise is generated. &lt;br&gt;
👉🏻 This allows the controller to connect with the final &lt;em&gt;success value&lt;/em&gt; or reason for &lt;em&gt;failure&lt;/em&gt; of the asynchronous operation.&lt;br&gt;
👉🏻 This allows &lt;em&gt;asynchronous methods&lt;/em&gt; to return the same values ​​as &lt;em&gt;synchronous methods&lt;/em&gt;. &lt;br&gt;
👉🏻Instead of returning the final value &lt;em&gt;immediately&lt;/em&gt;, the asynchronous method returns a promise to provide the value at a particular point in the &lt;em&gt;future&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic Syntax
&lt;/h3&gt;

&lt;p&gt;Promise is a &lt;em&gt;constructor function&lt;/em&gt;, so we need a &lt;code&gt;new&lt;/code&gt; to create a Promise. It takes a &lt;em&gt;function&lt;/em&gt;, as it's &lt;em&gt;argument&lt;/em&gt;, with &lt;em&gt;two parameters&lt;/em&gt;: &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. &lt;br&gt;
The &lt;em&gt;syntax&lt;/em&gt; generally looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const myPromise = new Promise((resolve, reject) =&amp;gt; { } ) ;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#states-of-a-promise"&gt;
  &lt;/a&gt;
  States of a Promise
&lt;/h3&gt;

&lt;p&gt;A promise has &lt;em&gt;three&lt;/em&gt; states:&lt;/p&gt;

&lt;p&gt;i) &lt;code&gt;pending&lt;/code&gt;: It's the initial state, neither &lt;em&gt;successful&lt;/em&gt; nor &lt;em&gt;unsuccessful&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;ii) &lt;code&gt;fulfilled&lt;/code&gt;: It means that the operation was &lt;em&gt;completed successfully&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;iii) &lt;code&gt;rejected&lt;/code&gt;: It indicates that the operation has &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#resolve-parameter"&gt;
  &lt;/a&gt;
  Resolve Parameter
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;resolve&lt;/code&gt; parameter is used when we want the promise to succeed. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reject-parameter"&gt;
  &lt;/a&gt;
  Reject Parameter
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;reject&lt;/code&gt; is used when we want to catch the failure.&lt;/p&gt;

&lt;p&gt;The following is an &lt;em&gt;example&lt;/em&gt; of a &lt;em&gt;Promise&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const makeServerRequest = new Promise((resolve, reject1) =&amp;gt; {
  let responseFromServer;

  if (responseFromServer) {
    resolve("We got the Data");
  } else {
    reject("Data not Found");
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet, &lt;em&gt;responseFromServer&lt;/em&gt; represents a response from the server.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;responseFromServer&lt;/em&gt; is &lt;em&gt;true&lt;/em&gt;, the &lt;code&gt;resolve&lt;/code&gt; method will be called to &lt;em&gt;successfully complete&lt;/em&gt; the promise and return the string as it's argument. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#generally-it-returns-data"&gt;
  &lt;/a&gt;
  (Generally, it returns data)
&lt;/h6&gt;

&lt;p&gt;Again, if &lt;em&gt;responseFromServer&lt;/em&gt; is &lt;em&gt;false&lt;/em&gt;, the promise will fail and call the &lt;code&gt;reject&lt;/code&gt; method.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#generally-it-catches-the-errors"&gt;
  &lt;/a&gt;
  (Generally it catches the errors).
&lt;/h6&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Website design – how to start?</title>
      <author>shubham rathod</author>
      <pubDate>Sun, 01 Aug 2021 20:19:36 +0000</pubDate>
      <link>https://dev.to/shubhamrathod1/website-design-how-to-start-9fp</link>
      <guid>https://dev.to/shubhamrathod1/website-design-how-to-start-9fp</guid>
      <description>&lt;p&gt;Designing a website starts with defining the role the website is meant to serve, or its purpose.&lt;/p&gt;

&lt;p&gt;You’re guessing right – there are different types of websites that are used for different purposes. The three most popular ones are: landing pages, one-pages and classic websites. Obviously, there are also large sites (portals and the like), but that’s a completely different topic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-purpose-of-your-website-this-is-where-web-design-begins"&gt;
  &lt;/a&gt;
  What is the purpose of your website – this is where web design begins.
&lt;/h3&gt;

&lt;p&gt;You need to know what purpose your website is meant to have. That way the website you’re designing will be understandable to the users.&lt;/p&gt;

&lt;p&gt;If you run a business of some sort, the user needs to know right from the start what you have to offer.&lt;/p&gt;

&lt;p&gt;For example – you own a car repair garage. The user needs to know they have entered a repair garage’s website and that they can use specific services.&lt;/p&gt;

&lt;p&gt;The purpose of such website is to inform about those services, and thus – to gain new clients&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-design-define-your-audience"&gt;
  &lt;/a&gt;
  Web design – define your audience.
&lt;/h3&gt;

&lt;p&gt;It’s not like your website is going to be viewed by search engine robots only ;). That’s why you need to think about who will be (and already is) the audience of your website.&lt;/p&gt;

&lt;p&gt;After all, they’re the ones you want to reach, aren’t they?&lt;/p&gt;

&lt;p&gt;Defining the audience of a website is directly related to the purpose of your website. They’re the ones to fulfill that purpose, after all.&lt;/p&gt;

&lt;p&gt;Web design defines such profiling as “persona creation”.&lt;/p&gt;

&lt;p&gt;Which means you need to think about what exactly the users are going to want from your website and who exactly they are going to be.&lt;/p&gt;

&lt;p&gt;You certainly have some profile of your website’s user in your head. You need to think about what exactly they need, what their preferences are, why they ended up on your website and what they should find on it for you to reach your goal.&lt;/p&gt;

&lt;p&gt;For example, a perfect user of a car repair garage’s website will be someone who needs to have their car repaired.&lt;/p&gt;

&lt;p&gt;They want to know what kind of services the garage offers, where it is located, what its operating hours are and how to contact it. That’s the kind of information they are going to be looking for on the website.&lt;/p&gt;

&lt;p&gt;Your job is to put it in a visible place.&lt;/p&gt;

&lt;p&gt;In other words: creating personae will let you better tailor your website to the needs of your users.&lt;/p&gt;

&lt;p&gt;Remember – (good) web design is closely related to addressing the needs of specific personae. Which means your perfect users. Once you define your audience, it will be easier for you to define what the user wants to find on your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paper-and-pencil-make-web-design-easier"&gt;
  &lt;/a&gt;
  Paper and pencil – make web design easier.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGmy3BhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39ws4rzlxx25eir5v8w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGmy3BhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39ws4rzlxx25eir5v8w.jpg" alt="website sketch image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s always nice to draw something. Especially if you have no idea on how to get to designing a website in terms of visuals, just remember: it’s always worth it to get inspired, which makes it a good idea to go through a few websites that you think are nice and draw some conclusions. That’s why it’s better to start designing a website with a piece of paper.&lt;/p&gt;

&lt;p&gt;Once you have the elements that should be featured on it, you can expand it onto subsequent subpages. Make one sheet of paper for each individual subpage.&lt;/p&gt;

&lt;p&gt;Place subsequent elements on each “subpage” (make sure to maintain the order of priority). You don’t have to be afraid to cross things out.&lt;/p&gt;

</description>
      <category>webdesign</category>
      <category>typesofwebdesign</category>
    </item>
    <item>
      <title>GraphQL and FastAPI Combination</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 01 Aug 2021 20:08:07 +0000</pubDate>
      <link>https://dev.to/bekbrace/graphql-and-fastapi-combination-1c37</link>
      <guid>https://dev.to/bekbrace/graphql-and-fastapi-combination-1c37</guid>
      <description>&lt;p&gt;GraphQL is an abbreviation for Graph Query Language.&lt;br&gt;
So it's a Query Language for reading data from API. &lt;br&gt;
Unlike most query languages (such as SQL), you don’t use GraphQL to query a particular type of data store (such as a PostgreSQL database for example). &lt;br&gt;
Instead, you use GraphQL to query data from any number of different sources.&lt;/p&gt;

&lt;p&gt;So, to make things clearer , in traditional REST API, you consume apis using REST and we have done that so many times with Flask, Django and FastAPI by sending different HTTP request methods like GET, POST, PUT , and DELETE to the API using path or URLS &lt;/p&gt;

&lt;p&gt;Now the problem with HTTP requests is that when the request is received from the front-end user, &lt;br&gt;
the API responds with everything it has, a full payload that contains data that might not be useful to you as a developer&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2_puWfTK8bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The other problem is the opposite, which means that you might want to fetch multiple data or get multiple resources simultaneously, and this is not possible, because there is no enough data per HTTP request.  &lt;/p&gt;

&lt;p&gt;And there comes the power of GraphQL&lt;br&gt;
GRAPHQL solved this problem by improving upon the idea of receiving a bulk of unnecessary data or fetching less than expected,  so instead of these request URLS or many endpoints for HTTP methods; graphql has a single entry point; ( slid 2 of code) so you can query data now very easily by specifying what type of data exactly you're looking for, and the response you'll get will exactly match your query, in JSON format of course.&lt;/p&gt;

&lt;p&gt;The way this works is by start defining  a schema with objects using type keyword, and a type can have multiple fields like an id, and if you want to make it non-nullable then add the exclamation mark after [ Analogist to NOT NULL in SQL ], you can also add integers, strings and boolean values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Author {
    id:ID!
    age: 56
    genre: "horror"
    american: True
    books: [Books]
    symbol: ✍️
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also create relationship with another type, so an author can have many books , which we can represent by wrapping the type in bracket , and on the other side, the books belong to an author&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Books{
    language: String!
    number: int
    author: Author
        symbol: 📚
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#graphql-and-fastapi"&gt;
  &lt;/a&gt;
  GraphQL and FastAPI
&lt;/h1&gt;

&lt;p&gt;Now, we are going to use GraphQL to fetch data from FASTAPI, and we could use something like Strawbery or Ariadne, but Starlette, and when I say Starlette, I implicitly mean FastAPI, so Starlette includes optional support for GraphQL, using the graphene library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install fastAPI  : pip install fastapi&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Install Graphene : pip install "graphene&amp;gt;=2.0"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphene-python.org"&gt;https://graphene-python.org&lt;/a&gt;&lt;br&gt;
Graphene is a library for building GraphQL APIs in Python easily, so it's a Server library, and its main goal is to provide a simple but extendable API for making developers' lives easier.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import graphene
from fastapi import FastAPI
from starlette.graphql import GraphQLApp

class Query(graphene.ObjectType):
    hello = graphene.String(name=graphene.String(default_value=", world 🌎 !"))

    def resolve_hello(self, info, name):
        return "Hello " + name

app = FastAPI()
app.add_route("/", GraphQLApp(schema=graphene.Schema(query=Query)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Here we are using .add_route, that is the way to add a route in Starlette (inherited by FastAPI) without declaring the specific operation (as would be with .get(), .post(), etc).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run the file : uvicorn main:app --reload&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Now we will load up the page in the browser, we will be served the GraphiQL tool, which you can use to interact with  GraphQL API&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BekBrace"&gt;
        BekBrace
      &lt;/a&gt; / &lt;a href="https://github.com/BekBrace/GraphQL-FastAPI-Code"&gt;
        GraphQL-FastAPI-Code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is an introduction to GraphQL, and how to combine FastAPI code with GraphQL to run queries and receive data in GraphiQL Tool
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>graphql</category>
      <category>python</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>Kotlin monthly wrap-up: July 2021</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Sun, 01 Aug 2021 19:12:43 +0000</pubDate>
      <link>https://dev.to/jmfayard/kotlin-monthly-wrap-up-july-2021-53l9</link>
      <guid>https://dev.to/jmfayard/kotlin-monthly-wrap-up-july-2021-53l9</guid>
      <description>&lt;p&gt;Hi, I'm Jean-Michel, a Kotlin fan like you! At the end of each month, I'll be showcasing some great posts, projects and insights from the Kotlin community, right here on DEV.to.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Among the popular articles of the months, here are those I've read and can recommend:&lt;/p&gt;




&lt;p&gt;How to get started with Android App Development? Rohit Kumar provides beginners with a roadmap of what to learn. Spoiler alert: there is a lot!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitk570" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46bzOWvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJpAQ_UY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644632/af4c3bd6-8ece-4383-a417-7f1fc3eaa7c1.jpg" alt="rohitk570"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What to Learn to get started with Android App Development?&lt;/h2&gt;
      &lt;h3&gt;ROHIT KUMAR ・ Jul 12 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, there is my article who encourages you to write command-line tools to automate your workflow, but to make sure you use your favorite programming language, not Bash! Be sure to check my starter project for CLI tools in Kotlin multiplatform.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/how-to-write-a-command-line-tool-with-kotlin-multiplatform-45g2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Write a Command-Line Tool with Kotlin Multiplatform&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Jul 13 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Lists are the bread and butter of programming with Kotlin. Do you think you master them? &lt;a href="https://dev.to/sebastianaigner"&gt;Sebastian Aigner&lt;/a&gt; comes back with an article and YouTube episode to explore what you may not know yet.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kotlin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPUWxAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UV4Pzb-m--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2485/80d41bc3-7f05-444c-a32e-ceb190e486b1.png" alt="Kotlin"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSTlWat0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6FQVzg70--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/26006/58280da5-1e32-4986-be77-79297aaf1175.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kotlin/exploring-kotlin-lists-in-2021-2gi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Exploring Kotlin Lists in 2021&lt;/h2&gt;
      &lt;h3&gt;Sebastian Aigner for Kotlin ・ Jul 8 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Finally, Christy Jacob presents what's new in Appwrite, an ambitious open-source alternative to Firebase in active development. That includes a Kotlin SDK both for Android and for server-side.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/appwrite" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4bSIRV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7eMrR0VE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2225/eb541cf9-84f4-4101-987c-c219cd4b34fc.png" alt="Appwrite"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRLcIz2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XAe6V72F--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119691/5be2bcad-e1ee-4ef8-928b-d71f4e355af6.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Announcing Appwrite 0.9: The open source Firebase alternative &lt;/h2&gt;
      &lt;h3&gt;Christy Jacob for Appwrite ・ Jul 7 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;That's all for this month!&lt;/p&gt;

&lt;p&gt;Remember to follow the Kotlin tag&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you want to contact me, there is a standing invitation at &lt;a href="https://jmfayard.dev/contact/"&gt;https://jmfayard.dev/contact/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>bestofdev</category>
      <category>icymi</category>
    </item>
    <item>
      <title>ES6 Modules and Application</title>
      <author>Abba Vincent Ihechikara</author>
      <pubDate>Sun, 01 Aug 2021 19:03:37 +0000</pubDate>
      <link>https://dev.to/ihechikara/es6-modules-and-application-4j4c</link>
      <guid>https://dev.to/ihechikara/es6-modules-and-application-4j4c</guid>
      <description>&lt;p&gt;Modules in JavaScript have been around for quite a while but were originally implemented in libraries. An example would be how we can import a React component and make use of it in different components without the need to rewrite the function or class from scratch. Modules help us to avoid reinventing the wheel by writing the same logic twice. It also aids in the separation of concerns; you can have a separate module just for adding numbers or another for fetching data from an API. This way, you know exactly where everything belongs. Imagine if all of Google’s code was in one single file and every time the team had to fix something in the search bar, they had to scroll through a billion lines of code just to get to that particular section, wouldn’t that be hectic? Modules help us separate each functionality and thereby tackle each problem or scale-up certain functionalities individually.&lt;/p&gt;

&lt;p&gt;Now here’s the good news (kinda old news), modules were introduced in vanilla JavaScript with the release of ECMAScript 2015, popularly known as ES6. The release came with a lot of features that took vanilla JS to a whole new level. These features included &lt;strong&gt;arrow functions&lt;/strong&gt;, &lt;strong&gt;rest and spread&lt;/strong&gt;, &lt;strong&gt;destructuring&lt;/strong&gt;, &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;let and const&lt;/strong&gt;, &lt;strong&gt;modules&lt;/strong&gt;, etc. This article will focus only on modules and their application in vanilla JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#application-of-es6-modules"&gt;
  &lt;/a&gt;
  Application of ES6 Modules
&lt;/h1&gt;

&lt;p&gt;To begin with, we’ll create our folder which will have our main script and modules. One module will be used for addition while the other will be used for subtraction.&lt;br&gt;
This is what the folder structure looks like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;index.html&lt;br&gt;
script.js&lt;br&gt;
myModules/&lt;br&gt;
add.js&lt;br&gt;
sub.js&lt;/p&gt;

&lt;p&gt;Some resources may use the .mjs extension to note module files but we’ll use a different approach by including type=”module” in our script tag. This is shown below:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;ES6 Modules&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s create our functions — one for addition and the other for subtraction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//add.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//sub.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#export-and-import"&gt;
  &lt;/a&gt;
  Export and Import
&lt;/h1&gt;

&lt;p&gt;All we have done is create regular scripts with functions. How then can we use these functions in other scripts? This is done using the &lt;strong&gt;export&lt;/strong&gt; and &lt;strong&gt;import keywords&lt;/strong&gt;.&lt;br&gt;
In other to access the functionality of a module, it has to be exported from where it was created and then imported into any file where it will be used.&lt;br&gt;
Let us export our add.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//add.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now by adding the &lt;strong&gt;export&lt;/strong&gt; before our function, it makes the script available for imports into other scripts where its function can be used.&lt;br&gt;
The same process is done for sub.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//sub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have exported our scripts, let us then import them into our main script and make use of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//script.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myModules/add.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myModules/sub.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax is pretty easy to understand. Start with the &lt;strong&gt;import&lt;/strong&gt; keyword followed by the name of the function being imported which is nested inside curly brackets and then finally, the path from which the script was imported.&lt;br&gt;
Notice how we used the add and sub-function without creating a function with new parameters from scratch? This is the power of ES6 modules, our script is now reusable from anywhere as long as it has been exported on creation and imported before use. These scripts can now be imported into any other script we wish to use them in. This also eliminates the use of multiple script tags in our HTML file by creating one script that acts as the entry point for all other scripts.&lt;br&gt;
You can equally change the name of the function when importing to something different. For instance, you want to import the sub-function but you would rather call it ‘minus’. This can be done by adding “as” after the original name of the function while importing. Example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//script.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;minus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myModules/sub.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading; I hope this article was worth your time. Follow me on Twitter &lt;a href="https://twitter.com/Ihechikara2"&gt;@ihechikara2&lt;/a&gt; My inbox is always open. See ya!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>
Python Image Handling Libraries</title>
      <author>Mansoor Ahmed</author>
      <pubDate>Sun, 01 Aug 2021 18:39:56 +0000</pubDate>
      <link>https://dev.to/ahmedmansoor012/python-image-handling-libraries-21m3</link>
      <guid>https://dev.to/ahmedmansoor012/python-image-handling-libraries-21m3</guid>
      <description>&lt;p&gt;Introduction&lt;br&gt;
Image Processing is the process of analyzing and controlling a digital image first and foremost aimed at improving its quality or for takeout some information from it which could then be put to some use. Common tasks in image processing comprise;&lt;/p&gt;

&lt;p&gt;Showing images&lt;br&gt;
Basic manipulations similar to cropping, flipping, rotating etc.&lt;br&gt;
Image Splitting up&lt;br&gt;
Grouping and feature drawing out&lt;br&gt;
Image rebuilding and Image recognition&lt;br&gt;
Python develops a suitable choice for such Image processing tasks. This is because of its emergent reputation as a scientific programming language and the allowed ease of use of various State of the Art Image Processing tools in its ecosystem.&lt;/p&gt;

&lt;p&gt;Description&lt;br&gt;
Best image processing and manipulation techniques may be carried out successfully using two libraries:&lt;/p&gt;

&lt;p&gt;Python Imaging Library (PIL)&lt;br&gt;
Open Source Computer Vision (OpenCV)&lt;br&gt;
Python Imaging Library (PIL)&lt;br&gt;
The Python Imaging Library (PIL) delivers overall image handling and many valuable simple image operations like resizing, cropping, rotating, color change and abundant more. This is one of the essential libraries for image manipulation in Python. There’s a keenly-developed fork of PIL called Pillow. This is an informal to install, runs on all most important operating systems, and supports Python 3. The library covers simple image processing functionality, together with point operations, filtering by a set of integral convolution kernels, and color space changes.&lt;/p&gt;

&lt;p&gt;How to install Pillow?&lt;br&gt;
We’ll have to install Pillow’s prerequisites before installing Pillow. Find out the instructions for platform in the Pillow installation instructions.&lt;/p&gt;

&lt;p&gt;Next, it’s open:&lt;/p&gt;

&lt;p&gt;$ pip install Pillow&lt;br&gt;
Example&lt;/p&gt;

&lt;p&gt;from PIL import Image, ImageFilter&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-image"&gt;
  &lt;/a&gt;
  Read image
&lt;/h1&gt;

&lt;p&gt;im = Image.open( 'image.jpg' )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#display-image"&gt;
  &lt;/a&gt;
  Display image
&lt;/h1&gt;

&lt;p&gt;im.show()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#applying-a-filter-to-the-image"&gt;
  &lt;/a&gt;
  Applying a filter to the image
&lt;/h1&gt;

&lt;p&gt;im_sharp = im.filter( ImageFilter.SHARPEN )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#saving-the-filtered-image-to-a-new-file"&gt;
  &lt;/a&gt;
  Saving the filtered image to a new file
&lt;/h1&gt;

&lt;p&gt;im_sharp.save( 'image_sharpened.jpg', 'JPEG' )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#splitting-the-image-into-its-respective-bands-ie-red-green"&gt;
  &lt;/a&gt;
  Splitting the image into its respective bands, i.e. Red, Green,
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#and-blue-for-rgb"&gt;
  &lt;/a&gt;
  and Blue for RGB
&lt;/h1&gt;

&lt;p&gt;r,g,b = im_sharp.split()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#viewing-exif-data-embedded-in-image"&gt;
  &lt;/a&gt;
  Viewing EXIF data embedded in image
&lt;/h1&gt;

&lt;p&gt;exif_data = im._getexif()&lt;/p&gt;

&lt;p&gt;exif_data&lt;br&gt;
Open Source Computer Vision (OpenCV)&lt;br&gt;
Open Source Computer Vision, usually known as OpenCV, is a more innovative image handling and processing software than PIL. It has been applied in a number of languages and widely used libraries for computer vision applications. OpenCV-Python is not only fast in the meantime the background contains of code written in C or C++ .This is similarly informal to code and deploy because of the Python wrapper in foreground. This brands it an unlimited select to perform computationally concentrated computer vision programs.&lt;/p&gt;

&lt;p&gt;How to install Open Source Computer Vision?&lt;br&gt;
By using the cv2 and NumPy modules in Python, we can implement image processing. The installation instructions for OpenCV  would guide us over and done with configuring the project for ourselves.&lt;/p&gt;

&lt;p&gt;NumPy may be downloaded from the Python Package Index(PyPI):&lt;/p&gt;

&lt;p&gt;$ pip install numpy&lt;br&gt;
Example&lt;/p&gt;

&lt;p&gt;import cv2&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-image"&gt;
  &lt;/a&gt;
  Read Image
&lt;/h1&gt;

&lt;p&gt;img = cv2.imread('testimg.jpg')&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#display-image"&gt;
  &lt;/a&gt;
  Display Image
&lt;/h1&gt;

&lt;p&gt;cv2.imshow('image',img)&lt;/p&gt;

&lt;p&gt;cv2.waitKey(0)&lt;/p&gt;

&lt;p&gt;cv2.destroyAllWindows()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#applying-grayscale-filter-to-image"&gt;
  &lt;/a&gt;
  Applying Grayscale filter to image
&lt;/h1&gt;

&lt;p&gt;gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#saving-filtered-image-to-new-file"&gt;
  &lt;/a&gt;
  Saving filtered image to new file
&lt;/h1&gt;

&lt;p&gt;cv2.imwrite('graytest.jpg',gray)&lt;br&gt;
Python Image Handling Libraries&lt;br&gt;
Some Other Image Manipulation Tools&lt;br&gt;
Scikit-image&lt;br&gt;
Scikit-image is an open source Python package. It do work with NumPy arrays. It implements algorithms and utilities to be used in research, education, and industry applications. It’s a reasonably simple and easy library, even for those that are new Python’s ecosystem. The code is high-quality, peer-reviewed, and written by a lively community of volunteers.&lt;/p&gt;

&lt;p&gt;NumPy&lt;br&gt;
NumPy is one among the core libraries in Python programming. It gives support for arrays. A picture is actually a typical NumPy array containing pixels of knowledge points. Consequently, by using basic NumPy operations, similar slicing, masking, and fancy indexing, we’ll modify the pixel values of a picture. The image is often loaded using skimage and displayed using Matplotlib.&lt;/p&gt;

&lt;p&gt;SciPy&lt;br&gt;
SciPy is a different of Python’s core scientific modules. It can be used for simple image handling and processing tasks. Particularly, the submodule scipy.ndimage (in SciPy v1.1.0) delivers functions operating on n-dimensional NumPy arrays. The package now comprises;&lt;/p&gt;

&lt;p&gt;Functions for linear and non-linear filtering,&lt;br&gt;
B-spline interpolation,&lt;br&gt;
Binary morphology&lt;br&gt;
Object measurements.&lt;br&gt;
SimpleCV&lt;br&gt;
SimpleCV is one more open source framework for building computer vision applications. It deals access to many high-powered computer vision libraries like OpenCV, but without having to understand about bit depths, file formats, color spaces, etc. A few points in favor of SimpleCV are:&lt;/p&gt;

&lt;p&gt;Even beginning programmers may write machine vision tests&lt;br&gt;
Video files, images, Cameras, and video streams are all interoperable&lt;br&gt;
Mahotas&lt;br&gt;
Mahotas is one more computer vision and image processing library for Python. It covers old-style image processing functions like filtering and morphological operations, similarly for example more modern computer vision functions for feature computation. That is including interest point detection and native descriptors. The interface is in Python that is acceptable for fast development. However the algorithms are implemented in C++ and tuned for speed. Mahotas’ library is speedy with minimalistic code and even minimum dependencies.&lt;br&gt;
For more details visit:&lt;a href="https://www.technologiesinindustry4.com/2021/07/python-image-handling-libraries.html"&gt;https://www.technologiesinindustry4.com/2021/07/python-image-handling-libraries.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Importance of Apollo GraphQL Platform</title>
      <author>Mansoor Ahmed</author>
      <pubDate>Sun, 01 Aug 2021 18:17:06 +0000</pubDate>
      <link>https://dev.to/ahmedmansoor012/importance-of-apollo-graphql-platform-j1l</link>
      <guid>https://dev.to/ahmedmansoor012/importance-of-apollo-graphql-platform-j1l</guid>
      <description>&lt;p&gt;Introduction&lt;br&gt;
Importance of Apollo GraphQL Platform getting used to create APIs. When it involves clients consuming these APIs, there are a set of tools available to form this process smoother. This is a unique command language that structures a reference application in JavaScript, and Apollo shapes its ecosystem on top to form GraphQL available for a wider audience. This includes the client-side also because the server-side because they supply an outsized ecosystem of libraries for both.&lt;/p&gt;

&lt;p&gt;The libraries offer a middle layer too: Apollo Engine, which may be a GraphQL gateway. Basically, there’s a motive Apollo is one of the leading popular choices for using GraphQL in JavaScript applications. Apollo GraphQL may be a platform that lets us do API calls using GraphQL. It is modern thanks to fetching data because it deals with asynchronous fetching and only fetches the info we actually need. So, there won’t be needless data that takes up excessive space and our application will load faster.&lt;/p&gt;

&lt;p&gt;Description&lt;br&gt;
There are many advantages of Apollo GraphQL platform. Some important benefits are being described here;&lt;/p&gt;

&lt;p&gt;Apollo’s Ecosystem&lt;br&gt;
While GraphQL is in its early stages, the Apollo ecosystem offers solutions for several of its challenges. Beyond that we will see what proportion the ecosystem is growing, because the corporate announces an update for Apollo or another library which will be used with Apollo’s tech stack at every other technology conference. Apollo isn’t impartial covering GraphQL, however; they even have work invested in REST interfaces for backward compatibility to RESTful architectures. This even takes GraphQL beyond the network layer and remote data, offering a state management solution for local data, too.&lt;/p&gt;

&lt;p&gt;Apollo’s Ecosystem&lt;/p&gt;

&lt;p&gt;The Company and Community behind Apollo&lt;br&gt;
The company behind Apollo is pouring many resources into its success. They’re also active in open source, offering in-depth articles about their products, supported by a longtime presence at the conferences. Generally, the GraphQL ecosystem seems to be in fine condition for the future⁴¹. The GraphQL community is increasing, by way of more developers adopt it and use Apollo for client and server-side JavaScript applications.&lt;/p&gt;

&lt;p&gt;Who is using Apollo?&lt;br&gt;
Tech-savvy companies are taking advantage of Apollo already. Many were conversant in the favored Meteor framework before, but new and very popular companies like Airbnb and Twitch are using it. These are just a couple of their stories:&lt;/p&gt;

&lt;p&gt;Airbnb [1] [2]&lt;br&gt;
Twitch&lt;br&gt;
The ny Times&lt;br&gt;
KLM&lt;br&gt;
Medium&lt;br&gt;
Apollo’s Documentation&lt;br&gt;
Though Apollo remains to evolve, the team and community behind it keep the documentation up to date, and that they have much insight about the way to build applications. In fact, they cover numerous areas it are often overwhelming for beginners.&lt;/p&gt;

&lt;p&gt;Apollo Libraries&lt;br&gt;
Apollo deals several libraries for applying a well-organized GraphQL tech stack for JavaScript applications, and their libraries are open-sourced to be more manageable. as an example, Apollo Link provides an API for chaining different features into a GraphQL control flow. This makes it possible for automatic network retries or RESTful API endpoints rather than GraphQL endpoints.&lt;/p&gt;

&lt;p&gt;Apollo is additionally offering exchangeable libraries which may be seen within the Apollo Client Cache. The Apollo Client that one isn’t prejudiced toward its cache, where the info is kept, by way of any cache advertised by Apollo or its community works. There are already caches available which will be wont to setup a Apollo Client instance.&lt;/p&gt;

&lt;p&gt;Importance of Apollo GraphQL&lt;/p&gt;

&lt;p&gt;Apollo’s Features&lt;br&gt;
Apollo comes with built-in types to tug all the difficulty out of applications and grip the intersection between client and server applications. as an example, Apollo Client caches requests, which aren’t made twice when the result’s already within the cache. The function delivers a enactment boost for applications, saving prized network traffic. Also, Apollo Client normalizes data, so nested data from a GraphQL query is stored during a normalized arrangement within the Apollo Client Cache. Data are frequently read from the Apollo Client Cache by an identifier. That is read without looking up an article entity in an author entity. Outside caching and normalization, Apollo Client originates with more types like error management, support for pagination and optimistic UI, prefetching of knowledge, and connection of the info layer (Apollo Client) to the view layer&lt;/p&gt;

&lt;p&gt;Interoperability with other Frameworks&lt;br&gt;
One of Apollo’s libraries makes it possible to attach Apollo Client to React. a bit like libraries like Redux and MobX, the React-Apollo libraries have higher-order and render prop components to attach both worlds. On the other hand, there are additional libraries out there that bridge not only Apollo Client to react, but also Apollo to Angular or Apollo to Vue. That’s what brands Apollo Client view layer agnostic that is abundant for the rising JavaScript ecosystem.&lt;/p&gt;

&lt;p&gt;Apollo is additionally library agnostic on the server-side, and it offers several solutions to attach with Node.js libraries. Apollo Server for Express.js is one of the leading standard choices among developers and corporations, and there are other solutions for Koa and Hapi on Node.js for Apollo Server also.&lt;/p&gt;

&lt;p&gt;Modern Data Handling with Apollo&lt;br&gt;
Remember back once we had to trigger data fetching during a component’s lifecycle methods imperatively? Apollo Client resolves this, as its data queries are declarative. React repeatedly employs a higher-order component or render prop to trigger a question automatically when a component renders. The GraphQL deviations are activated imperatively. However that’s only due to a higher-order component or renders prop grants access to the function which executes the mutation. Fundamentally, Apollo holds declarative programming over imperative programming.&lt;/p&gt;

&lt;p&gt;Appropriate Development Experience&lt;br&gt;
Using Apollo for JavaScript applications is becoming easier a day. The community is assertive out tools for application. There are development tools available as browser extensions, third-party tools to perform GraphQL operations like GraphiQL, and libraries to simplify developing Apollo applications. As an example, the Apollo Boost library provides an almost zero-configuration Apollo Client setup to urge started with GraphQL for client-side application.&lt;br&gt;
For more details visit: &lt;a href="https://www.technologiesinindustry4.com/2021/08/apollo-graphql-platform.html"&gt;https://www.technologiesinindustry4.com/2021/08/apollo-graphql-platform.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a quote switcher with Vanilla JS</title>
      <author>Juan F Gonzalez </author>
      <pubDate>Sun, 01 Aug 2021 17:41:53 +0000</pubDate>
      <link>https://dev.to/juanfrank77/build-a-quote-switcher-with-vanilla-js-140o</link>
      <guid>https://dev.to/juanfrank77/build-a-quote-switcher-with-vanilla-js-140o</guid>
      <description>&lt;p&gt;Hello again, my friend.&lt;/p&gt;

&lt;p&gt;This time we're going to do something more practical, visual, and frontend-focused. &lt;/p&gt;

&lt;p&gt;Also, since JavaScript has had several updates throughout the years, you would be surprised to see all the different things we can now create without the need for a framework. &lt;/p&gt;

&lt;p&gt;Just plain good ol' vanilla JS.&lt;/p&gt;

&lt;p&gt;You wanna know what it is? Well, let's jump right in!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vnvOP4RrJCl01oikDU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vnvOP4RrJCl01oikDU/giphy.gif" alt="jumping in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-going-to-build"&gt;
  &lt;/a&gt;
  What are we going to build?
&lt;/h2&gt;

&lt;p&gt;It will be this nice-looking, component that displays a quote when clicking on its author's image.&lt;/p&gt;

&lt;p&gt;And it all works with just plain HTML, CSS, and JS. &lt;/p&gt;

&lt;p&gt;Here's how it looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K8AaAIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627677352249/MLPvSUN4Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K8AaAIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627677352249/MLPvSUN4Q.png" alt="quotes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-well-need"&gt;
  &lt;/a&gt;
  What we'll need
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-markup"&gt;
  &lt;/a&gt;
  The Markup
&lt;/h3&gt;

&lt;p&gt;Let's start with the markup. First, we will need a container for the component and some space for both the author and the quote.&lt;/p&gt;

&lt;p&gt;It can be something like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"switcher"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"authors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      ... 
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"quotes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     ...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can add the text of the quote and the name of the author.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"quote"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"quote-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                ...
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"quote-author"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, let's add the code for the button and the author's image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"author-btn"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-index=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://image.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Author Image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's pretty much all the code that we'll need to make this happen.&lt;/p&gt;

&lt;p&gt;You can modify this markup to your liking or adapt it if you're using a preprocessor. Something like &lt;a href="https://pugjs.org/api/getting-started.html"&gt;Pug&lt;/a&gt; for example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-styling"&gt;
  &lt;/a&gt;
  The Styling
&lt;/h3&gt;

&lt;p&gt;Now for the styling, that's another thing that you can freely change to make the end result what you want it to be. &lt;/p&gt;

&lt;p&gt;Also, if you want to use another preprocessor like SASS or Stylus, go right ahead. (The first one is my personal preference) &lt;/p&gt;

&lt;p&gt;In this case, I'll be using this styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.switcher&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;550px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.author-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.125rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#4caf50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.02rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.author-btn&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.author-btn-dimmed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bdbdbd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.0625rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.quotes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fafafa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.quote-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fafafa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.quote-container-hidden&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.quote&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.06rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e0e0e0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.quote-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.quote-author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-javascript"&gt;
  &lt;/a&gt;
  The JavaScript
&lt;/h3&gt;

&lt;p&gt;And now, here comes the fun part. Or I should say the &lt;em&gt;interactive&lt;/em&gt; part.&lt;/p&gt;

&lt;p&gt;It's now time to give it some movin' &amp;amp; groovin' with a bit of JS.&lt;/p&gt;

&lt;p&gt;First, we'll need to get references to the elements that we'll be interacting with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authorsList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.author-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotesList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.quote-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we'll need to add the event listener for when the author button gets clicked. We'll do for all the authors with this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;authorsList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For that &lt;code&gt;handleClick&lt;/code&gt; function, we have to retrieve the value of the index for that particular button. It can be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;showQuote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedQuote&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have that particular index, we'll call a helper function that will do the 'switching' of the selected quote.&lt;/p&gt;

&lt;p&gt;That function &lt;code&gt;showQuote&lt;/code&gt; will basically compare what's is the active quote being displayed and what's the new quote that's going to be displayed. &lt;/p&gt;

&lt;p&gt;For that, we need to keep track of what's our current index. Something like this will do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;quoteIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will go at the start of the file alongside the authors and quotes lists. &lt;/p&gt;

&lt;p&gt;Now, to implement the missing function. Here's what will do the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showQuote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;quoteIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;authorsList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;quoteIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author-btn-dimmed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;quotesList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;quoteIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quote-container-hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;authorsList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author-btn-dimmed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;quotesList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quote-container-hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;quoteIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And what we're doing here is a game of toggling CSS classes with a little animation to get that 'switching' effect. &lt;/p&gt;

&lt;p&gt;And that's in a nutshell everything necessary to make the component work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;p&gt;Ok, with all those pieces in place we can interact with it and see it working. &lt;/p&gt;

&lt;p&gt;We can add more authors and quotes by duplicating the markup for each of those and adding the corresponding text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/juanfrank77/pen/WNjJKOy"&gt;See this codepen&lt;/a&gt; for an example of the component built.&lt;/p&gt;

&lt;p&gt;And like I said before if there are some tweaks and adjustments you want to do to this component, feel free to change it to your heart's content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well, there you have it! A fully functioning quote switching component built entirely with plain ol' vanilla JS and some HTML &amp;amp; CSS. &lt;/p&gt;

&lt;p&gt;It's interesting the kind of dynamic things we can build just by using the technologies of the lean web. &lt;/p&gt;

&lt;p&gt;That is not to say that frameworks are not useful or bad. But knowing how the system behind works without a bunch of abstractions, it gives us a better understanding and allows us to do our job much better. &lt;/p&gt;

&lt;p&gt;Instead of not knowing how things work and depending on the mercy of "whenever the program wants to work properly".&lt;/p&gt;

&lt;p&gt;That's it for this post. As always thanks a lot for reading. If you have any questions or comments send them my way through the &lt;a href="https://twitter.com/juanfrank77"&gt;little blue bird&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@capnsnap"&gt;capnsnap&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/quotes&amp;gt;Unsplash&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;%0A"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create a website using Next.js</title>
      <author>Madushan Perera</author>
      <pubDate>Sun, 01 Aug 2021 17:36:36 +0000</pubDate>
      <link>https://dev.to/mcperera/create-a-website-using-next-js-4e0k</link>
      <guid>https://dev.to/mcperera/create-a-website-using-next-js-4e0k</guid>
      <description>&lt;p&gt;&lt;a href="https://mcperera.com/blog/create-websites-with-Next"&gt;https://mcperera.com/blog/create-websites-with-Next&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Browser and React onChange  event: The conundrum</title>
      <author>Pulkit Kashyap</author>
      <pubDate>Sun, 01 Aug 2021 17:24:20 +0000</pubDate>
      <link>https://dev.to/kpulkit29/browser-and-react-onchange-event-the-conundrum-4ke7</link>
      <guid>https://dev.to/kpulkit29/browser-and-react-onchange-event-the-conundrum-4ke7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Sometimes I think we all are so inclined towards Javascript frameworks or libraries that we don't pay attention to how things work natively. Recently when I was debugging an issue about input tag's &lt;strong&gt;onchange&lt;/strong&gt; event, I was startled when the callback function was not being called on changing the input value. Well, React triggers onChange whenever one changes the input value. Coming from React I just assumed that such things would work the same in vanilla Javascript 😔 😔 . &lt;strong&gt;The way browser fires the onchange event is different.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-onchange"&gt;
  &lt;/a&gt;
  Javascript onchange
&lt;/h3&gt;

&lt;p&gt;Coming from React it's easy to fall into the trap. But let's understand some events the browser fires when one interacts with the input tag&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;onfocus - Fired when the user sets focus on the element&lt;/li&gt;
&lt;li&gt;onblur - Opposite of onfocus. Fired when an element loses focus&lt;/li&gt;
&lt;li&gt;onchange - (the most interesting one 😅). Unlike React, the browser fires onchange event after focus from input element is taken off. So when focus is set on an input element and something is typed, onchange won't be fired until and unless the input element is out of focus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When an element is out of focus, the browser assumes that the user is done making the change(probably the reason why onchange is fired late).&lt;/p&gt;

&lt;p&gt;Let's see this in action. Check out the JS part here and open your console to see what is logged.&lt;br&gt;
&lt;strong&gt;Note that onchange is fired only when input is out of focus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pulkit29/embed/QWvxwrW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#question-for-the-readers"&gt;
  &lt;/a&gt;
  Question for the readers 🧐
&lt;/h3&gt;

&lt;p&gt;I am not too sure as to why in the above example onblur callback is fired after the onchange callback. We know now that onchange is fired when the element is out of focus. Know the reason?? Please comment down below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-onchange"&gt;
  &lt;/a&gt;
  React onChange
&lt;/h3&gt;

&lt;p&gt;Apart from the camel case difference the way React onChange handler works is also pretty different. It gets triggered whenever one makes a change in the input element value.&lt;br&gt;
I tried to create something like React onChange. Let's have a look (not saying that this is how it works exactly).&lt;br&gt;
&lt;iframe src="https://jsfiddle.net/kpulkit29/pg7ew9kv/31//embedded/js,html,result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I had attached my custom onChange callback to the element.&lt;/li&gt;
&lt;li&gt;Using setter/getter to get the previously entered value and compare it with the latest one.&lt;/li&gt;
&lt;li&gt;Additionally attached a keyup event listener to get hold of the latest value&lt;/li&gt;
&lt;li&gt;Notice that the custom onChange handler gets triggered everytime a change is made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bye Bye !! 👋👋 Hope there were takeaways.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/pulkit291/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/kpulkit29"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/kpulkit29"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>html</category>
    </item>
    <item>
      <title>This Tool Will Help You to Look PROFESSIONAL on Twitter 💥</title>
      <author>Souvik Paul</author>
      <pubDate>Sun, 01 Aug 2021 17:00:39 +0000</pubDate>
      <link>https://dev.to/souviktests/this-tool-will-help-you-to-look-professional-on-twitter-1db</link>
      <guid>https://dev.to/souviktests/this-tool-will-help-you-to-look-professional-on-twitter-1db</guid>
      <description>&lt;p&gt;I've recently got to know about this tool that will help you look professional on Twitter. It really creates an impact on how you look on social media. I'm not talking about your photos, I'm talking about your profile customization on Twitter. Your profile picture, banner image, bio everything matters to your audiences. Use this tool for Twitter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCUtWlpJoFin58UEejqEtNLg"&gt;Watch More Videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://blackmagic.so/"&gt;https://blackmagic.so/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There're mainly 2 ways to create a good do &amp;amp; banner image for your Twitter profile. Either you have to go manually, I mean with any of your favourite photo editing software like Photoshop, Canva, Photopea etc. or you can use this tool to get great high-quality, colourful assets for your Twitter. And the best part is, they update everything from the backend. So, you don't have to worry about anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me:
&lt;/h3&gt;

&lt;p&gt;Facebook: &lt;a href="https://fb.com/thesouvikpaul"&gt;https://fb.com/thesouvikpaul&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/thesouvikpaul"&gt;https://twitter.com/thesouvikpaul&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/amisouvikpaul"&gt;https://instagram.com/amisouvikpaul&lt;/a&gt;&lt;br&gt;
FB Page: &lt;a href="https://fb.com/amisouvikpaul"&gt;https://fb.com/amisouvikpaul&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for watching!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>help</category>
    </item>
  </channel>
</rss>
