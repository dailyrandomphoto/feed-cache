<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Firing on all cylinders (Part 2): Understanding Hidden Classes to optimize your JavaScript code</title>
      <author>Austin Burger</author>
      <pubDate>Mon, 17 Jan 2022 19:40:56 +0000</pubDate>
      <link>https://dev.to/about14sheep/firing-on-all-cylinders-part-2-understanding-hidden-classes-to-optimize-your-javascript-code-5di3</link>
      <guid>https://dev.to/about14sheep/firing-on-all-cylinders-part-2-understanding-hidden-classes-to-optimize-your-javascript-code-5di3</guid>
      <description>&lt;p&gt;In the first part of this series we went over the differences between dynamic and non-dynamic languages. We also went over the difference between how the two approach object storage lookup. We discussed the meaning of offset, the displacement integer in memory between an object and its properties. We then looked into how JavaScript interpreters combine all of that through the use of hash tables.&lt;/p&gt;

&lt;p&gt;We left on a cliff hanger. Realizing that the use of hash tables is inefficient, we hinted at the way v8 mitigates this: Hidden Classes.&lt;/p&gt;

&lt;p&gt;In part 2 of this series we learn what hidden classes are, how they work, and how the v8 JavaScript interpreter handles object storage look up efficiently.&lt;/p&gt;

&lt;p&gt;Along the way I will stop at where, I think, the best understanding of the one-liners (mentioned in part 1) can come from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;Although the concepts mentioned here may not be required to get value from this post. If you are confused with the term offset, how hash tables work, or how JavaScript interpreters handle object storage lookup; I encourage you to go back and read part 1 of this series.&lt;/p&gt;

&lt;p&gt;I have always felt that in order to understand a solution you must first understand the problem the solution solves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-hidden-classes"&gt;
  &lt;/a&gt;
  The Rise of Hidden Classes
&lt;/h2&gt;

&lt;p&gt;Hidden Classes are based on the same principles behind the fixed offset mapping in non-dynamic languages (see part 1). The difference is that they are created at runtime, but the outcome is the same. Hidden Classes allow the v8 interpreter to optimize property access time on objects. Hidden Classes are created for each and every object in your program.&lt;/p&gt;

&lt;p&gt;We will go back to our example from part one of the series, the employee constructor function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a simple constructor function for an employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the v8 interpreter reads this code, it first creates a pointer to a location in memory where the call signature for the &lt;code&gt;employee&lt;/code&gt; function is (this 'shell' does not include the properties as we learned in part 1). So you end up with your first hidden class (we can call this HC0):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBD5wYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wunqui77w4758je07vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBD5wYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wunqui77w4758je07vr.png" alt="Hidden Class 0" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, when the interpreter reads the next line (&lt;code&gt;this.salary&lt;/code&gt;) it creates a new hidden class for &lt;code&gt;employee&lt;/code&gt; that includes the offset value for the property &lt;code&gt;this.salary&lt;/code&gt;. It then updates the pointer to now point to this new hidden class. Also, it adds a transition from the first hidden class (HC0) to the new hidden class (HC1):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jENzAEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgam7rdhx35ohonlml0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jENzAEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgam7rdhx35ohonlml0.png" alt="Hidden Class 1" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nest, just like previously, when the interpreter reads the next line (&lt;code&gt;this.position&lt;/code&gt;) it creates a new hidden class (and updates the pointer) for &lt;code&gt;employee&lt;/code&gt; that includes the offset value for the property &lt;code&gt;this.position&lt;/code&gt; &lt;em&gt;along with&lt;/em&gt; the already added offset value for the property &lt;code&gt;this.salary&lt;/code&gt;. It then, also just like previously, adds a new transition from (HC1) to (HC2):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxRj2eLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a839o7pof8c822esqldb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxRj2eLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a839o7pof8c822esqldb.png" alt="Hidden Class 2" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these together in one big happy Harry Potter family tree looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjMnLHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hntn48tgr6byc9lx66a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjMnLHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hntn48tgr6byc9lx66a.png" alt="Hidden Class All" width="736" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this image you can see the final state of the hidden classes and transitions that make up the &lt;code&gt;employee&lt;/code&gt; constructor function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-all-means"&gt;
  &lt;/a&gt;
  What it all means
&lt;/h2&gt;

&lt;p&gt;The transitions between the hidden classes are important. They allow for hidden classes to be shared among similar objects. What this means is that if two objects share a hidden class and you add a new property to both of them, transitions ensure that both of the objects will have the same hidden class.&lt;/p&gt;

&lt;p&gt;This is important because being able to share hidden classes between object is what removes that need to have a hash map with each instance. Instead you have one hidden class, accessed by one quick lookup, shared among all objects of the &lt;code&gt;employee&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Now here's the catch...&lt;/p&gt;

&lt;p&gt;The order in which you add dynamic properties to an object matters. Changing this order between two similar objects creates two different hidden classes, omitting the optimization we just discussed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-on-the-catch"&gt;
  &lt;/a&gt;
  More on the catch
&lt;/h2&gt;

&lt;p&gt;Let's look at what we just discussed in code. We will create two &lt;code&gt;employee&lt;/code&gt; objects and dynamically add some properties to both of them, but we will do it out of order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Instantiate the two employees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;salesEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ceoEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ceo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// add two new properties to salesEmployee&lt;/span&gt;
&lt;span class="nx"&gt;salesEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;salesEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8675309&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// add the same two properties to ceoEmployee but in a different order&lt;/span&gt;
&lt;span class="nx"&gt;ceoEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9087654&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ceoEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks the same, after this is ran you have two employee's with the same structure, all conforming to the &lt;code&gt;employee&lt;/code&gt; constructor function shape. Since the shape of the objects seems identical it seems logical to assume they will share the same hidden class and all the optimization that comes with it... right?&lt;/p&gt;

&lt;p&gt;Nope, as it turns out the v8 interpreter will create two separate hidden classes. One for each, as the offset for the two dynamically added properties will be different. To better explain this i'll use a food analogy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimizing-by-analogy"&gt;
  &lt;/a&gt;
  Optimizing by analogy
&lt;/h2&gt;

&lt;p&gt;Imagine you are cooking a roast. There are many possible ways to cook a roast, however we will limit this discussion to just two. You might use a crock-pot and let it simmer all day pulling it out at the end to flash sear the edges. You might first sear the edges before you leave it to simmer. In both of these scenarios the ingredients are the same, however the technique is different. Both of them result in a delicious dinner, but both of them has their own distinct &lt;em&gt;recipe&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how optimizing hidden classes works in v8. The order in which you dynamically add properties to an object matters. Either way, it is valid JavaScript just like both are valid roasts. Also just like the roasts; although the outcome is the same, the &lt;em&gt;recipe&lt;/em&gt; is different. You have to memorize the two different techniques in cooking, so too does the v8 interpreter have to store (memorize) the two different objects and the offset of their property values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-for-the-oneliner"&gt;
  &lt;/a&gt;
  Now for the one-liner
&lt;/h2&gt;

&lt;p&gt;With a better understanding of hidden classes and the catch with how you apply properties dynamically, I think this one-liner might make more sense:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;always add dynamic properties to an instantiation of a class (object) in the same order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, an even better rule to follow would be to not add properties to objects after instantiation. Even if you don't know what these properties might be, you can instantiate with a &lt;em&gt;placeholder&lt;/em&gt; value like &lt;code&gt;null&lt;/code&gt;. This way, when you add these properties later, they will still share the same hidden classes. The &lt;code&gt;employee&lt;/code&gt; constructor function will perform best when written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a simple constructor function for an employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use TypeScript, you are required to do this. The TypeScript compiler will throw an error if you try and add a property to an object dynamically. This is one of the many reasons &lt;strong&gt;we love TypeScript&lt;/strong&gt;. You could almost say that the TL:DR for this post is "use TypeScript".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Hopefully you now have a better understanding of how hidden classes work in the v8 interpreter and what we mean when we say that one-liner. If nothing else, hopefully you're almost converted to the wonderful ways of TypeScript.&lt;/p&gt;

&lt;p&gt;I had originally thought to add inline caching to this part of the series, however this post is already a long one. No worries though, we can just do a part 3! &lt;/p&gt;

&lt;p&gt;Thank you for reading and if you have any questions don't hesitate to leave a comment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://engineering.linecorp.com/en/blog/v8-hidden-class/"&gt;Blog: Hidden Classes in v8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html"&gt;Another Blog on Hidden Classes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v8.dev/blog"&gt;The official v8 engine blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Offset_%28computer_science%29"&gt;Wikipedia article on Offset&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>performance</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building GitHub Apps with Golang</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 17 Jan 2022 19:11:57 +0000</pubDate>
      <link>https://dev.to/martinheinz/building-github-apps-with-golang-3ljo</link>
      <guid>https://dev.to/martinheinz/building-github-apps-with-golang-3ljo</guid>
      <description>&lt;p&gt;If you're using GitHub as your version control system of choice then GitHub Apps can be incredibly useful for many tasks including building CI/CD, managing repositories, querying statistical data and much more. In this article we will walk through the process of building such an app in Go including setting up the GitHub integration, authenticating with GitHub, listening to webhooks, querying GitHub API and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR: All the code used in this article is available at &lt;a href="https://github.com/MartinHeinz/go-github-app"&gt;https://github.com/MartinHeinz/go-github-app&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-integration-type"&gt;
  &lt;/a&gt;
  Choosing Integration Type
&lt;/h2&gt;

&lt;p&gt;Before we jump into building the app, we first need to decide which type of integration we want to use. GitHub provides 3 options - &lt;em&gt;Personal Access Tokens&lt;/em&gt;, &lt;em&gt;GitHub Apps&lt;/em&gt; and &lt;em&gt;OAuth Apps&lt;/em&gt;. Each of these 3 have their pros and cons, so here are some basic things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Personal Access Token&lt;/em&gt; is the simplest form of authentication and is suitable if you only need to authenticate with GitHub as &lt;em&gt;yourself&lt;/em&gt;. If you need to act on behalf of other users, then this won't be good enough&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;GitHub Apps&lt;/em&gt; are the preferred way of developing GitHub integrations. They can be installed by individual users as well as whole organizations. They can listen to events from GitHub via webhooks as well as access the API when needed. They're quite powerful, but even if you request all the permissions available, you won't be able to use them to perform all the actions that a user can.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;OAuth Apps&lt;/em&gt; use OAuth2 to authenticate with GitHub on behalf of user. This means that they can perform any action that user can. This might seem like the best option, but the permissions don't provide the same granularity as GitHub Apps, and it's also more difficult to set up because of OAuth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're not sure what to choose, then you can also take a look at &lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#determining-which-integration-to-build"&gt;diagram in docs&lt;/a&gt; which might help you decide. In this article we will use GitHub App as it's very versatile integration and best option for most use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;Before we start writing any code, we need to create and configure the GitHub App integration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As a prerequisite, we need a tunnel which we will use to deliver GitHub webhooks from internet to our locally running application. You will need to install &lt;em&gt;localtunnel&lt;/em&gt; tool with &lt;code&gt;npm install -g localtunnel&lt;/code&gt; and start forwarding to your localhost using &lt;code&gt;lt --port 8080&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we need to go to &lt;a href="https://github.com/settings/apps/new"&gt;https://github.com/settings/apps/new&lt;/a&gt; to configure the integration. Fill the fields as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Homepage URL&lt;/em&gt;: Your &lt;em&gt;localtunnel&lt;/em&gt; URL&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Webhook URL&lt;/em&gt;: &lt;code&gt;https://&amp;lt;LOCALTUNNEL_URL&amp;gt;/api/v1/github/payload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Webhook secret&lt;/em&gt;: any secret you want (and save it)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Repository Permissions&lt;/em&gt;: Contents, Metadata (Read-only)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Subscribe to events&lt;/em&gt;: Push, Release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After creating the app, you will be presented with the settings page of the integration. Take note of &lt;em&gt;App ID&lt;/em&gt;, generate a private key and download it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next you will also need to install the app to use it with your GitHub account. Go to &lt;em&gt;Install App&lt;/em&gt; tab and install it into your account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also need &lt;em&gt;installation ID&lt;/em&gt;, which we can find by going to &lt;em&gt;Advanced&lt;/em&gt; tab and clicking on latest delivery in the list, take a note of installation ID from request payload, it should be located in &lt;code&gt;{ "installation": { "id": &amp;lt;...&amp;gt;} }&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you've got lost somewhere along the way, refer to the guide &lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/setting-up-your-development-environment-to-create-a-github-app"&gt;GitHub docs&lt;/a&gt; which shows where you can find each of the values.&lt;/p&gt;

&lt;p&gt;With that done, we have the integration configured and all the important values saved. Before we start receiving events and making API requests we need to get the Go server up and running, so let's start coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the App
&lt;/h2&gt;

&lt;p&gt;To build the Go application, we will use the template I prepared in &lt;a href="https://github.com/MartinHeinz/go-github-app"&gt;https://github.com/MartinHeinz/go-github-app&lt;/a&gt;. This application is ready to be used as GitHub app and all that's missing in it, are a couple of variables which we saved during setup in previous section. The repository contains convenience script which you can use to populate all the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:MartinHeinz/go-github-app.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;go-github-app
./configure_project.sh &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;APP_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"54321"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;INSTALLATION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"987654321"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;WEBHOOK_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"verysecret"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;KEY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"./github_key.pem"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;REGISTRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ghcr.io/&amp;lt;GITHUB_USERNAME&amp;gt;/go-github-app"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following sections will walk you through the code but if you're inpatient, then the app is good to go. You can use &lt;code&gt;make build&lt;/code&gt; to build a binary of the application or &lt;code&gt;make container&lt;/code&gt; to create a containerized version of it.&lt;/p&gt;

&lt;p&gt;First part of the code we need to tackle is authentication. It's done using &lt;code&gt;ghinstallation&lt;/code&gt; package as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;InitGitHubClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultTransport&lt;/span&gt;
    &lt;span class="n"&gt;itr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ghinstallation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewKeyFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;123456789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/config/github-app.pem"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Transport&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itr&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function, which is invoked from &lt;code&gt;main.go&lt;/code&gt; during &lt;em&gt;Gin&lt;/em&gt; server start-up, takes App ID, Installation ID and private key to create a GitHub client which is then stored in global config in &lt;code&gt;config.Config.GitHubClient&lt;/code&gt;. We will use this client to talk to the GitHub API later.&lt;/p&gt;

&lt;p&gt;Along with the GitHub client, we also need to set up server routes so that we can receive payloads:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/payload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;webhooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/pullrequests/:owner/:repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/pullrequests/:owner/:repo/:page"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPullRequestsPaginated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitGitHubClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":%v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerPort&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of these is the payload path at &lt;code&gt;http://.../api/v1/github/payload&lt;/code&gt; which we used during GitHub integration setup. This path is associated with &lt;code&gt;webhooks.ConsumeEvent&lt;/code&gt; function which will receive all the events from GitHub.&lt;/p&gt;

&lt;p&gt;For security reasons, the first thing the &lt;code&gt;webhooks.ConsumeEvent&lt;/code&gt; function does is verify request signature to make sure that GitHub is really the service that generated the event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;VerifySignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubWebhookSecret&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;computedSignature&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"sha256="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EncodeToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"computed signature: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;computedSignature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;computedSignature&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;VerifySignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X-Hub-Signature-256"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signatures don't match"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It performs the verification by computing a HMAC digest of payload using webhook secret as a key, which is then compared with the value in &lt;code&gt;X-Hub-Signature-256&lt;/code&gt; header of a request. If the signatures match then we can proceed to consuming the individual events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X-GitHub-Event"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;Events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"consuming event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;EventPayload&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Consumers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't consume event %s, error: %+v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c"&gt;// We're responding to GitHub API, we really just want to say "OK" or "not OK"&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatusJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"reason"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"consumed event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNoContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unsupported event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatusJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotImplemented&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"reason"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Unsupported event: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we extract the event type from &lt;code&gt;X-GitHub-Event&lt;/code&gt; header and iterate through a list of events that our app supports. In this case those are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt;     &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"installation"&lt;/span&gt;
    &lt;span class="n"&gt;Ping&lt;/span&gt;        &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ping"&lt;/span&gt;
    &lt;span class="n"&gt;Push&lt;/span&gt;        &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"push"&lt;/span&gt;
    &lt;span class="n"&gt;PullRequest&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pull_request"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the event name matches one of the options we proceed with loading the JSON payload into a &lt;code&gt;EventPayload&lt;/code&gt; struct, which is defined in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/webhooks/models.go"&gt;&lt;code&gt;cmd/app/webhook/models.go&lt;/code&gt;&lt;/a&gt;. It's just a struct generated using &lt;a href="https://mholt.github.io/json-to-go/"&gt;https://mholt.github.io/json-to-go/&lt;/a&gt; with unnecessary fields stripped.&lt;/p&gt;

&lt;p&gt;That payload is then sent to function that handles the respective event type, which is one of the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Consumers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;consumeInstallEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;consumePingEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;consumePushEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consumePullRequestEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example for &lt;em&gt;push&lt;/em&gt; event one can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;consumePushEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="n"&gt;EventPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Process event ...&lt;/span&gt;
    &lt;span class="c"&gt;// Insert data into database ...&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received push from %s, by user %s, on branch %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pusher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Enumerating commits&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Commits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pushed commits: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That being in this case - checking the receiving repository and branch and enumerating the commits contained in this single push. This is the place where you could for example insert the data into database or send some notification regarding the event. &lt;/p&gt;

&lt;p&gt;Now we have the code ready, but how do we test it? To do so, we will use the tunnel which you already should have running, assuming you followed the steps in previous sections.&lt;/p&gt;

&lt;p&gt;Additionally, we also need to spin up the server, you can do that by running &lt;code&gt;make container&lt;/code&gt; to build the containerized application, followed by &lt;code&gt;make run&lt;/code&gt; which will start the container that listens on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can simply push to one of your repositories and you should see a similar output in the server logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;GIN] 2022/01/02 - 14:44:10 | 204 |     696.813µs |   123.82.234.90 | POST     &lt;span class="s2"&gt;"/api/v1/github/payload"&lt;/span&gt;
2022/01/02 14:44:10 Received push from MartinHeinz/some-repo, by user MartinHeinz, on branch refs/heads/master
2022/01/02 14:44:10 Pushed commits: &lt;span class="o"&gt;[&lt;/span&gt;9024da76ec611e60a8dc833eaa6bca7b005bb029]
2022/01/02 14:44:10 consumed event: push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid having to push dummy changes to repositories all the time, you can redeliver payloads from &lt;em&gt;Advanced&lt;/em&gt; tab in your GitHub App configuration. On this tab you will find a list of previous requests, just choose one and hit the &lt;em&gt;Redeliver&lt;/em&gt; button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-api-calls"&gt;
  &lt;/a&gt;
  Making API Calls
&lt;/h2&gt;

&lt;p&gt;GitHub apps are centered around webhooks to which you can subscribe and listen to, but you can also use any of the GitHub REST/GraphQL API endpoints assuming you requested the necessary permissions. Using API rather than push events is useful - for example - when creating files, analyzing bulk data or querying data which cannot be received from webhooks.&lt;/p&gt;

&lt;p&gt;For demonstration of how to do so, we will retrieve pull requests of specified repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"repo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pullRequests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequestListOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;pullRequests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pullRequestTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"pull_requests"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes 2 arguments - &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;repo&lt;/code&gt; - which get passed to &lt;code&gt;PullRequests.List(...)&lt;/code&gt; function of GitHub client instance. Along with that, we also provide &lt;code&gt;PullRequestListOptions&lt;/code&gt; struct to specify that we're only interested in pull requests with state set to &lt;code&gt;open&lt;/code&gt;. We then iterate over returned PRs and accumulate all their titles which we return in response.&lt;/p&gt;

&lt;p&gt;The above function resides on &lt;code&gt;.../api/v1/github/pullrequests/:owner/:repo&lt;/code&gt; path as specified in &lt;code&gt;main.go&lt;/code&gt; so we can query it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:8080/api/v1/github/pullrequests/octocat/hello-world | jq &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It might not be ideal to query API as shown above in situations where we expect a lot of data to be returned. In those cases we can utilize &lt;em&gt;paging&lt;/em&gt; to avoid hitting rate limits. A function called &lt;code&gt;GetPullRequestsPaginated&lt;/code&gt; that performs the same task as &lt;code&gt;GetPullRequests&lt;/code&gt; with addition of &lt;code&gt;page&lt;/code&gt; argument for specifying page size can be found in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/apis/github.go"&gt;&lt;code&gt;cmd/app/apis/github.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing Tests
&lt;/h2&gt;

&lt;p&gt;So far we've been testing the app with &lt;em&gt;localtunnel&lt;/em&gt;, which is nice for quick ad-hoc tests against live API, but it doesn't replace proper unit tests. To write unit tests for this app, we need to mock-out the API to avoid being dependent on the external service. To do so, we can use &lt;a href="https://github.com/migueleliasweb/go-github-mock"&gt;&lt;code&gt;go-github-mock&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGithubGetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;expectedTitles&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PR number one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PR number three"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"PR number two"&lt;/span&gt;
    &lt;span class="n"&gt;mockedHTTPClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMockedHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithRequestMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetReposPullsByOwnerByRepo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"closed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockedHTTPClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;

    &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRecorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"octocat"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello-world"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test starts by defining mock client which will be used in place of normal GitHub client. We give it list of pull request which will be returned when &lt;code&gt;PullRequests.List&lt;/code&gt; is called. We then create test context with arguments that we want to pass to the function under test, and we invoke the function. Finally, we read the response body and assert that only PRs with &lt;code&gt;open&lt;/code&gt; state were returned. &lt;/p&gt;

&lt;p&gt;For more tests, see the full &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/apis/github_test.go"&gt;source code&lt;/a&gt; which includes examples of tests for pagination as well as handling of errors coming from GitHub API.&lt;/p&gt;

&lt;p&gt;When it comes to testing our webhook methods, we don't need to use a mock client, because we're dealing with basic API requests. Example of such tests including generic API testing setup can be found in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/webhooks/webhook_test.go"&gt;&lt;code&gt;cmd/app/webhooks/github_test.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article I tried to give you a quick tour of both GitHub apps, as well as the &lt;a href="https://github.com/MartinHeinz/go-github-app/"&gt;GitHub repository&lt;/a&gt; containing the sample Go GitHub project. In both cases, I didn't cover everything, the Go client package has much more to offer and to see all the actions you can perform with it, I recommend skimming through the &lt;a href="https://pkg.go.dev/github.com/google/go-github/v41/github#pkg-index"&gt;docs index&lt;/a&gt; as well as looking at the source code itself where GitHub API links are listed along each function. For example, like the earlier shown &lt;code&gt;PullRequests.List&lt;/code&gt; &lt;a href="https://github.com/google/go-github/blob/master/github/pulls.go#L147"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the repository, there are couple more things you might want to take a look at, including Makefile targets, &lt;a href="https://github.com/MartinHeinz/go-github-app/tree/master/.github/workflows"&gt;CI/CD&lt;/a&gt; or additional tests. If you have any feedback or suggestions, feel free to create an issue or just star it if it was helpful to you. 🙂&lt;/p&gt;

</description>
      <category>go</category>
      <category>github</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 5 websites to learn just about anything</title>
      <author>Kalob Taulien</author>
      <pubDate>Mon, 17 Jan 2022 19:03:07 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/top-5-websites-to-learn-just-about-anything-584a</link>
      <guid>https://dev.to/kalobtaulien/top-5-websites-to-learn-just-about-anything-584a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#top-5-websites-to-learn-just-about%C2%A0anything"&gt;
  &lt;/a&gt;
  Top 5 websites to learn just about anything
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Learning shouldn't stop after high school or college.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whether you're looking to change careers or just learn something new to fight your boredom, there are a lot of great online platforms that can help you learn new and exciting subjects.&lt;/p&gt;

&lt;p&gt;In this article I'm listing the top 5 learning websites and have broken them down into categories.&lt;/p&gt;

&lt;p&gt;Best Selection: Udemy&lt;br&gt;
Best Price: Arbington&lt;br&gt;
Best Celebrity: Masterclass&lt;br&gt;
Best University Courses: Coursera&lt;br&gt;
Best Short Creatives: Skillshare&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#udemy"&gt;
  &lt;/a&gt;
  Udemy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/"&gt;https://www.udemy.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Udemy is a super popular learning website that says they have over 150,000 courses to choose from. That's why they've earned the "best selection" title in this article.&lt;br&gt;
Now, I did an audit, and found that over 50,000 classes don't even have one student. So take that 150k with a grain of salt.&lt;/p&gt;

&lt;p&gt;But you'll still find tonnes of high end teachers and courses, ranging from Angela Yu to Colte Steele and Kalob Taulien (that's me!).&lt;/p&gt;

&lt;p&gt;Classes range in price from $20-$200, but frankly not a single person on the web has bought a course from Udemy for $200 in the last 5 years. Don't be fooled by the higher prices, this is just a marketing tactic to make you feel like you're getting a better deal - it's called price anchoring, and it makes Udemy feel like Groupon.&lt;/p&gt;

&lt;p&gt;Udemy will discount their courses down to $10-$15 every couple of weeks so just wait for that deal or lookup coupon codes by Googling "Udemy Coupon"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can learn just about anything on Udemy&lt;/li&gt;
&lt;li&gt;It's quite affordable if you just take a handful of courses&lt;/li&gt;
&lt;li&gt;30 day money back guarantee on every class&lt;/li&gt;
&lt;li&gt;Certificates included&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Must buy individual classes and their pricing seems like a scheme&lt;/li&gt;
&lt;li&gt;Incredibly toxic for the teachers&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#arbington"&gt;
  &lt;/a&gt;
  Arbington
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://arbington.com/"&gt;https://arbington.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arbington.com is a new learning platform that has nearly 2,000 classes for a great price (if you subscribe).&lt;br&gt;
They have hundreds of courses ranging from coding and design to watercolor painting, business growth and much more.&lt;/p&gt;

&lt;p&gt;The quality from what I could see was mostly great, too, we were pleased to see they have a standard for quality.&lt;/p&gt;

&lt;p&gt;By the looks of it plenty of top teachers from other platforms that I recognized have started moving over to Arbington. So that's a good sign.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Are you interested in learning how to code?&lt;/strong&gt; Arbington.com is the best place for this. $15/month gives you access to over 200 web development courses. If this were Udemy, that would cost over $2,000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Classes are all priced at $19.97 so you always know what you're going to be paying for, which is a tad higher than Udemy's discounted prices. But there's also a subscription plan for $15/month that gets you access to every course.&lt;br&gt;
Overall, Arbington earned the best price award in this article for having the best price with the best quality and selection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;They include a subscription for $15/month to access over 1700 classes with a 14 day free trial&lt;/li&gt;
&lt;li&gt;Classes can be individually purchased with a 30 day money back guarantee&lt;/li&gt;
&lt;li&gt;It's very affordable&lt;/li&gt;
&lt;li&gt;Certificates included&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can subscribe OR buy individual classes which feels a bit confusing at first&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#skillshare"&gt;
  &lt;/a&gt;
  Skillshare
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.skillshare.com/"&gt;https://www.skillshare.com/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Skillshare has the best short creative classes. If you're looking for a tonne of painting, drawing or doodling classes this is the platform for you.&lt;/p&gt;

&lt;p&gt;They say they have over 27,000 classes however a quick audit showed us that's not the real number, it's closer to 19,000. But still, that's A LOT of content and that's why they've earned the Best Short Creative award in this article. They are well known for their super short courses (as short as 10 minutes) so you can power through a dozen classes in a single day if you wanted to.&lt;/p&gt;

&lt;p&gt;They are completely subscription based so you can watch as many classes as you want.&lt;/p&gt;

&lt;p&gt;The quality is pretty good too! Makes sense since artistic people love creating high quality content.&lt;/p&gt;

&lt;p&gt;However they seem to promote their famous teachers more and more, making them feel more like MasterClass and less like a supportive community of creatives. And they have hundreds of "staff picks" which tells us they favor certain teachers and rank others lower, which feels a bit unfair in a marketplace.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Huge selection of courses&lt;/li&gt;
&lt;li&gt;Affordable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pricing seems to change based on the country you're in&lt;/li&gt;
&lt;li&gt;They'll randomly delete thousands of courses which could include a class that you enrolled in and are enjoying&lt;/li&gt;
&lt;li&gt;Support is non-existent&lt;/li&gt;
&lt;li&gt;No certificates&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#coursera"&gt;
  &lt;/a&gt;
  Coursera
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.coursera.org/"&gt;https://www.coursera.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for university classes to take online, Coursera is the place for you! It's a bit pricier than other learning websites, but you're also getting top-notch education from university teachers.&lt;/p&gt;

&lt;p&gt;There's A LOT to learn, and the classes are all amazing. I've taken a number of classes from Coursera and was never unhappy about it. And was even happy to buy the certificate at the end.&lt;/p&gt;

&lt;p&gt;If you're looking for university credits, however, check out Outlier.org - I haven't tried Outlier but they look truly amazing.&lt;/p&gt;

&lt;p&gt;Most courses come in the form of a cohort, so you start and end on certain dates (not self-paced). Usually that's a good thing, but the courses I've taken never felt like there was a real community or cohort - just deadlines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Highest quality education on the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Less affordable but it's a fair tradeoff for the quality of content you're buying&lt;/li&gt;
&lt;li&gt;If you want a certificate you must pay for it&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#masterclass"&gt;
  &lt;/a&gt;
  MasterClass
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.masterclass.com/"&gt;https://www.masterclass.com/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;MasterClass is in a category of its own. I call it "edutainment" - short for education/entertainment.&lt;/p&gt;

&lt;p&gt;You'll be learning from famous people. From cooking to guitar playing and film making. You can even learn from Bill Clinton now!&lt;/p&gt;

&lt;p&gt;The videos you'll be watching are expertly crafted as if HBO were producing them.&lt;/p&gt;

&lt;p&gt;What's cool is you get to spend time with someone who is famous, and possibly someone you look up to.&lt;/p&gt;

&lt;p&gt;Starting at $20/month (and going as high as $30/month) you get access to quite a few classes. It's not thousands of classes, but you'll still be impressed with their selection and the instructors you get to work with.&lt;/p&gt;

&lt;p&gt;Classes are short, though, being roughly 4 hours long. If you're learning something hard, like guitar from Tom Morello, 4 hours won't feel like enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Learn from people who actually DO it and have made it&lt;/li&gt;
&lt;li&gt;Affordable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The classes are shorter than expected&lt;/li&gt;
&lt;li&gt;No certificates&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Depending on what you're looking for, there's a type of learning website for you.&lt;/p&gt;

&lt;p&gt;If you're looking to get the best bang for your buck, &lt;a href="https://arbington.com/"&gt;Arbington.com&lt;/a&gt; is the way to go. If you want ultra high quality education then &lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt; is definitely the best route. And if you want a hybrid of education and entertainment, &lt;a href="https://www.masterclass.com/"&gt;MasterClass&lt;/a&gt; is probably what you're looking for.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Add bookmark links to your blog to make it easy to reference</title>
      <author>Rob OLeary</author>
      <pubDate>Mon, 17 Jan 2022 18:40:33 +0000</pubDate>
      <link>https://dev.to/robole/add-bookmark-links-to-your-headings-to-make-your-blog-easy-to-reference-2dm7</link>
      <guid>https://dev.to/robole/add-bookmark-links-to-your-headings-to-make-your-blog-easy-to-reference-2dm7</guid>
      <description>&lt;p&gt;It is kind of an informal industry standard to have a bookmark link in the headings of a page. The link text is typically a link icon (🔗) or a hash symbol (#). The idea is that you can click this link and get an URL that points to that section of the page. It is a bit odd to click a link, have the page scroll down to the section exactly, and then copy the link from the address bar to share it with others. But that is what is done usually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcUxGMGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj93l0r7au0sllwmaxg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcUxGMGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj93l0r7au0sllwmaxg.gif" alt="demonstration of clicking on bookmark link" width="590" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how some websites have implemented the links in figure 1-0 below. GitHub only shows the link when you hover on the heading. CSS Tricks and Smashing Magazine always show the link, however the link text has a lower color contrast ratio than the rest of the text, but when you hover over it, it gets brighter. GitHub and CSS Tricks place the link at the very beginning of the heading, Smashing Magazine places it right at the end of the heading. Variations on the theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uITxt3Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcpqgr8bolb3gidpdf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uITxt3Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcpqgr8bolb3gidpdf2.png" alt="simple cover image featuring a copy content icon" width="781" height="694"&gt;&lt;/a&gt;&lt;/p&gt;
Figure 1-0. Examples of bookmark links from around the web (GitHub, CSS Tricks, Smashing Magazine)



&lt;p&gt;Today, I will show you how you can write some code to add these links to a page. And I will offer an alternative version, why not just add a button that will copy the URL to the system clipboard for you?&lt;/p&gt;

&lt;p&gt;And now, there is a web specification that adds some &lt;a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment"&gt;query powers to text fragments&lt;/a&gt;, so you can reference &lt;em&gt;any&lt;/em&gt; part of a webpage in an URL, and you don't have to rely on the page-author to do anything for you!&lt;/p&gt;

&lt;p&gt;Let's explore these options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-standard-way-a-bookmark-link"&gt;
  &lt;/a&gt;
  The "standard" way - a bookmark link
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/rNGRLvW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. Codepen runs code in a &lt;code&gt;iframe&lt;/code&gt;, so the bookmark links don't point to a valid external URL. If you run the same code in a page, the links are perfectly valid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To create a bookmark, we add an unique ID to an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"my-bookmark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How to create a bookmark&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that there are a &lt;a href="https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html"&gt;few rules&lt;/a&gt; for a valid ID name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it must contain at least one character,&lt;/li&gt;
&lt;li&gt;it cannot start with a number, and&lt;/li&gt;
&lt;li&gt;must not contain whitespaces (spaces, tabs, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a link to that heading, the URL must contain a text fragment that matches our ID. A text fragment is specified by a hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#my-bookmark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Jump to the heading&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example is only valid within the same page. You must use an absolute URL if you want to share it with others e.g. &lt;a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html/#my-bookmark"&gt;https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html/#my-bookmark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, to create bookmark links for all of our headings, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add unique IDs to all of our headings except &lt;code&gt;h1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Insert a link into these headings, set the &lt;code&gt;href&lt;/code&gt; to an absolute URL that includes the ID as a text fragment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's write the code then!&lt;/p&gt;

&lt;p&gt;We can get all of our headings with &lt;code&gt;document.querySelectorAll("h2, h3, h4, h5, h6")&lt;/code&gt;. We want to loop through each of these headings and add an &lt;code&gt;id&lt;/code&gt;. We must come up with a way to create an unique ID for each heading, a common way to do this is to use the text of the heading to generate a "slug" (that's what the cool kids call it). We will discuss the &lt;code&gt;slugify&lt;/code&gt; function in more detail below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A slug is a human-readable, unique identifier, used to identify a resource instead of a less human-readable identifier like an id. You use a slug when you want to refer to an item while preserving the ability to see, at a glance, what the item is.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://itnext.io/whats-a-slug-f7e74b6c23e0"&gt;What’s a slug and why would I use one? by Dave Sag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For each heading, we must create an anchor element (&lt;code&gt;a&lt;/code&gt;) and set its &lt;code&gt;href&lt;/code&gt; attribute to the current URL plus the slug as a text fragment. We use the global object &lt;code&gt;window.location&lt;/code&gt; to get the page's URL info. We build our own URL from the pieces rather than use &lt;code&gt;window.location.href&lt;/code&gt;. We do this because &lt;code&gt;window.location.href&lt;/code&gt; includes the text fragment, if someone were to follow a link with a text fragment to the page and we used &lt;code&gt;window.location.href&lt;/code&gt; in our code, we would create a bookmark link with 2 text fragments. Not the outcome we want! Once the link is created correctly, we append it to the heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2, h3, h4, h5, h6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// we construct this URL ourselves to exclude the text fragment&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;//&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;slugify&lt;/code&gt; function, we want to generate a slug that has no whitespace, and does not have any unwanted punctuation characters. While all punctuation characters are allowed in an &lt;code&gt;id&lt;/code&gt; name, it is common practice to only include hyphens and underscores, probably for the sake of readability. We can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;regular expression (regex)&lt;/a&gt; in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"&gt;replace() function&lt;/a&gt; to remove the unwanted charcters, and replace any spaces with hyphens. I will use something similar to GitHub's algorithm, which uses a weird-looking regex, but no doubt it has been battle-tested by now!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Everything except our "safe" characters&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PUNCTUATION_REGEXP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\p&lt;/span&gt;&lt;span class="sr"&gt;{L}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{M}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{N}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{Pc}&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/gu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PUNCTUATION_REGEXP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a literal description of the &lt;code&gt;PUNCTUATION_REGEXP&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;" Globally match a single character not present in the list below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;\p{L}&lt;/em&gt;: any kind of letter from any language,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{M}&lt;/em&gt;: a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.),&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{N}&lt;/em&gt;: any kind of numeric character in any script,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{Pc}&lt;/em&gt;: a punctuation character such as an underscore that connects words,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\-&lt;/em&gt;: a hyphen,&lt;/li&gt;
&lt;li&gt;and an empty space (which we replace later)."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use the regex to remove anything that is not in our "character safe list". When you use a regex which contains &lt;a href="https://javascript.info/regexp-unicode#unicode-properties-p"&gt;unicode properties&lt;/a&gt;, any expression in the form of &lt;code&gt;\p{}&lt;/code&gt;, you must use the &lt;code&gt;/u&lt;/code&gt; flag also. We do a second replacement to replace spaces with a hyphen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-alternative-way-a-copy-bookmark-link-to-clipboard-button"&gt;
  &lt;/a&gt;
  An alternative way - a "copy bookmark link to clipboard" button
&lt;/h2&gt;

&lt;p&gt;My proposed alternative is to use a button instead of a link. The button copies the bookmark URL to the system clipboard. A &lt;a href="https://material.io/components/snackbars"&gt;snackbar message&lt;/a&gt; informs the user that the URL has been copied to the clipboard. I think this is a more convenient way of doings things.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/JjrzLLJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. Codepen runs code in a &lt;code&gt;iframe&lt;/code&gt;, so the bookmark links don't point to a valid external URL. If you run the same code in a page, the links are perfectly valid.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-href&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;showSnackbar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can asynchronously write to the system clipboard through the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"&gt;Clipboard API&lt;/a&gt;, using the &lt;code&gt;writeText()&lt;/code&gt; function. The &lt;a href="https://caniuse.com/async-clipboard"&gt;browser support is excellent (for writing to the clipboard)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We show a snackbar message when the button is pressed. We use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API"&gt;Web Animations API&lt;/a&gt; to fade in and move the snackbar further into view. The Web Animations API is a cleaner of way of running a once-off animation, the alternative is to add a class that has an associated CSS animation, and then remove it via &lt;code&gt;setTimeout()&lt;/code&gt; a few seconds later. You can see the function &lt;code&gt;showSnackbar()&lt;/code&gt; for the details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-fragment-directive-specification"&gt;
  &lt;/a&gt;
  Text fragment directive specification
&lt;/h2&gt;

&lt;p&gt;Text fragments &lt;a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment"&gt;can now include a text query&lt;/a&gt;. Upon clicking a link with a text query, the browser finds that text in the webpage, scrolls it into view, and highlights the matched text. This enables links to specify which portion of the page is being linked to, without relying on the page-author annotating the page with ID attributes.&lt;/p&gt;

&lt;p&gt;The fragment format is: &lt;code&gt;#:~:text=\[prefix-,]textStart[,textEnd\][,-suffix]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In its simplest form, the syntax is as follows: The hash symbol &lt;code&gt;#&lt;/code&gt; followed by :&lt;code&gt;~:text=&lt;/code&gt; and finally &lt;code&gt;textStart&lt;/code&gt;, which is the percent-encoded text I want to link to. Here is a simple example you can test in your browser to take you to the text "how do we get the text of the code element" from my last article:&lt;br&gt;
&lt;a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html#:%7E:text=how%20do%20we%20get%20the%20text%20of%20the%20code%20element?"&gt;https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html#:~:text=how%20do%20we%20get%20the%20text%20of%20the%20code%20element?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---l-4XUxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u86romqroo6evccc49nz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---l-4XUxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u86romqroo6evccc49nz.jpg" alt="navigating to an URL with a text fragment showing the highlighted text in the body of the webpage" width="800" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out the article, &lt;a href="https://web.dev/text-fragments/#text-fragments"&gt;Boldly link where no one has linked before: Text Fragments&lt;/a&gt;, for further explanation and examples.&lt;/p&gt;

&lt;p&gt;At the moment, &lt;a href="https://caniuse.com/url-scroll-to-text-fragment"&gt;this feature is only available in Edge and Chrome&lt;/a&gt;. It is still early days, but I think this should be something that we start to use wholesale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word
&lt;/h2&gt;

&lt;p&gt;Having the ability to cross-reference specific parts of other webpages is an often overlooked feature of the web that is of great benefit to readers. You are saving a reader from foraging through a page to find the right section themselves - maybe they want to read more of the passage of text, or maybe they want to verify the source of a quotation. &lt;/p&gt;

&lt;p&gt;It does seem strange that we are still adding links to headings if the purpose is to provide someone with an URL to a section of a page. Why not add a button that will copy it to the clipboard instead, like I demonstrated? Or is there something am I missing? If there is, fill me in!&lt;/p&gt;

&lt;p&gt;I hope that more browsers implement the text fragment directive soon. It would be great to break the dependence of the reader on the page-author to add IDs to headings to enable referencing of sections. And along with that, it would be great if the awareness of this feature grew too, so that people would start using it regularly. I hope this article will go a little way to raising awareness!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The importance of using Server-Side Rendering with Next.JS</title>
      <author>Ramon Pereira</author>
      <pubDate>Mon, 17 Jan 2022 18:30:34 +0000</pubDate>
      <link>https://dev.to/ramonpereira88/the-importance-of-using-server-side-rendering-with-nextjs-16h</link>
      <guid>https://dev.to/ramonpereira88/the-importance-of-using-server-side-rendering-with-nextjs-16h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Server-Side Rendering (SSR) is a resource provided by Next.JS meaning that for each request made by the user, a server-side HTML will be generated and that content will be pre-rendered. So when a request for a specific page is made, the process of building that page done by the browser will be faster. This set of steps of requesting content from the database, building the page by the browsers and delivering it to the client is Client-Side Rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the advantages of using Server-Side Rendering with Next.JS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main advantages are: the faster response in page loading, the SEO (Search Engine Optimization) and the Web Crawlers that are the bots responsible for improving the indexing in the search engines of browsers such as Google, Bing, thus providing a better experience for the user who will have less waiting time and your page or site will probably appear at the top of searches.&lt;/p&gt;

&lt;p&gt;Please have in mind that Next.JS also offers SSG (Static Site Generation) which is more recommended for smaller projects and that will not have that many components, which require so many specific requests to serve them, this can affect the performance of your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does the SSR happen?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using a function called getServerSideProps() by convention, Next.JS will understand that by using the above name in the function, server-side rendering should and will happen. The data of the function is passed via props that can be consumed in the function below in the same JS or JSX file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blbfHKOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj8m3p9hoews4fpl2so0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blbfHKOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj8m3p9hoews4fpl2so0.png" alt="Snippet of code showing how to implement Server-Side Rendering in Next.JS" width="880" height="681"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The content generated by the code above:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uZr1QlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njhx8mpveur6ut4sig54.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uZr1QlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njhx8mpveur6ut4sig54.JPG" alt="Result in the browser of the code above showing Server-Side Rendering in action" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terminal in VSCode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUg_X6zN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glkf5xtos3gg9wzz6g3v.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUg_X6zN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glkf5xtos3gg9wzz6g3v.JPG" alt="VSCode terminal showing Server-Side Rendering in the console" width="880" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Search Engine Optimization (SEO)?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking into account that this is the main reason for using Server-Side Rendering with Next.JS, what is this Search Engine Optimization (SEO)? Well, that is a set of good practices that, if executed, make your page or WEB application better indexed in Google, Bing or other search engines, and that might lift your page or application to be in the first options to be shown for the user that makes the search for some content. The better structured, semantically organized with the correct tags, meta tags, titles, sections, alt attributes and ARIA (Accessible Rich Internet Applications) and that will provide a better experience when the subject is accessibility. The better your page is structured the better it will be evaluated by these browser search engines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lighthouse: How do I know if my page or site indexing is good?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lighthouse is a tool developed by Google that analyzes web pages and applications providing metrics on performance, best practices, accessibility, SEO or if the application or page is a PWA (Progressive Web App) and even simulates a desktop and mobile application. It’s worth checking out the results. You can find Lighthouse in Chrome Dev Tools under one of the tabs, but not just in Google Chrome, in many browsers based on Google Chrome. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nK9Fipkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m5kk7ts7swkgod3szu7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK9Fipkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m5kk7ts7swkgod3szu7.JPG" alt="Image showing Lighthouse in Chrome Developer Tools" width="880" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on ‘Generate Report’, a page analysis process will be started and a report will be generated.&lt;br&gt;
We analyzed Vercel's website, which is the creator of the Next.JS framework, and these were the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVM77fb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg4lagc9j5vuwd7bogdb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVM77fb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg4lagc9j5vuwd7bogdb.JPG" alt="Image showing results of the analysis made by Lighthouse on Vercel's website" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation"&gt;https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation&lt;/a&gt; &lt;br&gt;
&lt;a href="https://blog.cod3r.com.br/server-side-rendering-x-client-side-rendering"&gt;https://blog.cod3r.com.br/server-side-rendering-x-client-side-rendering&lt;/a&gt; &lt;br&gt;
&lt;a href="https://medium.com/swlh/server-side-rendering-with-next-js-56f84f98f9bd"&gt;https://medium.com/swlh/server-side-rendering-with-next-js-56f84f98f9bd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ramon Pereira&lt;br&gt;
Frontend Developer&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Dev.to's CodePen Liquid Tag is Getting an Upgrade!</title>
      <author>Jane Ori</author>
      <pubDate>Mon, 17 Jan 2022 18:28:33 +0000</pubDate>
      <link>https://dev.to/janeori/devtos-codepen-liquid-tag-is-getting-an-upgrade-2e69</link>
      <guid>https://dev.to/janeori/devtos-codepen-liquid-tag-is-getting-an-upgrade-2e69</guid>
      <description>&lt;p&gt;&lt;a href="#all-the-codepen-embed-options"&gt;Skip my practice writing and jump to the features!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only learned about dev.to last Tuesday after a coworker shared a draft article with the team. After work, I read the &lt;a href="https://dev.to/faq"&gt;FAQ&lt;/a&gt; and the &lt;a href="https://dev.to/about"&gt;About Page&lt;/a&gt;. It checked every box I've wanted for a dev blogging platform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[x] We own our posts&lt;/li&gt;
&lt;li&gt;[x] Dev.to respects our privacy&lt;sup&gt;[1]&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;[x] Social-centric: comments, feeds, reactions, community&lt;/li&gt;
&lt;li&gt;[x] I can embed from my favorite code-sharing platform, &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] It's Open Source and encouraging new contributors&lt;/li&gt;
&lt;li&gt;[x] Tons of other features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1] if you sign up with your github account, it only asks to read your email address. THANK YOU.&lt;/p&gt;

&lt;p&gt;So the first thing I did was play around with the codepen liquid tag and tried adding CodePen's custom theme-id option. It's a feature for pro users to change the appearance of the embed so I can stay on brand with &lt;a href="https://twitter.com/Jane0ri"&gt;my purple-heavy twitter feed&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0lYFngw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yimh4jd865sye2uudhj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0lYFngw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yimh4jd865sye2uudhj.gif" alt="Gif capture of Jane's colorful twitter feed" width="634" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A little extra, I know, but I have fun so don't hate 😛&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themeid-didnt-work"&gt;
  &lt;/a&gt;
  ...theme-id didn't work
&lt;/h2&gt;

&lt;p&gt;First I asked around to see if I was missing something, I know it wasn't documented but it seemed like something that should work since the default-tab parameter works. Then I remembered the about page linked to the &lt;a href="https://github.com/forem"&gt;dev.to github org&lt;/a&gt; because, I thought, surely it would be easy to add? I searched for "codepen" to find the code and related issues. Here's what I found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/blob/a0c3ef03293af06ae05a9a3a02628f2ef5ea4649/spec/liquid_tags/codepen_tag_spec.rb"&gt;CodePen Liquid Tag Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/blob/5da625cadb632ad92693ad29158ec1f146326b5f/app/liquid_tags/codepen_tag.rb"&gt;CodePen Liquid Tag Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/issues/5346"&gt;A closed/unfulfilled issue asking for control of the height param&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/issues/12130"&gt;A 1 year old open issue asking for a way to embed in preview mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great! There's interest near by, but not for the thing I wanted specifically... So if I take care of both of those requests and loop mine in too, there's maybe a better chance of getting approved quickly.&lt;/p&gt;

&lt;p&gt;Just one small problem though... As far as I remember,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ive-never-even-opened-a-ruby-file-before"&gt;
  &lt;/a&gt;
  I've never even opened a ruby file before
&lt;/h2&gt;

&lt;p&gt;...and this is all written in Ruby. Fortunately, I did recently meet someone who seems to love Ruby though, &lt;a href="https://twitter.com/adrianvalenz_"&gt;Adrian&lt;/a&gt; while discussing sugary JS syntax idea I had&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0-3sj0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGRg4EmWYAklsET.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vY1vCNJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1408413691037597696/9GXSl8a6_normal.jpg" alt="Jane 💜 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jane 💜
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jane0ri
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Who likes sugar in their JS that turns 6 lines into 1?&lt;br&gt;&lt;br&gt;I know multiple returns in a JS function is fiercely debated as anti-patern (🙄) buuuuuut if any TC39 members see this and want to champion the idea... 💜 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:40 PM - 10 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1469406737614708744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1469406737614708744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1469406737614708744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
Seemed like he would be willing to give me pointers if I ran into trouble (I'm sure he would have, didn't need to ask though!), so I wasn't worried about stumbling my way through this.

&lt;p&gt;Setup might be some effort, my Thursday night looks open, wait until then.&lt;/p&gt;

&lt;p&gt;Time to code&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-process-went-like-this"&gt;
  &lt;/a&gt;
  My process went like this
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Follow the &lt;a href="https://github.com/forem/forem#contributing"&gt;links into the contributor's guide&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Get everything installed and running&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Spend 3 hours not understanding postgress errors&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Just get all the tests running&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Hack enough of the code and env to get just &lt;code&gt;spec/liquid_tags&lt;/code&gt; tests running and ignore everything else&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throw around some copy-pasted code in the test file until new tests were successfully failing

&lt;ul&gt;
&lt;li&gt;this is pretty easy to do even in completely foreign syntax; Either it works, or it doesn't and you try again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modify the implementation code until the tests were passing

&lt;ul&gt;
&lt;li&gt;not too difficult because Ruby Regular Expressions seem to be a superset of the features I know well enough to hack together quickly, and every existing line of Ruby here is an example to learn from&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For the sake of completion, add the last CodePen pro embed feature (editable=true) that wasn't previously mentioned&lt;/li&gt;
&lt;li&gt;Find and update the on-site docs for the codepen liquid tag

&lt;ul&gt;
&lt;li&gt;it's in two places, just had to do it once and copy paste&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Almost 2am Friday, time to &lt;a href="https://github.com/forem/forem/pull/16102"&gt;open a PR&lt;/a&gt; only for the parts I was supposed to change&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ran into a problem with CI, (I probably had windows line endings in my push (oops!)). The &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014122748"&gt;core contributors were helpful&lt;/a&gt; here though and put effort in to get it working!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank you for helping me, help you, help us all&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xMldf0tR4Gk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And finally, just a couple hours ago, we got &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;confirmation of intent-to-merge&lt;/a&gt; for Tomorrow at 2pm Central, just one full week after I learned about dev.to 🎉&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg"&gt;
      &lt;span class="issue-title"&gt;
        Comment for
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#16102&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/jeremyf"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbHk20us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/2130%3Fv%3D4" alt="jeremyf avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/jeremyf"&gt;jeremyf&lt;/a&gt;
        &lt;/strong&gt; commented on &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;&lt;time&gt;Jan 17, 2022&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/janeori"&gt;@janeori&lt;/a&gt; looks great, I want to give @msarit a chance to review as well.  She's been spending a lot of time in the liquid tags.&lt;/p&gt;
&lt;p&gt;I've added this to my watch list to merge on Tuesday UTC 20:00.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now for the main course&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-the-codepen-embed-options"&gt;
  &lt;/a&gt;
  All the codepen embed options
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-embed"&gt;
  &lt;/a&gt;
  Basic embed
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX %}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-embed-codepen-pro-feature"&gt;
  &lt;/a&gt;
  Private embed (CodePen PRO feature)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% https://codepen.io/quezo/pen/e10ca45c611b9cf3c98a1011dedc1471 %}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-embed-new"&gt;
  &lt;/a&gt;
  Preview embed (NEW!)
&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;/pen/&lt;/code&gt; with &lt;code&gt;/pen/preview/&lt;/code&gt;, which becomes &lt;code&gt;/embed/preview/&lt;/code&gt; in the generated iframe&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/preview/YzWPEKN %}&lt;/code&gt;&lt;br&gt;
This is CodePen's "Click-to-Load" feature that shows a static preview without loading or running the heavier resources in larger pens. The user clicks once and the pen loads:&lt;/p&gt;

&lt;p&gt;[TODO: show an example here once the feature is live]&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defaulttab-parameter"&gt;
  &lt;/a&gt;
  default-tab parameter
&lt;/h3&gt;

&lt;p&gt;Show just the result tab:&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX default-tab=result %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Show the html and css tabs:&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX default-tab=html,css %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Show the js and result tab:&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX default-tab=js,result %}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#height-parameter-new"&gt;
  &lt;/a&gt;
  height parameter (NEW!)
&lt;/h3&gt;

&lt;p&gt;Set the height on the iframe and pass in the parameter to codepen&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/dyVMgBg height=300 %}&lt;/code&gt;&lt;br&gt;
default value is &lt;code&gt;600&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/dyVMgBg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;(Many of the liquid tag embeds could use this height parameter upgrade! Consider becoming a contributor by copying (and/or improving) the code for your favorite one!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editabletrue-new-codepen-pro-feature"&gt;
  &lt;/a&gt;
  editable=true (NEW!) (CodePen PRO feature)
&lt;/h3&gt;

&lt;p&gt;Allows the code to be edited from the embed&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/dyVMgBg editable=true %}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#themeid-new-codepen-pro-feature"&gt;
  &lt;/a&gt;
  theme-id (NEW!) (CodePen PRO feature)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blog.codepen.io/documentation/unlimited-embed-themes/"&gt;Read about this feature on CodePen&lt;/a&gt;&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/NWazORr theme-id=40148 %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/NWazORr?height=600&amp;amp;default-tab=css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-multiple-options-together"&gt;
  &lt;/a&gt;
  Using multiple options together
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/preview/YzWPEKN default-tab=css,result theme-id=40148 height=700 %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[TODO: show an example here once the feature is live]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end!
&lt;/h2&gt;

&lt;p&gt;Thank you for reading, hope you find the upgrades useful!&lt;/p&gt;

&lt;p&gt;💜 // Jane&lt;/p&gt;

</description>
      <category>meta</category>
      <category>codepen</category>
      <category>liquidtags</category>
      <category>contributing</category>
    </item>
    <item>
      <title>ELI5: Reactivity in Vue 3</title>
      <author>Morgenstern2573</author>
      <pubDate>Mon, 17 Jan 2022 18:22:22 +0000</pubDate>
      <link>https://dev.to/morgenstern2573/eli5-reactivity-in-vue-3-4o40</link>
      <guid>https://dev.to/morgenstern2573/eli5-reactivity-in-vue-3-4o40</guid>
      <description>&lt;p&gt;Reactivity. It's a popular buzzword. It's also one of the most convenient features of front-end frameworks.&lt;br&gt;
What is it exactly, and how does it work in Vue 3?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite-knowledge"&gt;
  &lt;/a&gt;
  Prerequisite Knowledge
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic JavaScript and JS objects&lt;/li&gt;
&lt;li&gt;Basic knowledge of Vue.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-reactivity"&gt;
  &lt;/a&gt;
  What is reactivity?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Vue 3.x documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We say a value is reactive when it can update itself in response to changes in values it depends on. What do we mean by depends on? Let's take an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let val1 = 2
let val2 = 3
let sum = val1 + val2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of sum is always determined by the values of val1 and val2, so we say that sum depends on val1 and val2.&lt;/p&gt;

&lt;p&gt;What happens to sum when one of the values it depends on changes? In regular JavaScript, it stays the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum) // 5

val1 = 3

console.log(sum) // Still 5

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if sum was reactive,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum) // 5

val1 = 3

console.log(sum) // Sum is 6!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of sum would change in response to the change in a value it depended on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-vue-need-to-make-a-value-reactive"&gt;
  &lt;/a&gt;
  What does Vue need to make a value reactive?
&lt;/h2&gt;

&lt;p&gt;Vue needs to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what dependencies that value has.&lt;/li&gt;
&lt;li&gt;when those dependencies change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue also needs to be able to re-calculate values when their dependencies change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-vue-knows-when-dependencies-change"&gt;
  &lt;/a&gt;
  How Vue knows when dependencies change
&lt;/h2&gt;

&lt;p&gt;Vue wraps the data object of all components with an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;ES6 Proxy&lt;/a&gt;.&lt;br&gt;
A proxy is an object that wraps a target object.&lt;/p&gt;

&lt;p&gt;This is important because all reactive values depend (directly or not) on the properties in a component's data object. &lt;/p&gt;

&lt;p&gt;Proxies allow you to intercept all requests to get or set properties of the target. They also let you run any code in response to those requests. &lt;/p&gt;

&lt;p&gt;Thanks to this, when code attempts to change one of the properties of a data object, Vue intercepts it and is aware of it.&lt;/p&gt;

&lt;p&gt;Vue can then re-calculate any functions that depend on that value. But how does Vue know which functions depend on which values?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-vue-knows-which-dependencies-belong-to-a-value"&gt;
  &lt;/a&gt;
  How Vue knows which dependencies belong to a value
&lt;/h2&gt;

&lt;p&gt;To make our value reactive, we need to wrap it in a function. Using sum to illustrate again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// we need to go from

let val1 = 2
let val2 = 3
let sum = val1 + val2

// to

const updateSum = () =&amp;gt; {
 sum = val1 + val2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue then wraps all such functions with an effect. An effect is a function that takes another function as an argument. Vue then calls the effect in place of that function. &lt;/p&gt;

&lt;p&gt;When Vue calls an effect, the effect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Records that it's running.&lt;/li&gt;
&lt;li&gt;Calls the function it received as an argument. &lt;/li&gt;
&lt;li&gt;Removes itself from the list of running effects after the function ends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember all source values come from a Proxy (the data component)? While executing the function it wraps, the effect will need a property from the data object, and try to read it.&lt;/p&gt;

&lt;p&gt;The Proxy will intercept that read request. Vue checks which effect is currently running. It then records that the effect depends on the property it tried to read. This is how Vue knows which values depend on which properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-does-vue-know-when-to-rerun-the-functions-that-return-dependent-values"&gt;
  &lt;/a&gt;
  So how does Vue know when to re-run the functions that return dependent values?
&lt;/h3&gt;

&lt;p&gt;The answer is once again the magic of Proxies. Proxies can intercept requests to set property values too. &lt;/p&gt;

&lt;p&gt;Remember we now have a record of effects, as well as the values they depend on. When the value of a property in data changes, Vue needs to do one thing: check that record and update the source value.&lt;/p&gt;

&lt;p&gt;Vue can then re-run all the effects that depend on it, and thus update the values. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article is a simplified overview of how reactivity works in Vue 3. If you'd like to read more on the subject, here are some resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.sitepoint.com/vue-3-reactivity-system/"&gt;Understanding the New Reactivity System in Vue 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/reactivity.html#how-vue-tracks-these-changes"&gt;Reactivity in Depth&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#03)</title>
      <author>martin krause</author>
      <pubDate>Mon, 17 Jan 2022 17:32:45 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-03-181e</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-03-181e</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freefordev"&gt;
  &lt;/a&gt;
  free-for.dev
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers and Open Source authors now have a massive amount of services offering free tiers, but it can be hard to find them all to make informed decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://free-for.dev/"&gt;https://free-for.dev/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-not-to-learn-typescript"&gt;
  &lt;/a&gt;
  How not to learn TypeScript
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“TypeScript and I are never going to be friends”. Oh wow, how often have I heard this phrase? Learning TypeScript, even in 2022, can be frustrating it seems. And for so many different reasons. People who write Java or C# and find out things are working differently than they should. Folks who have done JavaScript most of their time and are being screamed at by a compiler. Here are some mistakes I’ve seen people do when getting started with TypeScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#httpsfettblogeuhownottolearntypescript"&gt;
  &lt;/a&gt;
  &lt;a href="https://fettblog.eu/how-not-to-learn-typescript/"&gt;https://fettblog.eu/how-not-to-learn-typescript/&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#being-the-dri-of-your-career"&gt;
  &lt;/a&gt;
  Being the DRI of Your Career
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;At DuckDuckGo, there’s an expression: “You are the DRI of your career” (DRI: Directly Responsible Individual). I like this, both as an individual who has always felt like the DRI of my own career, and I like it as a manager because I think it makes the boundaries of what you can and can’t do for people clear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://cate.blog/2021/09/20/being-the-dri-of-your-career/"&gt;https://cate.blog/2021/09/20/being-the-dri-of-your-career/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-stack-elements-in-css"&gt;
  &lt;/a&gt;
  How to Stack Elements in CSS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to create fantastic and unique visual experiences on the web, you will eventually need two elements to overlap or exist in the same place. You may even just need them to be positioned near or next to each other. Let’s go over two different ways to accomplish this, one with the position property and one with CSS Grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/how-to-stack-elements-in-css/"&gt;https://css-tricks.com/how-to-stack-elements-in-css/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-new-vue-by-evan-you"&gt;
  &lt;/a&gt;
  The New Vue by Evan You
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this session, Evan You talks about the new Vue 3 experience: from new syntax to new docs, build tools, devtools, and TS/IDE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2KBHvaAWJOA"&gt;https://www.youtube.com/watch?v=2KBHvaAWJOA&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Working with Numbers &amp; Strings in Python</title>
      <author>CodeWithKenn</author>
      <pubDate>Mon, 17 Jan 2022 17:15:56 +0000</pubDate>
      <link>https://dev.to/codewithkenn/working-with-numbers-strings-in-python-4d8l</link>
      <guid>https://dev.to/codewithkenn/working-with-numbers-strings-in-python-4d8l</guid>
      <description>&lt;p&gt;Python is one of the most popular coding languages available and is great as a starting point in your learning journey. It can be used for a range of things, such as web and internet development, software development application, network programming, and 3D graphics... (&lt;a href="https://hethelinnovation.com/"&gt;hethelinnovation.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;*While learning, we end up getting stuck in small bugs that can take more time to solve, whereas we could have solved it quickly if we could only remember the basics. *&lt;/p&gt;

&lt;p&gt;So, this is a series of Basics Python tips to remember whenever we work with numbers and strings. You can also use this article as a reference somehow while coding...&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-numbers"&gt;
  &lt;/a&gt;
  Python Numbers
&lt;/h2&gt;

&lt;p&gt;There are three numeric types we use in Python: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;int: or integer, is a whole number without decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 1245
y = -789

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;float: or Floating, a number with one or more decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 12.45
y = 42E5

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;complex: as studied in high school, is a number written with a "j" as the imaginary part.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 3 + 2j
y = -15j

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numbers-types-conversion"&gt;
  &lt;/a&gt;
  Numbers Types Conversion
&lt;/h2&gt;

&lt;p&gt;To convert numbers from one type (from the three) to another, we used methods.&lt;/p&gt;

&lt;p&gt;In Python, a method is a function that is available for a given object because of the object's type.&lt;br&gt;
So, You can convert from one type to another with the int(), float(), and complex() methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
x = 4    # int number
y = 0.8  # float number
z = 4j   # complex number

# from int to float:
a = float(x)

# from float to int:
b = int(y)

# from int to complex:
c = complex(x)

print(a)
print(b)
print(c)

print(type(a))
print(type(b))
print(type(c))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-build-a-simple-calculator"&gt;
  &lt;/a&gt;
  Let's Build a Simple Calculator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Python Simple calculator

# Addition Function
def add(x, y):
    return x + y

# Substraction Function
def subtract(x, y):
    return x - y

# Multiplication Function
def multiply(x, y):
    return x * y

# Division Function
def divide(x, y):
    return x / y


def calculate(first_number, second_number, operator):
    if operator == "+":
        answer = add(first_number, second_number)
        return answer

    elif operator == "-":
        answer = subtract(first_number, second_number)
        return answer

    elif operator == "/":
        answer = divide(first_number, second_number)
        return answer
    elif operator == "*" or operator == "x":
        answer = subtract(first_number, second_number)
        return answer
    else:
        return "Invalid"


num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
operator = input("Enter the Operator: ")

print(f"{num1} {operator} {num2} = {calculate(num1, num2, operator)}")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-strings"&gt;
  &lt;/a&gt;
  Python Strings
&lt;/h2&gt;

&lt;p&gt;Strings in python are surrounded by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single quotation marks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'bonjour'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Double quotation marks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"bonjour"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-a-variable-to-save-the-string"&gt;
  &lt;/a&gt;
  Use a Variable to save the String
&lt;/h2&gt;

&lt;p&gt;The assignment sign is made of &lt;em&gt;=&lt;/em&gt; (equal sign).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Kennedy"
role = "Software Engineer"
print(name)
print(role)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-can-also-use-multiline-strings"&gt;
  &lt;/a&gt;
  We can also use Multiline Strings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poem = """Your face is the grave of your nose
your face is the grave of your ears
your face is the grave of your face
once again your face overflows uncontrollably."""

print(poem)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-a-character-of-the-string"&gt;
  &lt;/a&gt;
  Accessing a Character of the String
&lt;/h2&gt;

&lt;p&gt;We can think of strings like an array made of characters. For example, the word "Elon Musk" is made of "E", "l", "o", "n", " ", "M", "u", "s" and "k" (Notice the space is also counted as a character).&lt;/p&gt;

&lt;p&gt;The first character is counted at index 0 (not 1).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeting = "Hello, World!"
print(greeting[1]) #prints "e" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-strings"&gt;
  &lt;/a&gt;
  Working with Strings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#checking-the-string-length"&gt;
  &lt;/a&gt;
  Checking the String Length
&lt;/h3&gt;

&lt;p&gt;use the &lt;code&gt;len()&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Kennedy"
length_of_name = len(name)

print(length_of_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checking-an-existing-string-or-character-in-a-string"&gt;
  &lt;/a&gt;
  Checking an existing string or character in a string
&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;in&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "Kennedy is a python programmer"
if "python" in a sentence:
  print("Yes, 'python' is present.")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#most-common-string-methods"&gt;
  &lt;/a&gt;
  Most Common String Methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;capitalize()&lt;/code&gt; method converts the first character of a string to an uppercase letter and lowercases all other characters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print(name.capitalize())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;casefold()&lt;/code&gt; method Converts string into lower case.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "PYTHON"
print(name.casefold())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;upper()&lt;/code&gt; method converts all the characters into Uppercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print(name.upper())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lower()&lt;/code&gt; method converts all the characters into Lowercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "PYTHON"
print(name.lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;len()&lt;/code&gt; method used to count the total number of characters in a string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print( len(name) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;find()&lt;/code&gt; searches the string for a specified value and returns the position of where it was found.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "python is great"
print( sentence.find('great') )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;replace()&lt;/code&gt; is used to replace a string with another.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "python is great"
new_sentence = sentence.replace('great', 'awesome') 
print(new_sentence)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;str()&lt;/code&gt; is used for string conversion
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ten = str(10)
print(ten) #converts 10 to '10'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can find more in the &lt;a href="https://docs.python.org/2.5/lib/string-methods.html"&gt;Python.org Official Docs&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-work-on-a-small-project"&gt;
  &lt;/a&gt;
  Let's work on a Small Project
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-arrange-string-characters-such-that-lowercase-letters-should-come-first"&gt;
  &lt;/a&gt;
  - Arrange string characters such that lowercase letters should come first
&lt;/h4&gt;

&lt;p&gt;Initial Code&lt;br&gt;
&lt;code&gt;noun = PrOgRamMinG&lt;/code&gt;&lt;br&gt;
&lt;code&gt;# Expected Output : rgaminPORMG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;noun = "PrOgRamMinG"

def arrange_string(my_string):
    print('Original String:', my_string)
    lower = []
    upper = []

    #Let's iterate and convert
    for char in my_string:
        if char.islower():
            # add lowercase characters to lower list
            lower.append(char)
        else:
            # add uppercase characters to lower list
            upper.append(char)

    # Join both list
    sorted_str = ''.join(lower + upper)
    print('Result:', sorted_str)

# Now, let's call execute the function we just created! 
arrange_string(noun)

# Output: 
# Original String: PrOgRamMinG
# Result: rgaminPORMG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resources for more Details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/python/"&gt;www.w3schools.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.programiz.com/python-programming"&gt;www.programiz.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pynative.com/python-string-exercise/#h-exercise-4-arrange-string-characters-such-that-lowercase-letters-should-come-first"&gt;www.pynative.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 &lt;a href="https://dev.to/codewithkenn"&gt;DISCOVER MORE useful ARTICLES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this article, many others are coming very soon, Feel free to subscribe 🤙.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Let's connect
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CodeWithKenn"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KennStack01"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/kennkibadi/"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.instagram.com/codewithkenn_/"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to start blogging?  🔥&lt;a href="https://hashnode.com/@CodeWithKenn/joinme"&gt;Join NOW!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Exploiting IndexedDB API information leaks in Safari 15</title>
      <author>Savannah Copland 👋</author>
      <pubDate>Mon, 17 Jan 2022 17:14:53 +0000</pubDate>
      <link>https://dev.to/savannahjs/exploiting-indexeddb-api-information-leaks-in-safari-15-58o2</link>
      <guid>https://dev.to/savannahjs/exploiting-indexeddb-api-information-leaks-in-safari-15-58o2</guid>
      <description>&lt;p&gt;&lt;small&gt;DISCLAIMER: FingerprintJS does not use this vulnerability in our products and does not provide cross-site tracking services. We focus on stopping fraud and support modern privacy trends for removing cross-site tracking entirely. We believe that vulnerabilities like this one should be discussed in the open to help browsers fix them as quickly as possible. To help fix it, we have submitted a bug report to the WebKit maintainers, created a live demo, and have made a &lt;a href="https://github.com/fingerprintjs/blog-indexeddb-safari-leaks-demo" rel="noopener noreferrer"&gt;public source code repository&lt;/a&gt; available to all.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Z7dPeGpCl8s"&gt;Watch our Youtube overview&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In this article, we discuss a software bug introduced in Safari 15’s implementation of the IndexedDB API that lets any website track your internet activity and even reveal your identity.&lt;/p&gt;

&lt;p&gt;We have also published a demo site to see the vulnerability in action:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://safarileaks.com"&gt;Try the demo&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The leak was reported to the &lt;a href="https://bugs.webkit.org/" rel="noopener noreferrer"&gt;WebKit Bug Tracker&lt;/a&gt; on November 28, 2021 as bug &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=233548" rel="noopener noreferrer"&gt;233548&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (Monday January 17th 2022)&lt;/strong&gt;: Apple engineers began working on the bug as of Sunday, have &lt;a href="https://github.com/WebKit/WebKit/commit/f73005ed826014988f8ee447de23927749fb56e5"&gt;merged potential fixes&lt;/a&gt;, and have marked our report as resolved. However, the bug continues to persist for end users until these changes are released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-short-introduction-to-the-indexeddb-api%C2%A0"&gt;
  &lt;/a&gt;
  A short introduction to the IndexedDB API 
&lt;/h2&gt;

&lt;p&gt;IndexedDB is a browser API for client-side storage designed to hold significant amounts of data. It’s supported in all major browsers and is very commonly used. As IndexedDB is a low-level API, many developers choose to use wrappers that abstract most of the technicalities and provide an easier-to-use, more developer-friendly API. &lt;/p&gt;

&lt;p&gt;Like most modern web browser technologies, IndexedDB is following &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" rel="noopener noreferrer"&gt;Same-origin policy&lt;/a&gt;. The same-origin policy is a fundamental security mechanism that restricts how documents or scripts loaded from one origin can interact with resources from other origins. An origin is defined by the scheme (protocol), hostname (domain), and port of the URL used to access it. &lt;/p&gt;

&lt;p&gt;Indexed databases are associated with a specific origin. Documents or scripts associated with different origins should never have the possibility to interact with databases associated with other origins.&lt;/p&gt;

&lt;p&gt;If you want to learn more about how IndexedDB APIs work check out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" rel="noopener noreferrer"&gt;MDN Web Docs&lt;/a&gt; or the &lt;a href="https://www.w3.org/TR/IndexedDB/" rel="noopener noreferrer"&gt;W3C specification&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-indexeddb-leaks-in-safari-15"&gt;
  &lt;/a&gt;
  The IndexedDB leaks in Safari 15
&lt;/h2&gt;

&lt;p&gt;In Safari 15 on macOS, and in all browsers on iOS and iPadOS 15, the IndexedDB API is violating the same-origin policy. Every time a website interacts with a database, a new (empty) database with the same name is created in all other active frames, tabs, and windows within the same browser session. Windows and tabs usually share the same session, unless you switch to a different profile, in Chrome for example, or open a private window. For clarity, we will refer to the newly created databases as “cross-origin-duplicated databases” for the remainder of the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-this-leak-bad"&gt;
  &lt;/a&gt;
  Why is this leak bad?
&lt;/h3&gt;

&lt;p&gt;The fact that database names leak across different origins is an obvious privacy violation. It lets arbitrary websites learn what websites the user visits in different tabs or windows. This is possible because database names are typically unique and website-specific. Moreover, we observed that in some cases, websites use unique user-specific identifiers in database names. This means that authenticated users can be uniquely and precisely identified. Some popular examples would be YouTube, Google Calendar, or Google Keep. All of these websites create databases that include the authenticated Google User ID and in case the user is logged into multiple accounts, databases are created for all these accounts.&lt;/p&gt;

&lt;p&gt;The Google User ID is an internal identifier generated by Google. It uniquely identifies a single Google account. It can be used with Google APIs to fetch public personal information of the account owner. The information exposed by these APIs is controlled by many factors. In general, at minimum, the user's profile picture is typically available. To learn more, refer to Google's &lt;a href="https://developers.google.com/people/v1/how-tos/authorizing#profile-scopes" rel="noopener noreferrer"&gt;People API&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;Not only does this imply that untrusted or malicious websites can learn a user’s identity, but it also allows the linking together of multiple separate accounts used by the same user.&lt;/p&gt;

&lt;p&gt;Note that these leaks do not require any specific user action. A tab or window that runs in the background and continually queries the IndexedDB API for available databases, can learn what other websites a user visits in real-time. Alternatively, websites can open any website in an iframe or popup window in order to trigger an IndexedDB-based leak for that specific site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-many-websites-are-affected"&gt;
  &lt;/a&gt;
  How many websites are affected?
&lt;/h3&gt;

&lt;p&gt;We checked the homepages of Alexa’s Top 1000 most visited websites to understand how many websites use IndexedDB and can be uniquely identified by the databases they interact with. &lt;/p&gt;

&lt;p&gt;The results show that more than 30 websites interact with indexed databases directly on their homepage, without any additional user interaction or the need to authenticate. We suspect this number to be significantly higher in real-world scenarios as websites can interact with databases on subpages, after specific user actions, or on authenticated parts of the page.&lt;/p&gt;

&lt;p&gt;We also saw a pattern where indexed databases named as universally unique identifiers (UUIDs) are being created by subresources, specifically ad networks. Interestingly, loading of these resources seems to be in some cases blocked by Safari’s tracking prevention features, which effectively prevents the database names from leaking. These leaks will also be prevented if the resources are blocked by other means, for example when using adblocker extensions or blocking all JavaScript execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-safari-private-mode-protect-against-the-leak"&gt;
  &lt;/a&gt;
  Does Safari private mode protect against the leak?
&lt;/h3&gt;

&lt;p&gt;Firstly, when followed, the same-origin policy is an effective security mechanism for all window modes. Websites with one origin should never have access to resources from other origins regardless of whether a visitor is using private browsing or not unless it’s explicitly allowed via cross-origin resource sharing (CORS).&lt;/p&gt;

&lt;p&gt;In this case, private mode in Safari 15 is also affected by the leak. It’s important to note that browsing sessions in private Safari windows are restricted to a single tab, which reduces the extent of information available via the leak. However, if you visit multiple different websites within the same tab, all databases these websites interact with are leaked to all subsequently visited websites. Note that in other WebKit-based browsers, for example Brave or Google Chrome on iOS, private tabs share the same browser session in the same way as in non-private mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;We created a simple demo page that demonstrates how a website can learn the Google account identity of any visitor. The demo is available at &lt;a href="https://safarileaks.com"&gt;safarileaks.com&lt;/a&gt;. If you open the page and start the demo in an affected browser, you will see how the current browsing context and your identity is leaked right away. Identity data will only be available if you are authenticated to your Google account in the same browsing session. &lt;/p&gt;

&lt;p&gt;Moreover, the demo detects the presence of 20+ websites in other browser tabs or windows, including Google Calendar, Youtube, Twitter, and Bloomberg. This is possible because database names, which those websites interact with, are specific enough to uniquely identify them.  &lt;/p&gt;

&lt;p&gt;The supported browsers are Safari 15 on macOS, and essentially all browsers on iOS 15 and iPadOS 15. That is because Apple’s App Store guidelines require all browsers on iOS  and iPadOS to use the WebKit engine.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://safarileaks.com"&gt;Try the demo&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reproducing-the-leak"&gt;
  &lt;/a&gt;
  Reproducing the leak
&lt;/h2&gt;

&lt;p&gt;To reproduce the leak yourself, simply call the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases" rel="noopener noreferrer"&gt;indexedDB.databases()&lt;/a&gt; API. In case websites opened in other frames, tabs, or windows interact with other databases, you will see the cross-origin-duplicated databases.&lt;/p&gt;

&lt;p&gt;Based on our observations, if a database is deleted, all related cross-origin-duplicated databases are also deleted. However, there seems to be an issue when developer tools are opened and a page refresh happens. On every page refresh, all databases are duplicated once again and seem to become independent from the original databases. In fact, it’s not even possible to delete these duplicated databases by using the regular &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase" rel="noopener noreferrer"&gt;indexedDB.deleteDatabase()&lt;/a&gt; function. &lt;/p&gt;

&lt;p&gt;This behavior makes it very difficult to use the developer tools to understand what exactly is happening with the databases that a website interacts with. It is therefore recommended to use other means of debugging (for example rendering output into the DOM instead of using console logs or the JavaScript debugger) when trying to reproduce the leaks described in this article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-protect-yourself"&gt;
  &lt;/a&gt;
  How to protect yourself
&lt;/h2&gt;

&lt;p&gt;Unfortunately, there isn’t much Safari, iPadOS and iOS users can do to protect themselves without taking drastic measures. One option may be to block all JavaScript by default and only allow it on sites that are trusted. This makes modern web browsing inconvenient and is likely not a good solution for everyone. Moreover, vulnerabilities like cross-site scripting make it possible to get targeted via trusted sites as well, although the risk is much smaller. Another alternative for Safari users on Macs is to temporarily switch to a different browser. Unfortunately, on iOS and iPadOS this is not an option as all browsers are affected.&lt;/p&gt;

&lt;p&gt;The only real protection is to update your browser or OS once the issue is resolved by Apple. In the meantime, we hope this article will raise awareness of this issue.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>privacy</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>This is my first article on DEV.to</title>
      <author>Teszáry Péter</author>
      <pubDate>Mon, 17 Jan 2022 17:11:11 +0000</pubDate>
      <link>https://dev.to/peterteszary/this-is-my-first-article-on-devto-5bie</link>
      <guid>https://dev.to/peterteszary/this-is-my-first-article-on-devto-5bie</guid>
      <description>&lt;p&gt;So, this is the first article here on DEV.to. I just don't know yet why have I started it. I already have two blogs. One is for my business and the other one is for fun. The non-business one is similar to a diary. But I just like to try out new things, so that is why I've decided to click around DEV.to.&lt;/p&gt;

&lt;p&gt;Maybe I will start with some short tweets here to see if I can keep up with the writing. The reason to keep this blog up to date and post regularly is to have some consistency in my learning methodology. &lt;/p&gt;

&lt;p&gt;I am coming from a WordPress world, and my main goal is to become a full-stack developer someday. I will tell you about this in a later article. So I would like to dive deeply into programming. Also, I have a programmer background as well, because I have studied a lot for myself, from Udemy and Youtube courses. Also, I had a 2-years programming school, that I did not finish. Only the first year yet. But I decided to go back this September, so we will see. Until that, I would like to keep up with studying as much as it is possible. So I hope I can document this journey here. &lt;/p&gt;

&lt;p&gt;So I hope that I will see you and myself around. That was my first post. I guess there will be a lot more. We'll see.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Integrating Google reCAPTCHA with Laravel, Inertia JS and Vue 3.</title>
      <author>Sesha</author>
      <pubDate>Mon, 17 Jan 2022 17:04:12 +0000</pubDate>
      <link>https://dev.to/sesha/integrating-google-recaptcha-with-laravel-inertia-js-and-vue-3-3o0c</link>
      <guid>https://dev.to/sesha/integrating-google-recaptcha-with-laravel-inertia-js-and-vue-3-3o0c</guid>
      <description>&lt;p&gt;I will show you how to add the Google reCAPTCHA version 3 with Laravel with a few simple steps.&lt;/p&gt;

&lt;p&gt;I assume you already installed Laravel with Jetstream, InertiaJS and Vue3. If not, &lt;a href="https://jetstream.laravel.com/"&gt;this&lt;/a&gt; link will help you to install.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-1"&gt;
  &lt;/a&gt;
  Setup 1:
&lt;/h3&gt;

&lt;p&gt;Register your site in the &lt;a href="https://www.google.com/recaptcha/admin/create"&gt;Google reCAPTCHA&lt;/a&gt; and get the reCAPTCHA site key and Secret Key.&lt;/p&gt;

&lt;p&gt;Configure those values in the config services.php file for better accessibility and management.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
 &lt;span class="s1"&gt;'google_recaptcha'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'https://www.google.com/recaptcha/api/siteverify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;'site_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GOOGLE_RECAPTCHA_SITE_KEY'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="s1"&gt;'secret_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GOOGLE_RECAPTCHA_SECRET_SITE_KEY'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the reCAPTCHA site key in the frontend, share through the HandleInertiaRequest file. Directly mentioning the site key in the front end isn't a great idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'recaptcha_site_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'services.google_recaptcha.site_key'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;]);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-2"&gt;
  &lt;/a&gt;
  Setup 2:
&lt;/h3&gt;

&lt;p&gt;Install &lt;a href="https://www.npmjs.com/package/vue-recaptcha-v3"&gt;Vue recaptcha v3&lt;/a&gt; and import in app.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VueReCaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useReCaptcha&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-recaptcha-v3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;


&lt;span class="nx"&gt;createInertiaApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;appName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./Pages/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captcheKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recaptcha_site_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueReCaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;siteKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;captcheKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mixin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;To add Google reCAPTCHA to the form. Here, I used a sample form to demonstrate the Google reCAPTCHA with Vue 3 composition API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"recaptcha"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   ...

   &lt;span class="nt"&gt;&amp;lt;jet-input-error&lt;/span&gt; &lt;span class="na"&gt;:message=&lt;/span&gt;&lt;span class="s"&gt;"form.errors.captcha_token"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@inertiajs/inertia-vue3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReCaptcha&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue-recaptcha-v3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;captcha_token&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;executeRecaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recaptchaLoaded&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReCaptcha&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recaptcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;recaptchaLoaded&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captcha_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;executeRecaptcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contact-us.store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;preserveScroll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;recaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;Create a Laravel custom rule to verify the token and score. Here, I rejected the form if the score &amp;lt;= 0.5 and status was not equals to true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Rules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Contracts\Validation\Rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Recaptcha&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Rule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Create a new rule instance.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Determine if the validation rule passes.
     *
     * @param  string  $attribute
     * @param  mixed  $value
     * @return bool
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'services.google_recaptcha'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;asForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$endpoint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'secret'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$endpoint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'secret_key'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'response'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Get the validation error message.
     *
     * @return string
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Something goes wrong. Please contact us directly through the phone or email.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add in the controller to validate the input request along with reCAPTCHA token.&lt;/p&gt;

&lt;p&gt;use Illuminate\Support\Facades\Request;&lt;br&gt;
use Illuminate\Support\Facades\Redirect;&lt;br&gt;
use App\Rules\Recaptcha;&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nv"&gt;$contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
     &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:50'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'email'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:100'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'phone'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'nullable'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:13'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'message'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:2000'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'captcha_token'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Recaptcha&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;  

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Redirect&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'contact-us'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope, this tutorial helps you to integrate Google reCAPTCHA 3 with Laravel. Please let me know if it doesn't work for you.&lt;/p&gt;

&lt;p&gt;Thank you. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
