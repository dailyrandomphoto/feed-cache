<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Remote pair programming - What are YOUR best practices? üßë‚Äçüíªüë©üèΩ‚Äçüíª</title>
      <author>Pascal Thormeier</author>
      <pubDate>Thu, 30 Dec 2021 22:47:05 +0000</pubDate>
      <link>https://dev.to/thormeier/remote-pair-programming-what-are-your-best-practices-592e</link>
      <guid>https://dev.to/thormeier/remote-pair-programming-what-are-your-best-practices-592e</guid>
      <description>&lt;p&gt;The certain situation the world has been in for the past almost two years has affected a lot of us devs all around the globe. This hasn't stopped us from delivering amazing software and do good deeds though - Au contraire! Think of global remote hackathons, local efforts to create services that help people in need, providing schools with old laptops, the list goes on. &lt;/p&gt;

&lt;p&gt;Arguably, the tech industry has adapted rather quickly. Video calls became a widespread norm, employees of some companies, like Twitter, &lt;a href="https://blog.twitter.com/en_us/topics/company/2020/keeping-our-employees-and-partners-safe-during-coronavirus"&gt;can now work from home forever if they want&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(As a little disclaimer: I'll use the word "remote" in this post to describe non-onsite things in general, even if you're in the same town as your peers.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the new remote situation came a few hurdles, though. And in this post I want to discuss some of these hurdles, and more specifically, how to overcome them. A specific topic I'd like to look at today is &lt;strong&gt;pair programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pair programming is a very helpful technique. It helps to onboard new team members to an existing application, give juniors an opportunity to learn from more senior devs (and vice versa!), discussing ideas and concepts. A popular approach to pair programming involves two roles: A driver and a navigator. While the driver is doing the actual coding, the navigator tries to keep the overview and give directions to the driver. Both people get to discuss their ideas and find the best solution together.&lt;/p&gt;

&lt;p&gt;From my experience, two people are usually working on the same computer. They come up with a plan together, write down open questions and then get going. I've done this with peers for weeks on end. However, the remote situation has made pair programming rather rare, at least in my team. It can be rather tedious. Screen sharing works, don't get me wrong, but it's easier to point on something on screen with your finger than to figure out the lines (and read them aloud at the same time!) of some blurry editor while the other person is scrolling along. I've played around with IntelliJ's pair programming feature for a bit, but not everyone uses IntelliJ either. For me, coding together on the same machine still feels a lot more productive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, what are your experiences? What tools do you use? What are your best practices when it comes to remote pair programming?&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;or a&lt;/em&gt; ü¶Ñ&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;you can offer me a coffee&lt;/em&gt; ‚òï&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; üê¶&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button" width="262" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>ü§¨ What‚Äôs your opinion on Linters, Testers, and Prettiers?</title>
      <author>William McGonagle</author>
      <pubDate>Thu, 30 Dec 2021 21:36:37 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/whats-your-opinion-on-linters-testers-and-prettiers-3f1j</link>
      <guid>https://dev.to/williammcgonagle/whats-your-opinion-on-linters-testers-and-prettiers-3f1j</guid>
      <description>&lt;p&gt;I‚Äôve been working on a project recently and a bunch of people suggested that I should start using a testing system. This testing system was working for a while but then someone else suggested that I should start using a linter. The linter ended up breaking all of my testing code, and before long I had spend nearly three hours getting them working together. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fairfield-programming/backend-server/"&gt;Here was the project if you want to check it out&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, I was told that the code was inconsistently formatted, so I needed to add a prettier system. All of my engineers are now telling me that they have lost countless man-hours battling against this new integration system.&lt;/p&gt;

&lt;p&gt;So, I‚Äôm getting rid of it. My entire linter system, code grading, beautifier, etc. is gone. And, I‚Äôm replacing it with &lt;a href="https://github.com/fairfield-programming/eaf-linter/"&gt;my own solution&lt;/a&gt;- if you want something done right, you have to do it yourself. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to hear what struggles you have had with your ‚Äúsystems to boost efficiency‚Äù, or if you think I am completely wrong and should shut up.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What‚Äôs the best programming language to learn first?</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 30 Dec 2021 21:30:39 +0000</pubDate>
      <link>https://dev.to/educative/whats-the-best-programming-language-to-learn-first-24oi</link>
      <guid>https://dev.to/educative/whats-the-best-programming-language-to-learn-first-24oi</guid>
      <description>&lt;p&gt;As a beginner programmer, it‚Äôs difficult to decide which programming language to learn first. The software development industry is fast-paced, and the market is constantly changing. There are over 700 programming languages in use, and each of those languages has its own advantages, disadvantages, and use cases. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, how do you decide where to begin?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Well, the good news is that learning &lt;em&gt;any&lt;/em&gt; language will open up doors and create new opportunities for you. In this article, we‚Äôll explore the different types of programming languages, along with how to choose the best first language for your personal and professional goals. Then, we‚Äôll give an overview of some of the most popular languages in use today.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#programmingtypes"&gt;Different types of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#choosingprogramminglanguage"&gt;Choosing the right programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#popularprogramminglanguages"&gt;Popular programming languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-types-of-programming"&gt;
  &lt;/a&gt;
  Different types of programming
&lt;/h2&gt;

&lt;p&gt;Programming languages are used to connect instructions to computers or machines. There are so many different programming languages with different functions. These languages can be categorized based on their functionalities. Popular programming language types include:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highlevel"&gt;
  &lt;/a&gt;
  High-level
&lt;/h3&gt;

&lt;p&gt;High-level programming languages have strong abstractions from the details of the computer. High-level languages are considered easier to understand and learn because they typically use simple syntax, have better readability, and automate areas of computing systems to make programming easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lowlevel"&gt;
  &lt;/a&gt;
  Low-level
&lt;/h3&gt;

&lt;p&gt;Low-level programming languages have little to no abstraction from the instruction set architecture of a computer. These languages are typically described as ‚Äúcloser to the hardware.‚Äù They can convert to machine code without an interpreter or compiler. They‚Äôre considered to have a steeper learning curve than high-level languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generalpurpose"&gt;
  &lt;/a&gt;
  General-purpose
&lt;/h3&gt;

&lt;p&gt;General-purpose programming languages are designed to build software in a variety of application domains. These languages lack special features for particular domains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scripting"&gt;
  &lt;/a&gt;
  Scripting
&lt;/h3&gt;

&lt;p&gt;Scripting languages are programming languages that are interpreted. They‚Äôre typically interpreted at runtime rather than compiled. They use a series of commands that can be executed without being compiled. All scripting languages are programming languages, but not all programming languages are scripting languages. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperative"&gt;
  &lt;/a&gt;
  Imperative
&lt;/h3&gt;

&lt;p&gt;Imperative programming uses statements to change the state of a program. Imperative programs give commands to the computer to execute. It focuses on explaining &lt;em&gt;how&lt;/em&gt; programs operate. Imperative languages can be broken down into the following subcategories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Procedural&lt;/strong&gt;: Procedural programming languages are based on the concept of procedural calls. These languages follow and carry out a set of ordered steps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Object-oriented&lt;/strong&gt;: Object-oriented programming languages are based on the concept of &lt;em&gt;objects&lt;/em&gt;, which contain data or code. Object-oriented programs are created by objects that interact with each other. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Parallel&lt;/strong&gt;: Parallel programming languages carry out processes simultaneously. With parallel programming, tasks are typically broken down into several sub-tasks that can be executed independently with all of the results combined afterward. Parallel programming is closely related to and frequently used alongside &lt;em&gt;concurrent programming&lt;/em&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#declarative"&gt;
  &lt;/a&gt;
  Declarative
&lt;/h3&gt;

&lt;p&gt;Declarative programming is typically defined as ‚Äúany style of programming that is &lt;em&gt;not&lt;/em&gt; imperative.‚Äù Declarative programs are non-imperative and describe their desired results without clearly defining commands or steps to be executed. They describe &lt;em&gt;what&lt;/em&gt; the program must accomplish, rather than &lt;em&gt;how&lt;/em&gt; to accomplish it. Declarative languages can be broken down into the following subcategories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Logic&lt;/strong&gt;: Logic programming languages are based on formal logic. Logical programs consist of a set of sentences in a logical order that expresses facts and rules about problem domains.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Functional&lt;/strong&gt;: Functional programming languages apply and compose functions. Function definitions are trees of expressions that map values to other values. In functional programming, functions can be bound to names, passed as arguments, and returned from other functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt;: Database programming languages define and access database information. With database programs, we can control access to data, define and update data, and search for information within our database management system (DBMS).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-programming-language"&gt;
  &lt;/a&gt;
  Choosing the right programming language
&lt;/h2&gt;

&lt;p&gt;There are a few things to take into consideration when choosing a language to learn, or even when deciding on which language to use for a new project. I think the first essential question to ask yourself is: &lt;em&gt;what am I learning a programming language for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Are you interested in getting into programming? Are you wanting to learn programming as a hobby or just for fun? Are you trying to switch career paths? Do you want to build a website from the ground up? Do you want to design your own mobile application? Do you want to learn the most in-demand, popular language on the market? The questions are endless!&lt;/p&gt;

&lt;p&gt;In short, your personal reasons for learning a language will help guide which language is best for you to learn. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-i-choose-the-wrong-programming-language"&gt;
  &lt;/a&gt;
  Can I choose the &lt;em&gt;wrong&lt;/em&gt; programming language?
&lt;/h3&gt;

&lt;p&gt;At the end of the day, learning &lt;em&gt;any&lt;/em&gt; programming language will teach you valuable and transferable skills in the software industry. While all programming languages have their differences, they share similar underlying principles. With any language, you‚Äôll learn more about fundamental programming concepts, computer science, hardware, software, etc. &lt;/p&gt;

&lt;p&gt;It‚Äôs also important to remember that you can learn multiple programming languages. Many developers move between different languages throughout the course of their careers. If you end up not aligning with your first language, you can always move on to another one. Once you learn your first language, it‚Äôs typically a lot easier to learn another one. Don‚Äôt stress yourself out when trying to pick your first language. &lt;/p&gt;

&lt;p&gt;That being said, it‚Äôs important to consider what your goals are and what you‚Äôre working on when choosing a language. For example, if you want to build an iOS application, a good language option would be Swift, if you want to program a website, you‚Äôd want to learn languages like HTML and CSS, and so on.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#popular-programming-languages"&gt;
  &lt;/a&gt;
  Popular programming languages
&lt;/h2&gt;

&lt;p&gt;In this section, we‚Äôll explore a compilation of some of the most popular programming languages to help you get an idea of what language would be best suited for you and your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;

&lt;p&gt;Java is a general-purpose, object-oriented, high-level programming language. It‚Äôs commonly used as the server-side language for back-end development tasks, including Android application development, big data applications, mobile app development, game development, and more. It‚Äôs a relatively simple language that uses automatic memory allocation and garbage collection. It offers class-based object-oriented programming (OOP) and enables reusable code. Java is platform-independent and multi-threaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;JavaScript is an interpreted, object-oriented, high-level language. Unlike Java, it‚Äôs not class-based. JavaScript is widely used in front-end web development alongside HTML and CSS to build dynamic web pages. JavaScript is a very fast language because it can be run in the client-side browser. It‚Äôs known for its simple syntax and rich libraries, frameworks, and technologies, including React, Angular, and Node.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;p&gt;‚ÄãPython is an interpreted, object-oriented, high-level scripting language. It‚Äôs widely used in artificial intelligence, machine learning, data science and data analysis, and web development. Python provides rich libraries that include features such as web services tools, operating system interfaces, and more. These features add a lot of functionality to the language, which is one of the reasons why Python is so popular. Many developers recommend that beginner coders &lt;a href="https://www.educative.io/blog/how-to-learn-python-in-5-easy-steps"&gt;learn Python&lt;/a&gt; as their first programming language because of its simple syntax, readability, and extensivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swift"&gt;
  &lt;/a&gt;
  Swift
&lt;/h3&gt;

&lt;p&gt;Swift is an open-source, multi-paradigm language developed by Apple. It‚Äôs mainly used for iOS development and macOS development. It integrates Objective-C‚Äôs object-oriented model and includes a framework infrastructure, debugger, and an advanced compiler. Swift is known for its simple syntax, scalability, and safety features. Your Swift projects can be extended with new features whenever necessary, which makes them easy to scale.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#golang"&gt;
  &lt;/a&gt;
  Golang
&lt;/h3&gt;

&lt;p&gt;Golang, or &lt;em&gt;Go&lt;/em&gt;, is an open-source, general-purpose, and compiled programming language created by Google. It‚Äôs a statically-typed and imperative language that includes features of object-oriented programming. Go is &lt;em&gt;hybrid&lt;/em&gt;, using the best features of many languages in a clear, expressive way. It‚Äôs used for all different types of software development solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;

&lt;p&gt;The C programming language is general-purpose, imperative, and procedural. It‚Äôs widely used for scripting system apps and Windows, UNIX, and Linux operating systems. It‚Äôs also used for embedded systems, desktop applications, browsers, and databases. C is a low-level language, so it‚Äôs ‚Äúcloser to the hardware.‚Äù C is a base language for many other languages, so learning it will help you learn and understand other languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h3&gt;

&lt;p&gt;C++ is a general-purpose, generic, object-oriented language. Its portability allows you to easily run your programs on any interface or operating system. For example, if you write a program in Linux and want to switch to Windows, the transition will be smooth. It‚Äôs commonly used for video game development, back-end development, and graphical user interface (GUI) applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql"&gt;
  &lt;/a&gt;
  SQL
&lt;/h3&gt;

&lt;p&gt;SQL, or &lt;em&gt;structured query language&lt;/em&gt;, is a domain-specific language used to manage data in relational databases. It‚Äôs the standard language for relational database management systems (RDMS) like MySQL, Postgres, and Microsoft SQL Server. It allows you to embed within other languages using SQL modules, libraries, and pre-compilers. It‚Äôs a valuable language for web developers, data scientists and analysts, and even some non-technical roles, such as business analysts, marketers, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scala"&gt;
  &lt;/a&gt;
  Scala
&lt;/h3&gt;

&lt;p&gt;The Scala programming language combines functional programming and object-oriented programming into one language. It was designed to improve upon Java, so you can call Java methods, inherit from Java classes, and more. Scala is commonly used for strong static systems, machine learning, data science, finance applications, distributed applications, and more. It‚Äôs in high demand and is becoming increasingly popular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h3&gt;

&lt;p&gt;PHP is an open-source server-side scripting language that‚Äôs similar to C. It‚Äôs widely used for web development and to create dynamic web pages. It‚Äôs also used in command-side scripting and GUI design. PHP is known to be beginner-friendly and widely applicable, as it can be used on any operating system or database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kotlin"&gt;
  &lt;/a&gt;
  Kotlin
&lt;/h3&gt;

&lt;p&gt;Kotlin is an open-source, statically-typed programming language that can transpile to Java bytecode to run on the Java Virtual Machine (JVM) or Android. Currently, Kotlin is most widely used for Android app development and server-side applications. It can also be used to write web applications by transpiling to JavaScript. Learning Kotlin can help you quickly learn other modern languages like TypeScript, Scala, and Swift because they share many common concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-and-css"&gt;
  &lt;/a&gt;
  HTML and CSS
&lt;/h3&gt;

&lt;p&gt;HTML and CSS are popular languages for front-end developers. HTML is a markup language that‚Äôs used to structure web pages and their content. CSS is a style sheet language used to describe the presentation of documents written in markup languages like HTML. The two languages work together alongside JavaScript to build interactive websites.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;Whether you‚Äôre just getting started or you‚Äôre just wanting to learn a new programming language, Educative is here to help. Our curated courses and tutorials help you master new coding languages and skills and prepare you for real-world software development. Our courses are hands-on, including interactive code widgets directly in your web browser. Get started with a new language today with one of our &lt;strong&gt;&lt;em&gt;From Scratch&lt;/em&gt;&lt;/strong&gt;  courses. Some options include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/learn-java-from-scratch"&gt;Learn Java from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/learn-cpp-from-scratch"&gt;Learn C++ from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/learn-scala-from-scratch"&gt;Learn Scala from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-programming"&gt;
  &lt;/a&gt;
  Continue learning about programming
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/algorithms-101-check-string-palindrome"&gt;Algorithms 101: How to check if a string is a palindrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/what-is-an-api"&gt;Beginner API deep dive: What is an API?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/hardware-vs-software-components-computer"&gt;Computer science 101: Hardware vs software components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/performance-testing-tutorial-gatling-jenkins"&gt;Performance testing tutorial: Automation, Gatling, and Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Trending Python Projects of the week</title>
      <author>Juan Benitez </author>
      <pubDate>Thu, 30 Dec 2021 21:30:24 +0000</pubDate>
      <link>https://dev.to/juanbenitezdev/trending-python-projects-of-the-week-24j9</link>
      <guid>https://dev.to/juanbenitezdev/trending-python-projects-of-the-week-24j9</guid>
      <description>&lt;p&gt;I wanted to make a compilation of some of the nicest Python projects that have gained popularity on GitHub this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sqlmodel"&gt;
  &lt;/a&gt;
  SQLModel
&lt;/h2&gt;

&lt;p&gt;As his creator defined, SQLModel is a Python library for interacting with SQL databases. It is based on Python type hints, and it uses &lt;a href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt; and &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; internally. We can argue that SQLModel is just a layer on top of Pydantic and SQLAlchemy.&lt;/p&gt;

&lt;p&gt;SQLModel was created by the same person who created &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;, so you can expect a pleasant and flawless integration between both.&lt;/p&gt;

&lt;p&gt;Although SQLModel was launched no more than 4 months ago (at the time of writing this), it already offers many features, and some others are already being developed, I encourage you to give it a try.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tiangolo/sqlmodel"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sqlmodel.tiangolo.com/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-fire"&gt;
  &lt;/a&gt;
  Python Fire
&lt;/h2&gt;

&lt;p&gt;Python Fire is a library designed by Google for automatically generating command-line interfaces (CLIs) from absolutely any Python object, so basically you can create a Python method and generate a CLI from it.&lt;/p&gt;

&lt;p&gt;Here are some examples,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello %s!"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After import &lt;code&gt;fire&lt;/code&gt;, we can use it to generate a CLI from &lt;code&gt;greeting&lt;/code&gt; in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  &lt;span class="c1"&gt;# Hello World!
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Juan&lt;/span&gt;  &lt;span class="c1"&gt;# Hello Juan!
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;  &lt;span class="c1"&gt;# Shows usage information.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this library is really helpful for debugging, developing some Python scripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire/blob/master/docs/using-cli.md"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like to play with CLIs, you should try &lt;a href="https://github.com/tiangolo/typer"&gt;Typer&lt;/a&gt;, another great tool for building CLIs with Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sherlock"&gt;
  &lt;/a&gt;
  Sherlock
&lt;/h2&gt;

&lt;p&gt;This is simple, a Python script for searching usernames across several social networks, how cool is that huh?&lt;/p&gt;

&lt;p&gt;I tried with my username and there are some sites that I don‚Äôt know about, I should look into that‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgF1vBtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkxdvpr6qt44l8fvcobb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgF1vBtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkxdvpr6qt44l8fvcobb.png" alt="sherlock" width="811" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sherlock-project/sherlock"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#changedetectionio"&gt;
  &lt;/a&gt;
  changedetection.io
&lt;/h2&gt;

&lt;p&gt;This is a tool for monitoring websites and get notifications when they change, so if you want to be on top of new information on the sites you like the most, give it a try. &lt;/p&gt;

&lt;p&gt;Some use cases for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Governmental department updates (changes are often only on their websites)&lt;/li&gt;
&lt;li&gt;Products and services have a change in pricing&lt;/li&gt;
&lt;li&gt;New software releases, security advisories when you're not on their mailing list.&lt;/li&gt;
&lt;li&gt;Festivals with changes&lt;/li&gt;
&lt;li&gt;Real estate listing changes&lt;/li&gt;
&lt;li&gt;COVID-19 related news from government websites&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best part about changedetection is that it is open source and you can self-host it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgtlmoon/changedetection.io"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you like this list and leave a comment if you have used some of these tools or if you know about other Python projects gaining popularity.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>A beginner's guide to the Elixir programming language</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 30 Dec 2021 21:22:55 +0000</pubDate>
      <link>https://dev.to/educative/a-beginners-guide-to-the-elixir-programming-language-1p34</link>
      <guid>https://dev.to/educative/a-beginners-guide-to-the-elixir-programming-language-1p34</guid>
      <description>&lt;p&gt;If you're looking to learn a new programming language, I recommend checking out Elixir. Elixir is a process-oriented, functional programming language that runs on the Erlang virtual machine (BEAM). The language was influenced by Ruby. This inspiration can be seen and felt in Elixir's ecosystem and tooling options. Elixir is known to be easy to learn and widely applicable within the software development industry. &lt;/p&gt;

&lt;p&gt;In this beginner's tutorial, I'll walk you through the Elixir language and discuss its use cases, tools, syntax, and much more.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#elixirprogramming"&gt;What is Elixir?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elixirvserlang"&gt;Elixir vs Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elixirusesandtools"&gt;Elixir features, tools, and uses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elixirfunctionalprogramming"&gt;Intro to Elixir functional programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elixircode"&gt;Let's look at some Elixir code!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;Next steps&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-elixir"&gt;
  &lt;/a&gt;
  What is Elixir?
&lt;/h2&gt;

&lt;p&gt;Elixir is a general-purpose, functional, concurrent programming language created by Jos√© Valim. Valim worked on the Ruby on Rails team, and he decided to create Elixir after experiencing issues when trying to improve the performance of Ruby on Rails. His goal was to create a language that could &lt;strong&gt;run on top of Erlang‚Äôs VM&lt;/strong&gt;, BEAM, and that could be compatible with the Erlang ecosystem.&lt;/p&gt;

&lt;p&gt;The Elixir syntax &lt;strong&gt;shares many similarities with the Ruby syntax&lt;/strong&gt; and is widely used to build fault-tolerant, scalable, and maintainable applications. The language provides scalability, concurrency, fault tolerance, and low latency. &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elixir-vs-erlang"&gt;
  &lt;/a&gt;
  Elixir vs Erlang
&lt;/h3&gt;

&lt;p&gt;Elixir is built on top of Erlang and runs on the Erlang VM. The two languages do share certain similarities, but they also have some different applications and use cases. &lt;/p&gt;

&lt;p&gt;Both languages support &lt;strong&gt;concurrency and fault tolerance&lt;/strong&gt;. You could safely choose &lt;em&gt;either&lt;/em&gt; language to build a large distributed system with high availability, but Elixir has a reputation for running faster than Erlang. Elixir gets the Open Telecom Platform (OTP) from Erlang, which is Erlang‚Äôs standard library used for concurrent programming.&lt;/p&gt;

&lt;p&gt;If you want the freedom to work with different databases and frameworks, Erlang may be the better choice. Elixir is limited in database and framework support. However, if you want the &lt;strong&gt;flexibility to work with different cloud platforms&lt;/strong&gt;, Elixir is the better option. Elixir supports many cloud platforms, while Erlang only supports a few.&lt;/p&gt;

&lt;p&gt;There are also some &lt;strong&gt;notable syntax differences&lt;/strong&gt; between Elixir and Erlang:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Erlang has certain operators that Elixir does not. In Erlang, logical &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators are available, but they aren‚Äôt available in Elixir. &lt;/li&gt;
&lt;li&gt;In Erlang, we use a colon &lt;code&gt;:&lt;/code&gt; to invoke a function using the respective module, and in Elixir we use &lt;code&gt;.&lt;/code&gt; to invoke a function.&lt;/li&gt;
&lt;li&gt;In Elixir, we can assign variables more than once, but in Erlang, we can‚Äôt assign variables more than once. Doing so would result in an error during execution.&lt;/li&gt;
&lt;li&gt;In Elixir, default values for arguments are always defined, but in Erlang, they aren‚Äôt.
Overall, both languages are reliable and maintainable. In recent years, Elixir has become the preferred language of the two due to its advanced support, simple syntax, and scalability.

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elixir-features-tools-and-uses"&gt;
  &lt;/a&gt;
  Elixir features, tools, and uses
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#elixir-features-and-tools"&gt;
  &lt;/a&gt;
  Elixir features and tools
&lt;/h3&gt;

&lt;p&gt;Elixir has many great features such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elixir compiles to bytecode for the Erlang VM&lt;/li&gt;
&lt;li&gt;Metaprogramming with macros and polymorphism via protocols&lt;/li&gt;
&lt;li&gt;Emphasis on higher-order functions and recursion&lt;/li&gt;
&lt;li&gt;Lazy and async collections with streams&lt;/li&gt;
&lt;li&gt;Pattern matching&lt;/li&gt;
&lt;li&gt;Built-in tooling for things like remote debugging, dependency management, code compilation, and more&lt;/li&gt;
&lt;li&gt;Elixir is dynamically typed, so all types are checked at runtime rather than at compilation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The language also has a solid set of web development tools such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mix&lt;/strong&gt;: Mix is a build tool that allows you to create projects, run tests, manage tasks, and much more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IEx&lt;/strong&gt;: IEx, Elixir‚Äôs interactive shell, provides you with many features like auto-complete, debugging, code reloading, and more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Phoenix&lt;/strong&gt;: Phoenix is known to be one of the best web frameworks. It‚Äôs based on the MVC architecture just like Ruby on Rails.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#elixir-uses"&gt;
  &lt;/a&gt;
  Elixir uses
&lt;/h3&gt;

&lt;p&gt;Elixir is great for web applications of any size, web APIs (such as JSON or GraphQL), event-driven systems, distributed systems, internet of things, embedded systems, and much more. Many top companies use Elixir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Discord&lt;/strong&gt;: Discord used Elixir to build their service and in 2017 successfully handled five million concurrent users and millions of events per second.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Moz&lt;/strong&gt;: Moz used Elixir on their backend to decrease their disk space and improve the speed of their API.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pinterest&lt;/strong&gt;: Pinterest uses Elixir for its notification system to minimize the number of servers they use and clean up their code. Elixir helped them improve the performance of their notification system to deliver 14,000 per second.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adobe&lt;/strong&gt;: Adobe used Elixir to build a client/cloud app for collaborative photography workflows.

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro-to-elixir-functional-programming"&gt;
  &lt;/a&gt;
  Intro to Elixir functional programming
&lt;/h2&gt;

&lt;p&gt;Elixir is a functional programming language. With functional languages like Elixir, we can make better use of our CPU multi-cores and write shorter and more explicit code. To better understand functional programming, I should first introduce the following fundamental principles: &lt;strong&gt;immutability&lt;/strong&gt;, &lt;strong&gt;functions&lt;/strong&gt;, and &lt;strong&gt;declarative code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In functional programming, all values created in the program are immutable. By default, each function has a stable value, which means that lock mechanisms aren‚Äôt needed. This simplifies parallel work. Immutability is showing up more in conventional programming languages. These languages typically provide the immutable mechanism by giving an immutable data type alternative or a method to turn a value immutable. &lt;/p&gt;

&lt;p&gt;Next, let‚Äôs talk about functions. In functional programming, functions are the &lt;strong&gt;primary tools for building programs&lt;/strong&gt;. It decreases the complexity of building large apps when functions have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Immutable values&lt;/li&gt;
&lt;li&gt;The result of the function is only affected by the function‚Äôs arguments&lt;/li&gt;
&lt;li&gt;The function doesn‚Äôt generate effects beyond the returned values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These functions are also known as &lt;strong&gt;pure functions&lt;/strong&gt;. There are more complex and unpredictable functions, which are known as &lt;strong&gt;impure functions&lt;/strong&gt;. In functional programming, values are always passed explicitly between functions, which makes the inputs and outputs clear. Functions can also be used in arguments and results of functions.&lt;/p&gt;

&lt;p&gt;Finally, let‚Äôs take a quick look at declarative code. Declarative programming focuses on &lt;strong&gt;&lt;em&gt;what&lt;/em&gt; is necessary to solve a problem&lt;/strong&gt;, instead of &lt;em&gt;how&lt;/em&gt; to solve a problem (which is what we see with imperative programming). In general, declarative code is typically more clear and concise than imperative code. With more clear and concise code, we run into fewer problems (like bugs!).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-look-at-some-elixir-code"&gt;
  &lt;/a&gt;
  Let's look at some Elixir code!
&lt;/h3&gt;

&lt;p&gt;Now, we‚Äôll take some time to look at some very basic Elixir code from the &lt;a href="https://elixir-lang.org/getting-started/introduction.html"&gt;elixir-lang official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h4&gt;

&lt;p&gt;Elixir &lt;strong&gt;uses UTF-8 to encode strings&lt;/strong&gt;. UTF-8 is a variable-width character encoding that uses one to four eight-bit bytes to store each code point. Strings are surrounded by double quotes, like &lt;code&gt;‚Äùthis‚Äù&lt;/code&gt;. Let‚Äôs take a look at a simple &lt;code&gt;Hello, World!&lt;/code&gt; in Elixir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;IO.puts("Hello, World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#atoms"&gt;
  &lt;/a&gt;
  Atoms
&lt;/h4&gt;

&lt;p&gt;Atoms are constants whose values are their own names. In other languages, they are called &lt;em&gt;symbols&lt;/em&gt;. They‚Äôre typically used to enumerate over distinct values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex&amp;gt; :cat
:cat
iex&amp;gt; :dog
:dog
iex&amp;gt; :fish
:fish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#booleans"&gt;
  &lt;/a&gt;
  Booleans
&lt;/h4&gt;

&lt;p&gt;Elixir supports the booleans &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex&amp;gt; true
true
iex&amp;gt; true == false
false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#arithmetic-operations"&gt;
  &lt;/a&gt;
  Arithmetic operations
&lt;/h4&gt;

&lt;p&gt;Let‚Äôs take a look at a couple of arithmetic operations in Elixir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex&amp;gt; 2 + 2
4
iex&amp;gt; 10 * 2
20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Elixir, the divide operator &lt;code&gt;/&lt;/code&gt; always returns as a float:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex&amp;gt; 8 / 2
4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#keyword-lists"&gt;
  &lt;/a&gt;
  Keyword lists
&lt;/h4&gt;

&lt;p&gt;When we have a list of tuples and the first item of the tuple is an atom, we can call it a &lt;em&gt;keyword list&lt;/em&gt;. Here‚Äôs an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex&amp;gt; list = [{:c, 1}, {:d, 2}]
[c: 1, d: 2]
iex&amp;gt; list == [c: 1, d: 2]
true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#modules-and-functions"&gt;
  &lt;/a&gt;
  Modules and functions
&lt;/h4&gt;

&lt;p&gt;In Elixir, functions are grouped into modules. An example of a module is the &lt;code&gt;String&lt;/code&gt; module. Here‚Äôs an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex&amp;gt; String.length("elixir")
6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other modules include compilation, scripted mode, function capturing, default arguments, and more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first steps with Elixir! It‚Äôs a functional and dynamic language used for building scalable and maintainable web applications. Elixir has a reputation for being fun and easy to learn, and there‚Äôs an active Elixir community where you can interact with other Elixir programmers. There are many companies looking for Elixir developers, meaning there are plenty of job opportunities available if you want to pick up this exciting language. There‚Äôs still so much to learn about Elixir programming, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Higher-order functions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/introduction-metaprogramming-elixir"&gt;Metaprogramming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning Elixir, check out Educative‚Äôs course &lt;a href="https://www.educative.io/courses/functional-programming-elixir"&gt;&lt;strong&gt;Learn Functional Programming with Elixir&lt;/strong&gt;&lt;/a&gt;. In this curated course, you‚Äôll learn the fundamentals of Elixir, advanced concepts, and how to design an app using Elixir and functional programming principles. &lt;br&gt;
&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-about-other-popular-programming-languages"&gt;
  &lt;/a&gt;
  Learn about other popular programming languages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/web-development-in-python"&gt;A complete guide to web development in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/learn-java-from-scratch"&gt;Learn Java from scratch with these easy steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/level-up-javascript-coding-challenges"&gt;Level up your JavaScript skills with 10 coding challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>elixir</category>
    </item>
    <item>
      <title>#1 - Codewars 100 days challenge</title>
      <author>Cesar Del rio</author>
      <pubDate>Thu, 30 Dec 2021 21:18:59 +0000</pubDate>
      <link>https://dev.to/cesar__dlr/1-codewars-100-days-challenge-59f8</link>
      <guid>https://dev.to/cesar__dlr/1-codewars-100-days-challenge-59f8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-points-of-reflection-8-kyu"&gt;
  &lt;/a&gt;
  #1 - Points of reflection (8 kyu)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;br&gt;
"Point reflection" or "point symmetry" is a basic concept in geometry where a given point, P, at a given position relative to a mid-point, Q has a corresponding point, P1, which is the same distance from Q but in the opposite direction.&lt;/p&gt;

&lt;p&gt;Task&lt;br&gt;
Given two points P and Q, output the symmetric point of point P about Q. Each argument is a two-element array of integers representing the point's X and Y coordinates. Output should be in the same format, giving the X and Y coordinates of point P1. You do not have to validate the input.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My notes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiJ5ZZ9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81if59dbm9yldwfykkz1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiJ5ZZ9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81if59dbm9yldwfykkz1.jpeg" alt="Image description" width="880" height="1101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My solution:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function symmetricPoint(p, q) {
  return [2*q[0]-p[0], 2*q[1]-p[1] ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br&gt;
I found the formula for getting the P1 coordinate, the formula is P1(2Qx - Px, 2Qy - Py), then I just passed this formula with the array index positions and returned the result as an array&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Cesardlr"&gt;My Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/cesar__dlr"&gt;My twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.codewars.com/kata/57bfea4cb19505912900012c"&gt;Solve this Kata&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pycraft Progress report #6</title>
      <author>Tom Jebbo</author>
      <pubDate>Thu, 30 Dec 2021 21:18:25 +0000</pubDate>
      <link>https://dev.to/pycraftdev/pycraft-progress-report-6-51fl</link>
      <guid>https://dev.to/pycraftdev/pycraft-progress-report-6-51fl</guid>
      <description>&lt;p&gt;&lt;em&gt;This is transferred roughly weekly from my Twitter profile (here: &lt;a href="https://twitter.com/PycraftDev"&gt;https://twitter.com/PycraftDev&lt;/a&gt;) to here on Dev! This is for the week beginning the 20th of December!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can find the latest release of Pycraft (v0.9.3) here: &lt;a href="https://github.com/PycraftDeveloper/Pycraft"&gt;https://github.com/PycraftDeveloper/Pycraft&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can find the latest developer preview of Pycraft (v0.9.4-1) here: &lt;a href="https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.4-1"&gt;https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.4-1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can find the latest feature preview for Pycraft (v0.9.5-0) here: &lt;a href="https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.5-0"&gt;https://github.com/PycraftDeveloper/Pycraft/tree/Pycraft-v0.9.5-0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also find the latest documentation for Pycraft here: &lt;a href="https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/"&gt;https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/&lt;/a&gt; &lt;br&gt;
&lt;em&gt;although be aware there is a lot of changes occurring here, and the link may be subject to change.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#december-20th-2021"&gt;
  &lt;/a&gt;
  December 20th - 2021
&lt;/h2&gt;

&lt;p&gt;Updates! I've been making lots of progress today, I've fixed a lot of bugs and improved the benchmarks section of the program, as it's probably one of the least efficient areas, and there are a lot of really basic things that can be quickly changed that'll make a big difference, but that aside I've had proof today that the update detector code works perfectly (as numpy released an update today), and I've also published the first draft of the documentation today (to as far as I've got) I've written 10,000 words roughly, and I've gone through about 4 of the modules, so I'm making progress, and it's really detailed where necessary, so I hope it'll be helpful, and naturally each update will take less time to write! Lots of progress all around today!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-21st-2021"&gt;
  &lt;/a&gt;
  December 21st - 2021
&lt;/h2&gt;

&lt;p&gt;Well, I have good news, I've finished 2 more modules and am well over half way through one as I speak, the documentation is at least 16, 000 words long at present. The last module I completed I'd say that more than half of the documentation was skipped because it was already known, the solution is working well. I've also been working on bug fixes for Pycraft v0.9.4 as I go through writing the documentation, I've found a few, especially in the benchmark and character customer GUI, and have plans to heavily optimise the benchmark process, I've already been working really hard to improve its effectiveness in this update. Just to note, the documentation I'm writing is for Pycraft v0.9.3 as it's the one currently published and after every release of Pycraft, there will be a very brief pause from development to update the documentation. I've also updated the folks over at Dev, and I have plans to share more content there, but all my time currently is dedicated to Pycraft's documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-22nd-2021"&gt;
  &lt;/a&gt;
  December 22nd - 2021
&lt;/h2&gt;

&lt;p&gt;Today saw the addition of a new method to install Pycraft, using Pipenv, this was brought forward and added by HarryFBP (&lt;a href="https://github.com/HenryFBP"&gt;https://github.com/HenryFBP&lt;/a&gt;) so a massive shoutout there! I've also spent today fixing more bugs in Pycraft, and also work on the documentation for Pycraft, I've published the progress made since I started now on read the docs here: &lt;a href="https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/"&gt;https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/&lt;/a&gt; but once I've finished writing it, I need to restructure the documentation, because it‚Äôs too big to render in GitHub wikis, and not very efficient, so I'll be breaking it down into separate files, instead of loading the whole documentation at once! I've also got plans to change the structure of the documentation internally as at present the link (&lt;a href="https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/"&gt;https://python-pycraft.readthedocs.io/en/pycraft-v0.9.3/&lt;/a&gt;) will break the moment I release Pycraft v0.9.4 and its documentation (more updates to GitHub in Pycraft v0.9.4-1 and onwards coming with work on the installer!) so I'll need to fix that somehow. I have finished all the way from the Achievements to Credits (alphabetically) and managed the entire credits menu, and half the one before it in a day, it's one of the larger programs, lots of the files with "utils" on the end will be shorter and quicker. Settings, main and home screen, will probably need a few days each but I'm not sure yet! I aim to be about 45 percent done by Christmas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-23rd-2021"&gt;
  &lt;/a&gt;
  December 23rd - 2021
&lt;/h2&gt;

&lt;p&gt;I'm excited to announce, that I've finished the module "DisplayUtils" in documentation, so expect to see that published tomorrow, also I'm aware that the documentation I published previously was the one before the spell check but in addition, I've been working on animations for Pycraft, this will arrive in Pycraft v0.9.5 with the new start menu (thanks &lt;a class="mentioned-user" href="https://dev.to/demirdogukan"&gt;@demirdogukan&lt;/a&gt;!) and will feature fading in and out of GUIs, and more! I'll share an early prototype tomorrow, there are a few bugs to iron out, but don't worry I‚Äôm focusing on the documentation and Pycraft v0.9.4, but I want Pycraft v0.9.5 to be quick based on how delayed Pycraft v0.9.4 could be, but I don't want to introduce loads of bugs and issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-24th-2021"&gt;
  &lt;/a&gt;
  December 24th - 2021
&lt;/h2&gt;

&lt;p&gt;I've been going through the 'DisplayUtils' module, and it's very long and there is a lot of repeated code, I'm figuring out a way to simplify the whole process, but adding in resize support to Pycraft was a nightmare, in addition I've been going through the documentation, fixing spelling and adding more details where they might be necessary... I've so been working really hard on a text wrapper for Pycraft, I have since the start of December, because I‚Äôd make a solution but then I'd test it, and there may be a few scenarios where it doesn't work well, so then it's back to tweaking it, but I think I'm close, and being able to do this will massively help the credits, 3D game engine and benchmark GUIs where there is large blocks of text to render, which will also mean they are easier to work on and update (I need to update the credits and this should make that a bit easier). I've also as you may have seen, shared a demo of the transition animation between different menus in the GUI, that I've only worked on for a few hours and am very pleased with the result, after the documentation is finished, I'll work on the installer, and then there are a few GUIs that need a bit of optimisation, which I'm noticing as I go through the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-25th-2021"&gt;
  &lt;/a&gt;
  December 25th - 2021
&lt;/h2&gt;

&lt;p&gt;Pycraft progress update time (yes, I did work on Christmas day, but only for a few hours), today saw tweaks to the documentation, and I've published my current progress to read the docs, and restructured the documentation slightly behind the scenes so now when I update the project it should update the documentation suitably with the release of Pycraft v0.9.4! I've also fixed numerous bugs with the game, and removed lines of code that are now irrelevant, and tested the game with higher refresh rates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-26th-2021"&gt;
  &lt;/a&gt;
  December 26th - 2021
&lt;/h2&gt;

&lt;p&gt;lots of progress made today, more work on the documentation, tweaking some lines, planning a way to restructure the documentation so that the entire documentation isn't loaded at one time (because it's really, I‚Äôd big) and also, I've been planning on a way to do the same thing for the GitHub wikis page. I've also been investigating the cause of the issue, and have narrowed it down to 2 lines, and I think I am close to a potential fix, this has been a really frustrating bug and I'll be grateful to be rid of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#december-27th-2021"&gt;
  &lt;/a&gt;
  December 27th - 2021
&lt;/h2&gt;

&lt;p&gt;Pycraft v0.9.4, the most current update, will feature many things, as a part of that the error screen has been changed heavily simplifying the process to avoid complications and more possible errors, this has been done to help development for the rest of Pycraft, now with details about where the error occurred, this has been done so the project now works with long error messages and the project is simplified somewhat. I fear this may have introduced lots of bugs because it's such a global change but as far as I'm aware, there are no bugs of any kind in Pycraft, but testing will not stop and lots of testing has still to be completed before I come even slightly close to a release in the dev branch of Pycraft v0.9.4-1, which is likely on the cards before the new year, in addition on the bug front, the issue with transitioning between the 2D and 3D game engines and the process being really slow and unresponsive has been fixed, and I've learned a bit more about the bug and will know how to fix it in future in addition to that, I've also cleaned up a few un-needed functions and images, no work on the documentation today, although that will resume soon after the next dev release of Pycraft. I've also today added a new feature to the Visual-Music program, but no update to that is planned now for some time, unless a serious bug occurs there. I've also shortened the 3D game engines basic commands library (either "base" in Pycraft v0.9.3, or "GameEngineWindowUtils" in Pycraft v0.9.4) and done a lot more behind the scene, I've been planning lots as I write documentation, and now I'm finished implementing new features for this stage in Pycraft v0.9.4, but will do bug fixes and then release to the dev channel, then I'll be working on the documentation as I plan the installer, then in the new year. Once the plan for the installer is done and hopefully the documentation is too, I'll be ready to work on that, then I'll be ready to release Pycraft v0.9.4 soon after that! Also, this is a "messy" long update, when we get onto Pycraft v0.9.5 and others, progress will be more linear and less spread out and much more interesting!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>opensource</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>ES2022 Preview: 10 Exciting JavaScript Language Features From 2021</title>
      <author>Lars Grammel</author>
      <pubDate>Thu, 30 Dec 2021 21:07:56 +0000</pubDate>
      <link>https://dev.to/p42/es2022-preview-10-exciting-javascript-language-features-from-2021-4imc</link>
      <guid>https://dev.to/p42/es2022-preview-10-exciting-javascript-language-features-from-2021-4imc</guid>
      <description>&lt;p&gt;JavaScript evolves quickly. In 2021, several &lt;a href="https://www.proposals.es/"&gt;proposals&lt;/a&gt; have moved to Stage 4 of the &lt;a href="https://tc39.es/process-document/"&gt;TC39 process&lt;/a&gt; and will be included in ES2022. They add the following features to JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classes and Instances&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Private instance fields, methods, and accessors&lt;/li&gt;
&lt;li&gt;Existence checks for private fields&lt;/li&gt;
&lt;li&gt;Public static class fields&lt;/li&gt;
&lt;li&gt;Private static class fields and methods&lt;/li&gt;
&lt;li&gt;Static class initialization blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Module Loading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Top-Level &lt;code&gt;await&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Built-in Objects&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error: &lt;code&gt;.cause&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Array, String, and TypedArray: &lt;code&gt;.at()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Object: &lt;code&gt;.hasOwn()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;RegExp: match &lt;code&gt;.indices&lt;/code&gt; ('&lt;code&gt;d&lt;/code&gt;' flag)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post describes each feature, shows an example of how it can be used, and looks at current browser and Node.js support (as of December 2021). Let's get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-instance-fields-methods-and-accessors"&gt;
  &lt;/a&gt;
  Private Instance Fields, Methods, and Accessors
&lt;/h3&gt;

&lt;p&gt;Encapsulation is one of the core principles of object-oriented programming. It is usually implemented using visibility modifiers such as &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The private instance fields, methods, and accessors features [&lt;a href="https://github.com/tc39/proposal-class-fields"&gt;1&lt;/a&gt;, &lt;a href="https://github.com/tc39/proposal-private-methods"&gt;2&lt;/a&gt;] add hard visibility limitations to JavaScript&lt;/strong&gt;. The &lt;code&gt;#&lt;/code&gt; prefix marks a field, method, or accessor in a class as private, meaning that you cannot access it from outside the instances themselves.&lt;/p&gt;

&lt;p&gt;Here is an example of a private field and method; accessors work similarly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// SyntaxError&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;// SyntaxError&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-javascript_classes_private_class_fields"&gt;Most browsers&lt;/a&gt; (Dec 2021 usage: ~90%) and Node.js 12+ support private instance fields. The &lt;a href="https://caniuse.com/mdn-javascript_classes_private_class_methods"&gt;support for private methods and accessors is more limited in browsers&lt;/a&gt; (Dec 2021 usage: ~80%). Node.js has supported the feature since version 14.6. You can &lt;a href="https://blog.saeloun.com/2021/06/24/babel-enables-class-field-and-private-methods.html"&gt;transpile your code with Babel&lt;/a&gt; to use private class fields and methods on environments that don't directly support them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#existence-checks-for-private-fields"&gt;
  &lt;/a&gt;
  Existence Checks For Private Fields
&lt;/h3&gt;

&lt;p&gt;Since trying to access a non-existing private field on an object throws an exception, it needs to be possible to check if an object has a given private field. &lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-private-fields-in-in"&gt;&lt;code&gt;in&lt;/code&gt; operator can be used to check if a private field is available on an object&lt;/a&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;isExampleInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_classes_private_class_fields_in"&gt;browser support for using the &lt;code&gt;in&lt;/code&gt; operator on private fields&lt;/a&gt; is limited (Dec 2021 usage: ~70%). Node.js does not support it. You can &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-private-property-in-object"&gt;transpile usages of the &lt;code&gt;in&lt;/code&gt; operator for private fields with Babel&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-static-class-fields"&gt;
  &lt;/a&gt;
  Public Static Class Fields
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-static-class-features#static-public-fields"&gt;Static class fields&lt;/a&gt; are a convenient notation for adding properties to the class object.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// without static class fields:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// with static class fields:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;idCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-javascript_classes_static_class_fields"&gt;Most browsers&lt;/a&gt; (Dec 2021 usage: ~90%) and Node.js 12+ support public class fields. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-class-fields-and-methods"&gt;
  &lt;/a&gt;
  Private Static Class Fields and Methods
&lt;/h3&gt;

&lt;p&gt;Similar to private instance fields and methods, encapsulation and visibility limitations are helpful on the class level. &lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-static-class-features"&gt;The private static methods and fields feature&lt;/a&gt; adds hard visibility limitations for class-level fields and methods using the &lt;code&gt;#&lt;/code&gt; prefix.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;idCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// static private&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getNextId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// static private&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;idCounter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// instance private&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getNextId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// c1 c2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The browser and Node.js support are similar to the private instance fields and methods above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-class-initialization-blocks"&gt;
  &lt;/a&gt;
  Static Class Initialization Blocks
&lt;/h3&gt;

&lt;p&gt;Sometimes it is necessary or convenient to do more complex initialization work for static class fields. For the private static fields feature from above, this initialization must even happen within the class because the private fields are not accessible otherwise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-class-static-block"&gt;static initializer blocks feature&lt;/a&gt; provides a mechanism to execute code during the class definition evaluation&lt;/strong&gt;. The code in a block statement with the &lt;code&gt;static&lt;/code&gt; keyword is executed when the class is initialized:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;propertyA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// private&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// static initializer block&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someProperty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anotherProperty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;propertyB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_classes_static_initialization_blocks"&gt;browser support for static class initialization blocks&lt;/a&gt; is limited (Dec 2021: ~70%). Node.js does not support it. You can &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-class-static-block"&gt;transpile code with static initializer blocks with Babel&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toplevel-await"&gt;
  &lt;/a&gt;
  Top-Level Await
&lt;/h3&gt;

&lt;p&gt;Async functions and the &lt;code&gt;await&lt;/code&gt; keyword were introduced in ES2017 to simplify working with promises. However, &lt;code&gt;await&lt;/code&gt; could only be used inside &lt;code&gt;async&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-top-level-await"&gt;top-level &lt;code&gt;await&lt;/code&gt; feature for ES modules&lt;/a&gt;&lt;/strong&gt; makes it easy to use &lt;code&gt;await&lt;/code&gt; in CLI scripts (e.g., with &lt;code&gt;.mjs&lt;/code&gt; sources and &lt;a href="https://github.com/google/zx"&gt;zx&lt;/a&gt;), and for dynamic imports and data loading. It extends the &lt;code&gt;await&lt;/code&gt; functionality into the module loader, which means that dependent modules will wait for async modules (with top-level &lt;code&gt;await&lt;/code&gt;) to be loaded.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// load-attribute.mjs &lt;/span&gt;
&lt;span class="c1"&gt;// with top-level await&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://some.url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;someAttribute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.mjs &lt;/span&gt;
&lt;span class="c1"&gt;// loaded after load-attribute.mjs is fully loaded&lt;/span&gt;
&lt;span class="c1"&gt;// and its exports are available&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./load-attribute.mjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Top-level await is &lt;a href="https://caniuse.com/mdn-javascript_operators_await_top_level"&gt;supported on modern browsers&lt;/a&gt; (Dec 2021 usage: ~80%) and Node.js 14.8+. It is only available for ES modules, and it is doubtful that CommonJS modules will ever get top-level await support. Code with top-level &lt;code&gt;await&lt;/code&gt; can be transpiled during the bundling phase to support older browsers, such as &lt;a href="https://webpack.js.org/configuration/experiments/"&gt;Webpack 5 &lt;code&gt;experiments.topLevelAwait = true&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-cause"&gt;
  &lt;/a&gt;
  Error: .cause
&lt;/h3&gt;

&lt;p&gt;Errors are often wrapped to provide meaningful messages and record the error context. However, this means that the original error can get lost. Attaching the original error to the wrapping error is desirable for logging and debugging purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-error-cause"&gt;error cause feature&lt;/a&gt; provides a standardized way to attach the original error to a wrapping error.&lt;/strong&gt; It adds the &lt;code&gt;cause&lt;/code&gt; option to the &lt;code&gt;Error&lt;/code&gt; constructor and a &lt;code&gt;cause&lt;/code&gt; field for retrieving the original error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://service/api/user/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Loading data for user with id &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; failed`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Error: Loading data for user with id 3 failed&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: Failed to fetch&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_builtins_error_cause"&gt;current browser support for the error clause feature&lt;/a&gt; is limited (Dec 2021 usage: ~70%), and it is not available in Node.js yet. You can use the &lt;a href="https://github.com/es-shims/error-cause"&gt;error cause polyfill&lt;/a&gt; to start using the feature today, even in JS environments where it is not supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-string-and-typedarray-at"&gt;
  &lt;/a&gt;
  Array, String, and TypedArray: .at()
&lt;/h3&gt;

&lt;p&gt;Getting elements from the end of an array or string usually involves subtracting from array's length, for example, &lt;code&gt;let lastElement = anArray[anArray.length - 1]&lt;/code&gt;. This requires that the array is stored in a temporary variable and prevents seamless chaining.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-relative-indexing-method"&gt;.at() feature&lt;/a&gt; provides a way to get an element from the beginning (positive index) or the end (negative index) of a string or an array without a temporary variable.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getExampleValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    &lt;span class="c1"&gt;// c&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;       &lt;span class="c1"&gt;// c&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;      &lt;span class="c1"&gt;// h&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getExampleValue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// h - no temp var needed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-javascript_builtins_array_at"&gt;The browser support for the .at feature&lt;/a&gt; is currently limited (Dec 2021 usage: ~70%), and it is only available in Node.js 16.6+. You can use the &lt;a href="https://github.com/zloirock/core-js#relative-indexing-method"&gt;.at() polyfill from Core JS&lt;/a&gt; in the meantime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-hasown"&gt;
  &lt;/a&gt;
  Object: .hasOwn()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href="https://github.com/tc39/proposal-accessible-object-hasownproperty"&gt;Object.hasOwn feature&lt;/a&gt; is a more concise and robust way of checking if a property is directly set on an object.&lt;/strong&gt; It is a preferred alternative to using &lt;code&gt;hasOwnProperty&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// preferred&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_builtins_object_hasown"&gt;browser support is currently limited&lt;/a&gt; (Dec 2021 usage: ~70%), and you need Node 16.9+ to use &lt;code&gt;hasOwn&lt;/code&gt; directly. In the meantime there is a &lt;a href="https://github.com/zloirock/core-js/#accessible-objectprototypehasownproperty"&gt;Core JS polyfill for &lt;code&gt;hasOwn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regexp-match-indices-d-flag"&gt;
  &lt;/a&gt;
  RegExp: Match Indices ('d' Flag)
&lt;/h3&gt;

&lt;p&gt;By default, regular expression matches record the start index of the matched text, but not its end index and not the start and end indices of its capture groups. For use cases such as text editor syntax or search result highlighting, having capture group match indices as part of a regular expression match can be helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the &lt;a href="https://github.com/tc39/proposal-regexp-match-indices"&gt;regexp match indices feature ('d' flag)&lt;/a&gt;, the match and capture group indices are available in the &lt;code&gt;indices&lt;/code&gt; array property of the regular expression result.&lt;/strong&gt;&lt;br&gt;
The matched text position and the match indices position are the same, e.g., the full matched text is the first value in the match array and the indices array. The indices of the named captured groups are recorded in &lt;code&gt;indices.groups&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's match one:1.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/match&lt;/span&gt;&lt;span class="se"&gt;\s(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;word&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;digit&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example code has the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;'match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;one:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;index:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;input:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Let's match one:1."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;groups:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;word:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;digit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;indices:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;groups:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="err"&gt;digit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;word:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://caniuse.com/mdn-javascript_builtins_regexp_hasindices"&gt;browser support for the RegExp match indices feature is currently limited&lt;/a&gt; (Dec 2021 usage: ~80%). In Node.js, you can activate the feature with the &lt;code&gt;--harmony-regexp-match-indices&lt;/code&gt; flag, but it is disabled by default. You can use the &lt;a href="https://github.com/rbuckton/regexp-match-indices"&gt;RegExp match indices polyfill&lt;/a&gt; in the meantime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The new JavaScript from 2021 features help make development more convenient and robust, and most of them already work on the latest browsers and Node.js environments.&lt;/p&gt;

&lt;p&gt;However, many users are still on browsers and environments without full ES2022 support. For production use, it is essential to check the target environments and use polyfilling and transpiling as needed or to wait a bit longer before using the new features.&lt;/p&gt;

&lt;p&gt;Happy coding in 2022!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 5 technology books I read in 2021</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Thu, 30 Dec 2021 21:06:15 +0000</pubDate>
      <link>https://dev.to/ibrahimcesar/top-5-technology-books-i-read-in-2021-4b3l</link>
      <guid>https://dev.to/ibrahimcesar/top-5-technology-books-i-read-in-2021-4b3l</guid>
      <description>&lt;p&gt;My top five picks on technological / technical books I read in 2021 and some honorable mentions. I also read some fiction and non-fiction, in fact I finished a great science fiction series, &lt;em&gt;Remembrance of Earth‚Äôs Past&lt;/em&gt; made up of three books: &lt;em&gt;The Three-Body Problem&lt;/em&gt;, &lt;em&gt;The Dark Forest&lt;/em&gt; and &lt;em&gt;Death‚Äôs End&lt;/em&gt; by the Chinese author Liu Cixin, which is one of greatest science fiction series I ever read (I‚Äôm a big fan of Russian literature and science fiction). But for this list I picked the top tech-related ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-your-computer-is-on-fire"&gt;
  &lt;/a&gt;
  5. Your Computer Is On Fire
&lt;/h2&gt;

&lt;p&gt;Edited by Thomas S. Mullaney, Benjamin Peters, Mar Hicks and Kavita Philip&lt;/p&gt;

&lt;p&gt;This book is a collection of powerful essays from a great number of authors: Janet Abbate, Ben Allen, Paul N. Edwards, Nathan Ensmenger, Mar Hicks, Halcyon M. Lawrence, Thomas S. Mullaney, Safiya Umoja Noble, Benjamin Peters, Kavita Philip, Sarah T. Roberts, Sreela Sarkar, Corinna Schlombs, Andrea Stanton, Mitali Thakor, and Noah Wardrip-Fruin. Technology doesn‚Äôt happen in a vacuum. Much is talk about how "tech will change the world", "create experiences". Well, this &lt;strong&gt;is&lt;/strong&gt; intrinsically political. Is about we live, share, trade and connect. Nothing more political than that.&lt;/p&gt;

&lt;p&gt;I would never say judge an essay by its titles, but only take a glance at the titles could give a hint and take your attention. And yes, the essays here are great and direct to the point as the titles make clear. And if you work with technology, I urge you to give this book a chance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part I: Nothing Is Virtual

&lt;ul&gt;
&lt;li&gt;The Cloud Is A Factory&lt;/li&gt;
&lt;li&gt;Your AI Is A Human&lt;/li&gt;
&lt;li&gt;A Network Is Not A Network&lt;/li&gt;
&lt;li&gt;The Internet Will Be Decolonized&lt;/li&gt;
&lt;li&gt;Capture Is Pleasure&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Part II: This Is An Emergency

&lt;ul&gt;
&lt;li&gt;Sexism Is A Feature, Not A Bug&lt;/li&gt;
&lt;li&gt;Gender Is A Corporate Tool&lt;/li&gt;
&lt;li&gt;Siri Disciplines&lt;/li&gt;
&lt;li&gt;Your Robot Isn't Neutral&lt;/li&gt;
&lt;li&gt;Broken Is Word&lt;/li&gt;
&lt;li&gt;You Can't Make Games About Much&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Part III: Where Will The Fire Spread?

&lt;ul&gt;
&lt;li&gt;Code Is Not Empowerment&lt;/li&gt;
&lt;li&gt;Source Code Isn't&lt;/li&gt;
&lt;li&gt;Skills Will Not Set You Free&lt;/li&gt;
&lt;li&gt;Platforms Are Infrastructures On Fire&lt;/li&gt;
&lt;li&gt;Typing Is Dead&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In times like theses in which tech is under (the much needed) public scrutiny, is important to broader our view of technology as "technical-only" and understand the tangled web of political, social and power dynamics in place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-sooner-safer-happier"&gt;
  &lt;/a&gt;
  4. Sooner Safer Happier
&lt;/h2&gt;

&lt;p&gt;One review title on Amazon says &lt;strong&gt;Most honest book I have read in last 4 years&lt;/strong&gt;. I agree. Because it speaks against the so-called &lt;a href="https://martinfowler.com/articles/agile-aus-2018.html"&gt;&lt;em&gt;Agile Industrial Complex&lt;/em&gt;&lt;/a&gt; that broke agile, or well, Agile‚Ñ¢. I already &lt;a href="https://ibrahimcesar.cloud/blog/sooner-safer-happier-antipatterns-and-patterns-for-business-by-jonathan-smart/"&gt;wrote about this book earlier this year&lt;/a&gt; and even made a whole talk around it, which I called &lt;a href="https://dev.toblog/peopleops-integracao-continua-do-time-entrega-continua-de-valor/"&gt;PeopleOps&lt;/a&gt; (content in pt-br) and made a mix with another great book, &lt;strong&gt;Team Topologies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Is a much needed look at Agile landscape that spoke a lot with me and how I see the landscape.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cloud-native-patterns"&gt;
  &lt;/a&gt;
  3. Cloud Native Patterns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://amzn.to/349UqG9"&gt;&lt;strong&gt;Cloud Native Patterns&lt;/strong&gt;: Designing change-tolerant software&lt;/a&gt; by Cornelia Davis is a brilliant book. The historical perspective the author gives us helps build our mental models and see the patterns that we are so deep that we even realize are constructions. Like the "request/response" model that permeates much of our development and the move to more reactive systems like the &lt;a href="https://ibrahimcesar.cloud/blog/event-driven-architectures/"&gt;Event Driven Architectures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;must read&lt;/strong&gt; for everyone in the Cloud field. The patterns covered are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event-driven microservices&lt;/li&gt;
&lt;li&gt;App redundancy&lt;/li&gt;
&lt;li&gt;Application configuration&lt;/li&gt;
&lt;li&gt;The application lifecycle&lt;/li&gt;
&lt;li&gt;Accessing apps&lt;/li&gt;
&lt;li&gt;Interaction redundancy&lt;/li&gt;
&lt;li&gt;Fronting services&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;li&gt;Cloud-native data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-the-cdk-book"&gt;
  &lt;/a&gt;
  2. The CDK Book
&lt;/h2&gt;

&lt;p&gt;In the 2021 I developed &lt;strong&gt;a lot&lt;/strong&gt; with AWS CDK. In fact, I started nothing on AWS without using it. Is a powerful tool.&lt;/p&gt;

&lt;p&gt;I made talks about CDK at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ibrahimcesar/devops-extreme"&gt;DevOps Extreme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ibrahimcesar.cloud/talks/2021-10-21-BrazilJSConf-2021/"&gt;BrazilJS&lt;/a&gt;, &lt;em&gt;the self proclaimed biggest JavaScript conference in the World&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9Gk_7qTkNgs"&gt;AWS Community Day ‚Äî Brazil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And another session on &lt;a href="https://ibrahimcesar.cloud/talks/2021-11-30-TDC-Future/"&gt;TDC Future&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And 2021 was an exceptional year for CDK with a &lt;a href="https://www.youtube.com/watch?v=mwp51yqxmtU"&gt;great spotlight in the work by Matt Coulter&lt;/a&gt; and off course, the launch of CDK v2, which comes with some significant improvements. No more problems with versioning and a model better to understand. The CDK Book &lt;strong&gt;is&lt;/strong&gt; &lt;a href="https://www.dynamodbbook.com/"&gt;The DynamoDB Book&lt;/a&gt; this developer tool deserved.&lt;/p&gt;

&lt;p&gt;Written by &lt;a href="https://twitter.com/mattbonig"&gt;Matthew Bonig&lt;/a&gt;, &lt;a href="https://twitter.com/hoegertn"&gt;Thorsten H√∂ger&lt;/a&gt;, &lt;a href="https://twitter.com/sathyabhat"&gt;Sathyajith Bhat&lt;/a&gt; and &lt;a href="https://twitter.com/nideveloper"&gt;Matt Coulter&lt;/a&gt;, &lt;a href="https://thecdkbook.com/"&gt;The CDK Book&lt;/a&gt; is a comprehensive guide that will give you access to provision and handle the plethora of AWS services.&lt;/p&gt;

&lt;p&gt;Written by &lt;a href="https://twitter.com/mattbonig"&gt;Matthew Bonig&lt;/a&gt;, &lt;a href="https://twitter.com/hoegertn"&gt;Thorsten H√∂ger&lt;/a&gt;, &lt;a href="https://twitter.com/sathyabhat"&gt;Sathyajitha Bhat&lt;/a&gt; and &lt;a href="https://twitter.com/nideveloper"&gt;Matt Coulter&lt;/a&gt;, &lt;a href="https://thecdkbook.com/"&gt;The CDK Book&lt;/a&gt; is an comprehensive guide that will give you access to provision and handle the plethora of AWS services.&lt;/p&gt;

&lt;p&gt;This year I even contributed with code for CDK!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#honorable-mentions"&gt;
  &lt;/a&gt;
  Honorable mentions üìö
&lt;/h3&gt;

&lt;p&gt;This was a year I had a deep dive in DDD ‚Äî Domain Driven Design, so my honorable mentions is all about DDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3mM5r74"&gt;Domain-Driven Design:Tackling Complexity in the Heart of Software&lt;/a&gt;, the "blue book" by Eric Evans, who "started thee fire". I also read before, but now after some years working with architecture in mind I come with fresh eyes and a much broader understanding than before.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3eDa4f8"&gt;Learning Domain-Driven Design: Aligning Software Architecture and Business Strategy&lt;/a&gt;, this book didn‚Äôt make the cut on my top 5 because I didn‚Äôt finish yet. I‚Äôm in about the middle and loving it. I think the author, Vlad Khononov, makes a great work of "organize" the content around DDD and gives new insights.&lt;/li&gt;
&lt;li&gt;
&lt;a href=""&gt;Implementing Domain-Driven Design&lt;/a&gt;,also by Vaughn Vernon takes you far beyond "DDD-lite" approaches that embrace DDD solely as a technical toolset, and shows you how to fully leverage DDD‚Äôs "strategic design patterns" using Bounded Context, Context Maps, and the Ubiquitous Language. Is not as solid as Khononov‚Äôs book, but the breakdown could help a lot make more sense of the mind map DDD gives us to tackle complexity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/33ZPOlK"&gt;Domain-Driven Design Distilled&lt;/a&gt; by Vaughn Vernon aims to be a concise, readable, and actionable book on DDD. "Distilled" is a term used even in Evan‚Äôs book and sometimes this book looks like a "DDD-lite" guide, but I think it serves as a good introduction&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://no-bs-ts.myshopify.com/"&gt;No BS TS&lt;/a&gt; book covers every single video in the popular &lt;a href="https://www.youtube.com/playlist?list=PLNqp92_EXZBJYFrpEzdO2EapvU0GOJ09n"&gt;No BS TS video series&lt;/a&gt; by Jack Herrington. Everything from basic types to generics, using Typescript with React and into Design Patterns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEAdyiqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dl2euo8ppmi5npv37w1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEAdyiqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dl2euo8ppmi5npv37w1.png" alt="Crafting Interpreters" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-crafting-interpreters"&gt;
  &lt;/a&gt;
  1. Crafting Interpreters
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Ever wanted to make your own programming language or wondered how they are designed and built?&lt;br&gt;
If so, this book is for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://craftinginterpreters.com/"&gt;Crafting Interpreters&lt;/a&gt; by &lt;a href="https://twitter.com/munificentbob"&gt;Robert Nystrom&lt;/a&gt; will be one of my favorite technical books. It gives the same sense of wonder and craft that I felt reading &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-1.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we move in creating the &lt;a href="https://github.com/topics/lox-language"&gt;Lox language&lt;/a&gt; the author gives some historical background, trade-offs and every meaningful step. Even if you are interested in creating your own language, you will learn a ton by reading this book. You will be a better developer.&lt;/p&gt;

&lt;p&gt;The author is kind enough to let everyone &lt;a href="https://craftinginterpreters.com/contents.html"&gt;read for free the web version&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>books</category>
      <category>programming</category>
      <category>architecture</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Holidays, Entrepreneurship and SLOs with Nobl9</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 30 Dec 2021 20:57:22 +0000</pubDate>
      <link>https://dev.to/linearb/holidays-entrepreneurship-and-slos-with-nobl9-119k</link>
      <guid>https://dev.to/linearb/holidays-entrepreneurship-and-slos-with-nobl9-119k</guid>
      <description>&lt;p&gt;It's finally here, the end of season 1 of the podcast is upon us! To celebrate, Santa is bringing something special - entrepreneurship advice for all the would-be founders of the world, &lt;a href="https://www.youtube.com/watch?v=hwacxSnc4tI&amp;amp;ab_channel=WalterTan"&gt;ages 1 to 92.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brian Singer, co-founder &amp;amp; CPO of Nobl9, sits down with Dev Interrupted to help us close out season 1 with a conversation on what it takes to found your own company. Having founded a pair of companies, one of which he sold to Google, Brian has a deep understanding of what it takes to successfully found and scale a startup. More than that, he knows what VCs are looking for. &lt;/p&gt;

&lt;p&gt;In addition to our conversation on entrepreneurship, we also discuss Service Level Objectives, the ins and outs of Nobl9‚Äôs SLO platform and why SLOs and error budgets will become commonplace approaches in the industry, much in the same way we practice Agile today. &lt;/p&gt;

&lt;p&gt;From the entire team at Dev Interrupted, we want to give a heartfelt thank you to everyone who has supported us and continued on this journey with us. Producing this podcast every week has been an absolute pleasure and we are so thankful for the outpouring of support we have received this past year. Expect big things - and even bigger stories - in season 2 of the podcast. &lt;/p&gt;

&lt;p&gt;Have a wonderful New Year, we‚Äôll return on &lt;strong&gt;January 8th&lt;/strong&gt; with a HUGE episode for the official start of season 2.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5ht1sKI7v43cLhZhywCqkE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why VCs don‚Äôt like single founder companies&lt;/li&gt;
&lt;li&gt;Scaling beyond the first 20 employees&lt;/li&gt;
&lt;li&gt;What are &lt;a href="https://nobl9.com/"&gt;SLOs&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Understanding when &lt;a href="https://linearb.io/blog/technical-debt-ratio/?__hstc=75672842.b37abbbdf4f34a742895a6b2675da07e.1632418321637.1640804382855.1640838597523.186&amp;amp;__hssc=75672842.1.1640838597523&amp;amp;__hsfp=1615045989"&gt;tech debt matters&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The reason sales is the #1 skill for an entrepreneur&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujkkA9kH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qous1521acseykryclzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujkkA9kH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qous1521acseykryclzp.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>podcast</category>
      <category>techtalks</category>
      <category>career</category>
    </item>
    <item>
      <title>Streaming Tweets with Go</title>
      <author>Alex Fallenstedt</author>
      <pubDate>Thu, 30 Dec 2021 20:29:58 +0000</pubDate>
      <link>https://dev.to/fallenstedt/streaming-tweets-with-go-92p</link>
      <guid>https://dev.to/fallenstedt/streaming-tweets-with-go-92p</guid>
      <description>&lt;p&gt;Building with free APIs is a great way to teach yourself new skills in languages you like. I‚Äôve always found APIs as an underrated way to learn something new. Building with APIs brings challenges that force you to learn new parts of programming that video tutorials can not do.&lt;/p&gt;

&lt;p&gt;Twitter‚Äôs API‚Äôs filtered stream endpoint allows you to filter the real-time stream of public Tweets. You can tap into twitter discussions by filtering tweets for specific attributes. You can find the latest job postings, monitor weather events, or keep on top of trends.&lt;/p&gt;

&lt;p&gt;In this article I will discuss how to create twitter rules and manage a stream with my open source library &lt;a href="https://github.com/Fallenstedt/twitter-stream"&gt;&lt;code&gt;twitterstream&lt;/code&gt;&lt;/a&gt;. This library was built for my project &lt;a href="https://findtechjobs.io"&gt;findtechjobs&lt;/a&gt; so I could find the latest tech jobs posted on twitter.&lt;/p&gt;

&lt;p&gt;If you want a complete code example to get started, head over to the examples on &lt;a href="https://github.com/Fallenstedt/twitter-stream/tree/master/example"&gt;twitterstream&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-i-start"&gt;
  &lt;/a&gt;
  Where do I start?
&lt;/h2&gt;

&lt;p&gt;The first step is to create an app on &lt;a href="https://developer.twitter.com/"&gt;Twitter Developers&lt;/a&gt; and obtain a set of consumer keys. One you have an API key and an API secret key, you can generate an access token with &lt;code&gt;twitterstream&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-an-access-token"&gt;
  &lt;/a&gt;
  Generate an Access Token
&lt;/h2&gt;

&lt;p&gt;We can use &lt;code&gt;twitterstream&lt;/code&gt; to generate an access token. This access token will be used to authenticate all network requests going forward. In the code below, we make a network request to twitter‚Äôs &lt;a href="https://api.twitter.com/oauth2/token"&gt;oauth2/token endpoint&lt;/a&gt; with the The 'Basic' HTTP Authentication Scheme. Then we create an instance of &lt;code&gt;twitterstream&lt;/code&gt; with our access token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTokenGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetApiKeyAndSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"YOUR_KEY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"YOUR_SECRET_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestBearerToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;// Create an instance of twitter api&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTwitterStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-up-streaming-rules"&gt;
  &lt;/a&gt;
  Set up Streaming Rules
&lt;/h2&gt;

&lt;p&gt;Streaming rules make your stream deliver relevant information. The rules match a variety of twitter attributes such as message keywords, hashtags, and URLs. Creating great rules is fundamental to having a successful twitter stream. It‚Äôs important to continue refining your rules as you stream so you can harvest relevant information.&lt;/p&gt;

&lt;p&gt;Let‚Äôs create a stream for software engineer job postings with &lt;code&gt;twitterstream&lt;/code&gt;. A valid job posting tweet should should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posted in the english language&lt;/li&gt;
&lt;li&gt;Not a retweet&lt;/li&gt;
&lt;li&gt;Not a reply to another tweet&lt;/li&gt;
&lt;li&gt;Contain the word ‚Äúhiring‚Äù&lt;/li&gt;
&lt;li&gt;And contain the words ‚Äúsoftware developer‚Äù or ‚Äúsoftware engineer‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;twitterstream&lt;/code&gt; package makes building rules easy. We can use a &lt;code&gt;NewRuleBuilder&lt;/code&gt; to create as many rules as the Twitter API allows for our consumer keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRuleBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lang:en -is:retweet -is:quote hiring (software developer OR software engineer)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hiring software role"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first part is using &lt;code&gt;twitterstream&lt;/code&gt; to create a &lt;code&gt;NewRuleBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We pass in two arguments when we add our rule with &lt;code&gt;AddRule&lt;/code&gt;. The first is a long string with many operators. Successive operators with a space between them will result in boolean "AND" logic, meaning that Tweets will match only if both conditions are met. For example &lt;code&gt;cats dogs&lt;/code&gt; will match tweets that contain the words ‚Äúcats‚Äù and ‚Äúdogs‚Äù. The second argument for &lt;code&gt;AddRule&lt;/code&gt; is the tag label. This is a free-form text you can use to identify the rules that matched a specific Tweet in the streaming response. Tags can be the same across rules.&lt;/p&gt;

&lt;p&gt;Let‚Äôs focus on the first argument. Each operator does something unique:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first is the single &lt;code&gt;lang:en&lt;/code&gt; which is BCP 47 language identifier. This filters the stream for tweets posted in the English language. You can only use a single lang operator in a rule, and it must be used with a conjunction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we exclude retweets with &lt;code&gt;-is:retweet&lt;/code&gt;. We use NOT logic (negation) by including a minus sign in front of our operator. The negation can be applied to words too. For example, &lt;code&gt;cat #meme -grumpy&lt;/code&gt; will match tweets with the word cat, #meme, and do not include the word ‚Äúgrumpy‚Äù.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also exclude quote tweets with &lt;code&gt;-is:quote&lt;/code&gt;. Quote tweets are tweets with comments, and I‚Äôve found this operator very useful. When I was building findtechjobs.io, I encountered a lot of people retweeting an article about automated hiring with their opinion. These quote tweets cluttered my dataset with unrelated job postings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I then narrow my stream of tweets to words that include &lt;code&gt;hiring&lt;/code&gt;. People who tweet about jobs would say ‚ÄúMy team is hiring‚Ä¶‚Äù, or ‚ÄúStartupCo is hiring‚Ä¶‚Äù.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally &lt;code&gt;(software developer OR software engineer)&lt;/code&gt;, is a grouping of operators combined with an OR logic. Tweets will match if the tweet contains either of these words.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we build our rules, we create them with &lt;code&gt;api.Rules.Create&lt;/code&gt;. If you want to delete your rules, you can use &lt;code&gt;api.Rules.Delete&lt;/code&gt; with the ID of each rule you currently have. You can find your current rules with &lt;code&gt;api.Rules.Get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/integrate/build-a-rule"&gt;rule operators here&lt;/a&gt;. Additionally, the endpoint that creates the rules is &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules"&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-the-unmarshal-hook"&gt;
  &lt;/a&gt;
  Set the Unmarshal Hook
&lt;/h2&gt;

&lt;p&gt;We need to create our own struct for our tweets so we can unmarshal the tweet well. Twitter‚Äôs Filtered Stream endpoint allows us to fetch additional information for each tweet (more on this later). To allow us to find this data easily, we need to create a struct that will represent our data model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;StreamDataExample&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Text&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"text"`&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
        &lt;span class="n"&gt;AuthorID&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"author_id"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"data"`&lt;/span&gt;
    &lt;span class="n"&gt;Includes&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"name"`&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"users"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"includes"`&lt;/span&gt;
    &lt;span class="n"&gt;MatchingRules&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"tag"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"matching_rules"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every tweet that is streamed is returned as a &lt;code&gt;[]bytes&lt;/code&gt; by default. We can turn our data into something usable by unmarshaling each tweet into the struct &lt;code&gt;StreamDataExample&lt;/code&gt;. It‚Äôs important to set an unmarshal hook with &lt;code&gt;SetUnmarshalHook&lt;/code&gt; so we can process &lt;code&gt;[]bytes&lt;/code&gt; in a goroutine safe way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetUnmarshalHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to unmarshal bytes: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are uncertain what your data model will look like, you can always create a string from the slice of bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetUnmarshalHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-a-stream"&gt;
  &lt;/a&gt;
  Starting a Stream
&lt;/h2&gt;

&lt;p&gt;After creating our streaming rules and unmarshal hook, we are ready to start streaming tweets.&lt;br&gt;
By default, twitter returns a limited amount of information about each tweet when we stream. We can request additional information on each tweet with a stream expansion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;streamExpansions&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewStreamQueryParamsBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddExpansion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"author_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddTweetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// StartStream will start the stream&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streamExpansions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first create some stream expansions with a &lt;code&gt;NewStreamQueryParamsBuilder&lt;/code&gt;. This builder will create query parameters to start our stream with. Here, we are adding two additional piece of information to each tweet&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AddExpansion("author_id")&lt;/code&gt; will request the author‚Äôs id for each tweet streamed. This is useful if you are keeping track of users who are tweeting.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AddTweetField("created_at")&lt;/code&gt; will request the time the tweet was tweeted. This is useful if you need to sort tweets chronologically.
You can learn more about the available &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream"&gt;stream expansions here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we start the stream with our expansions using &lt;code&gt;api.StartStream&lt;/code&gt;. This method will start a long running GET request to twitter‚Äôs streaming endpoint. The request is parsed incrementally throughout the duration of the network request. If you are interested in learning more about how to consume streaming data from twitter, then you should read their documentation &lt;a href="https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data."&gt;Consuming Streaming Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consuming-the-stream"&gt;
  &lt;/a&gt;
  Consuming the Stream
&lt;/h2&gt;

&lt;p&gt;Each tweet that is processed in our long running GET request is sent to a go channel. We &lt;code&gt;range&lt;/code&gt; over this channel to process each tweet and check for errors from twitter. The stream will stop when we invoke &lt;code&gt;api.StopStream&lt;/code&gt;, then we skip the remaining part of the loop, return to the top and wait for a&lt;code&gt;close&lt;/code&gt; signal from the channel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;   &lt;span class="c"&gt;// Start processing data from twitter after starting the stream&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c"&gt;// Handle disconnections from twitter&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got error from twitter: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;// Stop the stream and wait for the channel to close on the next iteration.&lt;/span&gt;
            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Here I am printing out the text.&lt;/span&gt;
        &lt;span class="c"&gt;// You can send this off to a queue for processing.&lt;/span&gt;
        &lt;span class="c"&gt;// Or do your processing here in the loop&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Twitter‚Äôs servers attempt to hold the stream connection indefinitely. The error from twitter is made available in the stream. Disconnections can occur from several possible reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A streaming server is restarted on the Twitter side. This is usually related to a code deploy and should be generally expected and designed around.&lt;/li&gt;
&lt;li&gt;Your account exceeded your daily/monthly quota of Tweets.&lt;/li&gt;
&lt;li&gt;You have too many active redundant connections.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/volume-streams/integrate/handling-disconnections"&gt;More disconnect reasons can be found here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#anticipating-disconnects-from-twitter"&gt;
  &lt;/a&gt;
  Anticipating Disconnects from Twitter
&lt;/h2&gt;

&lt;p&gt;It‚Äôs important to maintain the connection to Twitter as long as possible because missing relevant information in your stream can create poor datasets. It should be expected that disconnections will occur and reconnection logic be built to handle disconnections from twitter&lt;/p&gt;

&lt;p&gt;We can build reconnection logic using &lt;code&gt;twitterstream&lt;/code&gt;‚Äôs api and a &lt;code&gt;defer&lt;/code&gt; statement. &lt;a href="https://github.com/Fallenstedt/twitterstream/blob/master/example/stream_forever.go"&gt;A full example of handling reconnects can be found here&lt;/a&gt;. Below is a snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// This will run forever&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;initiateStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Start the stream&lt;/span&gt;
    &lt;span class="c"&gt;// And return the library's api&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fetchTweets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// When the loop below ends, restart the stream defer initiateStream()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;initateStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Start processing data from twitter&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got error from twitter: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stopped Stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have started the stream and before we start processing the tweets, we &lt;code&gt;defer&lt;/code&gt; the method itself. This will handle reconnections to twitter whenever the messages channel closes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I hope you find this library useful in streaming tweets from twitter. Building this library was a challenge, and I learned how Go‚Äôs concurrency model works. If you liked this post, follow me on &lt;a href="https://twitter.com/Fallenstedt"&gt;twitter&lt;/a&gt; as I document my journey in the software world.&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>twitter</category>
    </item>
    <item>
      <title>An introduction to metaprogramming with Elixir</title>
      <author>ericaeducative</author>
      <pubDate>Thu, 30 Dec 2021 20:20:29 +0000</pubDate>
      <link>https://dev.to/educative/an-introduction-to-metaprogramming-with-elixir-3i2g</link>
      <guid>https://dev.to/educative/an-introduction-to-metaprogramming-with-elixir-3i2g</guid>
      <description>&lt;p&gt;The Elixir programming language is incredibly versatile. Built on the Erlang VM, Elixir was designed with high-concurrency and low-latency in mind. It‚Äôs a great choice for developing large-scale web sites and web applications, as well as embedded systems and distributed applications. And whether you know it or not, &lt;strong&gt;Elixir easily facilitates the advanced technique of metaprogramming&lt;/strong&gt;. By learning metaprogramming, we can extend Elixir‚Äôs functionality even further to suit our project‚Äôs needs. &lt;/p&gt;

&lt;p&gt;Today, we‚Äôll introduce the topic of metaprogramming in Elixir. We‚Äôll take a look under the hood to learn how the abstract syntax tree and macros work together to enable metaprogramming in Elixir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#metaprogramming"&gt;What is metaprogramming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#metaprogrammingelixir"&gt;Metaprogramming in Elixir&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#AST"&gt;Abstract syntax trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macros"&gt;Elixir macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-metaprogramming"&gt;
  &lt;/a&gt;
  What is metaprogramming?
&lt;/h2&gt;

&lt;p&gt;Metaprogramming is an advanced programming technique through which we can write programs that &lt;strong&gt;treat other programs as their data&lt;/strong&gt;. Metaprogramming allows programs to read, generate, and modify other programs. Furthermore, these programs can modify themselves in significant ways. &lt;/p&gt;

&lt;p&gt;With metaprogramming, we can: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shift computations from run-time to compile-time&lt;/li&gt;
&lt;li&gt;Enable code generation with compile-time computations&lt;/li&gt;
&lt;li&gt;Write code that modifies itself &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Metaprogramming gained popularity through list processing languages such as LISP in the 1970‚Äôs and 1980‚Äôs. Elixir is one of many languages that offer metaprogramming today. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#metaprogramming-in-elixir"&gt;
  &lt;/a&gt;
  Metaprogramming in Elixir
&lt;/h2&gt;

&lt;p&gt;There are two components that work together to facilitate metaprogramming in Elixir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The abstract syntax tree (AST)&lt;/li&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs discuss how these components help extend the functionality of the Elixir programming language. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#abstract-syntax-trees"&gt;
  &lt;/a&gt;
  Abstract syntax trees
&lt;/h3&gt;

&lt;p&gt;The AST data structure works under the hood to support the compiler in most languages. During the compiler‚Äôs syntax analysis phase, source code is represented through this structure as an intermediate representation that sets the foundation for code generation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LkWgMznP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8tjlnpfc1d9af4sc84u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LkWgMznP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8tjlnpfc1d9af4sc84u.png" alt="abstract syntax tree" width="880" height="655"&gt;&lt;/a&gt;&lt;br&gt;
Metaprogramming in Elixir relies on the ability to manipulate and inspect ASTs. We have the &lt;strong&gt;unique opportunity to access the AST when working with Elixir code&lt;/strong&gt;. Being able to access these program internals lets us operate closer to the level of the compiler than ever before. In the Elixir programming language, these intermediate representations of the AST are also referred to as &lt;strong&gt;quoted expressions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Every Elixir expression is represented by a node in the AST. With the exception of basic values, each node or expression is represented by a tuple consisting of these three elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The first element&lt;/strong&gt;: An atom indicating function call&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The second element&lt;/strong&gt;: Metadata&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The third element&lt;/strong&gt;: Function arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, the function call &lt;code&gt;sum(2, 4, 6)&lt;/code&gt; is represented as the following tuple or quoted expression: &lt;code&gt;{:sum, [], [2, 4, 6]}&lt;/code&gt; &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#elixir-macros"&gt;
  &lt;/a&gt;
  Elixir macros
&lt;/h3&gt;

&lt;p&gt;Macros allow us to extend the functionality of the Elixir programming language by injecting code into the application. They are &lt;strong&gt;special functions that return a quoted expression, which we can insert into our application code&lt;/strong&gt;. When the compiler finds a macro, it recursively expands the macro until no macro calls remain in the code. &lt;br&gt;
We‚Äôll discuss two macros as an introduction to metaprogramming in Elixir. &lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#-raw-quote-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;quote&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;quote&lt;/code&gt; is instrumental to code generation in Elixir. We can use the &lt;code&gt;quote&lt;/code&gt; macro in the iex shell to output the quoted expression for any Elixir expression. &lt;br&gt;
For instance, when applied to the code example from the previous section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;quote do: sum(2, 4, 6)
‚áí {:sum, [], [2, 4, 6]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#-raw-unquote-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;unquote&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;While the &lt;code&gt;quote&lt;/code&gt; macro allows us to access the AST, the &lt;code&gt;unquote&lt;/code&gt; macro allows us to modify the AST by injecting new code or values into it. &lt;code&gt;unquote&lt;/code&gt; evaluates the expression it‚Äôs given and injects the resulting AST into a quoted expression.&lt;br&gt;
For instance, in this code example, we unquote &lt;code&gt;num&lt;/code&gt; and inject it into the quoted expression (or AST) of the function call &lt;code&gt;sum(10, num)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;num = 20

quote do: sum(10, num)

quote do: sum(10, unquote(num))

‚áí {:sum, [], [10, {:num, [], Elixir}]}
‚áí {:sum, [], [10, 20]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#a-note-on-using-macros"&gt;
  &lt;/a&gt;
  A note on using macros
&lt;/h4&gt;

&lt;p&gt;Macros are considered the building blocks of Elixir. We can use macros to write effective and readable code. They‚Äôre great for domain-specific languages (DSLs) like Phoenix and Ecto. They help us carry out complex tasks and build custom language features. &lt;/p&gt;

&lt;p&gt;You‚Äôll often hear that one of the first things you should know about metaprogramming is: &lt;em&gt;Don‚Äôt use macros&lt;/em&gt;. As with most advanced programming techniques, the power that Elixir macros give us can lead to errors if handled incorrectly. Metaprogramming mistakes can result in program errors that are difficult to debug. While the &lt;strong&gt;disclaimers are not unfounded, they shouldn‚Äôt deter you from learning the powerful technique of metaprogramming&lt;/strong&gt;. With the right dose of caution, you can leverage Elixir‚Äôs macro system to write less code and develop highly performant applications. &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;As an Elixir programmer, you have the opportunity to extend Elixir‚Äôs functionality through metaprogramming. You can leverage Elixir macros to create new language features and DSLs, while eliminating the need for recompilation when your code encounters new situations.&lt;/p&gt;

&lt;p&gt;To help you get started with metaprogramming, we‚Äôve created the &lt;a href="https://www.educative.io/courses/metaprogramming-elixir/"&gt;&lt;strong&gt;Metaprogramming in Elixir&lt;/strong&gt;&lt;/a&gt; course. This course provides a safe environment where you can get hands-on metaprogramming experience in Elixir. In addition to covering the basics we‚Äôve touched on today, you‚Äôll learn how to perform advanced code generation, generate functions from remote APIs, create an HTML DSL, and write a test framework.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-elixir"&gt;
  &lt;/a&gt;
  Continue reading about Elixir
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/elixir-functional-programming"&gt;A beginner's guide to the Elixir programming language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
