<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I made 100 high-quality illustrations, totally free. Use it anywhere without attribution.</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 25 Nov 2020 13:05:22 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/i-made-100-high-quality-illustrations-totally-free-use-it-anywhere-without-attribution-452o</link>
      <guid>https://dev.to/hrishikesh1990/i-made-100-high-quality-illustrations-totally-free-use-it-anywhere-without-attribution-452o</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;I know that all of you are working on exciting products. To help you make it a bit more beautiful, I have made 100+ high-quality illustrations. As the title suggests, they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Totally free&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Absolutely don't need any attribution&lt;/b&gt; :)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's Scale: &lt;a href="https://2.flexiple.com/scale/all-illustrations"&gt;https://2.flexiple.com/scale/all-illustrations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdR9LsL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/72c4965e-fd3c-403f-af90-26637de3c646/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdR9LsL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/72c4965e-fd3c-403f-af90-26637de3c646/" alt="Scale preview"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Modern desk setup for developers in 2020</title>
      <author>Dominik Rusac</author>
      <pubDate>Wed, 25 Nov 2020 12:36:29 +0000</pubDate>
      <link>https://dev.to/lloyds-digital/modern-desk-setup-for-developers-in-2020-9co</link>
      <guid>https://dev.to/lloyds-digital/modern-desk-setup-for-developers-in-2020-9co</guid>
      <description>&lt;p&gt;I spent a lot of time looking at different pieces of IT equipment and how to connect them most efficiently for everyday use. Every developer prefers their own type of desk setup. Some developers find one laptop enough while others like a multi-monitor setup with laptop or desktop PC. I prefer a laptop with two extra monitors while I work in the office because I find that as my perfect desk setup.&lt;/p&gt;

&lt;p&gt;You are asking why this is my perfect setup? On two big screens, I can do the main work while I am using the 3rd screen (laptop) as an additional helping screen. I use my main screen in the middle and that’s where I write the code while my second screen on the left is showing the result of the code I wrote on my main screen. Also I use my left screen for browsing the internet and reading the documentation. &lt;/p&gt;

&lt;p&gt;The laptop is on my right and depending on what I'm doing at the moment, there is usually Slack, Insomnia or Chrome DevTools opened if I am doing some JavaScript. Sometimes I think it would be nice to have a 4th screen for browsing MySQL database in phpmyadmin but I’m fine for now. 😄&lt;/p&gt;

&lt;p&gt;What would be the best way to connect every piece of hardware to a laptop?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D8ScgYZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jxx4zedqe3hkoysugr5j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D8ScgYZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jxx4zedqe3hkoysugr5j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#content" class="anchor"&gt;
  &lt;/a&gt;
  Content:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#efficientConnection"&gt;Efficient connection with peripherals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todaysLaptops"&gt;Today's laptops...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whyTypeC"&gt;Why Type-C?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;How? What are the requirements?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#secondMonitor"&gt;What about the second monitor?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problemFixes"&gt;Possible problems and solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#properMonitor"&gt;Which monitor and how many?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#laptopSpecs"&gt;Laptop specifications?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keyboardMouse"&gt;Keyboard and mouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#efficient-connection-with-peripherals" class="anchor"&gt;
  &lt;/a&gt;
  Efficient connection with peripherals &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For sure, there also must be a headset, separate keyboard and mouse connected to my laptop. All of that must be connected with the minimum number of cables. The desk needs to be as clean as possible with the ability to quickly connect and start working. &lt;/p&gt;

&lt;p&gt;When I need to take my laptop to a meeting, I don’t want to have to disconnect a lot of cables from my laptop, and when I get back on my desk reconnect all the cables back. That’s inefficient and annoying. I needed to come up with the perfect solution on how to connect all peripherals and two extra monitors to a laptop using as few cables as possible. &lt;/p&gt;

&lt;p&gt;A lot of questions came up, but the final, perfect solution was found. Connect everything together using a single Thunderbolt 3 / Type-C cable. Type-C is the perfect solution for my problem and probably for yours too. When I get back to my desk after the meeting, plugging in one cable instantly connects the headset, keyboard, mouse, two monitors and power to my laptop and my desk is usable in a second! Isn’t that nice? I love it. To achieve that level of connectivity, your equipment must support it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-laptops" class="anchor"&gt;
  &lt;/a&gt;
  Today's laptops... &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Many modern laptops have fewer connectivity options than older laptops. Few years ago, laptops had VGA, HDMI and Display port built-in, so you could easily connect multiple monitors using a few cables. Today that's not the case. For example, the new Apple Macbook has only 4 ports and they are all the same - Type-C/Thunderbolt which means no VGA, HDMI or Display port connectivity.&lt;/p&gt;

&lt;p&gt;I found out that's also the case with other brands, the more expensive the laptop is the fewer ports it has. That’s a little bit odd, don’t you think? It is, but the premium laptop has premium connectivity ports, and the premium connectivity port today is Type-C / Thunderbolt port.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-typec" class="anchor"&gt;
  &lt;/a&gt;
  Why Type-C? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;On cheap laptops, you’ll hardly find a Type-C/Thunderbolt port. Cheaper non-premium laptops still have some ports for connecting to external displays, most common today are HDMI and DisplayPort. Connecting through these you can get video and audio to your monitor, but you still need to connect the keyboard and mouse to your laptop via USB. And also you need your laptop charger plugged in. That’s like 4 cables already connected to a laptop which is really messy. So how can we fix that? Type-C to the rescue! &lt;/p&gt;

&lt;p&gt;Type-C can do all that through one cable. Yes, you read that correctly. To achieve that, it is required to have a Type-C supported monitor. Once your laptop is connected to your monitor via Type-C cable, you can connect all of your peripherals to that monitor. Through the monitor everything is connected to a laptop via single Type-C cable. Boy, that’s clean!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-what-are-the-requirements" class="anchor"&gt;
  &lt;/a&gt;
  How? What are the requirements? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To be able to connect your setup this way, your hardware must support it. For sure, you must have Type-C/Thunderbolt port on your laptop and at least one Type-C external monitor. &lt;/p&gt;

&lt;p&gt;When you buy a Type-C monitor you should also get a Type-C cable in the box, at least that’s the case with Dell’s monitors. You should use that cable to connect your laptop to the monitor. Once connected, since the monitor has a 3.5 audio jack and multiple USB ports, you can easily connect your headset, mouse, keyboard, smartphone and all other devices you use to your monitor. All of that is instantly connected to your laptop through the single Type-C cable.&lt;/p&gt;

&lt;p&gt;Another great thing about Type-C is that you don’t need to use your laptop charger because the monitor provides power to your laptop through the same Type-C cable. Single Type-C cable carries power, data, display and audio all at once. How awesome is that?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-the-second-monitor" class="anchor"&gt;
  &lt;/a&gt;
  What about the second monitor? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now we have connected one monitor, keyboard, mouse and headset to our laptop using only one cable. How to connect the second monitor to our setup? It’s pretty simple as long as your monitor supports MST (Multi-Stream Transport), also known as Daisy Chaining. If your monitor has one display port input (DP IN) and one display port output (DP OUT) that means your monitor supports MST/Daisy Chain, but to be sure take a closer look into monitor specifications.&lt;/p&gt;

&lt;p&gt;The first monitor your laptop is connected to via Type-C cable should support MST/Daisy Chain. You simply use a display port cable to connect the first monitor to your second monitor. In the first monitor (the one connected to laptop via Type-C), plug your display port cable in DP OUT and on the second monitor plug that same display port cable in DP IN port. You got two monitors connected to your laptop all together with all of your peripherals that go into your laptop through one single Type-C cable. Let me repeat, ONE cable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#possible-problems-and-solutions" class="anchor"&gt;
  &lt;/a&gt;
  Possible problems and solutions &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you don’t get a picture on some of your monitors, first make sure the proper input source is set up in the monitor settings. The first monitor input source must be set on “Type-C” while the second monitor input source must be set on “Display port”.&lt;/p&gt;

&lt;p&gt;Also, MST must be turned on in your first monitor settings so you are able to get a picture on the second display. If you still have problems after that make sure you are using DP v1.2 cable or newer. If you don’t get a picture even on the first monitor, try to use higher quality Type-C cable. Not every Type-C cable is gonna work, but the cable that comes in a box with a monitor should always work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-monitor-and-how-many" class="anchor"&gt;
  &lt;/a&gt;
  Which monitor and how many? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The number of monitors mostly depends on what you prefer and how you work. The more monitors you have, the more space you have to work on without minimizing the windows all the time. That way it’s faster and easier to work and because of that you are more efficient and you make more money! 💵&lt;/p&gt;

&lt;p&gt;While choosing the new monitor, make sure it supports MST/Daisy Chaining and Type-C connectivity. Dell has a lot of nice Type-C monitors, for example, U2419HC is the one that supports everything you need to connect to the laptop the way I described. Look for letter “C” in the model name to be sure it supports Type-C connectivity. Also make sure that monitor has sufficient USB ports on the back and audio jack for connecting headphones.&lt;/p&gt;

&lt;p&gt;I wouldn’t recommend a monitor sized under 24-inches, if possible go with a 27-inch with a 2K resolution. Full HD is fine on a 24-inch, but on a 27-inch monitor it’s not that good. IPS panel type would probably be the best, also VA is fine except for some lower viewing angles, as long as you sit in front of it, it will be fine and will probably have a better contrast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laptop-specifications" class="anchor"&gt;
  &lt;/a&gt;
  Laptop specifications &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Always look for the best laptop your money can buy. Don’t buy the first laptop you see, do your research. I recommend a configuration with at least 12 GB RAM (don’t go under 8 GB) and Intel i5 CPU. A dedicated GPU is a plus but not required. SSD is a must with a capacity of 250/500 GB. Make sure it has at least one Type-C/Thunderbolt port, other ports like USB Type A and audio jack are welcome.&lt;/p&gt;

&lt;p&gt;The ideal screen size for a laptop would be 14” because it’s in the perfect middle of 13” and 15” laptop screens. I left out 17” laptops because they are too big and heavy to carry around. I wouldn’t mind a 13” laptop as long as I am using two external monitors with it. Still, 14” seems ideal with of course Full HD resolution or better.&lt;/p&gt;

&lt;p&gt;A bigger battery means longer battery life and battery life is important. Look for around 50-60 Wh battery which should get you through the day. High quality keyboard and touchpad is also a thing you should worry about - you don't want laggy touchpad or squeaky keyboard. Overall laptop build quality is better the more money you spend. Also, you will pay more for a thinner and lighter laptop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-and-mouse" class="anchor"&gt;
  &lt;/a&gt;
  Keyboard and mouse &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This mostly depends on your preferences and budget. Whether you want classic, mechanical, small size (tenkeyless) or a full size keyboard. I currently use Logitech K280 wired keyboard which is fine but... I am looking at you Logitech MX keys.&lt;/p&gt;

&lt;p&gt;I use Logitech G502 wired mouse and I find it almost perfect, it has all the extra buttons I need. There is also an even better G502 Lightspeed which is practically identical but wireless. You could pair your wireless mouse with wireless charging mousepad so you don't need to worry about the battery.&lt;/p&gt;

&lt;p&gt;Choose what suits you best and go wireless for an even cleaner desk setup!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A desk that makes you comfortable and suits your needs is a productive desk. Make sure you organize it the way you want as this will lead you to grow and become a better and more efficient developer!&lt;/p&gt;

&lt;p&gt;Happy coding everyone!&lt;/p&gt;




&lt;p&gt;Thank you for reading this! If you've found this interesting, consider leaving a ❤️, 🦄, and of course, share and comment your thoughts!&lt;/p&gt;

&lt;p&gt;Lloyds is available for partnerships and open for new projects. If you want to know more about us, click &lt;a href="https://lloyds-design.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, don’t forget to follow us on &lt;a href="https://www.instagram.com/lloyds.design/"&gt;Instagram&lt;/a&gt; and &lt;a href="https://www.facebook.com/lloydsgn/"&gt;Facebook&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>modern</category>
      <category>desk</category>
      <category>setup</category>
      <category>developer</category>
    </item>
    <item>
      <title>Black Friday - Sweet deals ONLY</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 25 Nov 2020 12:28:13 +0000</pubDate>
      <link>https://dev.to/sm0ke/black-friday-sweet-deals-only-1k53</link>
      <guid>https://dev.to/sm0ke/black-friday-sweet-deals-only-1k53</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a short-list with nice deals that might help designers and developers to start commercial projects at a lower budget without compromising the quality. &lt;/p&gt;

&lt;p&gt;Criteria used to build this list: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discounts are real and consistent (at least 50%)&lt;/li&gt;
&lt;li&gt;Vendors provide FREE versions for discounted products&lt;/li&gt;
&lt;li&gt;The commercial licenses are permissive (no footer links or other hidden things). &lt;/li&gt;
&lt;li&gt;The products have a quality above the market average. &lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! Please suggest more deals from other vendors in the comments.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#2020-black-friday-offer-tldr" class="anchor"&gt;
  &lt;/a&gt;
  2020 Black Friday Offer - TL;DR;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;90%OFF &lt;strong&gt;&lt;a href="https://bit.ly/33auIh8"&gt;Creative-Tim&lt;/a&gt;&lt;/strong&gt; - promo bundles for Bootstrap, React, and Vue&lt;/li&gt;
&lt;li&gt;90%OFF &lt;strong&gt;&lt;a href="https://bit.ly/33dfOXw"&gt;Themesberg&lt;/a&gt;&lt;/strong&gt; - a single bundle with 7*PRO products &lt;/li&gt;
&lt;li&gt;95%OFF &lt;strong&gt;&lt;a href="https://bit.ly/2J1Fhwl"&gt;WrapPixel&lt;/a&gt;&lt;/strong&gt; - single bundle with 25+ products&lt;/li&gt;
&lt;li&gt;60%OFF &lt;strong&gt;&lt;a href="https://bit.ly/2UTgih5"&gt;BootstrapDash&lt;/a&gt;&lt;/strong&gt; - Bootstrap, Vue and React templates&lt;/li&gt;
&lt;li&gt;70%Off &lt;strong&gt;&lt;a href="https://appseed.us/?ref=dev"&gt;AppSeed&lt;/a&gt;&lt;/strong&gt; (my startUp) - for Flask and Django Bundles&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#creativetim-90off" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://bit.ly/33auIh8"&gt;Creative-Tim&lt;/a&gt;&lt;/strong&gt; - 90%OFF
&lt;/h2&gt;

&lt;p&gt;This company provides discounted bundles per technology: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$99 &lt;strong&gt;&lt;a href="https://bit.ly/3lX4BBO"&gt;React Bundle&lt;/a&gt;&lt;/strong&gt; - 17 UI Kits, Designer Files, 6mo Support&lt;/li&gt;
&lt;li&gt;$99 &lt;strong&gt;&lt;a href="https://bit.ly/3m4rDac"&gt;Vue Bundle&lt;/a&gt;&lt;/strong&gt; - 15 UI Kits, Designer Files, 6mo Support&lt;/li&gt;
&lt;li&gt;$99 &lt;strong&gt;&lt;a href="https://bit.ly/2UVr9XG"&gt;Bootstrap Bundle&lt;/a&gt;&lt;/strong&gt; - 19 UI Kits, Designer Files, 6mo Support&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Some FREE products to play with before purchasing anything: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/2KEZQiF"&gt;Bootstrap Argon&lt;/a&gt; - free BS4 dashboard 61k Downloads&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/39gor7M"&gt;Black Dashboard React&lt;/a&gt; - free React Dashboard, 23k Downloads&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3nSNOR2"&gt;Vue Material Dashboard&lt;/a&gt; - free Vue Dashboard, 37k Downloads&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FRliMo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-creative-tim-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FRliMo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-creative-tim-intro.gif" alt="Black Friday - Creative-Tim offer."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#themesberg-90off" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://bit.ly/33dfOXw"&gt;Themesberg&lt;/a&gt;&lt;/strong&gt; - 90%OFF
&lt;/h2&gt;

&lt;p&gt;7 Premium Themes Powered by Bootstrap CSS can be purchased until 28.Nov for &lt;strong&gt;$79&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bundle Link: &lt;a href="https://bit.ly/33dfOXw"&gt;BF Themesberg&lt;/a&gt; &lt;strong&gt;ONLY $79&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;Popular Free Products:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/product/ui-kit/pixel-lite-free-bootstrap-4-ui-kit"&gt;Pixel Lite&lt;/a&gt; - Free Bootstrap 4 UI KIT&lt;/li&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt - Bootstrap 5 Dashboard Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/product/bootstrap/impact-design-system"&gt;Impact Design System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUmlzJnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-themesberg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUmlzJnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-themesberg.png" alt="Black Friday - Themesberg offer."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bootstrapdash-60off" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://bit.ly/2UTgih5"&gt;BootstrapDash&lt;/a&gt;&lt;/strong&gt; 60%OFF
&lt;/h2&gt;

&lt;p&gt;Bundle of 50+ Premium Templates with 100+ dashboard layouts, UI kits coded in Bootstrap, React, and Vue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bundle Link: &lt;a href="https://www.bootstrapdash.com/mega-bundle/?ref=23"&gt;BootstrapDash Mega Bundle&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Popular FREE products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.bootstrapdash.com/product/star-admin-free/?ref=23"&gt;Star Admin Free&lt;/a&gt; - Free Admin dashboard&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bootstrapdash.com/product/azia-free/?ref=23"&gt;Azia Admin Free&lt;/a&gt; - Bootstrap 4 Admin template&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bootstrapdash.com/product/purple-vue-admin-free-dashboard-template/?ref=23"&gt;Purple Vue Admin&lt;/a&gt; - Free VueJS product&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDwqzOcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-bootstrapdash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDwqzOcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-bootstrapdash.png" alt="Black Friday - BootstrapDash offer."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrappixel-95off" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://bit.ly/2J1Fhwl"&gt;WrapPixel&lt;/a&gt;&lt;/strong&gt; 95%OFF
&lt;/h2&gt;

&lt;p&gt;The BF bundle contains 12 Bootstrap Templates, 8 Angular Templates, 5 React Templates, and 3 Vue Templates.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;BF Bundle Link - &lt;a href="https://bit.ly/2J1Fhwl"&gt;WrapPixel BF Offer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;FREE products from WrapPixel:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wrappixel.com/templates/severny-bootstrap-dashboard-free/?ref=157"&gt;Severny Bootstrap Dashboard Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wrappixel.com/templates/ample-free-react-dashboard/?ref=157"&gt;Ample React Dashboard Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wrappixel.com/templates/adminpro-vuetify-admin-lite/?ref=157"&gt;AdminPro VueJs Lite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guNGF-rU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-wrappixel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guNGF-rU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-wrappixel.png" alt="Black Friday - WrapPixel offer."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#appseed-70off" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://appseed.us/?ref=dev"&gt;AppSeed&lt;/a&gt;&lt;/strong&gt; 70%OFF
&lt;/h2&gt;

&lt;p&gt;PROMO Starters are coded in Flask and Django with basic modules, database, authentication, and deployment scripts on top of premium UI KITS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bundle Link: &lt;a href="https://appseed.us/bundles/black-friday?ref=home-cta"&gt;AppSeed Black Friday&lt;/a&gt; &lt;strong&gt;$99&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Popular FREE Starters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-dattaable"&gt;Datta Able Django&lt;/a&gt; - a nice Django dashboard&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-volt"&gt;Flask Volt&lt;/a&gt; - Open-Source flask dashboard&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-boilerplate-dashboard-argon"&gt;Flask Dashboard Argon&lt;/a&gt; - Simple Flask Dashboard&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIfmlYNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-appseed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIfmlYNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/black-friday-deals/black-friday-deals/main/media/bf-appseed.png" alt="Black Friday - AppSeed offer."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Thank You!&lt;/strong&gt; Please suggest more &lt;strong&gt;sweet deals&lt;/strong&gt; in the comments. &lt;/p&gt;

</description>
      <category>blackfriday</category>
      <category>discounts</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Have you built any projects with WebAssembly?</title>
      <author>Madza</author>
      <pubDate>Wed, 25 Nov 2020 12:17:04 +0000</pubDate>
      <link>https://dev.to/madza/have-you-built-any-projects-with-webassembly-28f7</link>
      <guid>https://dev.to/madza/have-you-built-any-projects-with-webassembly-28f7</guid>
      <description>&lt;p&gt;&lt;a href="https://webassembly.org/"&gt;WebAssembly&lt;/a&gt; is a safe, portable, low-level format designed for efficient execution and compact representation of code on modern processors including in a web browser.&lt;/p&gt;

&lt;p&gt;At the end of 2019, W3C &lt;a href="https://www.w3.org/2019/12/pressrelease-wasm-rec.html.en"&gt;announced&lt;/a&gt; that WA has officially become the fourth language for the Web, which allows code to run in the browser.&lt;/p&gt;

&lt;p&gt;Have you built any projects with WA and do you believe in the future potential for it?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>localStorage vs cookies: the "tabs vs spaces" sterile debate of web development 🙄</title>
      <author>Olivier Guimbal</author>
      <pubDate>Wed, 25 Nov 2020 09:32:24 +0000</pubDate>
      <link>https://dev.to/oguimbal/localstorage-vs-cookies-the-tabs-vs-spaces-sterile-debate-of-web-development-h36</link>
      <guid>https://dev.to/oguimbal/localstorage-vs-cookies-the-tabs-vs-spaces-sterile-debate-of-web-development-h36</guid>
      <description>&lt;p&gt;I'm a tad tired of reading "dont use localStorage, it's not secure". Why ? Oh, yes "its accessible in JS". Let me tell you how this seems to be an overrated argument to me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://xkcd.com/386/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLafQ_6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yr9a9rszbmarrmk7u20q.png" alt="duty calls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#if-someone-owns-you-someone-owns-you" class="anchor"&gt;
  &lt;/a&gt;
  If someone owns you, someone owns you.
&lt;/h1&gt;

&lt;p&gt;If someone can run arbitrary JS on your website, do you really believe a peremptible JWT will necessarily be the only thing that can be exploitable ?&lt;/p&gt;

&lt;p&gt;Personally, I'd go with something far more interesting to me: &lt;strong&gt;Collecting what user are typing in password boxes&lt;/strong&gt;. Or just performing the requests that interest me directly from their browser. Those exploits are even easier to write when using cookies, given that you dont have to guess where is the token stored nor how to use it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cookies-also-have-their-drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Cookies also have their drawbacks
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Protecting against CSRF is not that easy, and beginners are not even aware of it.&lt;/li&gt;
&lt;li&gt;Implementation of multiple authentication is harder (if you're writing a signle API that must be usable in multiple websites)&lt;/li&gt;
&lt;li&gt;You cant control them (easily tell if you're logged-in, read associated data, ...)&lt;/li&gt;
&lt;li&gt;CORS is harder with them.&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#xss-malicious-js-dependencies-the-easy-fix" class="anchor"&gt;
  &lt;/a&gt;
  XSS / Malicious JS dependencies: The easy fix.
&lt;/h1&gt;

&lt;p&gt;You're worried that one of your dependencies might be accessing your localStorage maliciously ?&lt;/p&gt;

&lt;p&gt;Well, that's not a strong valid argument, you could just prevent it to do so like that when bootstraping your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And voilà ! There is no more localStorage exposed in your window, but you still can access your tokens via the "storage" local variable (of course, you must keep it in a private scope).&lt;/p&gt;

&lt;p&gt;These two lines of code will protect you from the most obvious and common exploit that localStorage is blamed for.&lt;/p&gt;

&lt;p&gt;(of course you could imagine spying tokens by overriding fetch or equivalent, but that also is mitigable... its about preventing 99% of exploits, this is not strong security) &lt;/p&gt;

&lt;p&gt;If other parts of your app need to access local storage, you could set &lt;code&gt;window.localStorage&lt;/code&gt; to a proxy that only lets the user access non critical parts of your local storage, leaving your precious tokens out of their sight.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#which-one-to-use-then-" class="anchor"&gt;
  &lt;/a&gt;
  Which one to use then ?
&lt;/h1&gt;

&lt;p&gt;I think that the web has more suffered (and is still suffering) from CSRF attacks compared to stolen JWTs, so dont tell me that https cookies are the secure way to go. Unless you're writing ultra-secure and highly-reviewed code, no, they're not. Its easier to make mistakes with cookies compared with localStorage tokens.&lt;/p&gt;

&lt;p&gt;Just to be clear: I dont prefer one over another... I'm just saying that this debate is a bit useless, both approaches having their own sweetspots and weakspots.&lt;/p&gt;

&lt;p&gt;I'm just sick of people explaining you otherwise with a condescending tone just because they think they've understood all there is to know by saying "its accessible by JS". Or because they've read somewhere that localStorage tokens might be considered as a potential security leak by some. Give me a break. The world is about nuance, not about dogmas.&lt;/p&gt;

&lt;p&gt;Happy to hear what you think of this in the comments.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>3 amazing REACT HOOKS to keep your code organized neatly</title>
      <author>Douglas Parsons</author>
      <pubDate>Wed, 25 Nov 2020 08:52:00 +0000</pubDate>
      <link>https://dev.to/dglsparsons/3-amazing-react-hooks-to-keep-your-code-organized-neatly-ghe</link>
      <guid>https://dev.to/dglsparsons/3-amazing-react-hooks-to-keep-your-code-organized-neatly-ghe</guid>
      <description>&lt;p&gt;Hi, my name is Doug. I’ve been a developer for several years and now work as the Lead Engineer at Shamaazi. Over this period of time, I have written a lot of different UIs and learned a lot of ways to structure React code.&lt;/p&gt;

&lt;p&gt;This week I wanted to share my experience of the custom React Hooks I have found the most useful for producing websites in the cleanest, simplest way possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  React Hooks
&lt;/h2&gt;

&lt;p&gt;Hooks were first introduced to React in version 16.8, after being teased in 2018. There’s a fantastic guide introducing them on the &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React website&lt;/a&gt;. Simply stated, they are a way to write side-effects for functional UI components. This allows you to write parts of your UI as JavaScript functions, but still have the ability to manage state, call APIs, use storage, authenticate users, and so on.&lt;/p&gt;

&lt;p&gt;React provides some hooks out of the box (&lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useContext&lt;/code&gt; being the main three). On top of this, it allows you to compose your own higher-level hooks to separate out reusable logic. These custom hooks are what I’ll explore here. Here are the three I’ve found the most useful across the range of products we produce at Shamaazi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performing-asynchronous-actions" class="anchor"&gt;
  &lt;/a&gt;
  Performing Asynchronous Actions
&lt;/h2&gt;

&lt;p&gt;Most websites have to perform some form of asynchronous actions, whether it is loading data to display on the page or submitting data based on a user’s input and actions. It’s helpful to keep a track of the status of these asynchronous actions; is it currently loading? has it returned a result? Was there an error?&lt;/p&gt;

&lt;p&gt;We found a lot of our components started sharing a lot of similar code, either for fetching data on an initial load or for submitting data. This looked like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doSomeAction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="nx"&gt;broke&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;All this loading and error logic can be pulled into a hook, making our interface much neater.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyTidyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doSomeAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="nx"&gt;broke&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;useAsync&lt;/code&gt; hook is responsible for managing the loading, error and result states, removing the need for all this logic within the actual component. It also lets us reuse this throughout our application. This massively simplifies loading data onto a page.&lt;/p&gt;

&lt;p&gt;As a bonus, we found we also wanted the ability to execute an action later, rather than just when the component is created. This is useful for performing asynchronous actions based on a user's input; actions like submitting a form can use the same hook but pass a &lt;code&gt;false&lt;/code&gt; value as a second parameter. This indicates that they don’t want the action to be executed straight away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;submitSomeForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We also found that the hook sometimes caused a memory leak if a form submission navigated away from the component (e.g. a form might take you to the next page when it is submitted, but setting &lt;code&gt;loading&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; after you’ve been taken away from the form is a memory leak). We’ve handled this by tracking whether the hook is mounted on the page (tracked through &lt;code&gt;useRef&lt;/code&gt;). We’ll only update any state if the component is still present. This avoids any memory leaks.&lt;/p&gt;

&lt;p&gt;The full version of our &lt;code&gt;useAsync&lt;/code&gt; hook is here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;asyncFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;immediate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Track a reference to whether the useAsync is actually on a mounted component.&lt;/span&gt;
  &lt;span class="c1"&gt;// useEffect below returns a cleanup that sets this to false. Before setting&lt;/span&gt;
  &lt;span class="c1"&gt;// any state, we check if the cleanup has run. If it has, don't update the state.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncFunction&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;asyncFunction&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;immediate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;immediate&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-localstorage-or-sessionstorage" class="anchor"&gt;
  &lt;/a&gt;
  Updating LocalStorage or SessionStorage
&lt;/h2&gt;

&lt;p&gt;As part of some of our products, we populate a 'shopping basket'. This keeps a track of what a user has been doing. Sometimes, we want this to persist even if they navigate away from our site, refresh the page, or close the browser. To achieve this, we use a combination of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;localStorage&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"&gt;sessionStorage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React itself doesn't provide any hooks for storing data in &lt;code&gt;localStorage&lt;/code&gt; or &lt;code&gt;sessionStorage&lt;/code&gt;, but we wanted a consistent experience with &lt;code&gt;useState&lt;/code&gt;. Realistically, it shouldn't be any harder to use &lt;code&gt;localStorage&lt;/code&gt; than it would be to use state normally.&lt;/p&gt;

&lt;p&gt;For example, we might want to use &lt;code&gt;localStorage&lt;/code&gt; to keep track of a user's input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storageComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;storage_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default_value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our hooks to achieve this look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Pass initial state function to useState so logic is only executed once&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storedValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStoredValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Update storage every time the value is changed&lt;/span&gt;
      &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storedValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storedValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storedValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStoredValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useSessionStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#authenticating-users" class="anchor"&gt;
  &lt;/a&gt;
  Authenticating users
&lt;/h2&gt;

&lt;p&gt;A super common scenario we've come across is having a bunch of components that all care whether a user is logged in. They often care about acting on the user too, through methods like &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt; or &lt;code&gt;resetPassword&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to keep all these components in sync, we only want a single source of information about the current user. We could do this by having a component wrapping our entire application that manages a &lt;code&gt;user&lt;/code&gt; state, and passes any props down to where they are used for the &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt; or &lt;code&gt;resetPassword&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This quickly becomes messy though, with many components that don't really care being passed &lt;code&gt;user&lt;/code&gt; &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;logout&lt;/code&gt; props even if they don't use them themselves - only a child of theirs does.&lt;/p&gt;

&lt;p&gt;Luckily React provides the idea of a &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecontext"&gt;context&lt;/a&gt;. Allowing us to solve this problem.&lt;/p&gt;

&lt;p&gt;We can create an Auth context, and use a hook to get any information from it we want. We can also embed our auth API calls into this context.&lt;/p&gt;

&lt;p&gt;This would look like the following to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In our top level App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ProvideAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hooks/useAuth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProvideAuth&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RestOfApplication&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ProvideAuth&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in a component that wants to use Auth&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hooks/useAuth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetPassword&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This hook itself looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Hook for child components to get the auth object and re-render when it changes.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Provider component that wraps components and makes useAuth() available&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProvideAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;authContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/authContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Provide Auth hook that creates auth object and handles state&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useAuthProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the logged in user when created&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resetPassword&lt;/span&gt;
    &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This has the additional benefit of keeping all of the authentication logic together. To change to a different auth provider, we would only have to change this one file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React provides some really powerful abstractions for creating code that is neatly organised and easy to read. Here, we’ve looked at the three React Hooks I’ve found the most useful: &lt;code&gt;useAsync&lt;/code&gt; for executing asynchronous actions either when a component is created or when a user performs an action, &lt;code&gt;useStorage&lt;/code&gt; for using &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; in the same way as &lt;code&gt;useState&lt;/code&gt;, and finally, &lt;code&gt;useAuth&lt;/code&gt; for managing users and authentication.&lt;/p&gt;

&lt;p&gt;These three hooks provide powerful abstractions that let you build React components in a simple manner.&lt;/p&gt;




&lt;p&gt;Do you have any other custom React Hooks you find useful? Think I’ve missed any key ones? Please let me know.&lt;/p&gt;




&lt;p&gt;Looking for other ways to keep your code organised? Check out my &lt;a href="https://dev.to/dglsparsons/how-to-write-immutable-code-and-never-get-stuck-debugging-again-4p1"&gt;article on writing IMMUTABLE code&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href="https://twitter.com/dglsparsons"&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Exploring HTML dialog element with examples</title>
      <author>Tapas Adhikary</author>
      <pubDate>Wed, 25 Nov 2020 07:53:25 +0000</pubDate>
      <link>https://dev.to/atapas/exploring-html-dialog-element-with-examples-2c43</link>
      <guid>https://dev.to/atapas/exploring-html-dialog-element-with-examples-2c43</guid>
      <description>&lt;p&gt;The &lt;code&gt;dialog&lt;/code&gt;(widely known as a modal dialog) is a popup box on a web page.  A dialog is also called a modal dialog when it obscures the rest of the page content with an overlay. The purpose of a modal dialog is when it displays, the user should not be able to interact with the rest of the page content.&lt;/p&gt;

&lt;p&gt;Here is an example of a sample modal dialog. The darker background of a dialog is called the &lt;code&gt;backdrop cover&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6I-1NUEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606113590688/oknRwOpCg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6I-1NUEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606113590688/oknRwOpCg.png" alt="sample.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1: Sample modal dialog box with a backdrop cover&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, we will explore the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element from HTML and see the usages of it. We will also learn about some of the shortcomings and finally, validate if it is ready to use in your applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-html-native-raw-ltdialoggt-endraw-element" class="anchor"&gt;
  &lt;/a&gt;
  The HTML native &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; Element
&lt;/h1&gt;

&lt;p&gt;The HTML &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element represents a dialogbox which has one special attribute,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;open&lt;/code&gt;: Indicates that the dialog is active and can be interacted with. When the open attribute is not set, the dialog shouldn't be shown to the user.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dialog&amp;gt;&lt;/span&gt;
  User can not see me.
&lt;span class="nt"&gt;&amp;lt;/dialog&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dialog&lt;/span&gt; &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I'm open and visible!
&lt;span class="nt"&gt;&amp;lt;/dialog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As I write this article, It has got browser support of,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Chrome&lt;/code&gt;: From version 37+&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Edge&lt;/code&gt;: From version 79+&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Firefox&lt;/code&gt;: Supported in Firefox by enabling the &lt;code&gt;dom.dialog_element.enabled&lt;/code&gt; flag in the about: config setting. Even with the flag, the backdrop styling CSS with the dialog doesn't work yet.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Safari&lt;/code&gt;: No support yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read about the other platforms &lt;a href="https://caniuse.com/?search=dialog"&gt;from here&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This feature deserves wider support than what it has today. But the good news is, this feature is Polyfillable. You can install the &lt;a href="https://github.com/GoogleChrome/dialog-polyfill"&gt;polyfill from here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-ltdialoggt-endraw-apis" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; APIs
&lt;/h1&gt;

&lt;p&gt;There are APIs available to show and hide the dialog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to show the dialog&lt;/span&gt;
&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to close the dialog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The dialog box appears with the basic user-agent provided styles like, auto margin, thick border styles, etc. which can be easily customized using CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9sjAicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606132162636/6wGpBnMAJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9sjAicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606132162636/6wGpBnMAJ.png" alt="ua_styles.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 2: Shows the basic UA styles on the Chrome browser&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a CodePen shows the show-hide of a basic dialog element.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/wvWVgQy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-raw-dialogshowmodal-endraw-instead-of-raw-dialogshow-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;dialog.showModal()&lt;/code&gt; instead of &lt;code&gt;dialog.show()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One of the fancy things about building your own dialog is how you get a backdrop cover such that, user can not interact with the rest of the app. The method &lt;code&gt;dialog.showModal()&lt;/code&gt; gives that to you for free when you use it from JavaScript.&lt;/p&gt;

&lt;p&gt;By default, the backdrop cover is of the low opacity black color. You can control the look of it with the &lt;code&gt;::backdrop&lt;/code&gt; pseudo-element. Check this CodePen to know how it works,&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/jOrgBrJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-the-dialog-from-the-raw-ltformgt-endraw-element" class="anchor"&gt;
  &lt;/a&gt;
  Closing the dialog from the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements can close a dialog if they have the attribute method="dialog". We do not need an explicit &lt;code&gt;dialog.close()&lt;/code&gt; JavaScript API call in that case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dialog&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm a dialog. Close me using the button below.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Close&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dialog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#escapeesc-key-close" class="anchor"&gt;
  &lt;/a&gt;
  Escape(ESC) key close
&lt;/h2&gt;

&lt;p&gt;The functionality to close the dialog using the escape key comes by default with the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element. This is an added benefit as you do not have to implement it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  Web Accessibility
&lt;/h2&gt;

&lt;p&gt;Modals are actually the hardest to achieve web accessibility. The &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element spec mentions addressing the &lt;a href="https://html.spec.whatwg.org/multipage/dom.html#concept-element-accessibility-considerations"&gt;accessibility concerns&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shortcoming" class="anchor"&gt;
  &lt;/a&gt;
  Shortcoming
&lt;/h1&gt;

&lt;p&gt;The functionality of clicking outside of a dialog to close it is not available yet. Maybe it will be added in the future. As of now, you have to implement it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-is-it-ready-to-use" class="anchor"&gt;
  &lt;/a&gt;
  So, is it Ready to Use?
&lt;/h1&gt;

&lt;p&gt;Apart from the &lt;code&gt;shortcoming&lt;/code&gt; mentioned above, the &lt;code&gt;dialog&lt;/code&gt; component looks complete to use along with the polyfill. As it is available natively with HTML, you do not need any additional library support to implement a modal dialog.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-explore-further" class="anchor"&gt;
  &lt;/a&gt;
  Let's Explore Further
&lt;/h1&gt;

&lt;p&gt;I would like to leave you with this CodePen where you can explore it further to see how a backdrop can be improved, animation can be added. You can also find examples to add a backdrop like effect where it is not supported yet.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/QWEXPZW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-we-end" class="anchor"&gt;
  &lt;/a&gt;
  Before We End...
&lt;/h1&gt;

&lt;p&gt;Thank you for reading this far! Let’s connect. You can @ me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter (@tapasadhikary)&lt;/a&gt; with comments, or feel free to follow. Please like/share this article so that it reaches others as well.&lt;/p&gt;

&lt;p&gt;You may also like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-useful-html-file-upload-tips-for-web-developers-ckgetegpf0c7go9s123wvg7bi"&gt;10 useful HTML file upload tips for web developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/i-made-a-photo-gallery-with-css-animation-heres-what-i-learned-ckfzbk6v903ea2xs14l1942f7"&gt;I made a photo gallery with CSS animation. Here’s what I learned.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-lesser-known-web-apis-you-may-want-to-use-ckejv75cr012y70s158n85yhn"&gt;10 lesser-known Web APIs you may want to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-useful-html5-features-you-may-not-be-using-ckdua7ql300l1m3s1ez7teshc"&gt;10 useful HTML5 features, you may not be using&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Animated Buttons using Javascript (GSAP) - 1</title>
      <author>Sooraj</author>
      <pubDate>Wed, 25 Nov 2020 07:28:17 +0000</pubDate>
      <link>https://dev.to/soorajsnblaze333/animated-buttons-using-javascript-gsap-1-23d</link>
      <guid>https://dev.to/soorajsnblaze333/animated-buttons-using-javascript-gsap-1-23d</guid>
      <description>&lt;p&gt;Hey there guys,&lt;br&gt;
     Here is a small animation ripple effect I created using &lt;a href="https://greensock.com/"&gt;gsap&lt;/a&gt;. I created this using just an event listener and a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag along with the &lt;code&gt;gsap fromTo() method&lt;/code&gt;. This is just one of the cool animations you can create. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SoorajSnBlz/embed/ExgYwEb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Furthermore, you can stagger up your animations by using the &lt;code&gt;stagger&lt;/code&gt; property. Stagger will basically run your animations which come under the same property, for example multiple ripples, to run sequentially with a small delay in between them, like this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SoorajSnBlz/embed/rNMBYJq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Our Development Philosophy - Part 1: Architecture, Design Patterns and Programming Principles</title>
      <author>Julian Rothkamp</author>
      <pubDate>Wed, 25 Nov 2020 06:59:22 +0000</pubDate>
      <link>https://dev.to/gittower/our-development-philosophy-part-1-architecture-design-patterns-and-programming-principles-7lj</link>
      <guid>https://dev.to/gittower/our-development-philosophy-part-1-architecture-design-patterns-and-programming-principles-7lj</guid>
      <description>&lt;p&gt;When software projects become bigger and more complex, you might reach a tipping point: one day, code quality becomes paramount. You can get away with easy fixes and a "quick &amp;amp; dirty" mindset in smaller projects. But as soon as complexity increases, you'll begin to feel sorry for every compromise you've made so far.&lt;/p&gt;




&lt;p&gt;We've certainly experienced these growing pains in our own journey - with &lt;a href="https://www.git-tower.com?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=dev-philosophy-1"&gt;Tower&lt;/a&gt; steadily growing to now serve 100,000 developers and designers. This post talks about some of the important things we've learned along the way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By the way: Part 2 of this series will soon follow. Be sure to &lt;a href="https://www.git-tower.com/newsletter?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=dev-philosophy-1"&gt;join our newsletter&lt;/a&gt; to be notified.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#applications-need-solid-foundations" class="anchor"&gt;
  &lt;/a&gt;
  Applications Need Solid Foundations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vU2ZJb33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j1syz10dhq4enl1exp5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vU2ZJb33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j1syz10dhq4enl1exp5q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building even the smallest of software applications is a major investment for most companies.&lt;/strong&gt; Your team will spend days, weeks, months, and maybe even years building that application. But not only is this a huge one-time investment - you'll have to continue to put time and effort into it over its complete lifetime. Neither the coding nor the investment will stop when the application launches.&lt;/p&gt;

&lt;p&gt;Let's take our own product &lt;a href="https://www.git-tower.com?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=dev-philosophy-1"&gt;Tower&lt;/a&gt; as an example: we had worked for 12 months to develop version 1.0 and bring it to market. But in the six years since then, we have produced many times more code than the original product contained.&lt;br&gt;
This constant, never-ending maintenance and extension of an application means that its foundation becomes crucial. Much like with a house, it's not a clever idea to save some money by building just a cheap foundation.&lt;/p&gt;

&lt;p&gt;Logically, one of our biggest goals is to make extending and improving that application as easy and safe as possible. This is where &lt;strong&gt;application architecture&lt;/strong&gt; comes into play.&lt;/p&gt;

&lt;p&gt;Only a really good architecture will help us protect the huge investment that building an application means. We will explore in greater depth what "good" architecture means (in our humble opinion). But the main qualities you'll want to aim for are the same timeless classics in every project: solidity, maintainability, extensibility and scalability.&lt;/p&gt;

&lt;p&gt;Improving and refactoring an app's architecture will often seem like luxury - or maybe even like wasted time. But in reality, it should better be seen as a necessity, as a crucial and one of the most important duties of an experienced software engineer.&lt;/p&gt;

&lt;p&gt;When we ask ourselves if we should invest into architectural improvements, the answer is usually yes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#choosing-the-boring-solution" class="anchor"&gt;
  &lt;/a&gt;
  Choosing the Boring Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CG59xDRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ovhz330cso14cw13ohow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CG59xDRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ovhz330cso14cw13ohow.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When solving a complex problem, it's sometimes very tempting to choose an &lt;em&gt;extraordinary&lt;/em&gt; solution. Not only will this solve the problem - but it will also impress your teammates and bring you everlasting glory. 🦄&lt;/p&gt;

&lt;p&gt;An even better solution, however, would probably be a boring one. One that is easy to understand, even for your junior colleagues. One that is well-known on your platform and language. One that is absolutely &lt;em&gt;not&lt;/em&gt; extraordinary.&lt;/p&gt;

&lt;p&gt;Using such a boring solution means that you're using simple vocabulary, which greatly increases the chances of everybody understanding you. This will make it a lot easier for everybody to follow along - including new team members (and yourself, a couple of weeks after you've written that code).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When in doubt, go with the boring solution.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#coding-the-lego-way" class="anchor"&gt;
  &lt;/a&gt;
  Coding the Lego Way
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ypgmkw2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0enawlofg7dig34ozir2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ypgmkw2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0enawlofg7dig34ozir2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trick question: if you had both modeling clay and Lego bricks available, what would you choose for building your application? Let's say you went with the modeling clay: pretty easy to shape, bright colors, strawberry taste - what more could you want? But the problems are inevitable as soon as you want to correct, extend, or improve something you've already built. There is no way to easily separate individual parts after you've mixed and mingled them.&lt;/p&gt;

&lt;p&gt;If you've chosen Lego bricks, on the other hand, subsequent changes are easy: the yellow "authentication" block isn't big enough? Just take it out and replace it with a bigger one. The green "export format" block needs to be extended with a PDF option? Just put an additional light green brick next to it.&lt;/p&gt;

&lt;p&gt;Modularity, the concept that the Lego bricks symbolize, is synonymous with extensibility, maintainability and longevity of your application. No matter which framework, language, or programming principle you prefer: always shoot for modularity in your code!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#aiming-for-simplicity" class="anchor"&gt;
  &lt;/a&gt;
  Aiming for Simplicity
&lt;/h2&gt;

&lt;p&gt;Acronyms FTW! Car enthusiasts might now think of BMW, but software developers should think of &lt;strong&gt;KISS&lt;/strong&gt; and &lt;strong&gt;YAGNI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;"&lt;strong&gt;Keep it simple, stupid&lt;/strong&gt;" should remind us that the simple solution will always beat the overengineered solution. The reasons why this is true are almost endless. And they might be easier to understand when looking at the opposite: complex code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex code is a perfect hiding place for mistakes.&lt;/li&gt;
&lt;li&gt;Complex code is hard to understand, for your coworkers and yourself.&lt;/li&gt;
&lt;li&gt;Complex code cannot easily be extended.&lt;/li&gt;
&lt;li&gt;Complex code cannot be reused. And, last but certainly not least, writing complex code will cause your teammates to brand you as an outlaw.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a simpler solution seems sufficient right now, you should always aim for it.&lt;/p&gt;

&lt;p&gt;When you realize that your solution isn't really necessary at all, you should drop it. This is what YAGNI is about - "&lt;strong&gt;You ain't gonna need it&lt;/strong&gt;" reminds us to stay modest when planning the volume and scope of our implementations. Will users really need this feature? Will they need this option &lt;em&gt;within&lt;/em&gt; a feature? These questions of course will translate to our code: will we really need that class / module / routine?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#constantly-redefining-the-term-edge-case" class="anchor"&gt;
  &lt;/a&gt;
  Constantly Redefining the Term "Edge Case"
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ftd7u2PY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zz9huo0woiy4ln8olhae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ftd7u2PY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zz9huo0woiy4ln8olhae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This point might not apply to every application in the same extent. But with &lt;a href="https://www.git-tower.com?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=dev-philosophy-1"&gt;Tower&lt;/a&gt; being used by over 100,000 people worldwide, we constantly had to redefine the term "edge case" for us.&lt;/p&gt;

&lt;p&gt;If your application serves a large user base, you will inevitably have to be more thorough when thinking about how people will use it. Things that rarely occur with a thousand users might become a daily event for 100,000 users.&lt;/p&gt;

&lt;p&gt;This makes defining the term "edge case" a very individual matter: each and every team has to define for themselves what &lt;em&gt;they&lt;/em&gt; consider an edge case. Also, be prepared to constantly redefine this term as your user base grows: Your current edge cases become too common to qualify for that label; and, at the same time, new edge cases will appear.&lt;/p&gt;

&lt;p&gt;It pays off to invest a little more time thinking about these things before jumping into implementation. This way, you can include graceful handling of these cases already when writing the original implementation. This is much easier than having to catch up on it a couple of weeks later - when both your memory of the problem isn't fresh anymore and when the innocent little edge case has somehow turned out to be a full-blown bug.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-good-apis" class="anchor"&gt;
  &lt;/a&gt;
  Creating Good APIs
&lt;/h2&gt;

&lt;p&gt;I'm sure you've used a third-party API at some point in your dev career - for example to create new contacts in your CRM, to send emails through a newsletter service, or to virtually do anything else with a third-party service.&lt;/p&gt;

&lt;p&gt;If you've interacted with a couple such APIs, you will certainly have noticed some differences between them: using one was probably more pleasant than the other. It's easy to notice which API was designed thoroughly, by an experienced developer, and probably with a lot of effort and thought. And it's just as easy to be frustrated with an API that was designed in a poor and sloppy way. The former was probably a joy to use, while the latter was probably... not.&lt;/p&gt;

&lt;p&gt;Since the effects are so obvious, most developers tend to quickly agree that it's almost a duty to design &lt;em&gt;public&lt;/em&gt; APIs in a careful and thought-out way. Nobody wants to work with a crappy API - and nobody wants to burden other developers with using &lt;em&gt;their&lt;/em&gt; API being crappy.&lt;/p&gt;

&lt;p&gt;Modern software design puts great emphasis on the concept of "application programming interfaces". However, as most developers already know, the concept goes a lot deeper and is not exclusive to a &lt;em&gt;public&lt;/em&gt; interface. Instead, you should build APIs inside your application, for internal use, too.&lt;/p&gt;

&lt;p&gt;Approaching these &lt;em&gt;internal&lt;/em&gt; APIs in exactly the same way you'd create a &lt;em&gt;public&lt;/em&gt; one can make a huge difference: your colleagues (and you) will want to interact with this part of your application. Making the interaction as easy as possible for these people is one of the best goals you can have.&lt;/p&gt;

&lt;p&gt;An easy, thoughtful API is probably the part of your software where quality matters the most. Your colleagues might forgive you a little sloppiness in the internals of this or that method. But they won't (and shouldn't) forgive you for creating a bad API.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#design-patterns" class="anchor"&gt;
  &lt;/a&gt;
  Design Patterns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--enVrr26O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kfqmwj1itm2yogfmfxgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--enVrr26O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kfqmwj1itm2yogfmfxgg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, a solution is so beautiful, you wish you had the right problem to apply it to. But unfortunately, problems come first. As beautiful as your new screwdriver may be (imagine a handle made of gold, with your initials engraved, of course...), if the problem at hand is to knock in a nail, it makes for only a less than perfect solution.&lt;/p&gt;

&lt;p&gt;Now, after teaching you all I know about manual craft, let's return to software development - and consider "design patterns" as your toolbox. Every design pattern you know (and understand) is an instrument in your toolbox. It's certainly great to have many of them!&lt;/p&gt;

&lt;p&gt;The problems start, however, as soon as you let the patterns dictate your coding. They should be there to support you, to propose a proven solution - for the right problem! Programming paradigms should be used where they fit and not be enforced. Your components should be designed with your application's requirements in mind - not with a beautiful design pattern.&lt;/p&gt;

&lt;p&gt;In cases where you've indeed found a helpful pattern for your current problem, there's only one more thing: be sure to really &lt;em&gt;understand&lt;/em&gt; the pattern and its consequences on your coding.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#embrace-best-practices" class="anchor"&gt;
  &lt;/a&gt;
  Embrace Best Practices
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5qMvcTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a1xdr6ymqe7xkehzjqkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5qMvcTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a1xdr6ymqe7xkehzjqkc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's hard to find a programming problem that hasn't been solved by someone else already. And still, developers around the world are reinventing the wheel countless times, every day. I think it's a mixture of different things that encourages people to do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"&lt;strong&gt;I hate having 400 third-party libraries in my project.&lt;/strong&gt;" - Absolutely understandable, no one would love this. The thing is: when I'm talking about "solved problems", such a proven solution doesn't necessarily have to take the form of ready-made &lt;em&gt;code&lt;/em&gt;. It could also be a mere concept, a design pattern, or simply a discussion with the guy next door that you know has solved something similar. Solutions can take many forms - so don't limit yourself to just "libraries" and other forms of "complete" solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;strong&gt;It's just a small probem. I'll have my own solution in no time.&lt;/strong&gt;" - Every developer with more than a single day of experience has learned a very valuable lesson: Problems are (almost always!) more complex than they first seem. Experienced developers will have learned another lesson: Even with growing experience, it's still somewhere between hard and impossible to see all of the potential complexities that a problem contains. Put simply: we are prone to underestimate problems, again and again.&lt;br&gt;
All of this means that we should thoroughly evaluate if the problem at hand &lt;em&gt;really has to be&lt;/em&gt; solved by you on your own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;strong&gt;I don't like the existing solutions. I can create something better.&lt;/strong&gt;" - This could very well be another form of underestimation. Especially if a solution has been around for a while and used in many projects, you should thorougly check if your evaluation of that solution being bad is really correct. Again, we often tend to underestimate the complexities that hide in even the simplest problems. There's also another dimension to this topic: if the solution we're talking about is a commonly agreed way to handle such a problem - either in your team or on your technical platform - then you should again think twice before you go your very own way. The very least you should do is discuss your objections with your teammates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this means that "best practices" - in the form of proven concepts, conventions, patterns, and high-quality libraries - should always be your first point of reference. After carefully verifying that those best practices aren't suitable for your special case, you're free to go your own way.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fashiondriven-development" class="anchor"&gt;
  &lt;/a&gt;
  Fashion-Driven Development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QscluwYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uv2ov9zapcfz0hxum7ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QscluwYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uv2ov9zapcfz0hxum7ex.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just for a moment, please imagine we'd be stuck in the eighties: we'd be stuck with rotary phones, flared pants, and terrible haircuts. What an unsettling idea...&lt;br&gt;
But thankfully, the world has evolved: technical (and fashionable) advancements have made things possible that weren't possible before. New technology has enabled us to create new things.&lt;/p&gt;

&lt;p&gt;But what about "old" technology? What about the software frameworks and libraries that were created yesterday? Are they, as a natural consequence, yesterday's news?&lt;/p&gt;

&lt;p&gt;In many fields, especially on the web, it's easy to get this impression: the newer the framework, the better it must be. Everything that was created last week is automatically inferior and, by all means, should be abandoned. But by following every new trend, we chicken out of the hard work to improve the things we already have - and miss out on a lot of quality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Quality takes time.&lt;/strong&gt; A piece of software that is new hasn't reached its peak, yet. It cannot. It will inevitably contain bugs and other problems that one can only &lt;em&gt;hope&lt;/em&gt; to correct with time and lots of hard work. New technology, therefore, isn't always &lt;em&gt;better&lt;/em&gt; technology.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality needs collaboration.&lt;/strong&gt; If, over time, we also seek the advice and feedback of others, we can harness another chance to make better software. Note that "collaboration" in this sense can come in many forms: as feedback and direct contributions, but also simply in the form of &lt;em&gt;usage and trial&lt;/em&gt;, e.g. when a library is included in many real-world projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality grows out of failure.&lt;/strong&gt; New things haven't been given the chance to fail, yet. Technology is no exception to this rule: you have to show me perfect code that was written on the first go. Software &lt;em&gt;must&lt;/em&gt; have failed and been improved before it can be regarded to be mature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While diving into new technology is important, we need to keep an eye on the &lt;em&gt;criteria&lt;/em&gt; we use to evaluate it. &lt;em&gt;Novelty&lt;/em&gt; isn't the exciting criteria - but &lt;em&gt;usefulness&lt;/em&gt; is. &lt;strong&gt;New technology needs to provide actual &lt;em&gt;value&lt;/em&gt; over existing solutions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We don't have to throw older, proven technologies out of the window the same moment we discover something new. Make sure you understand both the old technology and the new one before buying into the next new thing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#stackoverflowdriven-development" class="anchor"&gt;
  &lt;/a&gt;
  Stack-Overflow-Driven Development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlgyA3da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqaza2nvhs7ebugqr8dt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlgyA3da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqaza2nvhs7ebugqr8dt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank God for StackOverflow.com. I seriously can't imagine my (programming) life without it. And with it being one of the most visited sites on the web, I guess I'm not alone.&lt;/p&gt;

&lt;p&gt;There's a long friendship between me and Stack Overflow. It helped me countless times when I was stuck on a problem. It gave me an idea of how other people had approached the same problem. Sometimes these other people helped me solve my problem. Sometimes they gave me a hint for a possible solution. And sometimes reading their problems &lt;em&gt;at least&lt;/em&gt; let me know that I wasn't alone with a miserable bug...&lt;/p&gt;

&lt;p&gt;After hours or even days of searching and trying different things, your shields are down. You are crawling through your code on all fours like a man who's lost in the desert. But all of a sudden your search is successful! Eureka! Searching Stack Overflow has finally yielded a piece of code that &lt;em&gt;works&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;That's when you have to watch out and resist the temptation to take code that &lt;em&gt;works&lt;/em&gt; for code that's &lt;em&gt;good&lt;/em&gt;. What you've found on Stack Overflow is - in all but the rarest cases - not a &lt;em&gt;solution&lt;/em&gt; but rather a &lt;em&gt;clue&lt;/em&gt;. It can certainly make for a great pointer, but it was &lt;em&gt;not&lt;/em&gt; written with your exact problem / requirements / constraints /code base / application in mind. And sometimes, it might simply be a dirty hack.&lt;/p&gt;

&lt;p&gt;Embrace Stack Overflow as a good source of guidance for certain problems. But also take the time to thoroughly and honestly evaluate if you've found a real, solid solution.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#next-up-collaboration-amp-testing" class="anchor"&gt;
  &lt;/a&gt;
  Next Up: Collaboration &amp;amp; Testing
&lt;/h2&gt;

&lt;p&gt;In the second part of this series, we'll talk about collaboration and testing. Be sure to &lt;a href="https://www.git-tower.com/newsletter?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=dev-philosophy-1"&gt;join our newsletter&lt;/a&gt; to make sure you don't miss it!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to deploy your React app with a single command using Netlify! 🙈</title>
      <author>Fahad Imran 👨‍💻</author>
      <pubDate>Wed, 25 Nov 2020 06:17:46 +0000</pubDate>
      <link>https://dev.to/fahadimran/how-to-deploy-your-react-app-with-a-single-command-using-netlify-4oph</link>
      <guid>https://dev.to/fahadimran/how-to-deploy-your-react-app-with-a-single-command-using-netlify-4oph</guid>
      <description>&lt;p&gt;So, you've started learning React.&lt;/p&gt;

&lt;p&gt;Maybe built a couple of apps.&lt;/p&gt;

&lt;p&gt;And now you're looking to &lt;strong&gt;deploy&lt;/strong&gt; them in order to &lt;strong&gt;showcase&lt;/strong&gt; them on your &lt;strong&gt;portfolio&lt;/strong&gt; or link them on your &lt;strong&gt;resume&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Having live projects that potential recruiters can play with and the test is &lt;strong&gt;absolutely necessary&lt;/strong&gt; nowadays. It not only leaves a great impact but also saves the recruiters the hassle of looking at the source code, trying to figure out what the heck you've built.&lt;/p&gt;

&lt;p&gt;However, deployment is generally considered to be a tedious and time-consuming process. Many people are reluctant to deploy their apps just because they think it involves configuring proxies and managing databases and so on.&lt;/p&gt;

&lt;p&gt;But this is far from the truth.&lt;/p&gt;

&lt;p&gt;Today I will show you how you can deploy your react applications with just a &lt;strong&gt;single command&lt;/strong&gt;. It will literally take &lt;strong&gt;2 minutes&lt;/strong&gt; and you'll have a live and working app that you can show off to potential employers and link to your portfolio or resume.&lt;/p&gt;

&lt;p&gt;So what are you waiting for? Let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-netlify" class="anchor"&gt;
  &lt;/a&gt;
  ⚡ Introducing Netlify!
&lt;/h3&gt;

&lt;p&gt;The tool we will be using is called Netlify. &lt;/p&gt;

&lt;p&gt;It allows you to deploy your front-end apps onto the web. It works with React, Angular, and Vue applications in addition to vanilla JS apps.&lt;/p&gt;

&lt;p&gt;In order to get started, head on over to &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; and create an account. Netlify supports a wide variety of login methods. I would recommend using your GitHub to login but it's up to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-netlify-cli" class="anchor"&gt;
  &lt;/a&gt;
  👨‍💻 Install the Netlify CLI
&lt;/h3&gt;

&lt;p&gt;Once you've created your account, you'll need to install the &lt;strong&gt;netlify CLI&lt;/strong&gt;. The CLI is a very powerful tool that allows you to deploy directly from the command line. Once you have it set up, you'll never have to leave your editor to deploy your projects. One command and you'll be done.&lt;/p&gt;

&lt;p&gt;In order to install the Netlify CLI, you'll need to have npm installed. npm is installed with Node.js. You can download Node.js from the &lt;a href="https://nodejs.org/en/"&gt;official website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once Node.js is installed, open a terminal and change the directory to your react app using the &lt;code&gt;cd&lt;/code&gt; command. Then run the following command to install the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install netlify-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once done, you can check the version of the CLI by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;netlify
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great work. Now you're ready to start deploying some apps!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-your-react-app" class="anchor"&gt;
  &lt;/a&gt;
  🤖 Deploy your React app
&lt;/h3&gt;

&lt;p&gt;From your application directory run the following command to &lt;strong&gt;build&lt;/strong&gt; the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Give it a few seconds and you'll notice a new build folder in your project structure. This contains all your project static files that we will deploy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xv6rSjOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sjx1960fi0i0r7zcfqy3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xv6rSjOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sjx1960fi0i0r7zcfqy3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now run the following command to &lt;strong&gt;deploy&lt;/strong&gt; the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;netlify deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first time you run this command, it will ask you to &lt;strong&gt;authorize netlify&lt;/strong&gt; and will open a browser window. Just click on authorize and head back to your terminal.&lt;/p&gt;

&lt;p&gt;Now, it will ask if you want to &lt;strong&gt;create and configure a new site&lt;/strong&gt; or &lt;strong&gt;Link this directory to an existing site&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muTx7uQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw271tt8mtifk6iiy0vq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muTx7uQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw271tt8mtifk6iiy0vq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select create a new site (using keyboard up or down arrows) and press Enter.&lt;/p&gt;

&lt;p&gt;Then it will ask which &lt;strong&gt;Team&lt;/strong&gt; you want to deploy to. Just keep it default and press Enter.&lt;/p&gt;

&lt;p&gt;After that, it will ask if you want to &lt;strong&gt;change the name of your site&lt;/strong&gt;. By default, it will give your site a random name. Feel free to change the name if you want as it will become your site's URL. Remember that you can always change it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6HaK7pb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fge4vm0brpqsrkx8886u.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6HaK7pb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fge4vm0brpqsrkx8886u.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're done with it press Enter.&lt;/p&gt;

&lt;p&gt;Finally, it will ask for the &lt;strong&gt;publish directory&lt;/strong&gt;. Since we're deploying a React app we shall use the build folder. Type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./build
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gs6LF1kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7m4m889i27ob0w39bxc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gs6LF1kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7m4m889i27ob0w39bxc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press Enter once more.&lt;/p&gt;

&lt;p&gt;It will do its &lt;strong&gt;magic&lt;/strong&gt; and after a few seconds, it will show you a draft URL for your site. Open that URL in your web browser. You'll see your web app deployed. Play around with it to test if everything looks good. &lt;/p&gt;

&lt;p&gt;Once you're satisfied, use the following command to deploy your app to a production site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;netlify deploy --prod
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again type &lt;code&gt;./build&lt;/code&gt; when asked for the publish directory and voila! You're React app is now &lt;strong&gt;deployed&lt;/strong&gt; on the web. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSdRf0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oao2us2khg95viwquqxp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSdRf0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oao2us2khg95viwquqxp.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will see a URL in the terminal. This is the URL for your application. Visit this URL to see your live deployed app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-changes" class="anchor"&gt;
  &lt;/a&gt;
  🛠️ Making changes
&lt;/h3&gt;

&lt;p&gt;Now you might be wondering "That's all fine and good, but how do I make changes to my app? Maybe I want to fix something or change the layout, then what?&lt;/p&gt;

&lt;p&gt;No worries.&lt;/p&gt;

&lt;p&gt;After making changes to your application just run the &lt;code&gt;npm build&lt;/code&gt; command again. &lt;/p&gt;

&lt;p&gt;Then, you can update the deployed app by running &lt;code&gt;netlify deploy --prod&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;It will deploy the new changes and your app will be updated.&lt;/p&gt;

&lt;p&gt;If you want to change the settings of your deployed site, you can visit your account dashboard on netlify. Here you can do things like change the name of the site, add a custom domain, and even delete the deployed app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  🙏 That's All Folks!
&lt;/h3&gt;

&lt;p&gt;That's it! You now have a &lt;strong&gt;working app URL&lt;/strong&gt; that you can showcase on your portfolio and add to your resume.&lt;/p&gt;

&lt;p&gt;Thanks for reading and happy coding! 😀&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me around the web&lt;/strong&gt; 🌍&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/fahadimran_dev"&gt;twitter.com/fahadimran_dev&lt;/a&gt;&lt;br&gt;
Blog: &lt;a href="https://fahadimran.hashnode.dev"&gt;Articles By Fahad&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/fahadimran"&gt;github.com/fahadimran&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📸 &lt;span&gt;Cover Photo by &lt;a href="https://unsplash.com/@%5C_giri%5C_?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;AARN GIRI&lt;/a&gt; on &lt;a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Code Smell 34 - Too Many Attributes</title>
      <author>Maxi Contieri</author>
      <pubDate>Wed, 25 Nov 2020 03:07:56 +0000</pubDate>
      <link>https://dev.to/mcsee/code-smell-34-too-many-attributes-584p</link>
      <guid>https://dev.to/mcsee/code-smell-34-too-many-attributes-584p</guid>
      <description>&lt;p&gt;&lt;em&gt;A class defines objects with lots of attributes.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problems" class="anchor"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Low Cohesion&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Coupling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintainability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Readability&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solutions" class="anchor"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Find methods related to attributes.&lt;/li&gt;
&lt;li&gt;Cluster these methods.&lt;/li&gt;
&lt;li&gt;Break the object related to those clusters.&lt;/li&gt;
&lt;li&gt;Find real objects related to this new objects and replace existing references.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DTOs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Denormalized table rows&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sample-code" class="anchor"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#wrong" class="anchor"&gt;
  &lt;/a&gt;
  Wrong
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#right" class="anchor"&gt;
  &lt;/a&gt;
  Right
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#detection" class="anchor"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;p&gt;Most linters warn when you declare too many attributes. Setting a good warning threshold should be easy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tags" class="anchor"&gt;
  &lt;/a&gt;
  Tags
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;primitive&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Bloated objects know too much and are very difficult to change due to cohesion.&lt;/p&gt;

&lt;p&gt;Developers change these objects a lot, so they bring merge conflicts and are a common problems source.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#relations" class="anchor"&gt;
  &lt;/a&gt;
  Relations
&lt;/h1&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-10-too-many-arguments-4o67" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 10 - Too Many Arguments&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Oct 29 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#credits" class="anchor"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@andasta"&gt;Andy Li&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/container"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;So much complexity in software comes from trying to make one thing do two things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Ryan Singer&lt;/em&gt; &lt;/p&gt;

</description>
      <category>oop</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Big O Notation, Time &amp; Space Complexity</title>
      <author>Ethan Gustafson</author>
      <pubDate>Wed, 25 Nov 2020 03:02:43 +0000</pubDate>
      <link>https://dev.to/ethanmgustafson/big-o-notation-time-space-complexity-44l9</link>
      <guid>https://dev.to/ethanmgustafson/big-o-notation-time-space-complexity-44l9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#big-o-notation"&gt;&lt;strong&gt;Big O Notation&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#runtime"&gt;Runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#time-complexity"&gt;Time Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#space-complexity"&gt;Space Complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#notations"&gt;&lt;strong&gt;Notations&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#linear-raw-on-endraw-"&gt;Linear: &lt;code&gt;O(n)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#constant-raw-o1-endraw-"&gt;Constant: &lt;code&gt;O(1)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quadratic-raw-on2-endraw-"&gt;Quadratic: &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factorial-raw-on-endraw-"&gt;Factorial: &lt;code&gt;O(n!)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logarithmic-raw-olog-n-endraw-"&gt;Logarithmic: &lt;code&gt;O(log N)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#log-linear-raw-on-logn-endraw-"&gt;Log Linear: &lt;code&gt;O(n log(n))&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exponential-raw-o2n-endraw-"&gt;Exponential: &lt;code&gt;O(2^n)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#big-o-cheatsheet"&gt;&lt;strong&gt;Big O Cheatsheet&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation" class="anchor"&gt;
  &lt;/a&gt;
  Big O Notation
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;&lt;strong&gt;Big O Notation&lt;/strong&gt;&lt;/a&gt; is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will completely change how you write code. It is used to help make code readable and scalable. &lt;/p&gt;

&lt;p&gt;Readable code is maintainable code. It is easy to read and contains meaningful names of variables, functions, etc.&lt;/p&gt;

&lt;p&gt;Scalable code refers to speed and memory. The reason code needs to be scalable is because we don't know how many users will use our code. We have to be able to determine solutions for algorithms that weigh in on the costs of speed and memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big O Notation will be used in two ways&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To classify the time complexity(speed) of an algorithm.&lt;/li&gt;
&lt;li&gt;To classify the space complexity(memory) of an algorithm.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#runtime" class="anchor"&gt;
  &lt;/a&gt;
  Runtime
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer science, &lt;a href="https://en.wikipedia.org/wiki/Runtime_(program_lifecycle_phase)"&gt;&lt;strong&gt;runtime&lt;/strong&gt;&lt;/a&gt;, run time, or execution time is the final phase of a computer program's life cycle, in which the code is being executed on the computer's central processing unit (CPU) as machine code. In other words, "runtime" is the running phase of a program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, the runtime is the period of time when an algorithm is running. This is an important term to know for later on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity" class="anchor"&gt;
  &lt;/a&gt;
  Time Complexity
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Time_complexity"&gt;&lt;strong&gt;time complexity&lt;/strong&gt;&lt;/a&gt; is the computational complexity that describes the amount of time it takes to run an algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many pros and cons to consider when classifying the time complexity of an algorithm: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What's the worst-case scenario?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The worst-case scenario will be considered first, as it is difficult to determine the average or best-case scenario.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What data structure should you use?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some notations are used specifically for certain data structures. I will show you down below in the Notations section. There is also a &lt;a href="#big-o-cheatsheet"&gt;Big O Cheatsheet&lt;/a&gt; further down that will show you what notations work better with certain structures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Which one would be a better solution over another?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which structure has a time-efficient notation? A more memory-efficient notation?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You'll have to trade-off between the pros and cons of space and time.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big O is used to determine the time and space complexity of an algorithm. There may be solutions that are better in speed, but not in memory, and vice versa. Just depends on which route is advocated for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity" class="anchor"&gt;
  &lt;/a&gt;
  Space Complexity
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Space_complexity"&gt;&lt;strong&gt;space complexity&lt;/strong&gt;&lt;/a&gt; of an algorithm or a computer program is the amount of memory space required to solve an instance of the computational problem as a function of characteristics of the input.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Space complexity is caused by variables, data structures, allocations, etc. What you create takes up space. Space complexity is determined the same way Big O determines time complexity, with the notations below.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#notations" class="anchor"&gt;
  &lt;/a&gt;
  Notations
&lt;/h2&gt;

&lt;p&gt;The order of the notations is set from best to worst:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Constant&lt;/strong&gt;: &lt;code&gt;O(1)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logarithmic&lt;/strong&gt;: &lt;code&gt;O(log N)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linear&lt;/strong&gt;: &lt;code&gt;O(n)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Log Linear&lt;/strong&gt;: &lt;code&gt;O(n log(n))&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quadratic&lt;/strong&gt;: &lt;code&gt;O(n^2)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Exponential&lt;/strong&gt;: &lt;code&gt;O(2^n)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Factorial&lt;/strong&gt;: &lt;code&gt;O(n!)&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog, I will only cover constant, linear, and quadratic notations. The other notations will include a description with references to certain data structures and algorithms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constant-raw-o1-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Constant: &lt;code&gt;O(1)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Constant Notation is excellent. In terms of speed, the runtime of the function is always the same. If the input increases, the function will still output the same result at the same amount of time.&lt;/p&gt;

&lt;p&gt;Let's say we had an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/Array_data_structure"&gt;Array&lt;/a&gt; is an ordered data structure containing a collection of elements.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/Associative_array"&gt;Associative Array&lt;/a&gt; is an unordered data structure consisting of key-value pairs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;associativeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ethan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When accessing an element of either one of these data structures, the Big O will always be constant time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;// =&amp;gt; C&lt;/span&gt;

  &lt;span class="nx"&gt;associativeArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;
  &lt;span class="c1"&gt;// =&amp;gt; hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because neither element had to be searched for. The location of the element was known by its index or identifier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logarithmic-raw-olog-n-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Logarithmic: &lt;code&gt;O(log N)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Binary_search_tree"&gt;Binary Search Tree&lt;/a&gt; would use the Logarithmic Notation. A &lt;a href="https://en.wikipedia.org/wiki/Binary_tree"&gt;Binary Tree&lt;/a&gt; is a tree data structure consisting of nodes that contain two children max.&lt;/p&gt;

&lt;p&gt;In a Binary Search Tree, there are no duplicates. The left subtree of a node contains children nodes with a key value that is less than their parental node value. The right subtree is the opposite, where children nodes have values greater than their parental node value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linear-raw-on-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Linear: &lt;code&gt;O(n)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As the input increases, the amount of time needed to complete the function increases. The runtime grows as the input size increases. Also, the &lt;code&gt;n&lt;/code&gt; can be anything. An &lt;code&gt;x&lt;/code&gt;, an &lt;code&gt;o&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;O(n)&lt;/code&gt; would be a loop on an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jolene&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ethan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ali&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;logan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findEthan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ethan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I found him!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;findEthan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The input size of the function can dramatically increase. What if there were 500 people in the crowd? The function would take longer to execute, especially if my name is the very last item in the array.&lt;/p&gt;

&lt;p&gt;Can you imagine having an input way higher? Let's say 10,000? The length of time it takes to execute the algorithm is dependent on the size of the input. As the size increases, the length increases. This is Linear Notation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quadratic-raw-on2-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Quadratic: &lt;code&gt;O(n^2)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Quadratic Notation is Linear Notation, but with one nested loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// console.log('')&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We don't know the size of the input, and there are two &lt;code&gt;for&lt;/code&gt; loops with one nested into the other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#log-linear-raw-on-logn-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Log Linear: &lt;code&gt;O(n log(n))&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Quicksort"&gt;Quicksort algorithm&lt;/a&gt; has the best time complexity with Log-Linear Notation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exponential-raw-o2n-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Exponential: &lt;code&gt;O(2^n)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;There are not many examples online of real-world use of the Exponential Notation. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factorial-raw-on-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Factorial: &lt;code&gt;O(n!)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This Notation is the absolute worst one. When you have a nested loop for every input you possess, the notation is determined as Factorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-cheatsheet" class="anchor"&gt;
  &lt;/a&gt;
  Big O Cheatsheet
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cheatsheet shows the space complexities of a list consisting of data structures and algorithms.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
