<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting started with Appwrite's Apple SDK and SwiftUI</title>
      <author>Christy Jacob</author>
      <pubDate>Mon, 18 Oct 2021 18:21:59 +0000</pubDate>
      <link>https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-swiftui-131h</link>
      <guid>https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-swiftui-131h</guid>
      <description>&lt;p&gt;One of the major highlights of Appwrite 0.11 is the official support for iOS, macOS, tvOS and watchOS. We've also released a brand-new Apple SDK to go alongside it! üòâ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---e2V5P2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z57is2vh5f81zomtmhpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---e2V5P2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z57is2vh5f81zomtmhpe.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll learn to set up Appwrite's Apple SDK, interact with Appwrite's Accounts API and also learn to set up OAuth Logins in your App. Let's get started!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We'll use &lt;a href="https://developer.apple.com/xcode/swiftui/"&gt;SwiftUI&lt;/a&gt; in this tutorial, if you're using UIKit, check out &lt;a href=""&gt;this tutorial&lt;/a&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  üìù Prerequisites
&lt;/h2&gt;

&lt;p&gt;At this stage, we assume that you already have an Appwrite instance up and running. If you do not have Appwrite setup yet, you can follow the super easy installation &lt;strong&gt;step&lt;/strong&gt; over at &lt;a href="https://appwrite.io/docs/installation"&gt;appwrite.io&lt;/a&gt;. It's not a typo. There really is only 1 step!&lt;/p&gt;

&lt;p&gt;You should have also set up an OAuth provider with Appwrite to be able to follow the OAuth section of this tutorial. You can learn to set up OAuth providers in Appwrite with &lt;a href="https://dev.to/appwrite/30daysofappwrite-oauth-providers-3jf6"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-app-project"&gt;
  &lt;/a&gt;
  üõ†Ô∏è Create a new App Project
&lt;/h2&gt;

&lt;p&gt;Create a new &lt;strong&gt;Multiplatform &amp;gt; App&lt;/strong&gt; in Xcode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yA2kyMZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bccme991eygpapfa11ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yA2kyMZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bccme991eygpapfa11ww.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the app created, now is also a good time to add our iOS, macOS, watchOS or tvOS app as a platform in the Appwrite Console. Head over to your project file and find your &lt;strong&gt;Bundle Identifier&lt;/strong&gt;. It should look something like &lt;code&gt;io.appwrite.Appwrite-iOS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In your Appwrite console, click on &lt;strong&gt;Add Platform&lt;/strong&gt; and select a &lt;strong&gt;New Apple App&lt;/strong&gt;, then one of the iOS, macOS, watchOS or tvOS tabs. Give your app a name, add the bundle identifier and click &lt;strong&gt;Register&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once this is complete, it's time to head back to our Xcode project and add our dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-appwrites-apple-sdk"&gt;
  &lt;/a&gt;
  üë∑ Setup Appwrite's Apple SDK
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-xcode"&gt;
  &lt;/a&gt;
  Using Xcode
&lt;/h3&gt;

&lt;p&gt;The Appwrite Apple SDK is available via Swift Package Manager. In order to use the Appwrite Apple SDK from &lt;strong&gt;Xcode&lt;/strong&gt;, select File &amp;gt; Swift Packages &amp;gt; &lt;strong&gt;Add Package Dependency&lt;/strong&gt;. In the dialog that appears, enter the Appwrite Apple SDK &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;package URL&lt;/a&gt; and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the repository information is loaded, add your version rules and click &lt;strong&gt;Next&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiML_Mn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngnb4wjvojs8ya6qpccg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiML_Mn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngnb4wjvojs8ya6qpccg.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the final screen, make sure &lt;code&gt;Appwrite&lt;/code&gt; is selected to add to your target as a library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lr5axdVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr3up1r47b7hcqjoddpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lr5axdVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr3up1r47b7hcqjoddpf.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-swift-package-manager"&gt;
  &lt;/a&gt;
  Using Swift Package Manager
&lt;/h3&gt;

&lt;p&gt;Add the package to your &lt;code&gt;Package.swift&lt;/code&gt; dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/appwrite/sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add it to your target:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"[YourAppTarget]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Appwrite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build your project and if there are no errors, we're ready to proceed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-layouts"&gt;
  &lt;/a&gt;
  üèóÔ∏è Create the layouts
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;AccountView.swift&lt;/code&gt; and add the following. This defines our SwiftUI view and sets up our buttons and their click listeners that will call the &lt;code&gt;ViewModel&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"http://localhost:80/v1"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;projectId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"613b18dabf74a"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setSelfSigned&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;AccountView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@ObservedObject&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ViewModel&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;VStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downloadedImage&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resizable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;aspectRatio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;contentMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kt"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kt"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kt"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Login with Facebook"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// We'll add this later&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Register"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Get User"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Log Out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;registerOAuthHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ExampleView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ExampleView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ExampleView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-viewmodel"&gt;
  &lt;/a&gt;
  üî® Create the ViewModel
&lt;/h2&gt;

&lt;p&gt;Let's now create a ViewModel &lt;code&gt;AccountViewModel.swift&lt;/code&gt; to manage state and interact with the Appwrite SDK in response to UI interactions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;

&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;AccountView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ViewModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ObservableObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"test@test.test"&lt;/span&gt;
        &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;
        &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Name"&lt;/span&gt;
        &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

        &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"current"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;success&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our ViewModel has 4 state objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have 4 functions to interact with the Appwrite SDK:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;register - onClick handler for the Signup Button&lt;/li&gt;
&lt;li&gt;login - onClick handler for the Login Button&lt;/li&gt;
&lt;li&gt;logout - onClick handler for the Logout Button&lt;/li&gt;
&lt;li&gt;getUser - onClick handler for the Get User Button&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#update-the-application-file"&gt;
  &lt;/a&gt;
  üîß Update The Application File
&lt;/h2&gt;

&lt;p&gt;Finally, let's update our &lt;code&gt;AccountApp.swift&lt;/code&gt;, which will initialise our application and create the &lt;code&gt;AccountView&lt;/code&gt; and &lt;code&gt;AccountViewModel&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;

&lt;span class="kd"&gt;@main&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;AccountApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;Scene&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;WindowGroup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;AccountView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AccountView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to run your app and create users, login, logout and get information about the currently logged-in user!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-oauth-support"&gt;
  &lt;/a&gt;
  üîê Adding OAuth Support
&lt;/h2&gt;

&lt;p&gt;You would have noticed that we have a &lt;strong&gt;Login With Facebook&lt;/strong&gt; button in our UI, but it doesn't do anything yet; let's now add Facebook OAuth to our app!&lt;/p&gt;

&lt;p&gt;The first step is to add a callback URL scheme to our &lt;code&gt;Info.plist&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleTypeRole&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Editor&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;appwrite-callback-[PROJECT-ID]&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you replace the Project ID in &lt;code&gt;appwrite-callback-[PROJECT-ID]&lt;/code&gt; with your own.&lt;/p&gt;

&lt;p&gt;Next, we'll add a function to our ViewModel to call the &lt;code&gt;createOAuth2Session()&lt;/code&gt; method of the Appwrite SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createOAuth2Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"facebook"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;/auth/oauth2/success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;/auth/oauth2/failure"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"false"&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;success&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is to invoke this function from &lt;code&gt;AccountView.swift&lt;/code&gt;, calling the function from our existing button's action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Login with Facebook"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Re-run your app and you should now be able to trigger your Facebook OAuth Flow! With that, you now know how to interact with Appwrite's Accounts API in your iOS, macOS, tvOS and watchOS apps!&lt;/p&gt;

&lt;p&gt;We've built a complete app that interacts with all of Appwrite's APIs, which you can find over at our &lt;a href="https://github.com/appwrite/playground-for-apple-swiftui"&gt;Github Repo&lt;/a&gt;. If you'd like to learn more about Appwrite or how Appwrite works under the hood, we've just curated all the resources for you during &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-credits"&gt;
  &lt;/a&gt;
  ‚ú®Ô∏è Credits
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open issues&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans üë©‚Äçüíª.&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>news</category>
      <category>ios</category>
      <category>swift</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Second Time Experience and Learnings @Hacktoberfest | How to Contribute</title>
      <author>Anamika</author>
      <pubDate>Mon, 18 Oct 2021 18:14:43 +0000</pubDate>
      <link>https://dev.to/noviicee/my-second-time-experince-and-learnings-hactoberfest-how-to-contribute-4k63</link>
      <guid>https://dev.to/noviicee/my-second-time-experince-and-learnings-hactoberfest-how-to-contribute-4k63</guid>
      <description>&lt;p&gt;Howdy all! Hope the winds of October are flowing with you and you all are doing great. üçÅ&lt;br&gt;
The second-most famous thing about October, apart from Halloween is &lt;em&gt;Hacktoberfest&lt;/em&gt; üéâ&lt;br&gt;
Yes, its that time of the year when Open Source enthusiasts and developers from all around the globe, come together and contribute to various open source projects. These projects may range from being a beginner-level to solving some of real-time problems.&lt;/p&gt;

&lt;p&gt;This year, was my second time @Hactoberfest, and needless to say, I got to learn a lot of things, just like the previous year.&lt;br&gt;
&lt;em&gt;If you wish to see what all I got to learn previous year, from this month-long journey of contributing to open source, you can read my article, which I have shared over &lt;a href="https://dev.to/noviicee/experience-of-my-first-ever-hactoberfest-2b62"&gt;here&lt;/a&gt;.&lt;/em&gt; I still remember the day last year. It was 15th of October when I made 4 valid PRs, and was waiting for them to get matured (14-days time period). I shared my experience of my &lt;em&gt;first-ever Hacktoberfest&lt;/em&gt; then.&lt;/p&gt;

&lt;p&gt;Today, I am here to share my second time experience about Hactoberfest, what all did I learn, how this year was different than the previous one, and how can YOU contribute! Believe me, it's never too late. Register yourself now, and get started. &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So since participating in the fest last year, I was determined that I will be participating next year as well. This year, I was waiting eagerly for the season to begin. I registered myself as soon as the initial registrations got opened. After that, I was waiting for October to start!&lt;br&gt;
One thing, about which I was very firm was to make real, &lt;em&gt;valuable&lt;/em&gt; contributions. Similar to last year, my focus wasn't on getting the T-Shirt, but to move ahead in my open source journey and to learn new things.&lt;/p&gt;

&lt;p&gt;October came and I started off! After registering for the Hacktoberfest, you will come across a demo on the official page, which is made for beginners in open source, in order to help them with Version-Control System.&lt;br&gt;
Previous year when I was starting off, I did not even know a single line about open source and version-controlling. I was struggling to even clone a github repository.&lt;/p&gt;

&lt;p&gt;Fast forward one year-&lt;br&gt;
&lt;a href="https://twitter.com/reachtoana/status/1443642967575564314"&gt;See full tweet Here&lt;/a&gt;&lt;br&gt;
Added my Haiku üéâ&lt;/p&gt;

&lt;p&gt;I know it's not a huge thing, but the feeling of being unable to do it an year ago, to be able to do it with ease is overwhelming. I just feel happy that I was able to expand my learning even if it was by just a small percentage.&lt;br&gt;
Wholeheartedly thankful to @hacktoberfest&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RRHWZBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvlnyapkxdytk1qrb5kb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RRHWZBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvlnyapkxdytk1qrb5kb.png" alt="Hacktoberfest-Congratulations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;Last year, my major contributions were code contributions. My first contribution, was a simple code contribution in  a repository which was especially designed for beginners in order to start their journey with open source. I made some documentation contributions as well, but they were marked &lt;em&gt;invalid&lt;/em&gt; after a few days (maybe because rules were updated in the middle of the month last year). Yeah, 3 of my 4 PRs were code contributions, and one was a tiny fix of a link. üòÑ&lt;br&gt;
I  was able to make 4 PRs till October 15th and only after that I realized that I will have to wait for them to get matured (14 days time-period) üí¶&lt;br&gt;
Well, all my PRs got accepted and I received my first Open Source gift in the month of February 2021 (it took some time to reach my place due to pandemic conditions all around)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-this-year-was-different"&gt;
  &lt;/a&gt;
  How this year was different
&lt;/h3&gt;

&lt;p&gt;I was very clear that this year, I won't make just simple code contributions. Since I have been into open source for quite some time, I wanted to make valuable contributions. So I started searching for issues that would actually help projects. My favorite programming language is Python, so I was searching for projects that involved Python. I found some really  amazing ones which required contributors and I began working on them. I set up the project on my machine, ran everything, checked upon all the functionalities and raised issues wherever I thought some changes were needed. Apart from these, I also worked on projects which involved a dash of front-end development. Reason being that I have learnt a little bit about front-end development, and I wanted to implement my learnings into real-time projects.&lt;br&gt;
&lt;em&gt;This is one such benefit of contributing to open source. To learn and implement at the same time.&lt;/em&gt; üòÑ&lt;/p&gt;

&lt;p&gt;One more thing that I was looking forward to was- &lt;em&gt;do not contribute only for the sake of completing 4 PRs in Hacktoberfest and then forget everything&lt;/em&gt; üòÇ&lt;br&gt;
My first purpose was to witness an increment in my learning curve. As I said, I wanted to try hands-on front-end, I found a really fun project that even &lt;strong&gt;beginners can contribute to!&lt;/strong&gt;&lt;br&gt;
You can follow it &lt;a href="https://github.com/TerabyteTiger/color-themes"&gt;here&lt;/a&gt;&lt;br&gt;
Basically I saw &lt;a href="#"&gt;this  post&lt;/a&gt; on &lt;a class="mentioned-user" href="https://dev.to/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt;
 and was really interested to try a theme!&lt;br&gt;
You can also contribute if you want to üíõ&lt;/p&gt;

&lt;p&gt;Apart from these, I made some contributions in the form of resources. I believe that having resources at one place proves to be really helpful for everyone who is learning and so I wanted to provide my contributions in the form of PRs to such repositories which collects and organizes all resources at one place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7P1c0na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2200kr95okdo5wxgyodr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7P1c0na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2200kr95okdo5wxgyodr.png" alt="Hacktoberfest-Anamika-S-Profile-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rounding-off"&gt;
  &lt;/a&gt;
  Rounding Off
&lt;/h2&gt;

&lt;p&gt;We are halfway through the 8th edition of Hacktoberfest, and it has been an amazing experience till now. From struggling to make a single Pull Request last year, to completing Hacktoberfest Challenge easily this year makes me happy. It lights a spark inside that yes, at least I was able to learn &lt;em&gt;something&lt;/em&gt; in a span of one year.&lt;/p&gt;

&lt;p&gt;Also, it was Hacktoberfest which introduced me to the Dev Community, and I feel really glad to be a part of this community since a year. I have also recived the One-Year Badge on 15th of October 2021 üòÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nq7s3mL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodmbf3vwcy41o5aoqk2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nq7s3mL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodmbf3vwcy41o5aoqk2.png" alt="One-Year-On-Dev.To"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For the Beginners&lt;/em&gt;&lt;br&gt;
Don't feel intimidated. There are lots of issues that you can start working with.&lt;/p&gt;

&lt;p&gt;Feel free to reach out for any sort of discussion regarding the post, or other materials. If you wish to connect with me, you can find me &lt;a href="https://www.linkedin.com/in/anamika-singh-0fficial/"&gt;here&lt;/a&gt; also, apart from my Dev.to profile of course üòÑ&lt;/p&gt;

&lt;p&gt;At last, I wish &lt;strong&gt;&lt;em&gt;Happy Hacktober&lt;/em&gt;&lt;/strong&gt; to everyone üçà&lt;br&gt;
May the source be with you. üí´&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
      <category>digitalocean</category>
    </item>
    <item>
      <title>JavaScript Strings are too vital</title>
      <author>Elijah Trillionz</author>
      <pubDate>Mon, 18 Oct 2021 17:45:52 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/javascript-strings-are-too-vital-20i2</link>
      <guid>https://dev.to/elijahtrillionz/javascript-strings-are-too-vital-20i2</guid>
      <description>&lt;p&gt;Strings as we know is a JavaScript data type. We use them to hold data that can be represented in text form. This data can be any sequence of characters.&lt;/p&gt;

&lt;p&gt;For example, the username of a new user on Twitter can (&amp;amp; should) be wrapped inside a string.&lt;/p&gt;

&lt;p&gt;It is very important for you as a JavaScript developer to understand what strings are, and how to manipulate them, because strings are just everywhere, in arrays, objects, functions, classes.&lt;/p&gt;

&lt;p&gt;It's one of the data types you will always use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-use-strings"&gt;
  &lt;/a&gt;
  How do we use strings
&lt;/h2&gt;

&lt;p&gt;Am going to use the CRUD (Create, Read/Access, Update, Delete) style to analyze this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-strings"&gt;
  &lt;/a&gt;
  Creating Strings
&lt;/h3&gt;

&lt;p&gt;Strings in JavaScript can be created as string literals (primitives) or as string objects.&lt;/p&gt;

&lt;p&gt;String literals are the common way to create strings, it is the primitive way.&lt;/p&gt;

&lt;p&gt;String literals are created using single quotes (&lt;code&gt;''&lt;/code&gt;), or double quotes (&lt;code&gt;""&lt;/code&gt;), or backticks (&lt;code&gt;` `&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Single quotes and double quotes are related, so we can change the example above to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's just a matter of preference, but it is also recommended to stick with one in all your strings. So don't use single quotes for username and then use double quotes for the last name. Just stick with one.&lt;/p&gt;

&lt;p&gt;And if you do stick with one, let's say single quotes, there may be times where your text has a single quote in it. You may have tried it, but it's not going to work because JavaScript is confused.&lt;/p&gt;

&lt;p&gt;You can't use the same quote as the surrounding quote inside a string. I.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;wife&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;; // will return a syntax error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two ways of solving this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Escape it: you can use &lt;code&gt;\&lt;/code&gt; (an escape character) to escape the quote inside the string. We use it immediately before the inner quote i.e
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;s wife&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// will return john's wife&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use a different quote: this is the default of most JavaScript formatters (like Prettier), they simply use a different quote as the surrounding quote like this
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john's wife&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// will return john's wife&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Template literals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use backticks when we want to add some JavaScript expressions to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We call the expression above a template literal. JavaScript will convert the value of evaluating &lt;code&gt;currentYear - birthYear&lt;/code&gt; to a string.&lt;/p&gt;

&lt;p&gt;Take note of the dollar sign and curly braces as it is used to wrap the expression inside the template literal.&lt;/p&gt;

&lt;p&gt;Without the backticks, age would simply be &lt;code&gt;${currentYear - birthYear} years old&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of the examples above are primitives, they are immutable, they cannot be altered, but they can be reassigned. We will see more about this later&lt;/p&gt;

&lt;p&gt;String objects are created with the &lt;code&gt;new&lt;/code&gt; keyword and the &lt;code&gt;String()&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// typeof username = object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readingaccessing-strings"&gt;
  &lt;/a&gt;
  Reading/Accessing Strings
&lt;/h3&gt;

&lt;p&gt;In JavaScript, we can access a string's character using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.charAt(): a method that takes in a position as a parameter and returns the character in that position.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return o (the first o)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the string above is primitive and primitive strings don't have any properties or methods. So JavaScript converts a primitive string to a string object, and with that, we can use the properties and methods of string objects.&lt;/p&gt;

&lt;p&gt;How does the &lt;code&gt;.charAt()&lt;/code&gt; method really work?&lt;/p&gt;

&lt;p&gt;If you &lt;code&gt;console.log(new String('john_doe'))&lt;/code&gt;, the value returned is an object with keys as numbers (zero-based, index). Each of these keys is assigned a value from our username (john_doe) respectively not randomly.&lt;/p&gt;

&lt;p&gt;So we can reproduce the &lt;code&gt;charAt()&lt;/code&gt; function like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// custom way of accessing special keys in objects&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// returns o (the first o)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would bring us to the next one called&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bracket notation: we have seen this already in the &lt;code&gt;charAt()&lt;/code&gt; function. This is the easiest way to access a character in a string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// will return o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we see JavaScript giving us here, is the second element (item, character) in the string, just like in arrays, but what JavaScript is actually returning is the property called 1. Do you remember our string objects?&lt;/p&gt;

&lt;p&gt;We could have said &lt;code&gt;username.1&lt;/code&gt; which is common in objects, but that will return a syntax error, so a common way of solving this is using bracket notation. Here is an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;proUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say I wanna access &lt;code&gt;proUser&lt;/code&gt;, without knowing the property name; that is me accessing this array is going to depend on another variable and that I have no idea of its value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;proUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// pretend i never declared this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How would you access the object with the variable, you are surely not going to use &lt;code&gt;newUser.propertyName&lt;/code&gt; that will just be &lt;code&gt;undefined&lt;/code&gt;. The solution is bracket notation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// as simple as ABC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Loop a String&lt;/strong&gt;&lt;br&gt;
We can loop through a string to access its characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the for/in loop as well because remember it's an object behind the hood.&lt;/p&gt;

&lt;p&gt;Tip: &lt;code&gt;username.length&lt;/code&gt; is a property to check the number of characters in a string.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-strings"&gt;
  &lt;/a&gt;
  Updating Strings
&lt;/h3&gt;

&lt;p&gt;Strings cannot be updated, but we can reassign them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;j&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// john_doe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;j&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// hohn_doe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tip: &lt;code&gt;.replace()&lt;/code&gt; is a method that replaces the first match of a character or characters in a string. The first parameter is usually replaced by the second.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-strings"&gt;
  &lt;/a&gt;
  Deleting strings
&lt;/h3&gt;

&lt;p&gt;Strings cannot be mutated, which means you cannot completely delete a declared and assigned string. You could reassign it a value of undefined or null but that is usually not recommended.&lt;/p&gt;

&lt;p&gt;Trust me, you would hardly need to completely delete a string, most times where you'd want to delete a string is in an array or an object, which is possible.&lt;/p&gt;

&lt;p&gt;That being said, you can remove texts or parts of a string from a string. But we will see this next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-methods"&gt;
  &lt;/a&gt;
  String methods
&lt;/h2&gt;

&lt;p&gt;JavaScript strings have a lot of methods we can use to manipulate strings. Let's see the ones you will often use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#charat"&gt;
  &lt;/a&gt;
  .charAt()
&lt;/h3&gt;

&lt;p&gt;We've seen this before. It returns the character at a specified position&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replace"&gt;
  &lt;/a&gt;
  .replace()
&lt;/h3&gt;

&lt;p&gt;Again, we've seen this before. We use this to replace a character or characters with new ones. Let' see another example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I will see Drake tomorrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Drake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kevin Hart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I will see Kevin Hart tomorrow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#indexof"&gt;
  &lt;/a&gt;
  .indexOf()
&lt;/h3&gt;

&lt;p&gt;This will return the position of the first found occurrence of a specified value in a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method will return -1 if that value or character is not found.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lastindexof"&gt;
  &lt;/a&gt;
  .lastIndexOf()
&lt;/h3&gt;

&lt;p&gt;Just like &lt;code&gt;indexOf()&lt;/code&gt;, the only difference is that this will return the last. So it's definitely going to go through all the characters in that string. (that's so stressful)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a character is not found, it returns -1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#substr-substring-amp-slice"&gt;
  &lt;/a&gt;
  .substr(), .substring() &amp;amp; .slice()
&lt;/h3&gt;

&lt;p&gt;They all do the same job; slicing out a part of a string, but in different ways&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.slice()&lt;/code&gt;: takes two params; start and end. Slices a string from the specified start position (inclusive) to the specified end position (not inclusive). It returns the sliced out string
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I will see Drake tomorrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Drake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method supports negative values as parameters. This will make it start counting from the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I will see Drake tomorrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Drake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.substring()&lt;/code&gt;: takes two params, start, and end. Slices a string from the specified start position (inclusive) to the specified end position (not inclusive). It returns the sliced-out string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I will see Drake tomorrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Drake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it is the twin sister of &lt;code&gt;slice()&lt;/code&gt;. There's a difference though, &lt;code&gt;substring()&lt;/code&gt; doesn't support negative values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;substr()&lt;/code&gt;: takes two params, start, and length. Slices a string from the specified start position (inclusive) to the number of characters you wish to slice out (starting from the start position).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now slicing Drake out dynamically will be a lot easier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Drake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I will see Drake tomorrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Drake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also supports negative values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#split-ampamp-trim"&gt;
  &lt;/a&gt;
  .split() &amp;amp;&amp;amp; .trim()
&lt;/h3&gt;

&lt;p&gt;We use the &lt;code&gt;split()&lt;/code&gt; method to split a string into an array. It takes a string as a parameter for splitting the string.&lt;/p&gt;

&lt;p&gt;So if we had a list of fruits as a string, we can split it into an array like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;listOfFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana, Apple, Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruitsArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listOfFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['Banana', ' Apple', ' Orange']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get rid of those whitespaces or any other whitespaces in a string we use the &lt;code&gt;trim()&lt;/code&gt; method. So let's refactor the code above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fruitsArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitsArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitsArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['Banana', 'Apple', 'Orange']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#touppercase-ampamp-tolowercase"&gt;
  &lt;/a&gt;
  .toUpperCase() &amp;amp;&amp;amp; .toLowerCase()
&lt;/h3&gt;

&lt;p&gt;JavaScript offers a method for converting a string to an upper case or to a lower case using &lt;code&gt;.toUpperCase()&lt;/code&gt; and &lt;code&gt;.toLowerCase()&lt;/code&gt; respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john_doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// John_doe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tostring"&gt;
  &lt;/a&gt;
  .toString()
&lt;/h3&gt;

&lt;p&gt;This method is used to convert to a string. We can convert a number for example to a string using this method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are more methods in JavaScript strings that are very common like &lt;code&gt;.match(), .search()&lt;/code&gt; but that would hopefully be a topic for another day. But in the meantime, you can check them out on MDN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Strings are very vital, it's something you will always use in any language at all. Knowing how it works will help you save a lot of time while coding.&lt;/p&gt;

&lt;p&gt;Ok, that's it for today. Leave a comment for me if you wanna "holla" or correct something. You can follow me on Twitter &lt;a href="https://www.twitter.com/elijahtrillionz"&gt;@elijahtrillionz&lt;/a&gt;. I tweet useful content daily for you.&lt;br&gt;
See ya!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build a Blazing-Fast Astro Blog with Cosmic CMS</title>
      <author>Sumit Kharche</author>
      <pubDate>Mon, 18 Oct 2021 17:19:30 +0000</pubDate>
      <link>https://dev.to/sumitkharche/how-to-build-a-blazing-fast-astro-blog-with-cosmic-cms-4e4</link>
      <guid>https://dev.to/sumitkharche/how-to-build-a-blazing-fast-astro-blog-with-cosmic-cms-4e4</guid>
      <description>&lt;p&gt;In this tutorial, I'm going to show you how to create a simple Blog application using &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;, and &lt;a href="https://cosmicjs.com/"&gt;Cosmic CMS&lt;/a&gt;. Without further ado, grab some coffee &amp;amp; let's build a cool app!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://astro-cosmic-blog.netlify.app/"&gt;Astro Cosmic Blog Demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sumitkharche/astro-cosmic-app"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.cosmicjs.com/apps/astro-cosmic-blog"&gt;Install the Astro Cosmic Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You need to have installed the latest stable version of &lt;a href="https://nodejs.org"&gt;Node JS&lt;/a&gt; and NPM.  You will have no problem following the tutorial if you have a basic understanding of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML, CSS, and JavaScript&lt;/li&gt;
&lt;li&gt;import and export syntax (ES6 modules)&lt;/li&gt;
&lt;li&gt;concepts like components&lt;/li&gt;
&lt;li&gt;the fetch API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started with our technology stack. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-astro"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;?
&lt;/h1&gt;

&lt;p&gt;Astro is nothing but a yet another new Static Site Generator (SSG) which means it produces a static pages as in output. Its a new framework for building a websites. Astro give you us flexibility to use any JavaScript framework/library. The big advantage of using astro is it ships 0% Javascript by default and it will load on demand it we need it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Astro is still an early beta state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#what-about-cosmic"&gt;
  &lt;/a&gt;
  What about &lt;a href="https://cosmicjs.com/"&gt;Cosmic&lt;/a&gt;?
&lt;/h1&gt;

&lt;p&gt;Cosmic is a headless CMS that will enable us to build our application surprisingly quickly and deploy it to Netlifly in moments. Unlike traditional CMS, Cosmic offers us as the developers a lot of flexibility to develop this application how we please and take it to whatever hosting platform we wish. It is also very easy to store and retrieve data, which makes it perfect for building apps like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-blog-bucket-in-cosmic"&gt;
  &lt;/a&gt;
  Creating Your Blog Bucket in Cosmic
&lt;/h2&gt;

&lt;p&gt;To create a blog app we will require data. To manage and manipulate this data, we will be using the power of Cosmic buckets and objects. To get started:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;a href="https://app.cosmicjs.com/signup"&gt;free account on Cosmic&lt;/a&gt;. If this is your first time using Cosmic, you'll see a short tutorial which will introduce some of the data types we'll be using - buckets, objects, and metafields.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new empty bucket &amp;amp; name it coffee-blog. For each blog post, we will have three object types:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Title&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Image&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, go ahead and add these properties in your buckets along with some data for those objects. &lt;a href="https://www.cosmicjs.com/getting-started"&gt;If you're having trouble with Buckets, Objects, or Metafields, go ahead and read the Getting Started page really quickly for some startup instructions&lt;/a&gt;, then come on back to &lt;br&gt;
this article.&lt;/p&gt;

&lt;p&gt;Now we have created our Cosmic CMS and its get time to create a Astro project and integrate Cosmic CMS into it. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#create-a-astro-application"&gt;
  &lt;/a&gt;
  Create a Astro application
&lt;/h1&gt;

&lt;p&gt;To create Astro project, we have to first create a folder and navigate to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; mkdir astro-cosmic-app &amp;amp;&amp;amp; cd astro-cosmic-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now run following command to install astro:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm init astro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After that select the template "Starter Kit (Generic)" as shown in below image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLRg_QrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2csgt9rnattoq5xljm96.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLRg_QrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2csgt9rnattoq5xljm96.PNG" alt="select-template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that select framework you would like to use so I will select Preact but you can select whichever you want as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qheuSQ2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ua8ur3vlf5ox87e9gm8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qheuSQ2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ua8ur3vlf5ox87e9gm8.PNG" alt="select-framework"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now wait for a minutes to finish the project creation.&lt;/p&gt;

&lt;p&gt;After that install all the packages by running below command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To run the application execute below command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now open &lt;code&gt;http://localhost:3000/&lt;/code&gt; and see the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-frmMvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oog08p5zo8xyyopp0grg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-frmMvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oog08p5zo8xyyopp0grg.PNG" alt="first-start-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So open the application into VS Code editor and check folder structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e4HItcVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsmcujpvmwa1vqh073e5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4HItcVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsmcujpvmwa1vqh073e5.PNG" alt="first-vs-code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/public : Any static assets, like images, can be placed in the public/ directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;src/components: components are reusable piece of code. You put any Astro/React/Vue/Svelte/Preact components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;src/pages : this folder contains all the pages for your website which are .md or .astro files. Each page is exposed as a route based on its file name.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this blog application we are using a Start Bootstarp Clean-blog template. Download the template from &lt;a href="https://startbootstrap.com/theme/clean-blog"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;After downloading, extract the files and copy the style.css file under /css folder of template into public folder in our project. &lt;/p&gt;

&lt;p&gt;Also copy data of /assets from template into assets folder in our project.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#create-a-env-file"&gt;
  &lt;/a&gt;
  Create a .env file
&lt;/h4&gt;

&lt;p&gt;we are using .env file to stored the cosmic bucket and read key data. So install below package:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --D dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After that create a .env file in root level of project and add update with your details:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;COSMIC_BUCKET_SLUG=&amp;lt;replace your bucket name&amp;gt;
COSMIC_READ_KEY=&amp;lt;replace your read key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#create-different-components"&gt;
  &lt;/a&gt;
  Create different components
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;So delete all the files in components folder. First we will create a component called 'BlogPostPreview.astro' which takes input as single post data and display it. So in components folder create a new component as 'BlogPostPreview.astro'&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create another components called "BaseHead.astro" which contains all metadata urls, links to external css/js files.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a component called "footer.astro" to display the footer in all pages.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a component called "Navigation.astro" to display the footer in all pages.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#display-all-the-posts-in-landing-page"&gt;
  &lt;/a&gt;
  Display all the posts in landing page
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;First we will create a folder in src called &lt;code&gt;lib&lt;/code&gt; and inside that create a file called 'config.js' which exports our env variables as belows:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Open a index.astro file and replace below code to display all the posts in landing page:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now run the application using &lt;code&gt;npm run dev&lt;/code&gt; and see the output in &lt;code&gt;http://localhost:3000/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ej6l8you--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltrlwkfz7bljbkuwa6vq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ej6l8you--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltrlwkfz7bljbkuwa6vq.PNG" alt="landing-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create another page inside pages folder called "about.astro" as below:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Click on About option in navigation bar to see the output:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lw8789sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk6p013jx1d5gus9a4ax.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lw8789sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk6p013jx1d5gus9a4ax.PNG" alt="about-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we have to create a page which create separate static page for all our posts and when user clicks on single post it will display that page. To achieve that create a folder in pages called "posts" and inside that create a page called "[slug].astro" as belows:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now run the app again and click on post to see the post details:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUhht-aC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ob3cmtmbvppmqsuhzuty.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUhht-aC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ob3cmtmbvppmqsuhzuty.PNG" alt="post-details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build application in production mode you just need to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#deploy-it"&gt;
  &lt;/a&gt;
  Deploy it
&lt;/h1&gt;

&lt;p&gt;We can now deploy our application on any hosting platform. I recommend deploying it on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; because it supports project structures like this and can quickly create deployments.&lt;br&gt;
Checkout this &lt;a href="https://docs.astro.build/guides/deploy/#netlify"&gt;article&lt;/a&gt; to deploy Astro app into Netlify.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, I have demonstrated you how to create a blogging application using Astro and Cosmic. The Cosmic Community has a lot of examples on how to handle integration with email functions, download functions, and third-party platforms. If you're interested in building your own applications like this, &lt;a href="https://app.cosmicjs.com/signup"&gt;get started by setting up your free account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really hope that you enjoyed this little app, and please do not hesitate to send me your thoughts or comments about what could I have done better.&lt;/p&gt;

&lt;p&gt;If you have any comments or questions about building apps with &lt;br&gt;
Cosmic, &lt;a href="https://twitter.com/cosmicjs"&gt;reach out to us on Twitter&lt;/a&gt; and &lt;a href="https://www.cosmicjs.com/community"&gt;join the conversation on Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on twitter &lt;a href="https://twitter.com/sumitkharche01"&gt;@sumitkharche01&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/sumit-kharche-890426a9/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>astro</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Guide To Claim Your Hacktoberfest 2021 RewardsüéÅ</title>
      <author>Anurag Yadav</author>
      <pubDate>Mon, 18 Oct 2021 17:16:32 +0000</pubDate>
      <link>https://dev.to/anuragyadav365/guide-to-claim-your-hacktoberfest-2021-rewards-2ooo</link>
      <guid>https://dev.to/anuragyadav365/guide-to-claim-your-hacktoberfest-2021-rewards-2ooo</guid>
      <description>&lt;p&gt;Did you participated in HacktoberFest 2021 ü§î, and contributed some awesome open source work. It's time to grab your rewards. Just follow up the below steps and you are all set. üòé&lt;/p&gt;

&lt;p&gt;To those who contributed 4+ PR's successfully during this Hacktoberfest month. You can claim these rewards: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Treeüå≥ or T-shirtüëï&lt;/li&gt;
&lt;li&gt;Dev Hacktoberfest 2021 Badgeüîñ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G4XFsh9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634576605236/NjGiFCFGr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4XFsh9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634576605236/NjGiFCFGr.jpeg" alt="swag.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Above image shows swags of Hacktoberfest 2020&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirement"&gt;
  &lt;/a&gt;
  [Requirement]
&lt;/h3&gt;

&lt;p&gt;One must have completed the task submitting 4 or 4+ PR's.&lt;br&gt;
To check your PR status, whether it is pending or completed, visit your &lt;a href="https://hacktoberfest.digitalocean.com/profile"&gt;HacktoberFest Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-claim-tree-or-tshirt"&gt;
  &lt;/a&gt;
  [1. Claim Tree or T-shirt]üî•
&lt;/h3&gt;

&lt;p&gt;This, year Hacktoberfest gives the choice between planting a tree or instead receiving a Hacktoberfest labeled T-shirt. The choice is yours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step1:&lt;/strong&gt; Check HacktoberFest profile, here you must have received a message that mentions - &lt;strong&gt;You have completed Hacktoberfest 2021!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wg9LcmUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634564465333/V3IK3VdUDo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wg9LcmUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634564465333/V3IK3VdUDo.png" alt="h1.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step2:&lt;/strong&gt; Choose for &lt;em&gt;customized reward page&lt;/em&gt; link. You will be navigated to the Redemptional Portal.&lt;br&gt;
Each of the user receives a unique redeem code. So, Don't share it with anyone! You can see your unique code in your profile page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step3:&lt;/strong&gt; Time to make choiceüëç. One can either go for T-shirt or Plant a Tree. (When selecting for clothing just make sure to select you appropriate size, you can't change it later)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYrQpZHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634568881311/CdcCxcLUK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYrQpZHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634568881311/CdcCxcLUK.png" alt="h3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step4:&lt;/strong&gt; Okay, so you've made your choice. You will be asked to fill your shipping address and you are done! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step5:&lt;/strong&gt; Once everything done, check your entered mail inbox, for order confirmation. The email looks somethings similiar to the below image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJONnuTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634569438394/YyB5P_Jk3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJONnuTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634569438394/YyB5P_Jk3.jpeg" alt="mail.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üöÄNow just wait till the item gets shipped. Keep in mind that Due to ongoing COVID-related disruptions the t-shirt on the estimate will reach you atmost by the end of 2021.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-claim-your-dev-hacktoberfest-badge"&gt;
  &lt;/a&gt;
  [2. Claim your &lt;a href="https://dev.to/"&gt;DEV&lt;/a&gt; Hacktoberfest badge]üîñ
&lt;/h3&gt;

&lt;p&gt;This Badge is an additional reward as a part of üëâ HacktoberFest 2021 as DEV has been a consistent supporter of Hacktoberfest. One must have a DEV account in order to claim this badge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't have a DEV accountüåà, create a new account &lt;a href="https://dev.to/enter?state=new-user"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step1:&lt;/strong&gt; Go to your hacktoberfest profile and check for the DEV badge reward section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tlP7HaYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634573392534/oy2avwzfU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tlP7HaYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634573392534/oy2avwzfU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose for Read more. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJSCMHoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634572343279/hYH1MdH5A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJSCMHoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634572343279/hYH1MdH5A.jpeg" alt="dev1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#important-copy-the-code-given-here-at-the-end-of-the-third-instruction"&gt;
  &lt;/a&gt;
  üßê Important: Copy the code given here at the end of the third instruction.
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step2:&lt;/strong&gt; To get your DEV HactoberFest 2021 Badge, visit this &lt;a href="https://shop.dev.to/products/dev-hacktoberfest-badge"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step3:&lt;/strong&gt; Enter your DEV Username in the required box. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rqi-uq7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634573212699/3HjTL_Zwp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rqi-uq7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634573212699/3HjTL_Zwp.jpeg" alt="addcart.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step4:&lt;/strong&gt; After adding to Cart, you need to Check Out. &lt;em&gt;Don't worry about the price that is mentioned. It will be sorted in the next Step.&lt;/em&gt;üëª&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step5:&lt;/strong&gt; Once, inside the checkout. Fill in your details as required.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prqlU0j4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634573697616/a-OOdPKSk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prqlU0j4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634573697616/a-OOdPKSk.png" alt="screencapture-shop-dev-to-16268507-checkouts-299ec9d6c4ceb54ae9147248e87230b8-2021-10-17-22_39_01.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Add the code that you copied as instructed in &lt;strong&gt;Step1&lt;/strong&gt; to the space provided on the right side. And the amount turns $0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VN1nuVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634574014657/-VeO7hGkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VN1nuVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634574014657/-VeO7hGkr.png" alt="applies.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step6:&lt;/strong&gt; You will receive this screen once everything is done successfully‚ú®.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBw--9qr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634574325530/ba_exXXLH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBw--9qr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634574325530/ba_exXXLH.png" alt="checkoutdone.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, to make sure you can check your entered email for a confirmation email. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚úÖNote: Dev Badges will be awarded at a later date. So you need to wait for several weeks for fulfillment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ending-the-blog-post"&gt;
  &lt;/a&gt;
  [Ending the Blog Postüíñ]
&lt;/h3&gt;

&lt;p&gt;If you have also participated or contributed to this Hacktoberfest 2021, congrats to you fellas. Also, if want to write about your Hacktoberfest experience, just share it here with everyone. Everyone is welcome to share their story. To read out my experience, head over to my &lt;a href="https://dev.to/anuragyadav365/first-experience-with-hacktoberfest-2021-4k"&gt;Hacktoberfest Experience&lt;/a&gt; blog.&lt;/p&gt;

&lt;p&gt;If you like this blog, and it helped you, drop your comments.üëá&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
    </item>
    <item>
      <title>A faster way to write console.log ‚ö°</title>
      <author>Carlos Dub√≥n</author>
      <pubDate>Mon, 18 Oct 2021 17:07:58 +0000</pubDate>
      <link>https://dev.to/cdubon/a-faster-way-to-write-consolelog-4ci</link>
      <guid>https://dev.to/cdubon/a-faster-way-to-write-consolelog-4ci</guid>
      <description>&lt;p&gt;As developers we are always seeking innovative ways to boost our productivity üöÄ. Today I bring you a clever hack to log stuff to the console faster üòé.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xQV12vdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/DnMMGxEvniha7CvASq/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xQV12vdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/DnMMGxEvniha7CvASq/giphy.webp" alt="To the moon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's begin!&lt;/p&gt;

&lt;p&gt;The 3 most used methods of the console object in JavaScript are &lt;code&gt;log&lt;/code&gt; ‚úèÔ∏è, &lt;code&gt;warn&lt;/code&gt; ‚ö†Ô∏è and &lt;code&gt;error&lt;/code&gt; ‚ùå:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world üåé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Hello world üåé"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hmm... ü§î&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Hmm... ü§î"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oops! üö®&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Oops! üö®"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make use of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;object destructuring&lt;/a&gt; to extract ‚õèÔ∏è these methods from the console object and bind them to constants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have extracted these methods from the console object we can call them from anywhere ‚ú®:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world üåé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Hello world üåé"&lt;/span&gt;
&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hmm... ü§î&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Hmm... ü§î"&lt;/span&gt;
&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oops! üö®&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Oops! üö®"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you plan to reuse this behavior across your entire app just add an export statement üì¶:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// utils.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world üåé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Hello world üåé"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all folks. I hope you have found this post helpful and that I‚Äôve made your development process a lil faster ‚ö°üòâ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z7esZAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/NhkMeVafqPkPK/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z7esZAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/NhkMeVafqPkPK/giphy.webp" alt="Dog over turtle"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>console</category>
    </item>
    <item>
      <title>A very confusing puzzle game I made in Unity</title>
      <author>Albert Bennett</author>
      <pubDate>Mon, 18 Oct 2021 16:57:26 +0000</pubDate>
      <link>https://dev.to/albertbennett/a-very-confusing-puzzle-game-i-made-in-unity-mc1</link>
      <guid>https://dev.to/albertbennett/a-very-confusing-puzzle-game-i-made-in-unity-mc1</guid>
      <description>&lt;p&gt;If you liked what you read feel free to connect with me on &lt;a href="https://www.linkedin.com/in/albert-bennett/"&gt;linkedin&lt;/a&gt; or follow me on dev.to :)&lt;br&gt;
Here is a link to where you can download the game: &lt;a href="https://play.google.com/store/apps/details?id=com.MindOfBobGames.ThePenteract&amp;amp;gl=IE"&gt;https://play.google.com/store/apps/details?id=com.MindOfBobGames.ThePenteract&amp;amp;gl=IE&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;My career started in the mobile games dev industry. It is where I had spent the first few years of my career, as such I made a few games in my time...&lt;br&gt;
Most of what I had created was POCs to see if the core gameplay mechanics would work out. One of these POCs was The Penteract.&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history-of-the-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;History of the Project&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Before the game was released on to the Google Play Store it was sitting in a folder on my laptop for several years. The original POC for this game was built but, apart from that there wasn't anything else to it. I had a general idea for where I wanted it to go and what I had wanted to do with. Finally last year I got around to finishing it off to a point where I could be proud of what I had done.&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Concept&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The initial idea behind it was a 3D puzzle game that has the player trapped inside of a box where they had to make there way to the center of said box. The player's goal is to solve puzzles on the doors leading to other coloured rooms with different symbols on the walls. The aim of the game was for the player to reach the center of the Penteract before it collapsed in on itself. The problems that I had run into was all around planning the mechanics around the concept and how to display them.&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-issues"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Development Issues&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Conceptually it seems simple however, its implementation was not. I had many issues with implementing the original concept mostly around how to make it fun and rewarding to players. I could have changed the concept but the main benefit that I could see from this approach is that the puzzles could be made using a tool, allowing me to add 1,000s of different variations on the main set of puzzles also having only a few models to UV map and animate was a huge bonus. Below I've gone into greater detail of these issues.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1-atmosphere"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Problem 1: Atmosphere&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;With the restrictions in place that being a limited number of assets being present in the game, I felt that the atmosphere needed to be on point. I wrote a short story for what The Penteract was, taking inspiration from the physics concept of 5 dimensional space. I felt that it was a strong theme to set the game in a dark SIFY world as well. Where the device was a 5 dimensional cube, in which the occupants can go through time and space. This also could be used to explain why some puzzles and cube configuration can repeat as well as solving the limited assets problem. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0VMnvJ-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcncmrwznt21c2yjqspm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0VMnvJ-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcncmrwznt21c2yjqspm.png" alt="Main menu"&gt;&lt;/a&gt; &lt;br&gt;
For the rooms I had to used various bright colours, so the colour palette was quite broad except for the door panels. These were all grey to stand again some of the brighter coloured rooms they had been animated using a render target so that when the lights would flicker they would still show up so that the player would still know where they were.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WO_ytvY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glerglf86hxo25qzp5fm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WO_ytvY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glerglf86hxo25qzp5fm.png" alt="Sample room from The Penteract"&gt;&lt;/a&gt; &lt;br&gt;
Music was another key part of the atmosphere, this done quite simply using AI because I can't make music :( and also it was a huge time saver for me. The service that I had used has now been discontinued but I believe that &lt;a href="https://soundraw.io"&gt;https://soundraw.io&lt;/a&gt; is fairly close to what I had used. I focused on slower beats with a SIFY twang to them.&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-2-making-the-game-fun"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Problem 2: Making the game fun&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;With the main pieces in place for the atmosphere the gameplay aspects fell into place.&lt;br&gt;
Firstly if the player could solve puzzles to make it to the center of the Penteract then where does the challenge come in to it, would it all not be the same number of puzzles to get to the center. Sure I could have used a random number of puzzles to solve the issue but that felt like a cheap way of solving the problem. Instead I decided to do something much more convoluted. The puzzle system itself is simple, the colours and symbols on the walls dictate the number of points allocated to that particular puzzle. The rooms are designed so that in each room:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two doors give no points and don't change the state of the Penteract.&lt;/li&gt;
&lt;li&gt;One room grants the user the highest number of points thus bringing them closer to winning&lt;/li&gt;
&lt;li&gt;One room gives the user a small number of points again progressing their win condition&lt;/li&gt;
&lt;li&gt;Two rooms that help to breakdown the Penteract in either minor or major ways.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To limit player frustration the breakdown of the Penteract is done in levels from a little broken where 20% of all doors that give the player &amp;lt;1 point can open to a broken room to flashing lights and timers restriction on puzzles. I really like the timer restrictions, and I animated the puzzles to look like a clock counting down using rectangles. I feel like the timer restrictions really help to add pressure to the player where the broken rooms helps the player to choose the more correct options.&lt;br&gt;
The one real issue I had and still have is that to facilitate all of this the way the player can figure out which doors can help progress their game state is very convoluted as I needed to use colours to show the player that the rooms they were going into was different from each other. In the end I also placed a set of randomly flashing patterns above a puzzle to help but... it didn't help. I'd go into how the actually system and how the combinations fit together but, the code has been lost. It is also why the images in the blog post are all from the store page. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-3-the-puzzles"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Problem 3: The puzzles&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;It worth noting that there are two types of puzzles in the game intrinsic (door puzzles) and extrinsic (room layouts).&lt;br&gt;
The Penteract is a mobile game as such I needed the intrinsic  puzzles suited to touch controls that can have many, many variations whilst still maintaining the same format and also can be very recognizable to the player especially as the player could be put under a little pressure. So right of the bat complex puzzles were gone.&lt;br&gt;
So I thought of a series of short puzzles that most people could do in quick succession: mostly either word, math or pattern based puzzles. I had recently played some mobile games that used a combination of them to compete with other players, so why not...&lt;br&gt;
The variations of the puzzles come by means of pre generating them using a WPF application that exports out a JSON file where each object in the file defines another variation of the puzzle. The way the game makes use of these files is by randomly selecting a puzzle format checking the difficulty of the game and then randomly selecting a puzzle in the file. In the game I think there is about 7,000 different variations of the set of puzzles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97g-Xq0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xu1x1peus3p9zwqomh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97g-Xq0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xu1x1peus3p9zwqomh3.png" alt="Timer puzzle"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Apart from these issues the rest of the game was fine, I mean programmatically speaking there isn't much complicated about it.&lt;/p&gt;

&lt;p&gt;Thanks for reading all about a game I had siting in a folder that I finished last year and the challenges that I had faced when completing it. I thought that it might good for me to share some of my experiences in the games dev world, I rarely talk about it nowadays. I'm not sure if I'd return to it though but maybe, if the right idea/ project came along...&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>unity</category>
      <category>gamedev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>HTTP - Verbs, HTTP codes &amp; Request Params</title>
      <author>Gabriel Valin</author>
      <pubDate>Mon, 18 Oct 2021 16:56:15 +0000</pubDate>
      <link>https://dev.to/gvt3ch/http-verbs-http-codes-request-params-3kc7</link>
      <guid>https://dev.to/gvt3ch/http-verbs-http-codes-request-params-3kc7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#verbs"&gt;
  &lt;/a&gt;
  Verbs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;GET - Reading infos&lt;/li&gt;
&lt;li&gt;POST - Create infos&lt;/li&gt;
&lt;li&gt;PUT - Update Infos&lt;/li&gt;
&lt;li&gt;PATCH - Update PARTIAL info (example: avatar from user)&lt;/li&gt;
&lt;li&gt;DELETE - Delete infos&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-status-code"&gt;
  &lt;/a&gt;
  HTTP - Status Code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1xx - Informative: processing..&lt;/li&gt;
&lt;li&gt;2xx - Confirmation:

&lt;ul&gt;
&lt;li&gt;200: Request success&lt;/li&gt;
&lt;li&gt;201: Created - AFTER REQUEST POST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;3xx - Redirect:

&lt;ul&gt;
&lt;li&gt;301: Moved Permanently&lt;/li&gt;
&lt;li&gt;302: Moved&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;4xx - Client Error

&lt;ul&gt;
&lt;li&gt;400: Bad Request&lt;/li&gt;
&lt;li&gt;401: Unauthorized&lt;/li&gt;
&lt;li&gt;403: Forbidden&lt;/li&gt;
&lt;li&gt;404: Not Found&lt;/li&gt;
&lt;li&gt;422: Unprocessable Entity &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;5xx - Server Error

&lt;ul&gt;
&lt;li&gt;500: Internal Server Error&lt;/li&gt;
&lt;li&gt;502: Bad Gateway&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#request-params"&gt;
  &lt;/a&gt;
  Request Params
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Header Params: Token, authorization, cors&lt;/li&gt;
&lt;li&gt;Query Params: key,value,separator (page=28&amp;amp;)&lt;/li&gt;
&lt;li&gt;Route Params: /products/{id}&lt;/li&gt;
&lt;li&gt;Body Params: { name: 'john doe', last_name: 'stewie' }&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>http</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>A smarter dotenv for Node.js</title>
      <author>Tim Wong</author>
      <pubDate>Mon, 18 Oct 2021 16:46:23 +0000</pubDate>
      <link>https://dev.to/cytim/a-smarter-dotenv-for-nodejs-2ccc</link>
      <guid>https://dev.to/cytim/a-smarter-dotenv-for-nodejs-2ccc</guid>
      <description>&lt;p&gt;If you've been coding in Node.js for some time, it's likely that you've used or at least heard of &lt;a href="https://github.com/motdotla/dotenv/"&gt;dotenv&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dotenv is a zero-dependency module that loads environment variables from a &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's one of the must-have libraries which I install in nearly all of my projects, &lt;strong&gt;until I published &lt;a href="https://github.com/cytim/nodejs-typed-dotenv"&gt;typed-dotenv&lt;/a&gt; last year&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;Instead of explaining the difference between &lt;em&gt;dotenv&lt;/em&gt; and &lt;em&gt;typed-dotenv&lt;/em&gt;, let's &lt;strong&gt;feel it&lt;/strong&gt; by seeing how we write &lt;code&gt;my-api-client.js&lt;/code&gt; differently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotenv"&gt;
  &lt;/a&gt;
  dotenv
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* my-api-client.js */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./http-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MY_API_HOST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MY_API_KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Missing the environment variable "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY_API_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY_API_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keepAlive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY_API_KEEP_ALIVE&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the common way we use dotenv. The code isn't bad right? But can it be better?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typeddotenv"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/cytim/nodejs-typed-dotenv"&gt;typed-dotenv&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* my-api-client.js */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./http-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Errors regarding missing required variables, or other config issues.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myApi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All in a sudden, the custom validation and data conversion are gone. The code is a lot simpler!&lt;/p&gt;

&lt;p&gt;It is basically done for the coding side, but we need one more file - &lt;code&gt;.env.template&lt;/code&gt;. This file is for typed-dotenv to do all the hard work, &lt;strong&gt;and more importantly&lt;/strong&gt;, serves as a documentation for others to overview all env-var in one place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;### .env.template ###&lt;/span&gt;

&lt;span class="c"&gt;##&lt;/span&gt;
&lt;span class="c"&gt;# @required {string}&lt;/span&gt;
&lt;span class="nv"&gt;MY_API__HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c"&gt;##&lt;/span&gt;
&lt;span class="c"&gt;# @required {string}&lt;/span&gt;
&lt;span class="nv"&gt;MY_API__API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c"&gt;##&lt;/span&gt;
&lt;span class="c"&gt;# @optional {number} = 5000&lt;/span&gt;
&lt;span class="nv"&gt;MY_API__TIMEOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c"&gt;##&lt;/span&gt;
&lt;span class="c"&gt;# @optional {boolean} = false&lt;/span&gt;
&lt;span class="nv"&gt;MY_API__KEEP_ALIVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the variable names are using double underscores. This is the magic where typed-dotenv turns the variables into the following structure, so you can supply it to &lt;code&gt;new HttpClient(env.myApi)&lt;/code&gt; directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myApi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;host&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apiKey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keepAlive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;By composing the &lt;code&gt;.env.template&lt;/code&gt; file, &lt;a href="https://github.com/cytim/nodejs-typed-dotenv"&gt;typed-dotenv&lt;/a&gt; can...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;convert the env-vars into the desired types (e.g. number, boolean, json, etc.); and&lt;/li&gt;
&lt;li&gt;validate if the required env-vars are defined; and&lt;/li&gt;
&lt;li&gt;assign default values to the optional env-vars; and&lt;/li&gt;
&lt;li&gt;rename the env-vars to fit your purpose; and&lt;/li&gt;
&lt;li&gt;document the env-vars in one place; and&lt;/li&gt;
&lt;li&gt;...many more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;If you are interested, please give it a try! Comments are welcome.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/cytim/nodejs-typed-dotenv"&gt;https://github.com/cytim/nodejs-typed-dotenv&lt;/a&gt;&lt;br&gt;
NPM: &lt;a href="https://www.npmjs.com/package/typed-dotenv"&gt;https://www.npmjs.com/package/typed-dotenv&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#my-personal-recipe"&gt;
  &lt;/a&gt;
  My Personal Recipe
&lt;/h3&gt;

&lt;p&gt;Last but not least, I found that it's usually helpful to wrap typed-dotenv in a &lt;code&gt;config.js&lt;/code&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* config.js */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;unknownVariables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The config path does not exist: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can use it like &lt;code&gt;getConfig('path.to.some.config')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hope you like it. :)&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>API Rest - a little bit..</title>
      <author>Gabriel Valin</author>
      <pubDate>Mon, 18 Oct 2021 16:44:08 +0000</pubDate>
      <link>https://dev.to/gvt3ch/api-rest-a-little-bit-55ad</link>
      <guid>https://dev.to/gvt3ch/api-rest-a-little-bit-55ad</guid>
      <description>&lt;h1&gt;
  &lt;a href="#application-programming-interface"&gt;
  &lt;/a&gt;
  Application Programming Interface
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Group of possible specifications about interactions at applications.&lt;/li&gt;
&lt;li&gt;Documentation (example: Swagger)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#rest-representation-state-transfer"&gt;
  &lt;/a&gt;
  REST: Representation State Transfer
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Architecture Shape&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#6-rules-for-rest"&gt;
  &lt;/a&gt;
  6 rules for REST
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Client-Server&lt;/li&gt;
&lt;li&gt;Stateless&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Uniform Interface

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://address.com/users"&gt;http://address.com/users&lt;/a&gt; (example)&lt;/li&gt;
&lt;li&gt;JSON/XML ...&lt;/li&gt;
&lt;li&gt;Messages and Status coherent&lt;/li&gt;
&lt;li&gt;HATEOS

&lt;ul&gt;
&lt;li&gt;Return links inside request&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layers

&lt;ul&gt;
&lt;li&gt;Charger Balanced (example)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Code on Demand&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>http</category>
      <category>api</category>
      <category>webdev</category>
      <category>rest</category>
    </item>
    <item>
      <title>Divtober Day 18: Shine</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 18 Oct 2021 16:36:31 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-17-shine-2l0o</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-17-shine-2l0o</guid>
      <description>&lt;p&gt;Divtober's word of the day is "Shine." And if you ask any kid (or Rihanna), they'll say that diamonds shine, so here's a shiny diamond:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvyBbY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I haven't been too inspired these last couple of days (or decades üò≥)&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
    </item>
    <item>
      <title>NodeJS - Fundamentals</title>
      <author>Gabriel Valin</author>
      <pubDate>Mon, 18 Oct 2021 16:35:15 +0000</pubDate>
      <link>https://dev.to/gvt3ch/nodejs-fundamentals-5e9k</link>
      <guid>https://dev.to/gvt3ch/nodejs-fundamentals-5e9k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NODEJS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open Source platform, allow the execution of javascript language in server-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single Thread (v8) with Thread Pool (libuv c++) and group of modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Event Loop (Call Stack)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NoN-Blocking I/O&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Self Modules (http, fs, dns, buffer, etc..)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#whats-event-loop"&gt;
  &lt;/a&gt;
  What's Event Loop?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TEWpYWC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JGHGkdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TEWpYWC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JGHGkdy.png" alt="luiztools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;the last one in is the first one out!&lt;b&gt;&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
