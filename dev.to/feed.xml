<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web Scalability for Beginners</title>
      <author>Fikayo Adepoju</author>
      <pubDate>Fri, 21 May 2021 18:42:06 +0000</pubDate>
      <link>https://dev.to/hookdeck/web-scalability-for-beginners-2i8c</link>
      <guid>https://dev.to/hookdeck/web-scalability-for-beginners-2i8c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Almost every new application starts out its life under very simple circumstances. The beginning means few users (mostly in the hundreds, rarely thousands), low traffic, few transactions, a small amount of data to process, and oftentimes limited clients ( at first most apps have just a web portal and no mobile or desktop clients at all). However, the number of users starts to grow, traffic spikes, transactions increase across the system, and user needs might prompt the requirement of mobile, desktop, and (in rare cases) &lt;a href="https://en.wikipedia.org/wiki/Internet_of_things"&gt;IoT&lt;/a&gt; clients to be served.&lt;/p&gt;

&lt;p&gt;In this post, we take a look at the requirements that arise from growing pressure on an application. We will go over the effects of this rising pressure on the system's performance, and explore how to respond to it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-mean-for-a-system-to-scale"&gt;
  &lt;/a&gt;
  What does it mean for a system to scale?
&lt;/h1&gt;

&lt;p&gt;Scalability can be defined as a system's ability to adjust in a cost-effective manner in order to fulfill the demands of that system. This "cost" is not always monetary - it can include time investment, the amount of maintenance required (automation versus manual), as well as the human resources needed to keep the system running successfully.&lt;/p&gt;

&lt;p&gt;A system needs to be able to grow to adequately handle more users, process more data, and handle more transactions or client requests without affecting the overall user experience. A well-scaled system should also allow scaling down. Although scaling down is mostly less important than scaling up, it is important to save costs and not use more than what is required.&lt;/p&gt;

&lt;p&gt;The scaling setup should also be relatively cheap and quick to do, thus it is advised to take advantage of the work already done by cloud providers and &lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_a_service"&gt;IaaS&lt;/a&gt; platforms.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sources-of-scalability-issues"&gt;
  &lt;/a&gt;
  Sources of scalability issues
&lt;/h1&gt;

&lt;p&gt;There are so many areas in a system's infrastructure and codebase where scalability issues can arise. However, most scalability issues can be categorized into these 3 areas:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ability-to-serve-more-users"&gt;
  &lt;/a&gt;
  1) Ability to serve more users
&lt;/h2&gt;

&lt;p&gt;As users of an application increase, more pressure is put on the system to serve each user accordingly. Users operate on the software in isolation from one another, which makes it difficult for them to hear the excuse that other users are causing their experience to worsen. A properly scaled application should be ready to handle an increasing number of concurrent users using the application without affecting each user's experience.&lt;/p&gt;

&lt;p&gt;For the system's infrastructure, higher concurrency means more open connections, more active threads, more CPU context switches, and more messages being processed at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYYKXkN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay9hdrq7h9jvtz3106.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYYKXkN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay9hdrq7h9jvtz3106.png" alt="Serving more users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ability-to-process-more-data"&gt;
  &lt;/a&gt;
  2) Ability to process more data
&lt;/h2&gt;

&lt;p&gt;Imagine an invoice system that needs to calculate the gross total amount for the sales in a year for a product. At an average of a thousand sales a year, the system handles this fine. Suddenly, the product becomes popular due to a boost in ad campaigns and now the system has to process hundreds of thousands of sales in a single year. Such a scenario would put a lot of pressure on the logic in the system that has to calculate the total gross amount for a year's sales. The process would take a longer time to complete and the system could easily run out of memory and terminate the process. &lt;/p&gt;

&lt;p&gt;Also, read and write operations on the database increase and can even get worse if queries are not written to efficiently search, sort, and fetch data.&lt;/p&gt;

&lt;p&gt;Then, there is data required to be sent over the network to clients. This can easily run down the bandwidth if not effectively handled. Clients, especially mobile clients, have limited memory to store data received from servers and therefore certain clients will need specific considerations based on the amount of data they can handle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5zLEtAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/953wybrrntyrsqhf0ozh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5zLEtAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/953wybrrntyrsqhf0ozh.png" alt="Handling more data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ability-to-handle-high-interaction-rates"&gt;
  &lt;/a&gt;
  3) Ability to handle high interaction rates
&lt;/h2&gt;

&lt;p&gt;Clients of applications like e-commerce sites make a fair amount of requests to their backend servers. For some of these low-interaction sites, the difference in time between consecutive requests can be as much as 10 to 100 seconds. However, imagine an online multi-player gaming application or stock exchange application, which are types of applications that can make hundreds of requests to their backend servers within a few seconds. &lt;/p&gt;

&lt;p&gt;For the high interaction sites described above, &lt;a href="https://en.wikipedia.org/wiki/Latency_(engineering)"&gt;latency&lt;/a&gt; is a very huge factor in their performance. Such apps cannot afford microseconds of delay as users have to make quick decisions based on the real-time state of the application.&lt;/p&gt;

&lt;p&gt;Some user interactions can fire up to 5 requests to the server and as interactions increase, the server needs to be scaled to respond faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oFfY1tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqba9f6s58w3cpngiuao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oFfY1tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqba9f6s58w3cpngiuao.png" alt="High interaction rates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#different-types-of-scaling-strategies"&gt;
  &lt;/a&gt;
  Different types of scaling strategies
&lt;/h1&gt;

&lt;p&gt;Scalability is a huge topic and is covered in so many books, seminars, video courses, and articles. There are even books that are dedicated to just one scaling strategy specific to a certain scenario. To be clear, no single scaling strategy solves all scalability problems — there are as many strategies as issues themselves.&lt;/p&gt;

&lt;p&gt;There are, however, certain industry-standard scalability strategies that help solve a lot of the common, but in no way simple, scalability issues. These strategies also have varying degrees of complexity and requirements, both in terms of technology and human resources.&lt;/p&gt;

&lt;p&gt;Let's take a look at some of these strategies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increasing-hardware-capabilities"&gt;
  &lt;/a&gt;
  Increasing hardware capabilities
&lt;/h2&gt;

&lt;p&gt;This is often referred to as vertical scaling. You can scale up your servers by adding more memory to expand the amount of data the software process can hold, and increasing the number of CPU for more processing threads and distributed processing with faster context switches. You can also add more hard disk for more data space or replace hard disk drives (HDD) with solid-state drives (SSD) for faster reads and writes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvap-hc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w562q5jtsxw39ih5f9gx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvap-hc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w562q5jtsxw39ih5f9gx.png" alt="Vertical Scaling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#load-balancing"&gt;
  &lt;/a&gt;
  Load balancing
&lt;/h2&gt;

&lt;p&gt;This is often referred to as horizontal scaling, and is considered more effective for handling concurrency and network traffic issues than vertical scaling. This strategy makes use of a proxy server known as a &lt;a href="https://www.f5.com/services/resources/glossary/load-balancer"&gt;load balancer&lt;/a&gt; to distribute client requests to numerous instances of the backend service. This helps distribute traffic to multiple machines and avoid overloading a single one. Traffic can be distributed evenly (round-robin) or based on the current amount of load each instance is handling.&lt;/p&gt;

&lt;p&gt;This strategy helps DevOps engineers to quickly scale up for traffic spikes by deploying more instances of the backend, and scale down by removing instances from the server pool when traffic reduces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4VRWlzX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f66o0xi3abytgis4tzo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4VRWlzX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f66o0xi3abytgis4tzo1.png" alt="Horizontal Scaling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h2&gt;

&lt;p&gt;Content delivery networks (CDNs) help solve latency issues by providing highly available and performant proxy servers for your static content. These servers are geographically distributed to serve users based on their proximity to the servers and data centers.&lt;/p&gt;

&lt;p&gt;CDNs also help with bandwidth usage, as the bandwidth for the content fetched from them does not affect that of your servers. Latency for static content is also highly reduced.&lt;/p&gt;

&lt;p&gt;CDNs are mostly operated by companies like &lt;a href="https://www.cloudflare.com"&gt;Cloudflare&lt;/a&gt; with huge data centers and wide network coverage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVA6T3OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1inu18jn7wffteh2o30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVA6T3OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1inu18jn7wffteh2o30.png" alt="Content Delivery Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronous-processing"&gt;
  &lt;/a&gt;
  Asynchronous processing
&lt;/h2&gt;

&lt;p&gt;Most server transactions follow a request/response synchronous process. This means that the client has to wait for the server to respond and the server also has to complete a requested task and send a response before continuing with other tasks. These days, with microservices and service-oriented architectures and the need to handle long-running tasks, the client cannot afford to (always) wait for a response from the server before performing other tasks. This has brought about the introduction of systems like &lt;a href="https://en.wikipedia.org/wiki/Message_queue"&gt;message queues&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"&gt;pub/sub systems&lt;/a&gt; to allow the clients to carry on with other activities while the server processes tasks, and also for inter-process communication between servers.&lt;/p&gt;

&lt;p&gt;This gives rise to highly responsive applications that are decoupled and can easily adjust to system demands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsdrEJEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duikav4kaxiiam5w0fxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsdrEJEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duikav4kaxiiam5w0fxq.png" alt="Asynchronous Processing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#geodns"&gt;
  &lt;/a&gt;
  GeoDNS
&lt;/h2&gt;

&lt;p&gt;Latency increases when a request has to make a lot of &lt;a href="https://en.wikipedia.org/wiki/Hop_(networking)"&gt;network hops&lt;/a&gt; around servers across the world before it reaches the server that is to process it. &lt;a href="https://en.wikipedia.org/wiki/GeoDNS"&gt;GeoDNS&lt;/a&gt; gives a spatial advantage by allowing users to communicate with the servers closest to them. &lt;/p&gt;

&lt;p&gt;With GeoDNS, you can map multiple IP addresses representing different servers to a single domain name so that users in an area are served by the server closest to them. This greatly reduces latency as few network hops need to be made and clients receive responses faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AEAAGHuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f5zt9pdzyjaq2as94ja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AEAAGHuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f5zt9pdzyjaq2as94ja.png" alt="GeoDNS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  Caching
&lt;/h2&gt;

&lt;p&gt;Caching encourages re-usability in data-intensive applications. Imagine having to make a network request to fetch your profile every time you visit your profile page on Facebook. Data such as profile information rarely changes, thus it is wise to reuse the piece of information fetched the first time it was loaded and only update it when the user makes an update to their profile.&lt;/p&gt;

&lt;p&gt;Caching helps drastically reduce the number of requests the client makes to the server and also improves speed, as cached information is faster to retrieve than trying to fetch it from the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qzAqvOk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bx344z8n4ois4zyolmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qzAqvOk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bx344z8n4ois4zyolmg.png" alt="Caching"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharding"&gt;
  &lt;/a&gt;
  Sharding
&lt;/h2&gt;

&lt;p&gt;Remember the gross amount of total sales problem described above? Sharding is one of the strategies that can help with that. &lt;/p&gt;

&lt;p&gt;Sharding allows you to split a single dataset into multiple databases and process them individually. Instead of having all sales records in a single database, you can split each month's sale into its own database, process them individually and then combine the results to arrive at your gross calculation.&lt;/p&gt;

&lt;p&gt;Distributing the data across multiple machines creates a cluster of database systems that can store larger datasets and handle more requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnbTAWes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sapv42ps2y5crsu9n33o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnbTAWes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sapv42ps2y5crsu9n33o.png" alt="Sharding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Scalability issues are inevitable for any software application that desires growth and most times, scalability issues arrive suddenly. Not planning for these issues can have undesired consequences, which makes it important for software companies, especially startups, to be one step ahead of scalability issues to ensure that they do not lose users they have worked so hard to get.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>scalability</category>
      <category>showdev</category>
      <category>web</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 21 May 2021 17:54:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-3lce</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-3lce</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Taking some time off ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1iYG017UokdODQc0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1iYG017UokdODQc0/giphy.gif" alt="That Friday feeling"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>How Much CSS Do I Need To Be Job Ready?</title>
      <author>Michael Caveney</author>
      <pubDate>Fri, 21 May 2021 17:35:27 +0000</pubDate>
      <link>https://dev.to/dylanesque/how-much-css-do-i-need-to-be-job-ready-3h0m</link>
      <guid>https://dev.to/dylanesque/how-much-css-do-i-need-to-be-job-ready-3h0m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKoJJ8r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/CSS3_logo_and_wordmark.svg/180px-CSS3_logo_and_wordmark.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKoJJ8r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/CSS3_logo_and_wordmark.svg/180px-CSS3_logo_and_wordmark.svg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS is one of the three foundational web technologies every front-end developer needs to know, and in some ways, the most difficult to learn. There are a staggering amount of &lt;a href="https://css-tricks.com/how-many-css-properties-are-there/#:~:text=520%20distinct%20property%20names%20from,reports%20and%2066%20editors'%20drafts."&gt;properties&lt;/a&gt; one can learn, and many subtleties to be aware of regarding how they interact with each other. Today, I'm going to go over the minimum CSS you need to know to be effective on the job!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-i-mean-by-jobready"&gt;
  &lt;/a&gt;
  What Do I Mean By Job-Ready?
&lt;/h1&gt;

&lt;p&gt;Before starting, let me clarify precisely what I mean when I say 'job-ready:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You'll understand the broad strokes of the technology in question, and know the most fundamental concepts that come up every day. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There may be gaps in your knowledge, but those will be limited to secondary concepts or syntax/other details that you'll be able to find the answer to relatively quickly and easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You'll know exactly where to turn to find answers to problems or questions that you're running into.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the advice here won't make you a master of CSS, but you'll be effective at the day-to-day that you'll need to get started on the job.&lt;/p&gt;

&lt;p&gt;I will mention that while the mechanics that dictate how CSS works are simple, how they interact with each other in the wild can be anything BUT simple, and CSS requires a much deeper understanding of the fundamentals that HTML to be truly effective and not have to constantly be redoing previous code. This post in particular is probably going to have a lot of edits as I refine it to deliver the best information. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-you-need-to-know"&gt;
  &lt;/a&gt;
  What you need to know
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#core-mechanics-and-terminology"&gt;
  &lt;/a&gt;
  Core mechanics and terminology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Be able to identify and explain what properties, selectors, declarations, values, and rules are. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand at a high level how specificity, inheritance, and the cascade work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model"&gt;box model&lt;/a&gt;, the different roles that margin/padding/border play, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the basic display types (block, inline, and inline-block), and the major differences in how the default versions of these display types work in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout"&gt;flow layout&lt;/a&gt; aka the default version of how layout works in CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the basics of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;positioning&lt;/a&gt; in flow layout (absolute vs relative vs sticky vs fixed vs static) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the fundamentals of stacking with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"&gt;z-index&lt;/a&gt;, and when and what elements it's applied to in that given context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding how &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;Flexbox&lt;/a&gt; and &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;Grid&lt;/a&gt; work is a must for modern CSS developers; you should be tangentially aware of how layout works using &lt;code&gt;float&lt;/code&gt;, but don't spend a lot of time on this since it shouldn't be the first layout tool you reach for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to remove or hide items from the DOM or the page: There is a difference between removing items from the DOM or simply making them invisible, and you should know what rules accomplish one or the other, and have an idea of some situations where one method is more desirable than the other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the different units of measurement (pixels, ems, rems, etc), and their strengths, weaknesses, optimum use cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Techniques for responsive design, including media queries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least some familiarity with transforms, animation, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to build a basic design system, and utilize CSS variables.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#extra-credit"&gt;
  &lt;/a&gt;
  Extra Credit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have some familiarity with older paradigms to make CSS more efficient, such as Sass, BEM, etc. These aren't as widely used these days, and you can delve into more detail if you need one of these technologies for a job, but it's not something you'll need for every job.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some familiarity with a CSS framework like Bootstrap can be helpful, but it would be better to be able to demonstrate fluency in writing CSS without them. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If and when you learn a front-end framework like React, some knowledge of a paradigm like Tailwind, styled-components, or Emotion would be helpful.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to Learn
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#basic-resources"&gt;
  &lt;/a&gt;
  Basic Resources
&lt;/h2&gt;

&lt;p&gt;For the absolute basics, I'm going to repeat my recommendations from my post on &lt;a href="https://dev.to/dylanesque/how-much-html-do-i-need-to-be-job-ready-11pc"&gt;getting job-ready with HTML&lt;/a&gt;, as far as basic resources for your first contact with the language go, with the caveat that you'll get less of a quality education in terms of writing solid CSS from freeCodeCamp than you would HTML.&lt;/p&gt;

&lt;p&gt;Additionally, Google's &lt;a href="https://web.dev/"&gt;web.dev&lt;/a&gt; mini learning platform has a really nice, brand-new &lt;a href="https://web.dev/learn/css/"&gt;CSS module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdjl811W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://freetutorialsudemy.com/wp-content/uploads/2020/03/images/image_03-18-2020_114249.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdjl811W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://freetutorialsudemy.com/wp-content/uploads/2020/03/images/image_03-18-2020_114249.jpg" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
For a deeper dive, I would recommend taking a look at Jonas Schmedtman's &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;Advanced CSS&lt;/a&gt; Udemy course. This course shows projects in styled with three different paradigms (old school, Flexbox, Grid) so you can see how those approaches work, and how some of the more modern ones make some techniques easier than the old way or enable layouts that would have been previously impossible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#premium-resources"&gt;
  &lt;/a&gt;
  Premium Resources
&lt;/h2&gt;

&lt;p&gt;A small caveat about the following section: The course I'm about to talk about is in closed beta at the time of this writing, but I consider it so essential that I can't exclude it here. So with that said...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pu9iMIUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://css-for-js.dev/og-image-v2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pu9iMIUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://css-for-js.dev/og-image-v2.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The toughest thing about CSS is that the overwhelming majority of education surrounding it is "Here's this rule, this is what it does" without going into the inevitable gotchas or unexpected behavior that will pop up when you're writing CSS at any scale above the smallest possible use-case. Compared to HTML and JavaScript, it's much harder to learn how to write good CSS without a teacher that really knows that they're talking about.&lt;/p&gt;

&lt;p&gt;Josh Comeau's &lt;a href="https://css-for-js.dev/"&gt;CSS For JS Developers&lt;/a&gt; doesn't do this and instead focuses on how the core behavior behind many aspects of the language work, and will teach you tips and tricks it would take you years of trial and error writing production code to figure out. My ability to write efficient, maintainable, and scalable CSS has improved considerably as a direct result of the modules currently available to those who were able to get in on the beat (5 out of 9 total modules), and I consider this the single best CSS resource money can buy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-to-get-helpfind-reference"&gt;
  &lt;/a&gt;
  Where To Get Help/Find Reference
&lt;/h1&gt;

&lt;p&gt;In addition to the sources I mentioned in my last post (Stack Overflow and MDN), I would also recommend checking out &lt;a href="https://css-tricks.com/"&gt;CSS Tricks&lt;/a&gt;, a time-honored blog with many deep dives on various CSS subjects, including the definitive guide to Flexbox that I had linked above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h1&gt;

&lt;p&gt;CSS can be surprisingly tricky to get a firm handle on, but I hope this guide makes the path a lot easier for you. Join me next time, where I talk about getting job-ready with JavaScript!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>css</category>
    </item>
    <item>
      <title>CodePen - CSS Icons (Animation)</title>
      <author>Roden</author>
      <pubDate>Fri, 21 May 2021 17:28:49 +0000</pubDate>
      <link>https://dev.to/kerthin/codepen-css-icons-animation-3c1e</link>
      <guid>https://dev.to/kerthin/codepen-css-icons-animation-3c1e</guid>
      <description>&lt;p&gt;I want to introduce you to my 6 animated icons. It took me a little over a week to create them.&lt;/p&gt;

&lt;p&gt;You know, I often use icons in my projects, but it always seemed to me that they lack dynamics, and that they sometimes look very boring. I always wanted those elements that are displayed on the icon to be animated, and that they can be edited as you need. But I could not find anything interesting, which later prompted me to create my own icons created using &lt;strong&gt;html&lt;/strong&gt; and &lt;strong&gt;css&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can edit these icons as you like: change the size of all the elements, edit the colors, create your own animation for them, and change the location of any element.&lt;/p&gt;

&lt;p&gt;To insert an icon on your site, simply copy the necessary sections of the &lt;strong&gt;pug&lt;/strong&gt; and &lt;strong&gt;scss&lt;/strong&gt; code (&lt;strong&gt;html&lt;/strong&gt; and &lt;strong&gt;css&lt;/strong&gt;), which are marked with the corresponding comments. Also, don't forget about the &lt;strong&gt;@keyframes&lt;/strong&gt; required for the animation, which are located at the very bottom of the code.&lt;/p&gt;

&lt;p&gt;I hope they will benefit you in your future projects.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Astap/embed/QWddOgw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I would be very grateful if you appreciate this work.&lt;/p&gt;

&lt;p&gt;P.S.&lt;br&gt;
To reset the styles, I use &lt;strong&gt;reset.css&lt;/strong&gt; with the addition of the &lt;strong&gt;box-sizing: border-box;&lt;/strong&gt; property, but if you do not want to use it, you can simply insert at the beginning of the styles:&lt;br&gt;
&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{
padding: 0;
margin: 0;
box-sizing: border-box;
}
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also keep in mind that the project uses &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;@extend&lt;/strong&gt;. So, if you don't want to worry about them, just compile them into styles from &lt;strong&gt;scss&lt;/strong&gt; to &lt;strong&gt;css&lt;/strong&gt;. This can be done in CodePen.&lt;br&gt;
The appearance of the icons I took from the Internet.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Front-end Studio powered  by SolidJS</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Fri, 21 May 2021 17:12:50 +0000</pubDate>
      <link>https://dev.to/przemek/front-end-studio-powered-by-solidjs-e5o</link>
      <guid>https://dev.to/przemek/front-end-studio-powered-by-solidjs-e5o</guid>
      <description>&lt;p&gt;I would like to showcase my project I've been working on for a last year. It's a Studio that has built in IDE, repository of Widgets, it's own meta-framework, it is powered by SolidJS and export code to clean JSX. That's only a small part of all features that we managed to implement so you can read more below or go straight to the video I uploaded on YouTube&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OGR7cjZW44Q&amp;amp;t=520s%20feature=player_embedded&amp;amp;v=glueCodesStudioPresentation"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NORBv9To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfzizdycczentasy9qb4.jpg" alt="GlueCodes Studio"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solidjs"&gt;
  &lt;/a&gt;
  SolidJS
&lt;/h2&gt;

&lt;p&gt;First and most important - it runs &lt;a href="https://github.com/solidjs/solid"&gt;SolidJS&lt;/a&gt;. When we started building first prototype a year ago we were using virtual-dom. Since the library seems to be abandoned and it's performance is not the greatest we decided to swap it with Solid just at the beginning of the year. That not only gave us huge performance boost in both - Studio and exported code, but also let us to implement more features for developers like &lt;a href="https://www.glue.codes/docs-templating-htmlDirectives.html#uiSignals"&gt;UI Signals&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#all-you-need-is-browser"&gt;
  &lt;/a&gt;
  All you need is browser...
&lt;/h2&gt;

&lt;p&gt;...and everything happens locally. The Studio not only stores your project on your hard drive to keep it safe but also transpile the code right on your PC which makes it fast since is not send to any cloud service before is displayed in...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-live-preview"&gt;
  &lt;/a&gt;
  The Live Preview
&lt;/h2&gt;

&lt;p&gt;Setup-free and ready to go right at the start. Simply open the new tab with the Live Preview, drag it on a different screen and enjoy looking at all your changes while you type.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation-assistant"&gt;
  &lt;/a&gt;
  Implementation Assistant
&lt;/h2&gt;

&lt;p&gt;Now let's deep down how the Studio actually makes developing web apps fast. Implementation Assistant scans your code while you type, and gives you in-context notifications about what needs to be done inside your project. When Implementation Assistant is triggered by developer, it's creating all necessary folders, files, glue code and places everything inside the project structure exposing only the file where you type your code to add new functionalities to your web app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#widgets"&gt;
  &lt;/a&gt;
  Widgets
&lt;/h2&gt;

&lt;p&gt;Please, don't expect here simple dropdowns, buttons, inputs or god knows what other simple elements you can think of. Widgets are isolated UI pieces that lets you prototype simple landing pages or advanced administration panels in minutes. At the moment we developed over 70 of them, starting from simple block presenter going to advanced data tables and forms. All of it is installable inside your project within one click. You can edit their content by using simple object JSON and style them with scoped CSS or Global Styles (we also planning on opening the repository with pre-made global styles created by community). Of course they are fully responsive and their documentation can be found inside the Studio right before installation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reusable-slots"&gt;
  &lt;/a&gt;
  Reusable Slots
&lt;/h2&gt;

&lt;p&gt;Navigations, footers, cookie consent notice, pop-up's - everything that you think should be reused on multiple pages can be developed in the reusable slot (also Widgets can be installed there) and reused by pasting single line of HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;gc-as=&lt;/span&gt;&lt;span class="s"&gt;"slot"&lt;/span&gt; &lt;span class="na"&gt;gc-name=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-directives"&gt;
  &lt;/a&gt;
  HTML directives
&lt;/h2&gt;

&lt;p&gt;Loops, conditionals, error presenters and more can be done using simple &lt;code&gt;gc&lt;/code&gt; directives. That's definitely to wide subject to write more about it here, so I definitely make separate blog about it in close feature, but if you are curious - have a look at our &lt;a href="https://www.glue.codes/docs.html"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;For all the Widgets, Slots or Reusable Slots the Studio creates separate CSS files that you can use to style parts of your web app without interfering with the rest of it. On the other hand you can use Global Styles to edit the whole app at once which help you to keep consistent design. Since scoped files have always priority over Global Styles you can create 10 header on your page, set their size, margins and paddings globally and change just color for each of them using scoped CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-and-font-awesome"&gt;
  &lt;/a&gt;
  Bootstrap and Font Awesome
&lt;/h2&gt;

&lt;p&gt;Since those 2 libraries are very popular we decided to implement them inside the Studio. So you can use them right at the start without looking for their dependencies etc. If you are not a big fan of them, or you just working on a project that won't make a use out of them, no problem. You can easily delete them from the dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exported-code"&gt;
  &lt;/a&gt;
  Exported code
&lt;/h2&gt;

&lt;p&gt;The code is exported to clean and well organized JSX powered by SolidJS. It also comes with docker and webpack setup. You can deploy it straight to your hosting service or build it using terminal and keep developing outside the Studio&lt;/p&gt;

&lt;p&gt;Yeah. That's just a small part of everything that we developed in the Studio, but I don't want to keep it too long. We'll definitely keep making new videos and blogs showing more details about specific features, but it is important for us to adjust to community. So any suggestions will be appreciated.&lt;/p&gt;

&lt;p&gt;I'm leaving small video with presentation of the GlueCodes Studio to show you how everything described here works in practice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OGR7cjZW44Q&amp;amp;t=520s"&gt;GlueCodes Studio Presentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also try out the Studio here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.glue.codes"&gt;www.glue.codes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>news</category>
      <category>solidjs</category>
    </item>
    <item>
      <title>Parse LIVE Website - Extract component and convert to React</title>
      <author>Sm0ke</author>
      <pubDate>Fri, 21 May 2021 17:04:57 +0000</pubDate>
      <link>https://dev.to/sm0ke/parse-live-website-extract-component-and-convert-to-react-5761</link>
      <guid>https://dev.to/sm0ke/parse-live-website-extract-component-and-convert-to-react-5761</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article explains how to parse and extract components from a LIVE website using open-source libraries and tools. Personally, I'm using HTML parsing to convert automatically components from one technology (Bootstrap) to others like React, Vue, Svelte with less manual work and better quality. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - The article is heavily inspired from here: &lt;strong&gt;&lt;a href="https://docs.appseed.us/content/tutorials/parse-html-components"&gt;Parse HTML Components&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;




&lt;p&gt;Parsing LIVE websites or lifeless HTML files might be useful in many scenarios. I will mention only a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code a pricing scanner to detect changes&lt;/li&gt;
&lt;li&gt;check health for a LIVE system &lt;/li&gt;
&lt;li&gt;extract components and reuse previous work for evolutions&lt;/li&gt;
&lt;li&gt;extract texts from a LIVE website and check text errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, I will mention an &lt;a href="https://github.com/app-generator/django-pixel-lite"&gt;open-source Django product&lt;/a&gt; that uses a UI built with components extracted from a Bootstrap 5 Kit using parsing code quite similar to the one presented in this article. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tools-we-need"&gt;
  &lt;/a&gt;
  Tools we need
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; - the interpreter &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautiful Soup&lt;/a&gt; - a well-known parsing library &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://lxml.de/"&gt;Lxml&lt;/a&gt; - used to compensate BS4 limitations&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;The process&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Load the HTML content - this can be done from a local file or using a LIVE website&lt;/li&gt;
&lt;li&gt;Analyze the page and extract XPATH expression for a component&lt;/li&gt;
&lt;li&gt;Use Lxml library to extract the HTML using &lt;em&gt;Xpath&lt;/em&gt; selector&lt;/li&gt;
&lt;li&gt;Format the component and save it on disk&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Install tools&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;requests 
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;lxml
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all tools and libraries are installed and accessible in the terminal, we can start coding using &lt;code&gt;Python console&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ENTER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML content can be a local file or a remote one, deployed and rendered by a LIVE system. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load the HTML from a local file&lt;/strong&gt; (a simple file read)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./app/templates/index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Load content from a live website&lt;/strong&gt; - &lt;a href="https://demo.themesberg.com/pixel-lite/index.html"&gt;Pixel Lite&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://demo.themesberg.com/pixel-lite/index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, &lt;code&gt;html_page&lt;/code&gt; variable contains the entire HTML content (string type) and we can use it in BS4 or Lxml to extract the components. To visualize the page structure we can use browser tools:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmUDCzLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck60uqemtra5p1g8mseb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmUDCzLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck60uqemtra5p1g8mseb.png" alt="HTML Parser - Target Component Inspection."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The target component will be extracted using an &lt;code&gt;XPATH expression&lt;/code&gt; provided by the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//*[@id="features"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the selector, let's extract the components using LXML library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html_dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'//*[@id="features"]'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;code&gt;XPATH selector&lt;/code&gt; returns a valid component, we should have a valid LXML object that holds the HTML code - Let's use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml.etree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tostring&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;component_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To have a nice formatted component and gain access to all properties like nodes, &lt;code&gt;css style&lt;/code&gt;, texts .. etc, the HTML is used to build a &lt;code&gt;Beautiful Soup&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;component_html&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component is now fully parsed and we can traverse all information and proceed further with a conversion to React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"section section-lg pb-0"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"features"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     ...

     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-box text-center mb-5 mb-md-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon icon-shape icon-lg bg-white shadow-lg border-light rounded-circle icon-secondary mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-box-open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-3 h5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        80 components
       &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-lg-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Beatifully crafted and creative components made with great care for each pixel
       &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

     ...

     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tool-chain will check and validate the component to be a valid HTML block with valid tags. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;The extracted component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TJ9H1JR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo3l8vtvpd6y5ie6x34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TJ9H1JR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo3l8vtvpd6y5ie6x34.png" alt="HTML Parser - Extracted Component."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;React component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Comp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;COMPONENT_HTML_GOES_HERE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React Component usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Comp&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;This process can be extended for more tasks and automation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;detect page layouts&lt;/li&gt;
&lt;li&gt;validate links (inner and outer)&lt;/li&gt;
&lt;li&gt;check images size&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To see a final product built using a component extractor please access &lt;a href="https://github.com/app-generator/django-pixel-lite"&gt;Pixel Lite Django&lt;/a&gt;, an open-source product that uses a Bootstrap 5 design. &lt;/p&gt;

&lt;p&gt;The project can be used by anyone to code faster a nice website  using Django as backend technology and Bootstrap 5 for styling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://django-pixel-lite.appseed-srv1.com/"&gt;Django Pixel Lite&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demo.themesberg.com/pixel-lite/index.html"&gt;Pixel Lite&lt;/a&gt; - the original HTML design &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LokJi_YT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx9yfsoylsnpk7a45r6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LokJi_YT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx9yfsoylsnpk7a45r6k.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/11465555/can-we-use-xpath-with-beautifulsoup"&gt;Use XPath in Beautiful Soup&lt;/a&gt; - related article published on StackOverflow&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.python-guide.org/scenarios/scrape/"&gt;Web Scraping&lt;/a&gt; - the right way (with sample)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>My Top 10 Visual Studio Code Extensions for Web Development</title>
      <author>Atul Vishwakarma</author>
      <pubDate>Fri, 21 May 2021 16:52:08 +0000</pubDate>
      <link>https://dev.to/jerry45/my-top-10-visual-studio-code-extensions-for-web-development-2hn8</link>
      <guid>https://dev.to/jerry45/my-top-10-visual-studio-code-extensions-for-web-development-2hn8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Visual Studio Code or VS Code is the most popular editor for Web Development in 2021. One of the most impressive parts of Visual Studio Code is customizability, especially with the extensions. Today, I will show you my 10 favourite VS Code extenions for web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-vs-code-and-vs-code-extensions"&gt;
  &lt;/a&gt;
  Installing VS Code and VS Code Extensions
&lt;/h3&gt;

&lt;p&gt;In order to use VS Code's extensions, you need to download VS Code. You can download it &lt;a href="https://code.visualstudio.com/"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To  install extensions press &lt;strong&gt;CTRL+SHIFT+X&lt;/strong&gt; or just click on the extension icon of Visual Studio Code. Search for the extension and press install.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfQDEK0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is1hrznajbtolqbyh53h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfQDEK0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is1hrznajbtolqbyh53h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The choices of the extensions are my of personal opinion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. ESLint&lt;/strong&gt;&lt;br&gt;
Want to write better code? Want consistent formatting across your team? Install ESLint. This extension can be configured to auto format your code as well as 'yell' with linting errors/warnings. VS Code specifically is also perfectly configured to show you these errors/warnings. &lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7uGtPO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ll3chb3svwy9bwsjzqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7uGtPO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ll3chb3svwy9bwsjzqw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;2. Live Server&lt;/strong&gt;&lt;br&gt;
Make changes in code editor, switch to browser, and refresh to see changes. That's the endless cycle of a developer, but what if your browser would automatically refresh anytime you make changes? That's where Live Server comes in!  On a click of a button, your site is up and running locally. It provides the live preview of our web application right within your editor.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhT9qING--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eqptyt8aka34b53nvbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhT9qING--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eqptyt8aka34b53nvbs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;3. Prettier - Code formatter&lt;/strong&gt;&lt;br&gt;
Prettier is a lifesaver when it comes to formatting and productivity. Prettier formats your files on a save once you configure it in your settings. Instead of spending hours a day making your code look clean, use Prettier.  This extension performs the formatting of the JavaScript, CSS, and HTML code.&lt;/p&gt;

&lt;p&gt;Never worry about formatting again!&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3jqVi2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sxglf0ukyyi6497bxbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3jqVi2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sxglf0ukyyi6497bxbx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;4. Material Icon Theme&lt;/strong&gt;&lt;br&gt;
Fan of Google's Material design? Then, check out this Material themed icon pack. There's hundreds of different icons and they are pretty awesome looking!&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhD_C_wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84ymvcy8n0aawv703dzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhD_C_wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84ymvcy8n0aawv703dzb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;5. Better Comments&lt;/strong&gt;&lt;br&gt;
This extension helps you to create more human-friendly and easy-to-read comments.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULLglYdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t58zbicvag6jckmoqior.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULLglYdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t58zbicvag6jckmoqior.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;6. Path Intellisense&lt;/strong&gt;&lt;br&gt;
Remembering specific file names and the directories your files are in can get tricky. This extension will provide you intellisense for just that. As you start typing a path in quotations, you will get intellisense for directories and file names. This will save you from spending a lot of time in the file explorer &lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLm6Iuzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54afut14pmvq9km5o66g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLm6Iuzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54afut14pmvq9km5o66g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;7. Polacode&lt;/strong&gt;&lt;br&gt;
You know those fancy code screenshots you see in articles and tweets? Well, most likely they came from Polacode. It's super simple to use. Copy a piece of code to your clipboard, open up the extension, paste the code, and click to save your image!&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode"&gt;https://marketplace.visualstudio.com/items?itemName=pnp.polacode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q9_DFxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rugpzo31kxkkrkedb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q9_DFxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rugpzo31kxkkrkedb6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;8. Debugger for Chrome&lt;/strong&gt;&lt;br&gt;
Believe it or not, debugging JavaScript means more than just writing console.log() statements (although that's a lot of it). Chrome has features built in that make debugging a much better experience. This extension brought the powerful chrome debugger right into the visual studio code. It is very useful for front-end developers to perform the testing and debugging.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome"&gt;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFWECgPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aok0zxbegn6vz98dahyz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFWECgPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aok0zxbegn6vz98dahyz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;9. Bracket Pair Colorizor&lt;/strong&gt;&lt;br&gt;
This extension gives the same colour to matching brackets and parenthesis. This extension prevents you from taking too long looking for the correct closing bracket. This is a must-have if you are using a language which uses brackets and not indentation (sorry python users).&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEsXE-mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i736bbtb5c16yg7r3w8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEsXE-mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i736bbtb5c16yg7r3w8k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;10. Settings Sync&lt;/strong&gt;&lt;br&gt;
Developers, myself included, spend a lot of time customizing their dev environment, especially their text editors. With the Settings Sync extension, you can save your setting off in Github. Then, you can load them to any new version of VS Code with one command. Don't get caught without your amazing setup ever again!&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jt9Ob8oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/123z5a5yszqftwu31tcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jt9Ob8oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/123z5a5yszqftwu31tcu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Hope this post will help you in web development. Thank you for reading the post.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>html</category>
    </item>
    <item>
      <title>Launching Pixiko on Product Hunt</title>
      <author>Павел Шульга</author>
      <pubDate>Fri, 21 May 2021 16:31:00 +0000</pubDate>
      <link>https://dev.to/kinga2281/launching-pixiko-on-product-hunt-53i7</link>
      <guid>https://dev.to/kinga2281/launching-pixiko-on-product-hunt-53i7</guid>
      <description>&lt;p&gt;Hey everyone 👋&lt;/p&gt;

&lt;p&gt;We’re developing an online video editor and maker and today we’re launched on Product Hunt 💪&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZZJnskL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogd6inanw5thiclmoies.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZZJnskL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogd6inanw5thiclmoies.jpg" alt="Pixiko"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pixiko is cool at:&lt;br&gt;
👉Apply filters (Glitch, BW, RGB splitter and etc.) to any period of time (all together and at the same time)&lt;br&gt;
👉Add text with motion and animated letter effects, neon, rainbow and so on&lt;br&gt;
👉Loop, reverse, trim, speed up and down your video at any time period&lt;/p&gt;

&lt;p&gt;Surely, you can create animated posts, ads, stories, videos using your images on Pixiko 😝&lt;/p&gt;

&lt;p&gt;We will be very grateful for the support on PH, and even more so for the use and feedback about Pixiko 😎&lt;/p&gt;

&lt;p&gt;P.S. Our Product Hunt link - &lt;a href="https://www.producthunt.com/posts/pixiko"&gt;https://www.producthunt.com/posts/pixiko&lt;/a&gt;&lt;/p&gt;

</description>
      <category>help</category>
      <category>startup</category>
      <category>saas</category>
    </item>
    <item>
      <title>😲 ZERO CSS and just a single image to build a fully interactive SPA???!!?? 😱 Abusing the internet once more! [Extreme SSR!]</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 21 May 2021 16:28:02 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-built-a-3-page-interactive-spa-with-a-single-image-element-and-no-css-extreme-ssr-4knk</link>
      <guid>https://dev.to/inhuofficial/i-built-a-3-page-interactive-spa-with-a-single-image-element-and-no-css-extreme-ssr-4knk</guid>
      <description>&lt;p&gt;I am back at it again, abusing the internet and this one should really blow you away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8cmpgNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceu1nrfg1hmf5hr2x1zf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8cmpgNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceu1nrfg1hmf5hr2x1zf.gif" alt='"hold onto your butts" from Jurassic Park 1'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time I really do think I have outdone myself.&lt;/p&gt;

&lt;p&gt;I present to you:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;A 3 page SPA with an interactive poll and a contact form, with no CSS and one DOM element - just a single image! (go on, inspect the page!)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I call it "Extreme Server Side Rendering (SSR)" 🤣&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE NOTE:&lt;/strong&gt; - if using a mobile you cannot use the contact form, I couldn't find a way of opening the keyboard without an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; I am afraid! Try it on PC instead!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FINAL THING:&lt;/strong&gt; Due to the round-trip time to the server the page feels "laggy", if you are on a 3G connection it might be unusable so wait until you are on a better connection before trying it!&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; &amp;gt; &amp;gt; &lt;a href="https://inhu.co/demos/single-image-spa/"&gt;Try the single image SPA here! (best viewed on PC)&lt;/a&gt; &amp;lt; &amp;lt; &amp;lt; &amp;lt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-can-i-do-in-the-spa"&gt;
  &lt;/a&gt;
  What can I do in the SPA?
&lt;/h2&gt;

&lt;p&gt;There are some fun bits for you to try:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-kind-of-works-with-a-keyboard"&gt;
  &lt;/a&gt;
  It kind of works with a keyboard
&lt;/h3&gt;

&lt;p&gt;Well, you can Tab to elements to highlight them. You can even activate them with "Enter". &lt;/p&gt;

&lt;p&gt;Just don't expect a smooth experience (and I have only tested it in Chrome so it may not work in other browsers!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-home-page-is-responsive"&gt;
  &lt;/a&gt;
  The home page is responsive
&lt;/h3&gt;

&lt;p&gt;Yup, if you try it on your mobile the home page actually has two different versions, a mobile one and a desktop one.&lt;/p&gt;

&lt;p&gt;On mobile you can even open and close the menu!&lt;/p&gt;

&lt;p&gt;I sadly didn't have time to make the other two pages responsive (this silly project took ages already!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-poll-actually-works"&gt;
  &lt;/a&gt;
  The poll actually works!
&lt;/h3&gt;

&lt;p&gt;Cast your vote on the SPA as to what you think of my silly experiments!&lt;/p&gt;

&lt;p&gt;The current results are as follows:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;This has to be the stupidest thing I have ever seen - I love it!&lt;/strong&gt;&lt;br&gt;
53%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quite silly, &lt;a href="https://dev.to/inhuofficial/animations-without-js-or-css-or-images-pure-html-animation-45di"&gt;being rick rolled by ASCII text&lt;/a&gt; was sillier though!&lt;/strong&gt;&lt;br&gt;
19%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is silly? I thought this was what server side rendering was!&lt;/strong&gt;&lt;br&gt;
28%&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-contact-form-works"&gt;
  &lt;/a&gt;
  The contact form "works"
&lt;/h3&gt;

&lt;p&gt;It is one of if not the worst experiences you will ever have on the web, but it works!&lt;/p&gt;

&lt;p&gt;In fact you can see the messages people have posted via the SPA in the final section!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-actually-going-on-here"&gt;
  &lt;/a&gt;
  What is actually going on here?
&lt;/h2&gt;

&lt;p&gt;Oh loads! &lt;/p&gt;

&lt;p&gt;Essentially every interaction with the page is being tracked with JavaScript and cookies.&lt;/p&gt;

&lt;p&gt;I am then sending that to a script on my server that renders an image based on mouse position, current focused item, keys pressed and more. I then send the constructed image back so you can view it!&lt;/p&gt;

&lt;p&gt;Needless to say I now have a much greater appreciation for browser developers as there are so many little things that I just take for granted!&lt;/p&gt;

&lt;p&gt;To give you an idea of how difficult this is, from the X and Y coordinates of the mouse I calculate if an item is hovered. To do that I need the X, Y, width and Height of each item on the page. I also need to know what state to turn that button to. &lt;/p&gt;

&lt;p&gt;Now if you click, I have to check if the click is within the bounds of a button and what action should be performed!&lt;/p&gt;

&lt;p&gt;Multiply that by 3 pages worth of buttons and inputs and a few other features and there is an awful lot I had to plumb together!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words-before-the-comments"&gt;
  &lt;/a&gt;
  Final words before the comments
&lt;/h2&gt;

&lt;p&gt;As with all of my silly experiments, there is no real point to this, just a bit of fun for you on a Friday!&lt;/p&gt;

&lt;p&gt;Have a fantastic weekend!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-comments-submitted-via-the-contact-page-may-be-disabled-if-people-cannot-behave-"&gt;
  &lt;/a&gt;
  User comments submitted via the contact page (may be disabled if people cannot behave 😋)
&lt;/h2&gt;

&lt;p&gt;Here are a few comments that people have added via the single image SPA! &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;InHuOfficial&lt;/strong&gt; - 17:11 21/05/2021&lt;br&gt;
I look forward to seeing the messages you all post! Don't forget that you have to wait one minute before refreshing this page to see your comment!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;asdfsadf&lt;/strong&gt; - 17:40 21/05/2021&lt;br&gt;
asdfasdfasdfasdfsaf&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;testt&lt;/strong&gt; - 17:41 21/05/2021&lt;br&gt;
est&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;55&lt;/strong&gt; - 18:30 21/05/2021&lt;br&gt;
55&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;dakujem&lt;/strong&gt; - 18:38 21/05/2021&lt;br&gt;
serus&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;gghh&lt;/strong&gt; - 19:08 21/05/2021&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;yyyyyyyy&lt;/strong&gt; - 19:37 21/05/2021&lt;br&gt;
yyyyyyyy&lt;/p&gt;




&lt;p&gt;**** - 19:44 21/05/2021&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;this is a test&lt;/strong&gt; - 20:19 21/05/2021&lt;br&gt;
wow wtf&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;gwdsdg&lt;/strong&gt; - 20:25 21/05/2021&lt;br&gt;
gggewgg sd   mdgkgj sdkjgsodj g12 jr128 jdg sdg sdg jo sdjgojidsgdsg sodj g&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;gwdsdg&lt;/strong&gt; - 20:25 21/05/2021&lt;br&gt;
gggewgg sd   mdgkgj sdkjgsodj g12 jr128 jdg sdg sdg jo sdjgojidsgdsg sodj g&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;sdgsdgsdg&lt;/strong&gt; - 20:25 21/05/2021&lt;br&gt;
Your Message Has Been Sent! Go back to the article after 1 minute and refresh the page to see your comment within the article!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;sdg&lt;/strong&gt; - 20:25 21/05/2021&lt;br&gt;
dsgsdgsdgdgsdg&lt;/p&gt;




&lt;p&gt;**** - 20:33 21/05/2021&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#for-the-algo"&gt;
  &lt;/a&gt;
  For the Algo!
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article, give it a ❤🦄 and don't forget:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Leave a comment for the algorithm! (even if it is just to say how silly I am 😋!)&lt;/p&gt;
&lt;/blockquote&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>html</category>
    </item>
    <item>
      <title>A importância da matemática para a programação</title>
      <author>Fabrícia Diniz</author>
      <pubDate>Fri, 21 May 2021 16:18:05 +0000</pubDate>
      <link>https://dev.to/fabriciadiniz/a-importancia-da-matematica-para-a-programacao-329e</link>
      <guid>https://dev.to/fabriciadiniz/a-importancia-da-matematica-para-a-programacao-329e</guid>
      <description>&lt;p&gt;&lt;em&gt;Esse artigo surgiu a partir de uma palestra que eu dei para pessoas de ensino médio. O intuito era mostrar que a matemática existe no mundo real da profissão.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Quando eu decidi abandonar a carreira de biotecnologista e virar programadora, instintivamente eu voltei a estudar cálculo, geometria... &lt;strong&gt;Não que eu esperasse encontrar esses assuntos no dia a dia do trabalho&lt;/strong&gt;, mas porque eu achava os desafios interessantes e via similaridade entre eles e os desafios impostos pela programação.&lt;/p&gt;

&lt;p&gt;A matemática se apoia na lógica, que é uma qualidade essencial para um bom profissional de TI, a geometria é uma aliada no processo criativo, ajudando na abstração do mundo real e estatística nem se fala (alô ciência de dados). É possível trabalhar com TI sem saber nada além do básico de matemática, &lt;strong&gt;mas saber conceitos de matemática mais avançados te ajuda a ser uma pessoa profissional de destaque.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A pessoa que possui conhecimento em matemática é capaz de resolver problemas profundos, oferecendo soluções mais claras, organizadas e eficientes. Empresas como Amazon, Facebook e Google olham muito mais para a lógica no código que você escreve do que conhecimentos de tecnologias específicas. Elas te pedem para resolver desafios de lógica, resolver problemas apontando também a complexidade e a rapidez do código que você fez além da lógica que te levou à resposta apresentada.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uaqdUr5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmlxyqtk4u7t9ys9t6jr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaqdUr5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmlxyqtk4u7t9ys9t6jr.jpeg" alt="Sapinhos de porcelana trabalhando no computador, com um computador entre eles mostrando a logo do Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando estamos aprendendo matemática, nós aprendemos as operações básicas e depois evoluímos para as letrinhas, para achar x, achar y, e isso são funções, que é a base da computação todinha. Como na escola evoluímos de operações básicas só com números para funções que têm umas letras no meio, quando entramos no campo da programação os números e letras evoluem para &lt;strong&gt;qualquer coisa&lt;/strong&gt;. O que nós nos apoiamos para lidar com esses desafios mais complexos é na lógica que vem bem do início. Partimos de números para letras e depois para coisas como carros, naves espaciais… umas coisas mais legais e diferenciadas.&lt;/p&gt;

&lt;p&gt;Falando em naves espaciais, vocês sabiam que o programa que possibilitou o pouso do homem na lua pela primeira vez foi escrito por uma mulher? Foi a Margaret Hamilton que fez esse feito. &lt;strong&gt;Imaginem o TANTO de matemática que não é necessário para fazer uma nave espacial voar?&lt;/strong&gt; Ou então, pra fazer um joguinho como Minecraft?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfRTI-66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj4urd4zbcb6lgs3ey4s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfRTI-66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj4urd4zbcb6lgs3ey4s.jpeg" alt="Minecraft"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse jogos mais legais de hoje em dia as pessoas precisam simular no computador a física do mundo, uma bala ou uma flecha sendo lançadas, o seu personagem caindo muito rápido de um lugar alto e se estabacando no chão e você morrendo. Tudo isso envolve bastante matemática (e física). Meu marido começou a aprender design de jogos ano passado e eu o estava ajudando com a parte de programação puramente dita. A gente tinha que definir a velocidade do personagem quando ele andava, a velocidade quando ele corria, a aceleração para ele mudar de andando pra correndo pra parado. &lt;strong&gt;Tinha que definir a gravidade, a força do pulo do personagem pra definir quão alto ele ia pular e quão rápido ele ia cair no chão.&lt;/strong&gt; Foi bem divertido, e mostrou pra nós que tem muita matemática e física envolvida em fazer joguinhos legais.&lt;/p&gt;

&lt;p&gt;Hoje em dia ainda existem outras profissões dentro da TI que são bem legais e demandam bastante matemática, como ciência de dados que é estatística pura (&lt;em&gt;e uma das profissões de TI com os maiores salários&lt;/em&gt;), como inteligência artificial, robótica e o próprio desenvolvimento de jogos. Isso sem contar todas as profissões que envolvem hardware. A matemática permeia toda a base dos trabalhos em TI e definitivamente não é algo que fica na escola e deixa de impactar o nosso dia a dia no trabalho.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lembrete para quem chegou até aqui: matemática não é um pré-requisito, é apenas um bônus. Ainda é possível ser um excelente profissional em diversas áreas sem saber bulhufas de matemática.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>gamedev</category>
      <category>programming</category>
      <category>math</category>
    </item>
    <item>
      <title>React &amp; REST API: How to render a list from a JSON response</title>
      <author>William Sayama</author>
      <pubDate>Fri, 21 May 2021 16:15:46 +0000</pubDate>
      <link>https://dev.to/will_yama/react-rest-api-how-to-render-a-list-from-a-json-response-4964</link>
      <guid>https://dev.to/will_yama/react-rest-api-how-to-render-a-list-from-a-json-response-4964</guid>
      <description>&lt;p&gt;In Part 4 of this series, we'll render the JSON data obtained in our last article in a cleaner way, instead of slapping the stringified REST API JSON response on to the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fA7BW-Q4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hywmoi3xitbsi1kew0vi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fA7BW-Q4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hywmoi3xitbsi1kew0vi.png" alt="An screenshot of how JSON data looks when it's dirty and when it's clean"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#add-queries-to-the-get-request"&gt;
  &lt;/a&gt;
  &lt;u&gt;Add queries to the GET request&lt;/u&gt;
&lt;/h1&gt;

&lt;p&gt;First we'll fiddle around with the parameters we can use with &lt;a href="https://developer.kintone.io/hc/en-us/articles/360019245194"&gt;Kintone's Get Records API&lt;/a&gt; request. Parameters help us specify how we want to retrieve the data - things like what query we want to use, and what fields we want in the response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-field-codes"&gt;
  &lt;/a&gt;
  Update the Field Codes
&lt;/h2&gt;

&lt;p&gt;To help us specify parameters more easily in our code, we'll update our field codes. Field codes are unique identifiers of fields within the Kintone Apps. Notice how our JSON responses included some names like &lt;em&gt;Text_0&lt;/em&gt; and &lt;em&gt;Text_1&lt;/em&gt; - these are the field codes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-AEGOlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctue7ntgxh8s7q9tycgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-AEGOlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctue7ntgxh8s7q9tycgy.png" alt="A screenshot of the JSON response in the console with the field codes of Text_0 and Text_1 highlighted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Field code names are automatically generated for fields when they are first dragged into the form of the Kintone App settings. The field codes can be update through the App's settings. Follow &lt;a href="https://get.kintone.help/k/en/user/app_settings/form/autocalc/fieldcode.html"&gt;the guide in the Help documents&lt;/a&gt; to update the Field codes.&lt;/p&gt;

&lt;p&gt;Now let' set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The "Title" field to have the field code &lt;em&gt;title&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;The "Author" field to have the field code &lt;em&gt;author&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;The "Record number" field to have the field code &lt;em&gt;recordID&lt;/em&gt; (you'll need to drag and drop the Record Number field onto the form to update it's field code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQA6ZVP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8m9t8braqbry671vvlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQA6ZVP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8m9t8braqbry671vvlz.png" alt="A screenshot of the App's form editor with guides on which fields should be updated with what field codes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When done, click on "Save Form", and then "Update App" on the top right to apply the changes. If successful you'll notice that the API response in the console of the React App will be updated with the new field codes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQp4tzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3asrwpy0afv9uqf8vil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQp4tzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3asrwpy0afv9uqf8vil.png" alt="2 screenshots of the JSON response in the console with one screenshot being before the field code change and the other screenshot being after the field code change"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-query-parameters"&gt;
  &lt;/a&gt;
  Create the Query Parameters
&lt;/h2&gt;

&lt;p&gt;Let's update our &lt;em&gt;server.js&lt;/em&gt; code. Currently we're calling the Get Records end-point with one parameter, which is the &lt;em&gt;app&lt;/em&gt; parameter. We'll want to add more parameters, but for readability's sake, let's remove the &lt;code&gt;?app=1&lt;/code&gt; parameter from our current end-point declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEndpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://{subdomain}.kintone.com/k/v1/records.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, define the &lt;code&gt;?app=1&lt;/code&gt; parameter along with some other parameters within the &lt;code&gt;/getData&lt;/code&gt; route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?app=1&amp;amp;query=order by recordID asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;app&lt;/strong&gt; parameter is the same as before, pointing to the App ID of the Kintone App we want to get data from. The &lt;strong&gt;query&lt;/strong&gt; parameter above states to retrieve records from the Kintone App in ascending order of the Record Number value. You can check the &lt;a href="https://developer.kintone.io/hc/en-us/articles/360019245194#options"&gt;Kintone API documents&lt;/a&gt; for more details on queries.&lt;/p&gt;

&lt;p&gt;Let's attach this parameter to the end of the API request endpoint in the fetch request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEndpoint&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;/getData&lt;/code&gt; route should now look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;corsOptions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Cybozu-API-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_TOKEN&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?app=1&amp;amp;query=order by recordID asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEndpoint&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure that you restart the server to apply the latest changes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#clean-the-response"&gt;
  &lt;/a&gt;
  &lt;u&gt;Clean the Response&lt;/u&gt;
&lt;/h1&gt;

&lt;p&gt;Now we'll move on to the client-side code. At the moment, the client-side's &lt;strong&gt;index.js&lt;/strong&gt; is receiving the JSON response from &lt;strong&gt;server.js&lt;/strong&gt;, and rendering the stringified version of it. This doesn't look very pretty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mC3nk_WX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ctrcasu8te093gt6r1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mC3nk_WX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ctrcasu8te093gt6r1x.png" alt="A screenshot of the stringified JSON data on the React App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Due to the updated parameters, the order of the data here has actually changed from the order listed in our previous article. This is hard to tell from our UI though, so let's render this data in a more user friendly way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decide-what-will-be-rendered"&gt;
  &lt;/a&gt;
  Decide what will be rendered
&lt;/h2&gt;

&lt;p&gt;Since we're collecting a list of records from our Kintone App, let's render the response as a list. Note that &lt;a href="https://developer.kintone.io/hc/en-us/articles/360019245194"&gt;Kintone's Get Records API&lt;/a&gt; responds the list of records as an array of objects. We'll follow the &lt;a href="https://reactjs.org/docs/lists-and-keys.html#rendering-multiple-components"&gt;React document's example&lt;/a&gt; on how to handle our array to be rendered as a list in our React App.&lt;/p&gt;

&lt;p&gt;The first thing we'll do is get rid of the &lt;code&gt;stringify&lt;/code&gt; statement, since in the code the response is easier to handle as JSON format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//return JSON.stringify(jsonResponse);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll then loop through Kintone's responded array using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;map function&lt;/a&gt; to create an array of lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfLists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt; written by {record.author.value}&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayOfLists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note here that we are referencing our field values in our records by stating &lt;code&gt;record.title.value&lt;/code&gt; (the value of the Title field) and &lt;code&gt;record.author.value&lt;/code&gt; (the value of the author field).&lt;/p&gt;

&lt;p&gt;The result will be stored in our &lt;code&gt;apiResponse&lt;/code&gt; state variable through the useEffect hook (no change needed to be made here), and then placed in between &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements for the final render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apiResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, this will render our Kintone records as unordered lists.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syZp24Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd2etmzkq5hsd5b8f08n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syZp24Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd2etmzkq5hsd5b8f08n.png" alt="A screenshot of the React App with a clean list of manga titles and authors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hooray! We've done it!&lt;/p&gt;

&lt;p&gt;Wait...have we checked the console...?🤭&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C7oy3QdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ochuygw8ywgqiej9u51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7oy3QdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ochuygw8ywgqiej9u51.png" alt="A screenshot of the React App with a clean list of manga titles and authors and an error in the console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aha...there seems to be a warning about "keys" 🤔&lt;/p&gt;

&lt;p&gt;The react.js documents states &lt;a href="https://reactjs.org/docs/lists-and-keys.html#keys"&gt;the following&lt;/a&gt; about keys:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, we need to assign a unique ID to each list we create. Instead of manually creating these keys though, we'll use the unique IDs stored in our Kintone App. The Record number field in Kintone is an auto-incremented field, unique to each record. In our map function, let's add the &lt;code&gt;key&lt;/code&gt; attribute to our &lt;code&gt;li&lt;/code&gt; element, and assign the value of the Record number field by stating &lt;code&gt;key={record.recordID.value}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//return JSON.stringify(jsonResponse);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfLists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt; written by {record.author.value}&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayOfLists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run our code again, and the issue should be solved!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mL-QZl81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qj4lm74w34y3kct44px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mL-QZl81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qj4lm74w34y3kct44px.png" alt="A screenshot of the React App with a clean list of manga titles and authors and no errors in the console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Good job! ٩( 'ω' )و&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-complete-code"&gt;
  &lt;/a&gt;
  &lt;u&gt;The complete code&lt;/u&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;server.js&lt;/code&gt; code should end up looking like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;corsOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEndpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://{subdomain}.kintone.com/k/v1/records.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;corsOptions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Cybozu-API-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_TOKEN&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?app=1&amp;amp;query=order by recordID asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEndpoint&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;client.js&lt;/code&gt; code should end up looking like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;restEndpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/getData&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callRestApi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restEndpoint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//return JSON.stringify(jsonResponse);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfLists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt; written by {record.author.value}&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayOfLists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RenderResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiResponse&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*** now loading ***&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;callRestApi&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apiResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RenderResult&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me know in the comments if somethings not working well!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  &lt;u&gt;Next steps&lt;/u&gt;
&lt;/h1&gt;

&lt;p&gt;In the next part of the series, we'll add in some input fields and buttons onto our React App, which will add new records into our Kintone app.&lt;/p&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   ＿人人人人人人人人人＿
                   ＞ POST REQUESTS! ＜
                   ￣Y^Y^Y^Y^Y^Y^Y^Y￣
                   (\__/) 
                   (•ㅅ•) 
                   /つ つ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Let's start the journey to learn together Full-Stack Development</title>
      <author>scotty252</author>
      <pubDate>Fri, 21 May 2021 15:59:06 +0000</pubDate>
      <link>https://dev.to/scotty252/let-s-start-the-journey-to-learn-together-full-stack-development-40a0</link>
      <guid>https://dev.to/scotty252/let-s-start-the-journey-to-learn-together-full-stack-development-40a0</guid>
      <description>&lt;p&gt;Hello, My name is James Scott and I am a students of CS, as most students would know just got into college for Bachelors.&lt;/p&gt;

&lt;p&gt;I will be utilizing this summer to learn Web development basic languages like HTML, CSS, JavaScript and more...&lt;/p&gt;

&lt;p&gt;🙏 🌍, I decided to create this space with the aim of documenting my programming road, organizing materials and inspirations that I have saved in millions of folders 🗂️ and notes 📚.&lt;/p&gt;

&lt;p&gt;You want to join me?👀&lt;/p&gt;

&lt;p&gt;I am working hard towards becoming a Full Stack Web Developer, learning programming is a bit tough for me because I have to reconcile it with my daily Online Classes and work.&lt;/p&gt;

&lt;p&gt;I will be happy to make contact with Dev community (dev.io)! 👩‍💻 🏦 Ohh, I would like to add English is not my native language, please understand. This is another challenge for me.&lt;/p&gt;

&lt;p&gt;Today onwards I will be sharing my Coding Journey with you guys. Be the part of my this journey.&lt;/p&gt;

&lt;p&gt;If you like to Be the part of my this journey and follow me: Instagram : &lt;a href="https://instagram.com/devscott20"&gt;https://instagram.com/devscott20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devscott20: GET INSPIRED!&lt;/p&gt;

&lt;p&gt;Happy Coding! ✌️&lt;/p&gt;

&lt;p&gt;Learning Resources :&lt;br&gt;
&lt;a href="https://freecodecamp.org"&gt;https://freecodecamp.org&lt;/a&gt; Responsive Web Design Certification &lt;a href="https://freecodecamp.org/learn"&gt;https://freecodecamp.org/learn&lt;/a&gt;&lt;br&gt;
“Put Down the Javascript: Learn HTML &amp;amp; CSS first“ &lt;a href="https://freecodecamp.org/news/put-down-the-javascri"&gt;https://freecodecamp.org/news/put-down-the-javascri&lt;/a&gt;..&lt;br&gt;
MDN Intro to Javascript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaSc"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaSc&lt;/a&gt;..&lt;br&gt;
Just Javascript email course &lt;a href="https://justjavascript.com"&gt;https://justjavascript.com&lt;/a&gt;&lt;br&gt;
JSRobot Learning Game &lt;a href="https://lab.reaal.me/jsrobot"&gt;https://lab.reaal.me/jsrobot&lt;/a&gt;&lt;br&gt;
reactjs.org Intro to React &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;https://reactjs.org/tutorial/tutorial.html&lt;/a&gt;&lt;br&gt;
gatsbyjs.org Tutorials &lt;a href="https://gatsbyjs.org/tutorial"&gt;https://gatsbyjs.org/tutorial&lt;/a&gt;&lt;br&gt;
So you can check out this blog regularly and let's do this journey together.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;br&gt;
Which Course will you Choose?&lt;/p&gt;

&lt;p&gt;Please share your thoughts in comments!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
