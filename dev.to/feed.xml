<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to install Tailwind CSS with React and Flowbite</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Fri, 07 Jan 2022 09:51:46 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-install-tailwind-css-with-react-and-flowbite-3e84</link>
      <guid>https://dev.to/themesberg/how-to-install-tailwind-css-with-react-and-flowbite-3e84</guid>
      <description>&lt;p&gt;React is one of the most popular front-end libraries in the world used by websites such as Facebook, Instagram, Yahoo Mail, Dropbox, and more. &lt;/p&gt;

&lt;p&gt;Coupled with Tailwind CSS and the components from Flowbite you will be able to develop applications faster than ever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-tailwind-css-with-react"&gt;
  &lt;/a&gt;
  Install Tailwind CSS with React
&lt;/h2&gt;

&lt;p&gt;Follow the next steps to &lt;a href="https://flowbite.com/docs/getting-started/react/"&gt;install Tailwind CSS and Flowbite with Create React App&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the following command in your terminal to create a React application, if you don't already have one:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-project
&lt;span class="nb"&gt;cd &lt;/span&gt;my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install Tailwind CSS by running the following two commands:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss postcss autoprefixer
npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Configure the template paths inside the &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/**/*.{js,jsx,ts,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set up the Tailwind directives inside the &lt;code&gt;./src/index.css&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install Flowbite by running the following command in your terminal:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @themesberg/flowbite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Require Flowbite as a plugin inside your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@themesberg/flowbite/plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Import the Flowbite JavaScript file inside your main &lt;code&gt;index.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;import &lt;span class="s1"&gt;'@themesberg/flowbite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can start the server by running &lt;code&gt;npm run start&lt;/code&gt; or build the project using &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-components-in-react"&gt;
  &lt;/a&gt;
  Flowbite components in React
&lt;/h2&gt;

&lt;p&gt;Most of the components from Flowbite will work seamlessly as long as you have Tailwind CSS included in your project. The interactive elements such as dropdowns, tooltips, and modals will work based on the data attributes that you can code directly in your view files.&lt;/p&gt;

&lt;p&gt;You can start using the components from Flowbite inside your React project by only changing the &lt;code&gt;class&lt;/code&gt; attributes to &lt;code&gt;className&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's an example of a modal component that you can add inside your &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden overflow-y-auto overflow-x-hidden fixed right-0 left-0 top-4 z-50 justify-center items-center h-modal md:h-full md:inset-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative px-4 w-full max-w-2xl h-full md:h-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative bg-white rounded-lg shadow dark:bg-gray-700&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex justify-between items-start p-5 rounded-t border-b dark:border-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xl font-semibold text-gray-900 lg:text-2xl dark:text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Terms&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-5 h-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 20 20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;evenodd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;evenodd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/path&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-6 space-y-6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base leading-relaxed text-gray-500 dark:text-gray-400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;With&lt;/span&gt; &lt;span class="nx"&gt;less&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;European&lt;/span&gt; &lt;span class="nx"&gt;Union&lt;/span&gt; &lt;span class="nx"&gt;enacts&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="nx"&gt;privacy&lt;/span&gt; &lt;span class="nx"&gt;laws&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;its&lt;/span&gt; &lt;span class="nx"&gt;citizens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;companies&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;updating&lt;/span&gt; &lt;span class="nx"&gt;their&lt;/span&gt; &lt;span class="nx"&gt;terms&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="nx"&gt;agreements&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;comply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base leading-relaxed text-gray-500 dark:text-gray-400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;European&lt;/span&gt; &lt;span class="nx"&gt;Union&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;General&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="nx"&gt;Protection&lt;/span&gt; &lt;span class="nx"&gt;Regulation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt; &lt;span class="nx"&gt;goes&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;May&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;meant&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;ensure&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;common&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;rights&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;European&lt;/span&gt; &lt;span class="nx"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;requires&lt;/span&gt; &lt;span class="nx"&gt;organizations&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;soon&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;risk&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;breaches&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;personally&lt;/span&gt; &lt;span class="nx"&gt;affect&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex items-center p-6 space-x-2 rounded-b border-t border-gray-200 dark:border-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decline&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are currently working on a standalone React project where you will be able to include these interactive elements directly as React components and programatically work with them instead of using just the data attributes.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Quick Tips - Laravel</title>
      <author>Morcos Gad</author>
      <pubDate>Fri, 07 Jan 2022 09:24:58 +0000</pubDate>
      <link>https://dev.to/morcosgad/quick-tips-laravel-3n1e</link>
      <guid>https://dev.to/morcosgad/quick-tips-laravel-3n1e</guid>
      <description>&lt;p&gt;Let's get started quickly and find some tips so I can share their fun with you.&lt;/p&gt;

&lt;p&gt;You may assign multiple middleware to the route by passing an array of middleware names to the middleware method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'first'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'second'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Version Laravel 8 uses more requests help you with your project&lt;br&gt;
&lt;a href="https://laravel.com/docs/8.x/requests"&gt;https://laravel.com/docs/8.x/requests&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin/*'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;routeIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin.*'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$urlWithQueryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fullUrl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fullUrlWithQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'phone'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nv"&gt;$method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;isMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When assigning middleware, you may also pass the fully qualified class name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Middleware\EnsureTokenIsValid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;EnsureTokenIsValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When assigning middleware to a group of routes, you may occasionally need to prevent the middleware from being applied to an individual route within the group. You may accomplish this using the &lt;code&gt;withoutMiddleware&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Middleware\EnsureTokenIsValid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nc"&gt;EnsureTokenIsValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withoutMiddleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nc"&gt;EnsureTokenIsValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The findOrFail method also accepts a list of ids&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Retrives the user...&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Throws a 404 because the user doesn't exist...&lt;/span&gt;
&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Retrives all 3 users...&lt;/span&gt;
&lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Throws because it is unable to find *all* of the users&lt;/span&gt;
&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use value() method to get single column's value from the first result of a query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Instead of&lt;/span&gt;
&lt;span class="nc"&gt;Integration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You can use&lt;/span&gt;
&lt;span class="nc"&gt;Integration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// or this to throw an exception if no records found&lt;/span&gt;
&lt;span class="nc"&gt;Integration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;valueOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Laravel 8.69 released with "Str::mask()" method which masks a portion of string with a repeated character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$userEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// username@domain.com&lt;/span&gt;

&lt;span class="nv"&gt;$maskedEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// user***************&lt;/span&gt;

&lt;span class="c1"&gt;// If needed, you provide a negative number as the third argument to the mask method&lt;/span&gt;
&lt;span class="c1"&gt;// which will instruct the method to begin masking at the given distance from the end of the string&lt;/span&gt;

&lt;span class="nv"&gt;$maskedEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// use******domain.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can send e-mails to a custom log file&lt;br&gt;
You can set your environment variables like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="no"&gt;MAIL_MAILER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="no"&gt;MAIL_LOG_CHANNEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also configure your log channel&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="s1"&gt;'mail'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'driver'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'path'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;storage_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logs/mails.log'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;'level'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'LOG_LEVEL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'debug'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoyed the code&lt;br&gt;
Source :- &lt;a href="https://www.youtube.com/watch?v=bnXauabSFYI"&gt;https://www.youtube.com/watch?v=bnXauabSFYI&lt;/a&gt;&lt;br&gt;
Source :- &lt;a href="https://www.youtube.com/watch?v=YzBGmdnGtbY&amp;amp;t=83s"&gt;https://www.youtube.com/watch?v=YzBGmdnGtbY&amp;amp;t=83s&lt;/a&gt;&lt;br&gt;
Source :- &lt;a href="https://github.com/LaravelDaily/laravel-tips"&gt;https://github.com/LaravelDaily/laravel-tips&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Run Spark locally with Docker</title>
      <author>Barbara</author>
      <pubDate>Fri, 07 Jan 2022 09:22:47 +0000</pubDate>
      <link>https://dev.to/barbara/run-spark-locally-with-docker-4com</link>
      <guid>https://dev.to/barbara/run-spark-locally-with-docker-4com</guid>
      <description>&lt;p&gt;When we work with Spark we usually want to first prototype to see if everything works as expected, before we start up big machines. &lt;br&gt;
I spent an afternoon googling and starting and stopping the docker container to finally configure some lines of code.&lt;br&gt;
So I want to share my basic local setup here, so maybe it will help someone to save some time.&lt;/p&gt;

&lt;p&gt;When looking for a docker image with spark and jupyter we find the &lt;a href="https://hub.docker.com/r/jupyter/pyspark-notebook"&gt;pyspark-notebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my case I need to access AWS, so I need some additional libaries for the docker image.&lt;br&gt;
To add them, I created a new &lt;code&gt;Dockerfile&lt;/code&gt; based on the pyspark-notebook.&lt;br&gt;
The additional libraries needed are &lt;code&gt;boto3&lt;/code&gt; for AWS and &lt;code&gt;python-dotenv&lt;/code&gt; to access environment variables.&lt;br&gt;
I decided to install boto3 with apt-get as this will be installed on the operating system level. Make sure to add &lt;code&gt;-y&lt;/code&gt; if the operating system is asking something during the install process, we will answer with &lt;code&gt;yes&lt;/code&gt;. &lt;br&gt;
The dotenv is added via a requirements.txt so it will installed via pip, the python package manager.&lt;/p&gt;

&lt;p&gt;Normally for the notebooks you need to have a token, but when we develop locally, we want to access the jupyter-notebook quickly and stay on the same site, without having to lookout for the new token everytime we change something.&lt;br&gt;
So we need an custom configuration for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "NotebookApp": {
        "allow_root": true,
        "token": ""
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Dockerfile we copy everything we need into to &lt;code&gt;/home/jovyan/&lt;/code&gt; directory. After some more googling I found out that this user &lt;em&gt;jovyan&lt;/em&gt; stands for &lt;em&gt;jupyter like environment&lt;/em&gt;. Just in case you where also wondering.&lt;/p&gt;

&lt;p&gt;The final Dockerfile looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM jupyter/pyspark-notebook
USER root

# add needed packages
RUN apt-get update &amp;amp;&amp;amp; apt-get install python3-boto3 -y

# Install Python requirements
COPY requirements.txt /home/jovyan/
RUN pip install -r /home/jovyan/requirements.txt

COPY jupyter_lab_config.json /home/jovyan/

# Run the notebook
CMD ["/opt/conda/bin/jupyter", "lab", "--config", "/jupyter_lab_config.json"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;docker-compose.yaml&lt;/code&gt; we&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;need to map the ports, &lt;/li&gt;
&lt;li&gt;map the volumes to save the notebook locally, otherwise everything would be lost, once we shut down the container and point to the env file. &lt;/li&gt;
&lt;li&gt;tell Docker where the &lt;code&gt;.env&lt;/code&gt; file is located&lt;/li&gt;
&lt;li&gt;tell Docker to build the Dockerfile in the same folder, instead of using an image.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final &lt;code&gt;docker-compose.yaml&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "3.7"

services:
  # jupyterlab with pyspark
  pyspark:
    #image: jupyter/pyspark-notebook
    build: .
    env_file: 
      - .env
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    ports:
      - "8888:8888"
    volumes:
      - ./data:/home/jovyan/work

# docker run --rm -p 10000:8888 -e JUPYTER_ENABLE_LAB=yes -v "$PWD":/home/jovyan/work jupyter/pyspark-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the container use &lt;code&gt;docker-compose up&lt;/code&gt;, if you changed something in the config use &lt;code&gt;docker-compose up --force-recreate --build&lt;/code&gt; to make sure the changes are build.&lt;/p&gt;

&lt;p&gt;Have fun.&lt;/p&gt;

&lt;p&gt;You can find the code also &lt;a href="https://github.com/BarbaraJoebstl/data-engineering-nd/tree/master/data-lakes/project-data-lakes/compose"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>spark</category>
      <category>jupyter</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Real-time visualization with React and D3.js</title>
      <author>Katarina Supe</author>
      <pubDate>Fri, 07 Jan 2022 08:10:54 +0000</pubDate>
      <link>https://dev.to/katelatte/real-time-visualization-with-react-and-d3js-48a4</link>
      <guid>https://dev.to/katelatte/real-time-visualization-with-react-and-d3js-48a4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this blog post, you will learn how to create a &lt;strong&gt;React&lt;/strong&gt; app and &lt;strong&gt;WebSocket&lt;/strong&gt; that connects to the &lt;strong&gt;Flask&lt;/strong&gt; server, and visualize streaming data in real-time using &lt;strong&gt;D3.js&lt;/strong&gt;. I decided to write this blog post as a part of my learning path, and I hope to help anyone struggling with the same problems while trying to implement something similar. I decided to tackle on the frontend implementation by visualizing &lt;strong&gt;Twitter&lt;/strong&gt; users who retweeted something with the hashtag &lt;em&gt;#christmas&lt;/em&gt;. Each community of users is presented with a different color which allowed me to notice the important communities in the Twitter network. &lt;/p&gt;

&lt;p&gt;The frontend service is a part of a web application that you can find in the GitHub &lt;a href="https://github.com/memgraph/twitter-network-analysis/tree/add-backend-server"&gt;repository&lt;/a&gt;. Besides that, the repository also holds a visualization that discovers &lt;a href="https://memgraph.com/blog/twitter-analysis-with-dynamic-pagerank"&gt;the most Christmassy person on Twitter&lt;/a&gt; using the dynamic PageRank algorithm. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-and-app-architecture"&gt;
  &lt;/a&gt;
  Prerequisites and app architecture
&lt;/h2&gt;

&lt;p&gt;If you are using Windows, you need to install &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux&lt;/a&gt; (WSL) and then &lt;a href="https://docs.docker.com/desktop/windows/install/"&gt;Docker Desktop&lt;/a&gt;. On the other hand, if you are a Linux user, just install Docker and &lt;a href="https://docs.docker.com/compose/install/"&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The app is dockerized and it consists of five services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;stream&lt;/code&gt;&lt;/strong&gt;: A  Python script collects new retweets with the hashtag &lt;em&gt;#christmas&lt;/em&gt; and sends them to a Kafka cluster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;kafka&lt;/code&gt;&lt;/strong&gt;:  A Kafka cluster consisting of one topic named &lt;code&gt;retweets&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;memgraph-mage&lt;/code&gt;&lt;/strong&gt;:  The graph analytics platform where we store the incoming Twitter data from Kafka and perform &lt;a href="https://memgraph.com/docs/mage/algorithms/dynamic-graph-analytics/pagerank-online-algorithm"&gt;&lt;strong&gt;dynamic PageRank&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://memgraph.com/docs/mage/algorithms/dynamic-graph-analytics/community-detection-online-algorithm"&gt;&lt;strong&gt;dynamic community detection&lt;/strong&gt;&lt;/a&gt; on all Twitter users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;backend-app&lt;/code&gt;&lt;/strong&gt;: A &lt;strong&gt;Flask server&lt;/strong&gt; that sends all the data we query from &lt;code&gt;memgraph-mage&lt;/code&gt; to the &lt;code&gt;frontend-app&lt;/code&gt;. It also consumes the Kafka stream and sends it to the &lt;code&gt;frontend-app&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;frontend-app&lt;/code&gt;&lt;/strong&gt;:  A &lt;strong&gt;React app&lt;/strong&gt; that visualizes the &lt;strong&gt;Twitter&lt;/strong&gt; network using the &lt;strong&gt;D3.js&lt;/strong&gt; library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--steqpEqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-twitter-app-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--steqpEqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-twitter-app-architecture.png" alt="real-time-visualization-with-react-and-d3-js" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;You can see the whole project structure in the GitHub &lt;a href="https://github.com/memgraph/twitter-network-analysis/tree/add-backend-server"&gt;&lt;strong&gt;repository&lt;/strong&gt;&lt;/a&gt;. The blog post focuses on the frontend service and explains how the visualization was created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|   docker-compose.yml
|   
+---backend
|       Dockerfile
|   +---server
|   +---tests
| 
+---frontend
|   |   .dockerignore
|   |   Dockerfile
|   |   package.json
|   |   package-lock.json
|   +---node_modules
|   +---public
|   +---src
|
+---memgraph
|   |   Dockerfile
|   |   requirements.txt
|   +---procedures
|   +---transformations
|
+---stream
|   |   Dockerfile
|   |   kafka_utils.py
|   |   produce.py
|   |   requirements.txt
|   +---data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;frontend&lt;/code&gt; folder was created using the &lt;a href="https://www.npmjs.com/package/create-react-app"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt; &lt;code&gt;npm&lt;/code&gt; package. If you are starting from scratch and want to &lt;strong&gt;create a React app&lt;/strong&gt; follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Place yourself in the root folder of your project.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install -g create-react-app&lt;/code&gt; (if you don't want to install the latest version, you can specify the version of the &lt;code&gt;create-react-app&lt;/code&gt;, for example, &lt;code&gt;create-react-app@5.0.0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Next, run &lt;code&gt;npm init react-app frontend --use-npm&lt;/code&gt;, which will initialize the &lt;code&gt;react-app&lt;/code&gt; package in the &lt;code&gt;frontend&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;In the end, place yourself in the &lt;code&gt;frontend&lt;/code&gt; folder by running &lt;code&gt;cd frontend&lt;/code&gt; and start the app with &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even a simpler way of creating a React app is by using &lt;code&gt;npx&lt;/code&gt; - a package runner tool that comes with &lt;code&gt;npm 5.2+&lt;/code&gt;. Then you just have to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app frontend
cd frontend
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#socketio-library"&gt;
  &lt;/a&gt;
  Socket.IO library
&lt;/h2&gt;

&lt;p&gt;I have used &lt;code&gt;socket.io-client@2.3.1&lt;/code&gt; since I had issues with the latest version. I am going to explain the process on the &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js"&gt;&lt;code&gt;CommunityDetection&lt;/code&gt;&lt;/a&gt; component, since it's very similar to the &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/PageRank.js"&gt;&lt;code&gt;PageRank&lt;/code&gt;&lt;/a&gt; component. If you are running the frontend application locally, and not using the provided dockerized application, make sure to install the library by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install socket.io-client@2.3.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don't forget that &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; is a prerequisite for using &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, we are going to import the socket we're using on the client side. &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/backend/server/app.py"&gt;Backend&lt;/a&gt; is implemented with Flask.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import io from "socket.io-client"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we are initializing the socket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var socket = io("http://localhost:5000/", { 
                transports: ["websocket", "polling"] 
            })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We set the socket to listen to the server running at &lt;code&gt;http://localhost:5000/&lt;/code&gt;. Then we established the connection to the server with &lt;code&gt;websocket&lt;/code&gt; first. If &lt;code&gt;websocket&lt;/code&gt; is not available, connection to the server will be established with &lt;code&gt;HTTP&lt;/code&gt; &lt;code&gt;long-polling&lt;/code&gt; - successive &lt;code&gt;HTTP&lt;/code&gt; requests (&lt;code&gt;POST&lt;/code&gt; for writing, &lt;code&gt;GET&lt;/code&gt; for reading). Next, we need to handle different events with our socket are handled. When the connection is established, the socket is emitting the &lt;code&gt;consumer&lt;/code&gt; signal. This signal is also emitted on the server side, whenever a new message is sent. This configuration allows the socket to receive all messages related to &lt;code&gt;consumer&lt;/code&gt; signal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;socket.on("connect", () =&amp;gt; {
    socket.emit('consumer')
    console.log("Connected to socket ", socket.id)
});

socket.on("connect_error", (err) =&amp;gt; {
    console.log(err)
    // try reconnecting
    socket.connect()
});

socket.on("disconnect", () =&amp;gt; {
    console.log("Disconnected from socket.")
});

socket.on("consumer", (msg) =&amp;gt; {
    console.log('Received a message from the WebSocket service: ', msg.data);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-reactcomponent-endraw-lifecycle"&gt;
  &lt;/a&gt;
  &lt;code&gt;React.Component&lt;/code&gt; lifecycle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vv8wWR4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-react-component-lifecycle" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vv8wWR4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-react-component-lifecycle" alt="memgraph-tutorial-react-component-lifecycle" width="880" height="316"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;Image by &lt;a href="https://github.com/wojtekmaj/react-lifecycle-methods-diagram"&gt;Wojciech Maj&lt;/a&gt; from &lt;a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"&gt;React Lifecycle Methods diagram&lt;/a&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;You may ask yourself where to place all this &lt;code&gt;socket.io&lt;/code&gt; code within a React component. First, I initialized the socket in the component's constructor. After that I have placed the socket events in &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L65"&gt;&lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method&lt;/a&gt;. This part of the &lt;code&gt;React.Component&lt;/code&gt; lifecyle is invoked once, immediately after a component is mounted. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. This method is also a good place to set up any subscriptions. That's why I have decided to place all socket events there. On each &lt;code&gt;consumer&lt;/code&gt; emit, the state of the component will be updated and that will trigger an extra rendering which will happen before the browser updates the screen, so the user won’t see the intermediate state. Before I set up the socket, at the beginning of the &lt;code&gt;componentDidMount()&lt;/code&gt;, I have made &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L37"&gt;a simple &lt;code&gt;HTTP&lt;/code&gt; request&lt;/a&gt; that will trigger the backend to start producing the needed data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firstRequest() {
    fetch("http://localhost:5000/api/graph")
        .then((res) =&amp;gt; res.json())
        .then((result) =&amp;gt; console.log(result))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, I initialized everything that was necessary for drawing using &lt;code&gt;D3.js&lt;/code&gt; in the &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L176"&gt;&lt;code&gt;initializeGraph()&lt;/code&gt; method&lt;/a&gt;. By setting a new state of nodes and links with &lt;code&gt;setState()&lt;/code&gt; on each &lt;code&gt;consumer&lt;/code&gt; emit, &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle method will be called. In that method we are updating the graph by drawing new incoming nodes and links. This lifecycle method is not called for the initial render, and that's the reason why we initialized everything in the &lt;code&gt;initializeGraph()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In the end, when the component unmounts (for example, when we click on the button to switch to the PageRank), the &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L121"&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method&lt;/a&gt; is called and the client disconnects from the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;componentWillUnmount() {
    this.socket.emit('disconnect');
    this.socket.disconnect();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you want to learn more about &lt;code&gt;React.Component&lt;/code&gt; lifecycle methods, check out the React official &lt;a href="https://reactjs.org/docs/react-component.html#the-component-lifecycle"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#visualizing-with-d3js"&gt;
  &lt;/a&gt;
  Visualizing with D3.js
&lt;/h2&gt;

&lt;p&gt;We want to draw the graph on &lt;code&gt;svg&lt;/code&gt; using &lt;code&gt;D3.js&lt;/code&gt; within the &lt;strong&gt;class component&lt;/strong&gt;. We are going to do that by creating a reference in the component constructor which will be attached to the &lt;code&gt;svg&lt;/code&gt; via the &lt;code&gt;ref&lt;/code&gt; attribute. In &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L18"&gt;constructor&lt;/a&gt; we have to use &lt;code&gt;createRef()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor(props) {
    super(props);
    this.myReference = React.createRef();
    this.state = {
        nodes: [],
        links: []
    }
    this.socket = io("http://localhost:5000/", { transports: ["websocket", "polling"] })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in the component's &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L334"&gt;&lt;code&gt;render()&lt;/code&gt; method&lt;/a&gt; we are adding the &lt;code&gt;ref&lt;/code&gt; attribute with value &lt;code&gt;this.myReference&lt;/code&gt; to the &lt;code&gt;svg&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
    return (&amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Community Detection&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;Number of users that retweeted so far: {this.state.nodes.length}&amp;lt;/p&amp;gt;
        &amp;lt;svg ref={this.myReference}
            style={{
                height: 500,    //width: "100%"
                width: 900,
                marginRight: "0px",
                marginLeft: "0px",
                background: "white"
            }}&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, by &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L177"&gt;selecting the current attribute&lt;/a&gt; of the reference, it's easy to get the &lt;code&gt;svg&lt;/code&gt; on which we are going to draw our graph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var svg = d3.select(this.myReference.current);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you want to know how to use &lt;code&gt;D3.js&lt;/code&gt; within &lt;strong&gt;function component&lt;/strong&gt;, check out one of my previous blog posts - &lt;a href="https://dev.to/katelatte/twitch-streaming-graph-analysis-part-2-3d3d"&gt;Twitch Streaming Graph Analysis - Part 2&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/CommunityDetection.js#L252"&gt;&lt;code&gt;updateGraph()&lt;/code&gt; method&lt;/a&gt; we have to draw the nodes and relationships using &lt;code&gt;D3.js&lt;/code&gt;, where nodes will be colored depending on the community they belong to. We are receiving the community information through the &lt;code&gt;cluster&lt;/code&gt; property of each node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Remove old nodes
node.exit().remove();
// Update existing nodes
node = node.data(nodes, (d) =&amp;gt; d.id);
node = node
    .enter()
    .append('circle')
    .attr("r", function (d) {
        return 7;
    })
    .attr('fill', function (d) {
        if (!clusterColors.hasOwnProperty(d.cluster)) {
            clusterColors[d.cluster] = "#" + Math.floor(Math.random() * 16777215).toString(16)
        }
        return clusterColors[d.cluster]
    })
    .on("mouseover", function (d) {
        tooltip.text(d.srcElement["__data__"]["username"])
        tooltip.style("visibility", "visible")
    })
    .on("mousemove", function (event, d) { 
        return tooltip.style("top", (event.y - 10) + "px").style("left", (event.x + 10) + "px"); })
    .on("mouseout", function (event, d) { return tooltip.style("visibility", "hidden"); })
    .call(this.drag())
    .merge(node);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we are removing the old nodes and setting the &lt;code&gt;node&lt;/code&gt; value to the new nodes data. Next, we want each node to be a circle with radius &lt;em&gt;7&lt;/em&gt; (that's just a random value which seemed quite okay to me). After that, we want each node to be colored depending on the cluster it belongs to. We have previously created a map of colors called &lt;code&gt;clusterColors&lt;/code&gt;. When new cluster appears, a new key value pair is created in the map, where key is the cluster number and value is a randomly generated color. If the cluster of the node already exists, then the color of the node will be the value of that cluster key in the &lt;code&gt;clusterColors&lt;/code&gt; map. Then if we want to see usernames on hover, we need &lt;code&gt;mouseover&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt; and &lt;code&gt;mouseout&lt;/code&gt; events. In the next line, we are calling the &lt;code&gt;drag()&lt;/code&gt; method which allows us to drag the nodes. At the end, new nodes are being merged with the old ones with the &lt;code&gt;merge()&lt;/code&gt; method. We will add the links between the nodes in a similar manner. All that's left to do is to create the simulation on updated nodes and links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try {
    simulation
        .nodes(nodes)
        .force('link', d3.forceLink(links).id(function (n) { return n.id; }))
        .force(
            'collide',
            d3
                .forceCollide()
                .radius(function (d) {
                    return 20;
                })
        )
        .force('charge', d3.forceManyBody())
        .force('center', d3.forceCenter(width / 2, height / 2));
} catch (err) {
    console.log('err', err);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are creating the force between the nodes and links, where each link has an unique id which we created by adding the attribute id &lt;code&gt;.attr('id', (d) =&amp;gt; d.source.id + '-' + d.target.id)&lt;/code&gt; to each link. That id is created from the id's of the nodes the certain link is connecting. &lt;strong&gt;Collide&lt;/strong&gt; force is there so that the nodes are not overlapping, considering the size of their radius. Here we have set the radius to size &lt;em&gt;20&lt;/em&gt;, which is larger than &lt;em&gt;7&lt;/em&gt; - the radius of the nodes. &lt;strong&gt;Charge&lt;/strong&gt; force is causing the nodes in the graph to repel each other, that is, it prevents the nodes from overlapping each other in the visualization. In the end, we have a &lt;strong&gt;center&lt;/strong&gt; force, which is forcing the nodes and links to appear at the middle of the &lt;code&gt;svg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And how this actually looks? Check out the &lt;code&gt;GIF&lt;/code&gt; below for the preview, and if you want to start the app all by yourself, follow the instructions at the &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/README.md"&gt;README&lt;/a&gt; in the repository.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtJimk4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-community-detection-stream.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtJimk4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-community-detection-stream.gif" alt="memgraph-tutorial-community-detection-stream" width="719" height="766"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;PageRank&lt;/strong&gt; visualization &lt;a href="https://github.com/memgraph/twitter-network-analysis/blob/add-backend-server/frontend/src/components/PageRank.js"&gt;code&lt;/a&gt; is similar, the notable difference is in the radius of each node and the color of the nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; node = node
        .enter()
        .append('circle')
        .attr("r", function (d) {
            return d.rank * 1000;
        })
        .attr('fill', 'url(#gradient)')
        .on("mouseover", function (d) {
            tooltip.text(d.srcElement["__data__"]["username"])
            tooltip.style("visibility", "visible")
        })
        .on("mousemove", function (event, d) { return tooltip.style("top", (event.y - 15) + "px").style("left", (event.x + 15) + "px"); })
        .on("mouseout", function (event, d) { return tooltip.style("visibility", "hidden"); })
        .call(this.drag())
        .merge(node);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that the attribute &lt;code&gt;r&lt;/code&gt; is proportional to rank (calculated PageRank of each node). Also, the &lt;code&gt;fill&lt;/code&gt; attribute is determined by the &lt;code&gt;gradient&lt;/code&gt; created in the &lt;code&gt;defineGradient()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b73hrbRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-pagerank-stream.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b73hrbRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://public-assets.memgraph.com/real-time-visualization-with-react-and-d3-js/memgraph-tutorial-pagerank-stream.gif" alt="memgraph-tutorial-pagerank-stream" width="719" height="766"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is still a lot left to learn regarding the &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;D3.js&lt;/code&gt; and &lt;code&gt;WebSocket&lt;/code&gt;, but creating this demo application gave me a pretty good insight into the &lt;strong&gt;real-time visualization&lt;/strong&gt;. It was fun playing with it, and I'm looking forward to learning more in the future. Also, I would like to emphasize that &lt;a href="https://github.com/memgraph/reddit-network-explorer"&gt;Reddit network explorer&lt;/a&gt; application, developed by my colleagues Ivan, David and Antonio, helped me a lot. There, you can find real-time visualization with frontend in &lt;strong&gt;Angular&lt;/strong&gt;. For any feedback or questions ping me or Memgraph team at our &lt;a href="https://discord.gg/memgraph"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt; server.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>memgraph</category>
      <category>d3js</category>
    </item>
    <item>
      <title>Introducting myself and my blogging website Learn it!</title>
      <author>Chandra Kiran G</author>
      <pubDate>Fri, 07 Jan 2022 07:54:20 +0000</pubDate>
      <link>https://dev.to/kiran4444/introducting-myself-and-my-blogging-website-learn-it-3ajo</link>
      <guid>https://dev.to/kiran4444/introducting-myself-and-my-blogging-website-learn-it-3ajo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-this-about"&gt;
  &lt;/a&gt;
  What's this about?
&lt;/h2&gt;

&lt;p&gt;Hey everyone! I'm very delighted to inform you that I have started a personal blog where I'll write about various &lt;strong&gt;Machine Learning&lt;/strong&gt;, &lt;strong&gt;Deep Learning&lt;/strong&gt; techniques, tutorials, resources etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-about-myself"&gt;
  &lt;/a&gt;
  A bit about myself...
&lt;/h2&gt;

&lt;p&gt;I'm a junior (Computer Science Engineering) at Indian Institute of Information Sricity, Andhra Pradesh, India. Machine Learning sparked interest in me during my sophomore year. Since then, this has been a roller coaster ride for me! I was very inconsistent with my learning, procrastinated a lot. But gradually I realised and corrected my mistake. &lt;/p&gt;

&lt;p&gt;Learning just the algorithms never felt home to me. I'm desperate to learn the solid mathematics behind each classical ML algorithm (Although I'm not very at mathematics). But the basic mathematics made most of the sense to grasp the crux of any ML algorithm. Unfortunately, most of the resources were kind of abstract (They're either very beginner level or advanced level). This is why I wanted to share my knowledge through blogging, so I started this blog.&lt;/p&gt;

&lt;p&gt;I hope this'll help beginners like me in their ML journey and make their learning process enjoyable!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chandrakiran.tech/"&gt;Website Link 🔗&lt;/a&gt;&lt;br&gt;
&lt;a href="https://feedburner.google.com/fb/a/mailverify?uri=chandrakiran/VDNx"&gt;RSS Feed Subscription 🗒&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.getrevue.co/profile/learn-it-chandrakiran"&gt;Weekly Newsletter 📰&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do follow me on twitter for tweets that might help you: &lt;a href="https://twitter.com/CHANDRAKIRANG5"&gt;https://twitter.com/CHANDRAKIRANG5&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>tutorial</category>
      <category>discuss</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Inspired by the future: Vision UI Dashboard React PRO</title>
      <author>Fredy Andrei</author>
      <pubDate>Fri, 07 Jan 2022 07:48:34 +0000</pubDate>
      <link>https://dev.to/fredy/inspired-by-the-future-vision-ui-dashboard-react-pro-5ei0</link>
      <guid>https://dev.to/fredy/inspired-by-the-future-vision-ui-dashboard-react-pro-5ei0</guid>
      <description>&lt;p&gt;Inspired by the future: Vision UI Dashboard React PRO&lt;/p&gt;

&lt;p&gt;A Premium MUI Dashboard that comes with 300+ prebuilt innovative design blocks. Join the future with Vision UI.&lt;/p&gt;

&lt;p&gt;Designed for those who like modern UI elements and beautiful websites. Made of hundred of elements, designed blocks and fully coded pages, Vision UI Dashboard PRO is ready to help you create stunning websites and webapps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simmmple.com/product/vision-ui-dashboard-pro-react"&gt;https://simmmple.com/product/vision-ui-dashboard-pro-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_KfaIW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33el9pew3r07pvn0cp2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_KfaIW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33el9pew3r07pvn0cp2f.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_of9Ckd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr4r8vqj13ykso4nlzrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_of9Ckd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr4r8vqj13ykso4nlzrg.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZRiqIO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf22448njgg2yerpuyc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZRiqIO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf22448njgg2yerpuyc8.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wC8ugrVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6uj1ogttj0czaaiwh56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wC8ugrVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6uj1ogttj0czaaiwh56.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ufzf-Czp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdqz5p01yrskxzgj75n6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ufzf-Czp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdqz5p01yrskxzgj75n6.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Building a Fastify NodeJS server</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 07 Jan 2022 07:22:05 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/building-a-fastify-nodejs-server-296g</link>
      <guid>https://dev.to/dailydevtips1/building-a-fastify-nodejs-server-296g</guid>
      <description>&lt;p&gt;I recently needed a super simple webserver to listen to POST requests.&lt;/p&gt;

&lt;p&gt;Before we used &lt;a href="https://daily-dev-tips.com/posts/basic-nodejs-express-application/"&gt;express to host a simple Node server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I kept hearing amazing things about Fastify, and we are actually using this at daily.dev.&lt;/p&gt;

&lt;p&gt;So time to try it out for a project and see what it exactly can do for us.&lt;/p&gt;

&lt;p&gt;Fastify can be used to quickly spool up a server in Node.js, much like express or its alternatives.&lt;br&gt;
Fastify thrives on being fast, as the name suggests. They also state that it can handle large requests while keeping overhead very low.&lt;/p&gt;

&lt;p&gt;Say no more. Let's try it out.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-a-fastify-nodejs-server"&gt;
  &lt;/a&gt;
  Building a Fastify Node.js server
&lt;/h2&gt;

&lt;p&gt;In this article, I want to create a super simple Node.js server. We actually need a POST route for the application I have in mind, but let's set up a &lt;code&gt;GET&lt;/code&gt; and a &lt;code&gt;POST&lt;/code&gt; route to see how easy this is.&lt;/p&gt;

&lt;p&gt;First, we'll start by creating a new application and setting its structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;fastify-server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;fastify-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the folder, we can initialize it as a node application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the last step here is to install Fastify.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i fastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to create the server file. Create a file called &lt;code&gt;server.js&lt;/code&gt; in your project.&lt;/p&gt;

&lt;p&gt;The most basic setup to get Fastify up and running is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Require the framework and instantiate it&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a route&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Start the server&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you now run &lt;code&gt;node server&lt;/code&gt;, it will spool up the server on port &lt;code&gt;3000&lt;/code&gt;, and by visiting this in your browser, you should see the output we defined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PN3aP39i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749089097/grm7emLPCoC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PN3aP39i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749089097/grm7emLPCoC.png" alt="Fastify primary output" width="526" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, 5 lines of code and our server is set up already. This is looking pretty great.&lt;/p&gt;

&lt;p&gt;But let's make the start of the server a bit more robust by using the code Fastify recommends to us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Start the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does the same thing, but we now catch any error that might occur and stop the server in that case.&lt;/p&gt;

&lt;p&gt;We can also quickly add named routes if we want to like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Declare a named route&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAHMTX1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749242713/tR5Kn9PSR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAHMTX1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749242713/tR5Kn9PSR.png" alt="Fastify named route" width="594" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, often you might want a dynamic route. We want to get the name, but this parameter is dynamic based on the URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Declare a dynamic route&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/name/:name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be a route that we can access like so: &lt;code&gt;/name/jason&lt;/code&gt;.&lt;br&gt;
The name can be dynamic, rendering the name in the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDa9NyVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749719752/cHY-aYwha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDa9NyVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749719752/cHY-aYwha.png" alt="Fastify dynamic routes" width="672" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have this in place let's see how we can make a post-only route to post some data.&lt;/p&gt;

&lt;p&gt;For now, it would be great if the route only listens to the &lt;code&gt;POST&lt;/code&gt; option and dumps whatever we put in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Declare a post route&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dump&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we now try to &lt;code&gt;POST&lt;/code&gt; to this route using a &lt;a href="https://daily-dev-tips.com/posts/testing-api-calls-in-insomnia/"&gt;API Client like Insomnia&lt;/a&gt;, we can see it works!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WTH-eBKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749926514/WRjUxPS3p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WTH-eBKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640749926514/WRjUxPS3p.png" alt="Posting data to Fastify" width="880" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fastify is really great to quickly spool up a Node server, and from these initial tests, it's quick and easy to use.&lt;/p&gt;

&lt;p&gt;I'll definitely be using more of it in the future.&lt;br&gt;
If you would like to have a play with the creation from today, I've hosted it on &lt;a href="https://github.com/rebelchris/fastify-server"&gt;GitHub&lt;/a&gt; for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Frameworks Software Developers can learn in 2022</title>
      <author>javinpaul</author>
      <pubDate>Fri, 07 Jan 2022 06:36:51 +0000</pubDate>
      <link>https://dev.to/javinpaul/10-frameworks-software-developers-can-learn-in-2022-193o</link>
      <guid>https://dev.to/javinpaul/10-frameworks-software-developers-can-learn-in-2022-193o</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/path/become-a-react-developer?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKzZ5feM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/editorpage/5024256839647232/image/4718983717584896" alt="Node.js vs React.js: which to choose for your web app project" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, we are in the first week of 2022 now, and many of you might have already made your goals about what to learn in 2022, but if you haven't, then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared roadmaps to become a &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;Java developer&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/the-2018-devops-roadmap-31588d8670cb"&gt;DevOps Engineer&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/the-2019-react-js-developer-roadmap-9a8e290b8a56"&gt;React Developer&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/the-2019-web-developer-roadmap-ab89ac3c380e"&gt;Web Developer&lt;/a&gt; and in this article, I share some of the best frameworks and libraries for web development, mobile app development, and big data, which an application developer can learn in 2022. &lt;/p&gt;

&lt;p&gt;This New Year will be all about &lt;a href="https://javinpaul.medium.com/10-frameworks-and-libraries-mobile-application-developers-can-learn-in-2020-e0b91391cade"&gt;Mobile App Development&lt;/a&gt;, &lt;a href="https://www.java67.com/2021/12/top-5-courses-to-learn-blockchain.html"&gt;Blockchain&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-online-courses-to-learn-cloud-computing-aws.html"&gt;Cloud Computing&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Machine learning, and next-generation web with a greater focus on big data technologies like &lt;a href="https://javarevisited.blogspot.com/2018/04/top-5-hadoop-courses-to-learn-online.html"&gt;Hadoop&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2021/11/top-5-courses-to-learn-apache-spark-in.html"&gt;Spark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But you can still learn the popular Java and Web development frameworks like &lt;a href="https://javarevisited.blogspot.com/2018/10/the-2018-react-developer-roadmap.html"&gt;React&lt;/a&gt;, &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-5-nodejs-and-express-js-online-courses-for-web-developers.html"&gt;Node.js&lt;/a&gt;, &lt;a href="http://www.java67.com/2018/06/5-best-courses-to-learn-spring-boot-in.html"&gt;Spring Boot&lt;/a&gt; to take your career to the next level. These frameworks are tried and tested and will be here for at least the next 5 years to come.&lt;/p&gt;

&lt;p&gt;I have always believed in full-stack development, which means a Programmer should know both front-end and back-end technologies. Now it also includes mobile development technologies like &lt;a href="https://javarevisited.blogspot.com/2017/12/top-5-android-online-training-courses-for-Java-developers.html"&gt;Android&lt;/a&gt; or &lt;a href="https://javarevisited.blogspot.com/2018/11/5-free-ios-app-development-courses-for.html"&gt;iOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My simple advice for a Java programmer is to learn Android while for the &lt;a href="https://medium.com/@javinpaul/top-10-courses-to-learn-c-for-beginners-best-and-free-4afc262a544e"&gt;C++ programmer&lt;/a&gt; is to iOS so that you can create your own apps, do some freelancing and improve your chances of getting a job in the lucrative &lt;a href="https://javarevisited.blogspot.com/2020/01/10-things-mobile-app-developers-can-learn.html"&gt;mobile app development&lt;/a&gt; sector.&lt;/p&gt;

&lt;p&gt;In this highly competitive world where technologies get outdated very quickly, the only thing which helps a programmer is their learning ability. If you are a quick learner and can learn current technology in demand, you can find the job and the exciting work you are looking for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-frameworks-amp-libraries-developers-can-learn-in-2022"&gt;
  &lt;/a&gt;
  10 Frameworks &amp;amp; Libraries Developers Can Learn in 2022
&lt;/h2&gt;

&lt;p&gt;Here is my list of some of the best web, mobile, and big data technologies for a programmer to learn in 2022. These technologies will make your resume more attractive help you take your career to the next level in the same job.&lt;/p&gt;

&lt;p&gt;It's essential to keep moving forward because if you are stuck, you won't grow, and learning new and popular technologies always breaks the shackles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-spring-boot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Spring Boot&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Spring Boot makes it easy to create stand-alone, production-grade Spring-based Applications that you can "just run." Spring Boot takes an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. &lt;/p&gt;

&lt;p&gt;If you are a Java developer working on web development, then I strongly suggest you learn Spring Boot in 2022.&lt;/p&gt;

&lt;p&gt;Another good news to share with you guys is that NetBeans has added support for Spring Boot, so it's now easier to learn and develop Java web applications using Spring Boot 2. 0.&lt;/p&gt;

&lt;p&gt;If you decide to learn Spring Boot in 2022, then &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;Master Microservices with Spring Boot and Spring Cloud&lt;/a&gt;&lt;/strong&gt; is a great course to start with. It's currently available at almost a 95% discount on Udemy until this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7srpT72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zrUJwvgZ--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_900%2Cq_auto%2Cw_1600/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bupbqc9fctvw4j7r14it.png" alt="How to learn Spring Boot - best  resources" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-reactjs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. React.js&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;React is a JavaScript library for building user interfaces. It's declarative: React uses a declarative paradigm that makes it easier to reason about your application.&lt;/p&gt;

&lt;p&gt;It's efficient: React computes the minimal set of changes necessary to keep your DOM up-to-date. And it's flexible: React works with the libraries and frameworks.&lt;/p&gt;

&lt;p&gt;In short, A declarative, dynamic, and flexible JavaScript library for building user interfaces. If you decide to learn to React in 2022, then &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Freact-redux%2F"&gt;&lt;strong&gt;Modern React with Hooks&lt;/strong&gt;&lt;/a&gt; is an excellent online course to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Freact-redux%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWVJUF8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gMRt5O47--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_900%2Cq_auto%2Cw_1600/https://dev-to-uploads.s3.amazonaws.com/i/686rcbiyj1tvq7dcqo9t.png" alt="How to learn React.js - best  resources" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-nodejs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Node.js&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. It allows you to write a server-side application in JavaScript. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.&lt;/p&gt;

&lt;p&gt;If you learn Node.js and React, then you can write a client-server application in just one programming language, JavaScript.&lt;/p&gt;

&lt;p&gt;If you decide to learn Node.js in 2022, I suggest checking out &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fthe-complete-nodejs-developer-course-2%2F"&gt;&lt;strong&gt;The complete Node.js Developer Course&lt;/strong&gt;&lt;/a&gt;, one of the best courses to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-10-online-courses-to-learn-node-js-in-depth-8ef0e31ca139"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYpprNz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PER_C8Jx--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k21n0jf4nosun11lijwt.png" alt="How to learn Node.js" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-angular"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Angular&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Angular is an open-source JavaScript framework, maintained by Google, that assists with running single-page applications. Its goal is to augment web-based applications with model--view--controller (MVC) capability, to make both development and testing easier.&lt;/p&gt;

&lt;p&gt;It's very different from its predecessor Angular JS, which is outdated now, but learning Angular 2 or Angular 8 is still a great idea in 2022.&lt;/p&gt;

&lt;p&gt;If you decide to learn Angular in 2022, I suggest you first check the &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fangular-fundamentals"&gt;&lt;strong&gt;Angular: Getting Started&lt;/strong&gt;&lt;/a&gt; course from Pluralsight, one of the best courses.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.java67.com/2018/01/top-5-free-angular-js-online-courses-for-web-developers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeFnZ0iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4.bp.blogspot.com/-KVy6cfPuUCc/WlTLAnpCg2I/AAAAAAAAKCw/G4Yvh7jFknkuAc4ZLcd_IlVWRiUkVVYkwCLcBGAs/w400-h246/Angular%252BGetting%252BStarted%252BPluralsight%252Bcourse.jpg" alt="How to learn Angular" width="399" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, you would need Pluralsight membership access to this course, which costs around $29 per month or $299 annually (14% discount).&lt;/p&gt;

&lt;p&gt;If you don't have Pluralsight membership, I encourage you to get one because it allows you to access their 5000+ online courses on all the latest topics like front-end and back-development, machine learning, etc.&lt;/p&gt;

&lt;p&gt;It's more like Netflix for Software Developers, and Since learning is an integral part of our job, Pluralsight membership is a great way to stay ahead of your competition.&lt;/p&gt;

&lt;p&gt;They also provide a &lt;a href="http://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;&lt;strong&gt;10-day free trial&lt;/strong&gt;&lt;/a&gt; without any commitment, which is an excellent way to access this course for free and to check the quality of courses before joining Pluralsight.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-tensorflow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. TensorFlow&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Suppose you are curious about Artificial intelligence, Data Science, and Machine learning. In that case, I am sure you have heard about TensorFlow, Google's machine learning API, which they have used to develop the RankBrain algorithm for Google Search.\&lt;/p&gt;

&lt;p&gt;TensorFlow is one of the most popular machine learning APIs which allows you to automate several real-world tasks, for example, you can use it for image detection. &lt;/p&gt;

&lt;p&gt;In fact, a Japanese farmer turned programmer used it to detect the best quality Cucumber, which only his father and mother can do with his years of experience.&lt;/p&gt;

&lt;p&gt;That's the power of machine learning, which is now available to everyone because of TensorFlow. It's a good idea to learn cutting-edge technology like Machine learning in 2022, and there is no better library to start with than TensorFlow.&lt;/p&gt;

&lt;p&gt;If you have decided to learn TensorFlow in 2022, then **&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fcomplete-guide-to-tensorflow-for-deep-learning-with-python%2F"&gt;The Complete Guide to TensorFlow for Deep Learning with Python&lt;/a&gt; **is a perfect course to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-tensorflow-and-machine-learning-courses-online-programmers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAn093EV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-EIUkM-_tQDY/XCQTFlmyZrI/AAAAAAAAMxk/SgJH6wHveTAEkqUQ5aIpgT8Lq36ruajfACLcBGAs/w400-h225/TensorFlow%252B2.jpg" alt="Best resources to learn TensorFlow" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-net-core"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. .NET Core&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;ASP.NET Core is a free and open-source web framework, and the next generation of ASP.NET, developed by Microsoft and the community. It is a modular framework that runs on both the full .NET Framework, on Windows, and the cross-platform.&lt;/p&gt;

&lt;p&gt;If you are a Microsoft technology developer, then this is what you should learn in 2022, and the &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Faspnet-core-aspnet-5mvc-6cweb-api-ef-crash-course%2F"&gt;&lt;strong&gt;ASP NET CORE Crash Course&lt;/strong&gt;&lt;/a&gt; is an excellent place to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.wordpress.com/2018/01/07/top-50-udemy-courses-for-programmers-only-10-99-this-week/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXy7ovmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png" alt="Introducing .NET 5 - how to learn .NET for beginners" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-spark"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Spark&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Apache Spark is an open-source cluster-computing framework. Apache Spark is one of the fast and general engines for big data processing, with built-in modules for streaming, SQL, machine learning, and graph processing it's quickly gaining market share from Hadoop and similar technologies.&lt;/p&gt;

&lt;p&gt;If you are looking for a new and exciting career in Big Data, then I strongly suggest you learn Spark in 2022, and &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fapache-spark-course-with-java%2F"&gt;&lt;strong&gt;Apache Spark with Java&lt;/strong&gt;&lt;/a&gt; is a good place to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javarevisited.blogspot.sg/2017/12/top-5-courses-to-learn-big-data-and.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJVhKni7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-yRqsq1dW1OU/WkjPbuFHc6I/AAAAAAAAKAA/5H6bxFZtAJU6WuzugJpcvB1IDiUKP6wPgCEwYBhgL/w400-h310/spark-runs-everywhere.png" alt="How to learn Apache Spark" width="398" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need more choices, you can also check out this list of &lt;a href="http://javarevisited.blogspot.sg/2017/12/top-5-courses-to-learn-big-data-and.html"&gt;Big Data and Apache Spark courses&lt;/a&gt; for reference.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-firebase"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Firebase&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/03/top-5-courses-to-learn-firebase-in-2020.html"&gt;Firebase&lt;/a&gt; is Google's mobile platform that helps you quickly develop high-quality mobile apps and grow your business. You can choose Firebase as a backend for your Android or iOS application.&lt;/p&gt;

&lt;p&gt;Suppose you are looking to move into the lucrative business of mobile application development in 2022. In that case, learning Firebase is a perfect idea, and &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fadvanced-ios-firebae-build-an-uber-clone-app%2F"&gt;&lt;strong&gt;Advanced iOS and Firebase: Rideshare&lt;/strong&gt;&lt;/a&gt; is an excellent place to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javarevisited.blogspot.sg/2017/12/top-5-android-online-training-courses-for-Java-developers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrhQ0KjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://3.bp.blogspot.com/-Gkw_uwT8fv8/WkjRp9pHYqI/AAAAAAAAKAc/lQqVQ3qixtwV2vYPsVe4hvKMknMFzQSMgCEwYBhgL/w400-h200/firebase%252Bframework.png" alt="How to learn Firebase - Best Resources" width="400" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-xamarin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Xamarin&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Xamarin is a way to make mobile apps quickly for all platforms with a single, shared C# codebase, build a custom native user interface for each platform, or use Xamarin Forms to write an individual shared user interface across platforms.&lt;/p&gt;

&lt;p&gt;Microsoft's owned and quickly become famous for creating mobile apps for &lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;C&lt;/a&gt;, &lt;a href="http://www.java67.com/2018/02/5-free-cpp-courses-to-learn-programming.html"&gt;C++&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/11/top-5-courses-to-learn-c-sharp-in.html"&gt;C#&lt;/a&gt; developers.&lt;/p&gt;

&lt;p&gt;If you already know one of that C languages and looking for a career in mobile app development then I strongly suggest you learn Xamarin in 2022 and if you need a resource then &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-xamarin-developer-course-ios-and-android%2F"&gt;The Complete Xamarin Developer Course: iOS And Android!&lt;/a&gt;&lt;/strong&gt; by Tim Buchalaka on Udemy is a good course to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javarevisited.blogspot.sg/2017/12/top-10-pluralsight-courses-java-and-web-developers.html#axzz53GlbWNBQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_aMm8S_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-3JHbFt1pZYQ/WkjRVMV8NBI/AAAAAAAAKAQ/xa61V_W8cIc3G5zs1cp6VXScJV8zeDWdQCEwYBhgL/w400-h220/Xamarin%252Bbenefit.png" alt="How to learn Xamarin - Best Resources" width="400" height="220"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-react-native"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. React Native&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is another mobile application development framework based upon JavaScript and the popular React framework. &lt;strong&gt;React Native&lt;/strong&gt; is an extension of &lt;a href="http://www.java67.com/2018/02/5-free-react-courses-for-web-developers.html"&gt;React&lt;/a&gt;, a popular JavaScript framework to develop web applications, which allows you to build native Android and iOs apps in JavaScript.&lt;/p&gt;

&lt;p&gt;Unlike Ionic and Cordova, which promotes write once run everywhere but doesn't offer you to create a native app, React Native does convert your code into native code, especially for GUI.&lt;/p&gt;

&lt;p&gt;This is a massive advantage for any JavaScript developer who wants to write the mobile application he has always dreamed about.&lt;/p&gt;

&lt;p&gt;React Native along with Redux is becoming increasingly popular and turned out to be a valuable skill for your resume if you are looking for a job in the mobile app development space as well&lt;/p&gt;

&lt;p&gt;If you decided to learn React Native in 2022, then **&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fthe-complete-react-native-and-redux-course%2F"&gt;The Complete React Native and Redux Course&lt;/a&gt; by Stephen Grider **is the best course to start with. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/02/5-react-native-courses-to-learn-mobile-development-using-JavaScript.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGPvHeaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-6Y46ZMM6bvs/XCQQ5jVkRxI/AAAAAAAAMxY/7vH1gpcNV5goCLrUcyyBsnkM2lh57e02gCLcBGAs/w400-h224/The%252BComplete%252BReact%252BNative%252Band%252BRedux%252BCourse%252BUdemy%252Bcourse.jpg" alt="How to learn React Native - Best Resources" width="299" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the best web development, mobile, machine learning, and big data frameworks and libraries software developers can learn learn in 2022. I especially like to focus on next-generation technologies like Big Data and Machine Learning and suggest you do so.&lt;/p&gt;

&lt;p&gt;There is also a lot of demand for Data Scientists, and they are also getting excellent pay, on average $120,000, and that's the reason many friends and colleagues are switching to Data Science jobs. &lt;/p&gt;

&lt;p&gt;I'll talk about more in the next article, where I'll share &lt;a href="https://javarevisited.blogspot.com/2021/01/10-tools-data-scientists-and-machine-learning-engineers.html"&gt;my tips to learn Data Science in 2022&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Programming and Technology articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html#123"&gt;The 2022 Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;The Frontend and Backend Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/12/top-20-java-books-of-2017-which-you-can-read-in-2018.html"&gt;20 Java Books You Can Read in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;5 Free Spring Framework Courses for Java Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-javascript-frameworks-and-libraries-to-learn-in-2020-best-of-lot-5f61f86c60b4"&gt;10 Best JavaScript Frameworks and Libraries&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-programming-languages-to-learn-in.html"&gt;10 Programming Languages to explore in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/04/top-5-java-frameworks-to-learn-in-2018_27.html"&gt;10 Frameworks Programmers Should Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-ways-to-learn-new-technology-programming-language-or-framework.html"&gt;10 Ways to Learn a  New Technology in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;5 Free Core Java Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/09/10-devops-courses-for-experienced-java-developers.html"&gt;10 DevOps Courses for Experienced Java Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-online-courses-to-learn-spring-framework-in-2020-f7f73599c2fd"&gt;10 Best Spring Framework Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb"&gt;5 Essential Java Frameworks for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-things-aspiring-web-developers-should-learn-in-2021-6747bfbfc12e"&gt;10 Things Aspiring Web Developers Should Learn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article. If you like these best frameworks and libraries for software development and the resources to learn them, then please share them with your friends and colleagues. If you have any feedback or comment, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are a Java developer and you are looking for what a Java developer can learn in 2022 to become a better Java programmer and allrounder then you can also check out my list of &lt;a href="http://javarevisited.blogspot.sg/2017/12/10-things-java-programmers-should-learn.html#axzz53JaDYLsP"&gt;&lt;strong&gt;10 Things Java Developer Should Learn in 2022&lt;/strong&gt;&lt;/a&gt; article, which contains a list of frameworks and technologies Java developer should learn.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>development</category>
      <category>react</category>
    </item>
    <item>
      <title>Re-Designing Facebook Find Friends</title>
      <author>sameer8saini</author>
      <pubDate>Fri, 07 Jan 2022 05:59:04 +0000</pubDate>
      <link>https://dev.to/sameer8saini/re-designing-facebook-find-friends-2jkc</link>
      <guid>https://dev.to/sameer8saini/re-designing-facebook-find-friends-2jkc</guid>
      <description>&lt;p&gt;In this video, I will be re-designing Facebook's find friends page into a much snappier-looking web page. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gcWBABxprZg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I will be using HTML and CSS for the website page and will be explaining some useful things on HTML and CSS along the way.&lt;/p&gt;

&lt;p&gt;This is a fun HTML tutorial for you to understand and apply your HTML and CSS skills.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#html-css-facebook"&gt;
  &lt;/a&gt;
  HTML #CSS #FACEBOOK
&lt;/h1&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get your GitHub 2021 year of contributions in 3D</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 07 Jan 2022 05:45:34 +0000</pubDate>
      <link>https://dev.to/mishmanners/get-your-github-2021-year-of-contributions-in-3d-30pk</link>
      <guid>https://dev.to/mishmanners/get-your-github-2021-year-of-contributions-in-3d-30pk</guid>
      <description>&lt;p&gt;You probably remember all the hype that came out last year when &lt;a href="https://dev.to/github/view-your-github-contribution-graph-as-an-animated-skyline-3d-print-it-2dpl"&gt;GitHub Skyline&lt;/a&gt; was released.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github/view-your-github-contribution-graph-as-an-animated-skyline-3d-print-it-2dpl" class="video-image"&gt;
    &lt;span class="video-timestamp"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl4ssD2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/video-camera-9a2eda0979fd9ce3933037481ee8828557b6c7f5533e1de458b8c2648a60b097.svg" alt="video camera" width="491" height="491"&gt;
      01:04&lt;/span&gt;
  &lt;/a&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rph_F4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ak56TdXS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/4eb4ece3-2832-407c-b933-f1b4b58829e6.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/view-your-github-contribution-graph-as-an-animated-skyline-3d-print-it-2dpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;View your GitHub Contribution Graph as an animated skyline + 3D print it&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub ・ Feb 18 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Social media was full of developers showing off their contributions. Now that 2021 has come to a close, it's time to check out your year of code. We also made some updates to Skyline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-2021-year-of-contributions-as-a-city"&gt;
  &lt;/a&gt;
  Your 2021 year of contributions as a city
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://skyline.github.com"&gt;GitHub Skyline&lt;/a&gt; was a beautifully crafted landscape showing each of your contributions on GitHub. It's your contribution graph in 3D! All contributions, including public and private will show up on your GitHub Skyline.&lt;/p&gt;

&lt;p&gt;Here's how to get yours:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://skyline.github.com"&gt;skyline.github.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Enter your username&lt;/li&gt;
&lt;li&gt;Select "2021" from the drop down&lt;/li&gt;
&lt;li&gt;Click "Create a Skyline"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From there you'll see your contributions magically appear. Now you can do some super fun things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share your Skyline on social media using the "Share" button&lt;/li&gt;
&lt;li&gt;Order your Skyline direct from the website&lt;/li&gt;
&lt;li&gt;Download an STL file so you can print it yourself&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://dev.to/mishmanners/the-best-easiest-quickest-way-to-create-screen-capture-gifs-2754"&gt;ScreenToGif&lt;/a&gt; or similar to create a fun animation to share&lt;/li&gt;
&lt;li&gt;Open &lt;a href="https://skyline.github.com"&gt;skyline.github.com&lt;/a&gt; on your phone and use a headset to view your graph in virtual reality!&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ruWTLlZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1479286876716486656/pu/img/0uxuSdFTVtPwuhnf.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxOlAE07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1468741854002761728/sQ_9an8k_normal.jpg" alt="Mish ✨ 🍩 Michelle Mannering profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mish ✨ 🍩 Michelle Mannering
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mishmanners"&gt;@mishmanners&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Viewed your 2021 GitHub year in 3D yet?&lt;br&gt;&lt;br&gt;📐go to &lt;a href="https://t.co/AYgNHS9For"&gt;skyline.github.com&lt;/a&gt;&lt;br&gt;🤖enter username&lt;br&gt;📅select "2021"&lt;br&gt;👀watch your masterpiece unfold&lt;br&gt;&lt;br&gt;Order your skyline from the store, or download the *.stl file so you can print it yourself.&lt;br&gt;&lt;br&gt;Updates on my print coming soon.&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/YearInReview"&gt;#YearInReview&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:02 AM - 07 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1479287176705691650" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1479287176705691650" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1479287176705691650" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Create your skyline and share it on social media. Create a story around why your city is massive, or sparse; maybe you intentionally left room in the middle of your city for a park! 🌴&lt;/p&gt;

&lt;p&gt;Did you find all the other hidden gems? Play around with the &lt;a href="https://skyline.github.com"&gt;Skyline website&lt;/a&gt; to see if you can discover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Konami code&lt;/li&gt;
&lt;li&gt;Your skyline in ASCII art&lt;/li&gt;
&lt;li&gt;See the start of your 2022 skyline&lt;/li&gt;
&lt;li&gt;Get your personalised social media card&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>yearinreview</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Progressively Adding Fable to JS Projects</title>
      <author>Angel Daniel Munoz Gonzalez</author>
      <pubDate>Fri, 07 Jan 2022 05:20:32 +0000</pubDate>
      <link>https://dev.to/tunaxor/progressively-adding-fable-to-js-projects-2f7m</link>
      <guid>https://dev.to/tunaxor/progressively-adding-fable-to-js-projects-2f7m</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the sources for the code we'll use in this post in &lt;a href="https://github.com/AngelMunoz/blogpostdrafts/tree/main/progressively"&gt;this repository's directory&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;Hopefully you have had an amazing end of the year and the holidays are finally finishing for many (mine are done for sure), what a better time to start something new or even better yet progressively enhancing something that already exists!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-fable-and-what-are-the-alternatives"&gt;
  &lt;/a&gt;
  First of all What is Fable and what are the alternatives?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://fable.io"&gt;Fable&lt;/a&gt; project is a &lt;code&gt;F#&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;Lang&amp;gt;&lt;/code&gt; compiler where &lt;code&gt;&amp;lt;Lang&amp;gt;&lt;/code&gt; is any of &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;Typescript&lt;/code&gt; and &lt;code&gt;Python&lt;/code&gt; at the time of writing the last two are more experimental and the main support is for Javascript future iterations of Fable will cover these languages and even more like &lt;a href="https://github.com/fable-compiler/Fable/pull/2653"&gt;PHP, Rust, Dart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One could say Fable is a direct competitor to projects like Typescript, Flow, Purescript, ReasonML and similar projects which aim to write in a typed language to produce safer code. While every of the mentioned projects has their own pros/cons I won't discuss that here since it's very likely you already chose Fable for the new code effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-fable-do"&gt;
  &lt;/a&gt;
  What does Fable do?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;As mentioned above Fable is an &lt;code&gt;F#&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;Lang&amp;gt;&lt;/code&gt; compiler but from here on we will talk about fable in the context of an &lt;code&gt;F#&lt;/code&gt; -&amp;gt; &lt;code&gt;Javascript&lt;/code&gt; compiler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fable is distributed via a &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools"&gt;.NET tool&lt;/a&gt; which can be installed both globally and locally via &lt;code&gt;dotnet tool install -g fable&lt;/code&gt; (or remove the &lt;code&gt;-g&lt;/code&gt; to do it locally) meaning that it requires that you have the &lt;a href="https://get.dot.net"&gt;.NET SDK&lt;/a&gt; installed on your machine.&lt;/p&gt;

&lt;p&gt;Before continuing into the complete topic there are a few myths that I want to get out of the way for sure&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fable is a framework&lt;/li&gt;
&lt;li&gt;Fable is react&lt;/li&gt;
&lt;li&gt;Fable is for SPAs&lt;/li&gt;
&lt;li&gt;Fable is for new projects&lt;/li&gt;
&lt;li&gt;Fable requires Node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The truth and only truth is that Fable is an F# -&amp;gt; JS Compiler hence you can treat it like any other, just like you would treat typescript or purescript or reasonml or even babel. The reality would actually be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fable is a tool to produce Javascript code.&lt;/li&gt;
&lt;li&gt;Fable allows you to use React JS code as well as Svelte, Lit, and others.&lt;/li&gt;
&lt;li&gt;Fable can be used for single JS scripts as well as full SPA projects there are no hard requirements.&lt;/li&gt;
&lt;li&gt;Fable produces JS code, so wherever you can consume JS code Fable will work&lt;sup&gt;*&lt;/sup&gt; even slightly older projects.&lt;/li&gt;
&lt;li&gt;Fable can be used in any context outside nodejs like any python, ruby, or php servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; Fable emits modern javascript so your target needs to at least support the ES2015 ecmascript specification, in some cases (for older environments) further processing will be needed to re-transpile the JS code to ES3/ES5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having that said, let's dive into the topic at last.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-javascript-projects"&gt;
  &lt;/a&gt;
  New Javascript projects
&lt;/h2&gt;

&lt;p&gt;If you are not very familiar to nodejs because you are either a backend dev from other ecosystem or a frontend developer who happens to use node because that's how the ecosystem is right now I'll give you a run down the very basics of a node project.&lt;/p&gt;

&lt;p&gt;type on the terminal on a new directory the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it should print something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Wrote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/path/to/directory/package.json:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"project1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That... in essence is a node project even if you haven't created a &lt;code&gt;index.js&lt;/code&gt; as is indicated in the main field, of course you can add the file and adjust the newly created package.json like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.js&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"project1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node ./src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;npm run start&lt;/code&gt; you should see the lovely &lt;em&gt;Hello, World!&lt;/em&gt; message.&lt;/p&gt;

&lt;p&gt;Yeah, yeah I know you didn't come here for the node part; New Fable projects are also very very simple, with the .NET SDK installed you just need to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# you can delete the previous src directory just to make this work smoothly&lt;/span&gt;
dotnet new console &lt;span class="nt"&gt;-lang&lt;/span&gt; F# &lt;span class="nt"&gt;-o&lt;/span&gt; src
&lt;span class="c"&gt;# The following commands are to install the fable .NET tool locally&lt;/span&gt;
dotnet new tool-manifest
dotnet tool &lt;span class="nb"&gt;install &lt;/span&gt;fable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While we can run fable from the terminal whenever we want we can leverage the fact that we're inside a node project and leverage the npm commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"project1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src/Program.fs.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start-app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node ./src/Program.fs.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dotnet fable src --run npm run start-app"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;NOTE:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;required&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;fable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;output&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now you can enter &lt;code&gt;npm start&lt;/code&gt; and you'll see Fable compiling then getting a &lt;em&gt;Hello from F#&lt;/em&gt; even if it was not run in .NET but node.js&lt;/p&gt;

&lt;p&gt;If you want to target node.js this is a basic setup you can try. There are other tools like pm2 or nodemon that can help you minimize the developer feedback loop that can re-run servers or node processes and allow the debugger to connect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-javascript-projects"&gt;
  &lt;/a&gt;
  Existing Javascript projects
&lt;/h2&gt;

&lt;p&gt;Let's create a new node project again and this time instead of creating a console app, we will create a class library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
dotnet new classlib &lt;span class="nt"&gt;-o&lt;/span&gt; src &lt;span class="nt"&gt;-lang&lt;/span&gt; F#
&lt;span class="c"&gt;# The following commands are to install the fable .NET tool locally&lt;/span&gt;
dotnet new tool-manifest
dotnet tool &lt;span class="nb"&gt;install &lt;/span&gt;fable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace the contents of the package.json file with the following contents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"project2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start-app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node ./src/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dotnet fable src --run npm run start-app"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file structure looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package.json
  | src
    index.js
    Library.fs
    src.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then add the following index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Library.fs.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run &lt;code&gt;npm start&lt;/code&gt; you should see the lovely &lt;em&gt;Hello Javascript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this point we can assume that any existing project and file on those projects in this case represented by our &lt;code&gt;index.js&lt;/code&gt; can introduce F# in the code base and the reasoning for this is that this is the exact mechanism you can use to introduce typescript in a code base. Although, typescript benefits Javascript code from the editor and other tooling around so it's arguably easier but I digress, the main point is that you can either incrementally add F# code to your javascript project and let them co-exist side by side or you can slowly migrate JS code to F# code, file by file, module by module, however you feel the pace is better for your team.&lt;/p&gt;

&lt;p&gt;Now let's take this exercise a little bit further just to show that we can do it, we will create a new vitejs project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init vite@latest project3 --template lit
cd project3 &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should run a lit plain JS project let's add two simple F# files to &lt;code&gt;src&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.fsproj --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GenerateDocumentationFile&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/GenerateDocumentationFile&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Compile&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Library.fs"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Fable.Lit"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"1.4.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Library.fs&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Lit&lt;/span&gt;
&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LitElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my-counter"&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// This call is obligatory to initialize the web component&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nn"&gt;LitElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|})&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setCounter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Hook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useState&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Value&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"""
        &amp;lt;article&amp;gt;
            &amp;lt;p&amp;gt;{counter}&amp;lt;/p&amp;gt;
            &amp;lt;button @click={fun _ -&amp;gt; setCounter(counter + 1)}&amp;gt;+&amp;lt;/button&amp;gt;
            &amp;lt;button @click={fun _ -&amp;gt; setCounter(counter - 1)}&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;/article&amp;gt;
        """&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inside &lt;code&gt;src/my-element.js&lt;/code&gt; we will import the compiled fable file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/my-element.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this should be already there&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Library.fs.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this line&lt;/span&gt;
&lt;span class="c1"&gt;// ... the rest of the file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;next we will modify the "dev" script in package.json for the following &lt;code&gt;"dev": "dotnet fable src --watch --run vite serve"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly we will add inside &lt;code&gt;index.html&lt;/code&gt; the following content right inside the body element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;my-element&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is child content&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- This content is from our Fable Code  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;my-counter&amp;gt;&amp;lt;/my-counter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/my-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now let's run &lt;code&gt;npm run dev&lt;/code&gt; and visit &lt;code&gt;localhost:3000&lt;/code&gt; and we should see our counter inside the default&lt;/p&gt;

&lt;p&gt;This particular technique is very powerful given that Fable.Lit produces web components meaning that you can render those in any existing framework so you can slowly migrate away from angular/react/vue using Fable.Lit components!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-projects"&gt;
  &lt;/a&gt;
  Typescript Projects
&lt;/h3&gt;

&lt;p&gt;In the case of typescript projects you only need to add &lt;code&gt;"allowJS": true&lt;/code&gt; to the &lt;code&gt;tsconfig.json&lt;/code&gt;'s compiler options&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;rest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;config&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"allowJs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;rest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webpack-and-other-bundlersdev-servers"&gt;
  &lt;/a&gt;
  Webpack and other bundlers/dev servers
&lt;/h3&gt;

&lt;p&gt;In the last example we used vite which loads ES modules by default, other modern tools like webpack/snowpack/parcel should be exactly the same, just import those fable output files where you need them and the bundler should manage that since (and I emphasize) Fable output is modern standards javascript.&lt;/p&gt;

&lt;p&gt;that will make typescript to also process your Fable output files&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;: If you have a strict config enabled you might face issues with &lt;em&gt;implicit any&lt;/em&gt; errors, you can also add &lt;code&gt;"checkJs": false&lt;/code&gt; so your Fable output doesn't get re-checked by typescript (after all it has already been checked by F#)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#good-ol-monoliths"&gt;
  &lt;/a&gt;
  Good ol' monoliths
&lt;/h2&gt;

&lt;p&gt;I hear you, you have a [Django | ASP.NET | Express | Flask | RoR | Laravel | Slim] app that doesn't use a SPA like tool chain that serves it's own javascript files statically (wwwroot in the case of .NET)&lt;/p&gt;

&lt;p&gt;I have good news for you, you can use any of the approaches above to produce your javascript and include it in your &lt;code&gt;JS modules&lt;/code&gt; or directly in the &lt;code&gt;index.html&lt;/code&gt; there are are some caveats about Fable projects with JS dependencies. There are two approaches here you are managing your JS dependencies in any of the following ways&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via NPM&lt;/li&gt;
&lt;li&gt;via CDN/Local Dist file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it's via NPM and you already have sorted out how to serve those then it's about just using Fable as usual and let it emit your JS files directly to the static files directory via fable's outDir flag: &lt;code&gt;-o --outDir Redirect compilation output to a directory&lt;/code&gt;, something along the lines of &lt;code&gt;dotnet fable fable-sources -o wwwroot&lt;/code&gt; and it should just work.&lt;/p&gt;

&lt;p&gt;If you need to handle dependencies via CDN/Local Dist file then some dependencies won't work because they use node like imports &lt;code&gt;import {} from 'lit/some/sub/directory.js&lt;/code&gt; browser imports need to start with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt; or even &lt;code&gt;../&lt;/code&gt; so they can be valid ES module imports thankfully for this you can check out in a shameless plug one of the projects I'm working on: &lt;a href="https://github.com/AngelMunoz/Perla"&gt;Perla&lt;/a&gt; which handles this precise case but I digress, the ideal situation would be you with npm and already figured out how to serve node dependencies to your compiled code.&lt;/p&gt;

&lt;p&gt;Please remember that each F# file is equal to a single JS File when it's ran through fable so you can create scripts for specific pages, you don't need to import/export everything from a single entry point and you can use &lt;a href="https://github.com/fable-compiler/fable-browser"&gt;fable-browser&lt;/a&gt; to do DOM manipulation, so it is not necessary to add a whole SPA framework to enhance parts of your monolith.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;A brief recap, we just saw how to add Fable&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New node projects&lt;/li&gt;
&lt;li&gt;Existing node projects&lt;/li&gt;
&lt;li&gt;New/Existing Vite/Webpack/Typescript projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the short summary would be this&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the .NET SDK&lt;/li&gt;
&lt;li&gt;Create a new F# project (either console or class library)&lt;/li&gt;
&lt;li&gt;Install Fable as a local/global tool&lt;/li&gt;
&lt;li&gt;Integrate the fable command as part of your workflow (in our case the npm scripts we modified above)&lt;/li&gt;
&lt;li&gt;Run Fable and start enhancing with or migrating to F# your code base.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also we got remembered that Fable outputs Javascript, not react, not a SPA, not anything else (in the context of this blog post) so your existing knowledge of how to use Javascript inside a SPA, Monolith, Node.js applies exactly the same.&lt;/p&gt;

&lt;p&gt;I put a lot emphasis on that because I have seen people who believe Fable &lt;em&gt;must&lt;/em&gt; be used in a certain way or that there's a religious way to use it. No it's a tool and has several uses feel free to pick your own way to use it.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>fsharp</category>
      <category>fable</category>
    </item>
    <item>
      <title>7 Features that need to be tested in E-commerce Website</title>
      <author> QAble Testlab Private Limited</author>
      <pubDate>Fri, 07 Jan 2022 04:30:59 +0000</pubDate>
      <link>https://dev.to/qablehq/7-features-that-need-to-be-tested-in-e-commerce-website-2nfk</link>
      <guid>https://dev.to/qablehq/7-features-that-need-to-be-tested-in-e-commerce-website-2nfk</guid>
      <description>&lt;p&gt;It is crucial to check every aspect of an eCommerce website to not compromise on important factors like user experience, security, and quick loading time.&lt;/p&gt;

&lt;p&gt;The success of your eCommerce website depends on determining which features to test in an e-commerce website, providing seamless performance without having any errors. &lt;/p&gt;

&lt;p&gt;You can give your customers the best shopping experience if your e-Shop is working efficiently. Thus, seven important eCommerce website features list need to be tested in an eCommerce website to ensure uninterrupted performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-testing-ecommerce-website-structure"&gt;
  &lt;/a&gt;
  1. Testing eCommerce website structure
&lt;/h2&gt;

&lt;p&gt;The eCommerce website structure consists of different pages, including Main pages, category pages, product descriptions, and shopping cart.&lt;/p&gt;

&lt;p&gt;The tester needs to check the main pages, including the home page, the product pages, site map, privacy policy, return policy and Special offer page. All pages are crucial when it comes to &lt;a href="https://www.qable.io/e-commerce-testing-service/"&gt;eCommerce website features testing&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-testing-ecommerce-website-workflow"&gt;
  &lt;/a&gt;
  2. Testing eCommerce website workflow
&lt;/h2&gt;

&lt;p&gt;The testing of the entire workflow of your e-commerce web / mobile application includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login and signup options&lt;/li&gt;
&lt;li&gt;Search functionality&lt;/li&gt;
&lt;li&gt;Product review posting feature&lt;/li&gt;
&lt;li&gt;Sorting facility&lt;/li&gt;
&lt;li&gt;Apply filters to select the desired product (s)&lt;/li&gt;
&lt;li&gt;Add/remove functionality to shopping cart&lt;/li&gt;
&lt;li&gt;Check out the process&lt;/li&gt;
&lt;li&gt;Order number and invoice generation&lt;/li&gt;
&lt;li&gt;Payment Gateway and Payment Processing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-testing-payment-gateway-integration"&gt;
  &lt;/a&gt;
  3. Testing Payment gateway integration
&lt;/h2&gt;

&lt;p&gt;One of the important things to &lt;a href="https://www.qable.io/e-commerce-testing-service/"&gt;test in an ecommerce website&lt;/a&gt; is to check the payment gateway. You will have to do many tests to make sure it works properly and provides security when conducting online transactions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are the checkout and payment process you need to test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The correct price of the product, shipping charge, VAT, discount code all apply to you, and the customer has to pay the correct amount. You can test this payment process by editing the final list of products, applying different discount coupon codes, and selecting a different area to see changes in shipping charges.&lt;/li&gt;
&lt;li&gt;You need to check if the payment has been processed properly using all payment methods like Net Banking, Credit / Debit Card, PayPal etc. Also, you need to check that the order has been cancelled and the payment ID has been returned. You can see all this using dummy accounts and demo debit/credit card numbers.&lt;/li&gt;
&lt;li&gt;Check whether invoices and emails generated after the payment process have been sent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You also need to ensure that the refund process, email and refund receipt are all working properly to complete the eCommerce website features testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-security-and-vulnerability-assessment"&gt;
  &lt;/a&gt;
  4. Security and vulnerability assessment
&lt;/h2&gt;

&lt;p&gt;E-commerce applications contain valuable information (customer’s personal and banking data), so you need to perform security tests to check security and vulnerability issues.&lt;/p&gt;

&lt;p&gt;You can use testing methods such as SQL injection, ethical hacks on login, registration, payment gateway, and other pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-checking-compatibility-with-web-browser"&gt;
  &lt;/a&gt;
  5. Checking compatibility with web browser
&lt;/h2&gt;

&lt;p&gt;The e-commerce application needs to work on all web browsers like Google Chrome, Firefox, Opera, Internet Explorer, Safari etc.&lt;/p&gt;

&lt;p&gt;You need to check the app’s browser compatibility to ensure that your customers can use your e-commerce website without hassle&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-testing-for-mobile-response"&gt;
  &lt;/a&gt;
  6. Testing for Mobile Response
&lt;/h2&gt;

&lt;p&gt;Nowadays, mobile devices occupy the desktop platform in terms of internet access, and companies are adopting a mobile-first strategy in their eCommerce website.&lt;/p&gt;

&lt;p&gt;You need to test the responsive design of your application on mobile devices of different screen sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-checking-performance-and-seo-related-matters"&gt;
  &lt;/a&gt;
  7. Checking performance and SEO related matters
&lt;/h2&gt;

&lt;p&gt;The last essential thing to test in an ecommerce website is to verify the performance of your website/application.&lt;/p&gt;

&lt;p&gt;You need to perform performance testing on parameters like webpage loading speed, throughput, data transfer rate, efficiency, uptime, database performance, website traffic load tolerance, error message etc.&lt;/p&gt;

&lt;p&gt;You need to make your e-commerce website high search engine visibility to get enough user traffic to your site. You can do this by applying search engine optimization (SEO) to your website.&lt;/p&gt;

&lt;p&gt;You need to check if the SEO strategy like title tag, meta description, URL structure, image alt tag etc., is implemented properly.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>testdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
