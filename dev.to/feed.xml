<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Create Modal Box Using CSS and JS</title>
      <author>elinabey</author>
      <pubDate>Fri, 07 Jan 2022 14:53:16 +0000</pubDate>
      <link>https://dev.to/elinabey/how-to-create-modal-box-using-css-and-js-3bjj</link>
      <guid>https://dev.to/elinabey/how-to-create-modal-box-using-css-and-js-3bjj</guid>
      <description>&lt;p&gt;How to create Modal Box with CSS and JavaScript. The purpose is to complete a transparent and simple modal popup box that does not use third-party libraries and is cross-browser compatible. We have to use vanilla javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-modal-box-using-css-and-js"&gt;
  &lt;/a&gt;
  Create Modal Box Using CSS and JS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MndJggHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4i5uulbujcc5bbqqfrq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MndJggHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4i5uulbujcc5bbqqfrq.jpg" alt="Create Modal Box Using CSS and JS" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modal popups are widely used on the web. Some of their popular uses include driving newsletter signups, displaying notifications/alerts, and handling registration forms.&lt;/p&gt;

&lt;p&gt;This model will be broad which means you'll be free to use it for any purpose and anywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-markup"&gt;
  &lt;/a&gt;
  HTML Markup
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"popup-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-button popup-close"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;×&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;This is My PopUp&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;How to create a model box with HTML CSS and JavaScript.&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button popup-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open Model!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Open Sans"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;visibility&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.2%&lt;/span&gt; &lt;span class="m"&gt;5.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;-webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0.15s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0.15s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7b78ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup-box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.close-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7b78ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.close-button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.show-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;visibility&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;1.25s&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;1.25s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.close-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;windowOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;closeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;windowOnClick&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read this article in detail from here &lt;a href="https://softcodeon.com/tutorials/create-modal-box-using-css-and-js.htm"&gt;Create Modal Box Using CSS and JS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see &lt;a href="https://codepen.io/softcodeon/pen/YzrvERx"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modal boxes are favored globally and now you have an easy-to-use process that is light and does not use third-party libraries like jQuery. You can use this model box for newsletters, sign-ups, or whatever you want! Hope you enjoy the results and find it helpful. If you have any questions please discuss below. Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to implement charts in android using java</title>
      <author>Dilmohit</author>
      <pubDate>Fri, 07 Jan 2022 14:39:11 +0000</pubDate>
      <link>https://dev.to/dilmohit/how-to-implement-charts-in-android-using-java-548n</link>
      <guid>https://dev.to/dilmohit/how-to-implement-charts-in-android-using-java-548n</guid>
      <description>&lt;p&gt;Hey guys today in this article, we will be talking about implementing charts in our android app using java. Charts can be used to show data in a beautiful and professional manner. Below is the step by step process on implementing charts in our android project.&lt;/p&gt;

&lt;p&gt;So In the first step we will be adding this library in our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies {
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8JIpC1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dg2ht3wpwryxd2u727.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8JIpC1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dg2ht3wpwryxd2u727.png" alt="Adding Dependency" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is library by &lt;a href="https://github.com/PhilJay"&gt;Philipp Jahoda&lt;/a&gt;. its a lightweight library and a great way to explore charts in android.&lt;/p&gt;

&lt;p&gt;Second step will be to add this repository in our settings.gradle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;repositories {
    maven { url 'https://jitpack.io' }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VoBP-F91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yxznwznywzdzoj157mt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoBP-F91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yxznwznywzdzoj157mt.png" alt="Adding Repository" width="880" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step add this code in your activity_main.xml or whatever activity that you are using to show charts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    tools:context=".MainActivity"&amp;gt;

   &amp;lt;com.github.mikephil.charting.charts.BarChart
       android:layout_width="match_parent"
       android:layout_height="0dp"
       android:layout_weight="1"
       android:id="@+id/bar_chart"
       android:layout_marginBottom="8dp"/&amp;gt;

    &amp;lt;com.github.mikephil.charting.charts.PieChart
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:id="@+id/pie_chart"
        android:layout_marginTop="8dp"/&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logic - So lets just first understand what is happening here. In this activity you can see at first we have Linear Layout as our root element. Then we have two child elements, first one is bar chart and second is Pie chart. &lt;/p&gt;

&lt;p&gt;These are elements that are provided by the library that we have used in our project. Now this library does not only gives you two types of charts, it has a lot i mean a lot of chart options that you should check by yourself. But for the sake of this tutorial we have these two type of charts bar chart and Pie chart.&lt;/p&gt;

&lt;p&gt;At last add this code in your MainActivity.java or again whatever activity you are using to show your charts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.chartdemo;

import androidx.appcompat.app.AppCompatActivity;
import android.graphics.Color;
import android.os.Bundle;
import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;
import com.github.mikephil.charting.utils.ColorTemplate;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    // Initialize Variables
    BarChart barChart;
    PieChart pieChart;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Assign Variables
        barChart = findViewById(R.id.bar_chart);
        pieChart = findViewById(R.id.pie_chart);

        // Initialize Array List
        ArrayList&amp;lt;BarEntry&amp;gt; barEntries = new ArrayList&amp;lt;&amp;gt;();
        ArrayList&amp;lt;PieEntry&amp;gt; pieEntries = new ArrayList&amp;lt;&amp;gt;();

        // Use For Loop
        for (int i=1; i&amp;lt;10; i++){

            // Convert To Float
            float value = (float) (i*10.0);

            // Initialize Bar and Pie Chart Entry
            BarEntry barEntry = new BarEntry(i, value);
            PieEntry pieEntry = new PieEntry(i, value);

            // Add Values in Array List
            barEntries.add(barEntry);
            pieEntries.add(pieEntry);

        }

        // Initialize Bar Data Set
        BarDataSet barDataSet = new BarDataSet(barEntries, "Investment");

        // Set Colors
        barDataSet.setColors(ColorTemplate.COLORFUL_COLORS);

        // Hide draw values
        barDataSet.setDrawValues(false);

        // Set Bar Data
        barChart.setData(new BarData(barDataSet));

        // Set Animations
        barChart.animateY(5000);

        // Set Description text and color
        barChart.getDescription().setText("Investment chart");
        barChart.getDescription().setTextColor(Color.BLUE);


        // Initialize Pie Data Set
        PieDataSet pieDataSet = new PieDataSet(pieEntries,"Investors");

        // Set Colors
        pieDataSet.setColors(ColorTemplate.COLORFUL_COLORS);

        // Set Pie Data
        pieChart.setData(new PieData(pieDataSet));

        // Set Animations
        pieChart.animateXY(5000,5000);

        // hide description
        pieChart.getDescription().setEnabled(false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logic - At first we have Initialize our bar and pie charts. Next in our onCreate method we have assigned variables. Then we have assigned array list and used for loop. And at last we have Intialize Data sets for both our Pie chart and Bar chart. &lt;/p&gt;

&lt;p&gt;Output - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/mgfo9HUU5cnsZQaZq4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mgfo9HUU5cnsZQaZq4/giphy.gif" alt="Output" width="224" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments are added to better understand the logic. Don't forget to visit the github page of this library&lt;br&gt;
&lt;a href="https://github.com/PhilJay/MPAndroidChart"&gt;MPAndroidChart&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>java</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>next-export-i18n v1.3.0: respecing the user's default language</title>
      <author>martin krause</author>
      <pubDate>Fri, 07 Jan 2022 14:27:44 +0000</pubDate>
      <link>https://dev.to/martinkr/next-export-i18n-v130-respecing-the-users-default-language-48h4</link>
      <guid>https://dev.to/martinkr/next-export-i18n-v130-respecing-the-users-default-language-48h4</guid>
      <description>&lt;p&gt;Today I released &lt;code&gt;version 1.3.0&lt;/code&gt; of &lt;code&gt;next-export-i18n&lt;/code&gt;, the i18n module for Next.js which is fully compatible with &lt;code&gt;next export&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Install &lt;code&gt;next-export-i18n&lt;/code&gt; with &lt;code&gt;$ npm i next-export-i18n&lt;/code&gt; or get &lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;&lt;code&gt;next-export-i18n v1.3.0&lt;/code&gt;&lt;/a&gt; from npm.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-feature-respecting-the-users-default-language"&gt;
  &lt;/a&gt;
  New feature: Respecting the user's default language
&lt;/h2&gt;

&lt;p&gt;Starting with Version 1.3.0, &lt;code&gt;next-export-i18n&lt;/code&gt;reads the user's default language settings from the browser. If this language is available as &lt;code&gt;i18n&lt;/code&gt; it is automatically used as the default language. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about-raw-nextexporti18n-endraw-"&gt;
  &lt;/a&gt;
  About &lt;code&gt;next-export-i18n&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This npm module provides a simple solution for Internationalization (i18n) of projects using &lt;code&gt;next export&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js already has support for internationalized (i18n) routing out-of-the-box. You can provide a list of locales, a default as well as  domain-specific locales and Next.js  automatically handles the routing. It streamlines the touring and locale parsing for nearly all existing l18n library solutions available for Next.js such as &lt;code&gt;react-intl&lt;/code&gt;, &lt;code&gt;react-i18next&lt;/code&gt;, &lt;code&gt;lingui&lt;/code&gt;, &lt;code&gt;rosetta&lt;/code&gt;, &lt;code&gt;next-intl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;&lt;code&gt;Next.js&lt;/code&gt; i18n-routing&lt;/a&gt; does not supports &lt;code&gt;next export&lt;/code&gt;.&lt;br&gt;
This means that &lt;em&gt;none&lt;/em&gt; of the i18n-libraries (which are utilizing the build in i18n-routing) is able to support fully static sites which are generated with &lt;code&gt;next export&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; provides a simple solution for Internationalization (i18n) when you want to generate a truly static website with &lt;code&gt;next export&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="//next.js:%20i18n%20with%20static%20sites"&gt;Introduction to &lt;code&gt;next-export-i18n&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sample-implementation"&gt;
  &lt;/a&gt;
  Sample implementation
&lt;/h3&gt;

&lt;p&gt;You can also take a look at the example implementation &lt;a href="https://next-export-i18n-example.vercel.app"&gt;next-export-i18n-example.vercel.app&lt;/a&gt; and its source code at &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;github: &lt;code&gt;https://github.com/martinkr/next-export-i18n-example&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; npm module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/martinkr/next-js-i18n-with-static-sites-2644"&gt;next.js: i18n with static sites (Introduction)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example implementation: &lt;a href="https://next-export-i18n-example.vercel.app"&gt;https://next-export-i18n-example.vercel.app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the npm-module: &lt;a href="https://github.com/martinkr/next-export-i18n"&gt;https://github.com/martinkr/next-export-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the example: &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;https://github.com/martinkr/next-export-i18n-example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@z734923105?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jerry Zhang&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 7th January 2022</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 07 Jan 2022 14:27:23 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-7th-january-2022-c9i</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-7th-january-2022-c9i</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-shifty"&gt;
  &lt;/a&gt;
  1. Shifty
&lt;/h3&gt;

&lt;p&gt;The fastest JavaScript animation engine on the web. Shifty is a tweening engine for JavaScript. It is a lightweight library meant to be encapsulated by higher level tools.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jeremyckahn"&gt;
        jeremyckahn
      &lt;/a&gt; / &lt;a href="https://github.com/jeremyckahn/shifty"&gt;
        shifty
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The fastest JavaScript animation engine on the web
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Shifty - The fastest JavaScript animation engine on the web&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/shifty" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/db3e80583f28ef2a533aa766df985b4706b92c4ca5d44e722fc534970f27a84f/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f736869667479" alt="Current Shifty version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;master&lt;/code&gt;: &lt;a href="https://github.com/jeremyckahn/shifty/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PwP3g2YU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jeremyckahn/shifty/workflows/CI/badge.svg%3Fbranch%3Dmaster" alt="CI"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;develop&lt;/code&gt;: &lt;a href="https://github.com/jeremyckahn/shifty/actions?query=workflow%3ACI+branch%3Adevelop"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DY9DRNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jeremyckahn/shifty/workflows/CI/badge.svg%3Fbranch%3Ddevelop" alt="CI"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shifty is a tweening engine for JavaScript. It is a lightweight library meant
to be encapsulated by higher level tools. At its core, Shifty provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best-in-class performance&lt;/li&gt;
&lt;li&gt;Interpolation of &lt;code&gt;Number&lt;/code&gt;s over time (tweening)&lt;/li&gt;
&lt;li&gt;Playback control of an individual tween&lt;/li&gt;
&lt;li&gt;Extensibility hooks for key points in the tweening process&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Promise&lt;/code&gt; support for &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is useful because it is the least amount of functionality needed to build
customizable animations. Shifty is optimized to run many times a second with
minimal processing and memory overhead, which is necessary to achieve smooth
animations.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;tween&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'shifty'&lt;/span&gt;
&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-k"&gt;async&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;element&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-smi"&gt;document&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;querySelector&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'#tweenable'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; tweenable &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-en"&gt;tween&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-en"&gt;render&lt;/span&gt;: &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; scale&lt;span class="pl-kos"&gt;,&lt;/span&gt; x &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jeremyckahn/shifty"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-readmeso"&gt;
  &lt;/a&gt;
  2. readme.so
&lt;/h3&gt;

&lt;p&gt;An online drag-and-drop editor to easily build READMEs&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/octokatherine"&gt;
        octokatherine
      &lt;/a&gt; / &lt;a href="https://github.com/octokatherine/readme.so"&gt;
        readme.so
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An online drag-and-drop editor to easily build READMEs
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
readme.so&lt;/h1&gt;
&lt;p&gt;Readme.so is an online editor to help developers make readmes for their project.&lt;/p&gt;
&lt;p&gt;Link to production site: &lt;a href="https://readme.so" rel="nofollow"&gt;readme.so&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Choose from list of sections to add to your readme&lt;/li&gt;
&lt;li&gt;Edit the contents of each section&lt;/li&gt;
&lt;li&gt;Drag and drop to rearrange sections&lt;/li&gt;
&lt;li&gt;Download your readme file&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;Contributions are always welcome!&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/octokatherine/readme.so/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways to get started.&lt;/p&gt;
&lt;h2&gt;
Tech Stack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/" rel="nofollow"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/" rel="nofollow"&gt;TailwindCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dndkit.com/" rel="nofollow"&gt;dnd kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/remarkjs/react-markdown"&gt;react-markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Running the Dev Server&lt;/h2&gt;
&lt;p&gt;To run the dev server, run &lt;code&gt;npm run dev&lt;/code&gt; and navigate to &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Feedback&lt;/h2&gt;
&lt;p&gt;Feedback is appreciated! Reach out on &lt;a href="https://twitter.com/katherinecodes" rel="nofollow"&gt;Twitter&lt;/a&gt; or submit a new issue!&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/octokatherine/readme.so/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This readme was created with &lt;a href="https://readme.so" rel="nofollow"&gt;readme.so&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/octokatherine/readme.so"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#3-epubjs"&gt;
  &lt;/a&gt;
  3. Epub.js
&lt;/h3&gt;

&lt;p&gt;Epub.js is a JavaScript library for rendering ePub documents in the browser, across many devices.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/futurepress"&gt;
        futurepress
      &lt;/a&gt; / &lt;a href="https://github.com/futurepress/epub.js"&gt;
        epub.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Enhanced eBooks in the browser.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Epub.js v0.3&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/240a1a69386f75b5dc6806e9242ae528b959d22ab856dc896d455ee4ffaf22b8/687474703a2f2f6663686173656e2e636f6d2f66757475726570726573732f66702e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/240a1a69386f75b5dc6806e9242ae528b959d22ab856dc896d455ee4ffaf22b8/687474703a2f2f6663686173656e2e636f6d2f66757475726570726573732f66702e706e67" alt="FuturePress Views"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Epub.js is a JavaScript library for rendering ePub documents in the browser, across many devices.&lt;/p&gt;
&lt;p&gt;Epub.js provides an interface for common ebook functions (such as rendering, persistence and pagination) without the need to develop a dedicated application or plugin. Importantly, it has an incredibly permissive &lt;a href="http://en.wikipedia.org/wiki/BSD_licenses" rel="nofollow"&gt;Free BSD&lt;/a&gt; license.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://futurepress.github.io/epubjs-reader/" rel="nofollow"&gt;Try it while reading Moby Dick&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Why EPUB&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b310dbc9d8da8edf507bfcdb2f6c67dc47fea861556cb99f970dd6c7baa60707/687474703a2f2f6663686173656e2e636f6d2f66757475726570726573732f776879657075622e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/b310dbc9d8da8edf507bfcdb2f6c67dc47fea861556cb99f970dd6c7baa60707/687474703a2f2f6663686173656e2e636f6d2f66757475726570726573732f776879657075622e706e67" alt="Why EPUB"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.idpf.org/epub/30/spec/epub30-overview.html" rel="nofollow"&gt;EPUB standard&lt;/a&gt; is a widely used and easily convertible format. Many books are currently in this format, and it is convertible to many other formats (such as PDF, Mobi and iBooks).&lt;/p&gt;
&lt;p&gt;An unzipped EPUB3 is a collection of HTML5 files, CSS, images and other media – just like any other website. However, it enforces a schema of book components, which allows us to render a book and its parts based on a controlled vocabulary.&lt;/p&gt;
&lt;p&gt;More specifically, the EPUB schema standardizes the table of contents, provides a manifest that enables the caching…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/futurepress/epub.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-amplify-ui"&gt;
  &lt;/a&gt;
  4. Amplify UI
&lt;/h3&gt;

&lt;p&gt;Amplify UI is an open-source UI library with cloud-connected components that are endlessly customizable, accessible, and can integrate into any application. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws-amplify"&gt;
        aws-amplify
      &lt;/a&gt; / &lt;a href="https://github.com/aws-amplify/amplify-ui"&gt;
        amplify-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Cloud-connected UI components for Android, iOS, React Native &amp;amp; Web
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b0221b7ebe904cfd5e7b338a9aa49dd8a001a472f74ca69b14da60dc4d1f6abd/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6177732d6d6f62696c652d6875622d696d616765732f6177732d616d706c6966792d6c6f676f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/b0221b7ebe904cfd5e7b338a9aa49dd8a001a472f74ca69b14da60dc4d1f6abd/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6177732d6d6f62696c652d6875622d696d616765732f6177732d616d706c6966792d6c6f676f2e706e67" alt="AWS Amplify" width="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Amplify UI&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/aws-amplify/amplify-uiLICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/1ce8a64c89111e0010b703564b78a2ad979a8fc814b4d09f73b859946a621656/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6177732d616d706c6966792f616d706c6966792d7569" alt="GitHub"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/jWVbPfC" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/678e7ea5c4e63f5b009013272b9e09b7505c7bf12b1205218c12df5264bb9933/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3330383332333035363539323438363432303f6c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://github.com/aws-amplify/amplify-ui/actions/workflows/tests.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBD_H8VH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-amplify/amplify-ui/actions/workflows/tests.yml/badge.svg" alt="Tests"&gt;&lt;/a&gt;
&lt;a href="https://github.com/aws-amplify/amplify-ui/issues?q=is%3Aissue+is%3Aopen+label%3Abug"&gt;&lt;img src="https://camo.githubusercontent.com/2085a601ebde9def1a9dd9676681ce7acc3fb70631bc36ca61b33bb26f00d873/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6177732d616d706c6966792f616d706c6966792d75692f6275673f636f6c6f723d643733613461266c6162656c3d62756773" alt="Open Bugs"&gt;&lt;/a&gt;
&lt;a href="https://github.com/aws-amplify/amplify-ui/issues?q=is%3Aissue+label%3Afeature-request+is%3Aopen"&gt;&lt;img src="https://camo.githubusercontent.com/7db90b3bdf54e51c522b5441ad3245953b7c98dc3f167cd621d2cbdeacb7f5c2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6177732d616d706c6966792f616d706c6966792d75692f666561747572652d726571756573743f636f6c6f723d666639303031266c6162656c3d666561747572652532307265717565737473" alt="Feature Requests"&gt;&lt;/a&gt;
&lt;a href="https://github.com/aws-amplify/amplify-ui/milestone/1"&gt;&lt;img src="https://camo.githubusercontent.com/8c92d26e51f7fb1a228e7a907f5691d88963a63476e73787a45f1a0ca21e1ac0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6d696c6573746f6e65732f70726f67726573732d70657263656e742f6177732d616d706c6966792f616d706c6966792d75692f31" alt="GA milestone"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amplify UI is an open-source UI library with cloud-connected components that are endlessly customizable, accessible, and can integrate into &lt;em&gt;any&lt;/em&gt; application. Amplify UI consists of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connected components that simplify complex cloud-connected workflows, like Authenticator.&lt;/li&gt;
&lt;li&gt;Primitive components that create consistency across Amplify UI and allow you to build complete applications that fit your brand, like Buttons and Badges.&lt;/li&gt;
&lt;li&gt;Data-bound components that make it easy to display dynamic data, like DataStoreCollections.&lt;/li&gt;
&lt;li&gt;Theming capabilities that allow you to customize the appearance of Amplify UI to match your brand.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ui.docs.amplify.aws/" rel="nofollow"&gt;https://ui.docs.amplify.aws/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ui.docs.amplify.aws/getting-started/installation" rel="nofollow"&gt;https://ui.docs.amplify.aws/getting-started/installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Component Matrix&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Connected Components&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Vue&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Authenticator&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interactions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Primitives&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Vue&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Alert&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Badge&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Button&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Card&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CheckboxField&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Collection&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Divider&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expander&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flex&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grid&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heading&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Icon&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Link&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Loader&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Menu&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pagination&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PasswordField&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PhoneNumberField&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Placeholder&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;


&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RadioGroupField&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-amplify/amplify-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-projen"&gt;
  &lt;/a&gt;
  5. projen
&lt;/h3&gt;

&lt;p&gt;A new generation of project generators. projen synthesizes project configuration files such as package.json, tsconfig.json, .gitignore, GitHub Workflows, eslint, jest, etc from a well-typed definition written in JavaScript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/projen"&gt;
        projen
      &lt;/a&gt; / &lt;a href="https://github.com/projen/projen"&gt;
        projen
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A new generation of project generators
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
projen&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/projen/projen./logo/projen.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46MgC31U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/projen/projen./logo/projen.svg" alt="projen logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f7cd4fed6ea9882009225ca597ab4c36342cf06e51f035aa09a4c2cd3156d1ab/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d79656c6c6f77677265656e2e737667" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://gitpod.io/#https://github.com/projen/projen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod ready-to-code"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/projen/projen/workflows/Build/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0n2xFZ9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/projen/projen/workflows/Build/badge.svg" alt="Build"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/projen/projen/workflows/Release/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMLs0_o8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/projen/projen/workflows/Release/badge.svg" alt="Release"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2549ba7d890f293cc7a941c2165111b3c9dcebb6b157882b24d8ccae756b993c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f772f70726f6a656e2f70726f6a656e"&gt;&lt;img src="https://camo.githubusercontent.com/2549ba7d890f293cc7a941c2165111b3c9dcebb6b157882b24d8ccae756b993c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f772f70726f6a656e2f70726f6a656e" alt="Commit activity"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/projen/projen#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/18fa7459cbc042d94e413cc688f14f8582ba7bdd93e1ec0997bf7746de4e71ea/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d36332d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Define and maintain complex project configuration through code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JOIN THE &lt;a href="https://twitter.com/search?q=%23TemplatesAreEvil" rel="nofollow"&gt;#TemplatesAreEvil&lt;/a&gt; MOVEMENT!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;projen&lt;/em&gt; synthesizes project configuration files such as &lt;code&gt;package.json&lt;/code&gt;
&lt;code&gt;tsconfig.json&lt;/code&gt;, &lt;code&gt;.gitignore&lt;/code&gt;, GitHub Workflows, eslint, jest, etc from a
well-typed definition written in JavaScript.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://youtu.be/SOWMPzXtTCw" rel="nofollow"&gt;this talk&lt;/a&gt; about projen.&lt;/p&gt;
&lt;p&gt;As opposed to existing templating/scaffolding tools, &lt;em&gt;projen&lt;/em&gt; is not a one-off
generator. Synthesized files should never be manually edited (in fact, projen
enforces that). To modify your project setup, users interact with rich
strongly-typed class and execute &lt;code&gt;projen&lt;/code&gt; to update their project configuration
files.&lt;/p&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;To create a new project, run the following command and follow the instructions:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;mkdir my-project&lt;/span&gt;
$ &lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; my-project&lt;/span&gt;
$ &lt;span class="pl-s1"&gt;git init&lt;/span&gt;
$ &lt;span class="pl-s1"&gt;npx projen new PROJECT-TYPE&lt;/span&gt;
&lt;span class="pl-c1"&gt;🤖 Synthesizing project...&lt;/span&gt;
&lt;span class="pl-c1"&gt;...&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Currently supported project types (use &lt;code&gt;npx projen new&lt;/code&gt; without a type for a
list):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/projen/projen/blob/main/API.md#projen-awscdk-awscdkjavaapp"&gt;awscdk-app-java&lt;/a&gt; - AWS CDK app in Java.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/projen/projen/blob/main/API.md#projen-awscdk-awscdktypescriptapp"&gt;awscdk-app-ts&lt;/a&gt; - AWS CDK app in TypeScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/projen/projen/blob/main/API.md#projen-awscdk-awscdkconstructlibrary"&gt;awscdk-construct&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/projen/projen"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-tsup"&gt;
  &lt;/a&gt;
  6. tsup
&lt;/h3&gt;

&lt;p&gt;The simplest and fastest way to bundle your TypeScript libraries.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/egoist"&gt;
        egoist
      &lt;/a&gt; / &lt;a href="https://github.com/egoist/tsup"&gt;
        tsup
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The simplest and fastest way to bundle your TypeScript libraries.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
tsup&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://npm.im/tsup" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/959944fd479107695bbb294caabec7a51e1f866da95d83185335b9a848ff1095/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f74737570" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://npm.im/tsup" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2d047fa11d068cfefdd59074d68f856efad18f7108801ec19926da7ca09737ba/68747470733a2f2f62616467656e2e6e65742f6e706d2f646d2f74737570" alt="npm downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bundle your TypeScript library with no config, powered by &lt;a href="https://github.com/evanw/esbuild"&gt;esbuild&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
👀 What can it bundle?&lt;/h2&gt;
&lt;p&gt;Anything that's supported by Node.js natively, namely &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt;. And TypeScript &lt;code&gt;.ts&lt;/code&gt;, &lt;code&gt;.tsx&lt;/code&gt;. &lt;a href="https://tsup.egoist.sh/#css-support" rel="nofollow"&gt;CSS support is experimental&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
⚙️ Install&lt;/h2&gt;
&lt;p&gt;Install it locally in your project folder:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm i tsup -D
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Or Yarn&lt;/span&gt;
yarn add tsup --dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can also install it globally but it's not recommended.&lt;/p&gt;
&lt;h2&gt;
📖 Usage&lt;/h2&gt;
&lt;h3&gt;
Bundle files&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;tsup [...files]&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Files are written into &lt;code&gt;./dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can bundle multiple files in one go:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;tsup src/index.ts src/cli.ts&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This will output &lt;code&gt;dist/index.js&lt;/code&gt; and &lt;code&gt;dist/cli.js&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
📚 Documentation&lt;/h2&gt;
&lt;p&gt;For complete usages, please dive into the &lt;a href="https://tsup.egoist.sh" rel="nofollow"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For all configraution options, please see &lt;a href="https://paka.dev/npm/tsup#module-index-export-Options" rel="nofollow"&gt;the API docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
💬 Discussions&lt;/h2&gt;
&lt;p&gt;Head over to the &lt;a href="https://github.com/egoist/tsup/discussions"&gt;discussions&lt;/a&gt; to share your ideas.&lt;/p&gt;
&lt;h2&gt;
Sponsors&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/sponsors/egoist"&gt;&lt;img src="https://camo.githubusercontent.com/ec986fabfc55d406a3fe1a0fc41c15e1db6859ba1f818f660168e37dfd27e480/68747470733a2f2f73706f6e736f72732d696d616765732e65676f6973742e73682f73706f6e736f72732e737667" alt="sponsors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Project Stats&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/411326b2d5c0f5b2f44b361cc341a3016956f59e0dfdadf732013c9690bcdc48/68747470733a2f2f7265706f62656174732e6178696f6d2e636f2f6170692f656d6265642f346566333631656338343435623333633264616234353165316432333738343031353833346337322e737667"&gt;&lt;img src="https://camo.githubusercontent.com/411326b2d5c0f5b2f44b361cc341a3016956f59e0dfdadf732013c9690bcdc48/68747470733a2f2f7265706f62656174732e6178696f6d2e636f2f6170692f656d6265642f346566333631656338343435623333633264616234353165316432333738343031353833346337322e737667" alt="Alt" title="Repobeats analytics image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;MIT © &lt;a href="https://github.com/sponsors/egoist"&gt;EGOIST&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/egoist/tsup"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#7-sakura"&gt;
  &lt;/a&gt;
  7. Sakura
&lt;/h3&gt;

&lt;p&gt;A minimal classless css framework / theme. Sakura supports extremely easy theming support using variables for duotone color scheming. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/oxalorg"&gt;
        oxalorg
      &lt;/a&gt; / &lt;a href="https://github.com/oxalorg/sakura"&gt;
        sakura
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🌸 a minimal css framework/theme.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://org/projects/sakura" rel="nofollow"&gt;sakura&lt;/a&gt;: a minimal &lt;em&gt;&lt;strong&gt;classless&lt;/strong&gt;&lt;/em&gt; css &lt;em&gt;framework&lt;/em&gt; / &lt;strong&gt;theme&lt;/strong&gt;.&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/sakura.css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d679ad46953c18477b7e8fe2ac46fd424b522952c68e83aa13994d5be9bdc142/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f73616b7572612e6373732e7376673f636f6c6f72423d393832633631" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[Go to &lt;a href="https://github.com/oxalorg/sakura"&gt;Github repository&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/oxalorg/sakurasakura160.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMwBqHTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oxalorg/sakurasakura160.jpg" alt="The cherry blossoms"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The perfect blossom is a rare thing. You could spend your life looking for one, and it would not be a wasted life&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just drop in &lt;code&gt;sakura.css&lt;/code&gt; to any webpage and go from
ugly looking 1900's website to a pretty modern website
in literally 0 seconds.&lt;/p&gt;
&lt;p&gt;Easy to customize and build on top of sakura.&lt;/p&gt;
&lt;p&gt;Sakura supports extremely easy theming support using
variables for duotone color scheming. Comes with several
existing themes, can be found in the &lt;code&gt;css&lt;/code&gt; folder of this
repository.&lt;/p&gt;
&lt;h2&gt;
Demo&lt;/h2&gt;
&lt;p&gt;Compare a live page &lt;strong&gt;WITH&lt;/strong&gt; and &lt;strong&gt;WITHOUT&lt;/strong&gt; sakura.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://oxal.org/projects/sakura/demo" rel="nofollow"&gt;https://oxal.org/projects/sakura/demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also my blog is a nice place to check sakura in action with heavy text (it has a change theme button on the top as well):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://oxal.org/blog/" rel="nofollow"&gt;oxal.org/blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Bookmark&lt;/h2&gt;
&lt;p&gt;Don't want to develop using sakura, but instead want to use it
on websites with…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/oxalorg/sakura"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-visual-studio-code-remote-development-and-github-codespaces"&gt;
  &lt;/a&gt;
  8. Visual Studio Code Remote Development and GitHub Codespaces
&lt;/h3&gt;

&lt;p&gt;A repository of development container definitions for the VS Code Remote - Containers extension and GitHub Codespaces&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/microsoft"&gt;
        microsoft
      &lt;/a&gt; / &lt;a href="https://github.com/microsoft/vscode-dev-containers"&gt;
        vscode-dev-containers
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A repository of development container definitions for the VS Code Remote - Containers extension and GitHub Codespaces
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
VS Code Remote / GitHub Codespaces Container Definitions&lt;/h1&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href="https://aka.ms/vscode-remote/download/extension" rel="nofollow"&gt;&lt;img width="128px" src="https://camo.githubusercontent.com/b68dfc524faaa972f3f4a59750b451fffff075e3035bd8de7e51c2ea4b5ac409/68747470733a2f2f6d6963726f736f66742e6769746875622e696f2f7673636f64652d72656d6f74652d72656c656173652f696d616765732f72656d6f74652d657874656e73696f6e7061636b2e706e67" alt="Visual Studio Code logo"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Visual Studio Code Remote Development and GitHub Codespaces&lt;/strong&gt;&lt;br&gt;
&lt;i&gt;Open your code in the cloud, in a local container, on a remote machine, or in WSL and take advantage of VS Code's full feature set
&lt;/i&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href="https://www.docker.com" rel="nofollow"&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. The &lt;a href="https://aka.ms/vscode-remote/download/containers" rel="nofollow"&gt;VS Code Remote - Containers&lt;/a&gt; extension and &lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespaces&lt;/a&gt; allow you to open or clone code in a local or cloud-hosted dev container and take advantage of VS Code's full development feature set.&lt;/p&gt;
&lt;p&gt;This repository contains a set of &lt;strong&gt;dev container definitions&lt;/strong&gt; to help get you up and running with a containerized environment. The definitions describe the appropriate container image, runtime arguments for starting the container, and VS Code extensions that should be installed. Each provides a container configuration file (&lt;code&gt;devcontainer.json&lt;/code&gt;) and other needed files that you can drop…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/microsoft/vscode-dev-containers"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-aframe"&gt;
  &lt;/a&gt;
  9. A-Frame
&lt;/h3&gt;

&lt;p&gt;A web framework for building virtual reality experiences.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aframevr"&gt;
        aframevr
      &lt;/a&gt; / &lt;a href="https://github.com/aframevr/aframe"&gt;
        aframe
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🅰️ web framework for building virtual reality experiences.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
A-Frame&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://aframe.io" rel="nofollow"&gt;&lt;img width="480" alt="A-Frame" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SnjBYszj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/674727/32120889-230ef110-bb0f-11e7-908c-76e39aa43149.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;A web framework for building virtual reality experiences.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://travis-ci.org/aframevr/aframe" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e984dd53fd7574a5cf3261dded026ded19c723df5f5d0430ca19506cb61ff191/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f616672616d6576722f616672616d652e7376673f7374796c653d666c61742d737175617265" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://codecov.io/gh/aframevr/aframe" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/32dbf3c584b942b2f3b5888104d79cac717b372392fe47a03132309b717a9271/68747470733a2f2f636f6465636f762e696f2f67682f616672616d6576722f616672616d652f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.org/package/aframe" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/fcf3945f8c964ffee7f68191a010bf449fd7f87efa06356234d936585d94ae2e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f616672616d652e7376673f7374796c653d666c61742d737175617265" alt="Downloads"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.org/package/aframe" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/8c83082c3ef3859b46b85a04202114426615d5a203b285f015e0dffbf088a52f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f616672616d652e7376673f7374796c653d666c61742d737175617265" alt="Version"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.com/package/aframe" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/d679132107f41b1a62b3baa813d45812e36c13ea8252a3fb8903c162859729a9/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f616672616d652e7376673f7374796c653d666c61742d737175617265" alt="License"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
  &lt;a href="https://aframe.io" rel="nofollow"&gt;Site&lt;/a&gt;
  —
  &lt;a href="https://aframe.io/docs/" rel="nofollow"&gt;Docs&lt;/a&gt;
  —
  &lt;a href="https://aframe.io/school/" rel="nofollow"&gt;School&lt;/a&gt;
  —
  &lt;a href="https://aframevr.slack.com/join/shared_invite/zt-f6rne3ly-ekVaBU~Xu~fsZHXr56jacQ" rel="nofollow"&gt;Slack&lt;/a&gt;
  —
  &lt;a href="https://aframe.io/blog/" rel="nofollow"&gt;Blog&lt;/a&gt;
  —
  &lt;a href="https://aframe.io/subscribe/" rel="nofollow"&gt;Newsletter&lt;/a&gt;
&lt;/div&gt;

&lt;h3&gt;
Special Sponsors&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://planetvoodoo.org/" rel="nofollow"&gt;
    &lt;img width="120px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--da_Vd1jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/39342/112707090-da492580-8e65-11eb-88c5-be39f48544f6.jpg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;a href="https://supermedium.com/supercraft" rel="nofollow"&gt;
  &lt;img alt="Supercraft" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbNs1Sdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/674727/41085457-f5429566-69eb-11e8-92e5-3210e4c6c4a0.gif" height="190" width="32%"&gt;
&lt;/a&gt;
&lt;a href="https://aframe.io/a-painter/?url=https://ucarecdn.com/962b242b-87a9-422c-b730-febdc470f203/" rel="nofollow"&gt;
  &lt;img alt="A-Painter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MrAtEfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/674727/24531388/acfc3dda-156d-11e7-8563-5bd75252f70f.gif" height="190" width="32%"&gt;
&lt;/a&gt;
&lt;a href="https://supermedium.com" rel="nofollow"&gt;
  &lt;img alt="Supermedium" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8YKW7BM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/674727/37294616-7212cd20-25d3-11e8-9e7f-c0c61074f1e0.png" height="190" width="32%"&gt;
&lt;/a&gt;
&lt;a href="https://aframe.io/a-blast/" rel="nofollow"&gt;
  &lt;img alt="A-Blast" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ffz39tZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/674727/24531440/0336e66e-156e-11e7-95c2-f2e6ebc0393d.gif" height="190" width="32%"&gt;
&lt;/a&gt;
&lt;a href="https://aframe.io/a-saturday-night/" rel="nofollow"&gt;
  &lt;img alt="A-Saturday-Night" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z14PK7kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/674727/24531477/44272daa-156e-11e7-8ef9-d750ed430f3a.gif" height="190" width="32%"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/googlecreativelab/webvr-musicalforest"&gt;
  &lt;img alt="Musical Forest by @googlecreativelab" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi6dVlib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/674727/25109861/b8e9ec48-2394-11e7-8f2d-ea1cd9df69c8.gif" height="190" width="32%"&gt;
&lt;/a&gt;
&lt;p&gt;&lt;em&gt;Find more examples on &lt;a href="https://aframe.io" rel="nofollow"&gt;the homepage&lt;/a&gt;, &lt;a href="https://aframe.io/blog/" rel="nofollow"&gt;A Week of A-Frame&lt;/a&gt;, and &lt;a href="https://webvr.directory" rel="nofollow"&gt;WebVR Directory&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;👓 &lt;strong&gt;Virtual Reality Made Simple&lt;/strong&gt;: A-Frame handles the 3D and WebVR
boilerplate required to get running across platforms including mobile, desktop, Vive, and Rift just by dropping in &lt;code&gt;&amp;lt;a-scene&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;❤️ &lt;strong&gt;Declarative HTML&lt;/strong&gt;: HTML is easy to read and copy-and-paste. Since
A-Frame can be used from HTML, A-Frame is accessible to everyone: web
developers, VR enthusiasts, educators, artists, makers, kids.&lt;/p&gt;
&lt;p&gt;🔌 &lt;strong&gt;Entity-Component Architecture&lt;/strong&gt;: A-Frame is a powerful
framework on top of three.js, providing a declarative, composable, reusable
entity-component structure for three.js. While A-Frame can be used from HTML,
developers have unlimited access to JavaScript, DOM APIs, three.js, WebVR, and
WebGL.&lt;/p&gt;
&lt;p&gt;⚡ &lt;strong&gt;Performance&lt;/strong&gt;: A-Frame is a thin…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aframevr/aframe"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-tippyjs"&gt;
  &lt;/a&gt;
  10. Tippy.js
&lt;/h3&gt;

&lt;p&gt;The complete tooltip, popover, dropdown, and menu solution for the web&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/atomiks"&gt;
        atomiks
      &lt;/a&gt; / &lt;a href="https://github.com/atomiks/tippyjs"&gt;
        tippyjs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tooltip, popover, dropdown, and menu library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/atomiks/tippyjs/raw/master/logo.png"&gt;&lt;img alt="Tippy.js logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bT-a-Pfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/atomiks/tippyjs/raw/master/logo.png" height="117"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;
Tippy.js&lt;/h1&gt;
  &lt;p&gt;The complete tooltip, popover, dropdown, and menu solution for the web&lt;/p&gt;
  &lt;a href="https://www.npmjs.com/package/tippy.js" rel="nofollow"&gt;
   &lt;img src="https://camo.githubusercontent.com/e3f899a91bed7d0d217c5f8d202358fb5fcc1687a1b41512e6e07791cfb0bb35/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74697070792e6a732e7376673f636f6c6f723d253233353539396666267374796c653d666f722d7468652d6261646765" alt="npm Downloads per Month"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/atomiks/tippyjs/blob/master/LICENSE"&gt;
    &lt;img src="https://camo.githubusercontent.com/124d4c192907968fcb9ee883155dad725d585fd0b015fe179017527c45a6fdf3/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f74697070792e6a732e7376673f636f6c6f723d253233633637376366267374796c653d666f722d7468652d6261646765" alt="MIT License"&gt;
  &lt;/a&gt;
  &lt;br&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;h2&gt;
Demo and Documentation&lt;/h2&gt;
&lt;p&gt;➡️ &lt;strong&gt;&lt;a href="https://atomiks.github.io/tippyjs/" rel="nofollow"&gt;View the latest demo &amp;amp; docs here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/atomiks/tippyjs/blob/master/MIGRATION_GUIDE.md"&gt;Migration Guide&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;h3&gt;
Package Managers&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm&lt;/span&gt;
npm i tippy.js

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Yarn&lt;/span&gt;
yarn add tippy.js&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Import the &lt;code&gt;tippy&lt;/code&gt; constructor and the core CSS:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;tippy&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'tippy.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;'tippy.js/dist/tippy.css'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
CDN&lt;/h3&gt;
&lt;div class="highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://unpkg.com/@popperjs/core@2&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://unpkg.com/tippy.js@6&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The core CSS comes bundled with the default unpkg import.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;For detailed usage information,
&lt;a href="https://atomiks.github.io/tippyjs/v6/getting-started/" rel="nofollow"&gt;visit the docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Component Wrappers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;React: &lt;a href="https://github.com/atomiks/tippyjs-react"&gt;@tippyjs/react&lt;/a&gt; (official)&lt;/li&gt;
&lt;li&gt;Ember: &lt;a href="https://github.com/nag5000/ember-tippy"&gt;ember-tippy&lt;/a&gt; (unofficial)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/atomiks/tippyjs"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/coding-horror/basic-computer-games"&gt;Basic Computer Games&lt;/a&gt; +1,371 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +1,232 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/awesome-selfhosted/awesome-selfhosted"&gt;Awesome Self Hostsed&lt;/a&gt; +795 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tauri-apps/tauri"&gt;Tauri&lt;/a&gt; +646 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +617stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/coding-horror/basic-computer-games"&gt;Basic Computer Games&lt;/a&gt; +69%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hiukim/mind-ar-js"&gt;MindAR&lt;/a&gt; +58%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lucafalasco/scroll-snap"&gt;scroll-snap&lt;/a&gt; +43%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/artsy/fresnel"&gt;fresnel&lt;/a&gt; +16%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nolanlawson/fuite"&gt;fuite&lt;/a&gt; +10%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/Eugeny/tabby"&gt;Tabby&lt;/a&gt; +6,033 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +4,444 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,747 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/awesome-selfhosted/awesome-selfhosted"&gt;Awesome Self Hostsed&lt;/a&gt; +3,723 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +3,311 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/picocss/pico"&gt;Pico&lt;/a&gt; +400%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rakkasjs/rakkasjs"&gt;Rakkas&lt;/a&gt; +141%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LeaVerou/md-block"&gt;md-block&lt;/a&gt; +107%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coding-horror/basic-computer-games"&gt;Basic Computer Games&lt;/a&gt; +70%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Akryum/peeky"&gt;Peeky&lt;/a&gt; +70%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Build WhatsApp and SMS CRM app in 10 mins using low code</title>
      <author>Shubhendra Singh Chauhan</author>
      <pubDate>Fri, 07 Jan 2022 14:14:11 +0000</pubDate>
      <link>https://dev.to/tooljet/build-whatsapp-and-sms-crm-app-in-10-mins-using-low-code-12o5</link>
      <guid>https://dev.to/tooljet/build-whatsapp-and-sms-crm-app-in-10-mins-using-low-code-12o5</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Here's the video tutorial for building WhatsApp and SMS CRM app. This app can let you send WhatsApp messages and SMS directly to your customers. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ToolJet (&lt;a href="https://github.com/ToolJet/ToolJet):"&gt;https://github.com/ToolJet/ToolJet):&lt;/a&gt; It is a free and open-source, low-code platform that allows you to quickly build tools. &lt;a href="https://tooljet.com/"&gt;Sign-in here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google Sheets: Use this &lt;a href="https://docs.google.com/spreadsheets/d/1gIfeXMmgJAKrWmm_MtivOj68zZM_H9D8qR5mzVvzo6c/edit?usp=sharing"&gt;mock data&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twilio account with an active messaging service&lt;/li&gt;
&lt;li&gt;WhatsApp's click to chat API endpoint: &lt;a href="https://api.whatsapp.com/send?phone=phonenumber&amp;amp;text=message"&gt;https://api.whatsapp.com/send?phone=phonenumber&amp;amp;text=message&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8PfcyJJmg9A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>13 Ultimate UI/UX website inspiration for Designers and Developers</title>
      <author>devdefinitive</author>
      <pubDate>Fri, 07 Jan 2022 13:30:47 +0000</pubDate>
      <link>https://dev.to/devdefinitive/13-ultimate-uiux-website-inspiration-for-designers-and-developers-36kd</link>
      <guid>https://dev.to/devdefinitive/13-ultimate-uiux-website-inspiration-for-designers-and-developers-36kd</guid>
      <description>&lt;p&gt;Regardless of whether you're an accomplished website designer or developer or simply a beginner, a website architecture venture's extension can rapidly limit the quantity of assets accessible, making it extreme to track down the correct website design for motivation for your assignment. Let's take a look into some amazing designs, layouts and animations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bennett-tea"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.bennett-tea.com/"&gt;Bennett Tea&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1X9eO4KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620369797595/Re0ClLV3Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1X9eO4KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620369797595/Re0ClLV3Z.png" alt="frame_generic_dark(2).png" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bennett is a modern brand offering customers high-quality tea for different tastes. The website is minimal, simple and so clean. You can try writing the codes of the layout(not easy though). Website made with WebFlow. &lt;br&gt;
Visit -&amp;gt; &lt;a href="https://www.bennett-tea.com/"&gt;Bennett Tea&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vela"&gt;
  &lt;/a&gt;
  &lt;a href="https://welcome.getvela.com/"&gt;Vela&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WY8FNW05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620370260673/x6rXhfd6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WY8FNW05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620370260673/x6rXhfd6t.png" alt="frame_generic_dark(3).png" width="880" height="472"&gt;&lt;/a&gt;&lt;br&gt;
The landing page is so attractive and the color combinations are so warm. Minimal and smooth scroll. &lt;br&gt;
Visit -&amp;gt;  &lt;a href="https://welcome.getvela.com/"&gt;Vela&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netrixdigital"&gt;
  &lt;/a&gt;
  &lt;a href="https://netrixdigital.com/"&gt;NetrixDigital&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1ETylxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620400753171/M2MAwXQry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1ETylxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620400753171/M2MAwXQry.png" alt="frame_generic_dark(5).png" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of web design agency. Has a cool scroll effect. &lt;br&gt;
Visit -&amp;gt;  &lt;a href="https://netrixdigital.com/"&gt;NetrixDigital&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zorka-agency"&gt;
  &lt;/a&gt;
  &lt;a href="https://zorka.agency/"&gt; Zorka Agency&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpY9N0XW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620400347893/u5cFqpDq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpY9N0XW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620400347893/u5cFqpDq6.png" alt="frame_generic_dark(4).png" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of digital marketing agency. Amazing color and Scroll. &lt;br&gt;
Visit -&amp;gt; &lt;a href="https://zorka.agency/"&gt; Zorka Agency&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shaky-graves"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.shakeygraves.com/"&gt;Shaky Graves&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4qp1X8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620531467193/QOXkx-Lvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4qp1X8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620531467193/QOXkx-Lvg.png" alt="frame_generic_dark(7).png" width="880" height="472"&gt;&lt;/a&gt;&lt;br&gt;
This website gives vibes. The amazing typography and the background video looks cool. Has aesthetic design. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://www.shakeygraves.com/"&gt;Shaky Graves&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#madeleine-dalla-photography-portfolio"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.madeleinedalla.com/"&gt;Madeleine Dalla - Photography Portfolio&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnkPe6jt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620531948521/nv1sH3RBH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnkPe6jt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620531948521/nv1sH3RBH.png" alt="frame_generic_dark(8).png" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
Madeleine Dalla is photographer from Sweden living in New York.&lt;br&gt;
Visit -&amp;gt; &lt;a href="https://www.madeleinedalla.com/"&gt;https://www.madeleinedalla.com/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#slazzer"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.slazzer.com/"&gt;Slazzer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_3z8uRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640235351891/N3ezG4pNk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_3z8uRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640235351891/N3ezG4pNk.png" alt="frame_generic_dark.png" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slazzer is an AI-based photograph editing application and  &lt;a href="https://slazzer.com"&gt;background remover&lt;/a&gt;  that can without much of a stretch eliminate or change the foundation in your pictures. This instrument is not difficult to utilize and is great for online advertisers who routinely manage photographs and are hoping to save time, cash, and exertion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Utilizing this tool is speedy and simple as you don't need to manually edit the photograph while eliminating or changing the foundation. One more beneficial thing here is that the entire course of background editing essentially begins with transferring a picture and sitting tight for a couple of moments just to get the moment result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Paid plan starts at $13 per month for 100 credits. The free version offers low-resolution images.**&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#studio-regale"&gt;
  &lt;/a&gt;
  &lt;a href="https://studioregale.com/"&gt;Studio Regale&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsrGC3Ki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620532287338/kqSfXCwUy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsrGC3Ki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620532287338/kqSfXCwUy.png" alt="frame_generic_dark(9).png" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Containing a lot of animations that suits with the background animations. &lt;br&gt;
Visit -&amp;gt;  &lt;a href="https://studioregale.com/"&gt;Studio Regale&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#portfolio-of-ivan"&gt;
  &lt;/a&gt;
  &lt;a href="http://ivang-design.com/"&gt;Portfolio of Ivan&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOtI26WW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620532511480/lx_jDwaEo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOtI26WW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620532511480/lx_jDwaEo.png" alt="frame_generic_dark(10).png" width="880" height="472"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of Ivan, he is a front-end developer and designer. &lt;br&gt;
Visit -&amp;gt; &lt;a href="http://ivang-design.com/"&gt;Portfolio of Ivan&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ronnie-feng-portfolio"&gt;
  &lt;/a&gt;
  &lt;a href="https://ronniefeng.com/"&gt;Ronnie Feng Portfolio&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dm6AYMhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620538391942/nhohl-03t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dm6AYMhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620538391942/nhohl-03t.png" alt="frame_generic_dark(11).png" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of Ronnie Feng built with TypeScript and is  &lt;a href="https://github.com/lavaboy1738/Portfolio"&gt;Open Source&lt;/a&gt;  on Github. The animation are sick on his portfolio, he has used GSAP🤯. &lt;br&gt;
Visit -&amp;gt; &lt;a href="https://ronniefeng.com/"&gt;Ronnie Feng Portfolio&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sapiens"&gt;
  &lt;/a&gt;
  &lt;a href="https://sapiens.ui8.net/6m3c3c2"&gt;Sapiens&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UO_ndXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602939331321/5fSOuNtI-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UO_ndXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602939331321/5fSOuNtI-.png" alt="7.png" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#liu"&gt;
  &lt;/a&gt;
  &lt;a href="http://iamliu.com/en/"&gt;Liu&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vEREZZpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602987540648/rzXwpWZaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEREZZpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602987540648/rzXwpWZaf.png" alt="9.png" width="880" height="502"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of Designer. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="http://iamliu.com/en/"&gt;Liu&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simon-daufresne"&gt;
  &lt;/a&gt;
  &lt;a href="https://simondaufresne.com/"&gt;Simon Daufresne&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aHo-f3PX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1603597461609/UzPs7cA60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aHo-f3PX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1603597461609/UzPs7cA60.png" alt="4.png" width="880" height="502"&gt;&lt;/a&gt;&lt;br&gt;
This has a great scroll feature. Simon Daufresne is an independent graphic designer based in Paris. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://simondaufresne.com/"&gt;Simon Daufresne&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#volcan"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.volcan.com/en"&gt;Volcan&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cJogO5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602987776478/4I39Nl7XZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cJogO5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602987776478/4I39Nl7XZ.png" alt="10.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;There are literally thousands of trends come every year. But only some get popular. You can use your skills to code something like them or better then them. I'll also hook you up for some weeks with design trends. You can follow us or subscribe to our  &lt;a href="https://www.devintro.com/"&gt;newsletter&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>How to Start Using Typescript</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 07 Jan 2022 13:03:52 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-start-using-typescript-3ki0</link>
      <guid>https://dev.to/codesphere/how-to-start-using-typescript-3ki0</guid>
      <description>&lt;p&gt;One of the most significant innovations in web development in the past decade has been the shift towards Typescript. As more and more employers are looking to limit tech debt, learning Typescript is becoming essential to landing a job as a web developer.&lt;/p&gt;

&lt;p&gt;While dynamically-typed languages make life easier for the developer in the short run, it can become the reason for unwanted bugs that aren’t caught until runtime. We can avoid this problem with the help of TypeScript. Let’s take a closer look&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h3&gt;

&lt;p&gt;In the simplest of terms, TypeScript is a superset of JavaScript. This implies that while conventional JavaScript code will work the same in TypeScript, it will also have an extra set of features making our code cleaner and better. TypeScript uses a compiler known as tsc to check for errors in the code and generates(technically known as emitting) the JavaScript equivalent for use in web applications. &lt;/p&gt;

&lt;p&gt;TypeScript can also be referred to as a statically typed version of Javascript but we would be overlooking a plethora of other features that TypeScript has to offer. In the next section, we take a look at some of the advantages of using TypeScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-typescript"&gt;
  &lt;/a&gt;
  Advantages of using TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript has the following features to offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Strong typing&lt;/strong&gt; - TypeScript places a lot of emphasis on the type of variables being used in the code. If the variable is assigned a value that doesn’t match the type, the TypeScript compiler tsc shows an error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Object-oriented features&lt;/strong&gt; - TypeScript introduces a whole lot of object-oriented concepts that help make the code easier to manage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compile-time errors&lt;/strong&gt; - Since there is a compilation step involved, most of the errors get caught at compile time instead of run time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emitting with errors&lt;/strong&gt; - TypeScript will inform the developer about the potential errors in the code but it will make sure to generate the equivalent JavaScript to keep the development process running. The final decision is up to the developer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Great tooling&lt;/strong&gt; - TypeScript provides access to a lot of great tools which help in editing, error checking, etc. as you type your code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at how we can do that with this simple demo that highlights a few of the above-mentioned features as well.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-use-typescript"&gt;
  &lt;/a&gt;
  How to use TypeScript
&lt;/h3&gt;

&lt;p&gt;Before moving on to the main demo and looking at a scenario similar to real-world applications let’s go through the basic building blocks of TypeScript first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-primitives"&gt;
  &lt;/a&gt;
  The Primitives
&lt;/h3&gt;

&lt;p&gt;The usual JavaScript primitives number, string, and boolean are present here as well. In addition, you can do type annotation to fix the type of the variable at the time of declaration. TypeScript also infers the type when the variable is already defined. TypeScript also has a special type called any which is used to avoid type checking errors on a particular variable.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#functions-amp-objects"&gt;
  &lt;/a&gt;
  Functions &amp;amp; Objects
&lt;/h3&gt;

&lt;p&gt;Functions also follow a similar pattern for type annotation where the parameter types are mentioned the same as for regular variables while the return type is mentioned between the parentheses and curly braces. Anonymous functions use a TypeScript feature called contextual typing where the type is inferred from the context of the function usage.&lt;/p&gt;

&lt;p&gt;Objects are almost the same as JavaScript except for the fact that the types get inferred for every property inside it. Accessing properties that don’t exist gives a compiler error.&lt;br&gt;
TypeScript gives us the option of creating objects using type aliases (cannot be extended) or interface(can be extended).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#types-on-top-of-javascript"&gt;
  &lt;/a&gt;
  Types on top of JavaScript
&lt;/h3&gt;

&lt;p&gt;TypeScript adds some of its own types as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tuples are arrays that have their element types already annotated so we cannot save any other type on that location.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enum’s involve giving human-readable identifiers to numbers/strings. This makes it easier to manage code and avoid the hassle of memorizing fixed values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unions allow you to use the same variable with multiple types of data without worrying about type errors. This is achieved by annotating multiple types on the same variable using the pipe(|) symbol.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#using-typescript-in-a-project"&gt;
  &lt;/a&gt;
  Using Typescript in a Project
&lt;/h3&gt;

&lt;p&gt;Since we are now familiar with the basic blocks of TypeScript, let’s build a small application and see how we can use it to write better code. This application will take two numbers as input and log their sum onto the browser console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Before we create the demo we need to set up TypeScript on our machine. Follow the instructions below to set up TypeScript on your machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/download"&gt;https://www.typescriptlang.org/download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Create two files &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;app.ts&lt;/code&gt;. Make sure to call &lt;code&gt;app.js&lt;/code&gt; inside the HTML file. We will use the &lt;code&gt;app.ts&lt;/code&gt; to emit the &lt;code&gt;app.js&lt;/code&gt; file for use in the browser environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Create the &lt;code&gt;index.html&lt;/code&gt; as shown below. This file will contain two inputs for numbers and one add button. We will log the sum of the two numbers onto the console.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Inside the &lt;code&gt;app.ts&lt;/code&gt; file add the following code. This TypeScript code emits the JavaScript file which we will use to take the values from the DOM, adds them, and logs the result on the browser console.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; To emit the &lt;code&gt;app.js&lt;/code&gt;, go to your terminal and run the following command to compile the &lt;code&gt;app.ts&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tsc —target es2015 app.ts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure to run this inside the folder where your &lt;code&gt;app.ts&lt;/code&gt; is located. As mentioned earlier, tsc is the TypeScript compiler. This will compile our &lt;code&gt;app.ts&lt;/code&gt; and emit &lt;code&gt;app.js&lt;/code&gt; and generate error messages in case of any errors.&lt;/p&gt;

&lt;p&gt;The target flag is required to make sure the JavaScript emitted follows the ES2015 standard. By default, tsc emits ES3 standard which is pretty old.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; If you are using the code given above, it should work straight away. To see TypeScript in action, you need to remove the type annotations. Every time you make a change you need to compile the &lt;code&gt;app.ts&lt;/code&gt; again. Changes that don’t conform to TypeScript will generate errors. It will still, however, generate the JavaScript and you can even run it but it might give unexpected results. &lt;/p&gt;




&lt;p&gt;We’ve just scratched the surface with what TypeScript has to offer! The biggest thing that you can do to get more familiar with typescript is begin to use it in your passion projects. The more comfortable you are working with Typescript, the easier time you’ll have using it to write clean code at your company.&lt;/p&gt;

&lt;p&gt;Looking for a place to deploy that clean code? Check out &lt;a href="https://link.codesphere.com/HN"&gt;Codesphere&lt;/a&gt;, the only cloud provider that makes deploying in the cloud as easy as testing locally.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>ETHEREAL : A Decentralized Virtual Banking system - Part II</title>
      <author>Shashank Shekhar</author>
      <pubDate>Fri, 07 Jan 2022 12:19:16 +0000</pubDate>
      <link>https://dev.to/nitdgplug/ethereal-a-decentralized-virtual-banking-system-part-ii-3ppf</link>
      <guid>https://dev.to/nitdgplug/ethereal-a-decentralized-virtual-banking-system-part-ii-3ppf</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a follow-up article from our previous post.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nitdgplug" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HE_Gmi8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_UxiaVU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2815/84b6cf38-cd43-47e2-a3fc-31757fa6c382.png" alt="GNU/Linux Users' Group, NIT Durgapur" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHo2SzK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hnKVK1Xj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601612/ad28e989-4063-43d8-8a6b-77925dacc28c.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nitdgplug/ethereal-a-decentralized-virtual-banking-system-part-i-1mol" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;ETHEREAL  : A Decentralized Virtual Banking system - Part I&lt;/h2&gt;
      &lt;h3&gt;Shashank Shekhar for GNU/Linux Users' Group, NIT Durgapur ・ Jan 7 ・ 26 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNf1tx2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4ai3n88chf1eygc3ddw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNf1tx2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4ai3n88chf1eygc3ddw.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous post, we discussed the features like &lt;strong&gt;Creating a new account, Displaying Accounts, Account Details and Adding Balance&lt;/strong&gt;. Today, let us learn how can we add features like : &lt;strong&gt;Withdrawing Balance, Transfer Amount to other virtual accounts on the Bank and Displaying Transaction history&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#part-3-withdrawing-balance-and-transfer-amount-to-other-virtual-accounts-on-the-bank"&gt;
  &lt;/a&gt;
  Part 3 : Withdrawing Balance and Transfer Amount to other virtual accounts on the Bank
&lt;/h2&gt;

&lt;p&gt;Just navigate to &lt;code&gt;SimpleStorage.sol&lt;/code&gt; file and paste this inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="c1"&gt;//Function to withdraw balance from your existing accounts, the balance will be transferred to your blockchain account&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;withdrawBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;_creator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="nx"&gt;external&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;_success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;_creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;bankBalance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Withdrawal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_serial&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="nx"&gt;TransactionCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Withdrawal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Insufficient Funds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//   revert InsufficientFunds(_serial,_amount/1000000000000000000,accounts[_serial].balance-1,'Withdrawal');&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="c1"&gt;//Function to virtually send money from one bank account to other&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;transactAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_serial_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_serial&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial_2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="nx"&gt;TransactionCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TransferMoneySent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TransferMoneySent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_serial&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="nx"&gt;TransactionCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TransferMoneyReceived&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial_2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TransferMoneyReceived&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_serial_2&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Insufficient Funds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//   revert InsufficientFunds(_serial,_amount/1000000000000000000,accounts[_serial].balance-1,'TransferMoney');&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzQ0R3MP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jbr4x9pou1qip2mj36s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzQ0R3MP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jbr4x9pou1qip2mj36s.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let us move on to the Front-end part.&lt;/p&gt;

&lt;p&gt;Now, the logic for this feature is slightly counter-intuitive on the frontend but pretty straightforward in the backend, we create a &lt;strong&gt;withdrawBalance&lt;/strong&gt; function similar to the &lt;strong&gt;addBalance&lt;/strong&gt; function taking the same 3 inputs as in the &lt;strong&gt;addBalance&lt;/strong&gt; function but this function will be an external function  as it also needs to access the contract balance, and you cannot access the balance of a contract by being a part of the contract you need to access it from outside &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Withdraw balance :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ether from the Contract -&amp;gt; Ganache account&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Virtual balance of both the Contract(Bank) and the account are decreased since actual ether is transported out of the Contract.&lt;/p&gt;

&lt;p&gt;Now, how to send ether from the Contract to any other ethereum account, well this took a while to figure out, but every address has two methods to access, one is the &lt;strong&gt;balance&lt;/strong&gt; method and the other is the &lt;strong&gt;transfer&lt;/strong&gt; method, now we use the transfer method here to transfer actual ether from the Contract to any other Ganache account(here the account connected to the Metamask account).&lt;/p&gt;

&lt;p&gt;Now, like the previous function, let us add a &lt;strong&gt;withdrawBalance&lt;/strong&gt; function now according to intuition you need to subtract the amount that is passed from the frontend, and one more additional line must be added to transfer actual ether from the contract to the creator address which we pass in the &lt;strong&gt;withdrawBalance&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;Now, one check should be added though that the virtual account from which we are withdrawing balance should have an amount greater than the amount we want to withdraw.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;withdrawBalance function code snippet&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nx"&gt;_creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the syntax to transfer amount from the contract to the Ganache account connected to Metamask which is the creator account&lt;/p&gt;

&lt;p&gt;For the frontend, let us go to our &lt;strong&gt;AccountDetails&lt;/strong&gt; page let us go to another grid box, whereas done in previous components we create a form input field and a submit button the value of the form input field being the &lt;strong&gt;withdrawBalance&lt;/strong&gt; state variable which will be passed in the backend function.&lt;/p&gt;

&lt;p&gt;On the click of the submit button, we pass the &lt;strong&gt;withdrawBalance&lt;/strong&gt; function on the frontend which has a similar syntax to the previous &lt;strong&gt;addBalance&lt;/strong&gt; function but there are some minor differences.&lt;/p&gt;

&lt;p&gt;As you can notice that the value is not given, why?&lt;br&gt;
Firstly, why do we need to use the send option when we are withdrawing balance, well that's the catch, to access any function from the backend solidity contract you need to use the send option and it will cost some amount of ether definitely and after you approve the Metamask transaction, in this case, the backend function is executed and actual ether is sent from your contract to the Ganache.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withdrawBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;withdrawBalance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this you need to resolve the promise using the &lt;code&gt;.then&lt;/code&gt; and &lt;code&gt;.catch&lt;/code&gt; methods, you can follow the example given in the above &lt;strong&gt;addBalance&lt;/strong&gt; function where you need to run another &lt;strong&gt;async&lt;/strong&gt; function to get the updated Balance and set the state of the balance variable to that updated balance. You can check with your Ganache client that the amount has been added to it, proving that your withdrawal was successful. &lt;/p&gt;

&lt;p&gt;Now, let us implement the next functionality of this module, of transferring the virtual amount from one account to another, the logic for this is the simplest you can find among all the previous functions as there is no actual involvement of ether. &lt;/p&gt;

&lt;p&gt;The bank balance won't be increased or decreased as both the accounts are present on the bank, we just need to increase the virtual balance of the account we are transferring to and decrease the virtual balance of the account from which we are sending the amount.&lt;/p&gt;

&lt;p&gt;Let us quickly see the backend code for this functionality, we need to create a &lt;strong&gt;transferAmount&lt;/strong&gt; function which is a public function in the backend which by intuition takes 3 inputs, any guesses ???&lt;/p&gt;

&lt;p&gt;Well, it is the amount to be transferred, the serial number of the account from which the amount is being transferred, and the serial number of the account to which the amount is to be transferred.&lt;/p&gt;

&lt;p&gt;We need to add one check before passing the function that is the amount that is passed should be less than the balance of the account from which it is being transferred.&lt;/p&gt;

&lt;p&gt;The code snippet of the &lt;strong&gt;transferAmount&lt;/strong&gt; functionality is given below: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;transferAmount code snippet&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serial_1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serial_1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serial_2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now let us complete the frontend code for this functionality, the same old process we need to create a form in a grid box, and in this form we need to take two inputs, one is the second account serial number to which you need to send the amount, and the other is the amount to transfer and on clicking of the submit button we need to pass a &lt;strong&gt;transferAmount&lt;/strong&gt; function on the frontend.&lt;/p&gt;

&lt;p&gt;This function takes the inputs from the form values and similar to the above functions we need to use the send option to run the function on the backend.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transferAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;secondserialNumber&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and after this, we can use the similar &lt;code&gt;.then&lt;/code&gt; and &lt;code&gt;.catch&lt;/code&gt; methods to resolve this promise and run the function to again set the balance to updated balance, similar to the previous examples. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AAVKwDIbzkk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-4-displaying-transaction-history"&gt;
  &lt;/a&gt;
  Part 4 : Displaying Transaction history
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G89ZZIom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83kxnlh8omb9jzgq9bp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G89ZZIom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83kxnlh8omb9jzgq9bp1.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code&gt;SimpleStorage.sol&lt;/code&gt; file and paste this inside.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//Defining a struct to store transaction record&lt;/span&gt;
    &lt;span class="nx"&gt;struct&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;currentBalance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;amountTransacted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;transacType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;accountSerialNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vZxxsVAaR7s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;That concludes our project. You can further customize the styling of the project and also add any more new features like substituting the serial Number with the actual account and using the account for transactions.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Hope you had a great time building this project and have learned a lot more about Blockchain Technology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can find all the Resources required for this Project by clicking &lt;a href="https://github.com/shashank725/ETHEREAL/tree/main/resources"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Github repository :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/deucaleon18"&gt;
        deucaleon18
      &lt;/a&gt; / &lt;a href="https://github.com/deucaleon18/ETHEREAL"&gt;
        ETHEREAL
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
 &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062320-479568db-5d6c-4d85-8180-07d8a4a0494e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBPJtFGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062320-479568db-5d6c-4d85-8180-07d8a4a0494e.png"&gt;&lt;/a&gt;
  &lt;/div&gt;
&lt;h2&gt;
A decentralized virtual banking system &lt;/h2&gt;
&lt;br&gt;
&lt;h2&gt;
About the project:&lt;/h2&gt;
&lt;p&gt;This project was built with my teammates as a part of our club ,GNU Linux Users' Group 's event Ten Days of Code where we mentored students from all over India to build projects from scratch over a period of ten days.&lt;/p&gt;
&lt;p&gt;This DApp is supported using &lt;a href="https://docs.soliditylang.org/en/v0.8.9/" rel="nofollow"&gt;Solidity Smart Contracts&lt;/a&gt; and the frontend is built using the framework React JS, the application is deployed to the local blockchain network,&lt;a href="https://www.trufflesuite.com/ganache" rel="nofollow"&gt;Ganache&lt;/a&gt;. The whole project runs on an Ethereum supported browser, with the help of the &lt;a href="https://metamask.io/download.html" rel="nofollow"&gt;Metamask&lt;/a&gt; extension.For, building compiling and testing the written contracts, &lt;a href="https://www.trufflesuite.com/docs/truffle/getting-started/interacting-with-your-contracts" rel="nofollow"&gt;Truffle&lt;/a&gt; was used.Lastly,the frontend was connected to the solidity contract using a wonderful library,&lt;a href="https://web3js.readthedocs.io/en/v1.5.2/web3-eth-contract.html" rel="nofollow"&gt;web3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The detailed guide to build this project is present in the &lt;code&gt;resources&lt;/code&gt; folder
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
Display:&lt;/h2&gt;
&lt;h4&gt;
Here are few glimpses of the project we built.&lt;/h4&gt;
&lt;h3&gt;
HOME PAGE&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062511-e117c1f9-6c68-42ab-b023-efff08ddc074.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHJEnRgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062511-e117c1f9-6c68-42ab-b023-efff08ddc074.png" alt="ethereal1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
REGISTER HERE&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062517-dd2491e3-20c3-47b0-88f2-f6fef5cd46f2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NN7OOsi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062517-dd2491e3-20c3-47b0-88f2-f6fef5cd46f2.png" alt="ethereal2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
ACCOUNTS PAGE&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062520-70842549-e1d1-40dc-8c8f-2519a1cc982b.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---y4ZKJ3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062520-70842549-e1d1-40dc-8c8f-2519a1cc982b.png" alt="ethereal3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
ACCOUNT DETAILS&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062522-f777c71d-da22-4bdd-9808-8a25f2447afe.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZpe_Yl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062522-f777c71d-da22-4bdd-9808-8a25f2447afe.png" alt="ethereal4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
TRANSFER&lt;/h3&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/deucaleon18/ETHEREAL"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Project collaborators :&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__601717"&gt;
  
    .ltag__user__id__601717 .follow-action-button {
      background-color: #ff0000 !important;
      color: #000000 !important;
      border-color: #ff0000 !important;
    }
  
    &lt;a href="/deucaleon18" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AiG8DNmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KEVpLBYW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601717/ac894415-7fe0-47af-b8ba-959cf9e0aec2.jpeg" alt="deucaleon18 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/deucaleon18"&gt;Shubham Shantam Raju&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/deucaleon18"&gt;Open Source Enthusiast | Sophomore of NIT Durgapur | Member of GNU Linux Users' Group | Full Stack Devleoper (MERN) | Blockchain Enthusiast&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__601612"&gt;
  
    .ltag__user__id__601612 .follow-action-button {
      background-color: #d91c1c !important;
      color: #000000 !important;
      border-color: #d91c1c !important;
    }
  
    &lt;a href="/shashank725" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHo2SzK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hnKVK1Xj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601612/ad28e989-4063-43d8-8a6b-77925dacc28c.jpg" alt="shashank725 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/shashank725"&gt;Shashank Shekhar&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/shashank725"&gt;Open Source Enthusiast | Junior Developer at GNU/Linux User's Group NIT Dgp | Full Stack developer | Blockchain Fanatic&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__601724"&gt;
  
    .ltag__user__id__601724 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/ajp" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3a3_PyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gNgO7ixg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601724/2ebb0a6d-e5c4-42be-b9d2-dcc8d0d93214.jpeg" alt="ajp image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/ajp"&gt;Apurva Jyoti Paul&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/ajp"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;Connect with us :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://nitdgplug.org/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---M_bkTo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GLUG%2520website-FFFC00%3Fstyle%3Dfor-the-badge%26logo%3DU%2B1F427%26logoColor%3Dwhite" width="125" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/company/lugnitdgp/mycompany/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imBRhTaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/LinkedIn-0077B5%3Fstyle%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="linkedin" width="107" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/nitdgplug/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg7TEMKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Instagram-E4405F%3Fstyle%3Dfor-the-badge%26logo%3Dinstagram%26logoColor%3Dwhite" width="121" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/nitdgplug"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFQo6mbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Facebook-1877F2%3Fstyle%3Dfor-the-badge%26logo%3Dfacebook%26logoColor%3Dwhite" width="111" height="28"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCG8srGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqsn2bupxtk6nan73cxo.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCG8srGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqsn2bupxtk6nan73cxo.JPG" alt="Image description" width="366" height="50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b19VwYty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4ayozr2zm16sag0fy5b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b19VwYty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4ayozr2zm16sag0fy5b.gif" alt="Image description" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build a social network with ReactJS, Spring Boot and MongoDB</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Fri, 07 Jan 2022 12:13:56 +0000</pubDate>
      <link>https://dev.to/linhtch90/build-a-social-network-with-reactjs-spring-boot-and-mongodb-1c9j</link>
      <guid>https://dev.to/linhtch90/build-a-social-network-with-reactjs-spring-boot-and-mongodb-1c9j</guid>
      <description>&lt;p&gt;I have developed a small social network web app for educational purpose and want to share this with the community. This app is built with ReactJS for frontend, Java Spring Boot for backend and MongoDB as the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fm_wS7rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6a5jcfnf3lg05e0mrjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fm_wS7rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6a5jcfnf3lg05e0mrjs.png" alt="Image description" width="880" height="1265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app tries to mimic a few functions of Twitter, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create post with text and image&lt;/li&gt;
&lt;li&gt;The number of characters in each post is limited to 200 characters&lt;/li&gt;
&lt;li&gt;Like, comment and re-post a post&lt;/li&gt;
&lt;li&gt;View the number of likes, comments and shares of a post&lt;/li&gt;
&lt;li&gt;Comments are toggle&lt;/li&gt;
&lt;li&gt;The number of character in each comment is limited to 100 characters&lt;/li&gt;
&lt;li&gt;Follow, un-follow someone&lt;/li&gt;
&lt;li&gt;See who are following us and follow them back&lt;/li&gt;
&lt;li&gt;Check who we are following&lt;/li&gt;
&lt;li&gt;View all posts of an individual&lt;/li&gt;
&lt;li&gt;View our own posts&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List all user accounts in the entire social network (due to the number of users are still small, I did not develop search user function)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Due to limited storage space, client app compresses the uploaded image to the maximum of 250px (width or height)
User avatar is created by hashing user id and convert that hash code into a hexagonal image&lt;/li&gt;
&lt;li&gt;Authentication and authorization use JWT&lt;/li&gt;
&lt;li&gt;Responsive frontend for desktop and mobile devices&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Technical stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend: ReactJS, Redux Toolkit, React Router, React Bootstrap&lt;/li&gt;
&lt;li&gt;Backend: Java Spring Boot&lt;/li&gt;
&lt;li&gt;Database: MongoDB&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoy it and give me a ⭐ Github star ⭐ for my effort!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Demo:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://psn-social-network.herokuapp.com/#/"&gt;https://psn-social-network.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/linhtch90/psn-social-network-public-source"&gt;https://github.com/linhtch90/psn-social-network-public-source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>java</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>ETHEREAL  : A Decentralized Virtual Banking system - Part I</title>
      <author>Shashank Shekhar</author>
      <pubDate>Fri, 07 Jan 2022 12:07:08 +0000</pubDate>
      <link>https://dev.to/nitdgplug/ethereal-a-decentralized-virtual-banking-system-part-i-1mol</link>
      <guid>https://dev.to/nitdgplug/ethereal-a-decentralized-virtual-banking-system-part-i-1mol</guid>
      <description>&lt;p&gt;In recent times, we have all heard about &lt;strong&gt;Blockchain&lt;/strong&gt; once or twice and it has been a hot and controversial topic ,almost in the news every other day. In the 2 parts of this article-series we have explored the various terms related to Blockchain like &lt;strong&gt;Bitcoin&lt;/strong&gt;, &lt;strong&gt;Ethereum&lt;/strong&gt;, &lt;strong&gt;Solidity&lt;/strong&gt; and we have built an actual working &lt;strong&gt;DApp&lt;/strong&gt;(a decentralized application), where we have guided you in building the project from ground zero. This project was built as part of our event &lt;strong&gt;Ten Days of Code&lt;/strong&gt; held from &lt;strong&gt;17th October 2020&lt;/strong&gt; to &lt;strong&gt;26th October 2020&lt;/strong&gt;, where we mentored students all over India in building projects from scratch across various domains.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbHu_rYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ixekqgghacdp2nlm64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbHu_rYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ixekqgghacdp2nlm64.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this project, we have built a &lt;strong&gt;decentralized&lt;/strong&gt; banking application, now decentralized here means that the central power doesn't lie in the hands of a single user but is instead &lt;strong&gt;divided equally&lt;/strong&gt; among all the users and hence no one supervises all the account in our bank and everyone is responsible for their own account. We have implemented all the basic features that a bank can perform like deposition, withdrawal, and transfer of money.&lt;/p&gt;

&lt;p&gt;Now, you might be wondering why &lt;strong&gt;decentralized&lt;/strong&gt;, well great question indeed for this a simple analogy would suffice, we all hate &lt;strong&gt;dictatorships&lt;/strong&gt; where the whole power lies with a single person and hence prefer &lt;strong&gt;democracies&lt;/strong&gt;, well a debatable point, but let's not get there, now applying the same analogy wouldn't it be great if you and only you had the access to your account opposing the view of a &lt;strong&gt;single&lt;/strong&gt; person having access to all the accounts, being the whole purpose of this project.&lt;/p&gt;

&lt;p&gt;This DApp is supported using &lt;strong&gt;Solidity Smart Contracts&lt;/strong&gt; and the frontend is built using the framework &lt;strong&gt;React JS&lt;/strong&gt;, the application is deployed to the local blockchain network, &lt;strong&gt;Ganache&lt;/strong&gt;. The whole project runs on an &lt;strong&gt;Ethereum&lt;/strong&gt; supported browser, with the help of the &lt;strong&gt;Metamask&lt;/strong&gt; extension. For building and compiling &lt;strong&gt;Truffle&lt;/strong&gt; was used. Lastly, the frontend was connected to the solidity contract using a &lt;strong&gt;web3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To understand all these terms and how Blockchain works do watch the video below which was a live session from our event &lt;strong&gt;Ten Days of Code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rnQBSH9b_Dw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Blockchain?&lt;/strong&gt;&lt;br&gt;
Blockchain technology is a type of distributed ledger technology (DLT) — It is an accounting system where the ledger (record of transactions) is distributed among a network of computers.&lt;br&gt;
So at its core, blockchain technology is a record-keeping tool.&lt;br&gt;
&lt;strong&gt;Beginners guide for &lt;a href="https://medium.com/@sinafl/blockchain-101-a-beginners-guide-410d4d93d635"&gt;Blockchain&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a Smart Contract ?&lt;/strong&gt;&lt;br&gt;
All of the code on the blockchain is contained in smart contracts, which are programs that run on the blockchain. All of the code on the blockchain is contained in smart contracts, which are programs that run on the blockchain. They are the building blocks of blockchain applications. We'll write a smart contract in this project to power our Banking system.&lt;br&gt;
&lt;strong&gt;For in-depth detail click &lt;a href="https://www.investopedia.com/terms/s/smart-contracts.asp"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intro To Solidity :&lt;/strong&gt;&lt;br&gt;
Solidity is the main programming language for writing smart contracts for the Ethereum blockchain. It is a contract-oriented language, which means that smart contracts are responsible for storing all of the programming logic that transacts with the blockchain. It's a high-level programming language that looks a lot like JavaScript, Python, and C++.&lt;br&gt;
&lt;strong&gt;For in-depth detail click &lt;a href="https://docs.soliditylang.org/en/v0.8.9/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#prerequisites-"&gt;
  &lt;/a&gt;
  Prerequisites :
&lt;/h2&gt;

&lt;p&gt;You can watch this video for setting up this project:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P62_at1FIE4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ganache (Local Development Blockchain)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AARk7Q2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcdlj8az0mue4vbafee9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AARk7Q2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcdlj8az0mue4vbafee9.png" alt="Ganache" width="880" height="478"&gt;&lt;/a&gt;&lt;br&gt;
The dependency is a &lt;strong&gt;personal blockchain&lt;/strong&gt;, which is a local development blockchain that can be used to &lt;strong&gt;mimic&lt;/strong&gt; the behavior of a &lt;strong&gt;public blockchain&lt;/strong&gt;. We recommend using &lt;strong&gt;&lt;a href="https://www.trufflesuite.com/ganache"&gt;Ganache&lt;/a&gt;&lt;/strong&gt; as your personal blockchain for Ethereum development. It will allow you to deploy smart contracts, develop applications, and run tests. It is available on Windows, Mac, and Linux as a desktop application and a command-line tool !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download it by clicking &lt;a href="https://www.trufflesuite.com/ganache"&gt;here&lt;/a&gt;&lt;/strong&gt; (For both Windows and Linux)&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#for-linuxubuntu-users-"&gt;
  &lt;/a&gt;
  For Linux(Ubuntu) Users :
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Once the download is complete, go to the folder where you have downloaded the file and open the terminal and type the following to make the file executable:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod a+x &amp;lt;filename.AppImage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Node.JS&lt;/strong&gt;&lt;br&gt;
Now that you have a private blockchain running, you need to configure your environment for developing smart contracts. The first dependency you'll need is &lt;strong&gt;&lt;a href="https://nodejs.org/en/"&gt;Node Package Manager&lt;/a&gt;&lt;/strong&gt; , or NPM, which comes with Node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can see if you have node already installed by going to your terminal/cmd and typing:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you don't have a node already installed then :&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#for-windows-users-"&gt;
  &lt;/a&gt;
  For Windows Users :
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Download it by clicking &lt;a href="https://nodejs.org/en/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is recommended that you download LTS version.&lt;/strong&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#for-linuxubuntu-users-"&gt;
  &lt;/a&gt;
  For Linux(Ubuntu) Users :
&lt;/h6&gt;

&lt;p&gt;Go to your terminal and type :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install nodejs
$ sudo apt install npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;Truffle Framework&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Now let's install the &lt;a href="https://www.trufflesuite.com/docs/truffle/overview"&gt;Truffle Framework&lt;/a&gt;&lt;/strong&gt;, &lt;br&gt;
which provides a suite of tools for developing Ethereum smart contracts with the Solidity programming language.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#for-windows-users-"&gt;
  &lt;/a&gt;
  For Windows Users :
&lt;/h6&gt;

&lt;p&gt;Go to your cmd and type :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g truffle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#for-linuxubuntu-users-"&gt;
  &lt;/a&gt;
  For Linux(Ubuntu) Users :
&lt;/h6&gt;

&lt;p&gt;Go to your terminal and type :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo npm install -g truffle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For this project, we have used React JS framework for the frontend and to get the required folder structure for our project we run the following command:&lt;/strong&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#for-windows-users-"&gt;
  &lt;/a&gt;
  For Windows Users :
&lt;/h6&gt;

&lt;p&gt;Go to your cmd and type :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;truffle unbox react 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#for-linuxubuntu-users-"&gt;
  &lt;/a&gt;
  For Linux(Ubuntu) Users :
&lt;/h6&gt;

&lt;p&gt;Go to your terminal and type :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo npx truffle unbox react 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Metamask Wallet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this project, we would require an &lt;strong&gt;Ethereum&lt;/strong&gt; wallet, and here we will use the popular open-source wallet &lt;strong&gt;Metamask&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#on-chromefirefoxbraveit-is-recommended-that-you-use-brave-browser-"&gt;
  &lt;/a&gt;
  On Chrome/Firefox/Brave(It is recommended that you use Brave browser) :
&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Go to the extensions page of your browser and install the &lt;strong&gt;Metamask plugin, click &lt;a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn"&gt;here&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;On installation the user will be redirected to a setup page and the user has to choose a password and a recovery phrase.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;For in-depth detail click &lt;a href="https://docs.metamask.io/guide/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#getting-started-with-the-project-"&gt;
  &lt;/a&gt;
  Getting Started with the Project :
&lt;/h2&gt;

&lt;p&gt;After running the command &lt;strong&gt;npx truffle unbox react&lt;/strong&gt; you would have a folder structure of something similar to this in front of you :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hl5xuZBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3i3aq16bke1yisyvms7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hl5xuZBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3i3aq16bke1yisyvms7.JPG" alt="Image description" width="222" height="223"&gt;&lt;/a&gt;&lt;br&gt;
Let us understand what each of these means :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;node_modules&lt;/strong&gt; : This folder contains all the required npm packages for your project which are installed when you run &lt;strong&gt;npm install&lt;/strong&gt;  after cloning our repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src&lt;/strong&gt; : This folder contains all the components and pages for our React project&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public&lt;/strong&gt; : This is the directory where we save our images and which also contains the main HTML file &lt;strong&gt;index.html&lt;/strong&gt; where all the components from &lt;strong&gt;src&lt;/strong&gt; are finally rendered to give us a single page application.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;.gitignore&lt;/strong&gt; file contains information-related code which you don't want to commit to &lt;strong&gt;Github&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;package.json&lt;/strong&gt; and &lt;strong&gt;package-lock.json&lt;/strong&gt; are initialized when you run &lt;strong&gt;npm init&lt;/strong&gt; and install npm packages in your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For in-depth detail about React, click &lt;a href="https://docs.soliditylang.org/en/v0.8.9/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-3WA67i4WI8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For React tutorial, click &lt;a href="https://www.youtube.com/watch?v=4UZrsTqkcW4"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#must-watch-usestate-33900-to-42300-useeffect-44727-to-51924-and-react-router-90041-to-92322"&gt;
  &lt;/a&gt;
  Must watch useState (3:39:00 to 4:23:00), useEffect (4:47:27 to 5:19:24) and React Router (9:00:41 to 9:23:22)
&lt;/h6&gt;
&lt;h2&gt;
  &lt;a href="#part-0-creating-a-simple-blockchain-project-ethereum-todo-list"&gt;
  &lt;/a&gt;
  Part 0 : Creating a simple blockchain project: Ethereum Todo List
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OfuNQXJDnPE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=AiWkkj8lSTc&amp;amp;list=PLS5SEs8ZftgVI1LeNhgYO1Y1Gd2hhPc3F"&gt;Referance&lt;/a&gt; to build this simple project:&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-1-first-functionality-creating-a-new-account"&gt;
  &lt;/a&gt;
  Part 1 : First Functionality - Creating a new account
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nI68iysp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8lcesi03c4zkzq7qkql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nI68iysp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8lcesi03c4zkzq7qkql.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Let us begin with the Front-end.&lt;/p&gt;

&lt;p&gt;Navigate to your &lt;strong&gt;client&lt;/strong&gt; folder and then to &lt;strong&gt;src&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ICogrks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwygoioayn9ai8q9q21c.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ICogrks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwygoioayn9ai8q9q21c.JPG" alt="Image description" width="245" height="326"&gt;&lt;/a&gt;&lt;br&gt;
We will be writing all of our frontend code in the form of various components and import them all to the final &lt;strong&gt;index.js&lt;/strong&gt; file which will be rendered onto the HTML file present in the public folder.&lt;/p&gt;

&lt;p&gt;Now, that you have explored all the hooks used in the project , we add some basic lines of code to every component to fetch all the details like web3, &lt;strong&gt;Metamask&lt;/strong&gt; connected account and the solidity contract.&lt;/p&gt;

&lt;p&gt;This code is &lt;strong&gt;common&lt;/strong&gt; for all the components  as we need to fetch data in every component. &lt;/p&gt;

&lt;p&gt;The only component which won't contain this snippet is the &lt;strong&gt;Navbar&lt;/strong&gt; because this component is only for Navigation purposes and does not require all these details , for this project purposes we create a Navbar with 2 tabs for now : &lt;strong&gt;REGISTER&lt;/strong&gt; and &lt;strong&gt;ACCOUNTS&lt;/strong&gt; , on clicking the &lt;strong&gt;REGISTER&lt;/strong&gt; tab it should redirect you to the URL &lt;strong&gt;"/create"&lt;/strong&gt; , you can change the name for this &lt;strong&gt;route&lt;/strong&gt; if you want, we have named it "/create" and the &lt;strong&gt;ACCOUNTS&lt;/strong&gt; tab should redirect you to the URL &lt;strong&gt;"/accounts"&lt;/strong&gt;. You can import this Navbar in all the components you are creating to navigate to the different tabs of our application which are only 2 currently, but you will soon be creating more tabs.&lt;/p&gt;

&lt;p&gt;The only modification is when you fetch more details or the particular function for that component from the contract you need to add this particular code snippet.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;​&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getBasicDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;​&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="err"&gt;​&lt;/span&gt; &lt;span class="c1"&gt;// Get network provider and web3 instance.&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getWeb3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="err"&gt;​&lt;/span&gt; &lt;span class="c1"&gt;// Use web3 to get the user's accounts.&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="err"&gt;​&lt;/span&gt; &lt;span class="c1"&gt;// Get the contract instance.&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;networkId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deployedNetwork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="nx"&gt;BankingContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;networkId&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;

                &lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="nx"&gt;BankingContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="nx"&gt;deployedNetwork&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;deployedNetwork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;
                &lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="nx"&gt;setWeb3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="nx"&gt;setAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="nx"&gt;setContract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="err"&gt;​&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="err"&gt;​&lt;/span&gt; &lt;span class="c1"&gt;// Catch any errors for any of the above operations.&lt;/span&gt;
     &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="s2"&gt;`Failed to load web3, accounts, or contract. Check console for details.`&lt;/span&gt;

                &lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="err"&gt;​&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;​&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;​&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;​&lt;/span&gt;
    &lt;span class="nx"&gt;getBasicDetails&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is how your first &lt;strong&gt;useEffect&lt;/strong&gt; hook looks. To go through this &lt;strong&gt;useEffect&lt;/strong&gt; hook once would be enough as you will be using this same &lt;strong&gt;useEffect&lt;/strong&gt; hook in every component, even if you create new components.&lt;/p&gt;

&lt;p&gt;In this hook we have defined a function &lt;strong&gt;getBasicDetails&lt;/strong&gt;, where we load &lt;strong&gt;web3&lt;/strong&gt; from the &lt;strong&gt;getWeb3.js&lt;/strong&gt;, and we get the &lt;strong&gt;Metamask&lt;/strong&gt; connected account by using &lt;strong&gt;web3&lt;/strong&gt;, as we have already mentioned in our intro section that web3 acts as a &lt;strong&gt;connector&lt;/strong&gt; between our backend and frontend. &lt;/p&gt;

&lt;p&gt;Here we will be using &lt;strong&gt;web3&lt;/strong&gt; for everything. For creating a &lt;strong&gt;new contract&lt;/strong&gt;, for using the &lt;strong&gt;various functions&lt;/strong&gt; from the backend, for loading accounts. You will soon understand that it makes everything much easier. &lt;/p&gt;

&lt;p&gt;Firstly, throughout the application we use web3 and whenever we use web3, it is through &lt;strong&gt;asynchronous calls&lt;/strong&gt; and we use the &lt;strong&gt;async await syntax&lt;/strong&gt; and basic ES7 javascript &lt;strong&gt;.then, .catch&lt;/strong&gt; syntax to resolve promises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;web3.eth&lt;/strong&gt; ( &lt;strong&gt;eth&lt;/strong&gt; is short for &lt;strong&gt;ethereum&lt;/strong&gt; ) is the  object which contains various functions for getting your accounts, getting your network id , creating a new contract from your &lt;strong&gt;JSON file&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;Read more about the various methods of &lt;strong&gt;web3 &lt;a href="https://web3js.readthedocs.io/en/v1.3.0/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;getBasicDetails&lt;/strong&gt; function , we use the &lt;strong&gt;getAccounts()&lt;/strong&gt; , &lt;strong&gt;net.getId()&lt;/strong&gt; , &lt;strong&gt;Contract()&lt;/strong&gt; methods of &lt;strong&gt;web3.eth&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getAccounts()&lt;/strong&gt; gets all the accounts connected to the Ethereum browser (here Metamask), to access the present connected account we want the very first element of this accounts array which is at the &lt;strong&gt;0th index&lt;/strong&gt;, and we change the &lt;strong&gt;state of account variable to this&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;net.getId()&lt;/strong&gt; gets the network Id of the Solidity contract which is one of the two things to initiate a new contract using web3, the other one is the &lt;strong&gt;abi&lt;/strong&gt; object present in the &lt;strong&gt;Banking.json&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BankingContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;deployedNetwork&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;deployedNetwork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This initiates a contract from our &lt;strong&gt;existing JSON file&lt;/strong&gt;.&lt;br&gt;
We set the empty web3 variable to the loaded web3 object and the empty contract variable to the newly created contract using &lt;strong&gt;useState&lt;/strong&gt; hook of React.&lt;/p&gt;

&lt;p&gt;To give an example of the usage of the &lt;strong&gt;useParams&lt;/strong&gt; hook, we have used it in the &lt;strong&gt;Transactions&lt;/strong&gt; component.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Transactions&lt;/strong&gt; component, we have accessed the &lt;strong&gt;id&lt;/strong&gt; parameter from the URL and assigned it to a variable in the &lt;strong&gt;Transactions component&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the input of the &lt;strong&gt;useParams&lt;/strong&gt; hook, we refer to the exact parameter variable we used in the URL, in this case &lt;strong&gt;id&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;I hope that helps you understand the &lt;strong&gt;useParams&lt;/strong&gt; hook, for more reference visit: &lt;/p&gt;

&lt;p&gt;Let us briefly explore the &lt;strong&gt;Routing.js&lt;/strong&gt; file  :&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Routing.js&lt;/strong&gt; file we import Router and Route from &lt;strong&gt;'react-router-dom'&lt;/strong&gt; and the basic syntax of the whole Routing component is similar for every Route.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ComponentName1&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;path-to-the-component&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ComponentName2&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;path-to-the-component&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;specify-path1-here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentName1&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;specify-path2-here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentName2&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&amp;gt;;       &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first &lt;strong&gt;useEffect&lt;/strong&gt; hook will be present in all functional components like &lt;strong&gt;AccountDetails&lt;/strong&gt;, &lt;strong&gt;DisplayAccounts&lt;/strong&gt; , &lt;strong&gt;LoanTransaction&lt;/strong&gt;, &lt;strong&gt;TransferMoney&lt;/strong&gt; and all the other components except the &lt;strong&gt;Navbar&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;Let's talk about the &lt;strong&gt;second&lt;/strong&gt; useEffect hook which you will be used in some or almost all of the components to extract the required functionality from the contract because only the creation of the contract is not enough.&lt;/p&gt;

&lt;p&gt;We need to access the &lt;strong&gt;particular functionality&lt;/strong&gt; from our &lt;strong&gt;contract&lt;/strong&gt; to perform various operations for us, for example, when we are creating the CreateAccount.js component we actually don't require any additional data, but we just use the second hook to log the contract details in our &lt;strong&gt;browser console&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;In this hook we run the function only when web3, contract and account are &lt;strong&gt;not undefined&lt;/strong&gt; as we had initialized them as &lt;strong&gt;undefined&lt;/strong&gt;, the dependency array also has web3, account, contract in it so that &lt;strong&gt;useEffect&lt;/strong&gt; runs until all of these variables change from undefined to a &lt;strong&gt;definitive value&lt;/strong&gt;, this is done for easy coding purposes to view the various &lt;strong&gt;methods&lt;/strong&gt; present in the &lt;strong&gt;contract&lt;/strong&gt; (We'll explain what are these various methods).&lt;/p&gt;

&lt;p&gt;So, let's continue building the &lt;strong&gt;createAccount.js&lt;/strong&gt; component, for this, we require a basic HTML form &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PRO TIP :&lt;/strong&gt;  To build forms in which the data field values are stored in some variable which can be further used at different places we use the &lt;strong&gt;useState&lt;/strong&gt; hook, this has been done in all the components so I am specifying this in the beginning for your ease. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXAMPLE :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example, we initialized the &lt;strong&gt;name variable&lt;/strong&gt; as a blank variable and then when the form input value is changed we pass the &lt;strong&gt;onChange&lt;/strong&gt; function where the state of the name variable is updated to the &lt;strong&gt;current target value&lt;/strong&gt;, this name can be further used any place we want, overall throughout the application we use this same syntax, so when I refer to making a &lt;strong&gt;form input&lt;/strong&gt; with a value equal to the value of the variable "x" what I actually will mean is the above syntax.&lt;/p&gt;

&lt;p&gt;So, now if you recall from above in the Solidity contract the function to create a new account takes 3 inputs, and among those 3 - one is the creator address which is the &lt;strong&gt;account&lt;/strong&gt; connected to &lt;strong&gt;Metamask&lt;/strong&gt; which we already stored in the &lt;strong&gt;account state variable&lt;/strong&gt;, the other 2 variables are the &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;location&lt;/strong&gt; inputs which we will get from the &lt;strong&gt;form&lt;/strong&gt; that we are creating. &lt;/p&gt;

&lt;p&gt;After creating the form with 2 input fields we need to create a &lt;strong&gt;SUBMIT&lt;/strong&gt; button and we need to pass a function on the click of this button, now the syntax of this function will also be similar in every component and since this is for the first component let me give you the syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXAMPLE:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;We defined the &lt;strong&gt;handleSubmit&lt;/strong&gt; function inside our &lt;strong&gt;CreateAccount&lt;/strong&gt; component but this should be above the rendering of the JSX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES7 arrow function syntax is being used here throughout the project, you may use it or may proceed with the normal function syntax&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//Function to handle the submit operation of the form&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//prevents the default action that occurs when someone submits a form &lt;/span&gt;

        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;//...rest of the function code ...//&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function is &lt;strong&gt;asynchronous&lt;/strong&gt; because we need to communicate with the contract, send a request to it and wait for its response. Hence we use a similar syntax everywhere using &lt;strong&gt;.then&lt;/strong&gt; and &lt;strong&gt;.catch&lt;/strong&gt; to resolve the promises, &lt;strong&gt;more than one&lt;/strong&gt; .then can also be changed as per the user requirement.       &lt;/p&gt;

&lt;p&gt;Now in our &lt;strong&gt;createAccount.js&lt;/strong&gt; file, the &lt;strong&gt;handleSubmit&lt;/strong&gt; function should contain the code to access the function to create new accounts from the backend, now &lt;strong&gt;how&lt;/strong&gt; this is done? &lt;/p&gt;

&lt;p&gt;Well, firstly we have already created a new contract, every contract is an object which further has an item called &lt;strong&gt;methods&lt;/strong&gt;, now what does this methods item contain? &lt;/p&gt;

&lt;p&gt;It contains every public variable and function defined in the solidity contract. That's it, you can refer to the contract object in the &lt;strong&gt;browser console&lt;/strong&gt;, you will find the &lt;strong&gt;methods&lt;/strong&gt; item in it.&lt;/p&gt;

&lt;p&gt;For this component, we need to access the &lt;strong&gt;createAccount&lt;/strong&gt; method, now there are 2 ways to access a function using web3, they are call and send, the &lt;strong&gt;major&lt;/strong&gt; differences in these two are you use call only when you want to &lt;strong&gt;view data&lt;/strong&gt; and &lt;strong&gt;not modify&lt;/strong&gt; anything and it &lt;strong&gt;does not cost&lt;/strong&gt; any ether to perform this transaction but if you use the send method it costs some amount of &lt;strong&gt;gas fees&lt;/strong&gt; and it &lt;strong&gt;modifies&lt;/strong&gt; data, why does it cost ether though? &lt;/p&gt;

&lt;p&gt;Well, that is an interesting question though but as you already know that you need to send ether for any function to be executed or &lt;strong&gt;written&lt;/strong&gt; on a &lt;strong&gt;new block&lt;/strong&gt; and the &lt;strong&gt;miners&lt;/strong&gt; of this block need to be &lt;strong&gt;rewarded&lt;/strong&gt; somehow since they are securing the whole system by solving &lt;strong&gt;complex algorithms&lt;/strong&gt; which creates new blocks for storing our executed function data, hence this is the a*&lt;em&gt;mount deducted&lt;/em&gt;* from our account when we use the send method, which is rewarded to the &lt;strong&gt;miners&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;createAccount.js&lt;/strong&gt; we are creating a new account, that is &lt;strong&gt;modifying data&lt;/strong&gt; so we use the &lt;strong&gt;send method&lt;/strong&gt; of &lt;strong&gt;web3&lt;/strong&gt; rather than the &lt;strong&gt;call method&lt;/strong&gt; (which is used to just view the data), and the syntax of a send option is such that it also accepts another object which contains details like the &lt;strong&gt;from address&lt;/strong&gt;, &lt;strong&gt;to address&lt;/strong&gt;, and the &lt;strong&gt;value being sent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In, our banking application we deduct &lt;strong&gt;2 ETH&lt;/strong&gt; from the &lt;strong&gt;Metamask&lt;/strong&gt; account on the creation of every new account as a starting balance to the virtual account and increment the balance of the virtual account from &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;2&lt;/strong&gt; (the increment of balance is handled on the backend).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you click on submit the &lt;strong&gt;Metamask&lt;/strong&gt; will prompt you to approve the transaction with the cost of &lt;strong&gt;2 ETH&lt;/strong&gt;, on approval your new account will be &lt;strong&gt;created&lt;/strong&gt;. On, successful approval according to the logic of the function the page will redirect to &lt;strong&gt;"/accounts"&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;This is an example of how to access any function from the backend passing the values and using the send method, if you just want to display values which we will see in the &lt;strong&gt;DisplayAccounts.js&lt;/strong&gt; you just need to use the call method of web3 and spend &lt;strong&gt;no ether&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;But, always remember if you want to perform a function that updates the existing contract you need to spend some amount of ether and send it from your &lt;strong&gt;Metamask&lt;/strong&gt; connected account, the ether is sent to the contract which will, in turn, be sent to the miner accounts. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VMMcbFx7TPk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Navigate to your &lt;strong&gt;contracts&lt;/strong&gt; folder and open &lt;strong&gt;SimpleStorage.sol&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// SPDX-License-Identifier: MIT&lt;/span&gt;
&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// import "github.com/Arachnid/solidity-stringutils/strings.sol";&lt;/span&gt;
&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;Banking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//  using strings for *;&lt;/span&gt;

    &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;serialNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;transacNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;bankBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


    &lt;span class="c1"&gt;//Function to create account , the 2 ETH balance will be taken from your ethereum account and deposited to the banking contract&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;_creator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;memory&lt;/span&gt; &lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;memory&lt;/span&gt; &lt;span class="nx"&gt;_location&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_creator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;bankBalance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NewAccount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="nx"&gt;TransactionCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NewAccount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Insufficient Funds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// revert InsufficientFunds(serialNumber,2,_creator.balance-1,'NewAccount');&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, in the &lt;strong&gt;src&lt;/strong&gt; folder, we further have the folder structure as:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;contracts&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;getWeb3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Routing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once you understand the purpose of each component you will be able to navigate easily through the code, and trust me when I say organizing your code into folders is much cleaner and accessible in the future.&lt;/p&gt;

&lt;p&gt;The components folder contains various sub-folders for each of our components in our application, here in this application we used the &lt;strong&gt;components&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;-&amp;gt;AccountDetials&lt;/strong&gt; (the component that gets all the account details of the current account serial number)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&amp;gt;DisplayAccounts&lt;/strong&gt; (displays all the registered accounts connected to the particular Metamask account)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&amp;gt;DisplayTransactions&lt;/strong&gt; (displays all the transactions that occurred in the particular account)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&amp;gt;LoanTransaction&lt;/strong&gt; (a temporarily working function that resembles loan transactions)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&amp;gt;MainSection&lt;/strong&gt; (the main landing page when one visits the application)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&amp;gt;Navbar&lt;/strong&gt; (used to navigate to various components)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&amp;gt;TransferMoney&lt;/strong&gt; (the component to transfer virtual amount)&lt;/p&gt;



&lt;p&gt;By looking at the names of the components you might get a feel of the job they perform, you can edit the names of these components as you wish and once you edit them they will get edited in the files they were imported into.&lt;/p&gt;

&lt;p&gt;The contracts folder contains the &lt;strong&gt;JSON file&lt;/strong&gt; for the Banking contract we had deployed and we will be using and accessing this very &lt;strong&gt;JSON file&lt;/strong&gt; to access our backend, for you full-stack developers out there you can imagine this as an &lt;strong&gt;API&lt;/strong&gt; that can be used in your frontend application using &lt;strong&gt;asynchronous&lt;/strong&gt; fetching.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;App.js&lt;/strong&gt; contains various imports from all the components of the application and &lt;strong&gt;App.css&lt;/strong&gt; defines the global styles for every component present in the application since all the components will be imported in &lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;getWeb3.js&lt;/strong&gt; is a boilerplate template generated for us by Truffle when we run the command truffle unbox react which contains a promise-based function to load &lt;strong&gt;Web3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;index.js&lt;/strong&gt; is the file where the &lt;strong&gt;App.js&lt;/strong&gt; is finally imported and rendered onto the frontend HTML file.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Routing.js&lt;/strong&gt; is an important file that contains the various routes present in the whole application it is imported from &lt;strong&gt;react-router-dom&lt;/strong&gt; which can be installed by running the command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, &lt;strong&gt;serviceWorker.js&lt;/strong&gt; is not of much use for us as it is just a part of the boilerplate code that appears with React.&lt;/p&gt;

&lt;p&gt;That was the folder structure! Now let us discuss some of the basic React hooks syntax that we have used in our application for React beginners:&lt;/p&gt;

&lt;p&gt;Throughout this application, we have used only three React hooks and by three, I mean exactly three not more, not less all the work can be done using these three hooks. These are &lt;strong&gt;useState&lt;/strong&gt;, &lt;strong&gt;useEffect&lt;/strong&gt;, and &lt;strong&gt;useParams&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, let us just get to know briefly about each of these and a little bit about the project syntax&lt;/p&gt;

&lt;p&gt;An example for &lt;strong&gt;useParams&lt;/strong&gt; is where we have imported the Transactions component to our &lt;strong&gt;Routing.js&lt;/strong&gt; file and in the path URL, we have specified the parameter &lt;strong&gt;id&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the Transactions component, we can use this id parameter to perform actions that are specific to the account with that &lt;strong&gt;id&lt;/strong&gt;, we can access this id parameter in another component from the URL using the &lt;strong&gt;useParams&lt;/strong&gt; hook&lt;/p&gt;

&lt;p&gt;In the Transactions component, we have accessed the &lt;strong&gt;id&lt;/strong&gt; parameter and assigned it to a variable in the &lt;strong&gt;Transactions component&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the bracket of the &lt;strong&gt;useParams&lt;/strong&gt; hook, we refer to the exact parameter variable we used in the &lt;strong&gt;URL&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I hope that helps you understand the &lt;strong&gt;useParams&lt;/strong&gt; hook, for more reference visit :&lt;/p&gt;

&lt;p&gt;Let us briefly explore the &lt;strong&gt;Routing.js&lt;/strong&gt; file  :&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Routing.js&lt;/strong&gt; file we import Router and Route from &lt;strong&gt;'react-router-dom'&lt;/strong&gt; and the basic syntax of the whole Routing component is similar for every Route.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ComponentName1&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;path-to-the-component&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ComponentName2&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;path-to-the-component&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;specify-path1-here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentName1&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;specify-path2-here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentName2&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, that was all about the first &lt;strong&gt;useEffect&lt;/strong&gt; hook which will be present in all functional components like &lt;strong&gt;AccountDetails&lt;/strong&gt;, &lt;strong&gt;DisplayAccounts&lt;/strong&gt; , &lt;strong&gt;LoanTransaction&lt;/strong&gt;, &lt;strong&gt;TransferMoney&lt;/strong&gt; and every other component other than &lt;strong&gt;Navbar&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;Let's talk about the second &lt;strong&gt;useEffect&lt;/strong&gt; hook which you will be using in some or almost all of the components to extract the functionality from the contract because only the creation of the contract is not enough we need to access the functionality of the contract to perform various operations for us, in the first component we are creating the &lt;strong&gt;CreateAccount.js&lt;/strong&gt; component we actually &lt;strong&gt;don't&lt;/strong&gt; require any &lt;strong&gt;additional&lt;/strong&gt; data, but we just use the second hook to console.log the contract details, and in this hook, we only run the function when &lt;strong&gt;web3&lt;/strong&gt;, contract and account are not undefined as we had &lt;strong&gt;initialized&lt;/strong&gt; them as &lt;strong&gt;undefined&lt;/strong&gt;, the dependency array also has web3, account, contract in it so that &lt;strong&gt;useEffect&lt;/strong&gt; runs until all of these variables change from undefined to a definitive value, this is done for easy coding purposes to view the various methods present in the contract (We'll explain what are these various methods).&lt;/p&gt;

&lt;p&gt;So, let's continue building the &lt;strong&gt;createAccount.js&lt;/strong&gt; component, for this, we require a basic HTML form &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXAMPLE :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;​&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example we initialized &lt;strong&gt;name&lt;/strong&gt; as a blank state variable and then when the form input value is changed we pass the &lt;strong&gt;onChange&lt;/strong&gt; function, where the state of the name variable is updated to the &lt;strong&gt;current target value&lt;/strong&gt;, this name can be further used any place we want, overall throughout the application we use this, so when I refer to making a form input with a value equal to the value of the variable &lt;strong&gt;"x"&lt;/strong&gt; what I actually will mean is the above syntax.&lt;/p&gt;

&lt;p&gt;So, now if you recall in the &lt;strong&gt;Solidity contract&lt;/strong&gt; the function to create a new account takes 3 inputs, and among those 3 -one is the creator address which is the account connected to &lt;strong&gt;Metamask&lt;/strong&gt; which we already stored in the account state variable, the other 2 variables are the &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;location&lt;/strong&gt; inputs which we will get from the form which we are creating. &lt;/p&gt;

&lt;p&gt;After creating the form with 2 input fields we need to create a Submit button and we need to pass a function on click of this button, now the syntax of this function will also be similar in every component since it is the first component let us give you the format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXAMPLE :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We defined the &lt;strong&gt;handleSubmit&lt;/strong&gt; function inside our &lt;strong&gt;CreateAccount.js&lt;/strong&gt; component but this should be above the rendering of the JSX &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES7 arrow function syntax is being used here throughout the project, you may use it or may proceed with the normal function syntax&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//Function to handle the submit operation of the form&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//prevents the default action that occurs when someone submits a form &lt;/span&gt;

        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;//...rest of the function code ...//&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function is &lt;strong&gt;asynchronous&lt;/strong&gt; because we need to communicate with the contract and send a request to it and wait for its response, and hence the syntax is similar everywhere using .then and .catch to resolve the promises, more than one &lt;strong&gt;.then&lt;/strong&gt; can also be changed as per the user requirement.       &lt;/p&gt;

&lt;p&gt;Now in our &lt;strong&gt;createAccount.js&lt;/strong&gt; file, the &lt;strong&gt;handleSubmit&lt;/strong&gt; function should contain the code to access the function to create new accounts from the backend, now how this is done? &lt;/p&gt;

&lt;p&gt;Well, firstly we have already created a new contract, every contract is an object which further has an item called methods, now what does this methods item contain? &lt;/p&gt;

&lt;p&gt;It contains every public variable and function defined in the solidity contract. That's it, you can refer to the contract object in the console.log, you will find the methods item in it.&lt;/p&gt;

&lt;p&gt;For this component we need to access the &lt;strong&gt;createAccount&lt;/strong&gt; method, now there are 2 ways to access a function using web3, they are call and send, the major differences in these two are you use call only when you want to view data and not modify anything and it does not cost any ether to perform this transaction but if you use the send method it costs some amount of gas fees and it modifies data, why does it cost ether though? &lt;/p&gt;

&lt;p&gt;Well, that is an interesting question though but as you already know from the Basics module that you need to send ether for the function to be executed or written on a new block and the miners of this block need to be rewarded somehow since they are securing the whole system by solving complex algorithms which creates new blocks for storing our executed function data, hence this is the amount deducted from our account when we use the send method, which is rewarded to the miners.&lt;/p&gt;

&lt;p&gt;For, the &lt;strong&gt;createAccount.js&lt;/strong&gt; we are creating a new account, that is modifying data so we use the send option, and the syntax of a send option is such that it also accepts another object which contains details like the from address, to address, and the value being sent.&lt;/p&gt;

&lt;p&gt;In, our banking application we deduct &lt;strong&gt;2 ETH&lt;/strong&gt; from the &lt;strong&gt;Metamask&lt;/strong&gt; connected account on the creation of every new account as a starting balance to the virtual account and increment the balance of the virtual account from 0 to 2 (the increment of balance is handled on the backend).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you click on &lt;strong&gt;SUBMIT&lt;/strong&gt;, Metamask will prompt you to approve the transaction with the cost of 2 ETH, on approval your new account will be created. On, successful approval according to the logic of the function the page will redirect to &lt;strong&gt;"/accounts"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is an example of how to access any function from the backend passing the values and using the send method, if you just want to display values which we will see in the &lt;strong&gt;DisplayAccounts.js&lt;/strong&gt; in the next module you just need to use the call option and spend no ether. But, always remember if you want to perform a function you need to spend some amount of ether and send it from your &lt;strong&gt;Metamask&lt;/strong&gt; connected account, the ether is sent to the contract which will, in turn, be sent to the miner accounts. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2-displaying-accounts-account-details-and-adding-balance"&gt;
  &lt;/a&gt;
  Part 2 : Displaying Accounts, Account Details and Adding Balance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QaCm9Dqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7urb4d12dcsuzmniqzor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaCm9Dqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7urb4d12dcsuzmniqzor.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us start coding the solidity component (Just navigate to &lt;strong&gt;SimpleStorage.sol&lt;/strong&gt; file and paste this inside &lt;strong&gt;contract Banking {}&lt;/strong&gt; ).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//Defining a struct to store the account details&lt;/span&gt;
    &lt;span class="nx"&gt;struct&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;serial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//   bytes32 accountName;&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;doesExist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ethereal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NIT Durgapur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;



    &lt;span class="c1"&gt;//Function to get the msg.sender's ETH balance&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSenderBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;_account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;external&lt;/span&gt;
        &lt;span class="nx"&gt;view&lt;/span&gt;
        &lt;span class="nx"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//Function to get the contract's existing balance&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getContractBalance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;external&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//Function to get the owner&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getOwner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;//Function to add balance to your existing acccount ,the balance will be taken from your ethereum account&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;_creator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;bankBalance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_serial&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AddingBalance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;_serial&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="nx"&gt;TransactionCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000000000000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;transacNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AddingBalance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Insufficient Funds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// revert InsufficientFunds(_serial,_amount/1000000000000000000,_creator.balance-1,'AddingBalance');&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, let us move on to the Front-end part.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_Tbkytf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28i92pitlvqmcfrnm7p9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_Tbkytf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28i92pitlvqmcfrnm7p9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic for this is simple, as you might have remembered we have an accounts mapping in the backend and we can access them using the &lt;strong&gt;serialNumber&lt;/strong&gt; key which is the normal index of the account. Here we need to use the call option and call the accounts method (even mappings are part of the methods object) one by one and push it into a state variable of &lt;strong&gt;bankingAccounts&lt;/strong&gt; if and only if the creator of the account is the same as that of the currently connected Metamask account(important check -verification condition to know that the person who created the account is the only person who can access it and perform operations in it)&lt;/p&gt;

&lt;p&gt;The basic layout of this component is no different from the other components, but the &lt;strong&gt;second&lt;/strong&gt; useEffect hook here has actual use since you need to call the accounts mapping (from the contract methods), and you need to call this method &lt;strong&gt;serialNumber&lt;/strong&gt; the number of times(serialNumber is also a method from the contract methods) and check for only those accounts whose _creator address is same as that of the Metamask connected account.&lt;/p&gt;

&lt;p&gt;In the second &lt;strong&gt;useEffect&lt;/strong&gt; hook we need to do two things, we need to get the value of &lt;strong&gt;serialNumber&lt;/strong&gt;, and then we need to get the various accounts connected to the Metamask address and push it to the &lt;strong&gt;bankingAccounts&lt;/strong&gt; state array.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;serial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;backend&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we need to run a for loop from 1 to less than or equal to &lt;strong&gt;serialNumber&lt;/strong&gt; and call the accounts methods with the key as the value of the iterator, the account object is pushed to the &lt;strong&gt;bankingAccounts&lt;/strong&gt; array after it passes the check that the creator address is equal to the Metamask connected address.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;serial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;



        &lt;span class="c1"&gt;//ES7 promise resolving syntax using .then and .catch &lt;/span&gt;

        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="nx"&gt;setBankingAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bankingAccounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
                &lt;span class="p"&gt;}))&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above snippet is an example where you update the state of &lt;br&gt;
 &lt;strong&gt;bankingAccounts&lt;/strong&gt; as you are pushing each &lt;strong&gt;bankingAccount&lt;/strong&gt; connected the that particular Metamask address.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;setLoading(false)&lt;/strong&gt; after the whole for loop is run.&lt;/p&gt;

&lt;p&gt;Now you need to use one of the famous array methods mappings in the frontend to print the contents of the &lt;strong&gt;bankingAccounts&lt;/strong&gt; array, to give you an idea of the CSS layout of this page it will only contain various account bars with the name and serial number, which after clicking on them will redirect you to the account details page of that particular account where you can find the complete account details and various operations to perform on the account.&lt;/p&gt;

&lt;p&gt;Before printing all the accounts check for if loading is false using the ternary operator and then map the &lt;strong&gt;bankingAccounts&lt;/strong&gt;, if the loading is still true print nothing, now you need to make these bars where you are printing clickable and they should redirect you to the specific page for that account with the parameter as &lt;strong&gt;serialNumber&lt;/strong&gt; ( to "/accounts/:id") and here the usage of &lt;strong&gt;useParams&lt;/strong&gt; begin as we have mentioned in the third module. Also, react throws you an error in the console that every child element must contain a key which is a unique identifier value so in this case, also you can set the key={account. serial}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The location is changed using the window. location method&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;bankingAccounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serial&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;serialNumber&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ div &lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now that was displaying all the accounts, we need to also keep updating the router and adding all the new routes we are creating to the router for example until now &lt;strong&gt;"/"&lt;/strong&gt; route has been occupied by &lt;strong&gt;createAccounts&lt;/strong&gt; component, and the &lt;strong&gt;"/accounts"&lt;/strong&gt; route is occupied by &lt;code&gt;DisplayAccounts.js&lt;/code&gt;, now we add the third route &lt;strong&gt;"/accounts/:id"&lt;/strong&gt; for the &lt;code&gt;AccountDetails.js&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Let us begin coding the &lt;strong&gt;AccountDetails&lt;/strong&gt; component!&lt;/p&gt;

&lt;p&gt;As usual, the two &lt;strong&gt;useEffect&lt;/strong&gt; hooks are common like in every component.&lt;/p&gt;

&lt;p&gt;The second &lt;strong&gt;useEffect&lt;/strong&gt; hook, like the previous component, &lt;strong&gt;DisplayAccounts&lt;/strong&gt; is not empty, in it the specific account pertaining to that page is called, using the id parameter from the URL, and the details are stored in a state variable, specifically, balance item of the &lt;strong&gt;bankAccount&lt;/strong&gt; is stored in another state variable so that it can easily be updated every time the balance changes, for example when we add more balance or withdraw the balance.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bankAccount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setBankAccount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setBalance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The function in the second useEffect hook :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setBankingAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we have the data stored in our state variables we just display it somewhere on our application. &lt;/p&gt;

&lt;p&gt;To, give a brief idea of the layout of the page let us divide the page into various columns, one in the extreme left to print the account details, there are various other grid boxes for each functionality that contain a simple form, for example, there is an additional balance grid box, a withdraw balance grid box, a transfer amount grid box and a box for transferring amount from one account to other, later we can add more grid boxes which contains buttons that redirect to pages for displaying transaction(last extras section) and the other one for performing loan transactions.&lt;/p&gt;

&lt;p&gt;Now, let us move on to the second part of this article, and create a function in the backend to add virtual balance to our bank account.&lt;/p&gt;

&lt;p&gt;We create a public payable &lt;strong&gt;addBalance&lt;/strong&gt; function which takes inputs as the &lt;strong&gt;serial&lt;/strong&gt; , &lt;strong&gt;amount&lt;/strong&gt; , and the &lt;strong&gt;creator address&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt; these 3 inputs?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Serial number is required to increase the virtual balance of that particular virtual account. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The amount is the amount to be passed that is &lt;strong&gt;to be added&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need the creator address that is connected to &lt;strong&gt;Metamask&lt;/strong&gt; to transfer actual ether from your &lt;strong&gt;Ganache&lt;/strong&gt; account.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to increase the virtual balance by accessing the balance item of the particular account from the &lt;strong&gt;serialNumber&lt;/strong&gt; and we also need to increase the &lt;strong&gt;bankBalance&lt;/strong&gt; of the whole application present at the &lt;strong&gt;0th index&lt;/strong&gt; of the &lt;strong&gt;accounts mapping&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We need to also add a check to only update the virtual balance when the &lt;strong&gt;Metamask&lt;/strong&gt; connected &lt;strong&gt;Ganache&lt;/strong&gt; account balance is greater than the amount entered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add balance code snippet&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serialNumber&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now after displaying the account details, we start coding the add balance functionality grid box on the frontend, it should contain a form input with the state variable &lt;strong&gt;balanceAdded&lt;/strong&gt; as we have specified in previous examples, and also a submit button which &lt;strong&gt;onClick&lt;/strong&gt; should fire an &lt;strong&gt;addBalance&lt;/strong&gt; function which is similar to the syntax of our previous functions and should take the 3 input values.&lt;/p&gt;

&lt;p&gt;We use the send method here and the &lt;strong&gt;from address&lt;/strong&gt; is from the Metamask account and the value is the balance to be added which should also be passed in the object. We need to pass this value in the send method since that amount of ether should be transferred from our &lt;strong&gt;Ganache&lt;/strong&gt; account to the contract, if we don't specify the amount only a minimal amount of &lt;strong&gt;ether&lt;/strong&gt; will be costed that will be the &lt;strong&gt;gas amount&lt;/strong&gt; to perform the function from the backend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding Balance: Ether from Ganache -&amp;gt; Contract Address&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtual Balance of the account and Contract (Bank) are both increased since actual Ether flows from the Contract.&lt;/p&gt;

&lt;p&gt;We have to also again call the accounts method with the key serial number, and then update the balance variable to instantly print the new balance in the account details grid section.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="s2"&gt;`The addBalance is the state variable which we get from the addBalance form and the account is the Metamask connected account`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addBalance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;addBalance&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y1yVd30Naac"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We have completed the first 2 functionalities of our virtual bank, namely Creating a new account and Updating the Balance for the account in this article, in the 2nd part of this article-series we will be adding features like: &lt;strong&gt;Withdrawing Balance&lt;/strong&gt;, &lt;strong&gt;Transfering Amount&lt;/strong&gt; to other virtual accounts on the Bank and &lt;strong&gt;Displaying Transaction history&lt;/strong&gt; of an account, to our virtual bank.&lt;/p&gt;



&lt;p&gt;This is a 2nd Part of this article in which we will be adding features like : &lt;strong&gt;Withdrawing Balance, Transfer Amount to other virtual accounts on the Bank and Displaying Transaction history&lt;/strong&gt; to our Project.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nitdgplug" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HE_Gmi8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_UxiaVU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2815/84b6cf38-cd43-47e2-a3fc-31757fa6c382.png" alt="GNU/Linux Users' Group, NIT Durgapur" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHo2SzK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hnKVK1Xj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601612/ad28e989-4063-43d8-8a6b-77925dacc28c.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nitdgplug/ethereal-a-decentralized-virtual-banking-system-part-ii-3ppf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;ETHEREAL : A Decentralized Virtual Banking system - Part II&lt;/h2&gt;
      &lt;h3&gt;Shashank Shekhar for GNU/Linux Users' Group, NIT Durgapur ・ Jan 7 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;You can find all the Resources required for this Project by clicking &lt;a href="https://github.com/shashank725/ETHEREAL/tree/main/resources"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Github repository :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/deucaleon18"&gt;
        deucaleon18
      &lt;/a&gt; / &lt;a href="https://github.com/deucaleon18/ETHEREAL"&gt;
        ETHEREAL
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
 &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062320-479568db-5d6c-4d85-8180-07d8a4a0494e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBPJtFGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062320-479568db-5d6c-4d85-8180-07d8a4a0494e.png"&gt;&lt;/a&gt;
  &lt;/div&gt;
&lt;h2&gt;
A decentralized virtual banking system &lt;/h2&gt;
&lt;br&gt;
&lt;h2&gt;
About the project:&lt;/h2&gt;
&lt;p&gt;This project was built with my teammates as a part of our club ,GNU Linux Users' Group 's event Ten Days of Code where we mentored students from all over India to build projects from scratch over a period of ten days.&lt;/p&gt;
&lt;p&gt;This DApp is supported using &lt;a href="https://docs.soliditylang.org/en/v0.8.9/" rel="nofollow"&gt;Solidity Smart Contracts&lt;/a&gt; and the frontend is built using the framework React JS, the application is deployed to the local blockchain network,&lt;a href="https://www.trufflesuite.com/ganache" rel="nofollow"&gt;Ganache&lt;/a&gt;. The whole project runs on an Ethereum supported browser, with the help of the &lt;a href="https://metamask.io/download.html" rel="nofollow"&gt;Metamask&lt;/a&gt; extension.For, building compiling and testing the written contracts, &lt;a href="https://www.trufflesuite.com/docs/truffle/getting-started/interacting-with-your-contracts" rel="nofollow"&gt;Truffle&lt;/a&gt; was used.Lastly,the frontend was connected to the solidity contract using a wonderful library,&lt;a href="https://web3js.readthedocs.io/en/v1.5.2/web3-eth-contract.html" rel="nofollow"&gt;web3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The detailed guide to build this project is present in the &lt;code&gt;resources&lt;/code&gt; folder
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
Display:&lt;/h2&gt;
&lt;h4&gt;
Here are few glimpses of the project we built.&lt;/h4&gt;
&lt;h3&gt;
HOME PAGE&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062511-e117c1f9-6c68-42ab-b023-efff08ddc074.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHJEnRgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062511-e117c1f9-6c68-42ab-b023-efff08ddc074.png" alt="ethereal1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
REGISTER HERE&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062517-dd2491e3-20c3-47b0-88f2-f6fef5cd46f2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NN7OOsi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062517-dd2491e3-20c3-47b0-88f2-f6fef5cd46f2.png" alt="ethereal2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
ACCOUNTS PAGE&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062520-70842549-e1d1-40dc-8c8f-2519a1cc982b.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---y4ZKJ3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062520-70842549-e1d1-40dc-8c8f-2519a1cc982b.png" alt="ethereal3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
ACCOUNT DETAILS&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/77899467/140062522-f777c71d-da22-4bdd-9808-8a25f2447afe.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZpe_Yl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77899467/140062522-f777c71d-da22-4bdd-9808-8a25f2447afe.png" alt="ethereal4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
TRANSFER&lt;/h3&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/deucaleon18/ETHEREAL"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Project collaborators :&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__601717"&gt;
  
    .ltag__user__id__601717 .follow-action-button {
      background-color: #ff0000 !important;
      color: #000000 !important;
      border-color: #ff0000 !important;
    }
  
    &lt;a href="/deucaleon18" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AiG8DNmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KEVpLBYW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601717/ac894415-7fe0-47af-b8ba-959cf9e0aec2.jpeg" alt="deucaleon18 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/deucaleon18"&gt;Shubham Shantam Raju&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/deucaleon18"&gt;Open Source Enthusiast | Sophomore of NIT Durgapur | Member of GNU Linux Users' Group | Full Stack Devleoper (MERN) | Blockchain Enthusiast&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__601612"&gt;
  
    .ltag__user__id__601612 .follow-action-button {
      background-color: #d91c1c !important;
      color: #000000 !important;
      border-color: #d91c1c !important;
    }
  
    &lt;a href="/shashank725" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHo2SzK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hnKVK1Xj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601612/ad28e989-4063-43d8-8a6b-77925dacc28c.jpg" alt="shashank725 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/shashank725"&gt;Shashank Shekhar&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/shashank725"&gt;Open Source Enthusiast | Junior Developer at GNU/Linux User's Group NIT Dgp | Full Stack developer | Blockchain Fanatic&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__601724"&gt;
  
    .ltag__user__id__601724 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/ajp" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3a3_PyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gNgO7ixg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/601724/2ebb0a6d-e5c4-42be-b9d2-dcc8d0d93214.jpeg" alt="ajp image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/ajp"&gt;Apurva Jyoti Paul&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/ajp"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;Connect with us :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://nitdgplug.org/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---M_bkTo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GLUG%2520website-FFFC00%3Fstyle%3Dfor-the-badge%26logo%3DU%2B1F427%26logoColor%3Dwhite" width="125" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/company/lugnitdgp/mycompany/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imBRhTaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/LinkedIn-0077B5%3Fstyle%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="linkedin" width="107" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/nitdgplug/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg7TEMKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Instagram-E4405F%3Fstyle%3Dfor-the-badge%26logo%3Dinstagram%26logoColor%3Dwhite" width="121" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/nitdgplug"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFQo6mbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Facebook-1877F2%3Fstyle%3Dfor-the-badge%26logo%3Dfacebook%26logoColor%3Dwhite" width="111" height="28"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCG8srGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqsn2bupxtk6nan73cxo.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCG8srGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqsn2bupxtk6nan73cxo.JPG" alt="Image description" width="366" height="50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NcGle8tD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sys3jr5g3or6enwidup.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NcGle8tD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sys3jr5g3or6enwidup.gif" alt="Image description" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Modern Python setup for quality development</title>
      <author>Richard Devers</author>
      <pubDate>Fri, 07 Jan 2022 11:41:46 +0000</pubDate>
      <link>https://dev.to/richarddevers/modern-python-setup-for-quality-development-59fb</link>
      <guid>https://dev.to/richarddevers/modern-python-setup-for-quality-development-59fb</guid>
      <description>&lt;p&gt;In this article, i'll show you what is my common python setup.&lt;/p&gt;

&lt;p&gt;Goals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High quality code standard&lt;/li&gt;
&lt;li&gt;Respect of the python standard&lt;/li&gt;
&lt;li&gt;Dev experience quality&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;repeatability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The IDE&lt;/li&gt;
&lt;li&gt;Python versions&lt;/li&gt;
&lt;li&gt;Package and virtual environments&lt;/li&gt;
&lt;li&gt;Code linter/formatter&lt;/li&gt;
&lt;li&gt;Tests tools&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Pre-commit&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is entirely subjective :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ide-vscode"&gt;
  &lt;/a&gt;
  IDE: VSCode
&lt;/h2&gt;

&lt;p&gt;VSCode is a great IDE for python programming.&lt;/p&gt;

&lt;p&gt;One of his best feature is his extensibility though extensions.&lt;/p&gt;

&lt;p&gt;Here are some extensions i used:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the general development environment&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Remote-Container&lt;/strong&gt;: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set. Great to ensure every dev environment through a team are identical.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;: Python IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more. I don't use Jupyter so i cant talk about it. However Pylance is a great tool. Under the hood it used PyRights which is a super fast code analyzer (way faster than mypy!). Don't forget add this to your settings:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyRA_nXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub3p13tx1klovwgmbux7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyRA_nXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub3p13tx1klovwgmbux7.png" alt="Image description" width="328" height="39"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vscode-icons&lt;/strong&gt;: Each folder type have his own well design icons. Big project with a lots of files are way more easy to understand with that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Window Color&lt;/strong&gt;: Automatically adds a unique color to each window's activityBar and titleBar. A project will always have the same color. Great when a teams works on multiple project, everybody see the same color.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GitLens&lt;/strong&gt;: Now you can see who wrote that directly into the code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For data parsing/formatting/transformation...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's lots of extensions for that depending on your use case (docker, helm, etc...)&lt;/p&gt;

&lt;p&gt;I think these one are required by pretty much every project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better TOML&lt;/li&gt;
&lt;li&gt;change-case&lt;/li&gt;
&lt;li&gt;Code Spell checker&lt;/li&gt;
&lt;li&gt;JSON Tools&lt;/li&gt;
&lt;li&gt;XML Tools&lt;/li&gt;
&lt;li&gt;YAML&lt;/li&gt;
&lt;li&gt;vscode-base64&lt;/li&gt;
&lt;li&gt;Sort JSON objects&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-versions-pyenv"&gt;
  &lt;/a&gt;
  Python versions: &lt;strong&gt;Pyenv&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;Pyenv&lt;/a&gt; is so far the best python versions manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-package-and-venv-poetry"&gt;
  &lt;/a&gt;
  Python package and venv: &lt;strong&gt;Poetry&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://python-poetry.org/docs/"&gt;Poetry&lt;/a&gt; is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.&lt;/p&gt;

&lt;p&gt;Basically, it's pip under steroids. It works with the latest package file format &lt;em&gt;pyproject.toml&lt;/em&gt; . His dependencies and build system are very reliable. You can still export requirements.txt if necessary. Virtual environments works like a charms. Multiple python version too. It solve a lot of pain point. This is a must have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-linterformatter"&gt;
  &lt;/a&gt;
  Code linter/formatter
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;flake8&lt;/strong&gt;: &lt;a href="https://github.com/PyCQA/flake8"&gt;Flake8&lt;/a&gt; is a wrapper around these tools:
PyFlakes
pycodestyle
Ned Batchelder's McCabe script&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flake8 runs all the tools by launching the single flake8 command. It displays the warnings in a per-file, merged output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;black&lt;/strong&gt;: &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt; is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, Black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blackened code looks the same regardless of the project you're reading. Formatting becomes transparent after a while and you can focus on the content instead.&lt;/p&gt;

&lt;p&gt;Black makes code review faster by producing the smallest diffs possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;isort&lt;/strong&gt;: &lt;a href="https://github.com/PyCQA/isort"&gt;isort&lt;/a&gt; your imports, so you don't have to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#for-the-tests"&gt;
  &lt;/a&gt;
  For the tests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pytest&lt;/strong&gt;: Python allow to write way less code than using directly unittest. Lots of good library handle it very well. Some library extend it to be even more efficient and user friendly (pytest-mock, pytest-freezegun, pytest-sugar...)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tox&lt;/strong&gt;: The first point of tox is to run your tests into multiple environment (multiple python version). I'm not a big fan of it however it does the job. the &lt;a href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt; is a modern alternative but i never took the time to try it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#for-the-documentation-sphinx"&gt;
  &lt;/a&gt;
  For the documentation: &lt;strong&gt;Sphinx&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Sphinx allow you to write documentation using rst or markdown format. Theme management and automatic code introspection are some great features of it. You can easily integrate your documentation to your CI/CD pipeline for automatically test (using doc8) then deploy it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#precommit"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pre-commit&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is a must have. &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; allow you to run multiple scripts (a.k.a pre-commit) before your commit validation. There's a big catalogue of builtin pre-commit. Some will modify files. Some will just return warning or errors. You can automatically  You can perform a TONS of tests/validation before committing anything.&lt;/p&gt;

&lt;p&gt;This is basically a local CI pipeline run before the real one.&lt;/p&gt;

&lt;p&gt;Here is an example of one &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; config file i use, among others it will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sort your import automatically&lt;/li&gt;
&lt;li&gt;black will format your code&lt;/li&gt;
&lt;li&gt;flake8 will warn you about style issue&lt;/li&gt;
&lt;li&gt;Validate .gitlab-ci.yaml against my enterprise gitlab server.&lt;/li&gt;
&lt;li&gt;check style for bash script&lt;/li&gt;
&lt;li&gt;and so much more...
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.0.1
    hooks:
      - id: check-added-large-files
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-json
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-toml
      - id: check-vcs-permalinks
      - id: check-xml
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: debug-statements
      - id: detect-aws-credentials
        args: [--allow-missing-credentials]
      - id: destroyed-symlinks
      - id: end-of-file-fixer
      - id: fix-byte-order-marker
      - id: fix-encoding-pragma
        args: [--remove]
      - id: forbid-new-submodules
      - id: mixed-line-ending
        args: [--fix=auto]
      - id: name-tests-test
        args: [--django]
      - id: requirements-txt-fixer
      - id: trailing-whitespace
  - repo: local
    hooks:
      - id: black
        name: black
        entry: poetry run black
        language: system
        types: [python]
      - id: flake8
        name: flake8
        entry: poetry run flake8
        language: system
        types: [python]
  - repo: https://github.com/pycqa/isort
    rev: "5.9.1"
    hooks:
      - id: isort
        args:
          - --profile
          - black
          - --filter-files
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.26.1
    hooks:
      - id: yamllint
        args: [-c=.yamllint.yaml]
  - repo: https://gitlab.com/devopshq/gitlab-ci-linter
    rev: v1.0.2
    hooks:
      - id: gitlab-ci-linter
        args:
          - "--server"
          - "https://your.gitlab.server" # Need env var GITLAB_PRIVATE_TOKEN with gitlab api read token
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v2.17.11
    hooks:
      - id: commitizen
        stages: [commit-msg]
  - repo: https://github.com/jumanjihouse/pre-commit-hooks
    rev: 2.1.5 # or specific git tag
    hooks:
      - id: forbid-binary
      - id: shellcheck
      - id: shfmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;bandit&lt;/strong&gt;: &lt;a href="https://github.com/PyCQA/bandit"&gt;Bandit&lt;/a&gt; is a tool designed to find common security issues in Python code. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do this Bandit processes each file, builds an AST from it, and runs appropriate plugins against the AST nodes. Once Bandit has finished scanning all the files it generates a report.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;safety&lt;/strong&gt;: &lt;a href="https://github.com/pyupio/safety"&gt;Safety&lt;/a&gt; checks your installed dependencies for known security vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default it uses the open Python vulnerability database Safety DB, but can be upgraded to use pyup.io's Safety API using the --key option.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;gitleaks&lt;/strong&gt;: &lt;a href="https://github.com/zricethezav/gitleaks"&gt;Gitleaks&lt;/a&gt; is a SAST tool for detecting and preventing hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an easy-to-use, all-in-one solution for detecting secrets, past or present, in your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-would-i-change"&gt;
  &lt;/a&gt;
  What would i change
&lt;/h2&gt;

&lt;p&gt;I'm not a big fan of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tox&lt;/li&gt;
&lt;li&gt;sphinx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The job is one but if someone have better alternative, i would try them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you leaned a thing or two in this article.&lt;/p&gt;

&lt;p&gt;Using these tools can help you falling in some common pitfall.&lt;/p&gt;

&lt;p&gt;Pylance warning &amp;amp; errors are great best practices teachers. Your code understanding and therefore quality will greatly progress understanding and correcting them.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
      <category>tooling</category>
    </item>
    <item>
      <title>How to create a Custom VS Code Theme in 3 minutes</title>
      <author>Virej Dasani</author>
      <pubDate>Fri, 07 Jan 2022 11:39:54 +0000</pubDate>
      <link>https://dev.to/virejdasani/how-to-create-a-custom-vs-code-theme-in-3-minutes-g75</link>
      <guid>https://dev.to/virejdasani/how-to-create-a-custom-vs-code-theme-in-3-minutes-g75</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mbi27VNowks"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Like and Subscribe for more content &amp;lt;3&lt;br&gt;
Thanks a lot for over 1000 subscribers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
