<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn the Angular Pipe in-Depth + Tips on boosting performance using Pipe
</title>
      <author>Yuvaraj</author>
      <pubDate>Thu, 10 Jun 2021 12:30:21 +0000</pubDate>
      <link>https://dev.to/yuvgeek/learn-the-angular-pipe-in-depth-tips-on-boosting-performance-using-pipe-5aa5</link>
      <guid>https://dev.to/yuvgeek/learn-the-angular-pipe-in-depth-tips-on-boosting-performance-using-pipe-5aa5</guid>
      <description>&lt;p&gt;Hello everyone 👋,&lt;/p&gt;

&lt;p&gt;In this article, we are going to cover what is Angular Pipe, how to create it and utilize it in our template. Additionally, we will learn how to boost performance with a custom Pipe. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-pipe-in-angular"&gt;
  &lt;/a&gt;
  What is Pipe in Angular?
&lt;/h3&gt;

&lt;p&gt;From  &lt;a href="https://angular.io/guide/pipes#transforming-data-using-pipes"&gt;Angular Documentation&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use pipes to transform strings, currency amounts, dates, and other data for display. Pipes are simple functions you can use in template expressions to accept an input value and return a transformed value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usecase of pipe:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;strong&gt;DatePipe&lt;/strong&gt; to convert the Date object to a human-readable format.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UpperCasePipe&lt;/strong&gt; can be used to convert text to Uppercase.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CurrencyPipe&lt;/strong&gt; helps to transform a number to a currency string, formatted according to locale rules.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The best advantage to use Pipe is, while transforming the data, it doesn't modify the original data. Let's see it in action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-custom-pipe"&gt;
  &lt;/a&gt;
  Creating a Custom Pipe
&lt;/h3&gt;

&lt;p&gt;You can create a custom Pipe only when it is not available in the &lt;a href="https://angular.io/guide/pipes#transforming-data-using-pipes"&gt;built-in Pipe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are going to create a Pipe which filters the items as fruits/vegetables based on &lt;code&gt;type&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tomato&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vegetables&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;strong&gt;objective&lt;/strong&gt; is to show all the items in the first section, then show only fruits in the second section &amp;amp; vegetables in the third section.&lt;/p&gt;

&lt;p&gt;First, let's create a Pipe with the below &lt;code&gt;ng&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate pipe filter-items
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command creates a file as &lt;code&gt;filter-items.pipe.ts&lt;/code&gt; with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filterItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FilterItemsPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see it in detail on the created code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ng command created a class and applied &lt;code&gt;@Pipe&lt;/code&gt; decorator with name as a property. This is the name of the created pipe. Then it implements the &lt;code&gt;PipeTransform&lt;/code&gt; interface to perform the transformation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular invokes the &lt;code&gt;transform&lt;/code&gt; method with the value of a binding as the first argument, and any parameters as the second argument in list form, and returns the transformed value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Imagine, the &lt;code&gt;transform&lt;/code&gt; is just a function, to which the original item is passed as a first argument and any parameters as the second argument in list form.&lt;/p&gt;

&lt;p&gt;Now, update the &lt;code&gt;transform&lt;/code&gt; function to filter the items based on the &lt;code&gt;type&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filterItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FilterItemsPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#applying-the-custom-pipe-to-template"&gt;
  &lt;/a&gt;
  Applying the Custom Pipe to template
&lt;/h3&gt;

&lt;p&gt;This is our &lt;code&gt;app.component.ts&lt;/code&gt; which has &lt;code&gt;items&lt;/code&gt; and a method &lt;code&gt;addItem&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tomato&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vegetables&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;app.component.html&lt;/code&gt;, we are Iterating the items and&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Showing all the items in the first section&lt;/li&gt;
&lt;li&gt;Applied &lt;code&gt;filterItems&lt;/code&gt; Pipe in the 2nd section and passed &lt;code&gt;fruits&lt;/code&gt; as a second argument to it.&lt;/li&gt;
&lt;li&gt;Applied &lt;code&gt;filterItems&lt;/code&gt; Pipe in the 3rd section and passed &lt;code&gt;vegetables&lt;/code&gt; as a second argument to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we apply a pipe in the template, automatically the value on which pipe is applied is passed as a first argument to &lt;code&gt;transform&lt;/code&gt; and an additional argument can be passed by adding &lt;code&gt;:(colon)&lt;/code&gt; and then value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Original data&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{item.name}} - {{item.type}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Filtered fruits&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items | filterItems: 'fruits'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{item.name}} - {{item.type}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Filtered Vegetables&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items | filterItems: 'vegetables'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{item.name}} - {{item.type}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"addItem()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add Item&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the visual representation of how our &lt;code&gt;Pipe&lt;/code&gt; is applied to the template and the type is passed as a second argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XL1i7SsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623241903019/8QDcMUJlM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XL1i7SsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623241903019/8QDcMUJlM.png" alt="visual representation of our pipe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the output after applying our pipe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyBZSDlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623244052103/fXY1OnWlB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyBZSDlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623244052103/fXY1OnWlB.png" alt="Screenshot from 2021-06-09 18-36-49.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay! 😍 this is what we wanted. You can see that filtering the data happened by without modifying the original items.&lt;/p&gt;

&lt;p&gt;Let's try clicking the &lt;code&gt;Add Item&lt;/code&gt; button and see if &lt;code&gt;lemon&lt;/code&gt; is shown in the fruits section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmrYpirI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623244362377/Nixqcpxkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmrYpirI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623244362377/Nixqcpxkv.png" alt="Screenshot from 2021-06-09 18-42-12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Lemon&lt;/code&gt; is shown in the original data section, but it doesn't show in the &lt;code&gt;fruits&lt;/code&gt; section. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;p&gt;The reason is, when a Pipe is created, it will be set as a &lt;strong&gt;Pure Pipe&lt;/strong&gt; by default. Also, in the &lt;code&gt;addItem&lt;/code&gt; method, the &lt;code&gt;lemon&lt;/code&gt; is pushed to the same array. So, Angular doesn't know that there is a change in the value.  &lt;a href="https://angular.io/guide/pipes#detecting-impure-changes-within-composite-objects"&gt;Click here&lt;/a&gt; to learn more about it from &lt;code&gt;Angular&lt;/code&gt; documentation.&lt;/p&gt;

&lt;p&gt;To fix it, the Pipe can be changed to &lt;strong&gt;Impure Pipe&lt;/strong&gt; which runs the &lt;code&gt;transform&lt;/code&gt; function on all Angular Change Detection (or) create a new array every time when a new item is added to it.&lt;/p&gt;

&lt;p&gt;First, we will see the first approach on changing to Impure Pipe.&lt;/p&gt;

&lt;p&gt;Open the created pipe, and add &lt;code&gt;pure&lt;/code&gt; to false in the &lt;code&gt;@Pipe&lt;/code&gt; decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filterItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FilterItemsPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you click the &lt;code&gt;Add item&lt;/code&gt;, Lemon will be shown in the &lt;code&gt;fruits&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSivBlIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623244821984/G4740xGkF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSivBlIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623244821984/G4740xGkF.png" alt="Screenshot from 2021-06-09 18-50-09.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;Pure&lt;/code&gt; to false (Impure Pipe) solves the issue but let's discuss why it doesn't work with Pure Pipe. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pure-vs-impure-pipe"&gt;
  &lt;/a&gt;
  Pure vs Impure Pipe
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Before Ivy&lt;/strong&gt;, Pure Pipe creates only &lt;strong&gt;one instance of a class ** whereas Impure pipe **creates many instances&lt;/strong&gt; if it used in multiple places. In our example, we have used &lt;code&gt;filterItems&lt;/code&gt; pipe for the 2nd and the 3rd section. So, it will create 2 instances of the class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For Pure Pipe, the &lt;code&gt;transform&lt;/code&gt; function in the Pipe will be called only when there is a change in the &lt;code&gt;@Input()&lt;/code&gt;, change in the value passed to the pipe (for Object &amp;amp; Array it should be new reference) or forcefully running the change Detection with &lt;code&gt;changeDetectorRef&lt;/code&gt;.  For Impure Pipe, Angular executes the &lt;code&gt;transform&lt;/code&gt; every time it &lt;strong&gt;detects a change with every keystroke or mouse movement.&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are not using the Ivy engine, then if your page has 30 components uses Impure Pipe, and whenever there is a change in the mouse move, 120 times the &lt;code&gt;transform&lt;/code&gt; function will be triggered with 30 instances of Pipe. 🤯&lt;/p&gt;

&lt;p&gt;If you are using Ivy Engine, then be it Pure or Impure pipe, multiple instances will be created. &lt;br&gt;
But the condition on triggering the &lt;code&gt;transform&lt;/code&gt; function and the no of times is called are depends on the Pure or Impure Pipe.&lt;/p&gt;

&lt;p&gt;As the latest Angular version has Ivy set as true by default, we will see the examples considering the view engine as Ivy.&lt;/p&gt;

&lt;p&gt;In our pipe, the &lt;code&gt;id&lt;/code&gt; property is created and a unique id is assigned to the instance of the class through the &lt;code&gt;constructor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filterItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FilterItemsPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// unique id for the instance &lt;/span&gt;
&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// assigns the unique id for the instance&lt;/span&gt;
&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unique id =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refresh the application and open the console tab in the DevTools. &lt;/p&gt;

&lt;p&gt;As we've used pipe 2 times, one for &lt;code&gt;fruits&lt;/code&gt; and the other for &lt;code&gt;vegetables&lt;/code&gt;, 2 instances of the pipe is created with unique id as &lt;code&gt;6&lt;/code&gt; &amp;amp; &lt;code&gt;3&lt;/code&gt;. And the &lt;code&gt;transform&lt;/code&gt; function is called 8 times, 4 for each instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBbGmXDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623246091054/h2l8Emj4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBbGmXDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623246091054/h2l8Emj4h.png" alt="Screenshot from 2021-06-09 19-10-30.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if the &lt;code&gt;Add Item&lt;/code&gt; button is clicked, again &lt;code&gt;transform&lt;/code&gt; function called 4 times, 2 for each instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fFPG2Wt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623246316662/QH7FQj-X4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFPG2Wt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623246316662/QH7FQj-X4.png" alt="Screenshot from 2021-06-09 19-14-32.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, Angular runs this &lt;code&gt;transform&lt;/code&gt; function every time it detects a change with every keystroke or mouse movement. &lt;/p&gt;

&lt;p&gt;Just Imagine, a bigger application that has 100+ components in UI with many impure pipe. 🤯&lt;/p&gt;

&lt;p&gt;To fix this performance issue, &lt;strong&gt;Pure Pipe&lt;/strong&gt; should be used with some modification in the application code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boost-performance-with-pure-pipe"&gt;
  &lt;/a&gt;
  Boost Performance with Pure Pipe
&lt;/h3&gt;

&lt;p&gt;Let's fix this performance issue by following the below steps.&lt;/p&gt;

&lt;p&gt;Change the Pipe to &lt;code&gt;Pure&lt;/code&gt; by setting &lt;code&gt;pure: true&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filterItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FilterItemsPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// unique id for the instance &lt;/span&gt;
&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// assigns the unique id for the instance&lt;/span&gt;
&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unique id =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, open &lt;code&gt;app.component.ts&lt;/code&gt; and update the code in &lt;code&gt;addItem&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; addItem() {
    // push an element doesn't change reference.
    // this.items.push({name: 'Lemon', type: 'fruits'});

    // Angular Change Detection runs when it sees a change in the Array as new reference
   this.items = [...this.items, {name: 'Lemon', type: 'fruits'}]; 
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application and see the console tab.&lt;/p&gt;

&lt;p&gt;2 instance of the pipe is created (because of Ivy), and the &lt;code&gt;transform&lt;/code&gt; function is triggered 2 times, one for each.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--28fY9eGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623248447536/nAXH0XE4T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28fY9eGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623248447536/nAXH0XE4T.png" alt="Screenshot from 2021-06-09 19-50-19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click &lt;code&gt;AddItem&lt;/code&gt; and see the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qP3u-mmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623248566759/cJ3Seh7mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qP3u-mmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623248566759/cJ3Seh7mn.png" alt="Screenshot from 2021-06-09 19-52-14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;transform&lt;/code&gt; function is triggered 2 times, one for each.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Comparing with Pure with Impure Pipe, using Impure Pipe triggered 8 times the &lt;code&gt;transform&lt;/code&gt; function first, and on clicking &lt;code&gt;AddItem&lt;/code&gt;, 4 times it triggered &amp;amp; also whenever this is a mouse over or user interaction happens it will call multiple times again and again. But using Pure pipe, it triggers 4 times totally.&lt;/p&gt;

&lt;p&gt;So, always use the Pure Pipe.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article, I hope you liked it!&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://twitter.com/yuvgeek"&gt;Twitter&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/yuvgeek"&gt;Github&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>angular</category>
      <category>html</category>
    </item>
    <item>
      <title>Ever heard of debouncing in   in javascript , What is it ? </title>
      <author>Ashish J shetty</author>
      <pubDate>Thu, 10 Jun 2021 12:26:14 +0000</pubDate>
      <link>https://dev.to/ashishjshetty/ever-heard-of-debouncing-in-in-javascript-what-is-it-31o2</link>
      <guid>https://dev.to/ashishjshetty/ever-heard-of-debouncing-in-in-javascript-what-is-it-31o2</guid>
      <description>&lt;p&gt;If you are here you probably might know or want to learn the debouncing practice used to improve the web app performance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#purpose-of-debounce"&gt;
  &lt;/a&gt;
  Purpose of Debounce
&lt;/h4&gt;

&lt;p&gt;Debouncing is the technique used to limit the number of times a function can be executed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?.
&lt;/h4&gt;

&lt;p&gt;A debounce function will wait until the last time the  function is called and fire after a predefined amount of time or once the event firing becomes inactive .&lt;/p&gt;

&lt;p&gt;Din't get it ? sit tight let's see what exactly the above statement means .&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#debrief"&gt;
  &lt;/a&gt;
  Debrief
&lt;/h5&gt;

&lt;p&gt;Lets take an example of search bar in a e-commerce app.&lt;br&gt;
For suppose user wants to search for "school bag" , the user starts typing in letter by letter in the search bar . After typing each letter there will be an &lt;strong&gt;Api&lt;/strong&gt; call happening to fetch the product for the user search text , In this example 10 calls will  be done from browser to server. Think of the scenario that when millions of users making the same search there by making billions of &lt;em&gt;Api&lt;/em&gt; calls . Making huge number of Api's at a time will definitely leads to slower performance . &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#debouncing-to-the-rescue"&gt;
  &lt;/a&gt;
  Debouncing to the rescue.
&lt;/h5&gt;

&lt;p&gt;lets mock this scenario , Lets create a search box on each key stroke it will call a getData Api , here we will not call an actual Api but lets console log a text. &lt;br&gt;
Our HTML file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Parcel Sandbox&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;script src="./src/index.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;div id="app"&amp;gt;
      &amp;lt;input type="text" id="userInput" /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;our javascript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const inputBox = document.querySelector("#userInput");

function getData() {
  console.log("get Data api called ");
}

inputBox.onkeyup = getData;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5vZ1chK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m8ooikcmms7qul55334.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5vZ1chK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m8ooikcmms7qul55334.gif" alt="Debouncing"&gt;&lt;/a&gt;&lt;br&gt;
Here you can see that normal execution will make function call for each key up event, if the function is performing the heavy task like making an Api call then this could become a costly operation with respect to load on the server and web app performance. let's find a way to improve this using debouncing.&lt;/p&gt;

&lt;p&gt;updated javascript code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const inputBox = document.querySelector("#userInput");

function getData() {
  console.log("get Data api called ");
}

function debounce(fn, delay) {
  let timer;
  return function () {
    let context = this;
    let args = arguments;
    clearTimeout(timer);

    timer = setTimeout(() =&amp;gt; {
      fn.apply(context, args);
    }, delay);
  };
}

const debouncedFunction = debounce(getData, 300);

inputBox.addEventListener("keyup", () =&amp;gt; {
  debouncedFunction();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Result&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fho37OIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mow227uoql2jfj6oulr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fho37OIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mow227uoql2jfj6oulr.gif" alt="debounced function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is just wow!! we could reduce so much of load from the server and the better performing webapp.&lt;/p&gt;

&lt;p&gt;let's go through the code, a debounced function will typically return you a another function with the &lt;code&gt;setTimeout()&lt;/code&gt; , In the above code you might wondering why we have cleared the timer with &lt;code&gt;clearTimeout()&lt;/code&gt; first and then set the timer again with &lt;code&gt;setTimeOut()&lt;/code&gt; this is to get the delay i.e the repeated call will eventually clear the timer so api call will never happen until the difference between two function call is more than that of delay which is in this case 300 milliseconds so when a user starts typing if the difference between the last letter typed and next letter to be typed is more than the delay provided the function will be called.&lt;/p&gt;

&lt;p&gt;You might argue what we achieved with debouncing can also be achieved with &lt;strong&gt;Throttling&lt;/strong&gt; it wouldn't be wrong but these two have some subtle differences and different use cases .&lt;/p&gt;

&lt;p&gt;If you are wondering what &lt;strong&gt;Throttling&lt;/strong&gt; is, it is also a technique to reduced the number of times a function is called but let's keep the differences and use cases for a different blog post .&lt;/p&gt;

&lt;p&gt;Hope I made debouncing clear to you guys!! , for any correction or suggestions please comment down .&lt;/p&gt;

&lt;p&gt;Till then Happy Javascripting ❤&lt;br&gt;
Peace out ✌️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>That time when you thought you knew Y(A)ML ❗ 😵</title>
      <author>alxizr</author>
      <pubDate>Thu, 10 Jun 2021 12:21:31 +0000</pubDate>
      <link>https://dev.to/alxizr/that-time-when-you-thought-you-knew-y-a-ml-5302</link>
      <guid>https://dev.to/alxizr/that-time-when-you-thought-you-knew-y-a-ml-5302</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;Thank you for joining in for this article about YML files. We will make it today a little lightweight tutorial about YML configurations file. We will see what it is, how we can get started with it and where we use YML files all around but maybe missed those little neuance.&lt;/p&gt;

&lt;p&gt;Y(A)ML is a data serialization language and it is a strict superset of JSON (javascript object notation). It is data oriented structured language used as an input format for different software applications. We can deduct that the language in the end of the day consist of &lt;strong&gt;key:value&lt;/strong&gt; pairs. YML's goal is to be more human readable in a clean and consise manner.&lt;/p&gt;

&lt;p&gt;We often use tools available for us by interacting with a GUI interface, but we don't realize that under the hood there is nothing more than a YML file that is storing our personal configurations for the given task. We will take a look in a couple of examples here today along side learning the language.&lt;/p&gt;

&lt;p&gt;With YML we have 2 main types: &lt;strong&gt;Scalar&lt;/strong&gt; and &lt;strong&gt;Collection&lt;/strong&gt;. When we were young and went to high school we had our physics class and we learned that a scalar consist only of value that describes a size, this is not very far fetch with YML as well. It means that we can have only one unique key that can hold a value and if we use that same key again in our file, we will override the original value we set earlier. For example if we want to declare a variable (key) 'NAME' to the value 'Joey' then this variable, the key itself, is unique and we can use it globally in the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# key : value&lt;/span&gt;
    &lt;span class="na"&gt;NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Joey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we are not careful and declare that variable again to a different value, for example 'Chandler' then the last instance will override the original value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Joey&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="c1"&gt;# other&lt;/span&gt;
    &lt;span class="c1"&gt;# yml&lt;/span&gt;
    &lt;span class="c1"&gt;# configurations&lt;/span&gt;

    &lt;span class="na"&gt;NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Chandler&lt;/span&gt;
    &lt;span class="c1"&gt;# this line will be the only source of truth when the file is evaluated, thus overriding every instance of the key NAME beforehand&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A collection is basically the same, it also consist of &lt;strong&gt;key:value&lt;/strong&gt; pairs, but one key can hold multiple values. For example a list of names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# list&lt;/span&gt;
    &lt;span class="na"&gt;NAMES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Joey"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Chandler"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ross"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Phoebe"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Rachel"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Monica"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way to describe the same NAMES list or sequence is as such&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# list or sequence&lt;/span&gt;
    &lt;span class="na"&gt;NAMES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Joey"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Chandler"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ross"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Phoebe"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Rachel"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Monica"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A collection in YML is described not only in the form of an array but also can be described with maps. For example if we want to describe a mailing address of a person. Let's keep it simple for now. The address consist of street name, street number, city, state, zip code. Let's see how we can convert this address to YML, we will choose the address of a Pizza Hut somewhere in the USA.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# yml object&lt;/span&gt;
    &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;street_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;North Mathilda Avenue&lt;/span&gt;
      &lt;span class="na"&gt;street_number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;464&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sunnyvale&lt;/span&gt;
      &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CA&lt;/span&gt;
      &lt;span class="na"&gt;zipcode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94085&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see here, we have a key named 'address' which holds multiple &lt;strong&gt;key:value&lt;/strong&gt; pairs inside of it. You need to pay attention to the indentations. When we want to group multiple &lt;strong&gt;key:value&lt;/strong&gt; pairs under one logical container that is the parent, we must indent them with preferred 2 space charachters and each new line must be aligned vertically otherwise the YML file will throw an error when it is ready to execute.&lt;/p&gt;

&lt;p&gt;This particular description is called a 'Map'. The map name is 'address' and it holds several pieces of data that are in the usual form of &lt;strong&gt;key:value&lt;/strong&gt; pairs. You also can pay attention and see that the values are not only of type 'String' but can also be 'Number', either integer or float and also can be boolean. By the way, for strings the quotes are optional. We can also define a Date variable but need to apy attention that the date format must comply to the ISO 8601 standard which looks like this: 'yyyy-mm-dd hh:mm:ss:sss'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# dates ISO 8601&lt;/span&gt;
    &lt;span class="na"&gt;some_date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2018-30-09&lt;/span&gt;
    &lt;span class="na"&gt;some_datetime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2020-10-01 09:10:30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we know that YML consists of &lt;strong&gt;key:value&lt;/strong&gt; pairs and is a superset of JSON, we are able to describe map objects json style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# json style map object in YML&lt;/span&gt;
    &lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Jonhnny"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;35&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would prefer not to mix these 2 styles because to be honest, Sometimes we write very large YML files that are mile long and talking from experience here, if i get something wrong it is very unpleasant to debug. The fact that you can do it doesn't mean that you need to do it.&lt;/p&gt;




&lt;p&gt;So far what we talked about was the types and saw particular samples that are a bit plain. Let's see an example where we can start complexing things. In this first example we will see how we can combine maps and collections. Let's say that i want to represent a list of people and represent this list as a collection of map objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;people&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# method 1 - JSON style map object&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Alex&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;18&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;# method 2 - YML map object&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Eric&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;
        &lt;span class="na"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

        &lt;span class="c1"&gt;# method 3 - another YML map object, pay attention to the line break&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; 
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Sam"&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
        &lt;span class="na"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see here in this example, we have declared a variable (key) named 'people' and it holds multiple objects that are of the same format. We also can see that the way we declared each map object is different and we use 3 different methods to describe the same format for a map object but they all look the same for the YML. One point we need to mention is that we can nest as much as we need to. If the person object has a property that describes 'hobbies' for example, we can add it thus creating a list object containing a list. Let's see it in an example. I will use the previous collection as a reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;people&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tamara&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
        &lt;span class="na"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;sports&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Julia&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;
        &lt;span class="na"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;movies&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sports&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;food&lt;/span&gt;

        &lt;span class="c1"&gt;# pay attention to the nesting&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; 
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Elaine&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;
        &lt;span class="na"&gt;single&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;movies&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;swimming&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;hiking&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dancing&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;food&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus far we covered the types and how to use them. Now we will take a look at some features YML supports. We now will take a look at formatting. In case we have a key that should hold large amount of data such as description of the particular object there are 2 ways to format it. We will use either the chevron right '&amp;gt;' or the pipe '|' signs. The main difference between them is that the formatting is either preserved or not. The chevron-right '&amp;gt;' sign will not preserve formatting and the pipe '|' sign will preserve the formatting. The reason we use formatting is make it more readle for us as humans, YML will render everything in one line under the hood. Let's see it in action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# no formatting. the text is written in one line&lt;/span&gt;
    &lt;span class="na"&gt;car&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Toyota&lt;/span&gt;
      &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2021&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Awarded&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Green&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Car&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Journal's&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;2020&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Green&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Car&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Year®,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Corolla&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hybrid&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;even&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;comes&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;an&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;enhanced&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hybrid&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Battery&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Warranty&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;that&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;lasts&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;years&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;from&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;date&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;first&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;use,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;or&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;150,000&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;miles,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;whichever&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;comes&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;first"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# chevron right '&amp;gt;' sign will not preserve the formatting&lt;/span&gt;
    &lt;span class="na"&gt;car&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Toyota&lt;/span&gt;
      &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2021&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;"&lt;/span&gt;
        &lt;span class="s"&gt;Awarded Green Car Journal's 2020 Green Car of the Year®,&lt;/span&gt; 
        &lt;span class="s"&gt;Corolla Hybrid even comes with an enhanced Hybrid Battery Warranty that lasts for 10 years from date of first use,&lt;/span&gt; 
        &lt;span class="s"&gt;or 150,000 miles, whichever comes first&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# pipe '|' sign will preserve the formatting&lt;/span&gt;
    &lt;span class="na"&gt;car&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Toyota&lt;/span&gt;
      &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2021&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;|"&lt;/span&gt;
        &lt;span class="s"&gt;Awarded Green Car Journal's 2020 Green Car of the Year®,&lt;/span&gt; 
        &lt;span class="s"&gt;Corolla Hybrid even comes with an enhanced Hybrid Battery Warranty that lasts for 10 years from date of first use,&lt;/span&gt; 
        &lt;span class="s"&gt;or 150,000 miles, whichever comes first&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You now covered all the basics to start using YML like a pro for your everyday work. We have one other topic that we need to cover and will take a look at it in just a moment. I would like to point out a small nuances beforehand.&lt;/p&gt;

&lt;p&gt;YML also supports other features whcih we did not discuss here in this article and the reason i chose not to discuss about them is because the use cases that apply for these features are very marginal when you should justify the use for them. Features like tags that are used for explicit types, tuples, setting keys not as strings, paragraphs and more. You can read more about in the official YML docs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you do want that i will demonstrate some examples then just let me know and i will make another short part focusing on these features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The one big feature that YML also has called anchors and i often see that people do not really use it because of defferent reasons. To be honest i don't really know what is so scary with anchors and think that the value we gain by using them is huge. Anchors enable us to duplicate configurations or content and even inherit properties across the entire file. Not only that we can replicate a piece of configuration but we can inject an override to a specific key that is already defined in the anchor, thus making it very flexibale. I agree that if you have some small or basic configuration file then there is no reason to use it, but if we assume that the file will grow in its content then it does worth the extra work in setting up anchors.&lt;/p&gt;

&lt;p&gt;The way we work with anchors is by using the '&amp;amp;' sign and the '*' sign.&lt;br&gt;
The format to define an anchor is by declaring a key followed by the anchor name preceeded with the '&amp;amp;' sign and then the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;mykey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;myanchor&lt;/span&gt; &lt;span class="s"&gt;myvalue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can pay attention to the fact that the key and the anchor name don't have to match. When we want to use the anchor we need to assign the anchor name preceeded with the '*' sign as a value to another key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;anotherkey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*myanchor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example-yaml-anchors-1"&gt;
  &lt;/a&gt;
  Example - YAML Anchors 1
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;actor&lt;/span&gt; &lt;span class="s"&gt;Neo&lt;/span&gt;
    &lt;span class="na"&gt;movie_charachter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*actor&lt;/span&gt; &lt;span class="c1"&gt;# movie_charachter will hold the value Neo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in this simple example this is not really why or when we should use anchors. We are not looking for the simple implementations of anchors. I usually use them when i want to configure an object that has multiple properties, or &lt;strong&gt;key:value&lt;/strong&gt; pairs that should not change across the file everywhere we need to duplicate the instance. The way that we ue anchors with complex &lt;strong&gt;key:value&lt;/strong&gt; pairs is by using the double chevron-left '&amp;lt;&amp;lt;' signs follow by the anchor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-yaml-anchors-2"&gt;
  &lt;/a&gt;
  Example - YAML Anchors 2
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# global car object that we want to use across&lt;/span&gt;
    &lt;span class="na"&gt;car&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;base_car&lt;/span&gt;
      &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2021&lt;/span&gt;
      &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Toyota&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Corolla&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Grey&lt;/span&gt;

    &lt;span class="c1"&gt;# reuse the car object without changing anything&lt;/span&gt;
    &lt;span class="na"&gt;corolla&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base_car&lt;/span&gt;

    &lt;span class="c1"&gt;# reuse the car object and override one of the properties&lt;/span&gt;
    &lt;span class="na"&gt;runx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base_car&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;runx&lt;/span&gt;

    &lt;span class="c1"&gt;# reuse the car object and override several of the properties&lt;/span&gt;
    &lt;span class="na"&gt;prius&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base_car&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prius&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Red&lt;/span&gt;

    &lt;span class="c1"&gt;# reuse the car object, override property and add additional that doesn't exist in the original anchor&lt;/span&gt;
    &lt;span class="na"&gt;camry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base_car&lt;/span&gt;
      &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camry&lt;/span&gt;
      &lt;span class="na"&gt;seats&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in this example, we declared an anchor, used it in the YML file in different places and also customized it. Pay attention that the customization can apply to nested properties as well. Just read the part where we talked about nesting and implement it. No need to rewrite it again. Each one of the map objects will look the same as the anchor with the adjustments that we added.&lt;/p&gt;




&lt;p&gt;Let's talk about where you will encounter most likely YML file configurations in your everyday work. As developers and/or devops engineers we encounter YML configurations all the time when we need to use Docker, speciffically Docker Compose and also in our CI/CD pipelines. These 2 examples are the most common ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-yaml-docker-compose"&gt;
  &lt;/a&gt;
  Example - YAML Docker Compose
&lt;/h2&gt;

&lt;p&gt;in this example we will take a look at a simple docker compose config file for a local development environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# docker compose example&lt;/span&gt;

    &lt;span class="c1"&gt;# simple key:value pair&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

    &lt;span class="c1"&gt;# complex Map object with nested map objects, each nested object represents a service in docker compose&lt;/span&gt;
    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# service Map object&lt;/span&gt;
      &lt;span class="na"&gt;redis_sentinel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:alpine&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sentinel_data:/data&lt;/span&gt;

      &lt;span class="c1"&gt;# service Map object&lt;/span&gt;
      &lt;span class="na"&gt;redis_worker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:alpine&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ALLOW_EMPTY_PASSWORD=yes&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;worker_data:/data&lt;/span&gt;

    &lt;span class="c1"&gt;# another complex Map object with nested map objects. volumes used for persistant storage in docker. docker containers are ephemeral which means that they are not designed to run forever, especially in local dev environment and that is why we need to create a volume and bind the local host's file system into the docker container's file system&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# service Map object&lt;/span&gt;
      &lt;span class="na"&gt;sentinel_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
      &lt;span class="c1"&gt;# service Map object&lt;/span&gt;
      &lt;span class="na"&gt;worker_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see here in the example, we have a common use case for YML configurations file that is written in a repetative fashion. I am sure you are confident enough to try and rewrite this YML configurations file all by yourselves. Let's give it a try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# docker compose example&lt;/span&gt;
    &lt;span class="na"&gt;redis_service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;base_redis&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
      &lt;span class="na"&gt;volume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;

    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;sentinel_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
      &lt;span class="na"&gt;worker_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;

    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;sentinal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base_redis&lt;/span&gt;
        &lt;span class="na"&gt;volume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sentinal_data:/data&lt;/span&gt;

      &lt;span class="na"&gt;worker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base_redis&lt;/span&gt;
        &lt;span class="na"&gt;volume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;worker_data:/data&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ALLOW_EMPTY_PASSWORD=yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that i didn't touch the global configrations for volumes because it is very specific to docker and usually you do not want to make it dynmic. However, we can see that the rewrite didn't make too much of a difference, but we need to remember first that this is a very basic docker compose configurations file and if you add another 'service' under 'services' you will see the impact. Also the base _redis anchor is very light. Imagine that we had 20 properties with nested properties of their own and how would our file would look like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-yml-ci"&gt;
  &lt;/a&gt;
  Example - YML - CI
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Travis ci example&lt;/span&gt;

    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node_js&lt;/span&gt;
    &lt;span class="na"&gt;node_js&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;global&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PATH=$HOME/.local/bin:$PATH&lt;/span&gt;
    &lt;span class="na"&gt;before_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pyenv global 3.7.1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pip install -U pip&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pip install awscli&lt;/span&gt;
    &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo "Commit sha - $TRAVIS_COMMIT"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mkdir -p dist/@myapp/$TRAVIS_COMMIT&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mv dist/*.* dist/@myapp/$TRAVIS_COMMIT/&lt;/span&gt;
    &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;s3&lt;/span&gt;
      &lt;span class="na"&gt;access_key_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$AWS_ACCESS_KEY_ID"&lt;/span&gt;
      &lt;span class="na"&gt;secret_access_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$AWS_SECRET_ACCESS_KEY"&lt;/span&gt;
      &lt;span class="na"&gt;bucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;my_project_bucket"&lt;/span&gt;
      &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;us-west-2"&lt;/span&gt;
      &lt;span class="na"&gt;cache-control&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;max-age=31536000"&lt;/span&gt;
      &lt;span class="na"&gt;acl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;public_read"&lt;/span&gt;
      &lt;span class="na"&gt;local_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dist&lt;/span&gt;
      &lt;span class="na"&gt;skip_cleanup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
    &lt;span class="na"&gt;after_deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;chmod +x after_deploy_script.sh&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./after_deploy_script.sh"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the configurations in this file are self explanatory and you can see that the pattern is consistent. We use &lt;strong&gt;key:value&lt;/strong&gt; pairs and most of the configurations are complex map objects&lt;/p&gt;




&lt;p&gt;And that's all folks! This is all you need to know about YML. From now on you can and should be more confident when dealing with YML file configurations and maybe you will have the chance to improve existing files.&lt;/p&gt;

&lt;p&gt;By the way, if you asked yourself what YML stands for, it is Yet Another Markup Language. 😄😄😄&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A cool tool that i sometime use to validate the yml files i work on is &lt;a href="http://www.yamllint.com/"&gt;this&lt;/a&gt;, it check spelling and configurations so you can make sure that you didn't miss anything and in the case you did then an error wil be thrown 😄&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By the way, if you asked yourself what YML stands for, it is Yet Another Markup Language. 😄😄😄&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My first Launch! 🚀🚢</title>
      <author>Hugo Montenegro</author>
      <pubDate>Thu, 10 Jun 2021 12:19:03 +0000</pubDate>
      <link>https://dev.to/hm/my-first-launch-4d1l</link>
      <guid>https://dev.to/hm/my-first-launch-4d1l</guid>
      <description>&lt;p&gt;Hey, I'm finally shipping something!&lt;/p&gt;

&lt;p&gt;I'm working on two bigger projects at the moment, but have been frustrated for a bit because progress has been a bit slow. So, I thought I'd take a break and build something small and fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-wwwremindyme"&gt;
  &lt;/a&gt;
  INTRODUCING: &lt;a href="https://www.remindy.me/"&gt;www.remindy.me&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I found the domain name was available whilst I was working on one of my other projects (a domain name recommendation engine that generates new &amp;amp; available domains), thought it was cute and grabbed it immediately. A bit later, this website was born!&lt;/p&gt;

&lt;p&gt;Here's some more details for the curious:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h3&gt;

&lt;p&gt;Backend: Python/Flask&lt;br&gt;
Frontend: my weakpoint. Currently using Bootstrap 5 and some simple CSS. &lt;em&gt;Have I mentioned I hate CSS? At least now it looks good decent on mobile too)&lt;/em&gt;&lt;br&gt;
Email provider: Fastmail (love them)&lt;br&gt;
Deployment: Heroku (easy to setup, use, scale and maintain)&lt;br&gt;
Domain provider: Namecheap (much better than GoDaddy)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plans-for-the-future"&gt;
  &lt;/a&gt;
  Plans for the future
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open-Sourcing: I want to clean up the code a bit and then open-source the project. There's no revenue model and maintenance costs are low (7$/mo), so there's no downside. Besides, I use so much FOSS that it's the least I can do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nothing much more besides that. If you have any good ideas I'll be glad to hear them, but the idea was to have a simple service that I'd leave running forever (&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;a la Unix Philosophy&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#marketing-plans"&gt;
  &lt;/a&gt;
  Marketing Plans
&lt;/h3&gt;

&lt;p&gt;Don't really plan on promoting this much - it's just for fun. I had planned to share it with the few maker communities I'm part of, announce it on my &lt;a href="https://twitter.com/uwwgo"&gt;Twitter&lt;/a&gt;, and maybe do a Show HN once I've published the source code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Building this was fun. I enjoyed building a small-scale project that nevertheless is useful. Finishing something and shipping it also has given me some extra motivation to continue working on my other (larger) projects. Can't wait to ship!&lt;/p&gt;

&lt;p&gt;Lastly, if you want to connect with me, I'm quite active on &lt;a href="https://twitter.com/uwwgo"&gt;Twitter&lt;/a&gt; these days. Happy to follow back!&lt;/p&gt;

&lt;p&gt;I've also got a website I update occasionally:  &lt;a href="https://www.hugomontenegro.com/"&gt;www.hugomontenegro.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers and thanks for reading this!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introducing Otlio, a Powerful Todo List 🚀</title>
      <author>Stanley Owen</author>
      <pubDate>Thu, 10 Jun 2021 12:03:48 +0000</pubDate>
      <link>https://dev.to/stanleyowen/introducing-otlio-a-powerful-todo-list-2gm5</link>
      <guid>https://dev.to/stanleyowen/introducing-otlio-a-powerful-todo-list-2gm5</guid>
      <description>&lt;p&gt;Hello World! 🙋‍♂️👋&lt;br&gt;
I would like to introduce Otlio, a powerful Todo List 🚀, which also supports &lt;strong&gt;drag and drop&lt;/strong&gt;🤩.&lt;/p&gt;

&lt;p&gt;Website Link: &lt;a href="https://otlio.netlify.app/"&gt;https://otlio.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Support for Google and GitHub &lt;strong&gt;OAuth&lt;/strong&gt; 🔥 Login&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;2FA (Two Factor Authentication)&lt;/strong&gt; 🔑&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;Drag and Drop&lt;/strong&gt; Feature ✊&lt;/li&gt;
&lt;li&gt;Heavy focus on &lt;strong&gt;security&lt;/strong&gt; 🔐&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customer Support&lt;/strong&gt; 🙌&lt;/li&gt;
&lt;li&gt;Available in Dark Mode 🌓&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Otlio is also an open source project 👐, which is hosted on: &lt;a href="https://github.com/stanleyowen/otlio"&gt;https://github.com/stanleyowen/otlio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find this project useful, leave a 🌟 on &lt;a href="https://github.com/stanleyowen/otlio"&gt;GitHub&lt;/a&gt; to keep a beginner motivated. 😊&lt;/p&gt;

&lt;p&gt;Any comments will be appreciated and everyone is welcome to contribute to this project (＾Ｕ＾)ノ&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding! 🎉
&lt;/h2&gt;

&lt;p&gt;You may also like these articles:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/stanleyowen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoCVBbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VbJxvjnj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513457/4f66c06f-1d41-4254-ac22-8e8b98c384c2.jpg" alt="stanleyowen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stanleyowen/build-a-login-and-register-form-with-html-and-css-1nkl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;✨Build a Login and Register Form with HTML and CSS✨&lt;/h2&gt;
      &lt;h3&gt;Stanley Owen ・ Mar 3 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/stanleyowen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoCVBbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VbJxvjnj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513457/4f66c06f-1d41-4254-ac22-8e8b98c384c2.jpg" alt="stanleyowen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stanleyowen/todo-application-an-open-source-and-easy-to-use-web-application-f55" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Todo Application - An Open Source and Easy to Use Web Application&lt;/h2&gt;
      &lt;h3&gt;Stanley Owen ・ Feb 7 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/stanleyowen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoCVBbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VbJxvjnj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513457/4f66c06f-1d41-4254-ac22-8e8b98c384c2.jpg" alt="stanleyowen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stanleyowen/fire-ui-a-user-friendly-and-reliable-css-framework-229d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Fire-UI : A User-Friendly and Reliable CSS Framework&lt;/h2&gt;
      &lt;h3&gt;Stanley Owen ・ Dec 19 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>Awesome animation 🔥🔥 you have never seen it before</title>
      <author>Techy Programmers</author>
      <pubDate>Thu, 10 Jun 2021 11:57:29 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-fully-animated-header-that-you-have-never-seen-before-38ic</link>
      <guid>https://dev.to/kunaal438/how-to-make-fully-animated-header-that-you-have-never-seen-before-38ic</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to make an awesome fully animated header for your web page which you have never seen before. You can see demo below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kunaal_kumar/embed/oNZPpga?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial-"&gt;
  &lt;/a&gt;
  Video Tutorial -
&lt;/h1&gt;

&lt;p&gt;For better explanation. You can watch video tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fQcA1MBRvY0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the video tutorial. Please consider subscribing my youtube channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Inside HTML file under &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;the largest &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;code jam&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Eligendi facilis reiciendis sapiente excepturi unde recusandae officia natus laborum itaque id?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;register today&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"register-count"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9890 in&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"coding.png"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Dosis:wght@200;300;400;500;600;700;800&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dc3c3c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="m"&gt;2.2s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.header&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide-in&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.header&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide-in&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;slide-in&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fbfbfb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fbfbfb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;92%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.col&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fade-in&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;fade-in&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.svg&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'dosis'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#212121&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.info&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.register-count&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffeeee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/awesome-header-animation"&gt;Source Code&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>WebdriverIO Important Sync mode Updates</title>
      <author>Automation Bro</author>
      <pubDate>Thu, 10 Jun 2021 11:38:42 +0000</pubDate>
      <link>https://dev.to/automationbro/webdriverio-important-sync-mode-updates-1anj</link>
      <guid>https://dev.to/automationbro/webdriverio-important-sync-mode-updates-1anj</guid>
      <description>&lt;p&gt;In this post, we will go over some of the important updates related to WebdriverIO Sync mode. We will also cover some of the possible changes that will be coming in the WebdriverIO v8. But, before we start talking about WebdriverIO Sync mode, it’s important to understand how the WebdriverIO Async mode works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webdriverio-async-mode"&gt;
  &lt;/a&gt;
  WebdriverIO Async mode
&lt;/h3&gt;

&lt;p&gt;By default, WebdriverIO uses async mode to interact with the browser or the mobile device. It runs a set of asynchronous commands which are handled via &lt;code&gt;async/await&lt;/code&gt; in JavaScript. However, there are few downsides to using &lt;code&gt;async/await&lt;/code&gt; –&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Those unfamiliar with JavaScript or the asynchronous programming finds async/await confusing&lt;/li&gt;
&lt;li&gt;async/await is quite verbose as it is used for majority of the WebdriverIO commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at the sample code below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cufh0HA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/kIUO8UWUqA-ppnH_tipqjAvHrOro8wtYLZsAuHtLyeChu3AOytNi3DrvODh8K4UfklXjSyBWQz394rq18SpeEzdiwdGbgT4rzYtz3K8jp1XtQWa0BLrSVYtSq7lKvJym5dk72o4gzho" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cufh0HA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/kIUO8UWUqA-ppnH_tipqjAvHrOro8wtYLZsAuHtLyeChu3AOytNi3DrvODh8K4UfklXjSyBWQz394rq18SpeEzdiwdGbgT4rzYtz3K8jp1XtQWa0BLrSVYtSq7lKvJym5dk72o4gzho" alt="Async Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are couple of things to notice here –&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are starting the it block with the async keyword and then all the commands are using await keyword such as when finding an element or clicking on an element or any other WebdriverIO command.&lt;/li&gt;
&lt;li&gt;We can also not chain these functions with each other as that would also throw an error. Each individual command needs to awaited instead.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#webdriverio-sync-mode"&gt;
  &lt;/a&gt;
  WebdriverIO Sync mode
&lt;/h3&gt;

&lt;p&gt;So to address some of the above issues, WebdriverIO came up with sync mode and created a &lt;a href="https://www.npmjs.com/package/@wdio/sync"&gt;@wdio/sync plugin&lt;/a&gt; which allows you to run command synchronously through &lt;a href="https://www.npmjs.com/package/fibers"&gt;node-fibers&lt;/a&gt;. This plugin had some of the following advantages –&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It got rid of all the async/await from the code as the commands are synchronous now&lt;/li&gt;
&lt;li&gt;Tests look a lot more easier to read and understand (beginner friendly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at the sample code below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P82-xiKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/7a1usKcYdRDj7KkSG4wKaG7G8qHxVa2hK-Dwk7tWKjlSM7rWfdVMbvBH93TECmaxjpgnQ45HW0zuhYJPNHHWJ_2lxgewcfXJv1w9f2gwcRdbVMGrLI-eTqiM1jMJ6ZEIggYvFFpRtxE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P82-xiKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/7a1usKcYdRDj7KkSG4wKaG7G8qHxVa2hK-Dwk7tWKjlSM7rWfdVMbvBH93TECmaxjpgnQ45HW0zuhYJPNHHWJ_2lxgewcfXJv1w9f2gwcRdbVMGrLI-eTqiM1jMJ6ZEIggYvFFpRtxE" alt="sync mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above simplified example, you will notice that there are no more async/awaits in the second block which is a lot more user friendly to read and understand.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-webdriverio-discontinued-sync-mode"&gt;
  &lt;/a&gt;
  Why WebdriverIO discontinued Sync mode?
&lt;/h3&gt;

&lt;p&gt;WebdriverIO put out a warning on their website mentioning that the Sync mode will no longer be supported as of 14/04/2021 due to some breaking &lt;a href="https://chromium-review.googlesource.com/c/v8/v8/+/2537690"&gt;changes&lt;/a&gt; in Chromium which will not allow the usage of node-fibers. So, from Node v16 they will officially drop the support for WebdriverIO sync mode.&lt;/p&gt;

&lt;p&gt;That being said, there’s an active &lt;a href="https://github.com/webdriverio/webdriverio/discussions/6702"&gt;GitHub thread&lt;/a&gt; going on to discuss possible options as listed below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LNudMBJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/IeoBlvxUQ4VBPqoZg-GglHehlLhEbGMile49jvqbcG4GJJIYCtAu2DkZqw1kmghSNNf2VbYh9kQ10INKGzH27n3aqnGJDLBvVqnfF9wnOA9COVk1TbOn9DN9Ueh3W2Ei-yKTSoYPhOE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LNudMBJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/IeoBlvxUQ4VBPqoZg-GglHehlLhEbGMile49jvqbcG4GJJIYCtAu2DkZqw1kmghSNNf2VbYh9kQ10INKGzH27n3aqnGJDLBvVqnfF9wnOA9COVk1TbOn9DN9Ueh3W2Ei-yKTSoYPhOE" alt="github-thread"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The option the Steering Committee ended up going with was the last one which to accept the fact that WebdriverIO will be asynchronous moving forward.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-the-code-might-look-like-from-webdriverio-v8"&gt;
  &lt;/a&gt;
  How the code might look like from WebdriverIO v8?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZHi4mjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/smMePM6CelJYmTKIm2JaTM-W5gz13FXR2td0anDTxujaMQ3Y2YAdKoDUzjlUQpgvp6Z9gcCjzvF4NHbB9eElrHoXNVzfQnL8aNIv4B9jm7lCRkkUSR9NUlCXM0sGAt44XD_5aVjqOiM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZHi4mjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/smMePM6CelJYmTKIm2JaTM-W5gz13FXR2td0anDTxujaMQ3Y2YAdKoDUzjlUQpgvp6Z9gcCjzvF4NHbB9eElrHoXNVzfQnL8aNIv4B9jm7lCRkkUSR9NUlCXM0sGAt44XD_5aVjqOiM" alt="v8 code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will continue to use &lt;code&gt;async/await&lt;/code&gt; as it is, however, one major change that might possibly occur is that you will be able to chain WebdriverIO commands which is currently not possible in WebdriverIO v7. The advantage of this is that it will make code look a bit cleaner and less verbose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is still in works at the time of this article so there might be some updates or changes that could occur. You can follow the &lt;a href="https://github.com/webdriverio/webdriverio/discussions/6702"&gt;thread&lt;/a&gt; to get the latest info.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#you-can-still-use-sync-mode"&gt;
  &lt;/a&gt;
  You can still use Sync mode
&lt;/h3&gt;

&lt;p&gt;For those of you that still wants to use Sync mode for now, it is still possible to do that. Here’s what you will need to do –&lt;/p&gt;

&lt;p&gt;Check package.json to see &lt;a href="https://www.npmjs.com/package/@wdio/sync"&gt;@wdio/sync&lt;/a&gt; package is installed or not –&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If installed, you can continue to use the sync mode as usual&lt;/li&gt;
&lt;li&gt;If not installed, then you can install the package 

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm i @wdio/sync&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; WebdriverIO will continue the support for the sync mode until they decide to drop the support for Node v15. As starting, Node v16 the sync mode will not be supported anymore.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#my-take-on-all-of-these-changes"&gt;
  &lt;/a&gt;
  My take on all of these changes
&lt;/h3&gt;

&lt;p&gt;I understand it’s going to be a quite big change for a lot of the people that like the sync version of WebdriverIO given its simplicity, just the way I do. But, I would recommend that you &lt;strong&gt;start using async mode for your new projects&lt;/strong&gt; to avoid doing any kind of migrations in the future.&lt;/p&gt;

&lt;p&gt;For those with already an existing project in Sync mode will need to use the codemod that will get developed by the WebdriverIO team to do the migration from Sync mode to Async mode.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#webdriverio-tutorial-series"&gt;
  &lt;/a&gt;
  WebdriverIO Tutorial Series
&lt;/h3&gt;

&lt;p&gt;For those that are following my &lt;a href="https://www.youtube.com/watch?v=e8goAKb6CC0&amp;amp;list=PL6AdzyjjD5HBbt9amjf3wIVMaobb28ZYN"&gt;WebdriverIO video series&lt;/a&gt; on YouTube, in the series I am using WebdriverIO v6 with the Sync mode. So you can continue to use the Sync mode by installing the @wdio/sync package or decide to use async mode instead.&lt;/p&gt;

&lt;p&gt;I will also be creating videos in the future to show how to use async mode properly once WebdriverIO v8 is out.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-webdriverio-sync-mode-and-the-updates-related-to-it-"&gt;
  &lt;/a&gt;
  Check out the video below to learn more about WebdriverIO Sync mode and the updates related to it –
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Jk6giesyECA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to Private Facebook community&lt;/p&gt;

&lt;p&gt;👍 You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Automated Visual Regression Testing with BackstopJS</title>
      <author>Abubakkar Sithik</author>
      <pubDate>Thu, 10 Jun 2021 11:24:06 +0000</pubDate>
      <link>https://dev.to/abusithik/automated-visual-regression-testing-with-backstopjs-3bc4</link>
      <guid>https://dev.to/abusithik/automated-visual-regression-testing-with-backstopjs-3bc4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-visual-regression-testing"&gt;
  &lt;/a&gt;
  What is Visual Regression Testing?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;In a definition from more famous Wikipedia, Regression testing is re-running functional and non-functional tests to ensure that previously developed and tested software still performs after a change. In &lt;strong&gt;Visual Regression Testing&lt;/strong&gt;, we're trying to run a test to verify the application has no visual difference from its former or less developed state. So in visual regression testing(VRT), most of the time we're not going to test some sort of functionality that we've built. &lt;/p&gt;

&lt;p&gt;Typically, the main use-case of VRT comes in a few different ways. One of them is just doing updates for web app. When an application is getting an update(like upgrading internal libraries or security updates), we usually don't expect anything to be visually different. So, after an update application should look exactly the same and work exactly the same way before and after the update. So in VRT, we make sure that everything is working fine before the code goes live.&lt;/p&gt;

&lt;p&gt;Another possible use case is doing production/live sanity testing. So, after the prod server code update, the application in the prod server should look exactly the same and work exactly the same way as dev or test environment.&lt;/p&gt;

&lt;p&gt;While doing visual regression manually, we might be able to catch very blatant differences, but it's really difficult for us to catch subtle differences and also performing testing repeatedly. That's where a tool like &lt;a href="https://github.com/garris/BackstopJS"&gt;BackstopJS&lt;/a&gt; helps us to automatically highlight the differences between the two screenshots that will make our testing a much easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#BackstopJs"&gt;BackstopJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsfeatures"&gt;Backstop Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsflow"&gt;BackstopJS workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsbenefits"&gt;BackstopJS Benefits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#install"&gt;Installation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#bsinstall"&gt;BackstopJS Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#structure"&gt;BackstopJS project structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#test"&gt;Creating a visual regression test&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#navi"&gt;1. Navigate to your local project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#init"&gt;2. Initialize Backstop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit"&gt;3. Edit backstop.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1"&gt;Add viewports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Add scenarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cookies"&gt;How to handle cookies / sessions in backstopJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsref"&gt;4. Create new reference screenshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bstest"&gt;5. Run tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsapprove"&gt;6. Backstop approve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backstopjs"&gt;
  &lt;/a&gt;
  BackstopJS&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/garris/BackstopJS"&gt;BackstopJS&lt;/a&gt; is a framework that automates visual regression testing. This framework is written in JS and consists of the following tools:Puppeteer(headless chrome)+ ResembleJS(diff library). It uses a headless Chrome, in that way it's not actually opening up our Chrome browser and it's not taking screenshots that we can see. All we have to do is, write a script for simulating user scenarios and run backstopJS commands and it goes through and simulates user flows with headless chrome automatically. All we have to do is, run a simple command in the command-line tool so that it will take care of all the work for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backstop-features"&gt;
  &lt;/a&gt;
  Backstop Features&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Renders with headless chrome&lt;/li&gt;
&lt;li&gt;Simulates user interactions with simple JS / Puppeteer scripts&lt;/li&gt;
&lt;li&gt;Browser reports with visual diffs, CLI reports, and JUnit reports&lt;/li&gt;
&lt;li&gt;Easy to integrate with CI(Jenkins) and source control&lt;/li&gt;
&lt;li&gt;Very easy to use, just 3 commands to do everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backstopjs-workflow"&gt;
  &lt;/a&gt;
  BackstopJS workflow&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DC1capm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbd4konh05b7pgodtl3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DC1capm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbd4konh05b7pgodtl3f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backstopjs-benefits"&gt;
  &lt;/a&gt;
  BackstopJS Benefits&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"Reference (production env) vs Test (test/staging env)" Comparison&lt;/li&gt;
&lt;li&gt;Multiple viewports support (desktop browsers, mobile browsers,..etc.)&lt;/li&gt;
&lt;li&gt;Easy way to write UI tests (supports puppeteer scripts)&lt;/li&gt;
&lt;li&gt;Inbuilt interactive and detailed reports&lt;/li&gt;
&lt;li&gt;Easily way to scan our web application (backstop-crawl)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backstopjs-installation"&gt;
  &lt;/a&gt;
  BackstopJS Installation&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#check-node"&gt;
  &lt;/a&gt;
  Check Node
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The first thing you should do is check to see if you have a version of Node.js already installed. To do that in mac:
1. Open the Terminal &amp;amp; Enter `node - v` in the Terminal and press Enter
2. If you do have Node.js installed, it will output the version. Update to the latest version using `npm i -g npm`.
3. If you do not have Node.js installed, it will output something like `-bash: node: command not found` Continue with these instructions to install it. Go to https://nodejs.org/en/download/ You'll see download links for macOS. After Download, open the file &amp;amp; Go through the entire installation process. 
4. Enter node - v in the Terminal to verify that Node.js is installed correctly.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#backstopjs-installation"&gt;
  &lt;/a&gt;
  BackstopJS Installation&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#global-installation-recommended"&gt;
  &lt;/a&gt;
  Global installation (recommended)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ npm install -g backstopjs&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backstopjs-project-structure"&gt;
  &lt;/a&gt;
  BackstopJS project structure&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Inorder to create a new visual automation testing project, First of all, we need to initialize Backstop. To do that run &lt;code&gt;backtop init&lt;/code&gt; in the terminal.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ./sample_visualTestingProject
cd ./sample_visualTestingProject
backstop init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Now, the script will generate a new backstop config file &lt;code&gt;backstop.json&lt;/code&gt; and a folder &lt;code&gt;backstop_data&lt;/code&gt;. &lt;code&gt;backstop.json&lt;/code&gt; has some pre-configured stuff in it. &lt;code&gt;backstop_data&lt;/code&gt; folder has some file structure in place to save the screenshots it's gonna be generating.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The generated &lt;code&gt;backstop.json&lt;/code&gt; file, should look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "id": "backstop_default",
  "viewports": [
    {
      "label": "phone",
      "width": 320,
      "height": 480
    },
    {
      "label": "tablet",
      "width": 1024,
      "height": 768
    }
  ],
  "onBeforeScript": "puppet/onBefore.js",
  "onReadyScript": "puppet/onReady.js",
  "scenarios": [
    {
      "label": "BackstopJS Homepage",
      "cookiePath": "backstop_data/engine_scripts/cookies.json",
      "url": "https://garris.github.io/BackstopJS/",
      "referenceUrl": "",
      "readyEvent": "",
      "readySelector": "",
      "delay": 0,
      "hideSelectors": [],
      "removeSelectors": [],
      "hoverSelector": "",
      "clickSelector": "",
      "postInteractionWait": 0,
      "selectors": [],
      "selectorExpansion": true,
      "expect": 0,
      "misMatchThreshold" : 0.1,
      "requireSameDimensions": true
    }
  ],
  "paths": {
    "bitmaps_reference": "backstop_data/bitmaps_reference",
    "bitmaps_test": "backstop_data/bitmaps_test",
    "engine_scripts": "backstop_data/engine_scripts",
    "html_report": "backstop_data/html_report",
    "ci_report": "backstop_data/ci_report"
  },
  "report": ["browser"],
  "engine": "puppeteer",
  "engineOptions": {
    "args": ["--no-sandbox"]
  },
  "asyncCaptureLimit": 5,
  "asyncCompareLimit": 50,
  "debug": false,
  "debugWindow": false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;backstop.json&lt;/code&gt; is a configuration file, everything related to tests are defined in this file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets start off with &lt;code&gt;viewports&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"viewports": [
    {
      "label": "phone",
      "width": 320,
      "height": 480
    },
    {
      "label": "tablet",
      "width": 1024,
      "height": 768
    }
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;viewports&lt;/code&gt; are just a dimensions of the application site that we want to test /capture screenshots. The above example has one for phone and another one for tablet, maybe if we want to do desktop or whatever other dimensions are relevant for testing, we can simply add those dimenesion in &lt;code&gt;viewports&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;In below section of &lt;code&gt;backstop.json&lt;/code&gt;, we have a section for &lt;code&gt;scenarios&lt;/code&gt; where we can define different pages on our application and all the scenarios/flows for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scenarios": [
    {
      "label": "BackstopJS Homepage",
      "cookiePath": "backstop_data/engine_scripts/cookies.json",
      "url": "https://garris.github.io/BackstopJS/",
      "referenceUrl": "",
      "readyEvent": "",
      "readySelector": "",
      "delay": 0,
      "hideSelectors": [],
      "removeSelectors": [],
      "hoverSelector": "",
      "clickSelector": "",
      "postInteractionWait": 0,
      "selectors": [],
      "selectorExpansion": true,
      "expect": 0,
      "misMatchThreshold" : 0.1,
      "requireSameDimensions": true
    }
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a &lt;code&gt;label&lt;/code&gt; which is describing what this particular scenario is, and we have the &lt;code&gt;URL&lt;/code&gt; which is the URL that we're testing, this is gonna be our production application URL and then the &lt;code&gt;reference URL&lt;/code&gt; which is the baseline URL that we're testing it against. All these scenario properties are described here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;label                    // [required] Tag saved with your reference images
onBeforeScript           // Used to set up browser state e.g. cookies.
cookiePath               // import cookies in JSON format (available with default onBeforeScript see setting cookies below)
url                      // [required] The url of your app state
referenceUrl             // Specify a different state or environment when creating reference.
readyEvent               // Wait until this string has been logged to the console.
readySelector            // Wait until this selector exists before continuing.
delay                    // Wait for x milliseconds
hideSelectors            // Array of selectors set to visibility: hidden
removeSelectors          // Array of selectors set to display: none
onReadyScript            // After the above conditions are met -- use this script to modify UI state prior to screen shots e.g. hovers, clicks etc.
keyPressSelectors        // Takes array of selector and string values -- simulates multiple sequential keypress interactions.
hoverSelectors           // *Puppeteer only* takes array of selectors -- simulates multiple sequential hover interactions.
clickSelectors           // *Puppeteer only* takes array of selectors -- simulates multiple sequential click interactions.
postInteractionWait      // Wait for a selector after interacting with hoverSelector or clickSelector (optionally accepts wait time in ms. Idea for use with a click or hover element transition. available with default onReadyScript)
scrollToSelector         // Scrolls the specified DOM element into view prior to screen shot (available with default onReadyScript)
selectors                // Array of selectors to capture. Defaults to document if omitted. Use "viewport" to capture the viewport size. See Targeting elements in the next section for more info...
viewports                // An array of screen size objects your DOM will be tested against. This configuration will override the viewports property assigned at the config root.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for more details refer this &lt;a href="https://github.com/garris/BackstopJS#using-backstopjs"&gt;doc&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-visual-regression-test"&gt;
  &lt;/a&gt;
  Creating a visual regression test&lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, let's get started with the simple user flow: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Land on page 1 -&amp;gt; do some action (click a link/button) -&amp;gt; go to page 2&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Scenario 1: land on page 1, BackstopJS takes screenshot for page 1&lt;/li&gt;
&lt;li&gt;Scenario 2: from page 1, do some action and go to page 2, BackstopJS takes screenshot for page 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backstopjs-flow"&gt;
  &lt;/a&gt;
  BackstopJS Flow
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to your local project&lt;/li&gt;
&lt;li&gt;Initialize Backstop: backstop init&lt;/li&gt;
&lt;li&gt;Edit your backstop.json file

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;viewports&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;scenarios&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Create new reference screenshots: backstop reference&lt;/li&gt;
&lt;li&gt;Run tests: backstop test&lt;/li&gt;
&lt;li&gt;Approve tests: backstop approve&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-navigate-to-your-local-project"&gt;
  &lt;/a&gt;
  1. Navigate to your local project&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;After installing BackstopJS, create (or) navigate to project folder,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ./sample_visualTestingProject
cd ./sample_visualTestingProject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-initialize-backstop"&gt;
  &lt;/a&gt;
  2. Initialize Backstop&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Intialize backstop setup by running the following command. This command will generate a new backstop config file &lt;code&gt;backstop.json&lt;/code&gt; and a folder &lt;code&gt;backstop_data&lt;/code&gt;. This is just an one time command, if backstop files are already there, we need not to run this command again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;backstop init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-edit-backstopjson"&gt;
  &lt;/a&gt;
  3. Edit backstop.json&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#31-add-viewports"&gt;
  &lt;/a&gt;
  3.1 Add viewports&lt;a&gt;&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;open &lt;code&gt;backstop.json&lt;/code&gt; in any editor, and set &lt;code&gt;viewports&lt;/code&gt; for desktop and mobile chrome,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"viewports": [
    {
      "label": "Desktop Chrome",
      "width": 1280,
      "height": 800
    },
    {
      "label": "Mobile Chrome",
      "width": 375,
      "height": 812
    }
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#32-add-scenarios"&gt;
  &lt;/a&gt;
  3.2 Add scenarios&lt;a&gt;&lt;/a&gt;
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#scenario-1-land-on-page-1-backstopjs-takes-screenshot-for-page-1"&gt;
  &lt;/a&gt;
  Scenario 1: land on page 1, BackstopJS takes screenshot for page 1
&lt;/h6&gt;

&lt;p&gt;Let's use this &lt;a href="https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600"&gt;walmart&lt;/a&gt; product page as base page. So after user landing on this page, we have to take screenshot of this page using backstopJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    {
      "label": "walmartProductPage",
      "url": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
      "referenceUrl": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
      "delay": 5000
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;label&lt;/code&gt;: name of your scenario&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;url&lt;/code&gt;: Test URL &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;referenceUrl&lt;/code&gt;: baseline URL (since we don't have any development environment url, using same &lt;code&gt;url&lt;/code&gt; here for demo purpose.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;delay&lt;/code&gt;: It allows you to set a time to wait for the page to load before assuming it'll be ready to test.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#scenario-2-from-page-1-do-some-action-and-go-to-page-2-backstopjs-takes-screenshot-for-page-2"&gt;
  &lt;/a&gt;
  Scenario 2: from page 1, do some action and go to page 2, BackstopJS takes screenshot for page 2
&lt;/h6&gt;

&lt;p&gt;In this scenario, we are moving from product page -&amp;gt; cart page by clicking on &lt;code&gt;add to cart&lt;/code&gt; button &lt;code&gt;button.prod-ProductCTA--primary&lt;/code&gt;. After landing on this cart page, we have to take screenshot of this page using backstopJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {
    "label": "walmartCartPage",
    "url": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
    "referenceUrl": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
    "readySelector": "button.prod-ProductCTA--primary",
    "clickSelector": "button.prod-ProductCTA--primary",
    "delay": 5000
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;readySelector&lt;/code&gt; - Making Backstop to wait until a particular element (defined by CSS selector) is appearing before starting.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clickSelector&lt;/code&gt; - Making Backstop to click a particular element (defined by CSS selector)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Final &lt;code&gt;backstop.json&lt;/code&gt; file should look like this for the given scenario,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "id": "sample_project",
  "viewports": [
    {
      "label": "Desktop Chrome",
      "width": 1280,
      "height": 800
    },
    {
      "label": "Mobile Chrome",
      "width": 375,
      "height": 812
    }
  ],
  "onBeforeScript": "puppet/onBefore.js",
  "onReadyScript": "puppet/onReady.js",
  "scenarios": [
    {
      "label": "walmartProductPage",
      "url": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
      "referenceUrl": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
      "delay": 5000
    },
    {
      "label": "walmartCartPage",
      "url": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
      "referenceUrl": "https://www.walmart.com/ip/Super-Mario-Odyssey-Nintendo-Switch/56011600",
      "readySelector": "button.prod-ProductCTA--primary",
      "clickSelector": "button.prod-ProductCTA--primary",
      "delay": 5000
    }
  ],
  "paths": {
    "bitmaps_reference": "backstop_data/bitmaps_reference",
    "bitmaps_test": "backstop_data/bitmaps_test",
    "engine_scripts": "backstop_data/engine_scripts",
    "html_report": "backstop_data/html_report",
    "json_report": "backstop_data/json_report",
    "ci_report": "backstop_data/ci_report"
  },
  "report": ["browser"],
  "engine": "puppeteer",
  "engineOptions": {
    "args": ["--no-sandbox"]
  },
  "asyncCaptureLimit": 5,
  "asyncCompareLimit": 50,
  "debug": false,
  "debugWindow": false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this demo project other than &lt;code&gt;viewports&lt;/code&gt; &amp;amp; &lt;code&gt;scenarios&lt;/code&gt;, we don't really have to change anything else. Based on the requirement,  We can change the all the other variables if needed. For more details about &lt;code&gt;backstop.json&lt;/code&gt; properties, refer this &lt;a href="https://github.com/garris/BackstopJS#using-backstopjs"&gt;doc&lt;/a&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#how-to-handle-cookies-sessions-in-backstopjs"&gt;
  &lt;/a&gt;
  How to handle cookies / sessions in backstopJS&lt;a&gt;&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;In some scenarios, we might are try to access urls without repeating any login actions. When an application url has a cookie dependencies, backstopJS provides us a way to import cookies through json files. In such scenarios, we have to add the following backstop property in &lt;code&gt;backstop.json&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"cookiePath": "backstop_data/engine_scripts/cookies.json"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;In backstopJS, it is possible to first run a Puppeteer script that logins into application portal, then save the session cookies in a file. Now a subsequent scenarios can read those json file to load  cookies and proceeds to do some action - all without having to log in again.&lt;/p&gt;

&lt;p&gt;To run a custom script, add this step &lt;code&gt;"onReadyScript": "puppet/getCookies.js"&lt;/code&gt; in &lt;code&gt;backstop.json&lt;/code&gt; file to execute custom puppeteer script to handle cookies/session dynamically. You can find all custom puppeteer scripts in this location &lt;code&gt;workingdir &amp;gt; backstop_data &amp;gt; engine_scripts &amp;gt; puppet&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following &lt;code&gt;getCookies.js&lt;/code&gt; script, grabs cookies by logging into the app and stores the cookies in mentioned &lt;code&gt;cookiePath&lt;/code&gt; location.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fs = require('fs');
const  cookiePath = "backstop_data/engine_scripts/cookies.json";

module.exports = async (page, scenario, vp) =&amp;gt; {

    console.log('SCENARIO &amp;gt; ' + scenario.label);

    console.log("Closing cookie consent");
    await page.waitForSelector('button.form__button.form__button--green.cookie-button');
    await page.click('button.form__button.form__button--green.cookie-button');

   // Waits until the `email &amp;amp; password` meta element is rendered
    await page.waitForSelector('input[name="email"]');
    await page.waitForSelector('input[name="password"]');

    await page.type('input[name="email"]', 'userEmail@email.com',{delay: 5});
    await page.type('input[name="password"]', 'Test1234!',{delay: 5});

    console.log("Clicking Submit");
    await page.waitForSelector('button[type='login']');
    await page.click('button[type='login']');

    await page.waitForNavigation();

    const cookies = await page.cookies();

    console.log("The cookie is:", cookies);

    fs.writeFile(cookiePath, JSON.stringify(cookies, null, 2), function(err) {
        if (err) throw err;
        console.log('completed write of cookies');
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-reference-screenshots-raw-backstop-reference-endraw-"&gt;
  &lt;/a&gt;
  4. Create reference screenshots: &lt;code&gt;backstop reference&lt;/code&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;After saving the &lt;code&gt;backstop.json&lt;/code&gt; file, switch back to command line, and start with a executing Backstop reference command &lt;code&gt;backstop reference&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This command is gonna generate the initial reference screenshots. It will generate screenshots for the different view ports for the given scenarios, and then once that's done, we can see the generated screenshot images in &lt;code&gt;workingDir &amp;gt; backstop_data &amp;gt; bitmaps_reference&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WdpFkdIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egfa43zlgfzskga1okez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WdpFkdIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egfa43zlgfzskga1okez.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there's any failure, we could see the errors in command-line window. Modify the &lt;code&gt;backstop.json&lt;/code&gt; &amp;amp; rerun the reference command until getting a successful run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-run-tests-raw-backstop-test-endraw-"&gt;
  &lt;/a&gt;
  5. Run tests: &lt;code&gt;backstop test&lt;/code&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Once the reference images are generated successfully, we have to run this command &lt;code&gt;backstop test&lt;/code&gt; in command-line. Now backstopJS will generate screenshots of test application first and after that it will generate a report, by comparing them(reference vs test).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYGjVhRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x39v7ummdn69uux6iutq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYGjVhRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x39v7ummdn69uux6iutq.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets just go through the report, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can take a look at the reference and see the screenshot and kind of see what it looks like.&lt;/li&gt;
&lt;li&gt;We can jump over to the test, see what that looks like.&lt;/li&gt;
&lt;li&gt;We can also look at the DIFF to see everything highlighted that's different between the two, and then we can actually go to the scrubber and we can see a comparison of the two versions and scrub them back and forth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-backstop-approve-raw-backstop-approve-endraw-"&gt;
  &lt;/a&gt;
  6. Backstop approve: &lt;code&gt;backstop approve&lt;/code&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If the test we ran looks good, then go ahead and approve it. Approving changes will update your reference files with the results from your last test. Future tests are compared against your most recent approved test screenshots.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What we are trying to kind of learn here is that we can run BackstopJS on our computer in a pretty easy &amp;amp; quick way to automate our most of manual visual regression tests. In this demo project, we have explored the very simple test scenario to understand the BackstopJS. In real time scenarios, we might have to use puppeteer JS scripts to handle a complicated scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>testing</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>backstopjs</category>
    </item>
    <item>
      <title>Cool ES6 Proxy Hacks</title>
      <author>Tolga Ünlü</author>
      <pubDate>Thu, 10 Jun 2021 11:23:57 +0000</pubDate>
      <link>https://dev.to/tolgadevsec/cool-es6-proxy-hacks-5dhm</link>
      <guid>https://dev.to/tolgadevsec/cool-es6-proxy-hacks-5dhm</guid>
      <description>&lt;p&gt;Coming across &lt;a href="https://github.com/justjavac/proxy-www"&gt;this&lt;/a&gt; creative approach of using fetch, I was wondering in what cool ways you folks take advantage of JavaScript ES6 Proxies?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Google Season of Docs - 1</title>
      <author>Sarthak kundra</author>
      <pubDate>Thu, 10 Jun 2021 10:58:25 +0000</pubDate>
      <link>https://dev.to/kundrasarthak/google-season-of-docs-1-n54</link>
      <guid>https://dev.to/kundrasarthak/google-season-of-docs-1-n54</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;So I officially started with Google Season of Documentation 2021 with moja global on May 4th 2021. To be honest I have no idea where this last month went 😳. There are two things that I absolutely love about open source :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Software for the betterment of the community.&lt;/li&gt;
&lt;li&gt;Collaborating with new folks from the community.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And moja global has provided me with the best of both worlds! The community here is still in a budding state, so we're welcoming new people everyday (Hey, &lt;a href="https://join.slack.com/t/mojaglobal/shared_invite/zt-o6ta1ug0-rVLjAo460~d7JbZ~HpFFtw"&gt;why don't you join us?&lt;/a&gt;). Talking about the project I'm working on &lt;strong&gt;making a community website for moja global&lt;/strong&gt;. This will allow not just developers but anyone from the community like researchers, scientists, etc to get a glimpse of the projects and find out resources to learn about them. "Wait Sarthak, scientists you say? Why would scientists look at your project?" Hmm, good question! I think it's time I unveil the actual work that moja global does. Quoting moja global's official website :-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The moja global community supports ambitious climate action by developing pioneering, open-source software – including the groundbreaking FLINT software – to help users accurately and affordably estimate greenhouse gas emissions and removals from forestry, agriculture and other land uses (AFOLU). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By now I think it must be pretty clear why I'm loving every minute of working for this organisation. It makes me super happy that hey I'm helping in the fight for a sustainable future ❤️.&lt;/p&gt;

&lt;p&gt;So let's not waste anymore time and dive into what I did this month. Since this was my first month, it was mostly spent getting myself familiarised with the tools and planning my work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#diving-in-week-1"&gt;
  &lt;/a&gt;
  Diving In (Week 1)
&lt;/h1&gt;

&lt;p&gt;So I started my week by getting to know my team which mainly comprises of two mentors &lt;a href="https://github.com/aornugent"&gt;Dr. Andrew O' Reilly-Nugent&lt;/a&gt; &lt;a href="https://github.com/Tlazypanda"&gt;Sneha Mishra&lt;/a&gt;, a fellow GSoD intern and a good friend of mine &lt;a href="https://github.com/HarshCasper"&gt;Harsh Bardhan Mishra&lt;/a&gt; and two volunteers &lt;a href="https://github.com/shubhamkarande13"&gt;Shubham Karande&lt;/a&gt; and &lt;a href="https://github.com/waridrox"&gt;Mohammed Warid&lt;/a&gt;. Of course these people don't even comprise half of the moja global community but these are the people with whom I interact on a daily/weekly basis. &lt;/p&gt;

&lt;p&gt;After getting to know the people, the next logical step was to know the project. I spent the better part of the week trying to understand &lt;a href="https://moja.global/flint/"&gt;What is The Full Lands Integration Tool (FLINT)?&lt;/a&gt;. This obviously came hand-in-hand with me understanding the user-base of the tool and in connection &lt;strong&gt;helped me analyse the aspects I need to focus on while creating the community website&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26xBI73gWquCBBCDe/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26xBI73gWquCBBCDe/source.gif" alt="Genius GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#planning-and-auditing-week-2"&gt;
  &lt;/a&gt;
  Planning and Auditing (Week 2)
&lt;/h1&gt;

&lt;p&gt;One of my initial major task was to setup Github actions for all the repositories and have uniform issue labels. This helps the maintainers in maintaining the projects and also makes it easier for folks to move from one project to another without trying too hard to understand what type of work an issue requires. I followed a very simple model for this. I divided any issue into the category of documentation, testing or FrontEnd / BackEnd (if applicable) among other categories. Each issue was also assigned a priority between P0 - P2 (highest to lowest). &lt;/p&gt;

&lt;p&gt;The two other major highlights of the week were. Harsh and I &lt;strong&gt;compiling a list of all the Github actions&lt;/strong&gt; that we'll be using and &lt;strong&gt;auditing all the repositories of moja global, analysing what all could be improved&lt;/strong&gt; with respect to documentation, issue labels, Github actions, etc. so that new developers don't find the projects intimidating.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/4xWGyVKoXqg2eVCiq9/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4xWGyVKoXqg2eVCiq9/source.gif" alt="List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other highlight was I got on a 1-on-1 call with my mentor Sneha where I shared my plan of action for the community website. She was kind enough to give her suggestions and also point out a couple of potential roadblocks I might run into and how to solve them. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#meetings-and-new-beginnings-week-3"&gt;
  &lt;/a&gt;
  Meetings and New Beginnings (Week 3)
&lt;/h1&gt;

&lt;p&gt;This week was perhaps the most happening one. This week involved &lt;strong&gt;meeting the bright minds who are behind moja global, me and Harsh also proposed the formation of a Documentation working group&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The first meeting was an introductory one where I didn't take the spotlight. In this meeting my mentor Dr. Andrew took the time to &lt;strong&gt;introduce the team of moja global&lt;/strong&gt; and also what work was handled by whom. It was quite insightful and honestly &lt;strong&gt;I was astonished by the fact that I am working with such highly qualified individuals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The second meeting was well uno reverse of the first one 😂. This meeting was chaired by Harsh and me, this was with the Technical Steering Committee. It was quite an important meeting as the following things were discussed in it :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation plan for repositories&lt;/strong&gt; (Dividing  any documentation into 3 categories, suitable for researchers, new contributors and seasoned contributors)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mind map for the community website&lt;/strong&gt; (what sections it will have, plan of documentation, content differentiation between Read The Docs and the website, etc.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Proposal for formation of a documentation working group&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Style guide's formation&lt;/strong&gt; and it's progress till now.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Hm3rh1nMYe9BR20ThG/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Hm3rh1nMYe9BR20ThG/source.gif" alt="Meeting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#taking-charge-and-laying-foundations-week-4"&gt;
  &lt;/a&gt;
  Taking Charge and Laying Foundations (Week 4)
&lt;/h1&gt;

&lt;p&gt;This was the week where I finally got my hands dirty and dove into some good old, all-time favourite React ❤️. So after a lot of analysis of different static site generators like Gatsby, Jekyll, etc. It was decided that we'll go with &lt;strong&gt;Docusaurus&lt;/strong&gt; for the community website. As much as I love it you can't ignore the fact that using Docusaurus is a bit complex as compared to the other SSGs listed above but at the same time the power it provides, makes the tradeoff profitable.&lt;/p&gt;

&lt;p&gt;So, the week started with me meeting with my mentor Sneha where we formally officiated a plan of action for the first month and also decide how will we plan our project progress. She allowed me to decide how to track progress and I always prefer the Github's project board for it. "Why?" you ask? Well because it makes everything available at one place (the code, the issues and also the milestones).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ln1lXmgxzcJ9qSgynO/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ln1lXmgxzcJ9qSgynO/source.gif" alt="Planning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;setup the repository, the project board, etc. and pushed some boilerplate code to the repository&lt;/strong&gt; to get the ball rolling. After that I started working on some mockups for the homepage along with Mohd. Warid as he is way better than me in the UI/UX sector 😌. &lt;/p&gt;

&lt;p&gt;Apart from this some important meetings were also held in this week. One of them was with &lt;a href="https://climateadvisers.org/staff/kyle-saukas/"&gt;Kyle Salukas&lt;/a&gt; where we discussed a bit about what content we are planning on the community website and most importantly about how or where do we plan to host the website once it's made.&lt;/p&gt;

&lt;p&gt;After that since the creative process was taking a bit of time &lt;strong&gt;I used this time to do some DevRel work for moja global&lt;/strong&gt;. I onboarded 5 new contributors and hosted office hours with them where me and Harsh told them about the work that moja global does, got to know them and then based on their interests we tried to find areas where they could contribute. It has not even been 2 weeks and the new contributors already made 3-4 PRs 🥳. I mean what more can I ask for? 🤪&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/11BbGyhVmk4iLS/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/11BbGyhVmk4iLS/source.gif" alt="Working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#plan-for-next-month"&gt;
  &lt;/a&gt;
  Plan for next month
&lt;/h1&gt;

&lt;p&gt;The next month is gonna be hectic! All fun and games aside it's time we got down to business and get some chunk of work done. This is what I'm planning with respect to the minimum amount of work that should be done in the month of June :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finishing the homepage of the community website.&lt;/li&gt;
&lt;li&gt;Finalising the documentation style guide, content strategy and getting them approved by the Technical Steering Committee.&lt;/li&gt;
&lt;li&gt;Based on the style guide, finishing at least 1-2 projects' documentation on the website.&lt;/li&gt;
&lt;li&gt;Have the overall skeleton up and running of the website (Sections :- Blogs, wall of fame, etc.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that. I'll see you next month. No no wait... React 18 alpha just got out. Make it a couple of weeks 😉.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dNJr3cahxHPIMRyLKy/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dNJr3cahxHPIMRyLKy/source.gif" alt="See off"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>opensource</category>
      <category>github</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The feeling of Trunk-Based Development</title>
      <author>Dan Lebrero</author>
      <pubDate>Thu, 10 Jun 2021 10:47:24 +0000</pubDate>
      <link>https://dev.to/danlebrero/the-feeling-of-trunk-based-development-4hd1</link>
      <guid>https://dev.to/danlebrero/the-feeling-of-trunk-based-development-4hd1</guid>
      <description>&lt;p&gt;Trunk-Based development. &lt;/p&gt;

&lt;p&gt;Yet another practice that is rarely practiced in our industry, even if it is identified in the &lt;a href="https://dev.to/2020/01/22/accelerate-high-performing-technology-orgs-summary/#content"&gt;Accelerate book&lt;/a&gt; as one of the technical capabilities that is correlated with higher delivery performance.&lt;/p&gt;

&lt;p&gt;Plenty of blogs and conference talks explain the marvellous benefits of using it.&lt;/p&gt;

&lt;p&gt;You probably also needed to practice it to pass Jez Humble's  &lt;a href="https://continuousdelivery.com/foundations/continuous-integration/#faq"&gt;Continuous Integration test&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each commit should trigger a build and run some test suite.&lt;/li&gt;
&lt;li&gt;The build is never broken for more than 10 minutes.&lt;/li&gt;
&lt;li&gt;Commit to mainline every day. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes. You need to commit to trunk/master/main every day if you want to claim that your company is doing Continuous Integration.&lt;/p&gt;

&lt;p&gt;If with all the existing material, your teammates haven't been convinced to use Trunk-Based development, adding more reasons to the debate is foolish.&lt;/p&gt;

&lt;p&gt;Replicating the very successful method to &lt;a href="https://danlebrer.com/2018/10/16/how-to-convince-your-company-to-use-clojure/#content"&gt;convince your company to use Clojure&lt;/a&gt; could be a possibility, but a year as CTO teaches you that &lt;a href="https://danlebrero.com/2020/12/16/cto-diary-meeting-the-business/#content"&gt;appealing to people's emotions&lt;/a&gt; is more effective that any reasoning.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-how-does-trunkbased-development-feel-like"&gt;
  &lt;/a&gt;
  So how does Trunk-Based development feel like?
&lt;/h4&gt;

&lt;p&gt;Basically: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf7ND2aG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://danlebrero.com/images/blog/trunk-based-development/the-feeling-of-trunk-based-development.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf7ND2aG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://danlebrero.com/images/blog/trunk-based-development/the-feeling-of-trunk-based-development.gif" alt="the-feeling-of-trunk-based-development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a race to be the first one to commit &amp;amp; push, so it is your teammate -- and not you -- the one that has to deal with any conflicts. &lt;/p&gt;

&lt;p&gt;Happy Trunk-Based developing!&lt;/p&gt;




&lt;p&gt;Actually Trunk-Based development is great! For a more serious "Why Trunk-Based development" content I would recommend Mattia Battiston blog &lt;a href="https://medium.com/@mattia.battiston/why-i-love-trunk-based-development-641fcf0b94a0"&gt;Why I love Trunk Based Development&lt;/a&gt; or Steve Smith talk &lt;a href="https://www.infoq.com/presentations/death-continuous-integration/"&gt;The Death of Continuous Integration&lt;/a&gt;. Enjoy!&lt;/p&gt;

</description>
      <category>humour</category>
      <category>devops</category>
    </item>
    <item>
      <title>JavaScript Quick Tip: Quickly Get All Unique Values From An Array</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Thu, 10 Jun 2021 10:39:20 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/javascript-quick-tip-quickly-get-all-unique-values-from-an-array-35o0</link>
      <guid>https://dev.to/oliverjumpertz/javascript-quick-tip-quickly-get-all-unique-values-from-an-array-35o0</guid>
      <description>&lt;p&gt;The array is still one if not the major data structure in JavaScript. Especially given the fact that Set and Map were introduced way later, many developers have grown comfortable either going with a plain array or using a library for this purpose.&lt;/p&gt;

&lt;p&gt;If we now take into account that the array is the only data structure in JavaScript that comes with functional monad methods (map, filter, forEach, etc.), although there is a proposal going on to add these methods to all iterables, it's often more comfortable to go with a plain array for most purposes.&lt;/p&gt;

&lt;p&gt;The JavaScript array makes no assumptions about its elements. You can mix and match types, and you can also push duplicates. But what if you only want the unique values of your array?&lt;/p&gt;

&lt;p&gt;Gladly, there is a pretty short one-liner that makes it easy for you to filter out duplicates and get an array only containing unique values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;You can combine the spread operator together with the Set constructor to quickly get all unique values of an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unique&lt;/span&gt; &lt;span class="nx"&gt;Values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is only one issue with this code: The Set relies on the strict equality comparison (===), so it doesn't work well for objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-whole-tip-as-an-image"&gt;
  &lt;/a&gt;
  The Whole Tip As An Image
&lt;/h2&gt;

&lt;p&gt;If you like visual content more, or if you want to store it for later, I put all this into one single image for you. I hope you like it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCcKoOcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623321195020/3bHF80KjG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCcKoOcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623321195020/3bHF80KjG.png" alt="A picture showcasing the above code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-leave"&gt;
  &lt;/a&gt;
  Before You Leave
&lt;/h2&gt;

&lt;p&gt;If you would love to read even more content like this, feel free to visit me on &lt;a href="https://twitter.com/intent/follow?screen_name=oliverjumpertz"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/oliverjumpertz/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'd love to count you as my ever-growing group of awesome friends!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
