<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Authentication and Authorisation 101</title>
      <author>Charlotte Fereday</author>
      <pubDate>Sat, 16 Jan 2021 18:18:39 +0000</pubDate>
      <link>https://dev.to/charlottebrf_99/authentication-and-authorisation-101-143e</link>
      <guid>https://dev.to/charlottebrf_99/authentication-and-authorisation-101-143e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AsQfslLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k3er9yend19vj5sxhttu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AsQfslLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k3er9yend19vj5sxhttu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog post was originally published in Tes Engineering blog &lt;a href="https://engineering.tes.com/post/authentication-and-authorisation"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year I gave a talk at a &lt;a href="https://nodegirls.com/"&gt;Node Girls&lt;/a&gt; and &lt;a href="https://wearetechwomen.com/wosec-women-of-security/"&gt;Women of Security&lt;/a&gt;&lt;br&gt;
meetup to share a few things I have learned about authentication and authorisation since joining our &lt;a href="https://engineering.tes.com/post/tes-eng-sec-team/"&gt;Security Engineering team at Tes&lt;/a&gt;.&lt;br&gt;
You can see the video of this talk &lt;a href="https://youtu.be/dF19VrneJGo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post summarises some of the key points made during the talk, alongside some sketch notes and code snippets from &lt;a href="https://github.com/cfereday/pet-shop/tree/master/shop"&gt;an example app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Authentication and authorisation both relate to the concept of identity. Though the words are similar their meanings are different. Let’s explore how...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication" class="anchor"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;At the most basic level, we can say that authentication is the process of checking the identity of a user: &lt;em&gt;are you who you say you are?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CCcKRzRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fhj9yddsyl8unrfkzpej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCcKRzRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fhj9yddsyl8unrfkzpej.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common place that authentication is used is the Login Page of an application. During login user entered credentials are checked against what we have stored in the database. This allows us to verify that we know and trust a user is who they say they are, via, for example, a username and a password.&lt;/p&gt;

&lt;p&gt;Although the concept of authentication is straightforward, the technical process of its implementation is typically complex, because it’s absolutely vital to keep users’ data secure. For this reason, many companies opt to use a third party company, for example Google or Auth0, to handle the authentication process for them.&lt;/p&gt;

&lt;p&gt;Some companies choose to implement authentication themselves. Here are a couple of golden rules if you go down this route.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-1-only-a-customer-should-know-their-password" class="anchor"&gt;
  &lt;/a&gt;
  Rule 1: Only a customer should know their password
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY1geEFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lfxxydyv4bm8uw7z0h3y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY1geEFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lfxxydyv4bm8uw7z0h3y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping secret data secure is vitally important for any company to protect their users and their reputation. We want to mitigate against the risk that even if a bad actor got access to a database, they would never get a plain text password. The safest strategy to prevent this is to not store the plain text password at all.&lt;/p&gt;

&lt;p&gt;One solution is to hash passwords to carry out a ‘one way’ transformation which turns turns a plain text password into an unrecognisable string. We can use one way encryption to verify the password whilst making it very difficult for a bad actor to transform it to its original plain text value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIo-AtpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hj5r38k6gbecpxf2l3st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIo-AtpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hj5r38k6gbecpxf2l3st.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can safely hash passwords by using well maintained and recognised open source libraries, such as &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt library&lt;/a&gt;. Here’s an example code snippet using the &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt library&lt;/a&gt; to hash a password before storing it, to keep user credentials safe.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-2-always-validate-user-input-before-using-it" class="anchor"&gt;
  &lt;/a&gt;
  Rule 2: Always validate user input before using it
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmtBYrQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db1hktzyvnulrzushn1y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmtBYrQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db1hktzyvnulrzushn1y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most common places for an attack on an application is the Login page. Injection or hijacking attacks can aim to make our code do something we did not tell it to do, by sending an instruction where we would expect some user-entered data or credentials.&lt;/p&gt;

&lt;p&gt;Never trust the user input to safeguard applications, but rather always validate and transform data before using it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jN1BFSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3aqb1h0mnllgzynb8fon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jN1BFSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3aqb1h0mnllgzynb8fon.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again a widely used open source validation library like &lt;a href="https://github.com/hapijs/joi"&gt;Joi&lt;/a&gt; can help you easily create schemas and transform the data into safe objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authorisation" class="anchor"&gt;
  &lt;/a&gt;
  Authorisation
&lt;/h3&gt;

&lt;p&gt;After a user has been authenticated, we can move onto checking what resource they are authorised to access. It's important to control who-can-access-what to protect data, reputation and revenue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMO_bNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2jvf3sopq5p5ujydqts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMO_bNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2jvf3sopq5p5ujydqts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use roles to indicate whether or not a user should have access to a resource. For instance, only an administrator should be able to access the admin page, or only a particular client has access to a specific endpoint.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#json-web-tokensjwt" class="anchor"&gt;
  &lt;/a&gt;
  JSON Web Tokens(JWT)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://jwt.io/"&gt;Json Web Tokens (JWT)&lt;/a&gt; help to implement authorisation.&lt;br&gt;
JWT is an open standard that defines a way to securely transmit information between parties as a JSON object. &lt;/p&gt;

&lt;p&gt;We can trust this information because it is digitally signed and verified by server-side code.&lt;br&gt;
It helps authorisation systems scale, to ensure only those authorised have access to particular resources, and protect private personal data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sign" class="anchor"&gt;
  &lt;/a&gt;
  Sign
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bxpVQohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdkvc1pdx6y1abto8uur.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxpVQohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdkvc1pdx6y1abto8uur.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A JWT is digitally signed with a secret or a public/private key pair that is only known to an application. This means an application can ensure that the JWT was signed from a trusted source (via said secret or corresponding public key) and prevents it from being secretly tampered with.&lt;/p&gt;

&lt;p&gt;Here’s an example of using the &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken library&lt;/a&gt; to sign a JWT where it is then added to a cookie.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY2q_w5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qk8p5lmavxhn1s3os8vp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY2q_w5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qk8p5lmavxhn1s3os8vp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Role data is included as part of the JWT, for instance in this example if the username is ‘admin’ then this user gets an ‘admin’ role. Clearly this management of roles is a hack for a toy project, in a real secure system there will be more sophisticated ways of managing admins.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#verify" class="anchor"&gt;
  &lt;/a&gt;
  Verify
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFVCzlr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73wnxk3vqpwa3shz06gn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFVCzlr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73wnxk3vqpwa3shz06gn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have a JWT, we can verify that the token is valid on our servers, and only trust it if the JWT hasn’t been tampered with or expired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVwgGkq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lggtypka2yhta4kvg5ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVwgGkq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lggtypka2yhta4kvg5ba.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken library&lt;/a&gt; allows us to digitally verify a user or client and effectively manage whether they should have access to a particular resource.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Aside from learning more about authentication and authorisation, the aim of this blog is to show that as engineers we can learn a few good security practices and have access to many open source libraries to help us build more secure applications.&lt;/p&gt;

&lt;p&gt;Writing secure code is absolutely critical for our users - you don’t need to be a security expert to get started.&lt;/p&gt;

&lt;p&gt;If you’d like to learn more about some of the topics touched on here, I've listed below some articles that I found useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#passwords" class="anchor"&gt;
  &lt;/a&gt;
  Passwords
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theguardian.com/technology/2016/dec/15/passwords-hacking-hashing-salting-sha-2"&gt;Passwords and Jargon: The Guardian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"&gt;OWASP Password storage cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/bcrypt"&gt;Bcrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#validation" class="anchor"&gt;
  &lt;/a&gt;
  Validation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/about/appsecurity/learning/xss/index.html"&gt;Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0"&gt;The most common XSS in React JS applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@hapi/joi"&gt;Hapi/joi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#json-web-token" class="anchor"&gt;
  &lt;/a&gt;
  JSON web token
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc7519"&gt;Open Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jwt.io/introduction/"&gt;JWT&lt;/a&gt; and &lt;a href="https://thehftguy.com/2020/02/18/jwt-is-awesome-heres-why/amp/"&gt;JWT is awesome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#cookies" class="anchor"&gt;
  &lt;/a&gt;
  Cookies
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;Mozilla&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/cookies/Cookie"&gt;Cookie Flags&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/controls/SecureFlag"&gt;OWASP Secure Cookie Flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/HttpOnly"&gt;Http Only Flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.allaboutcookies.org/cookies/cookies-the-same.html"&gt;Session vs Persistent Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>The 7 JavaScript Skills You Need For React (+ Practical Examples)</title>
      <author>Reed Barger</author>
      <pubDate>Sat, 16 Jan 2021 15:41:53 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-7-javascript-skills-you-need-for-react-practical-examples-1ida</link>
      <guid>https://dev.to/reedbarger/the-7-javascript-skills-you-need-for-react-practical-examples-1ida</guid>
      <description>&lt;p&gt;One of the most important things to understand about React is that &lt;em&gt;it is fundamentally JavaScript&lt;/em&gt;. This means that the better you are at JavaScript, the more successful you will be with React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's break down the 7 essential concepts that you should know about JavaScript to master React.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And when I say these concepts are essential--they are used in every single application that a React developer makes, with little to no exceptions.&lt;/p&gt;

&lt;p&gt;Learning these concepts is one of the most valuable things you can do to accelerate your ability to make React projects and become a skilled React developer, so let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-your-own-copy-of-this-guide%E2%80%AC" class="anchor"&gt;
  &lt;/a&gt;
  Want Your Own Copy of this Guide?‬
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://bit.ly/7-js-skills-for-react"&gt;&lt;strong&gt;Download the cheatsheet in PDF format here&lt;/strong&gt;&lt;/a&gt; (it takes 5 seconds).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-function-declarations-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  1. Function Declarations and Arrow Functions
&lt;/h2&gt;

&lt;p&gt;The basis of any React application is the &lt;strong&gt;component&lt;/strong&gt;. In React, components are defined with both JavaScript functions and classes. But unlike JavaScript functions, React components return JSX elements that are used to structure our application interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript function: returns any valid JavaScript type&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;javascriptFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// React function component: returns JSX&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note the different casing between the names of JavaScript functions and React function components. JavaScript functions are named in camel casing, while React function components are written with pascal casing (in which all words are capitalized).&lt;/p&gt;

&lt;p&gt;There are two different ways to write a function in JavaScript. The traditional way, using the &lt;code&gt;function&lt;/code&gt; keyword, called a &lt;strong&gt;function declaration&lt;/strong&gt;. And as an &lt;strong&gt;arrow function&lt;/strong&gt;, which was introduced in ES6.&lt;/p&gt;

&lt;p&gt;Either function declarations or arrow functions can be used to write function components in React. The primary benefit of arrow functions is their succinctness. We can use several shorthands in order to write our functions to remove unnecessary boilerplate, such that we can even write it all on a single line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration syntax&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax (shorthand)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;span class="cm"&gt;/*
In the last example we are using several shorthands that arrow functions allow:

1. No parentheses around a single parameter
2. Implicit return (as compared to using the "return" keyword)
3. No curly braces for function body
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One small benefit of using function declarations over arrow functions is that you don't have to worry about problems with &lt;strong&gt;hoisting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Due to the JavaScript behavior of hoisting, you can use multiple function components made with function declarations in a single file in whichever order you like. Function components made with arrow functions, however, cannot be ordered whichever way you like. Because JavaScript variables are hoisted, arrow function components must be declared before they are used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Valid! FunctionDeclaration is hoisted */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FunctionDeclaration&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Invalid! ArrowFunction is NOT hoisted. Therefore, it must be declared before it is used */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArrowFunction&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FunctionDeclaration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ArrowFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;again&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another small difference between using the function declaration syntax is that you can immediately export a component from a file using &lt;code&gt;export default&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; before the function is declared. You can only use the &lt;code&gt;export&lt;/code&gt; keyword before arrow functions (default exports must be placed on a line below the component).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration syntax can be immediately exported with export default or export&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax must use export only&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-template-literals" class="anchor"&gt;
  &lt;/a&gt;
  2. Template Literals
&lt;/h2&gt;

&lt;p&gt;JavaScript has a clumsy history of working with strings, particularly if you want to &lt;strong&gt;concatenate&lt;/strong&gt; or connect multiple strings together. Before the arrival of ES6, to add strings together, you needed to use the &lt;code&gt;+&lt;/code&gt; operator to add each string segment to one another.&lt;/p&gt;

&lt;p&gt;With the addition of ES6, we were given a newer form of string called a &lt;strong&gt;template literal&lt;/strong&gt;, which consists of two back ticks instead of single or double quotes. Instead of having to use the &lt;code&gt;+&lt;/code&gt;operator, we can connect strings by putting a JavaScript expressions (such as a variable), within a special &lt;code&gt;${}&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Concatenating strings prior to ES6.
Notice the awkward space after the word Hello?
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello React!&lt;/span&gt;

&lt;span class="cm"&gt;/*
Concatenating strings using template literals.
See how much more readable and predictable this code is?
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello again, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello again, React!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's powerful about template literals is its ability to use any JavaScript expression (that is, anything in JavaScript that resolves to a value) within the &lt;code&gt;${}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;We can even include conditional logic using the ternary operator, which is perfect for conditionally adding or removing a class or style rule to a given JSX element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isRedColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRedColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRedColor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isRedColor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isRedColor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In short, template literals are great for React whenever we need to dynamically create strings. For example, when we use string values that can change in our head or body elements in our site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Shows site name (i.e. Reed Barger) at end of page title&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | Reed Barger`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-short-conditionals-ampamp-ternary-operator" class="anchor"&gt;
  &lt;/a&gt;
  3. Short Conditionals: &amp;amp;&amp;amp;, ||, Ternary Operator
&lt;/h2&gt;

&lt;p&gt;Considering React is just JavaScript, it is very easy to conditionally show (or hide) JSX elements using simple if statements and sometimes switch statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Who&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the help of some essential JavaScript operators, we cut down on repetition and make our code more concise. We can transform the if statement above in to the following, using the &lt;strong&gt;ternary operator.&lt;/strong&gt; The ternary operator functions exactly the same as an if-statement, but it is shorter, is an expression (not a statement), and can be inserted within JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt; : &amp;lt;div&amp;gt;Who are you&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ternary operators can also be used inside curly braces (again, since it is an expression):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome back!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Who are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we were to change the example above and only wanted to show text if the user was logged in (if &lt;code&gt;isLoggedIn&lt;/code&gt; is true), this would be a great use case for the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and) operator.&lt;/p&gt;

&lt;p&gt;If the first value (&lt;strong&gt;operand&lt;/strong&gt;) in the conditional is true, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator displays the second operand. Otherwise it returns the first operand. And since it is &lt;strong&gt;falsy&lt;/strong&gt; (is a value automatically converted to the boolean &lt;code&gt;false&lt;/code&gt; by JavaScript), it is not rendered by JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If true: Welcome back!, if false: nothing&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome back!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's say that we want the reverse of what we're doing now: to only say "Who are you?" if &lt;code&gt;isLoggedIn&lt;/code&gt; is false. If it's true, we won't show anything.&lt;/p&gt;

&lt;p&gt;For this logic, we can use the &lt;code&gt;||&lt;/code&gt; (or) operator. It essentially works opposite to the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator. If the first operand is true, the first (falsy) operand is returned. If the first operand is false, the second operand is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If true: nothing, if false: Who are you?&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Who are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-three-array-methods-map-filter-reduce" class="anchor"&gt;
  &lt;/a&gt;
  4. Three Array Methods: .map(), .filter(), .reduce()
&lt;/h2&gt;

&lt;p&gt;Inserting primitive values into JSX elements is easy, just use curly braces.&lt;/p&gt;

&lt;p&gt;We can insert any valid expressions, including variables that contain primitive values (strings, numbers, booleans, etc) as well as object properties that contain primitive values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;years&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Speaks&lt;/span&gt; &lt;span class="nx"&gt;English&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What if we have an array and we want to iterate over that array to show each array element within an individual JSX element?&lt;/p&gt;

&lt;p&gt;For this, we can use the &lt;strong&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/strong&gt; method. It allows us to transform each element in our array in the way we specify with the inner function.&lt;/p&gt;

&lt;p&gt;Note that it is especially concise when used in combination with an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note that this isn't exactly the same as the normal JavaScript .map() method, but is very similar. */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are other flavors of the .map() method that perform related tasks and are important to know because they can be chained in combination with one another.&lt;/p&gt;

&lt;p&gt;Why? Because &lt;code&gt;.map()&lt;/code&gt;, like many array methods returns a shallow copy of the array that it has iterated over, which enables it's returned array to be passed onto the next method in the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/strong&gt;, as its name indicates, allows us to filter certain elements out of our array. For example, if we wanted to remove all names of programmers that started with "J", we could do so with &lt;code&gt;.filter()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Returns 'Reed' */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's important to understand that both &lt;code&gt;.map()&lt;/code&gt; and &lt;code&gt;.filter()&lt;/code&gt; are just different variations of the &lt;strong&gt;&lt;code&gt;.reduce()&lt;/code&gt;&lt;/strong&gt; array method, which is capable of transforming array values into virtually any data type, even non-array values.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;.reduce()&lt;/code&gt; performing the same operation as our &lt;code&gt;.filter()&lt;/code&gt; method above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Returns 'Reed' */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-object-tricks-property-shorthand-destructuring-spread-operator" class="anchor"&gt;
  &lt;/a&gt;
  5. Object Tricks: Property Shorthand, Destructuring, Spread Operator
&lt;/h2&gt;

&lt;p&gt;Like arrays, objects are a data structure that you need to be comfortable with when using React.&lt;/p&gt;

&lt;p&gt;Since objects exist for the sake of organized key-value storage, unlike arrays, you're going to need to be very comfortable accessing and manipulating object properties.&lt;/p&gt;

&lt;p&gt;To add properties to an object as you create it, you name the property and it's corresponding value. One very simple shorthand to remember is that if the property name is the same as the value, you only have to list the property name.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;object property shorthand&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of name: name, we can use...&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Reed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The standard way to access properties from an object is using the dot notation. An even more convenient approach, however, is &lt;strong&gt;object destructuring&lt;/strong&gt;. It allows us to extract properties as individual variables of the same name from a given object.&lt;/p&gt;

&lt;p&gt;It looks somewhat like you're writing an object in reverse, which is what makes the process intuitive. It's much nicer to use than having to use the object name multiple times to access each time you want to grab a value from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Dot property access&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Object destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;knowsEnglish&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Use ':' to rename a value as you destructure it&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;knowsEnglish&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now if you want to create objects from existing ones, you could list properties one-by-one, but that can get very repetitive.&lt;/p&gt;

&lt;p&gt;Instead of copying properties manually, you can spread all of an object's properties into another object (as you create it) using the &lt;strong&gt;object spread operator&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Copy all of user's properties into secondUser&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What is great about the object spread is that you can spread in as many objects into a new one as you like, and you can order them like properties. But be aware that properties that come later with the same name will overwrite previous properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moreUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Copy all of user's properties into secondUser&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;moreUserInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MacBook Pro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { name: "Reed", age: 70, country: "USA", computer: "Macbook Pro" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-promises-asyncawait-syntax" class="anchor"&gt;
  &lt;/a&gt;
  6: Promises + Async/Await Syntax
&lt;/h2&gt;

&lt;p&gt;Virtually every React application consists of &lt;strong&gt;asynchronous code&lt;/strong&gt;--code that takes a indefinite amount of time to be executed. Particularly if you need to get or change data from an external API using browser features like the &lt;strong&gt;Fetch API&lt;/strong&gt; or the third-party library &lt;strong&gt;axios&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Promises are used to resolve asynchronous code to make it resolve like normal, synchronous code, which we can read from top to bottom. Promises traditionally use callbacks to resolve our asynchronous code. We use the &lt;code&gt;.then()&lt;/code&gt; callback to resolve successfully resolved promises, while we use the &lt;code&gt;.catch()&lt;/code&gt; callback to resolve promises that respond with an error.&lt;/p&gt;

&lt;p&gt;Here is a real example of using React to fetch data from my Github API using the Fetch API to show my profile image. The data is resolved using promises:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
      The first .then() let's us get JSON data from the response.
      The second .then() gets the url to my avatar and puts it in state.
    */&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/reedbarger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Instead of always needing to use callbacks to resolve our data from a promise, we can use a cleaned syntax that looks identical to synchronous code, called the &lt;strong&gt;async/await syntax&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The async and await keywords are only used with functions (normal JavaScript functions, not React function components. To use them, we need to make sure our asynchronous code is in a function prepended with the keyword &lt;code&gt;async&lt;/code&gt;. Any promise's value can then be resolved by placing the keyword &lt;code&gt;await&lt;/code&gt; before it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
    Note that because the function passed to useEffect cannot be async, we must create a separate function for our promise to be resolved in (fetchAvatar)
    */&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/reedbarger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;.catch()&lt;/code&gt; callback to handle errors within traditional promises, but how do you catch errors with async/await?&lt;/p&gt;

&lt;p&gt;We still use &lt;code&gt;.catch()&lt;/code&gt; and when we hit an error, such as when we have a response from our API that is in the 200 or 300 status range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/* Using an invalid user to create a 404 (not found) error */&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/reedbarge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`An error has occured: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/* In development, you'll see this error message displayed on your screen */&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-es-modules-import-export-syntax" class="anchor"&gt;
  &lt;/a&gt;
  7. ES Modules + Import / Export syntax
&lt;/h2&gt;

&lt;p&gt;ES6 gave us the ability to easily share code between our own JavaScript files as well as third-party libraries using &lt;strong&gt;ES modules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, when we leverage tools like Webpack, we can import assets like images and svgs, as well as CSS files and use them as dynamic values in our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* We're bringing into our file a library (React), a png image, and CSS styles */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../img/site-logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/app.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Site logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The idea behind ES modules is to be able to split up our JavaScript code into different files, to make it modular or reusable across our app.&lt;/p&gt;

&lt;p&gt;As far as JavaScript code goes, we can import and export variables and functions. There are two ways of importing and exporting, as &lt;strong&gt;named imports/exports&lt;/strong&gt; and as &lt;strong&gt;default imports/exports&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There can only be one thing we make a default import or export per file and we can make as many things named imports/export as we like. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// Notice that named exports are imported between curly braces&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can also write all of the exports at the end of the file instead of next to each variable or function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also alias or rename what you are importing using the &lt;code&gt;as&lt;/code&gt; keyword for named imports. The benefit of default exports is that they can be named to whatever you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getMyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMyName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-the-time-it-takes-to-watch-your-favorite-tv-show-you-can-start-a-100000-year-career-with-react" class="anchor"&gt;
  &lt;/a&gt;
  In the time it takes to watch your favorite TV show, you can start a $100,000 / year career with React.
&lt;/h3&gt;

&lt;p&gt;In this premium React training course, you can unlock the knowledge, skills, and confidence that deliver life-changing results in real dollars.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when the course opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Protecting Your Privacy Online</title>
      <author>Mat Jones</author>
      <pubDate>Sat, 16 Jan 2021 14:29:23 +0000</pubDate>
      <link>https://dev.to/matjones/protecting-your-privacy-online-3bmc</link>
      <guid>https://dev.to/matjones/protecting-your-privacy-online-3bmc</guid>
      <description>&lt;p&gt;Do you know who’s tracking you?&lt;/p&gt;

&lt;p&gt;If you’re like most people, you use Google Chrome as your default browser, you use Google as your default search engine, and you don’t often think about online privacy much further than that. Why should huge tech companies make fortunes at the direct expense of their users’ privacy?&lt;/p&gt;

&lt;p&gt;There are a lot of ways you can protect yourself and your privacy online, if you care enough to make the effort.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#browser" class="anchor"&gt;
  &lt;/a&gt;
  Browser
&lt;/h1&gt;

&lt;p&gt;If you use Google Chrome as your default browser, &lt;em&gt;the browser itself&lt;/em&gt; is spying on you. Google wants to collect your user data so badly, &lt;a href="https://spreadprivacy.com/search-preference-menu-duckduckgo-elimination/"&gt;they won’t even let you use DuckDuckGo as your default search engine in most countries anymore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last week, it was uncovered that the browser setting in Chrome to clear site data and cookies on exit &lt;a href="https://www.theverge.com/2020/10/21/21526341/google-chrome-local-storage-cookies-youtube-search-bug-fix"&gt;was exempting Google and YouTube from these requests&lt;/a&gt;. Reportedly, it was a bug, but as a software engineer who works daily with web technologies, I find it &lt;strong&gt;extremely&lt;/strong&gt; hard to believe that it really was a bug, and not just a sneaky, unethical feature that Google got caught on.&lt;/p&gt;

&lt;p&gt;If you value your privacy &lt;strong&gt;at all&lt;/strong&gt;, I highly recommend you switch to &lt;a href="https://www.mozilla.org/en-US/privacy/firefox/"&gt;Mozilla Firefox&lt;/a&gt;. Firefox is built with privacy in mind, and the browser code is &lt;a href="https://firefox-source-docs.mozilla.org/contributing/index.html"&gt;open source&lt;/a&gt;. On top of that, Firefox has better performance than Google Chrome.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#search-engine" class="anchor"&gt;
  &lt;/a&gt;
  Search Engine
&lt;/h1&gt;

&lt;p&gt;Please, stop using Google. Not only does Google track everything you search for and everything you click on in search results, but they also manipulate search results &lt;a href="https://www.businessinsider.com/google-manipulates-search-results-report-2019-11"&gt;for their own gain&lt;/a&gt; and to &lt;a href="https://www.breitbart.com/tech/2019/04/10/report-google-manually-manipulates-search-results-to-exclude-conservative-sites/"&gt;suppress political opposition&lt;/a&gt;. Further, Google tracks what you do &lt;em&gt;after you leave Google&lt;/em&gt;, too. &lt;a href="https://spreadprivacy.com/followed-by-ads/"&gt;Google trackers exist on 75% of the top million websites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://duckduckgo.com/spread"&gt;DuckDuckGo&lt;/a&gt; is a privacy-focused search engine that never tracks you, never collects or sells user data, and strives to provide unbiased results. DuckDuckGo also offers a &lt;a href="https://duckduckgo.com/app"&gt;browser extension and a mobile browser&lt;/a&gt; to help protect yourself everywhere on the web.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#facebook" class="anchor"&gt;
  &lt;/a&gt;
  Facebook
&lt;/h1&gt;

&lt;p&gt;My advice: just &lt;a href="https://www.facebook.com/help/224562897555674/"&gt;delete your Facebook account&lt;/a&gt;. Facebook is one of the worst offenders, if not &lt;em&gt;the&lt;/em&gt; worst offender. Same goes for any Facebook-owned companies, such as Instagram and WhatsApp.&lt;/p&gt;

&lt;p&gt;In 2016, Facebook &lt;a href="https://en.wikipedia.org/wiki/Facebook%E2%80%93Cambridge_Analytica_data_scandal"&gt;leaked millions of users’ private data to British consulting firm Cambridge Analytica without the users’ consent&lt;/a&gt;. This data &lt;strong&gt;was personally identifiable&lt;/strong&gt;, and primarily used for targeted political advertising.&lt;/p&gt;

&lt;p&gt;In 2019, Facebook ran a program to trick people into giving up all their data willingly by &lt;a href="https://www.techfoe.com/2019/01/facebook-is-paying-people-to-install.html"&gt;paying users to install a custom Facebook VPN app called Onavo&lt;/a&gt;, which allowed Facebook to just collect all meaningful data passing through the device, whether Facebook-related or not. This was a violation of Apple’s developer rules, so Onavo was quickly removed from the app store.&lt;/p&gt;

&lt;p&gt;If you still aren’t ready to give up on Facebook, at least install the &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/facebook-container/"&gt;Facebook Container&lt;/a&gt; extension for Firefox, built by Mozilla. Facebook Container makes Facebook run inside a special sandboxed container, making it hard for Facebook to track you to external websites or use 3rd party cookies.&lt;/p&gt;

&lt;p&gt;If you’re looking for a secure and private messaging alternative to WhatsApp, I recommend &lt;a href="https://telegram.org/"&gt;Telegram&lt;/a&gt; or &lt;a href="https://www.signal.org/"&gt;Signal&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#browser-extensions" class="anchor"&gt;
  &lt;/a&gt;
  Browser Extensions
&lt;/h1&gt;

&lt;p&gt;If you’re looking to take privacy more seriously, there are several browser extensions I use and recommend for blocking trackers, ads, and other malware. All of these extensions are available for both Chrome and Firefox. They’re also all open source, meaning anyone can view or submit patches for the code. Open source is &lt;a href="https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/open-source-security.html"&gt;generally considered good for security&lt;/a&gt;. In software development, &lt;a href="https://en.wikipedia.org/wiki/Linus%27s_law"&gt;Linus’s Law&lt;/a&gt; states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the fix obvious to someone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open source projects of sufficient size and traction have potentially thousands of contributors and testers actively working to find and resolve bugs and vulnerabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#duckduckgo-privacy-essentials" class="anchor"&gt;
  &lt;/a&gt;
  DuckDuckGo Privacy Essentials
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/duckduckgo-for-firefox/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tired of being tracked online? We can help. At DuckDuckGo, we believe online privacy should be simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Blocks hidden trackers&lt;/li&gt;
&lt;li&gt;  Enforce HTTPS encrypted connections where possible&lt;/li&gt;
&lt;li&gt;  Gives each website a “Privacy Grade” (A-F) so you can see how protected you are at a glance&lt;/li&gt;
&lt;li&gt;  Option to send standardized &lt;a href="https://globalprivacycontrol.org/"&gt;Global Privacy Control&lt;/a&gt; signal to websites you visit&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/duckduckgo/duckduckgo-privacy-extension"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ublock-origin" class="anchor"&gt;
  &lt;/a&gt;
  uBlock Origin
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;uBlock Origin is &lt;strong&gt;not&lt;/strong&gt; an “ad blocker”, it’s a wide-spectrum content blocker with CPU and memory efficiency as a primary feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Filters and blocks content based on block lists&lt;/li&gt;
&lt;li&gt;  Add additional popular community block lists&lt;/li&gt;
&lt;li&gt;  Block specific elements on a page manually or automatically&lt;/li&gt;
&lt;li&gt;  Add custom global or local filtering and blocking rules for content and/or Javascript&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/gorhill/uBlock"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#privacy-badger" class="anchor"&gt;
  &lt;/a&gt;
  Privacy Badger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/privacy-badger17/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Privacy Badger automatically learns to block invisible trackers. Instead of keeping lists of what to block, Privacy Badger automatically discovers trackers based on their behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Sends standardized &lt;a href="https://globalprivacycontrol.org/"&gt;Global Privacy Control&lt;/a&gt; and &lt;a href="https://www.eff.org/issues/do-not-track"&gt;Do Not Track&lt;/a&gt; signals to websites you visit&lt;/li&gt;
&lt;li&gt;  Blocks scripts that do not respect the Global Privacy Control or Do Not Track signals&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/EFForg/privacybadger"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#https-everywhere" class="anchor"&gt;
  &lt;/a&gt;
  HTTPS Everywhere
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/https-everywhere/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many sites on the web offer some limited support for encryption over HTTPS, but make it difficult to use. For instance, they may default to unencrypted HTTP, or fill encrypted pages with links that go back to the unencrypted site. The HTTPS Everywhere extension fixes these problems by rewriting all requests to these sites to HTTPS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Attempts to upgrade insecure HTTP connections to secure HTTPS connections&lt;/li&gt;
&lt;li&gt;  If HTTP→HTTPS upgrade is not possible, blocks the insecure HTTP connection by default&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/EFForg/https-everywhere"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clearurls" class="anchor"&gt;
  &lt;/a&gt;
  ClearURLs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/clearurls/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This extension will automatically remove tracking elements from URLs to help protect your privacy when browsing through the Internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Automatically removes URL tracking parameters like Google Analytics parameters and Amazon tracking parameters&lt;/li&gt;
&lt;li&gt;  Uses over 250 URL matching rules, matches a huge set of trackers&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://gitlab.com/KevinRoebert/ClearUrls"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#dns" class="anchor"&gt;
  &lt;/a&gt;
  DNS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2OzE7WE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fjyyuvz1hykxervd1c48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2OzE7WE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fjyyuvz1hykxervd1c48.png" alt="Statistics from my Technitium DNS server"&gt;&lt;/a&gt;&lt;/p&gt;
Real stats from my Technitium DNS server.



&lt;p&gt;If you want to take your privacy one step further, you can prevent your Internet Service Provider (ISP) from detecting every single site you request by running your own custom, encrypted &lt;a href="https://www.lifewire.com/what-is-a-dns-server-2625854"&gt;DNS server&lt;/a&gt;. I personally use and recommend &lt;a href="https://technitium.com/dns/"&gt;Technitium DNS&lt;/a&gt;, a free and open source DNS server.&lt;/p&gt;

&lt;p&gt;Technitium allows you to enforce that all DNS queries are encrypted, either via &lt;a href="https://en.wikipedia.org/wiki/DNS_over_TLS"&gt;DNS-over-TLS&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/DNS_over_HTTPS"&gt;DNS-over-HTTPS,&lt;/a&gt; which prevents your ISP from being able to see all of your DNS requests unencrypted. Additionally, you can block ads and malware that may have slipped through your other defenses by using a &lt;a href="https://blog.technitium.com/2018/10/blocking-internet-ads-using-dns-sinkhole.html"&gt;DNS Sinkhole&lt;/a&gt;. Basically, if a domain is requested which is in any of your configured block lists, Technitium just resolves the IP of the domain to an invalid IP address, 0.0.0.0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7LaQCM7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/od866qvj9cjggbkpsit4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7LaQCM7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/od866qvj9cjggbkpsit4.png" alt="DNS blocked domains"&gt;&lt;/a&gt;&lt;/p&gt;
Top domaind blocked over the last one week by my Technitium DNS server



&lt;h1&gt;
  &lt;a href="#vpn" class="anchor"&gt;
  &lt;/a&gt;
  VPN
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCoOs3cQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8lbyl028lyjx961qbgr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCoOs3cQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8lbyl028lyjx961qbgr1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
Always use protection.



&lt;p&gt;If you want to truly be fully anonymous online, you’ll need to use a 3rd party &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_network"&gt;VPN&lt;/a&gt; service. However, not all VPNs are created equal; you need to make sure you choose a VPN provider with a strict no-logging policy. I use and can recommend &lt;a href="https://nordvpn.com/features/strict-no-logs-policy/"&gt;NordVPN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NordVPN has a strict no-logging policy, and this policy has been verified by independent auditor PricewaterhouseCoopers AG, one of the &lt;a href="https://en.wikipedia.org/wiki/Big_Four_accounting_firms"&gt;Big Four auditing firms&lt;/a&gt;. NordVPN &lt;a href="https://support.nordvpn.com/General-info/Features/1061811142/Jurisdiction-we-operate-in.htm"&gt;operates within the jurisdiction of Panama&lt;/a&gt;, which has no legislation regarding mandatory data retention, unlike the US and EU; this is a good thing for a VPN provider. Such a strict no-logging policy could not exist legally under US or EU jurisdiction. You can even pay for your NordVPN subscription with cryptocurrency, without ever leaving a trace of your real identity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-onion-router-tor" class="anchor"&gt;
  &lt;/a&gt;
  The Onion Router (Tor)
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FppOtxeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkarzixxtgxoyrwkmhgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FppOtxeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkarzixxtgxoyrwkmhgo.png" alt="Tor logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to go &lt;a href="https://en.wikipedia.org/wiki/Edward_Snowden"&gt;Edward Snowden&lt;/a&gt; level private, NordVPN also has a feature called &lt;a href="https://nordvpn.com/features/onion-over-vpn/"&gt;Onion Over VPN&lt;/a&gt;. When connected to an Onion Over VPN server, all your internet traffic gets routed through a VPN server, then through a &lt;a href="https://www.torproject.org/"&gt;Tor&lt;/a&gt; proxy, and only then reaches the Internet. You can, of course, just use Tor directly via the &lt;a href="https://www.torproject.org/download/"&gt;Tor Browser&lt;/a&gt; without a VPN at all, but this still opens you up to some vulnerabilities.&lt;/p&gt;

&lt;p&gt;If you use Tor without a VPN, your ISP will know you are using Tor to access the internet, though this alone doesn’t compromise the actual data being sent and received over Tor. However, your IP address can still be compromised if there is a snooper, or multiple snoopers, in the network.&lt;/p&gt;

&lt;p&gt;Tor node servers are volunteer-operated; anyone, including authorities or other bad actors, can set up and operate a Tor node. While no single node is able to see the full network request or response, someone operating multiple servers which your request/response is routed through — especially entry or exist nodes — can discover your real IP address with a little work. For this reason, I still recommend using a VPN provider with Tor. That way, if your IP address is compromised, it’s just a VPN IP address and no real identifying information is compromised.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-have-nothing-to-hide-why-should-i-care" class="anchor"&gt;
  &lt;/a&gt;
  “I have nothing to hide. Why should I care?”
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biJmcpXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/806wxb0vir7sgo9tw5nf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biJmcpXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/806wxb0vir7sgo9tw5nf.jpg" alt="Edward Snowden"&gt;&lt;/a&gt;&lt;/p&gt;
If you’re asking this, Edward Snowden is disappointed.



&lt;h2&gt;
  &lt;a href="#privacy-is-your-right" class="anchor"&gt;
  &lt;/a&gt;
  Privacy Is Your Right
&lt;/h2&gt;

&lt;p&gt;Privacy is a right, but it’s not one we’ve always had; in fact, people in several authoritarian nations around the world, people still don’t have the right to privacy. And it’s one of the most important rights, right behind the right to free speech. Those who came before us fought so that we could enjoy the right to privacy, and dismissing that is grossly ignorant of history and its importance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-data-has-value" class="anchor"&gt;
  &lt;/a&gt;
  Your Data Has Value
&lt;/h2&gt;

&lt;p&gt;Google is &lt;a href="https://moneyinc.com/richest-companies-in-the-world-in-2019/"&gt;among the top 5 richest companies in the world&lt;/a&gt; when ranked by market cap. But the lion’s share of Google products are free; Gmail, Google Calendar, Google Drive, Google Photos, Google Meet, YouTube, etc. So how does Google make &lt;em&gt;so much money&lt;/em&gt;? Simple. They sell your personal user data to third parties. Why should a global mega-corporation be allowed to profit freely and massively from your personal user data?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-have-no-idea-how-much-is-out-there" class="anchor"&gt;
  &lt;/a&gt;
  You Have No Idea How Much Is Out There
&lt;/h2&gt;

&lt;p&gt;Most of the time, apathy about online privacy is actually a symptom of ignorance. Studies show that even those who are initially unbothered by online privacy issues &lt;a href="https://www.eff.org/files/willis_and_zeljkovic.pdf"&gt;become concerned when confronted with the amount and nature of data collection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If a stranger asked you to to fill out a 150 question form regarding personal information, with the express intention to sell that data to 3rd parties, would you consent?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#honorable-mentions" class="anchor"&gt;
  &lt;/a&gt;
  Honorable Mentions
&lt;/h1&gt;

&lt;p&gt;There are several other privacy tools that I haven’t covered here, but are definitely worth an honorable mention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#password-managers" class="anchor"&gt;
  &lt;/a&gt;
  Password Managers
&lt;/h2&gt;

&lt;p&gt;Everyone should be using a password manager. Reusing a password for multiple accounts is a security risk. A decent password manager can automatically detect signup forms in your browser and offer to generate a secure, strong password for you, sync your passwords between devices, and warn you if you have any weak, compromised, or reused passwords. I personally use a &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt; family account at home and a team account at work, and I can confidently recommend 1Password, but &lt;a href="https://www.dashlane.com/"&gt;Dashlane&lt;/a&gt; is another great option. If you’re looking for a free and completely offline solution, you can check out &lt;a href="https://keepassxc.org/"&gt;KeePassXC&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#privacytoolio" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://privacytools.io/"&gt;PrivacyTool.io&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Privacy-respecting search engine to find more privacy tools&lt;/li&gt;
&lt;li&gt;  Privacy-focused services and software&lt;/li&gt;
&lt;li&gt;  Non-profit and open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#deleteme" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://joindeleteme.com/"&gt;DeleteMe&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Automatically opt-out of the sale of your personal information by over 40 of the biggest data brokers&lt;/li&gt;
&lt;li&gt;  Provides DIY guides to manually opt-out for free&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#haveibeenpwnedcom" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://haveibeenpwned.com/"&gt;haveibeenpwned.com&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Historical records of data breaches&lt;/li&gt;
&lt;li&gt;  Check if any accounts associated with your email address have been compromised&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>privacy</category>
      <category>security</category>
      <category>offthegrid</category>
    </item>
    <item>
      <title>3 affirmations for the next 365 days: on improving myself as a developer</title>
      <author>Pauline</author>
      <pubDate>Sat, 16 Jan 2021 14:16:19 +0000</pubDate>
      <link>https://dev.to/httpspauline/3-affirmations-for-the-next-365-days-on-improving-myself-as-a-developer-4po7</link>
      <guid>https://dev.to/httpspauline/3-affirmations-for-the-next-365-days-on-improving-myself-as-a-developer-4po7</guid>
      <description>&lt;p&gt;On this day exactly one year ago, I published a piece in which I talked about 6 habits that I wanted to create in order to level up as a developer (you can read it &lt;a href="https://dev.to/httpspauline/6-new-habits-i-m-building-to-level-up-as-a-junior-developer-1n24"&gt;here&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;I re-visited it a few days ago and found this little retrospective very valuable and enjoyable, which gives me more than enough reason to write an updated piece for the coming year. This time I am changing it up a little bit by turning it into a shorter list of ✨&lt;em&gt;&lt;strong&gt;affirmations&lt;/strong&gt;&lt;/em&gt;✨ that I hope to manifest (because truthfully, calling it "2021 goals" makes it sound like a checklist and gives me too much pressure).&lt;/p&gt;

&lt;p&gt;I'm again sharing this publicly mostly for accountability reasons, but hopefully this will also inspire you to think about some things you want to work on during the next few months!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-i-am-getting-better-at-creative-problemsolving" class="anchor"&gt;
  &lt;/a&gt;
  1. I am getting better at creative problem-solving
&lt;/h3&gt;

&lt;p&gt;Whenever I build features, I have the tendency to solely focus on making things work and getting features shipped at a steady pace. While this is not necessarily a bad thing in itself, I often find myself criticising my own code for not being "elegant" or "sophisticated" enough—the implementations I come up with are oftentimes rather basic and in my opinion are nowhere as clever as some of the implementations built by my peers. Although my code also gets the job done, moving forward, I'd like to pay more attention to how others structure their logic and to the feedback I get in PRs in order to improve my problem-solving skills. &lt;/p&gt;

&lt;p&gt;On top of this, I would also like to improve the quality of the code reviews I conduct. While I tend to test and review PRs of others quite thoroughly, the feedback I give has often been limited to nitpicks. I believe that deepening the understanding of the stack I use daily will also play a valuable role in levelling up my creative problem-solving skills (which I hope to achieve by doing more of the next item on this list)!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-i-build-side-projects-to-boost-my-learning-and-development" class="anchor"&gt;
  &lt;/a&gt;
  2. I build side projects to boost my learning and development
&lt;/h3&gt;

&lt;p&gt;You don't need to code 14 hours a day and have 50 side projects that are all hosted on dedicated domains to call yourself a developer. I do think, however, that working on small projects every once in a while is a great way to learn new skills. Last year, my side project completion rate was a whopping &lt;strong&gt;66.7%&lt;/strong&gt;! My secret to success, you ask? Well... &lt;em&gt;(whispers)&lt;/em&gt; I only finished 2 out of 3 tiny projects I started. Yes, you read that right. I can count the number of projects I started on one hand. I also started 2 different courses and out of those, finished a grand total of 0.&lt;/p&gt;

&lt;p&gt;Because of these not-so-impressive key results, I will be recycling this item from &lt;a href="https://dev.to/httpspauline/6-new-habits-i-m-building-to-level-up-as-a-junior-developer-1n24"&gt;last year's list&lt;/a&gt; and hopefully start more projects (and finish those courses 😅) while still saving time for other hobbies, too.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-i-am-an-active-voice-of-newjunior-developers" class="anchor"&gt;
  &lt;/a&gt;
  3. I am an active voice of new/junior developers
&lt;/h3&gt;

&lt;p&gt;Even though my employer dropped the &lt;code&gt;junior&lt;/code&gt; term from my job title (hooray!) at the beginning of the year, I still find it extremely important that every single engineering culture is one that's comfortable for all engineers regardless of their experience level, and one in which everyone gets heard (especially in spaces where senior engineers vastly outnumber junior engineers). &lt;/p&gt;

&lt;p&gt;This requires (but is not limited to) documenting clearly where needed, communicating with each other in an inclusive way, leading by example, and creating a psychologically safe space for everyone. Having this type of environment will not only empower junior engineers, but can also be very helpful for engineers who are new to your codebase. &lt;/p&gt;

&lt;p&gt;This means we're going to have to fight a few misconceptions here. I want to continue spreading the message that accommodating to new developers does &lt;strong&gt;not&lt;/strong&gt; mean you are going to slow down the pace at which you ship, or that you're going to lower your code quality standards. It means being empathetic, inclusive, and contributing to the growth of others (because every senior engineer was once a junior engineer, too). &lt;/p&gt;




&lt;p&gt;If you have made it this far, thank you for reading. 💚 I'd love to hear from you: &lt;strong&gt;what are some affirmations you're setting for yourself?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Carl Bot For Discord?</title>
      <author>Simon Holdorf</author>
      <pubDate>Sat, 16 Jan 2021 13:39:41 +0000</pubDate>
      <link>https://dev.to/thesmartcoder/what-is-carl-bot-for-discord-2n6h</link>
      <guid>https://dev.to/thesmartcoder/what-is-carl-bot-for-discord-2n6h</guid>
      <description>&lt;p&gt;Running a Discord server is nothing short of an adventure, and while the platform offers you much freedom on how your community should look and function, there can be times when things can get too much.&lt;br&gt;
What with rowdy members, unexpected conflicts, civilized discussions taking a turn for the worst, and taking care of trolls, it can seem like an uphill battle trying to control and manage your Discord server. But the good news is you don't have to do it all.&lt;/p&gt;

&lt;p&gt;Discord is one of the best places to hang out, text, and chat about your favorite TV shows, video games, books, or other activities. While there is a Discord community for literally any category available under the sun, it can be a pain managing a large audience. But by installing and using bots, things become more manageable. &lt;/p&gt;

&lt;p&gt;In fact, you can use bots to manage your Discord server better and create streamlined processes for both existing and new members. Plus, they are free, and most of them come with a premium offer that gives you a whole set of other features to use along with the existing free features. And so today we'll be talking about Carl-Bot, how to use Carl bot, how to set it up and much more.&lt;/p&gt;

&lt;p&gt;So if you want to know how to make things easier for yourself as a Discord server manager and your members, keep on reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What is Carl Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Carl Bot Commands and Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;How to Set Up Carl Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-carl-bot" class="anchor"&gt;
  &lt;/a&gt;
  What is Carl Bot&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Carl Bot is an advanced bot that allows you to manage logs, store chats, and create reaction roles, like many Discord server bots available online.  It also takes AutoMod to the next level by not letting spam material, attachments, or links through and penalizes the people who post such stuff. &lt;/p&gt;

&lt;p&gt;Plus, it lets you be on top of your user engagement through starboards and creating a friendly community for new members by posting welcomes messages. If you're still getting the hang of using the Discord server, diving into Carl bot may seem hard. It is better to use different bots available, like Dyno Bot. We have made an extensive guide on using the &lt;a href="https://thesmartcoder.dev/discord-dyno-bot/"&gt;Dyno Bot&lt;/a&gt; for your Discord server. &lt;/p&gt;

&lt;p&gt;Coming back to Carl bot, if you are up to the challenge of doing advanced custom changes to your Discord server, then Carl bot is the way to go. &lt;/p&gt;

&lt;p&gt;For starters, it has a whole list of features that give you much authorization and freedom to proceed with moderating members and the content that goes up on your Discord server and channels. We're going to talk about them in detail in the next section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#carl-bot-commands-and-features" class="anchor"&gt;
  &lt;/a&gt;
  Carl Bot Commands and Features&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Carl bot has some fantastic features for managing and moderating your Discord server. Being used by more than 1,700,000 servers, here are some essential points to keep an eye out for:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reaction roles:&lt;/strong&gt; One of Carl bot's best features is the ability to set and define roles for members and moderators, which can be extremely beneficial for large communities. Once you set up a message for members to react to, a role will automatically be assigned to them depending upon the reaction you choose.&lt;/p&gt;

&lt;p&gt;There are more than 250 roles to choose from, and it is an effective way of limiting and banning spammers that can sneak into your Discord server. You can also write neat embeds without having to type out each emoji or role and can blacklist or whitelist available to your members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log chats and everything else:&lt;/strong&gt; you can also log every message that occurs in your server, member updates, number of members joined and left any updates you applied, and much more. It is a helpful tool to keep a backlog of all the events on your server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AutoMod to moderate effectively even when you're offline:&lt;/strong&gt; configuring AutoMod with Carl bot is highly beneficial as you can set the limit of the punishment members can receive for breaking any rules, setting those rules, handling spam, offensive language, and much more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcome new members:&lt;/strong&gt; create automatic welcome messages for your new members or members who are leaving, and easily embed them with different variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Permission system:&lt;/strong&gt; the permission system in the Carl bot allows you to manage command rules in bulk from the main dashboard. It creates a system, where you're not annoying anyone else. And once set up, you won't have to interfere unless any new update or upgrade is required. It also allows you to customize commands and use the bot's potential to mutate commands' behavior or override default settings with ease. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-set-up-carl-bot" class="anchor"&gt;
  &lt;/a&gt;
  How to Set Up Carl Bot&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that you've become acquainted with Carl bot, we're sure you must be wondering how you can set it up. Well, that is a piece of cake and won't require much tweaking. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow these steps to set up Carl bot for your Discord Server:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to: &lt;a href="https://carl.gg"&gt;carl.gg&lt;/a&gt; in your web browser.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Login&lt;/strong&gt; in the upper right corner. Register your Discord server through your email address or enter your email details if you're already registered.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/7mtLBSyMnO64h8Cqa1Qvnb/e2aff6a4c3908d7fdcf4af269ca1655e/what_is_carl_bot_1.png" alt="Register Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;Once logged in, simply select your Discord server from the list available.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/1CGk0FnNjd9O3YJcijCaQx/a2d8ecdfc9b939bd972e695f5647bfdc/what_is_carl_bot_2.png" alt="Select Discord Server for Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;On the next page, select the features you want to include and press on &lt;strong&gt;Accept&lt;/strong&gt;.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/2S0w5RuhKrHkba5AOCLNU2/fb067a184d1083c3523f6c44302e0cb1/what_is_carl_bot_3.png" alt="Select Features for Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;Login back to your Discord Server, and you must be able to see the Carl bot present in your main dashboard.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/1PRrN0pBz3bOfaQ42cgla5/e00db06e8cf37014aead0d592c007cdd/what_is_carl_bot_4.png" alt="Applay commands for Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;Now go to the Commands tab on your Carl Bot dashboard, and you will be able to apply all the commands we've discussed above and much more.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, setting up Carl bot for your Discord server is pretty easy and can be accomplished fast. We hope you found this article helpful.&lt;/p&gt;

&lt;p&gt;This post was originally published on &lt;a href="https://thesmartcoder.dev/carl-bot-discord/"&gt;The Smart Coder&lt;/a&gt; by Naomi Mazoto.&lt;/p&gt;

</description>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How to Secure JWT in a Single-Page Application</title>
      <author>Nilanth</author>
      <pubDate>Sat, 16 Jan 2021 13:31:35 +0000</pubDate>
      <link>https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko</link>
      <guid>https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko</guid>
      <description>&lt;p&gt;Securely make JWT based authentication in React Application.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to securely store the JWT token in a single page app for authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-all-the-options-we-have-to-store-the-token-in-the-browser" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are all the options we have to store the token in the browser?&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Local storage&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-local-storage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Local Storage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Is local storage is secure to store a token? Let see now, Local storage is accessible from client-side only, so your API provider will set the JWT in the API response Authorization header as a bearer token in login or Register API if the status success. In React, we will get the JWT and store it in the local storage as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odFXOQo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201583916/BySZXl1Q-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odFXOQo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201583916/BySZXl1Q-.png" alt="image_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPYqqfuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201607785/o-kO4i1HJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPYqqfuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201607785/o-kO4i1HJ.png" alt="image_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for the subsequent request made from the react app, the JWT is taken from local storage and set in the API request Authorization header to maintain the user session&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf-omBW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201616626/-6pHlUeoE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf-omBW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201616626/-6pHlUeoE.png" alt="image_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Values in local storage are accessible by javascript, so any cross-site script can get the JWT from local storage and gain your account access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doTCApD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201625400/nMy_EhpMS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doTCApD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201625400/nMy_EhpMS.png" alt="image_4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we should &lt;strong&gt;not use local storage for storing&lt;/strong&gt; JWT if you are using, Please update your authentication architecture as local storage is not secure to store a token. Next, let's move to memory&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-memory-react-state" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Memory (React State)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;React state variables will be assigned to default values when the app is refreshed or opened in a new tab, so if the default values are null, when the app is refreshed or opened in a new tab it will be set to null, so when we set the JWT in state variable it will disappear, so the user need to log in each time the app is refreshed or opened in a new tab or the app is closed, it will be poor User Experience. So we cannot store the JWT in the state variable.&lt;/p&gt;

&lt;p&gt;Before moving to &lt;strong&gt;JWT in cookie&lt;/strong&gt;, Let’s see about what is a cookie and its major attributes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cookie" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cookie&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie is another storage option available in a browser which has a expire time also, cookie also have some useful attributes to secure it from cross-site scripting (XSS) attacks. Let see what are they in detail&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#httponly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HttpOnly&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with HttpOnly attribute is not accessible by Javascript, so we cannot get the cookie as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let cookie= document.cookie; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HttpOnly&lt;/strong&gt; cookie can be set and accessed only by the server-side script. This attribute helps to prevent cross-site scripting(XSS) attacks if it’s set with &lt;strong&gt;SameSite=strict&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#secure" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Secure&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with &lt;strong&gt;Secure&lt;/strong&gt; attribute will be sent to the server only over the HTTPS request, not in an HTTP request. The &lt;strong&gt;Secure&lt;/strong&gt; cookie is encrypted in request and response, so &lt;strong&gt;Man-in-the-middle&lt;/strong&gt; attack is prevented by using Secure attribute with &lt;strong&gt;HttpOnly&lt;/strong&gt; and &lt;strong&gt;SameSite=strict&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#samesite" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SameSite&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with &lt;strong&gt;SameSite=strict&lt;/strong&gt; mentions that the cookie is available only for same site origin request not for cross-site request. Now let see how to use the cookie to store JWT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-cookie" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Cookie&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie can be set from the server-side and also in client-side, First we can see how to set and get the JWT from the cookie in the React and using the browser console.&lt;/p&gt;

&lt;p&gt;The server set the JWT as a Bearer token in the Authorization response header, In client-side, the script has access to the token present in the header, we get the token from response header and set in the cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJDxpZLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201653012/obo0gzlkY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJDxpZLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201653012/obo0gzlkY.png" alt="image_5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUbMh4OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201662218/I9lcm_i7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUbMh4OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201662218/I9lcm_i7i.png" alt="image_6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cookie is set to the current domain by default and expiry date is set to 1st Jan 2021. The expiry date is based on the token validity so the token will be removed from browser cookie once the expiry date reaches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oT1e_6xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201672163/EBazPMiSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oT1e_6xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201672163/EBazPMiSL.png" alt="image_7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cookie needs to send as a bearer token in API request header on every request made from the client. So, for that, we can get it from the cookie using &lt;strong&gt;document.cookie&lt;/strong&gt; property as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mY_qc52H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201679706/RD0LxcIUd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY_qc52H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201679706/RD0LxcIUd.png" alt="image_8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;document.cookie will return all cookies present against the domain, so we can use  &lt;a href="https://github.com/reactivestack/cookies/tree/master/packages/react-cookie"&gt;react-cookie&lt;/a&gt;  package to get a specific cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwlmtGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201736323/WwLy9vpn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwlmtGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201736323/WwLy9vpn3.png" alt="image_9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see that the token is set and get using the script, so we could conclude that handling JWT in the react will lead to XSS (Cross-Site Scripting) attacks same as we saw before while using local storage, but we saw two attributes earlier &lt;strong&gt;HttpOnly&lt;/strong&gt; and &lt;strong&gt;Secure&lt;/strong&gt;, by setting these attributes will avoid these attacks. But javascript has no access to &lt;strong&gt;HttpOnly&lt;/strong&gt; attribute, Only server-side script can access &lt;strong&gt;HttpOnly&lt;/strong&gt; attributes. Let see how we can set the JWT from Server Side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As previous examples, we saw that JWT is set as Bearer token in authorization header, But handling cookie in server-side we need set the cookie in &lt;strong&gt;Set-Cookie&lt;/strong&gt; header and not required to mention the token type as &lt;strong&gt;Bearer&lt;/strong&gt;, we can set the JWT directly in &lt;strong&gt;Set-Cookie&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here I am using Express.js to set JWT in the cookie from the server and we have set &lt;strong&gt;secure&lt;/strong&gt; and &lt;strong&gt;HttpOnly&lt;/strong&gt; as &lt;strong&gt;true&lt;/strong&gt; to restrict the javascript access of JWT in the cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jNQjHZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201767558/mmy3KhwL5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jNQjHZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201767558/mmy3KhwL5.png" alt="image_10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The token in API response &lt;strong&gt;Set-Cookie&lt;/strong&gt; header will be saved to browser cookies like in below image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEsMFAIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201775244/hjnVvFaA6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEsMFAIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201775244/hjnVvFaA6.png" alt="image_11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1X1gjoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201802381/mi0YCETcW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1X1gjoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201802381/mi0YCETcW.png" alt="image_12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JWT stored in the cookie will be appended in every API request headers automatically as below images&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J42vjG_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201843110/EhyEAmcZe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J42vjG_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201843110/EhyEAmcZe.png" alt="image_13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBfiUh8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201851434/fqtg_d22v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBfiUh8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201851434/fqtg_d22v.png" alt="image_14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But remember that this approach only works if the React app and the BackEnd server hosted in &lt;strong&gt;same domain.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now your app is secured from Cross-Site Scripting (XSS) attacks.&lt;/p&gt;

</description>
      <category>react</category>
      <category>security</category>
      <category>cookies</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Have you ever managed a team?</title>
      <author>Madza</author>
      <pubDate>Sat, 16 Jan 2021 12:56:07 +0000</pubDate>
      <link>https://dev.to/madza/have-you-ever-managed-a-team-436n</link>
      <guid>https://dev.to/madza/have-you-ever-managed-a-team-436n</guid>
      <description>&lt;p&gt;Great team management is one of the main cornerstones of any successful business. Without it, it can be difficult to rally your employees to work toward common goals and perform at their best.&lt;/p&gt;

&lt;p&gt;Have you ever been in charge of managing a team?&lt;/p&gt;

&lt;p&gt;If so, what are some notable lessons you have learned from your personal experience? What are some of the most important skills to have?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>business</category>
      <category>management</category>
    </item>
    <item>
      <title>Have you ever re-branded an already launched project?</title>
      <author>Madza</author>
      <pubDate>Sat, 16 Jan 2021 12:42:36 +0000</pubDate>
      <link>https://dev.to/madza/have-you-ever-re-branded-an-already-launched-project-46be</link>
      <guid>https://dev.to/madza/have-you-ever-re-branded-an-already-launched-project-46be</guid>
      <description>&lt;p&gt;Have you ever decided to change the name of the project, change a domain for it, or done other stuff to re-brand an already launched app/project?&lt;/p&gt;

&lt;p&gt;If so, what did you learn from the process and how did it affect your traffic?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>business</category>
    </item>
    <item>
      <title>Why I switched to Pop_OS?</title>
      <author>Krishnakanth Alagiri</author>
      <pubDate>Sat, 16 Jan 2021 11:53:36 +0000</pubDate>
      <link>https://dev.to/bearlike/why-i-switched-to-popos-16b8</link>
      <guid>https://dev.to/bearlike/why-i-switched-to-popos-16b8</guid>
      <description>&lt;p&gt;As of 2020, Windows is still the dominant desktop OS comprising nearly 90% of it's demographic and I was in it for over 14 years. It was initially fast but as time progressed, the Windows updates stacked up along with previously installed softwares. Adding gasoline to the fire, Windows decided to bake advertisements and even more telementary services right into the operating system.&lt;/p&gt;

&lt;p&gt;Then one day, I wanted to print a theatre ticket in a rush and turned on my computer only to see...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-Iw4sS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/AwkKfb9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-Iw4sS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/AwkKfb9.gif" alt="windows-updating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I finally chose to migrate to Linux and after careful experimentations with various distros and DEs, I came across &lt;a href="https://pop.system76.com/"&gt;&lt;em&gt;Pop!_OS&lt;/em&gt;&lt;/a&gt; by &lt;em&gt;System76&lt;/em&gt; and loved it straight out of the box.&lt;/p&gt;

&lt;p&gt;So why do I have so much love for a Ubuntu based distribution? Well, let me explain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-linux-is-free-and-thats-a-great-price" class="anchor"&gt;
  &lt;/a&gt;
  1. Linux is free and that's a great price!
&lt;/h2&gt;

&lt;p&gt;This is true not only for the operating system and the kernel but also for all the software that comes bundled with it. Also in most cases, there will be an open-source alternative for any paid application in Windows like the LibreOffice Suite instead of Microsoft Office.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXys5udS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/PcCGN1T.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXys5udS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/PcCGN1T.gif" alt="free-real-estate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-popos-is-beautiful-and-functional" class="anchor"&gt;
  &lt;/a&gt;
  2. Pop!_OS is beautiful and functional.
&lt;/h2&gt;

&lt;p&gt;Now to the fun part. Pop!_OS is undoubtedly one of the best-looking desktop environments I have ever used. I would suppose it is tied with Elementary OS, Deepin and Budgie DE. While it's Gnome desktop environment, has its fair share of criticisms, it does hold true to its values of getting out of your way to get work done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3XEAskV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/overall.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3XEAskV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/overall.jpg" alt="kk-popos"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;GNOME has no active task management, no desktop icons, no application menu, no dock or taskbar. Activities are an easy concept but coming from Windows, I took a while to get used to switching windows through the activities or the keyboard. &lt;/p&gt;

&lt;p&gt;However, if the default design and working are not up to your fondness, then you can customize and tweak it however you want using the GNOME Tweak Tool. You can even make it to look and behave like macOS or Windows complete with a start menu. &lt;/p&gt;

&lt;p&gt;As far as functionality goes, if you are used to GNOME then you will feel at home in Pop!_OS. You boot straight to your desktop, and the system tray is pretty minimal by default helping you focus on whatever you're onto. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automatic-window-tiling" class="anchor"&gt;
  &lt;/a&gt;
  Automatic Window Tiling
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAyDyGrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/window_tile.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAyDyGrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/window_tile.jpg" alt="Automatic Window Tiling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of Pop!_OS 20.04, it has released an automatic window tiling manager. This enables you to tile and arranges all open windows at the click of a button which is remarkably helpful when multitasking.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#popos-makes-life-easier-for-developers" class="anchor"&gt;
  &lt;/a&gt;
  Pop!_OS makes life easier for Developers.
&lt;/h4&gt;

&lt;p&gt;Pop!_OS can do everything Ubuntu can do. But its dedicated tools, attractive looks, and refined work flow provide a smooth Development. It supports tons of programming languages and useful programming tools natively. Nvidia drivers with CUDA support comes preinstalled which enables developers to speed up compute-intensive applications.&lt;/p&gt;

&lt;p&gt;There are features like the New Keyboard shortcuts, Increased Compatibility, New App launcher and even more that you shoud take a look at. Overall, The Pop!_OS is smooth, functional, and melts right into the background just as it was intended to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-popstore-has-everything" class="anchor"&gt;
  &lt;/a&gt;
  3. Pop!_Store has Everything.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPWaANli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/Popshop.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPWaANli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/Popshop.jpg" alt="Pop Shop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pop!_Shop is a software store for Pop!_OS as to Play Store is for Android. Here, you can search and install any package with just a click of a button. To add more power to the store, Pop 20.04 brings Flatpak support to Pop Shop. This implies that if you want to download any application, you can now also pull packages from the Flathub repository along with Pop!_OS and Ubuntu repo.&lt;/p&gt;

&lt;p&gt;Flatpak/Flathub is a widely recognised universal package management tool and store that contains a number of applications. &lt;strong&gt;&lt;a href="https://thekrishna.in/blogs/blog/linux-packages/"&gt;You can learn more about Flatpaks in my previous post&lt;/a&gt;&lt;/strong&gt;. Hence, you now have access to more packaged applications with high privacy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-nvidia-driver-situation" class="anchor"&gt;
  &lt;/a&gt;
  4. The "Nvidia Driver" Situation.
&lt;/h2&gt;

&lt;p&gt;Nearly all major Linux distributions have come a long way in the past 2 years in making the proprietary Nvidia driver available to their users. Here again, there’s a subtle yet a functional difference in the way Pop!_OS handles Nvidia drivers compared to its alternatives that hybrid graphics laptop users like me would especially appreciate.&lt;/p&gt;

&lt;p&gt;When you download the Nvidia version of the Pop!_OS ISO, the Nvidia graphics driver is active during the OS installation process, not merely “available” to install. That means no risk of perplexing black screens which is more common with the open-source “Nouveau” driver for Nvidia hardware. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk9mhl58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/assets/img/blogs/pop-os/Hybrid.jpg%3Ftr%3Dh-440" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk9mhl58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/assets/img/blogs/pop-os/Hybrid.jpg%3Ftr%3Dh-440" alt="kk-hybrid-graphics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hybrid-graphics" class="anchor"&gt;
  &lt;/a&gt;
  Hybrid Graphics
&lt;/h4&gt;

&lt;p&gt;Pop!_OS supports hybrid graphics straight out of the box. It includes the &lt;code&gt;system76-power&lt;/code&gt; package, which includes the ability to switch between integrated, NVIDIA, and hybrid graphics modes.&lt;br&gt;
This means once you launch your application in Hybrid Graphics mode with a dedicated Graphics card, your laptop runs on the battery-saving Intel GPU and only uses the NVIDIA GPU for applications running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-privacy-control-and-support" class="anchor"&gt;
  &lt;/a&gt;
  5. Privacy, Control and Support
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#privacy-and-security" class="anchor"&gt;
  &lt;/a&gt;
  Privacy and Security
&lt;/h4&gt;

&lt;p&gt;While no operating system is absolutely risk-free, Windows is a big target for viruses and malware due to its majority market share. With Linux as a whole, you only need to be smart, stick to trusted software repositories, and avoid using risky programs such as Adobe Flash or free_ram.sh. Linux is more secure than Windows primarily because of the way it's designed and handles user permissions. This is one reason why most of the web runs on Linux. Since most packages you install would be open-source, their codebase is public and would have been reviewed by more developers for bugs and security vulnerabilities.&lt;/p&gt;

&lt;p&gt;Speaking of security, Pop!_OS is so far the only Linux distribution that enables pre-installed full-disk encryption out of the box. Moreover, you can use the ‘Refresh install’ feature to reset your operating system while preserving the files in your Home folder.&lt;br&gt;
Windows chooses when to install updates, and it displays a message declaring that your computer is going to be rebooted. While with most linux distros, you get to decide when those updates are installed, and in most cases, the updates are installed without rebooting the system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#control" class="anchor"&gt;
  &lt;/a&gt;
  Control
&lt;/h4&gt;

&lt;p&gt;Compared to Windows or macOS, Linux support is easier to find, and there are dozens of forums, subreddits, chat rooms, and even more websites committed to helping people receive and understand Linux. Unlike Microsoft support, which is mostly from an employee, Linux support usually comes from enthusiasts and developers.&lt;/p&gt;

&lt;p&gt;Every single part of your Distribution can be adjusted if you have the time, will and support. KDE Fan? Remove GNOME from Pop!_OS and install KDE Instead. System services slowing your boot? Disable and mask them. In fact, you can even write your own scripts and packages if you have the time and effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-recommendations" class="anchor"&gt;
  &lt;/a&gt;
  Personal Recommendations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-install-refind-boot-manager" class="anchor"&gt;
  &lt;/a&gt;
  1. Install rEFInd Boot Manager
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Visit &lt;a href="https://www.rodsbooks.com/refind/"&gt;rEFInd Documentation&lt;/a&gt; for Installation and theming instructions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W_auGRn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/refind.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W_auGRn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/refind.jpg" alt="kk-refind-boot-manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're Dual Booting Windows and Pop!_OS, I highly recommend you to use rEFInd Boot Manager instead/on-top of the systemd-bootloader. I had to manually adjust both GRUB and systemd-boot configurations every time Windows had a major update, while rEFInd scans for kernels on every boot and is more adaptive and is less reliant on configuration files. Plus rEFInd has more eye candy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-bridging-gaps-between-oses-in-a-system" class="anchor"&gt;
  &lt;/a&gt;
  2. Bridging gaps between OSes in a system
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#21-why-didnt-i-delete-windows-for-good" class="anchor"&gt;
  &lt;/a&gt;
  2.1 Why didn't I delete Windows for good?
&lt;/h4&gt;

&lt;p&gt;Despite Linux growing better every day, there are still a lot of programs, softwares and hardware that are exclusively made for Windows due to majority market share and the open-source alternatives are not essentially good enough. Adobe Photoshop, Microsoft Office and Epic Games Stores are a great example of it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-create-a-common-partition" class="anchor"&gt;
  &lt;/a&gt;
  2.2 Create a common partition
&lt;/h4&gt;

&lt;p&gt;If you're dual-booting Windows and any other Linux Distibution(s), I strongly advice to &lt;strong&gt;turn off Fast Startup&lt;/strong&gt; in Windows as they make all accessible filesystem read-only in Linux until you fully shut down you Windows. Create an extra NTFS partition for all your OSes to coexist and share common files peacefully.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-install-wine-and-create-a-windows-virtual-machine" class="anchor"&gt;
  &lt;/a&gt;
  2.3 Install WINE and create a Windows Virtual Machine
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_MLkobs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/win10-vm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_MLkobs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/win10-vm.jpg" alt="kk-vm-win10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not every Windows Program has it's equal Open-Source Linux Alternative so if you're lucky (or savvy) enough, your program might run using Wine on Linux. &lt;a href="https://appdb.winehq.org/"&gt;You can check your application's compatibility on Wine here&lt;/a&gt;. Platforms like &lt;a href="https://lutris.net/"&gt;Lutris&lt;/a&gt; can even install and launch games so you can start playing without the hassle of setting up your games with Wine Linux powered machine. If you can't find your program on the database, give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oY1c6XBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-580/assets/img/blogs/pop-os/lutris.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oY1c6XBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-580/assets/img/blogs/pop-os/lutris.jpg" alt="lutris"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Popular programs like Microsoft Office still doesn't have great compatibility with Wine. So if Wine doesn't work for your program, create a small Windows Virtual Machine and run on it. I created mine using &lt;strong&gt;&lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/"&gt;Windows 10 Development Virtual Machines provided by Microsoft&lt;/a&gt;&lt;/strong&gt;. However, power-demanding programs like Adobe Photoshop still don't well on Virtual Machines and here's is where you have no other option than to boot into your Windows Host.&lt;/p&gt;

</description>
      <category>popos</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Decoding Developer Relations in a Blog</title>
      <author>Manbir Singh Marwah</author>
      <pubDate>Sat, 16 Jan 2021 11:21:05 +0000</pubDate>
      <link>https://dev.to/manbir/decoding-developer-relations-in-a-blog-5823</link>
      <guid>https://dev.to/manbir/decoding-developer-relations-in-a-blog-5823</guid>
      <description>&lt;p&gt;If you're working in the software industry as an engineer or a CxO, or a student majoring in a technical program, or even if you're actively indulged on the social space, chances are that you've come across the DevRel hype by now (and it's totally cool if you haven't, yet). But what exactly is it, and why is it there anyway? This very piece of text aims to introduce you to the &lt;em&gt;'what', 'why' and 'how'&lt;/em&gt; of DevRel along with a few extra bits. So, as &lt;em&gt;Ed Sheeran&lt;/em&gt; says, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"...just dive right in, and follow my lead!"&lt;/em&gt; 🎶&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlUfYeai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRJbNnx-fUvIHLytmI-RW5GkCL7sma6ymPNrA%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlUfYeai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRJbNnx-fUvIHLytmI-RW5GkCL7sma6ymPNrA%26usqp%3DCAU" width="80%"&gt;&lt;/a&gt;&lt;/p&gt;
DevRelCon London 2018






&lt;h2&gt;
  &lt;a href="#the-what" class="anchor"&gt;
  &lt;/a&gt;
  The 'What'
&lt;/h2&gt;

&lt;p&gt;Developer Relations or DevRel is a domain that revolves mostly around software and incorporates people who work as a bridge (and sometimes a router, switch, or gateway 👀 &lt;em&gt;&lt;a href="https://www.geeksforgeeks.org/network-devices-hub-repeater-bridge-switch-router-gateways/"&gt;ref:networking&lt;/a&gt;&lt;/em&gt;) between &lt;strong&gt;products&lt;/strong&gt; (such as APIs, developer platforms or open-source projects) and &lt;strong&gt;developers&lt;/strong&gt;, the backbone of software industry. There are dedicated Developer Relations teams at startups and corporations as they consist of engineers themselves who understand the software ecosystem and developer psychology as a whole so as to serve like a support system. In simpler terms, they make the flow of tech easy while ensuring a mutual growth of people and the business through an intersection, that is 'community'. Sounds cool? Let's intensify.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-why" class="anchor"&gt;
  &lt;/a&gt;
  The 'Why'
&lt;/h2&gt;

&lt;p&gt;Developer Relations rely on three core pillars: &lt;strong&gt;Code&lt;/strong&gt;, &lt;strong&gt;Content&lt;/strong&gt; and &lt;strong&gt;Community&lt;/strong&gt;—popularly known as &lt;em&gt;The 3C Architecture&lt;/em&gt;. So DevRel folks perform a bit of tech, research, marketing, community management and entrepreneurship (some even being CxOs themselves), providing a sense of &lt;em&gt;belongingness&lt;/em&gt; to people around a product. This is done to achieve (but not limited to) the following goals:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Empower people to build products and nurture innovation&lt;/li&gt;
&lt;li&gt;Educate not just developers, but anyone and everyone to learn and stay updated with a technology &lt;/li&gt;
&lt;li&gt;Build trust, which in turn helps in building long-term relationships&lt;/li&gt;
&lt;li&gt;Create a communication loop to drive feedback from users (developers/engineers) to the internal teams behind a product&lt;/li&gt;
&lt;li&gt;Work directly/indirectly with the PMs and stakeholders to define and iterate on KPIs for the product's success&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-how" class="anchor"&gt;
  &lt;/a&gt;
  The 'How'
&lt;/h2&gt;

&lt;p&gt;Now that we know what exactly DevRel is and why it's there, let's take a look at everything these superheroes do. Even though it's tough to sum-up everything in a list, the day-to-day work of a DevRel may include:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating content, such as code samples, blogs, articles, video tutorials, documentation, podcasts, etc depending on various use cases&lt;/li&gt;
&lt;li&gt;Presenting wherever developers are; be it virtual or in-person conferences, workshops, meetups or tech-conclaves. They literally fly across the globe, just for people! :')&lt;/li&gt;
&lt;li&gt;Mentoring and judging at hackathons and ideathons&lt;/li&gt;
&lt;li&gt;Staying updated with major technological changes in the industry &lt;/li&gt;
&lt;li&gt;Engaging with people, managing resources and logistics, being a social influencer and thought leader &lt;/li&gt;
&lt;li&gt;Amplifying the voices of developers; this includes any work such as projects, blogs, call for contributions, event CFPs, etc.
&lt;/li&gt;
&lt;li&gt;Coming up with &lt;em&gt;'jugaad'&lt;/em&gt; (an Indian word translating to 'a non resource-intensive hack') for modern (read: unconventional 👀) software development. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVLHdUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/kwEmwFUWO5Ety/giphy.gif%3Fcid%3D82a1493bffdx78lef76gmyoev0zry2viy6tbp6pbz2ffysge%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVLHdUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/kwEmwFUWO5Ety/giphy.gif%3Fcid%3D82a1493bffdx78lef76gmyoev0zry2viy6tbp6pbz2ffysge%26rid%3Dgiphy.gif" width="70%/"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#roles-associated-to-developer-relations" class="anchor"&gt;
  &lt;/a&gt;
  Roles associated to Developer Relations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer Advocates&lt;/strong&gt; are those who have some sort of technical background, whether a CS/IT degree, experience in coding either professionally or through working on projects and contributing to the developer communities through content and events. They understand how a product could fit in various use-cases and hold the magic to make people fall in love with the product. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tech Community Managers&lt;/strong&gt; are the folks who may or may not have a coding experience, but are passionate about the tech space and helping people as a whole. They are pro-communicators and have a great understanding on how to influence people for good while ensuring active engagements from the community members and handling the logistics involved. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer Evangelists&lt;/strong&gt; are the true ambassadors or Chief Tech Facilitators (CTF - did I just coin a new term there? 👀) aka people with a mic, having a deeper understanding about a product and the wizards who make complex things feel easy. They preach exactly about all the value and goodness that a product provides. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Product / Program Managers&lt;/strong&gt; are the leaders who understand the tech + business perspective of a product inside out. By working directly with the engineering teams, they define the success metrics while understanding the dynamics of shaping a product, and empower people to turn ideas into reality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Growth Hackers and Marketers&lt;/strong&gt; are those creative heads who drive the graphs of product adoption and build a living, breathing, loyal user base. This is done through marketing and outreach strategies (that often build a 'hype' in the industry) via social channels, emails, blogs and newsletters. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Fun fact: Long time back, someone in the DevRel space had a hard time pronouncing 'Developer Advocate' and ended up pronouncing it as 'Developer Avocado' instead, resulting in the popular reference of avocado (hence the emoji) with advocates and eventually, DevRel professionals.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpstMJHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/TZ2oBnEvY9iMgJWuRS/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpstMJHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/TZ2oBnEvY9iMgJWuRS/giphy.webp" width="50%/"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-business-model" class="anchor"&gt;
  &lt;/a&gt;
  The Business Model
&lt;/h2&gt;

&lt;p&gt;Different companies have different ways of approaching the developer community. Consider it as a coin with these two sides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Developers-first&lt;/em&gt;: These are the organizations that work on a B2D model (Business to Developer), and the product itself is purely oriented towards developers. For example, Twilio, GitHub, Atlassian, Stripe and Postman.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Developers-plus&lt;/em&gt;: These are the companies or products whose primary focus is not developers, and thus follow a B2B (Business to Business) or B2C (Business to Consumer) model. For example, Spotify, Slack, Twitter and PayPal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the Dev-first sector continues to grow rapidly, most of the organizations doing DevRel at this point follow a Dev-plus model. In some companies, the DevRel team(s) report to the engineering department, while in some, they report to product or marketing. In a very few, they even report directly to the sales. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-whats-in-there-for-the-devrel-folks" class="anchor"&gt;
  &lt;/a&gt;
  But what's in there for the DevRel folks?
&lt;/h2&gt;

&lt;p&gt;Now you might be wondering, what makes this profession so unique? Why does everyone wants to get into this? Why do DevRel professionals feel so good doing all this and for what?  &lt;/p&gt;

&lt;p&gt;The answer is: &lt;strong&gt;impact&lt;/strong&gt;.✨&lt;/p&gt;

&lt;p&gt;We put people before technology, and we love to help them grow in any and every capacity we can. We love to solve their common (and sometimes not-so-common) issues, and when they appreciate our work in their own way, it just makes our day. It makes us smile our heart out when we see corporations and startups using our products to build and scale their own, young students coming up with interesting ideas and solutions at hackathons, and when they say our work inspires them to do more—that impact is exactly what we live for. &lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To sum it all, DevRel as a domain is so broad that it's a mess. A beautiful mess with an immense learning, leadership and growth opportunity. People expect us to be 'know-it-all' folks, but we're not. No one really is. We too are learning along the way. Being in DevRel is tough and you'll constantly have to thrive and juggle between a diverse set of tasks along with staying updated as things move quick, but that's exactly what makes it all the way more exciting.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If all this sounds intriguing, I hope to see you in this space sometime in the future. Cheers! &lt;/p&gt;




&lt;p&gt;✍️ &lt;em&gt;with&lt;/em&gt; ❤️ &lt;em&gt;by &lt;a href="https://twitter.com/manbirmarwah"&gt;Manbir&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>community</category>
      <category>technology</category>
      <category>entrepreneurship</category>
    </item>
    <item>
      <title>Introduction to Test Driven Development (TDD) and AAA Testing using xUnit</title>
      <author>Sam Walpole</author>
      <pubDate>Sat, 16 Jan 2021 10:42:07 +0000</pubDate>
      <link>https://dev.to/dr_sam_walpole/introduction-to-test-driven-development-tdd-and-aaa-testing-using-xunit-34o5</link>
      <guid>https://dev.to/dr_sam_walpole/introduction-to-test-driven-development-tdd-and-aaa-testing-using-xunit-34o5</guid>
      <description>&lt;p&gt;I'm not ashamed to admit that for a long time I avoided writing tests for my code. I saw it as something that took up precious time that I could have spent on "real" coding. However, after experiencing first-hand the headache caused from having to maintain production code with little-to-no tests, I've been convinced that writing tests really are worth your time. Too many times have I been bitten by hidden bugs, that could have easily been identified if the appropriate tests were in place.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-driven-development" class="anchor"&gt;
  &lt;/a&gt;
  Test Driven Development
&lt;/h1&gt;

&lt;p&gt;Test Driven Development (TDD) is a software development cycle that focusses on describing the behaviour of your code first using tests, then implementing those behaviours. The advantage of this is that, once you have defined exactly how you expect you code to behave (including handling errors and edge cases), you can be confident that your implementation will actually handle all these behaviours properly, and it's less likely that bugs will creep in.&lt;/p&gt;

&lt;p&gt;A typical TDD cycle is illustrated below. First you start by writing tests that test all of the behaviours that you wish to implement. At this point (since there is no implementation), all of the tests should fail. The next step is to write code that allows all of the tests to pass. At this stage don't worry about code quality, just get it to pass. Once all of the tests are passing, then you can go back and refactor the code to improve it's quality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPFEwQL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610789003581/73yYUodOC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPFEwQL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610789003581/73yYUodOC.png" alt="Test Driven Development Cycle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aaa-testing" class="anchor"&gt;
  &lt;/a&gt;
  AAA Testing
&lt;/h1&gt;

&lt;p&gt;AAA testing is a method for writing tests. It stands for Arrange, Act, Assert, and describes the basic method for setting up a test. &lt;/p&gt;

&lt;p&gt;First, in the Arrange stage, you create all of the objects and variables that you require for your test. In the Act stage, you perform the behaviour that you wish to test. For example, this could be calling a particular method on your test object. Finally, in the Assert stage, you test that the final result (for example, object property values) are what you would expect if the behaviour had executed correctly.&lt;/p&gt;

&lt;p&gt;A typical AAA test may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Add_ArgValueOne_AddsOneToValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// arrange&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// act &lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// assert&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this fictitious example, we have a Counter object that we Arrange to have a starting value of 0. We the Act by calling the Add method with an argument value of 1. Finally, we Assert that the final Value property is set to 1.&lt;/p&gt;

&lt;p&gt;I also find this naming convention of naming test methods very useful for maintaining test code. As shown above, it consists of &lt;code&gt;{Name of Method}_{Test Conditions}_{ExpectedResult}&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing-using-xunit" class="anchor"&gt;
  &lt;/a&gt;
  Testing using xUnit
&lt;/h1&gt;

&lt;p&gt;xUnit is a popular testing framework for .NET applications. For these examples, I will be show snippets from code that I will be submitting to the upcoming &lt;a href="https://townhall.hashnode.com/announcing-hashnode-hackathon-powered-by-vercel"&gt;Hashnode Hackathon&lt;/a&gt;. The GitHub repository is available &lt;a href="https://github.com/walpoles93/WeKan"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/xUnit-Test-Patterns-Refactoring-Addison-Wesley-ebook/dp/B004X1D36K/ref=as_li_ss_il?dchild=1&amp;amp;keywords=xunit&amp;amp;qid=1610793290&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=6edfed6ed10942806845a19b04cc3b2b&amp;amp;language=en_GB"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B004X1D36K&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5tVLKPbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB004X1D36K" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tVLKPbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB004X1D36K" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll start by talking a little bit about naming conventions. I like to have my test project mimic the structure of my source code projects, in terms of folder structure/namespaces etc. I implement a single test class per actual class. For example, my source code project is called &lt;code&gt;WeKan.Domain&lt;/code&gt; and I have an &lt;code&gt;Activity&lt;/code&gt; class in the &lt;code&gt;WeKan.Domain.Activities&lt;/code&gt; namespace. Therefore, the equivalent test class is called &lt;code&gt;ActivityTests&lt;/code&gt; and is in a project called &lt;code&gt;WeKan.Domain.UnitTests&lt;/code&gt; and a namespace of &lt;code&gt;WeKan.Domain.UnitTests.Activities&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first step of TDD is to write the tests for your desired behaviour. However, that doesn't work if the classs you're testing doesn't exist or doesn't have the properties/methods that you wish to test. This seems like a bit of a paradox - you shouldn't write code before the tests, but you can't write tests without the code. What I have found to work well, is to create the class and define all of the properties and methods you require, but don't implement them. Instead, just have the methods throw a NotImplementedException so that the tests will fail. For example, this is what my Activity class looked like before I implemented any of it's behaviours.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Activity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;CardId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// populated by EF Core&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TransferTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Card&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ChangeTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ChangeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An obvious test to start with is, if I try to instantiate the class with valid data, does it get instantiated with the expected values? Here is an example from ActivityTests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Create_TitleLengthGreaterThanZero_ReturnsActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"test-title"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With such a simple example, the Arrange and Act stages kind of get blended into one. You may notice that the method is annotated with the attribute &lt;code&gt;[Fact]&lt;/code&gt;. This marks the method as a basic xUnit test (I will introduced another type later).&lt;/p&gt;

&lt;p&gt;In xUnit, you make assertions using the Assert class, which has a multitude of different methods which should be sufficient to test almost any scenario. &lt;/p&gt;

&lt;p&gt;In this example, I start by asserting that the activity that is created has the Activity type. Note that the IsType method checks that the instance has exactly that type. If you want to check if it belongs to a base class or interface, use the IsAssignableFrom method. Assert.NotNull check that the instance is not null. Finally, Assert.Equal tests the equality between an expected and actual value. I find that I end up using this method most often.&lt;/p&gt;

&lt;p&gt;In my Activity class, I want it to throw an exception if the title argument is null or empty. Therefore, I'll create another test for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Theory&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;InlineData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;InlineData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Create_TitleNullOrEmpty_ThrowsArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Activity&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Throws&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ArgumentException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A Theory is the second type of xUnit test. Theories allow you to pass arguments to the test method, in order to test using multiple different values. Here, the test will be ran twice, once with the title as null and then with the title as an empty string.&lt;/p&gt;

&lt;p&gt;Testing for exceptions is also a bit different to other examples. You can't just run the code, since the test will fail if an exception is thrown. Therefore, you should define an inline function to perform the behaviour that you wish to test, and pass that function as an argument to the Assert.Throws method. This method tests that, first an exception is thrown, but also that the exception is of the given type (in this case ArgumentException).&lt;/p&gt;

&lt;p&gt;Another interesting example is testing collections. Here, I have a Card class, which contains a collection of Activity objects. I want to test that, when the Card is created the collection is empty, and when I call the AddActivity method, the collection contains one Activity. For this, we can use the Assert.Empty and Assert.Single methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Create_ActivitiesCollectionIsEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"test-title"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Activities&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Activities&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;AddActivity_ActivityInstance_AddsActivityToCollection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"activity-title"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"test-title"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Activities&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Activities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you may have noticed that the Activity method contains an internal method, ChangeOrder. If it's internal, how to we access it from our test project for testing? Fortunately, we can add an attribute to namespaces that allows internal properties/methods to be accessible to a different specified project. For example, in my &lt;code&gt;DependencyInjection.cs&lt;/code&gt; (chosen simply because it sits at the root of the project namespace) I added the following attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;InternalsVisibleTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WeKan.Domain.UnitTests"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WeKan.Domain&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This states that any internal method/property/class within the &lt;code&gt;WeKan.Domain&lt;/code&gt; namespace is also accessible from the &lt;code&gt;WeKan.Domain.UnitTests&lt;/code&gt; namespace, meaning we can now test the internal methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/xUnit-Test-Patterns-Refactoring-Addison-Wesley-ebook/dp/B004X1D36K/ref=as_li_ss_il?dchild=1&amp;amp;keywords=xunit&amp;amp;qid=1610793290&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=6edfed6ed10942806845a19b04cc3b2b&amp;amp;language=en_GB"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B004X1D36K&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5tVLKPbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB004X1D36K" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tVLKPbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB004X1D36K" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Here I have introduced the concepts of Test Driven Development (TDD) and AAA (Arrange, Act, Assert) testing. I have then applied these principles to demonstrate the xUnit testing framework, a popular framework for .NET applications. I have covered some of the most common uses for the xUnit framework, as well as some common pitfalls (testing internal values). The GitHub repo containing these tests can be found &lt;a href="https://github.com/walpoles93/WeKan"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/633205875"&gt;"Ten++ Ways to Make Money as a Developer" eBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I post mostly about full stack .NET and Vue web development. To make sure that you don't miss out on any posts, please follow this blog and &lt;a href="https://samwalpole.com/"&gt;subscribe to my newsletter&lt;/a&gt;. If you found this post helpful, please like it and share it. You can also &lt;a href="https://twitter.com/dr_sam_walpole"&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tdd</category>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Building a secure/sandboxed environment for executing untrusted code</title>
      <author>Narasimha Prasanna HN</author>
      <pubDate>Sat, 16 Jan 2021 08:58:04 +0000</pubDate>
      <link>https://dev.to/narasimha1997/building-a-secure-sandboxed-environment-for-executing-untrusted-code-7e8</link>
      <guid>https://dev.to/narasimha1997/building-a-secure-sandboxed-environment-for-executing-untrusted-code-7e8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-a-sandbox" class="anchor"&gt;
  &lt;/a&gt;
  What is a Sandbox?
&lt;/h3&gt;

&lt;p&gt;Let's try to understand the meaning of the term &lt;em&gt;sandbox&lt;/em&gt; first, before learning how to build one. &lt;em&gt;Sandbox&lt;/em&gt; is a like a container that isolates the environment in which the software is run. In other words, a sandbox provides a secure environment which restricts the software inside the sandbox from accessing the resources of the host, the resources can be a file-system, network, some set of kernel system-calls etc. The application of sandbox is obvious, you can execute the code which you don't trust without worrying about security much. Here are some examples that will help you understanding sandbox better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sandboxing is built into modern browsers, this restricts malicious websites from stealing your sensitive data or damaging the client machine, because the code runs inside a sandbox and the sandbox restricts the code from calling any host-level functions.&lt;/li&gt;
&lt;li&gt;Most of the online coding tutorials that allow remote code execution are powered by sandboxing tools, these tools provide a separate isolated environment for you, thus restricting you from accessing the server resources or files belonging to other users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this tutorial, we will be building a simple sandbox solution. Note that this is not the perfect one (Many companies have worked years together on security), but still it manages to give you an idea of building your own sandbox. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-be-the-consequences-if-you-dont-use-a-sandbox" class="anchor"&gt;
  &lt;/a&gt;
  What will be the consequences if you don't use a sandbox?
&lt;/h3&gt;

&lt;p&gt;Imagine a scenario where your browser did not provide any security/isolation, in such case anyone good at JavaScript/C++ can somehow manage to access your file-system from the browser itself without even notifying you, this will allow attackers to steal your private content and use them for blackmailing you. Imagine an online code-editing tool without a sandbox, you as the user can write a code that deletes the files on their server, rendering the server useless, you can also use server's resources to mine bitcoins or attack others, you can also delete the files of other users using the tool. These are very critical consequences and any developer who thinks about building a browser, code-editing tool or any software that allows remote-code-execution should consider building a sandbox and securing his/her system from attackers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-sandbox-must-provide" class="anchor"&gt;
  &lt;/a&gt;
  What sandbox must provide:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The sandbox should hide the host file-system from the untrusted code which runs inside the sandbox.&lt;/li&gt;
&lt;li&gt;It should block the code inside the sandbox from making system-calls directly on the host-kernel which can be dangerous.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites-of-this-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites of this tutorial:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Basic knowledge of containers and docker.&lt;/li&gt;
&lt;li&gt;Basic knowledge of creating and deploying software as containers.&lt;/li&gt;
&lt;li&gt;Basic knowledge of Linux and System-Calls.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#solution1-using-containers-with-docker" class="anchor"&gt;
  &lt;/a&gt;
  Solution-1 : Using Containers with Docker
&lt;/h3&gt;

&lt;p&gt;If you are into software development you must be aware of containers. Containers provide an isolated environment where the software can run with all its dependencies. Containers provide their own file-system, so the app that runs inside the container cannot access the host's original file-system. So let's build a simple program to demonstrate this. I will be using C, you can use any language of your choice. &lt;/p&gt;

&lt;p&gt;This program just lists all the files from the root &lt;code&gt;/&lt;/code&gt; and exits. (&lt;code&gt;list_files.c&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls /"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a simple program and should work without any issues if you are any linux machine. Let's compile this, we will compile this a static binary so that we don't need &lt;code&gt;libc&lt;/code&gt; support in our container. But wait, we will first run on the host directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gcc list_files.c -static -static-libgcc -static-libstdc++ -o list_files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If compilation is successful, this should produce a binary by name &lt;code&gt;list_files&lt;/code&gt;, we will make sure this is static executable and does not depend on &lt;code&gt;libc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ldd list_files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will output something similar if it is a static binary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not a dynamic executable
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's run this, note that we are running directly on the host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./list_files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will output all the files under root &lt;code&gt;/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin    dev   initrd.img      lib64   mnt   root  snap      sys  var
boot   etc   initrd.img.old  lost+found  opt   run   srv       tmp  vmlinuz
cdrom  home  lib         media   proc  sbin  swapfile  usr  vmlinuz.old
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we ran the code directly on the host machine, we are able to see the contents of the root file-system. The code has exclusive access to our file-system and other resources. So it is not recommended to run untrusted code directly. Now let's containerize it and see how we can provide basic restrictions. We will use &lt;code&gt;busybox&lt;/code&gt; a minimal container image. We don't have to install anything specific, remember why we built static executable. This is how our &lt;code&gt;Dockerfile&lt;/code&gt; looks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM busybox

COPY ./list_files /list_files
WORKDIR /
ENTRYPOINT ["/list_files"]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, that's it, we will copy the &lt;code&gt;list_files&lt;/code&gt; binary and run it on the start of container. Let's build and run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build . -t sandbox_test
docker run --rm -ti sandbox_test
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, it should produce the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin         etc         list_files  root        tmp         var
dev         home        proc        sys         usr
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that the &lt;code&gt;/&lt;/code&gt; has changed. It is the file-system of &lt;code&gt;busybox&lt;/code&gt; our application is seeing, not our host file-system. Containers also provide process-isolation, network isolation etc so our application is somehow isolated. Hurray! We built a simple sandbox (This is not the final solution, read till the end)&lt;/p&gt;

&lt;p&gt;Let's refine our work further, till now we manually packaged every application we built as a container image, which is lot of work. So, let's build a generic sandbox container that can run any binary inside the container environment without packing them explicitly. To build this, we follow the steps as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create a small C program that starts inside the container.&lt;/li&gt;
&lt;li&gt;The program reads from &lt;code&gt;stdin&lt;/code&gt; and writes the contents of &lt;code&gt;stdin&lt;/code&gt; to a file inside the container.&lt;/li&gt;
&lt;li&gt;It then executes the file it created.&lt;/li&gt;
&lt;li&gt;Returns the output back to the host as a string.(writes to &lt;code&gt;stdout&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's build this! I am using C, you can use GO, Rust or any language that runs on native metal (rather than interpreted like Java/Python etc). Create a file called &lt;code&gt;sandbox.c&lt;/code&gt; and let's write a function called &lt;code&gt;write_stdin_to_file&lt;/code&gt; which reads from &lt;code&gt;stdin&lt;/code&gt; and writes to a file called &lt;code&gt;binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Includes and some definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define BUFFER_SIZE 4096
#define OUTPUT_BUFFER 1024
&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;write_stdin_to_file&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;write_stdin_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./binary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDWR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0777&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to open the file for writing&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to read binary data, exiting"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//EOF&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//write data to the file&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;read_bytes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;read_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="c1"&gt;//wrote the file, close it.&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now the main function, &lt;code&gt;main&lt;/code&gt; calls &lt;code&gt;write_stdin_to_file&lt;/code&gt; and then executes it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;write_stdin_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Empty binary file, discarding&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;process_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./binary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process_fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to execute the binary&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Executing binary inside the sandbox&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//read the data as buffers and stream it to stdout&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;OUTPUT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;process_fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//EOF&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process_fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//Error &lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to read the output"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fread_bytes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's compile this as static executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gcc src/sandbox.c -static -static-libgcc -static-libstdc++ -o sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, lets containerize it using docker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM busybox

COPY ./sandbox /sandbox
WORKDIR /
ENTRYPOINT ["/sandbox"]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's build it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build . -t sandbox:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After the build is complete, we can run it. But before running, keep this in mind, the entrypoint is &lt;code&gt;sandbox&lt;/code&gt; binary, this binary listens of &lt;code&gt;stdin&lt;/code&gt;, so we need to pass the binary we need to execute as &lt;code&gt;stdin&lt;/code&gt; so that the &lt;code&gt;sandbox&lt;/code&gt; binary can execute it inside the container environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat list_files | docker run --rm -i sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a simple command, we are using &lt;code&gt;cat&lt;/code&gt; to read the binary from host system, after reading, it pipes the output to &lt;code&gt;sandbox&lt;/code&gt; program which runs inside the docker. The &lt;code&gt;sandbox&lt;/code&gt; executes it inside the container environment and then emits the output as &lt;code&gt;stdout&lt;/code&gt;, since &lt;code&gt;stdout&lt;/code&gt; is the terminal, the output will be printed on the screen, we can see that below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Executing binary inside the sandbox
bin
binary
dev
etc
home
proc
root
sandbox
sys
tmp
usr
var
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We have created a container image called &lt;code&gt;sandbox&lt;/code&gt; which we can use it to run any binary inside the container environment. But is this the end?? Of course, not!! This approach is still unprotected. Let's see why and how we can address this issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problems-with-using-containers-alone-as-sandbox" class="anchor"&gt;
  &lt;/a&gt;
  Problems with using containers alone as sandbox
&lt;/h3&gt;

&lt;p&gt;We somehow managed to provide network and file-system isolation, but still we are not safe. That's because of the nature of containers. Containers do not provide kernel-level isolation, in other words, eventhough the containers are isolated, they still use host-kernel for their functionality, i.e any system call made by the application inside the container will execute some host-kernel function which is not secure, that means, any clever programmer can write an application that combines multiple system-calls and escape the container isolation to get into the host environment, then he can do anything. But we can solve this as well. Using &lt;em&gt;Userspace kernels&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#userspace-kernel-with-gvisor" class="anchor"&gt;
  &lt;/a&gt;
  Userspace Kernel with gVisor:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/google/gvisor"&gt;gVisor&lt;/a&gt; by Google is a userspace application kernel written in Go. Userspace kernel is a software that runs completely in user-mode and has less privilege (since it runs in user-mode). It also acts as a kernel emulation layer, that means, it can act as a fake kernel and can receive and process system-calls, thus hiding the host kernel. gVisor is compatible with OCI and provides a OCI runtime called &lt;a href="https://github.com/google/gvisor/tree/master/runsc"&gt;runsc&lt;/a&gt; that can be used by container management tool like docker as the underlying runtime. (docker uses &lt;a href="https://github.com/opencontainers/runc"&gt;runc&lt;/a&gt; as the default runtime). &lt;/p&gt;

&lt;p&gt;You can install &lt;code&gt;gVisor&lt;/code&gt; by following the guide &lt;a href="https://gvisor.dev/docs/user_guide/install/"&gt;here&lt;/a&gt;. Once installed, make sure you have registered &lt;code&gt;runsc&lt;/code&gt; as one of the possible runtimes for docker. Check the file &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;, it should contain an entry like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"runtimes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"runsc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/runsc"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can then restart the docker daemon to ensure the changes are applied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We can now run our binaries inside a sandbox with complete isolation. Here is how we can include &lt;code&gt;gVisor&lt;/code&gt; in our execution command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat list_files | docker run --runtime=runsc --rm -i sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see &lt;code&gt;--runtime=runsc&lt;/code&gt; added, which means we are telling the docker to use &lt;code&gt;gVisor&lt;/code&gt; (&lt;code&gt;runsc&lt;/code&gt;) instead of &lt;code&gt;runc&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-wrote-this" class="anchor"&gt;
  &lt;/a&gt;
  Why I wrote this?
&lt;/h3&gt;

&lt;p&gt;Recently I was building a clone of &lt;a href="https://play.golang.org/"&gt;Go playground&lt;/a&gt; as a weekend project, a tool for running go programs online. Folks who developed Go playground were aware of security and they used &lt;code&gt;NaCL&lt;/code&gt; sandbox initially. You can read the blog on this &lt;a href="https://blog.golang.org/playground"&gt;here&lt;/a&gt;. After the deprecation of &lt;code&gt;NaCL&lt;/code&gt;, the developers shifted to this approach to provide security. While I was scratching my head over security for my hobby project, I got a chance to read original playground's source code and found a solution very similar to this. I thought of adding this to my project and also write a blog on this. To learn more, you can follow these repositories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/google/gvisor"&gt;Original Playground&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Narasimha1997/gopg"&gt;My clone of Playground&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also consider using MircoVM projects as an alternative to &lt;code&gt;gVisor&lt;/code&gt;, like :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;AWS Firecracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kata-containers/runtime"&gt;Kata Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do, please let me know in the comments.&lt;br&gt;
Thanks for spending your precious time in reading this post. Do let me know your opinions and better options in comments.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>security</category>
      <category>cloudskills</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
