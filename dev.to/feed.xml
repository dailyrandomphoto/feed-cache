<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Git it Rightüî•üî•üöÄ(Git CheatSheet)</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 27 Jul 2021 20:00:21 +0000</pubDate>
      <link>https://dev.to/star_trooper/git-it-right-git-cheatsheet-4o0h</link>
      <guid>https://dev.to/star_trooper/git-it-right-git-cheatsheet-4o0h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QZv-2J8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umjxoxtmay96xghzddgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QZv-2J8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umjxoxtmay96xghzddgv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Git commands cheatsheetüìÅ&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-essentials-when-working-with-git-on-your-own-or-with-others"&gt;
  &lt;/a&gt;
  The Essentials ‚Äî When working with git on your own or with others
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git status&lt;/code&gt; - To remind you of where you left off. See a summary of local changes, remote commits, and untracked files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git diff&lt;/code&gt; - To see the specific local changes to tracked files. Use --name-only to see changed filenames.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add&lt;/code&gt; - To stage changes to your tracked and untracked files. Use -u, -a, and . strategically.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit&lt;/code&gt; - To create a new commit with changes previously added. Use -m and add a meaningful commit message.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git push&lt;/code&gt; - To send changes to your configured remoterepository, most commonly GitLab or GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-flow-daily-usage-of-git-including-flags"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basic Flow ‚Äî Daily usage of git, including flags&lt;/strong&gt;
&lt;/h2&gt;

&lt;h6&gt;1. cd to your local project that you want to start versioning with git. You only have to run git init the first time to set up the directory for version tracking.&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init 
git status 
git add --all 
git status 
git commit -m "meaningful initial commit message"
git show 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;2. And you begin to hack on your local files, then commit at regular intervals.&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff 
git commit -a -m "Another commit message. -a performs the add step for you"
git status 
git log --graph --pretty=oneline --abbrev-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;3. After a while, you have 3 commits that would be more meaningful as a single commit&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit
git reset --soft HEAD~3 
git diff --cached 
git commit -a -m "Better commit 
message for last 3 commits" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;4. Lastly, you delete some unneeded files in the current directory&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status 
git diff --cached 
git add -u 
git commit -m "Another commit message. -u adds updates, including deleted files"
git status 
git log --graph --pretty=oneline --abbrev-commit
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#basic-branching-branches-represent-a-series-of-commits"&gt;
  &lt;/a&gt;
  Basic Branching ‚Äî Branches represent a series of commits.
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git branch --all&lt;/code&gt; - list all local and remote branches&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt; - change to an existing branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b &amp;lt;branch&amp;gt; master&lt;/code&gt; - make a branch based off of masterand check it out&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout master &amp;amp;&amp;amp; git merge &amp;lt;branch&amp;gt;&lt;/code&gt; - merge branch changes onto master&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#important-flags-these-are-my-personal-favorites-for-keeping-everything-organized"&gt;
  &lt;/a&gt;
  Important Flags ‚Äî These are my personal favorites for keeping everything organized.
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git reset HEAD --&lt;/code&gt; - get back to the last known commit and unstage others&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add -u&lt;/code&gt; - add only the updated, previously committed files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt; - for a pretty branch history. Create a shell or git alias for easy access,such as git lg&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#working-with-a-remote-repository-once-you-get-into-the-flow-youll-frequently-contribute-back-to-larger-projects-and-possibly-managing-forks-of-forks-here-are-some-tips-for-doing-so"&gt;
  &lt;/a&gt;
  Working with a Remote Repository ‚Äî Once you get into the flow, you‚Äôll frequently contribute back to larger projects, and possibly managing forks of forks. Here are some tips for doing so.
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git fetch --all&lt;/code&gt; - downloads all commits, files, and references to branches on all remote repositories so you can then git checkout or pull what you want to work on.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull --rebase &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt; - Merge all commits since your last common commit from the remote branch without creating a merge commit.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git stash&lt;/code&gt; - Use this as needed to save uncommitted changes so you can git stash pop them onto a different branch.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git stash pop&lt;/code&gt; - bring it back&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add [-A or . or -- &amp;lt;filename&amp;gt;]&lt;/code&gt; - Be intentional about what files you add to your commits, especially if you want to open a request to merge them into an upstream project.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit -m "commit message"&lt;/code&gt; - Most projects have a format they prefer for commit messages. Look at CONTRIBUTING.md files in the project or review previous commits to get an idea of their format.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git push origin &amp;lt;branch&amp;gt;&lt;/code&gt; - Push your current branch to your remote titled ‚Äúorigin‚Äù and branch named &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b &amp;lt;new_branch&amp;gt;&lt;/code&gt; - A shortcut for git branch  &amp;amp;&amp;amp; git checkout branch. It‚Äôs great for when you want to experiment with an idea and have a new branch to try it out on that can later be merged or deleted.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout master &amp;amp;&amp;amp; git pull --rebase&lt;/code&gt; - Great to get to the most recent commit for a project you only infrequently follow.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git reset --hard origin/master&lt;/code&gt; - For when you inevitably get lost in all the 
git-fu and need to get to a known state. 
WARNING: this erases all changes, even 
commits, since the last commit pushed to 
the remote origin on branch master.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git push origin master&lt;/code&gt; - For when you inevitably do something right! Send your changes up to your remote titled origin on branch master.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#getting-help"&gt;
  &lt;/a&gt;
  Getting Help
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git &amp;lt;cmd&amp;gt; -h&lt;/code&gt; - great for quick review of command flags&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git &amp;lt;cmd&amp;gt; --help&lt;/code&gt; - to dig into the full man pages of the command&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>cheatsheet</category>
      <category>vcs</category>
    </item>
    <item>
      <title>Making a Portfolio Website From Scratch</title>
      <author>JillKlatt</author>
      <pubDate>Tue, 27 Jul 2021 19:53:13 +0000</pubDate>
      <link>https://dev.to/jillklatt/making-a-portfolio-website-from-scratch-5576</link>
      <guid>https://dev.to/jillklatt/making-a-portfolio-website-from-scratch-5576</guid>
      <description>&lt;h2&gt;
  &lt;a href="#its-time"&gt;
  &lt;/a&gt;
  It‚Äôs time.
&lt;/h2&gt;

&lt;p&gt;You‚Äôve created projects, you wrote your resume, your LinkedIn looks great. On the never ending checklist of Personal Branding and Networking to-dos, you‚Äôve narrowed it down to your portfolio website and fixing your Twitter (aka deleting the Glee-fanfic).&lt;br&gt;
That might be too specific.&lt;br&gt;
But if you‚Äôre a little like me, you might be met with the analysis paralysis of where to even begin. Where to host? What language to use? Styled Components or Bootstrap? Or, god forbid, ignoring a template all together and diving into CSS on your own.&lt;br&gt;
You have to find what works for you, but to help, here are some tips and resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="#tips"&gt;Tips&lt;/a&gt;&lt;br&gt;
&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;br&gt;
&lt;a href="#inspiration"&gt;Inspiration&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don‚Äôt be afraid to look for inspiration. Look at your friends and colleagues and connections and what their portfolios look like. But remember to credit where it's due.&lt;/li&gt;
&lt;li&gt;Let it reflect you. In the world of first impressions, your portfolio can be the inhale you take before you introduce yourself.&lt;/li&gt;
&lt;li&gt;Let it be weird, let it be silly, let it be exciting. It‚Äôs recommended that your resume be relatively boring in order to pass through the programs, but here you can use colors and animations and make the buttons bounce in a way that some people might not like but Oh well!&lt;/li&gt;
&lt;li&gt;Send it around! Not just to your friends with wonderful design ability, but to your mom! If your mom can‚Äôt figure out how to use your dropdown, perhaps that needs some adjusting. Overwhelm yourself with feedback.&lt;/li&gt;
&lt;li&gt;But remember that when you receive feedback, it‚Äôs one person‚Äôs opinion. It might be an educated opinion that you should probably listen to, but at the end of the day it‚Äôs your portfolio, it‚Äôs literally representing YOU.&lt;/li&gt;
&lt;li&gt;Use this opportunity to learn. I graduated Flatiron‚Äôs Software Engineering program with a competency in Ruby and JS, but they couldn‚Äôt teach me how to have style or taste. My CSS knowledge was incredibly limited, I could not explain what a flexbox was. But by ignoring that tempting urge to go to Bootstrap, I was able to deepen my understanding of how CSS works and (maybe) how to make things look good.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nnyQAqUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/JI9xHLR2UMAi5EkWND/giphy.gif%3Fcid%3D790b7611df73b984e37f1be686650cbfc28cb7ebbc64252b%26rid%3Dgiphy.gif%26ct%3Dg" alt="Smooth Load Screen"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I used React for my portfolio and hosted it on Github Pages. Here's a great &lt;a href="https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f"&gt;tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create a personal &lt;a href="https://coolors.co/"&gt;color scheme&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Add CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations"&gt;animation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Improve your Flexbox &lt;a href="https://flexboxfroggy.com/"&gt;skills&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Add a &lt;a href="https://github.com/reactjs/react-tabs"&gt;tabbed table&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create a free email &lt;a href="https://formspree.io/"&gt;form&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWrWE4v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/pODy2C4ctFHgMnSlBY/giphy.gif%3Fcid%3D790b761181fd378dcbc867d04b0deb189d37eb7bb8ad34dc%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWrWE4v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/pODy2C4ctFHgMnSlBY/giphy.gif%3Fcid%3D790b761181fd378dcbc867d04b0deb189d37eb7bb8ad34dc%26rid%3Dgiphy.gif%26ct%3Dg" alt="Gif of the email logo moving on mouse-over"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nickydover.com/"&gt;Nicky Dover&lt;/a&gt; &lt;em&gt;Reflecting Your Personality&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImgCLdfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk83klb2q3fxirgwr3o5.png" alt="Nicky Dover Website"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://brittanychiang.com/"&gt;Brittany Chiang&lt;/a&gt; &lt;em&gt;Sleek and Smooth&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTS5zDL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrdpj4nm5trmegmkjx0f.png" alt="Brittany Chiang Website"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mmeurer00.github.io/#/"&gt;Maxine Meurer&lt;/a&gt; &lt;em&gt;Animations and Fun Features&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://oliver-nicoll.github.io/"&gt;Nicoll Oliver&lt;/a&gt; &lt;em&gt;Repurposing a Template&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emmabostian/developer-portfolios"&gt;This Giant List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only did a learn so much about styling and organizing, but I‚Äôm even more excited to show this project off. &lt;br&gt;
I'm proud to say this thing is &lt;em&gt;about&lt;/em&gt; me and &lt;em&gt;by&lt;/em&gt; me. &lt;/p&gt;

&lt;p&gt;View my website &lt;a href="//jillklatt.github.io"&gt;here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>portfolio</category>
      <category>react</category>
      <category>githubpages</category>
    </item>
    <item>
      <title>Basics of Building a CRUD API with Typescript (NestJS and FoalTS)</title>
      <author>Alex Merced</author>
      <pubDate>Tue, 27 Jul 2021 19:42:55 +0000</pubDate>
      <link>https://dev.to/alexmercedcoder/basics-of-building-a-crud-api-with-typescript-nestjs-and-foalts-4h49</link>
      <guid>https://dev.to/alexmercedcoder/basics-of-building-a-crud-api-with-typescript-nestjs-and-foalts-4h49</guid>
      <description>&lt;p&gt;Using Typescript for development for frontend and backend development keep growing. Typescript allows for better IDE hints and less runtime errors due to type errors with its typing system. On top of that Typescript makes popular OOP patterns like dependency injection more applicable vs when typing doesn't exist like in plain javascript. (In DI, you use typing in class constructor to instantiate and inject services throughout your application)&lt;/p&gt;

&lt;p&gt;Two frameworks keep typescript close to their hearts when building a backend application in NodeJS, NestJS and FoalTS. In this tutorial we will discuss CRUD and REST API conventions and apply them to building a basic API in Nest and FOAL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-of-restful-convention"&gt;
  &lt;/a&gt;
  Summary of RESTful Convention
&lt;/h2&gt;

&lt;p&gt;THe restful convention gives us a blueprint of making the basic routes for CRUD (Create, Read, Update, Delete) functionality in a uniform way. &lt;/p&gt;

&lt;p&gt;API Restful Routes&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name of Route&lt;/th&gt;
&lt;th&gt;Request Method&lt;/th&gt;
&lt;th&gt;Endpoint&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/model&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;returns list of all items&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Show&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/model/:id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;returns item with matching id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create&lt;/td&gt;
&lt;td&gt;Post&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/model&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;creates a new item, returns item or confirmation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update&lt;/td&gt;
&lt;td&gt;Put/Patch&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/model/:id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Updated item with matching ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Destroy&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/model/:id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes item with matching ID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If we weren't build an API but instead rendering pages on the server there would be two additional routes. New, which renders a page with a form to create a new object, submitting the form triggers the create route. Edit, which renders a page with a form to edit an existing object, submitting the form triggers the Update route. &lt;/p&gt;

&lt;p&gt;Since we are building an api, Edit and New aren't necessary as the burden of collecting the information to submit to the Create and Update route will be on whoever builds the applications that consume the API. (Frontend Applications built in frameworks)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-an-api"&gt;
  &lt;/a&gt;
  Building an API
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a folder for this exercise and navigate your terminal to that server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;let's create our two project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#nest"&gt;
  &lt;/a&gt;
  Nest
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Install Nest CLI Globally &lt;code&gt;npm i -g @nestjs/cli&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new nest project &lt;code&gt;nest new n-practice&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into folder and run dev server with &lt;code&gt;npm run start&lt;/code&gt; which default runs on port 3000 (localhost:3000)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#foal"&gt;
  &lt;/a&gt;
  Foal
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Install the Foal CLI Globally &lt;code&gt;npm install -g @foal/cli&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new Foal Project &lt;code&gt;foal createapp f-practice&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into folder and run dev server with &lt;code&gt;npm run develop&lt;/code&gt; which default runs on port 3001 (localhost:3001)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-controller"&gt;
  &lt;/a&gt;
  Creating our Controller
&lt;/h3&gt;

&lt;p&gt;A controller is a class where we will house a bundle of functions. These functions will fire when certain requests are made to our server based on their request methods (GET, PUT, POST, PATCH) and the endpoint (/this, /that). The rules of which methods/endpoint combinations point to which controller methods are called our routes.&lt;/p&gt;

&lt;p&gt;In both of these frameworks, routes are defined as function decorators &lt;code&gt;@decorator&lt;/code&gt; that designate the route each function belongs to.&lt;/p&gt;

&lt;p&gt;create a new controller&lt;br&gt;
    - NestJS: run command &lt;code&gt;nest g controller posts&lt;/code&gt; (creates src/posts/posts.controller.ts)&lt;br&gt;
    - FoalTS: run command &lt;code&gt;foal generate controller posts&lt;/code&gt; (create src/app/controllers/posts.controller.ts)&lt;/p&gt;

&lt;p&gt;For FOALTS make sure to update app.controller.ts to register the new controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAppController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createConnection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typeorm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./controllers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;subControllers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;---------------------&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's update and test each of the RESTful routes in our controllers!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-data"&gt;
  &lt;/a&gt;
  Our Data
&lt;/h3&gt;

&lt;p&gt;We aren't using a database, so instead we'll use an array as our data layer. Keep in mind if the server restart the array will reset itself (need databases for persistent data). Since we are using typescript we can define our data type (Post) and create an array of posts. Put this at the top of your controller files!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-index-route"&gt;
  &lt;/a&gt;
  The Index Route
&lt;/h3&gt;

&lt;p&gt;The Index route allows us to get all items of our model with a get request. So in our case a get request to "/posts" should get us all the posts. Update the controllers as show below and then go to "/posts" in your browser.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#nestjs"&gt;
  &lt;/a&gt;
  NESTJS
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Our Controller for "/posts"&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#foalts"&gt;
  &lt;/a&gt;
  FOALTS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-show-route"&gt;
  &lt;/a&gt;
  The Show Route
&lt;/h3&gt;

&lt;p&gt;In the show route we make a get request to "/posts/:id" and determine which post to show based on the id in the URL.&lt;/p&gt;

&lt;p&gt;After updating your code in the browser go to "/posts/0" to test&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nestjs"&gt;
  &lt;/a&gt;
  NestJS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Param&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Our Controller for "/posts"&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// use the params decorator to get the params&lt;/span&gt;
    &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#foalts"&gt;
  &lt;/a&gt;
  FoalTS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-create-route"&gt;
  &lt;/a&gt;
  The Create Route
&lt;/h3&gt;

&lt;p&gt;The create route will be a post request to "/posts", we will use the data in the request body to create a new post. To test this out you'll need a tool like Postman or Insomnia.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nestjs"&gt;
  &lt;/a&gt;
  NestJS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Our Controller for "/posts"&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// use body decorator to retrieve request body&lt;/span&gt;
    &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#foalts"&gt;
  &lt;/a&gt;
  FoalTS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-update-route"&gt;
  &lt;/a&gt;
  The Update Route
&lt;/h3&gt;

&lt;p&gt;The update route takes a put request to "/posts/:id" and updates the post with the specified id. Use postman or insomnia to test.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nestjs"&gt;
  &lt;/a&gt;
  NestJS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Our Controller for "/posts"&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#foalts"&gt;
  &lt;/a&gt;
  FoalTS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-destroy-route"&gt;
  &lt;/a&gt;
  THe Destroy Route
&lt;/h3&gt;

&lt;p&gt;The Destroy route takes a delete request to "/posts/:id" and will deletes the post with the appropriate id.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nestjs"&gt;
  &lt;/a&gt;
  NestJS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Our Controller for "/posts"&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#foalts"&gt;
  &lt;/a&gt;
  FoalTS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interface Defining the Shape of a Post&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Array of Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THe First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Body of the First Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PostsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Nest and Foal present two of the main Backend frameworks that provide first-class support for Typescript. They have many more features and goodies built into their CLI to try out. They also both work really well with TypeORM, a database ORM that is built with First-Class Typescript support.&lt;/p&gt;

</description>
      <category>nestjs</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>foalts</category>
    </item>
    <item>
      <title>Don't Launch Now - Things I Learned From My Launch and Development Hell</title>
      <author>Ayan S</author>
      <pubDate>Tue, 27 Jul 2021 19:17:04 +0000</pubDate>
      <link>https://dev.to/madebyayan/don-t-launch-now-things-i-learned-from-my-launch-and-development-hell-32mm</link>
      <guid>https://dev.to/madebyayan/don-t-launch-now-things-i-learned-from-my-launch-and-development-hell-32mm</guid>
      <description>&lt;p&gt;Launching can be hard, but not launching is even harder.&lt;/p&gt;

&lt;p&gt;This is a bit of a long post and is divided into several sections. For your convenience, this study consists of the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having A Product But Not Being Able To Launch&lt;/li&gt;
&lt;li&gt;Development Hell&lt;/li&gt;
&lt;li&gt;A Post (or two), A Hope&lt;/li&gt;
&lt;li&gt;The Week Before Launch&lt;/li&gt;
&lt;li&gt;The Launch Day Fix&lt;/li&gt;
&lt;li&gt;End Of Launch Day&lt;/li&gt;
&lt;li&gt;Lessons Learned&lt;/li&gt;
&lt;li&gt;About The Product&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#having-a-product-but-not-being-able-to-launch"&gt;
  &lt;/a&gt;
  Having A Product But Not Being Able To Launch
&lt;/h2&gt;

&lt;p&gt;After working on &lt;a href="https://focuswall.madebyayan.com/"&gt;Focus Wall&lt;/a&gt; for a while I decided that its time to finally launch since it had already passed its MVP stage a while back. However, something held me back from just launching it. I had a decent &lt;a href="https://focuswall.madebyayan.com/"&gt;website&lt;/a&gt; and the product was ready but I just couldn't get myself to launch it.&lt;/p&gt;

&lt;p&gt;This would mainly be because I was being psychologically held back due to the fact that I didn't have a big enough following on any social media, which led me to believe that I shouldn't launch now as it wouldn't be worth it unless people start showing more interest on social media.&lt;/p&gt;

&lt;p&gt;And hence, the launch didn't happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-hell"&gt;
  &lt;/a&gt;
  Development Hell
&lt;/h2&gt;

&lt;p&gt;So after that I naturally went on to building my next project. Developing is the one thing that sucks me in and even though I enjoy it, sometimes it feels like this passion is holding me back from truly achieving somethings as I just jump from one thing that excites me to the next one after its completed.&lt;/p&gt;

&lt;p&gt;And as fun as developing, designing and coding are, there seemed to lack a meaning behind it all. If other people aren't able to use the things I'm making and take advantage of my tools and products, then what's even the point of making them?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-post-or-two-a-hope"&gt;
  &lt;/a&gt;
  A Post (or two), A Hope
&lt;/h2&gt;

&lt;p&gt;It's not always that something you read changes your perspective on things, but when that does happen, you start seeing things in a new light. And that's what happened when I encountered &lt;a href="https://www.indiehackers.com/post/i-dont-care-about-market-research-i-m-just-gonna-build-what-i-like-febe0c043c"&gt;this&lt;/a&gt; post on Indie Hackers.&lt;/p&gt;

&lt;p&gt;Just as I was working on my new project, I came across that post and reading it sparked something in me and made me realize that it's okay to just launch because I've built something that I want and if I don't put it out in the world, someone else who might want it as well might never get it.&lt;/p&gt;

&lt;p&gt;At the same time I had also come across &lt;a href="https://www.indiehackers.com/post/posting-on-social-media-every-day-the-gems-habit-6fa805dff6"&gt;this&lt;/a&gt; post and it helped me understand how to handle social media in a way while developing my product. I've always wanted to post more about what I'm building and my process, but I never knew where to start. So this post pointed in the a clear direction and now I've got a bunch of GEMS to post. And because of that, &lt;a href="https://twitter.com/madebyAyan"&gt;twitter&lt;/a&gt; seems to have become a more relaxed place rather than a source of anxiety.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-week-before-launch"&gt;
  &lt;/a&gt;
  The Week Before Launch
&lt;/h2&gt;

&lt;p&gt;After the development hell had somewhat faded, I committed myself towards a single goal, that within a week I'd launch my product on Product Hunt.&lt;/p&gt;

&lt;p&gt;So I left the current project that I had been working on and started polishing Focus Wall for the launch. At the time I even wrote a &lt;a href="https://www.indiehackers.com/post/share-your-project-and-goals-for-this-week-f0158fee05?commentId=-MdsMs7vkaTWjTy9-USO"&gt;comment&lt;/a&gt; on a post about my goals for the upcoming week.&lt;/p&gt;

&lt;p&gt;During the week, I shared progress of the product on Twitter and even slight details of it. This resulted in my follower count going from 4 to 11 in less that a week, which I consider to be a big achievement as I hadn't been active on social platforms prior to that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-launch-day-fix"&gt;
  &lt;/a&gt;
  The Launch Day Fix
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.producthunt.com/posts/focus-wall"&gt;Product Hunt Launch&lt;/a&gt; was right after the list refreshed. I had been working on the first comment for about an hour and added it the launch page along with some generic screenshots.&lt;/p&gt;

&lt;p&gt;What I didn't realize back then was that product hunt compress the images that you add and just having dark screenshots didn't look good, especially on phone.&lt;br&gt;
So I spent the next few hours completely redesigning the images and adding self made mockups and styles. And as soon as I finished making one image, I'd upload it to the the page and then work on the next one.&lt;br&gt;
After fixing the page and website with better images, I did see the number of upvotes go up, though I can't be certain if it was because of this or not.&lt;/p&gt;

&lt;p&gt;Along with this, I also had a sale going on over on itch.io and a coupon for gumroad, the two places where I uploaded the app.&lt;/p&gt;

&lt;p&gt;I then wrote about the launch on reddit, added a milestone on indie hackers and shared it on twitter. And also added the product upvote hunt button to my site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-of-launch-day"&gt;
  &lt;/a&gt;
  End Of Launch Day
&lt;/h2&gt;

&lt;p&gt;At the end of the launch day, Focus Wall ranked 22nd on Product Hunt, with 36 upvotes, which I don't consider to be a bad rank for someone who just launched their very first product, in fact its motivated me work harder on my next product (the one I had kept on hold to release Focus Wall).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmYBIwHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Pi8kei2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmYBIwHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Pi8kei2.png" alt="Product Hunt Analytics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along with that, I had also gotten my very first customer within just the first 2 hours of my launchüéâ, and that got me excited to work on it further, knowing that other people want it as well!&lt;/p&gt;

&lt;p&gt;Though the traffic on gumroad wasn't the best, the product was featured as one of the top products on itch.io since it appealed to all sorts of developers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fwNQ9KYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yBq5As7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fwNQ9KYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yBq5As7.png" alt="Itch.io Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And all of this traffic was totally organic, I hadn't told any friends or family about the launch just to see where I can get without relying on any extra factors for the launch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;Instead of plain screenshots, make sure to use better pics that stand out next time and to check how it looks on various displays.&lt;/p&gt;

&lt;p&gt;Don't let social media give you anxiety, if you just give it a bit of your time, it'll become a relaxing place where you can not only show your products but even express yourself.&lt;/p&gt;

&lt;p&gt;Don't let the fear of 'not launching now' get to, instead launch when you're ready rather than keeping your product in the shadows. And this is a big part of the reason why I started building in public as well, as it's better to have your product out there instead of keeping it hidden from someone who might need it.&lt;/p&gt;

&lt;p&gt;And the above statement is further strengthened from all the sales I've made so far. It's made me realize that I wasn't the only one who needed this and if I hadn't released it, it wouldn't have reached to people who wanted it.&lt;/p&gt;

&lt;p&gt;And I guess that's the rewarding part about being a maker, you not only have fun making what you enjoy, but you also get to give people something that they need, that only your unique product or solution can provide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-product"&gt;
  &lt;/a&gt;
  About The Product
&lt;/h2&gt;

&lt;p&gt;Focus Wall is a clean dynamic desktop wallpaper to help you stay focused so you never lose track.&lt;br&gt;
Keeping all your important to-dos in that one perfect place that see everyday, your desktop wall! So you can easily sort out your priorities, right there on your wallpaper, with just a single glance.&lt;/p&gt;

&lt;p&gt;If you'd like to learn more about it or try it out, you can do so here:&lt;br&gt;
&lt;a href="https://focuswall.madebyayan.com"&gt;focuswall.madebyayan.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you'd like to get in touch, feel free to reach out on twitter &lt;a href="https://twitter.com/madebyAyan"&gt;@madebyAyan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps someone!üòä&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>softwaredeveloper</category>
      <category>webdev</category>
      <category>launch</category>
    </item>
    <item>
      <title>namy.ai MVP DONE!</title>
      <author>Hugo Montenegro</author>
      <pubDate>Tue, 27 Jul 2021 19:00:13 +0000</pubDate>
      <link>https://dev.to/hm/namy-ai-mvp-done-1lbj</link>
      <guid>https://dev.to/hm/namy-ai-mvp-done-1lbj</guid>
      <description>&lt;p&gt;üéâüéâ Yaayyyyy! ü•≥üéâ&lt;/p&gt;

&lt;p&gt;I just pushed the new version to GitHub, so happy!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.namy.ai"&gt;www.namy.ai&lt;/a&gt; is at what I'd consider a proper "MVP" level.&lt;/p&gt;

&lt;p&gt;WHAT: It's a domain name generator that's powered with AI.&lt;br&gt;
WHY: I thought existing generators suck. Namerobot, Namekrea, Namelix, Google domains, etc... They all suck&lt;/p&gt;

&lt;p&gt;HOW YOU CAN HELP: please check it out and give me some feedback?&lt;/p&gt;

&lt;p&gt;Thanks! ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>saas</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Array rotation, a simple approach using JS</title>
      <author>Vishwa.R</author>
      <pubDate>Tue, 27 Jul 2021 18:47:04 +0000</pubDate>
      <link>https://dev.to/codereaper08/array-rotation-a-simple-approach-using-js-327o</link>
      <guid>https://dev.to/codereaper08/array-rotation-a-simple-approach-using-js-327o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-an-array"&gt;
  &lt;/a&gt;
  What's an array?
&lt;/h2&gt;

&lt;p&gt;An array is a type of linear data structure containing a collection of elements of similar data type. Arrays are one of the most important data structures. The elements in the array are stored in contiguous memory locations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-array-rotation"&gt;
  &lt;/a&gt;
  what's array rotation?
&lt;/h2&gt;

&lt;p&gt;Array rotation is nothing but shifting elements of the array in a specified direction with a rotation factor. No worries, this will be made clear with an example below,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#reversal-algorithm-for-array-rotation"&gt;
  &lt;/a&gt;
  Reversal algorithm for array rotation
&lt;/h2&gt;

&lt;p&gt;There are many ways to rotate an array, you may use a temporary array to store values and then replace them in the actual array, or you may store the first element of the array in a temporary variable. Shift the other elements to the left, and we have to do this for &lt;code&gt;d&lt;/code&gt; times (where &lt;code&gt;d&lt;/code&gt; is the rotation factor). We are going to use &lt;em&gt;Reversal algorithm&lt;/em&gt; for rotating the array in left direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-reversal-algorithm-works"&gt;
  &lt;/a&gt;
  How the Reversal algorithm works?
&lt;/h2&gt;

&lt;p&gt;Unlike other methods mentioned above, Reversal algorithm don't use any temporary variable or array for the rotation process. This makes it more space efficient. This algorithm works on &lt;em&gt;3 steps&lt;/em&gt;. They are,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;reverse &lt;code&gt;d&lt;/code&gt; elements.&lt;/li&gt;
&lt;li&gt;reverse &lt;code&gt;n-d&lt;/code&gt; elements.&lt;/li&gt;
&lt;li&gt;And finally, reverse &lt;code&gt;n&lt;/code&gt; elements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
So, with these steps in mind, let us dive right into JavaScript and make the magic happen ‚ú®
&lt;h2&gt;
  &lt;a href="#code-it-in-js"&gt;
  &lt;/a&gt;
  Code it in JS
&lt;/h2&gt;

&lt;p&gt;First, we need a function to rotate the array from a given index to the end. So it takes 3 parameters like &lt;code&gt;samparr&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;. We use a &lt;code&gt;while&lt;/code&gt; loop and assign the starting value of &lt;code&gt;samparr&lt;/code&gt; to a temporary variable called &lt;code&gt;temp&lt;/code&gt;. &lt;br&gt;
We then assign the starting value of &lt;code&gt;samparr&lt;/code&gt; to the ending value of &lt;code&gt;samparr&lt;/code&gt;. And, finally, we assign the ending value of &lt;code&gt;samparr&lt;/code&gt; to the &lt;code&gt;temp&lt;/code&gt; again. We use this &lt;code&gt;temp&lt;/code&gt; variable to dynamically change the starting and ending values of the &lt;code&gt;samparr&lt;/code&gt;. We then increment the start with 1 and decrement the end with 1. This is going to be our main function, which we would call with respect to the above-mentioned 3 steps.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We, then, need a function to actually rotate the array to the left using the rotation factor &lt;code&gt;d&lt;/code&gt;. For that, we create another function which takes the &lt;code&gt;samparr&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; as parameters and return the rotated array. We return the function if we have d=0, which means the array is empty. Going good till now, but wait!, What if the &lt;code&gt;d&lt;/code&gt; is greater than &lt;code&gt;n&lt;/code&gt;, &lt;em&gt;step 2&lt;/em&gt; will become broken, to fix that, we just update &lt;code&gt;d&lt;/code&gt; as &lt;code&gt;d % n&lt;/code&gt;. We'll look at an example in a minimum scale to better understand this &lt;code&gt;d % n&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
After, refactoring, we give &lt;em&gt;Step1&lt;/em&gt;, &lt;em&gt;Step2&lt;/em&gt; and &lt;em&gt;Step3&lt;/em&gt; to the &lt;code&gt;Reverse&lt;/code&gt; function. This will finally return a nicely rotated array as a result.&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So, Finally, we have to console log the rotated array. For that, we create a function called &lt;code&gt;Logger&lt;/code&gt;, which will console log the rotated array. This function takes two parameters, &lt;code&gt;samparr&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;. It is a simple function which loops through all elements in the array and log them onto console.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#hurray"&gt;
  &lt;/a&gt;
  Hurray üéâ
&lt;/h2&gt;

&lt;p&gt;It's done. The last and final thing we do is pass inputs to our functions, to see them in action.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Use this *&lt;a href="https://jsfiddle.net/Vishwa_R/kn5Lv0qw/26/"&gt;JSFiddle&lt;/a&gt; to change rotation factor and input array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements:
&lt;/h2&gt;

&lt;p&gt;Cover image : Photo by &lt;a href="https://unsplash.com/@marekpiwnicki?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marek Piwnicki&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/rotation?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, give a üíñ if you like.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to make a Flask Web App for Keras Model?</title>
      <author>Avi Arora</author>
      <pubDate>Tue, 27 Jul 2021 18:25:27 +0000</pubDate>
      <link>https://dev.to/aarora4/how-to-make-a-flask-web-app-for-keras-model-5972</link>
      <guid>https://dev.to/aarora4/how-to-make-a-flask-web-app-for-keras-model-5972</guid>
      <description>&lt;p&gt;Read the full article here: &lt;a href="https://analyticsarora.com/how-to-make-a-flask-web-app-for-keras-model/"&gt;https://analyticsarora.com/how-to-make-a-flask-web-app-for-keras-model/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So, you have built some kind of machine learning model in Keras. Now, you want to add a frontend interface so people can actually interact with your model in an approachable way. Look no further. In this tutorial, I will cover how to package your Keras model into a powerful web application using Flask.&lt;/p&gt;

&lt;p&gt;This is the second article in a series talking about how I made and deployed a neural network to rate songs like the popular music reviewer Anthony Fantano. You can read about the process of &lt;a href="https://analyticsarora.com/making-the-needle-bot/"&gt;researching and developing the neural network&lt;/a&gt; in the first article. The final article covers the &lt;a href="https://analyticsarora.com/how-to-fix-common-errors-deploying-keras-model-to-heroku/"&gt;issues I encountered deploying a Flask Web Application to Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Click &lt;a href="https://github.com/aarora4/keras-flask-deploy-webapp"&gt;here&lt;/a&gt; to see all my code.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cloning the Starter Code&lt;/li&gt;
&lt;li&gt;Mocking Up the Design&lt;/li&gt;
&lt;li&gt;Writing the HTML and CSS&lt;/li&gt;
&lt;li&gt;Creating the Model Operation Functions&lt;ul&gt;
&lt;li&gt;Saving the Best Model&lt;/li&gt;
&lt;li&gt;Initializing the Tensorflow Session&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Data Preprocessing Function&lt;/li&gt;
&lt;li&gt;Prediction Function&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Taking in User Input&lt;ul&gt;&lt;li&gt;Accepting File Drag Events&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Sending Files through a Post Request&lt;/li&gt;
&lt;li&gt;Saving Files to Temporary Directory&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Updating the Frontend with Javascript&lt;ul&gt;
&lt;li&gt;Showing and Hiding Elements&lt;/li&gt;
&lt;li&gt;Submit Function&lt;/li&gt;
&lt;li&gt;Clear Function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo and Conclusion&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top Skill You Need as a Python Developer</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 18:04:17 +0000</pubDate>
      <link>https://dev.to/project_beginners/top-skill-you-need-as-a-python-developer-391b</link>
      <guid>https://dev.to/project_beginners/top-skill-you-need-as-a-python-developer-391b</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;With the rising popularity of Python programming language and expanding demand of a Python developer in the market, one will undoubtedly consider 'How To Become A Python Developer.' In this blog, I will walk you through a structured approach, profession bits of knowledge, and skills required to turn into a Python Developer.&lt;/span&gt;&lt;/p&gt;
&lt;span id="who-is-a-python-developer"&gt;&lt;/span&gt;&lt;h2&gt;Who Is A Python Developer?&lt;/h2&gt;

&lt;p&gt;Let me first answer the inquiry, 'which precisely is a python developer?'. There is no reading material definition for a Python developer; there are certain domains and employment roles a Python developer can take as indicated by the range of abilities they have. A Python developer can be a Web developer, Software Engineer, Data Analyst, Data Scientist or an Automation analyzer, and so on. What's more, henceforth a Python developer can be anybody of the abovementioned.&lt;/p&gt;
&lt;p&gt;Presently the following inquiry would be, the reason becomes a python developer when there are such a large number of programming languages that we can learn. Let's investigate a couple of reasons why you should turn into a python developer.&lt;/p&gt;
&lt;span id="why-become-a-python-developer"&gt;&lt;/span&gt;&lt;h2&gt;Why Become A Python Developer?&lt;/h2&gt;

&lt;p&gt;Python was the most popular programming language in 2018, and the chart during the current year appears to be going upward too. Simple entry and increased demand are captivating enough to turn into a Python developer. The demand cooks well for Job openings and being the one with the in-demand skills would enable you to stand apart among the crowd. Python programming language has numerous highlights that do developers change to Python over other programming languages. Simple punctuation and meaningfulness make learning Python much progressively simpler.&lt;/p&gt;
&lt;h3&gt;
&lt;br&gt;
&lt;span&gt;Further Reading: &lt;/span&gt;&lt;b&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/top-python-developer-skills-you-need-to-know/"&gt;Top Skill You Need as a python Developer&lt;/a&gt;&lt;/span&gt;&lt;/b&gt;&lt;br&gt;
&lt;/h3&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Top Skill You Need as a Javascript Developer</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 17:59:54 +0000</pubDate>
      <link>https://dev.to/project_beginners/top-skill-you-need-as-a-javascript-developer-3gi3</link>
      <guid>https://dev.to/project_beginners/top-skill-you-need-as-a-javascript-developer-3gi3</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;No doubt, JavaScript development is a booming profile. Today there are around currently¬†&lt;/span&gt;&lt;span&gt;12.1 million JavaScript developers&lt;/span&gt;&lt;span&gt;¬†in the market worldwide and drawing a salary of¬†&lt;/span&gt;&lt;span&gt;$110,673 annually&lt;/span&gt;&lt;span&gt;, which equals¬†&lt;/span&gt;&lt;span&gt;$47.49 per hour&lt;/span&gt;&lt;span&gt;.¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;These figures are clearly proving the prominence of JavaScript development. The profile is at its peak, and we have stepped into a programmer's world. Those looking to make a career have a bright future.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though, what I have observed among the students is that their focus is only on their degree. They are not working on their skills. I am not considering them wrong, but I want to clarify that it's not enough; it will not make them the top-notch JavaScript developer they wish to be.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But don't be sad, I have a perfect guide for you. In this blog, I have listed the top skills you need to become a JavaScript developer.¬†&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span&gt;&lt;span&gt;Originally Published: &lt;/span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-skills-you-need-as-a-javascript-developer"&gt;&lt;span&gt;Top Skill You Need as a Javascript Developer&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/h1&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>left/right vs start/end values. What's better for supporting of LTR and RTL languages</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 27 Jul 2021 17:59:29 +0000</pubDate>
      <link>https://dev.to/melnik909/left-right-vs-start-end-values-what-s-better-for-supporting-of-ltr-and-rtl-languages-5fm6</link>
      <guid>https://dev.to/melnik909/left-right-vs-start-end-values-what-s-better-for-supporting-of-ltr-and-rtl-languages-5fm6</guid>
      <description>&lt;p&gt;When our website becomes popular there is the important issue of translating on different languages. For example, I often wanted to translate the website from English to Arabic. The problem is following, English is a matter of languages where the beginning of the line is on the left (LTR) and in Arabic the beginning of the line is on the right (RTL).    &lt;/p&gt;

&lt;p&gt;So if I use the text-align: left for Arabic users they will be confused because the beginning of the line will be by the left and no right like he thought. It happens because the left and right values don't consider text direction, i.e when we use the left or right value a text is aligned to the left or right edge always.&lt;/p&gt;

&lt;p&gt;But we can fix it using the start and end values that consider the text direction. If a browser of our user is setting in LTR language the beginning of the line will be by left. And if it's setting in RTL language then by right. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* or */&lt;/span&gt;

&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* or */&lt;/span&gt;

&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
üñê I'm always open to any opportunities to share knowledge about CSS and HTML with you. If you need help feel free to reach out to me: &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get awesome goods for frontenders: üëï &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, üéÅ &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, ü•Ω &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, üß© &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Docker For Windows- An Overview To Dockerize A .Net Core App</title>
      <author>GravelSoft</author>
      <pubDate>Tue, 27 Jul 2021 17:49:51 +0000</pubDate>
      <link>https://dev.to/gravelsoft/docker-for-windows-an-overview-to-dockerize-a-net-core-app-2lk7</link>
      <guid>https://dev.to/gravelsoft/docker-for-windows-an-overview-to-dockerize-a-net-core-app-2lk7</guid>
      <description>&lt;p&gt;With expanding requests, organizations are wandering into huge and complex activities, which set aside more exertion and effort to work just as convey. At whatever point the testing group reports an issue, they need to fix the blunder and afterward convey the whole code. To conquer these intricacies, most endeavors are moving towards Docker for simple sending just as smooth working. Docker is a containerization device created to simplify it to make, convey just as arrived behind schedule inside holders known as Docker compartments. &lt;/p&gt;

&lt;p&gt;Individuals working in the Microsoft space accept that Docker compartments is a Linux driven innovation! In any case, Docker holders today support even .Net applications. Despite the fact that the Docker device was made for Linux, the Windows and .Net utilities in it are working on consistently. Prior to jumping into the subtleties of utilizing Docker for Windows to make, host, and scale .Net applications, we should reveal some insight into the essentials about Docker compartments. &lt;/p&gt;

&lt;p&gt;For what reason do we require Docker, Container and that's just the beginning? &lt;br&gt;
Envision you need to create an application, yet don't have a clue who will utilize it and on which stages it would run. There are different applications that can run on various OSs. Ordering the code for the most mainstream working frameworks (OS) is one of the approaches to tackle the issue. Nonetheless, there is a major support issue as far as making changes in the application - you need to recompile the code over and over for all stages. &lt;/p&gt;

&lt;p&gt;Making an application inside the compartment comes as an answer. It is an optimal method to wrap an application into a segregated bundle. The application won't be influenced in its compartment by any cycles or applications that exist outside of the holder. The holder holds all that the application relies upon to work effectively. Any place, the holder moves, the necessities of the application will consistently be fulfilled, as it is bundled with all that is needed to run including a library, runtimes, conditions, etc. &lt;/p&gt;

&lt;p&gt;Docker is the norm to construct and run containerized applications. It offers a holder climate to have any application of your decision. Docker compartments are lightweight and permit you to move applications just as administrations flawlessly between your host workers. It improves execution just as brings down cost while setting aside less effort to begin and offering fitting asset the board. &lt;/p&gt;

&lt;p&gt;Furthermore, you presently don't need pre-apportioning RAM to every Docker holder. The primary motivation behind utilizing Docker holder is to convey applications to the creation climate. Docker comes in two versions: Docker Enterprise Edition (EE) and Docker Community Edition (CE). CE is allowed to utilize and an optimal decision for little groups and improvement climate. EE is a membership based version and reasonable for running strategic applications. Besides, Docker programming accompanies two separate projects: Docker motor or Docker Daemon and Docker Client. &lt;/p&gt;

&lt;p&gt;Docker Concepts &lt;br&gt;
Docker Image &lt;/p&gt;

&lt;p&gt;Docker pictures are like dough shapers, outlines or forms. Docker picture is characterized as the unchanging expert layout used to produce compartments that are for the most part precisely indistinguishable. The picture incorporates the Dockerfile, code, and libraries that your application needs to run, all firmly bundling together. &lt;/p&gt;

&lt;p&gt;Dockerfile &lt;/p&gt;

&lt;p&gt;A record that accompanies guidelines for how Docker compartment should build your picture is alluded to as Dockerfile. It is notable as the base picture used to make the underlying Docker picture layer. Snow capped, Ubuntu, and Python are some famous authority base pictures. You can stack the extra layers on top of the base Docker picture layer, in view of the directions in your Dockerfile.&lt;/p&gt;

&lt;p&gt;Docker for Mac &lt;/p&gt;

&lt;p&gt;Docker for Mac is programming delivered from Docker, Inc and it works on the interaction of advancement with Docker on Mac Operating System. The bundle involves the undeniable virtual machine running on a HyperKit hypervisor of Mac OS, Docker customer, Docker daemon, Docker machine organization, and Docker-create devices. &lt;/p&gt;

&lt;p&gt;Docker for Windows &lt;/p&gt;

&lt;p&gt;Docker for Windows is programming arranged independently for Windows. It utilizes Hyper-v, local virtualization arrangement of Windows for its virtualization programming. It likewise empowers the chance to run windows compartments along with Linux holders. &lt;/p&gt;

&lt;p&gt;Understanding Docker for Windows &lt;br&gt;
Microsoft has been a fast connector to containerization approaches inside and its responsibility towards Docker holder is one of the crucial cross-industry improvements of late years. Windows incorporates its own compartment innovation. In the same way as other Windows Server highlights, Docker for Windows can be introduced either utilizing PowerShell or utilizing Windows include discourse. The whole Docker apparatus becomes viable with Windows including Docker form, information volumes, Docker Client, and any remaining structure blocks needed for containerized foundation. Since every one of the parts are currently locally viable with Docker for Windows, the Windows applications can execute with negligible calculation overhead. &lt;/p&gt;

&lt;p&gt;However it is totally founded on the open source Docker administration, it incorporates support for applying the PowerShell order line just as for additional disengagement with the accumulation of the holder centered Nano worker and Hyper-V compartments. Nano worker is Microsoft's recommended base picture. Nonetheless, organizations favor utilizing Windows worker center as the base picture, however it is bigger just as sets aside more effort to send than Nano worker takes. This is on the grounds that Windows worker center offers help for a full .Net execution. Thusly, it turns into significantly more straightforward to rapidly move the current application to the worker center. &lt;/p&gt;

&lt;p&gt;The principle benefit of Docker for Windows is that they give the choice to modernize the current .Net Framework applications, which are running on Windows by means of containerization.&lt;/p&gt;

&lt;p&gt;.Net Framework and .Net Core for Docker Containers &lt;br&gt;
With regards to building worker side containerized Docker applications with .Net, you can browse .Net Framework and .Net Core. Both offer many .Net stage segments yet remember some essential contrasts for terms of containerizing applications. &lt;/p&gt;

&lt;p&gt;You can pick .Net Framework when your application right now running in .Net structure just as solid conditions on Windows. .Net Framework is the lone choice to use instead of advancements that aren't upheld by .Net Core Technology. ASP.Net Web Forms, ASP.Net site page applications, Workflow related administrations, and WCF administration execution are a few innovations upheld just in .Net Frameworks, and .Net Core doesn't have any arrangement for them. Picking .Net Framework for Docker permits improving organization experience as it limits the arrangement issues. &lt;/p&gt;

&lt;p&gt;.Net center and Docker are ideal when you need to work with the two Windows and Linux holders; since, it meets the cross-stage needs. Essentially, if your application design manages microservices and you need to start Docker compartment quick, then, at that point .net center can be the best decision. .Net Core ought to be the default decision when you construct new containerized .Net applications. &lt;/p&gt;

&lt;p&gt;A significant advantage of utilizing .Net Core for Docker is it permits running .Net forms of applications one next to the other inside a similar machine. This is a significant necessity for VMs or workers that don't utilize compartments since holders confine the .Net forms that the application requires. The lightweight and secluded nature of .Net Core brands it as cool for Docker holders. &lt;/p&gt;

&lt;p&gt;Generally, Docker compartments can run on any machines, and on any framework including cloud. The adaptability, transportability, and effortlessness that Docker offers help it to produce a particularly significant energy. Generous commitment of Microsoft in the Docker people group empowers running Docker holders on Windows just as with Windows Nano Server. Thusly, on account of Docker for Windows, presently we can run .Net applications on their local stage.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hello World</title>
      <author>Vinay </author>
      <pubDate>Tue, 27 Jul 2021 17:44:58 +0000</pubDate>
      <link>https://dev.to/vinaykeshava/hello-world-45i6</link>
      <guid>https://dev.to/vinaykeshava/hello-world-45i6</guid>
      <description>&lt;p&gt;Hello World ,&lt;br&gt;
    this is my first blog post on dev.to looking forward to learn more stuff from dev.to &lt;/p&gt;

</description>
      <category>linux</category>
    </item>
  </channel>
</rss>
