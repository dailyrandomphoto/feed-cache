<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Announcing "@mswjs/data"—data modeling library for testing JavaScript applications</title>
      <author>Artem Zakharchenko</author>
      <pubDate>Mon, 12 Apr 2021 15:59:45 +0000</pubDate>
      <link>https://dev.to/kettanaito/announcing-mswjs-data-data-modeling-library-for-testing-javascript-applications-3290</link>
      <guid>https://dev.to/kettanaito/announcing-mswjs-data-data-modeling-library-for-testing-javascript-applications-3290</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It's been more than a year since &lt;a href="https://mswjs.io"&gt;Mock Service Worker&lt;/a&gt; (MSW) began to appear in people's &lt;code&gt;package.json&lt;/code&gt;, improving the way you write tests, iterate on features, and debug API-related issues. We are incredibly thankful for everybody who supported us and gave the library a chance in their projects. That allowed us to gather a ton of feedback based on the usage scenarios you face every day. It is with that feedback that we can move the project forward to ease your testing and development workflow even more. And it is with that feedback that we are able to make this announcement.&lt;/p&gt;

&lt;p&gt;MSW was deliberately designed with only the essentials of API mocking in mind: interception of requests and response mocking. A huge focus was made on leveraging Service Worker API to enable a one-of-a-kind experience and support the same request handlers across different environments. While some alternative libraries come with built-in assertions or data-modeling options, our team has chosen a horizontal way to scale the project: distribute complimentary, on-demand libraries instead of stuffing dozens of functions and methods into a single package.&lt;/p&gt;

&lt;p&gt;Some of the most popular questions developers have when starting with MSW are related to data. You immediately notice how the library is agnostic to how you create and update data in your handlers. You may use a plain array or &lt;code&gt;Map&lt;/code&gt; to manage resources. Perhaps, you may even design a custom database abstraction that manages those resources in a more standardized way.&lt;/p&gt;

&lt;p&gt;No matter what data-related setup you end up with, it's there to answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to describe data resources?&lt;/li&gt;
&lt;li&gt;How to implement CRUD operations on data?&lt;/li&gt;
&lt;li&gt;How to persist the changes made to the data?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we are proud to announce the &lt;a href="https://github.com/mswjs/data"&gt;Data library&lt;/a&gt;—a standalone package to model and query data in your tests and beyond. Although the project is at the early stage of development and doesn't solve every problem right away, letting you try it out and gather your feedback is crucial for us to refine and shape the future experience.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Without further a due, let's talk about what's to become the recommended way to work with data in Mock Service Worker.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#data-modeling"&gt;
  &lt;/a&gt;
  Data modeling
&lt;/h2&gt;

&lt;p&gt;First, let's get acquainted with the two main terms that the Data library operates with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Model&lt;/em&gt;—description of the data. Think of it as a blueprint that describes what properties the data has.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Entity&lt;/em&gt;—an instance of a particular model. This is the exact data that implements its model description.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When working with Data, you define models and relationships between them, which, effectively, result in a virtual database being created.&lt;/p&gt;

&lt;p&gt;Install the package into your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @mswjs/data 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, let's create a new "user" model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Models are defined by calling the &lt;code&gt;factory&lt;/code&gt; function and providing it with the object where keys represent &lt;em&gt;model names&lt;/em&gt;, and values stand for &lt;em&gt;model definitions&lt;/em&gt;. Each property in the model definition has an initializer—a function that seeds a value and infers its type.&lt;/p&gt;

&lt;p&gt;Notice how the &lt;code&gt;id&lt;/code&gt; property equals &lt;code&gt;primaryKey&lt;/code&gt;. Each model &lt;em&gt;must have a primary key&lt;/em&gt;, which acts as a unique ID in a conventional database table. Data exposes the &lt;code&gt;primaryKey&lt;/code&gt; function that you should use to mark a certain property as the model's primary key.&lt;/p&gt;

&lt;p&gt;In the example above, we're using plain functions that return static data. This means that each time a user is created, it will have &lt;code&gt;firstName: "John"&lt;/code&gt; and &lt;code&gt;age: 18&lt;/code&gt;. While this is a good foundation to build upon, the static nature of values may limit your data scenarios. Consider using tools like &lt;a href="https://github.com/marak/Faker.js/"&gt;Faker&lt;/a&gt; to define models with randomly generated realistic data.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a user model with a random UUID and first name.&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can define multiple models and relationships between them within the same &lt;code&gt;factory&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oneOf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// "book.publisher" is a relational property&lt;/span&gt;
    &lt;span class="c1"&gt;// that references an entity of the "publisher" model.&lt;/span&gt;
    &lt;span class="na"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;oneOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;publisher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Learn more about &lt;a href="https://github.com/mswjs/data"&gt;defining model relationships&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#seeding"&gt;
  &lt;/a&gt;
  Seeding
&lt;/h2&gt;

&lt;p&gt;Once the models are defined, create an entity of a particular model by calling the &lt;code&gt;.create()&lt;/code&gt; method on it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Creating an entity without any arguments will fill its properties using the value initializers you've specified in the model definition.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.create()&lt;/code&gt; method accepts an optional argument that stands for the initial values of the entity. For example, if we wish to create a user with a fixed "firstName" value, we can provide that value in the initial values object:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Uses an exact value for the "firstName" property,&lt;/span&gt;
  &lt;span class="c1"&gt;// while seeding the "id" based on its getter.&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#querying-client"&gt;
  &lt;/a&gt;
  Querying client
&lt;/h2&gt;

&lt;p&gt;Apart from the data modeling functionality, this library provides a &lt;em&gt;querying client&lt;/em&gt; that allows you to find, modify, and delete entities on runtime. The querying client brings Data to life, as it enables dynamic scenarios against the generated data.&lt;/p&gt;

&lt;p&gt;Each model supports the following querying methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.findFirst()&lt;/code&gt;, finds the first entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.findMany()&lt;/code&gt;, finds multiple entities that match a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.count()&lt;/code&gt;, returns the number of entities for a model.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.update()&lt;/code&gt;, updates an entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.updateMany()&lt;/code&gt;, updates multiple entities that match a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.delete()&lt;/code&gt;, deletes an entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.deleteMany()&lt;/code&gt;, deletes multiple entities that match a query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most basic example of querying is finding an entity by its primary key. In our case, we can find a user by its "id" like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Find a user with the given "id" (primary key).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's focus on &lt;code&gt;which&lt;/code&gt; part of the query above. When querying entities, &lt;code&gt;which&lt;/code&gt; is a predicate object that describes the criteria against an entity. The structure of that predicate is the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;expectedValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[property]&lt;/code&gt;, a known property of the model. In the case of our "user" model, this can be "id" or "firstName".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[operator]&lt;/code&gt;, an operator function name that compares the actual and expected values of the referenced property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operators depend on the value type that's being queried. When querying a string (like we do with &lt;code&gt;which.id&lt;/code&gt;, where "id" is of the String type), operators like &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;notEquals&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, and others are available. When querying a number, you have access to the &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;between&lt;/code&gt;, etc. operators instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Querying methods are strongly typed, validating the known model properties and value-based operators on build time. Experiment with your models to learn about all the different options at your disposal!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a similar fashion, we can query multiple entities. Here's how we can get all the users that satisfy a certain age criteria:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Returns all users whose "user.age"&lt;/span&gt;
&lt;span class="c1"&gt;// is greater or equal 18.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Data supports &lt;a href="https://github.com/mswjs/data#cursor-based-pagination"&gt;cursor&lt;/a&gt; and &lt;a href="https://github.com/mswjs/data#offset-based-pagination"&gt;offset&lt;/a&gt; pagination to work with large data sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is much more functionality that Data provides, so don't hesitate to explore the library API. Refer to the &lt;a href="https://github.com/mswjs/data"&gt;documentation&lt;/a&gt; for API definition and usage examples.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#integration-with-mock-service-worker"&gt;
  &lt;/a&gt;
  Integration with Mock Service Worker
&lt;/h2&gt;

&lt;p&gt;Here's a gigantic cherry on top: you can turn any data model into &lt;a href="https://mswjs.io/docs/basics/request-handler"&gt;request handlers&lt;/a&gt; (both REST &lt;em&gt;and&lt;/em&gt; GraphQL) to encapsulate its operations, like creation and querying, under the respective API routes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-rest-api"&gt;
  &lt;/a&gt;
  Generating REST API
&lt;/h3&gt;

&lt;p&gt;Using our &lt;code&gt;db&lt;/code&gt; and its "user" model, we can turn it into a REST API "server" in a single command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/mocks/browser.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Import the "db" object.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Generate REST API request handlers&lt;/span&gt;
  &lt;span class="c1"&gt;// based on the "user" model.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Looks unfamiliar? Learn how to &lt;a href="https://mswjs.io/docs/getting-started/install"&gt;get started with Mock Service Worker&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Calling &lt;code&gt;.toHandlers()&lt;/code&gt; on a model generates CRUD routes for working with that model. In the example above, the following request handlers will be created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET /users/&lt;/code&gt;, returns all users in the database.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /users/:id&lt;/code&gt;, returns a user by their primary key (&lt;code&gt;id&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST /users&lt;/code&gt;, creates a new user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT /users/:id&lt;/code&gt;, updates an existing user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE /users/:id&lt;/code&gt;, deletes a user by their primary key.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the model name is pluralized ("user*&lt;em&gt;s&lt;/em&gt;*") to reflect the proper semantics when working with the "user" resource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the handlers established, you can create and query users in your application as you would do against an actual HTTP server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a new user in the database.&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The body is used as the initial entity values.&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Then, query the created user.&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explore this interactive sandbox to learn more about generating REST API handlers from your data models:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/data-rest-api-handlers-i91nv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-graphql-api"&gt;
  &lt;/a&gt;
  Generating GraphQL API
&lt;/h3&gt;

&lt;p&gt;A model can also generate GraphQL handlers:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command generates the following GraphQL schema with its types based on your model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQuery&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;All the generated GraphQL types and their names are based on your model name and properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With your model turned into request handlers, you can query its entities as you would usually do in GraphQL. Here's an example that uses Apollo to get a user entity by ID:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query GetUser {
    # Hey, it's the same query as in the ".findMany()" method!
    user(which: { id: { equals: "abc-123" } }) {
      firstName
      age
    }
  }
`&lt;/span&gt;

&lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_USER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explore the GraphQL example on Codesandbox:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/data-graphql-api-handlers-2xc4i"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#call-for-contributors"&gt;
  &lt;/a&gt;
  Call for Contributors!
&lt;/h2&gt;

&lt;p&gt;Data is a new library that has a long way to go and multiple areas to improve. For instance, these are some of the features we'd love to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-side persistence;&lt;/li&gt;
&lt;li&gt;Server-side rendering support;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.createMany()&lt;/code&gt; method to seed multiple entities at once, respecting their relations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to learn about data modeling or find this area fascinating, &lt;a href="https://github.com/mswjs/data/issues"&gt;&lt;strong&gt;join as a contributor&lt;/strong&gt;&lt;/a&gt; and shape the way developers would model their fixtures.&lt;/p&gt;

&lt;p&gt;You can also support the project financially by &lt;a href="https://opencollective.com/mswjs"&gt;&lt;strong&gt;sponsoring it on Open Collective&lt;/strong&gt;&lt;/a&gt;, allowing the team to work on bug fixes and stunning new features. Your support will not go unnoticed!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#resources-amp-links"&gt;
  &lt;/a&gt;
  Resources &amp;amp; links
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mswjs/msw"&gt;Mock Service Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ApiMocking"&gt;Follow on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Create own Blog app in Django [Tutorial]</title>
      <author>CodeSnail 🐌</author>
      <pubDate>Mon, 12 Apr 2021 15:57:24 +0000</pubDate>
      <link>https://dev.to/soniarpit/create-own-blog-app-in-django-tutorial-4bb2</link>
      <guid>https://dev.to/soniarpit/create-own-blog-app-in-django-tutorial-4bb2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#blog-features"&gt;
  &lt;/a&gt;
  Blog Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CKEditor in Admin&lt;/li&gt;
&lt;li&gt;Threaded Comment system&lt;/li&gt;
&lt;li&gt;Tagging functionality&lt;/li&gt;
&lt;li&gt;Retrieving similar posts&lt;/li&gt;
&lt;li&gt;Search functionality&lt;/li&gt;
&lt;li&gt;Auto Sitemap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So Let's start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-environment-setup"&gt;
  &lt;/a&gt;
  Virtual Environment Setup
&lt;/h2&gt;

&lt;p&gt;Virtualenv is a tool used to create an isolated Python environment. This environment has its own installation directories that doesn’t share libraries with other virtualenv environments (and optionally doesn’t access the globally installed libraries either).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;to install virtual environment just type following command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before making a virtual environment we make project directory. Inside it, we make a virtual environment. Type following command in terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir awwblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside awwblog directory we setup virtual environment. Type following command in terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd awwblog/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First find your python installation path of particular version,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;which python3.9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use python3.9 here. By above command you get the path of the python3.9 (of any version)&lt;/p&gt;

&lt;p&gt;I want python3.9 in my virtual environment. So let’s create virtual environment.&lt;/p&gt;

&lt;p&gt;Using virtualenv command we created env_awwblog virtual environment. Every python installation goes inside that. But before installing python stuff we need to activate the virtual environment.&lt;/p&gt;

&lt;p&gt;Type following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source env_awwblog/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No, we are ready to install Django inside virtual environment. So let’s go…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-django"&gt;
  &lt;/a&gt;
  Installing Django
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install Django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Django is installed in our environment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-awwblog-project"&gt;
  &lt;/a&gt;
  Creating awwblog Project
&lt;/h2&gt;

&lt;p&gt;Everything going fine right. Now we start the project using django-admin command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject awwblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command should have created a awwblog directory. Use the command cd awwblog to go into the directory.&lt;/p&gt;

&lt;p&gt;The command should have created a awwblog directory. Use the command cd awwblog to go into the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just hit the url &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; in browser.&lt;br&gt;
Now you can see this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZI1Y0J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-7-1024x529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZI1Y0J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-7-1024x529.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see this in your browser, congratulation!! your Django installation is done successfully. Now we create an app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-blog-app"&gt;
  &lt;/a&gt;
  Creating blog App
&lt;/h2&gt;

&lt;p&gt;Now let’s create your first Django application. You will create a blog application from scratch. From the project’s root directory, run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py startapp blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open awwblog directory in your favorite code editor. I am using VS code. Below is the structure of how our project file structure looks like after setting up everything,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WfQ7mPVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WfQ7mPVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now open settings.py in the awwblog directory. The first thing you need to do is to add the created app “blog” in the INSTALLED_APPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This holds the Django apps you’ll be using in the Django project.&lt;/p&gt;

&lt;p&gt;That’s it for this article. In next tutorial we will build post modal to store blog posts.&lt;/p&gt;

&lt;p&gt;Hope you like it. Please share this tutorial with your friends.&lt;/p&gt;

&lt;p&gt;Next: &lt;a href="https://www.codesnail.com/designing-the-blog-data-schema-django-blog-2/"&gt;Next: Designing the blog data schema – Django Blog #2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Prevent others sending emails using your domain name</title>
      <author>XCS</author>
      <pubDate>Mon, 12 Apr 2021 15:49:44 +0000</pubDate>
      <link>https://dev.to/xcs/prevent-others-sending-emails-using-your-domain-name-9en</link>
      <guid>https://dev.to/xcs/prevent-others-sending-emails-using-your-domain-name-9en</guid>
      <description>&lt;h1&gt;
  &lt;a href="#prevent-others-sending-emails-using-your-domain-name"&gt;
  &lt;/a&gt;
  Prevent others sending emails using your domain name
&lt;/h1&gt;

&lt;p&gt;Yesterday a user contacted me on &lt;a href="https://twitter.com/XCSme"&gt;Twitter&lt;/a&gt; saying that she has received a scam email sent from an email address originating from my domain, &lt;a href="https://www.usertrack.net"&gt;usertrack.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might know that anyone can set &lt;strong&gt;any address&lt;/strong&gt; in the "&lt;strong&gt;from&lt;/strong&gt;" field when sending an email. I thought there was nothing I could do about it, but upon looking deeper into it I realized that some of my email settings were wrong, which might allow attackers to send &lt;a href="https://en.wikipedia.org/wiki/Spoofing_attack"&gt;spoofed&lt;/a&gt; emails on my behalf.&lt;/p&gt;

&lt;p&gt;I did have &lt;strong&gt;DMARC&lt;/strong&gt; setup, but my &lt;strong&gt;SPF&lt;/strong&gt; and &lt;strong&gt;DKIM&lt;/strong&gt; records were invalid.&lt;/p&gt;

&lt;p&gt;After looking into it, I realized that there's a lot more to learn about it than I thought, so here's a summary of what I learned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-you-do-correctly-setup-dmarc"&gt;
  &lt;/a&gt;
  What should you do? Correctly setup DMARC!
&lt;/h2&gt;

&lt;p&gt;There are some email security policies that can be set at the &lt;strong&gt;DNS&lt;/strong&gt; level. You can specifically allow only some IP addresses (usually your email server) or domains to send emails on your domain's behalf.&lt;/p&gt;

&lt;p&gt;I do think those policies are mostly just a suggestion that tells other email servers and email clients to mark an email as spam or not send it if the authentication checks are failing. That being said, most popular email clients should do a pretty good job of blocking emails that don't respect those policies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-those-email-policies-to-your-dns-txt-records"&gt;
  &lt;/a&gt;
  Add those email policies to your DNS TXT records
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;DMARC&lt;/strong&gt;, &lt;strong&gt;SPF&lt;/strong&gt; and &lt;strong&gt;DKIM&lt;/strong&gt; policies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dmarc"&gt;
  &lt;/a&gt;
  DMARC
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#domainbased-message-authentication-reporting-and-conformance"&gt;
  &lt;/a&gt;
  Domain-based Message Authentication, Reporting and Conformance
&lt;/h4&gt;

&lt;p&gt;Useful for receiving reports about who is sending emails using your domain name. This also enables you to specify what to do with the emails that are not originating from allowed sources (do nothing, flag them, or reject them).&lt;/p&gt;

&lt;p&gt;Here is what DNS record I had added:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TXT record&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Name: &lt;strong&gt;_dmarc&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v=DMARC1; p=reject; rua=mailto:reports@usertrack.net;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;v = &lt;strong&gt;Version&lt;/strong&gt; - should be DMARC1&lt;/li&gt;
&lt;li&gt;p = &lt;strong&gt;Policy&lt;/strong&gt; - can be &lt;strong&gt;none&lt;/strong&gt;, &lt;strong&gt;quarantine&lt;/strong&gt; and &lt;strong&gt;reject&lt;/strong&gt;.
Reject is recommended once you know your other policies are setup correctly, so the spoofed email won't be delivered.&lt;/li&gt;
&lt;li&gt;rua = &lt;strong&gt;Reporting URI(s) for aggregate data&lt;/strong&gt; - Where to send reports that mail services generate about who tried to send emails from your domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#spf"&gt;
  &lt;/a&gt;
  SPF
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#sender-policy-framework"&gt;
  &lt;/a&gt;
  Sender Policy Framework
&lt;/h4&gt;

&lt;p&gt;With SPF you can say who is allowed to send emails using your domain name. This is the value I used:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TXT record&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Name: &lt;strong&gt;@&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v=spf1 +mx +ip4:123.456.78.19 +include:websitewelcome.com +include:servers.mcsv.net -all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;v&lt;/strong&gt; = Version - should be spf1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+mx&lt;/strong&gt; = Allow emails for all domains mentioned in the MX records of this domain&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+ip4:123.456.78.19&lt;/strong&gt; = Allow emails sent from this IP address (this was the address of my mail server, hosted on HostGator)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+include:websitewelcome.com&lt;/strong&gt; = Allow emails sent from this domain (it's the mail server domain of HostGator)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+include:servers.mcsv.net&lt;/strong&gt; = MailChimp, I use them to send newsletters from &lt;a href="mailto:someemail@usertrack.net"&gt;someemail@usertrack.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-all&lt;/strong&gt; = If none of the previous rules are met, deny all other emails.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All those rules are tested left to right, and &lt;strong&gt;"+"&lt;/strong&gt; means allow, &lt;strong&gt;"-"&lt;/strong&gt; means reject and there is also &lt;strong&gt;"~"&lt;/strong&gt; which is like a soft reject (maybe mark as spam or something like that).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dkim"&gt;
  &lt;/a&gt;
  DKIM
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#domainkeys-identified-mail"&gt;
  &lt;/a&gt;
  DomainKeys Identified Mail
&lt;/h4&gt;

&lt;p&gt;Using DKIM all emails sent will be digitally signed using a private key and the DNS record provides a public key to test if the emails are correctly signed. If there is a missmatch, the DKIM policy will fail, and the email won't be sent or marked as spam.&lt;/p&gt;

&lt;p&gt;My &lt;strong&gt;DKIM&lt;/strong&gt; record looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TXT record&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Name: &lt;strong&gt;default._domainkey&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0B...very long key...AB\;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;v&lt;/strong&gt; = Version - should be DKIM1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;k&lt;/strong&gt; = Key type - encryption algorithm used&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;p&lt;/strong&gt; = Public key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got my DKIM TXT record value from &lt;strong&gt;Hostgator -&amp;gt; cPanel -&amp;gt; Email Authentication&lt;/strong&gt; (my email server provider), but I had some issues making it valid as their TXT record had a limited number of characters and showed my public key (p=...) as two distinct strings that I had to manually remove the quotes around and merge (concatenate) them together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-tools-that-i-used"&gt;
  &lt;/a&gt;
  Some tools that I used
&lt;/h2&gt;

&lt;p&gt;To test if the policies are correct, the tools I found more useful are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MXToolBox - Email Deliverability&lt;/strong&gt; - &lt;a href="https://mxtoolbox.com/deliverability" rel="noopener"&gt;mxtoolbox.com/deliverability&lt;/a&gt;
This allows you to test if your DMARC policies are correct&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MailTester - SPF and DKIM Checker&lt;/strong&gt; - &lt;a href="https://www.mail-tester.com/spf-dkim-check" rel="noopener"&gt;mail-tester.com/spf-dkim-check&lt;/a&gt;
Quickly test if your SPF and DKIM records are valid strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dr0jkK0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QlvusIn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dr0jkK0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QlvusIn.png" alt="dmarc dkim spf policies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that by fixing my email authentication on my domains it will be a lot less likely for phishing emails to be sent using my domain names.&lt;/p&gt;

&lt;p&gt;I hope you found this post useful. I tried to make this as concise as possible and provide examples, as I spent several hours trying to understand all those policies and how to set them up, having a hard time finding a TL:DR; on how to quickly setting up email authentication.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 VSCode Extensions as a Web Developer</title>
      <author>pawanbhayde</author>
      <pubDate>Mon, 12 Apr 2021 15:40:47 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/top-10-vscode-extensions-as-a-web-developer-35bd</link>
      <guid>https://dev.to/pawanbhayde/top-10-vscode-extensions-as-a-web-developer-35bd</guid>
      <description>&lt;p&gt;VSCode or Visual Studio Code is the most popular editor for web development in 2020. One of VSCode's most popular features is its extensions. Every month, people from around the world build open-source extensions to help with the VSCode experience. I will show you my favourite 10 VSCode extensions for web development.&lt;/p&gt;

&lt;p&gt;Installing VSCode and VSCode Extensions&lt;br&gt;
In order to use VSCode's extensions, you need to download it. You can download it here.&lt;/p&gt;

&lt;p&gt;To install extensions click on the extension's icon (shown below) and type in the extension. Once found, click install to install the extension to VSCode.&lt;/p&gt;

&lt;p&gt;1: Prettier&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_uhPJjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19835yw9691dmbub9xvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_uhPJjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19835yw9691dmbub9xvn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here it is. My favourite VSCode extension for web development. Prettier is a lifesaver when it comes to formatting and productivity. Prettier formats your files on a save once you configure it in your settings. Instead of spending hours a day making your code look clean, use Prettier. This extension is by far the most popular on the list with over 8,750,000 downloads at the time of writing this article. This is why Prettier is my favourite VSCode extension for web development. &lt;/p&gt;

&lt;p&gt;2: Auto Rename Tag&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRQKJLhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6a85pelqyopj54h59a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRQKJLhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6a85pelqyopj54h59a.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Auto rename tag is an extension which changes both tags when one is changed (example above). Once again, I love this extension because of its JSX support. This extension is one which will improve your productivity noticeably.&lt;/p&gt;

&lt;p&gt;3: Git Lens&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_FWfw2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he99ntwxdx220e57otif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_FWfw2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he99ntwxdx220e57otif.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Git lens, git with superpowers. This extension is the best one for git and GitHub. Know who contributed each line, seamlessly navigate and explore git repositories, and perform powerful comparisons, and so much more. This is a must-have if you work with git and GitHub.&lt;/p&gt;

&lt;p&gt;4: Live Server&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zAciyw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f9g2hgvy4xmo032oo91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zAciyw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f9g2hgvy4xmo032oo91.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This is the easiest way to get a server up and running in seconds. On a click of a button, your site is up and running locally. The benefits of using this instead of putting your index.html file on Google is that every time you save your file, the changes are directly implemented in front of your eyes (no reloading necessary).&lt;/p&gt;

&lt;p&gt;5: HTML Snippets&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcIz5JF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rqwfe2tuh69ztjtlumd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcIz5JF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rqwfe2tuh69ztjtlumd.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension allows you to type something like div.container and get &lt;/p&gt;. This extension allows you to write HTML super quickly. The main reason why I like this extension so much is its JSX support. I'm a React dev and this makes me much more productive.

&lt;p&gt;6: Material Theme &amp;amp; Material Icon Theme&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7TKi_Bh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m13jhcdppy5g2kam88qz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TKi_Bh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m13jhcdppy5g2kam88qz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension gives you amazing icons for your files and a wonderful theme. My favourite theme in Material theme is the palenight theme (that's a lot of themes). These two extensions our my favourite when it comes to design/themes in VSCode.&lt;/p&gt;

&lt;p&gt;7: Bracket Pair Colorizer 2&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aoN8hszi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m3cfh9zyrync14jrpfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aoN8hszi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m3cfh9zyrync14jrpfl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension gives the same colour to matching brackets and parenthesis. This extension prevents you from taking too long looking for the correct closing bracket. This is a must-have if you are using a language which uses brackets and not indentation (sorry python users).&lt;/p&gt;

&lt;p&gt;8: Import Cost&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hiVBs4Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn9c2ffjlawkzg8jacpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiVBs4Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn9c2ffjlawkzg8jacpy.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension provides the import cost (as the name suggests) next to every module/package you import. It's very important to know if you are optimizing your imports and dependencies so that you can ensure the fastest and most efficient experience for your users. This extension works well with ES6 import and ES5 and below require syntax.&lt;/p&gt;

&lt;p&gt;9: Error Lens&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpWOAJyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjn6djqhg3knam19gwg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpWOAJyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjn6djqhg3knam19gwg2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Error Lens is an extension which shows your errors on the lines where they are present (example above). This extension is a lifesaver when looking for the small bug which crashes your whole application. Additionally, this extension is extremely customizable which enables you to change things like colours, fonts, font size, excluding some errors, and much more.&lt;/p&gt;

&lt;p&gt;10: Better Comments&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDtmp2kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2s41mjae7za0ux07693.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDtmp2kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2s41mjae7za0ux07693.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Better comments is an extension which will help improve your code by commenting by alerts, information, TODOs, questions, and more. This is just an overall great extension to make your code more readable and have comments be sorted neatly.&lt;/p&gt;

&lt;p&gt;Closing&lt;br&gt;
I hope you got some new VSCode extensions to download! Let me know if I missed out on any in the comments.&lt;/p&gt;

&lt;p&gt;Pawan&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>webpack</category>
    </item>
    <item>
      <title>HAProxy Basic Login Authentication</title>
      <author>Vu Dao</author>
      <pubDate>Mon, 12 Apr 2021 15:19:25 +0000</pubDate>
      <link>https://dev.to/vumdao/haproxy-basic-login-authentication-48l2</link>
      <guid>https://dev.to/vumdao/haproxy-basic-login-authentication-48l2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#-in-haproxy-config-there-is-no-limit-to-the-number-of-httprequest-statements-per-instance-so-we-can-add-the-rules-to-request-basic-login-to-the-site-but-whitelist-specials-ips"&gt;
  &lt;/a&gt;
  - In haproxy config, there is no limit to the number of http-request statements per instance so we can add the rules to request basic login to the site but whitelist specials IPs
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#setup-haproxy-config-which-contains-basic-login-to-access-the-dashboard-and-allow-access-for-special-resource-ip"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Setup HAProxy config which contains basic login to access the dashboard and allow access for special resource IP&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate haproxy encrypted password
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;printf "thepassword" | mkpasswd --stdin --method=sha-256
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Modify &lt;a href="https://github.com/vumdao/haproxy-basic-auth/blob/master/haproxy.cfg"&gt;haproxy.cfg&lt;/a&gt; which allow access for requests from source &lt;code&gt;18.69.61.21&lt;/code&gt; but requires login for others
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;userlist AuthUsers
        user haproxyreport password $5$3VeorK1XxvgRseQ$VBkOPCY2enWZsas.C6X9Iif0FPHDknXXXXXXXXX

frontend fe-verify
        bind *:443 ssl crt /etc/certs

        acl haproxy_report hdr(host) haproxy-report.cloudopz.co

        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        use_backend haproxy-report-backend if haproxy_report

# haproxy-report-backend
backend haproxy-report-backend
        acl authorized http_auth(AuthUsers)
        acl nagios src 18.69.61.21
        http-request allow if nagios
        http-request auth realm haproxyreport if !authorized
        server haproxy-report 127.0.0.1:1800
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;More about haproxy&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/how-to-set-http-request-header-in-haproxy-48bd"&gt;How To Set HTTP-Request Header In Haproxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/how-to-block-ip-addresses-in-haproxy-3f84"&gt;How To Block IP Addresses In HAProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/haproxy-with-resolvers-in-case-of-aws-application-loadbalancer-d1n"&gt;HAProxy With Resolvers In Case Of AWS Application LoadBalancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/use-goaccess-to-analyze-haproxy-logs-2m51"&gt;Use GoAccess To Analyze HAProxy Logs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.haproxy.org/download/2.4/doc/configuration.txt"&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://vumdao.hashnode.dev/"&gt;Web&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>cloudopz</category>
      <category>devops</category>
      <category>haproxy</category>
      <category>rest</category>
    </item>
    <item>
      <title>Creating a Haskell Application Using Reflex. Part 2</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 12 Apr 2021 15:13:09 +0000</pubDate>
      <link>https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-2-4jaa</link>
      <guid>https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-2-4jaa</guid>
      <description>&lt;p&gt;Author: Nikita Anisimov&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-1-3kk3"&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there! Let’s continue with our series of tutorials devoted to the development of Reflex-based web applications.&lt;br&gt;
In this part, we’ll add the ability to carry out various manipulations on the task list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4gEF0TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4gEF0TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#operations-on-todo"&gt;
  &lt;/a&gt;
  Operations on Todo
&lt;/h1&gt;

&lt;p&gt;Let’s make it possible to tick the tasks off as completed, as well as edit and delete them.&lt;br&gt;
First of all, we extend the &lt;code&gt;Todo&lt;/code&gt; type by adding the state. If the task is not completed, you can edit it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoDone&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;stateEdit&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we define the events occurring in the system. In our business projects, we used two approaches to this end. The first approach implies enumerating all possible events as individual constructors and implementing the handler function that will update the state depending on the occurred event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NewTodo&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ToggleTodo&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;StartEditTodo&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;FinishEditTodo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;DeleteTodo&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantages of this approach include the ability to see what event specifically is taking place in the system and the update it’s carrying (all this is done by the &lt;code&gt;traceEvent&lt;/code&gt; function). Nevertheless, it’s not always possible to use the advantages, especially when the event carries a lot of data which is eventually hard to analyze. If you still need to see the values change, the events change &lt;code&gt;Dynamic&lt;/code&gt; in any case and you can also trace its value using the function &lt;code&gt;traceDyn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second approach is to use the update functions represented as the monoid &lt;a href="https://hackage.haskell.org/package/endo-0.3.0.1/docs/Data-Monoid-Endo.html#t:Endo"&gt;&lt;code&gt;Endo&lt;/code&gt;&lt;/a&gt; (roughly speaking, this is an abstraction of the functions whose argument  and result types coincide). The essence of this approach is that the value carried by the update event is the function that defines the update logic itself. In this case, we lose the ability to display the event value (as it turns out, this ability is not always useful), but the obvious advantage is that you don’t need to have access to the current status, create the type including all possible events (which can be quite numerous), or define an individual handler to update the state according to the received event.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will use the second approach.&lt;/p&gt;

&lt;p&gt;Let’s change the structure of the root widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;rootWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rootWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;elClass&lt;/span&gt; &lt;span class="s"&gt;"h2"&lt;/span&gt; &lt;span class="s"&gt;"text-center mt-3"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Todos"&lt;/span&gt;
    &lt;span class="n"&gt;newTodoEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newTodoForm&lt;/span&gt;
    &lt;span class="n"&gt;rec&lt;/span&gt;
      &lt;span class="n"&gt;todosDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;foldDyn&lt;/span&gt; &lt;span class="n"&gt;appEndo&lt;/span&gt; &lt;span class="n"&gt;mempty&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newTodoEv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todoEv&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;delimiter&lt;/span&gt;
      &lt;span class="n"&gt;todoEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we see here in the first place is the use of the &lt;code&gt;RecursiveDo&lt;/code&gt; extension (so you need to enable it). This is one of the most widespread practices in the development of &lt;code&gt;reflex&lt;/code&gt; applications because the situations when the event occurring at the bottom of the page affects the elements at the top of the page happen pretty often. In this case, the event &lt;code&gt;todoEv&lt;/code&gt; is used to define &lt;code&gt;todosDyn&lt;/code&gt;, while &lt;code&gt;todosDyn&lt;/code&gt;, in its turn, is the argument for the widget the &lt;code&gt;todoEv&lt;/code&gt; event comes from.&lt;/p&gt;

&lt;p&gt;After that, we see the update of the &lt;code&gt;foldDyn&lt;/code&gt; function parameters. Here the new function &lt;code&gt;leftmost&lt;/code&gt; is used. It accepts the events list and returns the event occurring at the moment when any of the events from the events list occurs. If two events from the list occur at a given moment, the leftmost event will be returned (hence the name). The task list is not a list now but &lt;a href="https://hackage.haskell.org/package/containers-0.6.4.1/docs/Data-IntMap.html"&gt;&lt;code&gt;IntMap&lt;/code&gt;&lt;/a&gt; (for the sake of simplicity, we’ll use &lt;code&gt;type Todos = IntMap Todo&lt;/code&gt;).  In the first place, this is done to allow us to access an element directly by the identifier. &lt;code&gt;appEndo&lt;/code&gt; is used to update the list. If we defined each event as an individual constructor, we’d have also had to define the handler function, which would look approximately as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;
&lt;span class="n"&gt;updateTodo&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
  &lt;span class="kt"&gt;NewTodo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;           &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;ToggleTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;          &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;StartEditTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;       &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;startEdit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;FinishEditTodo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;DeleteTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;          &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though it’s not necessary to define this function, we are using several other auxiliary functions here, which we’ll need further, anyway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;startEdit&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;startEdit&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;toggleTodo&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;toggleTodo&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toggleState&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;
      &lt;span class="kt"&gt;TodoDone&lt;/span&gt;     &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
      &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoDone&lt;/span&gt;

&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IntMap&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;maxViewWithKey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function adding a new element has also changed and now returns the event, not the task itself. Let’s also add the field cleanup after the new task is added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;newTodoForm&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;newTodoForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rowWrapper&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"input-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mdo&lt;/span&gt;
  &lt;span class="n"&gt;iEl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;initialAttributes&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"placeholder"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"Todo"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inputElementConfig_setValue&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;btnEv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt;
    &lt;span class="n"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
    &lt;span class="n"&gt;newTodoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;iEl&lt;/span&gt;
    &lt;span class="n"&gt;btnAttr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btnEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"input-group-append"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="n"&gt;btnAttr&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Add new entry"&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;btnEv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;btnEl&lt;/span&gt;
  &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tagPromptlyDyn&lt;/span&gt; &lt;span class="n"&gt;newTodoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;btnEl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function &lt;code&gt;todoListWidget&lt;/code&gt; now returns the task change. It has slightly changed, too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rowWrapper&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;evs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;listWithKey&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromAscList&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;IM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toAscList&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;todoWidget&lt;/span&gt;
  &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;switchDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;evs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we notice is that the &lt;code&gt;simpleList&lt;/code&gt; function is replaced with &lt;code&gt;listWithKey&lt;/code&gt;. They differ from each other in the type of the first parameter – the first function accepts the list &lt;code&gt;[]&lt;/code&gt;, the second one accepts &lt;code&gt;Map&lt;/code&gt;. The list will be sorted by the key. Here the returned value is important. Each task returns an event (deletion, change). In our specific case, the &lt;code&gt;listWithKey&lt;/code&gt; function will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;listWithKey&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: this function is a part of the &lt;code&gt;reflex&lt;/code&gt; package and has a more complex type. Here we show the specialized type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we are using the familiar &lt;code&gt;leftmost&lt;/code&gt; function for all &lt;code&gt;Map&lt;/code&gt; values. The expression &lt;code&gt;leftmost . elems &amp;lt;$&amp;gt; evs&lt;/code&gt; is of the following type: &lt;code&gt;Dynamic t (Event t TodoEvent)&lt;/code&gt;. We use function &lt;code&gt;switchDyn&lt;/code&gt; to retrieve the &lt;code&gt;Event&lt;/code&gt; from the &lt;code&gt;Dynamic&lt;/code&gt;. This function operates in the following way: it returns the event occurring when the internal event takes place. If the &lt;code&gt;Dynamic&lt;/code&gt; and &lt;code&gt;Event&lt;/code&gt; occur simultaneously, the previous &lt;code&gt;Event&lt;/code&gt; will be returned until the event in the &lt;code&gt;Dynamic&lt;/code&gt; is updated. The function &lt;code&gt;switchPromtlyDyn&lt;/code&gt; operates differently: if the &lt;code&gt;Dynamic&lt;/code&gt; update, occurrence of the event existing before the &lt;code&gt;Dynamic&lt;/code&gt; update, and triggering of the event now containing the &lt;code&gt;Dynamic&lt;/code&gt; take place simultaneously, the new event containing the &lt;code&gt;Dynamic&lt;/code&gt; will be returned. If this situation is not possible, it’s always better to use the &lt;code&gt;switchDyn&lt;/code&gt; because the &lt;code&gt;switchPromtlyDyn&lt;/code&gt; function is more complex, performs additional operations and, moreover, can create cycles.&lt;/p&gt;

&lt;p&gt;The task has acquired different states, which is why the function representing one task has also changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoEvEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;todoEvEv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we’re using the new function &lt;code&gt;dyn&lt;/code&gt;. It has the following type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;dyn&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Adjustable&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NotReady&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;PostBuild&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It accepts the widget wrapped in the &lt;code&gt;Dynamic&lt;/code&gt; as the input parameter. This means that each update of the &lt;code&gt;Dynamic&lt;/code&gt; will be followed by the &lt;code&gt;DOM&lt;/code&gt; update. The output value is the event carrying the value the widget returns. In our case, the specialized type will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;dyn&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we come across an event nested into another event. Two functions from the &lt;code&gt;reflex&lt;/code&gt; package can perform operations on such type: &lt;code&gt;coincidence&lt;/code&gt; and &lt;code&gt;switchHold&lt;/code&gt;. The first function returns the event occurring only when the external and internal events occur simultaneously. That’s not our case. Function &lt;code&gt;switchHold&lt;/code&gt; is of the following type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Reflex&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadHold&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function switches to the new event each time the external event occurs. The event passed as the first parameter will hold until the external event occurs for the first time. This is exactly the way we’re using this function in our example. No event can come from the list until the list is changed for the first time, so we use the &lt;code&gt;never&lt;/code&gt; event. As the name implies, this is a special event that never occurs.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;todoWidget&lt;/code&gt; uses different widgets for different states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Done"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;editEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Edit"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
    &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;startEdit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;editEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="s"&gt;"del"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Undo"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
    &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;updTodoDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Finish edit"&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;
    &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
      &lt;span class="n"&gt;tagPromptlyDyn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updTodos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;updTodoDyn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;editIEl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;initialAttributes&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"placeholder"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"Todo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inputElementConfig_initialValue&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;
  &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;editIEl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All functions used here were described before, so we won’t go into detail explaining each individual function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimization"&gt;
  &lt;/a&gt;
  Optimization
&lt;/h2&gt;

&lt;p&gt;Let’s get back to the &lt;code&gt;listWithKey&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;listWithKey&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function operates in such a way that any update of the transmitted &lt;code&gt;Dynamic&lt;/code&gt; will initiate the update of each individual element. Even if we, say, change a single element, the update will be passed to each element, though it won’t change the value. Now let’s get back to the &lt;code&gt;todoWidget&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoEvEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;todoEvEv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you remember, the &lt;code&gt;dyn&lt;/code&gt; function updates the &lt;code&gt;DOM&lt;/code&gt; every time the &lt;code&gt;todoDyn&lt;/code&gt; is updated. Considering that the change in one element of the list is passed to each element individually, it turns out that the entire &lt;code&gt;DOM&lt;/code&gt; section which displays our tasks will be rebuilt (you can check this using the developer panel in the browser). Obviously, this is not what we want. This is when the &lt;code&gt;holdUniqDyn&lt;/code&gt; function comes to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vMsgHrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vMsgHrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_2.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;holdUniqDyn&lt;/span&gt; &lt;span class="n"&gt;todoDyn'&lt;/span&gt;
  &lt;span class="n"&gt;todoEvEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
  &lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;todoEvEv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve added the line &lt;code&gt;todoDyn &amp;lt;- holdUniqDyn todoDyn'&lt;/code&gt;. What’s going on here? The matter is that though the &lt;code&gt;Dynamic&lt;/code&gt; operates, the value it contains remains unchanged. Function &lt;code&gt;holdUniqDyn&lt;/code&gt; works just this way, so that if the &lt;code&gt;Dynamic&lt;/code&gt; passed to it operates and hasn’t changed its value, the output &lt;code&gt;Dynamic&lt;/code&gt; won’t operate and, consequently, in our case, the &lt;code&gt;DOM&lt;/code&gt; won’t be rebuilt unnecessarily. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qsy1txJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qsy1txJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_3.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result we obtained can be viewed &lt;a href="https://github.com/typeable/blog-posts-ru/tree/c6f256e96d24507ea3e3040c3cd490aaec610029/reflex-todo"&gt;in our repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next part, we’ll consider another way of managing the events and the use of the &lt;a href="https://hackage.haskell.org/package/ghcjs-dom"&gt;GHCJS-DOM&lt;/a&gt; library.&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Two ways to keep gitlab CI files maintainable</title>
      <author>Lekshmi Chandra</author>
      <pubDate>Mon, 12 Apr 2021 15:07:54 +0000</pubDate>
      <link>https://dev.to/lek890/two-ways-to-keep-gitlab-ci-files-maintainable-26de</link>
      <guid>https://dev.to/lek890/two-ways-to-keep-gitlab-ci-files-maintainable-26de</guid>
      <description>&lt;p&gt;Once we had a gitlab CI file. It was short and sweet. One year later, it grew 350 lines long. &lt;/p&gt;

&lt;p&gt;There were these problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Too much content - too much scrolling, hard to work on.&lt;/li&gt;
&lt;li&gt;Hard to disable some jobs temporarily - mostly for debugging infra or test environment or emergency deployment (let that never happen!).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's try to solve it with some features from gitlab.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-leverage-templating"&gt;
  &lt;/a&gt;
  1. Leverage templating
&lt;/h3&gt;

&lt;p&gt;Gitlab CI supports using templates within the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;Consider a sample &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stages:
   - setup
   - soft-qa //lint and unit tests
   - build
   - hard-qa //e2e's
   - deploy-storybook
   - pack
   - notify-devs-staging-can-be-deployed
   - deploy-staging
   - notify-devs-prod-can-be-deployed
   - deploy-production
   - suggest-release-notes

variables: 
    var1: '1'
    // .. and so on

conditions:
    only_master: 
       // configs
    branches:
       // configs
    // and more...

## cache related configs

## setup related configs

## jobs for each for the stages start
.
.
.
. // 200 lines later
.
## jobs end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will still keep the stages in the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; untouched so that I can get a preview of all the stages right at the start of the file.&lt;/p&gt;

&lt;p&gt;Let's now split this into smaller templates. &lt;/p&gt;

&lt;p&gt;For templates, I will create a folder in the repo root called &lt;code&gt;ci-templates&lt;/code&gt;. Now let's extract out one job from the main file and place it in a template in this folder. Note, all these files has to YAML, to be included into a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/ci-templates/.soft-qa.yml

soft-qa:
  image: node:14.5
  stage: soft-qa
  &amp;lt;&amp;lt;: *npm_cache_pull
  allow_failure: false
  script:
    - yarn lint
    - yarn test:unit:ci
  artifacts:
    paths:
      - coverage/lcov.info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Time to use the template. Go to &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; and include this file like below. I will place it at the position of the replaced job.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include: '/ci-templates/.soft-qa.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using this syntax - with relative path - as we are using the file from the same repo. You can keep the file in another repo on the same gitlab instance or even in a public remote repository and use it! Just look up the syntax and update accordingly, like below:&lt;/p&gt;

&lt;p&gt;For another repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include:
  - project: 'my-space/my-another-project'
    file: '/templates/.build-template.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For remote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include:
  - remote: 'https://somewhere-else.com/example-project/-/raw/master/.build-template.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a similar way, extract out other jobs as well and remove them from the .gitlab ci file. I have abstracted the notify stages to a file called &lt;code&gt;.notifications.yml&lt;/code&gt; and deployment related jobs to &lt;code&gt;.deploy.yml&lt;/code&gt;, thus separating the concerns from one single file. Now, include becomes a list like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include: 
   - '/ci-templates/.soft-qa.yml'
   - '/ci-templates/.build.yml'
   - '/ci-templates/.hard-qa.yml'
   - '/ci-templates/.deploy-storybook.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When pipeline starts, all included files are evaluated and deep merged into the .gitlab-ci file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#catch-catch-catch"&gt;
  &lt;/a&gt;
  Catch, Catch, Catch
&lt;/h3&gt;

&lt;p&gt;Things are getting interesting. I have certain conditions like only_tag, only_branches in these jobs. How would I provide them to these files without duplicating it in every files?&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;extends&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I will consolidate my conditions in a file, say, &lt;code&gt;.conditions.yml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// /ci-templates/.conditions.yml

.only_tag:
  only:
    - /^v\d+\.\d+\.\d+$/
  // and more...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use it in a template, include it first in the .gitlab-ci file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include: 
   - '/ci-templates/.conditions.yml'
   - '/ci-templates/.soft-qa.yml'
   - '/ci-templates/.build.yml'
   - '/ci-templates/.hard-qa.yml'
   - '/ci-templates/.deploy-storybook.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in the template file, add extend. Extend is a way of extending the congfigurations to another file. YAML anchors can be used but only from the same file. So this is a way to use jobs from another template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deploy_staging:
  extends: .only_tag
  &amp;lt;&amp;lt;: *deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, deploy_staging will be created only for tags. &lt;/p&gt;

&lt;p&gt;Finally, the .gitlab-ci file will look something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stages:
   - setup
   - soft-qa //lint and unit tests
   - build
   - hard-qa //e2e's
   - deploy-storybook
   - pack
   - notify-devs-staging-can-be-deployed
   - deploy-staging
   - notify-devs-prod-can-be-deployed
   - deploy-production
   - suggest-release-notes

variables: 
    var1: '1'
    // .. and so on

## cache related configs

## setup related configs

include: 
   - '/ci-templates/.conditions.yml'
   - '/ci-templates/.soft-qa.yml'
   - '/ci-templates/.build.yml'
   - '/ci-templates/.hard-qa.yml'
   - '/ci-templates/.deploy-storybook.yml'
   - '/ci-templates/.pack.yml'
   - '/ci-templates/.notifications.yml'
   - '/ci-templates/.deploy.yml'
   - '/ci-templates/.suggest-release-notes.yml'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's go back to the initial problems and check whether they are fixed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Too much content to scroll - now, we can view whole content in the IDE window - Fixed&lt;/li&gt;
&lt;li&gt;Hard to disable jobs - now, we just have to comment the template in the include list -  Fixed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How will I know, if I commented out a required job? Like, by mistake, I commented the pack job. For deployment packed resources are necessary. Here, we will know that the deployment failed much later when the deployment runs. To solve this, there is a way to mark dependencies on previous jobs. That is explained in next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-use-raw-needs-endraw-or-raw-dependencies-endraw-as-applicable"&gt;
  &lt;/a&gt;
  2. Use &lt;code&gt;needs&lt;/code&gt; or &lt;code&gt;dependencies&lt;/code&gt; as applicable
&lt;/h3&gt;

&lt;p&gt;One way to track that you have the dependent artifacts are available before starting a job is by using &lt;code&gt;dependencies&lt;/code&gt; or &lt;br&gt;
&lt;code&gt;needs&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;By default, all artifacts from previous stages are passed to each job. However, you can use the dependencies keyword to define a limited list of jobs to fetch artifacts from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build_frontend:
   stage: build
   script: yarn build

deploy:
   stage: deployment
   dependencies: 
      - build_frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, if the build_frontend is not available, while merging the templates, the pipeline will report error that the &lt;code&gt;build_frontend&lt;/code&gt; is not available. Easy to understand.&lt;/p&gt;

&lt;p&gt;Another utility is the &lt;code&gt;needs&lt;/code&gt;. It is mainly used when you are running jobs out of order and still ensure that the dependency job is completed before starting a job. The difference of &lt;code&gt;needs&lt;/code&gt; from &lt;code&gt;dependencies&lt;/code&gt; is that, in &lt;code&gt;needs&lt;/code&gt;, no artifacts from previous steps are downloaded by default. You need to use &lt;code&gt;artifacts: true&lt;/code&gt; config on the job like below to download them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deploy:
  needs:
   - job: build_1
     artifacts: true
   - job: build_2
     artifacts: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helped me reduce the complexity of the CI file. Hope it helps you too. &lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>gitlab</category>
      <category>betterprogramming</category>
      <category>cleancode</category>
    </item>
    <item>
      <title>Basic mail merge script for Gmail (using Google Apps Script)</title>
      <author>Corentin</author>
      <pubDate>Mon, 12 Apr 2021 15:04:32 +0000</pubDate>
      <link>https://dev.to/frenchcooc/basic-mail-merge-script-for-gmail-using-google-apps-script-4ok4</link>
      <guid>https://dev.to/frenchcooc/basic-mail-merge-script-for-gmail-using-google-apps-script-4ok4</guid>
      <description>&lt;p&gt;Sending mass emails from Gmail is sometimes seen as a challenge. I can tell you it's not! In this article we'll look at the basics of building a mail merge script for Gmail and how it can fit your email marketing needs.&lt;/p&gt;

&lt;p&gt;First, here's what you need to send emails in bulk with Gmail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Gmail (or Google Workspace) account&lt;/li&gt;
&lt;li&gt;a list of contacts&lt;/li&gt;
&lt;li&gt;a template of the emails you want to send&lt;/li&gt;
&lt;li&gt;basic development skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's see the 6 steps to reproduce to create your Google script to send emails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorial-building-a-mail-merge-script-for-gmail"&gt;
  &lt;/a&gt;
  Tutorial: Building a mail merge script for Gmail
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href="https://script.google.com/"&gt;Google Apps Script&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on the "&lt;strong&gt;New project&lt;/strong&gt;" button to create a new project.&lt;/li&gt;
&lt;li&gt;You should now see the script editor.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zgy8Z0eJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mailmeteor.com/assets/img/blog/mail-merge-gmail/mail-merge-gmail-script-gas-editor.png" alt="Google Apps Script editor"&gt;
&lt;/li&gt;
&lt;li&gt;From the editor, copy and paste the following script:
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

Update the &lt;code&gt;recipients&lt;/code&gt; variable with your list of recipients. Also update the &lt;code&gt;template&lt;/code&gt; subject and content to make it fit your needs&lt;/li&gt;
&lt;li&gt;Click on "&lt;strong&gt;Save&lt;/strong&gt;" to save your changes&lt;/li&gt;
&lt;li&gt;Then click on "&lt;strong&gt;▶️ Run&lt;/strong&gt;" to send your emails.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: the first time you use this script it will ask for the permission to send emails on your behalf. Then it won't ask you again.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Emails are usually immediately delivered, but sometimes it takes a few seconds. Check your &lt;a href="https://mail.google.com/mail/#sent"&gt;"Sent" folder in Gmail&lt;/a&gt; to confirm that all emails have been sent! As you will see, all your recipients receive a unique email sent from your email address. You don't need to use &lt;em&gt;bcc&lt;/em&gt; or any other techniques.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Some say that it's impossible to send emails in bulk with Gmail. It's totally untrue. Of course, this is a very basic macro for Google Sheets to send lots of emails with Gmail. You might need to adapt it a little bit more, but thanks to Google Apps Script you can do lot of things.&lt;/p&gt;

&lt;p&gt;Before you go, here are two things to keep in mind when using Gmail as an email marketing tool:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Be sure to abide by &lt;a href="https://support.google.com/mail/answer/81126?hl=en"&gt;Gmail bulk senders guidelines&lt;/a&gt;.&lt;/strong&gt; Especially, note that you are limited to send a reasonable amount of emails per day. If you have a &lt;code&gt;@gmail.com&lt;/code&gt; email address, you can send at most 500 emails/day while with a Google Workspace account, you sending limit hits 2000 emails per day. That's probably well enough for 99% of Gmail users, but it's good to have in mind those limits.&lt;/li&gt;
&lt;li&gt;If you are looking for more a advanced script, for example that let you send personalized emails (e.g. &lt;code&gt;Hi {{ firstname }}&lt;/code&gt;), I'd recommend you to use a Gmail mail merge tool such a &lt;a href="https://mailmeteor.com?utm_source=devto&amp;amp;utm_medium=blogpost&amp;amp;utm_campaign=mail-merge-gmail"&gt;Mailmeteor&lt;/a&gt; that does it for you. It already handles personalization, as well as dozens of features from attachments to aliases. Learn more about the &lt;a href="https://mailmeteor.com/features?utm_source=devto&amp;amp;utm_medium=blogpost&amp;amp;utm_campaign=mail-merge-gmail"&gt;features and benefits of Mailmeteor here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article is part of an extended guide on &lt;a href="https://mailmeteor.com/mail-merge-gmail/?utm_source=devto&amp;amp;utm_medium=blogpost&amp;amp;utm_campaign=mail-merge-gmail"&gt;Mail merge in Gmail (2021)&lt;/a&gt;. If you want to learn much more, go check it out!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Static Site Generation in Next.js explained</title>
      <author>Thomas Ledoux</author>
      <pubDate>Mon, 12 Apr 2021 14:57:55 +0000</pubDate>
      <link>https://dev.to/thomasledoux1/static-site-generation-in-next-js-explained-1cao</link>
      <guid>https://dev.to/thomasledoux1/static-site-generation-in-next-js-explained-1cao</guid>
      <description>&lt;p&gt;The past year, Next.js has been gaining a lot of traction around static site generation, since version 9.3 implemented this it's core. &lt;br&gt;
This is why I wanted to write a blog post containing all the information to get you started on SSG/ISG (Incremental Static Generation) with Next.js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-ssgisg"&gt;
  &lt;/a&gt;
  Why SSG/ISG?
&lt;/h2&gt;

&lt;p&gt;Mostly for performance reasons: when you already have the HTML generated at build time, you can cache this file and serve it to the user requesting it very quickly. &lt;br&gt;
SSG/ISG will most probably help you to get better ranking on Google too, see &lt;a href="https://9to5google.com/2020/05/28/google-search-speed/"&gt;https://9to5google.com/2020/05/28/google-search-speed/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-statically-generate-pages-in-nextjs"&gt;
  &lt;/a&gt;
  How to statically generate pages in Next.js
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#without-data"&gt;
  &lt;/a&gt;
  Without data
&lt;/h3&gt;

&lt;p&gt;When you don't fetch data on your page, the default behaviour is that the page gets statically prerendered. &lt;br&gt;
Next.js will generate an HTML file for your page, and you can host this on any server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#with-data"&gt;
  &lt;/a&gt;
  With data
&lt;/h3&gt;

&lt;p&gt;When you do want to fetch data from an external source, but still want to statically prerender your pages, this is also possible. &lt;br&gt;
There are 2 possible cases here:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#define-your-own-pagesurls"&gt;
  &lt;/a&gt;
  Define your own pages/URLs
&lt;/h4&gt;

&lt;p&gt;In this case, you can create your page under the &lt;code&gt;pages/&lt;/code&gt; directory, for example &lt;code&gt;pages/blog.js&lt;/code&gt;. Add the &lt;code&gt;getStaticProps&lt;/code&gt; function to your page and export it. &lt;br&gt;
In this function, you can call any external data source to fetch data for your page. &lt;br&gt;
Since this is all done on the server during build time, you can even access a database directly if you wanted to.&lt;/p&gt;

&lt;p&gt;Next.js does not limit the external data sources, so you can use a REST API, JSON API, GraphQL API...&lt;br&gt;
You can find a repository with a ton of examples here: &lt;a href="https://github.com/vercel/next.js/tree/canary/examples"&gt;https://github.com/vercel/next.js/tree/canary/examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example from the documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Render posts...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This function gets called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Call an external API endpoint to get posts&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://.../posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// By returning { props: { posts } }, the Blog component&lt;/span&gt;
  &lt;span class="c1"&gt;// will receive `posts` as a prop at build time&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Blog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pagesurls-coming-from-external-source"&gt;
  &lt;/a&gt;
  Pages/URLs coming from external source
&lt;/h4&gt;

&lt;p&gt;In this case, you will need to create a page with a dynamic route. &lt;br&gt;
Again there are 2 options for your dynamic routes: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can create a dynamic route where only 1 part of your URL is dynamic, for example: &lt;code&gt;pages/[id].js&lt;/code&gt;, where the ID will be replaced with the ID coming from your external source&lt;/li&gt;
&lt;li&gt;You can create a dynamic catch all route where the whole URL is dynamic, for example &lt;code&gt;[...slug].js&lt;/code&gt;, where ...slug could be &lt;code&gt;blog/nature/hike1&lt;/code&gt; in your URL and comes from your external data source.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now how do you actually fetch the data to form the actual URLs for your inside your component?&lt;br&gt;
This is where the &lt;code&gt;getStaticPaths&lt;/code&gt; function comes in. This is also an exported function. &lt;br&gt;
An example for a "simple" dynamic route with 1 part of the URL being dynamic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This function gets called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Call an external API endpoint to get posts&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://.../posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the paths we want to pre-render based on posts&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;

  &lt;span class="c1"&gt;// We'll pre-render only these paths at build time.&lt;/span&gt;
  &lt;span class="c1"&gt;// { fallback: false } means other routes should 404.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example for a more complex dynamic route where the whole URL is coming from your external source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This function gets called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Call an external API endpoint to get posts&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://.../posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the paths we want to pre-render based on posts&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// post.slug could be /blog/nature/hike1&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;

  &lt;span class="c1"&gt;// We'll pre-render only these paths at build time.&lt;/span&gt;
  &lt;span class="c1"&gt;// { fallback: false } means other routes should 404.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding this code, a page will be generated for every blog post we created in our external source at build time. So we'll have /blog/nature/hike1, /blog/nature/hike2, etc.. available to visit. &lt;br&gt;
With &lt;code&gt;fallback: false&lt;/code&gt; set in the returned object, we are telling Next.js to return a 404 for every page requested that was not generated at build time. &lt;/p&gt;

&lt;p&gt;When you add a new blog post after you've built your application, for example /blog/nature/beachtrip, and want this to be picked up by Next.js you should use &lt;code&gt;fallback: true&lt;/code&gt; or &lt;code&gt;fallback: 'blocking'&lt;/code&gt;, and Next.js fetch the URLs from your external source again, and will create the page for your visitor.&lt;/p&gt;

&lt;p&gt;Basically &lt;code&gt;fallback: true&lt;/code&gt; will be showing a loader or other placeholder component until the data is available. &lt;br&gt;
&lt;code&gt;fallback: 'blocking'&lt;/code&gt; will do server-side rendering of the page for the first request so it will show an empty page until the server rendered the page, and then serve the static prerendered version for the next requests.&lt;/p&gt;

&lt;p&gt;More info on the &lt;code&gt;fallback&lt;/code&gt; property can be found here: &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#the-fallback-key-required"&gt;https://nextjs.org/docs/basic-features/data-fetching#the-fallback-key-required&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getStaticPaths&lt;/code&gt; function should always be combined with the &lt;code&gt;getStaticProps&lt;/code&gt; function, because you'll want to be fetching the data for the specific item you want to render.&lt;/p&gt;

&lt;p&gt;So in the same file, we could now add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// params will contain the id you declared in your page's file name&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://.../posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// By returning { props: { post } }, the Blog component&lt;/span&gt;
  &lt;span class="c1"&gt;// will receive the specific `post` as a prop at build time&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;! When using the [...slug] dynamic route, the slug comes in as an array of string, one array element for each part of the URL, so /blog/nature/hike =&amp;gt; ['blog', 'nature', 'hike']. Minimum example below !&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// params will contain the slug you declared in your page's file name&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://.../posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#incremental-static-generation"&gt;
  &lt;/a&gt;
  Incremental static generation
&lt;/h2&gt;

&lt;p&gt;But what if the data you are using is dynamic too? &lt;br&gt;
Your blog post gets updated on your external data source, but at the moment our component will only be statically generated once at build time, and not regenerated when the blog data changes (for a new blog post, this will be picked up by Next.js as explained above).&lt;/p&gt;

&lt;p&gt;For this, Next.js added the &lt;code&gt;revalidate&lt;/code&gt; property, which can be added to the object your return in your &lt;code&gt;getStaticProps&lt;/code&gt; function. &lt;br&gt;
You pass a number into the value of this property corresponding to the minimum amount of seconds after which you want Next.js to regenerate the page. &lt;br&gt;
The page will only be regenerated when a request for this page comes in. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://.../posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you notice the external data you are relying on changes too frequently, and you have to regenerate you pages all the time, SSG/ISG could not be the right option. &lt;br&gt;
Next.js also support SSR for use cases like this: &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly, there is currently no option to tell Next.js to regenerate the page after a content change in your external data source with a build hook or something similar. &lt;br&gt;
There is a Github Discussion page which might be interesting to follow if you want to stay up-to-date on this topic: &lt;a href="https://github.com/vercel/next.js/discussions/11552"&gt;https://github.com/vercel/next.js/discussions/11552&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>jamstack</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Animation libraries for ReactJS ⚛️</title>
      <author>Anil Kaundal</author>
      <pubDate>Mon, 12 Apr 2021 14:47:33 +0000</pubDate>
      <link>https://dev.to/anilkaundal/animation-libraries-for-reactjs-12h6</link>
      <guid>https://dev.to/anilkaundal/animation-libraries-for-reactjs-12h6</guid>
      <description>&lt;p&gt;Make your websites and applications more interactive and aesthetically pleasing by using these ⬇️ ReactJS animation libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-reveal"&gt;
  &lt;/a&gt;
  React Reveal
&lt;/h2&gt;

&lt;p&gt;React Reveal is based on one of the popular CSS animation library &lt;code&gt;animation.css&lt;/code&gt;. It is primarily a reveal animation library i.e. it is used to show and/or hide DOM Elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reveal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#framer-motion"&gt;
  &lt;/a&gt;
  Framer Motion
&lt;/h2&gt;

&lt;p&gt;Framer Motion is a JavaScript library built by the &lt;code&gt;team at Framer&lt;/code&gt;. It's a relatively new library and is one of the easiest, feature-rich &amp;amp; production-ready, animation and gesture libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;framer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;motion&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-spring"&gt;
  &lt;/a&gt;
  React Spring
&lt;/h2&gt;

&lt;p&gt;React Spring is inspired by &lt;code&gt;react-motion&lt;/code&gt; and provides a very much similar approach to animation design. It attempts to improve&lt;br&gt;
&lt;code&gt;performance&lt;/code&gt; over react-motion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-anime"&gt;
  &lt;/a&gt;
  React Anime
&lt;/h2&gt;

&lt;p&gt;React Anime as the name suggests is a React Wrapper for one of the popular animation library &lt;code&gt;Anime.js&lt;/code&gt;. All Anime.js functionalities wrapped into their &lt;code&gt;declarative form&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bodymovin"&gt;
  &lt;/a&gt;
  Bodymovin
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Bodymovin&lt;/code&gt; and &lt;code&gt;Lottie&lt;/code&gt; allow you to run your &lt;code&gt;JSON-exported After Effects&lt;/code&gt; animations on the web, React Native, Android, iOS and macOS. The React Wrapper lets you use it with React.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bodymovin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this 🎉&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>animation</category>
      <category>libraries</category>
    </item>
    <item>
      <title>7 repositorios de desarrollo web que debes conocer</title>
      <author>dux</author>
      <pubDate>Mon, 12 Apr 2021 14:43:12 +0000</pubDate>
      <link>https://dev.to/duxtech/7-repositorios-de-desarrollo-web-que-debes-conocer-4g6l</link>
      <guid>https://dev.to/duxtech/7-repositorios-de-desarrollo-web-que-debes-conocer-4g6l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#%C3%ADndice"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Índice&lt;/strong&gt;
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#id1"&gt;ryanmcdermott/clean-code-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id2"&gt;codingknite/frontend-development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id3"&gt;goldbergyoni/nodebestpractices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id4"&gt;paolocarrasco/javascript-style-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id5"&gt;thedaviddias/Front-End-Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id6"&gt;gothinkster/realworld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id7"&gt;trekhleb/javascript-algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-ryanmcdermottcleancodejavascript"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;ryanmcdermott/clean-code-javascript&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Este repo enseña cómo aplicar buenas practicas al código que escribimos basado en el famoso libro de Robert C. Martin, Clean Code. Lo interesante es que no debes haber leído el libro, el repo resume los principales aspectos del mismo enfocado desde un punto de vista práctico. Algunos de los puntos que toca son: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como declarar variables con buenas practicas&lt;/li&gt;
&lt;li&gt;Funciones&lt;/li&gt;
&lt;li&gt;Objetos y estrucuras de datos en JavaScript&lt;/li&gt;
&lt;li&gt;Principios SOLID
Bastante recomendable.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ryanmcdermott"&gt;
        ryanmcdermott
      &lt;/a&gt; / &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;
        clean-code-javascript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🛁 Clean Code concepts adapted for JavaScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
clean-code-javascript&lt;/h1&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures"&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes"&gt;Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency"&gt;Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting"&gt;Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation"&gt;Translation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/af72fb10accee2e9a59efec2a0b436242fad5bb2a00ca11494e7c759834625cc/68747470733a2f2f7777772e6f736e6577732e636f6d2f696d616765732f636f6d6963732f7774666d2e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/af72fb10accee2e9a59efec2a0b436242fad5bb2a00ca11494e7c759834625cc/68747470733a2f2f7777772e6f736e6577732e636f6d2f696d616765732f636f6d6963732f7774666d2e6a7067" alt="Humorous image of software quality estimation as a count of how many expletives you shout when reading code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Software engineering principles, from Robert C. Martin's book
&lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" rel="nofollow"&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;
adapted for JavaScript. This is not a style guide. It's a guide to producing
&lt;a href="https://github.com/ryanmcdermott/3rs-of-software-architecture"&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt;
&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be
universally agreed upon. These are guidelines and nothing more, but they are
ones codified over many years of collective experience by the authors of
&lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are
still learning a lot. When software architecture is as old as architecture
itself, maybe then we will have harder rules to follow. For now, let these
guidelines serve as a touchstone by which to assess the quality of the
JavaScript…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-codingknitefrontenddevelopment"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/codingknite/frontend-development"&gt;codingknite/frontend-development&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Este repositorio está enfocado en compartir recursos de desarrollo web, (la mayoría en inglés) desde conceptos de HTML, CSS y JavaScript, hasta Git, React, Vue, optimización de código, etc., toda esta información compartida como libros, blogs, canales de youtube. Vale la pena darle un vistazo. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/codingknite"&gt;
        codingknite
      &lt;/a&gt; / &lt;a href="https://github.com/codingknite/frontend-development"&gt;
        frontend-development
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated list of resources for Frontend  development
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/codingknite/frontend-development/main//img/Banner.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrU9HV4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/codingknite/frontend-development/main/img/Banner.jpg" alt="Banner" title="Banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://twitter.com/codingknite" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5100ace4d0d744107ce7073c9948df4b174752e60281f6a9e97579ffaaba0e94/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f636f64696e676b6e6974652e7376673f7374796c653d666f722d7468652d6261646765" alt="Follow me"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a collection of resources for Frontend development.&lt;/p&gt;
&lt;p&gt;It will include a table of contents in order for you to navigate to the sections that matter the most to you.&lt;/p&gt;
&lt;p&gt;We have made an effort to include as many free resources as possible. However we also understand that there are quality resources out there that might cost you a penny but totally worth it
We will be sure to indicate the resources that are paid.&lt;/p&gt;
&lt;p&gt;If you're starting out with web development, you DON'T need to use every resource on this list. It is practically impossible to use all the resources listed in here
This is just a reference with most of the resources that can help you with frontend development. Use this as a reference. It is not a guide.&lt;/p&gt;
&lt;p&gt;Simply check out the resources and use the one that works best for you.&lt;/p&gt;
&lt;h2&gt;
Key&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Resources with…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/codingknite/frontend-development"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-goldbergyoninodebestpractices"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;goldbergyoni/nodebestpractices&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;¿Te gusta el backend con JS? ¡Este repositorio es para ti! Recopila buenas prácticas de desarrollo del lado del servidor con Node.js&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/goldbergyoni"&gt;
        goldbergyoni
      &lt;/a&gt; / &lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;
        nodebestpractices
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ✅  The Node.js best practices list (March 2021)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Node.js Best Practices&lt;/h1&gt;
&lt;h1&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/banner-2.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUydNxbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/banner-2.jpg" alt="Node.js Best Practices"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;br&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fa7136160f242623caf1bcabe1c8117674d8c126a1ca3ccefa8cc3a3d046e263/68747470733a2f2f696d672e736869656c64732e696f2f62616467652fe29a992532304974656d253230636f756e742532302d253230313032253230426573742532305072616374696365732d626c75652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/fa7136160f242623caf1bcabe1c8117674d8c126a1ca3ccefa8cc3a3d046e263/68747470733a2f2f696d672e736869656c64732e696f2f62616467652fe29a992532304974656d253230636f756e742532302d253230313032253230426573742532305072616374696365732d626c75652e737667" alt="102 items"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0fc7220c4d3fcaf77d03bbbefad17d5503972537553d35e2a020538323287a9f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2546302539462539332538352532304c6173742532307570646174652532302d2532304d617263682532303237253243253230323032312d677265656e2e737667"&gt;&lt;img id="user-content-last-update-badge" src="https://camo.githubusercontent.com/0fc7220c4d3fcaf77d03bbbefad17d5503972537553d35e2a020538323287a9f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2546302539462539332538352532304c6173742532307570646174652532302d2532304d617263682532303237253243253230323032312d677265656e2e737667" alt="Last update: March 27, 2021"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/23689c2d9ab1e0c4e069d3af07021920bb299162ffc1fc8a32821a46884cf023/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2025453225394325393425323055706461746564253230466f7225323056657273696f6e2532302d2532304e6f646525323031342e302e302d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/23689c2d9ab1e0c4e069d3af07021920bb299162ffc1fc8a32821a46884cf023/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2025453225394325393425323055706461746564253230466f7225323056657273696f6e2532302d2532304e6f646525323031342e302e302d627269676874677265656e2e737667" alt="Updated for Node 14.0.0"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nodepractices/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JApKtro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png" alt="nodepractices"&gt;&lt;/a&gt; &lt;strong&gt;Follow us on Twitter!&lt;/strong&gt; &lt;a href="https://twitter.com/nodepractices/" rel="nofollow"&gt;&lt;strong&gt;@nodepractices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Read in a different language: &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//README.chinese.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYtGRxnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png" alt="CN"&gt;&lt;strong&gt;CN&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//README.brazilian-portuguese.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AiXkBnMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png" alt="BR"&gt;&lt;strong&gt;BR&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//README.russian.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8-SbQcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png" alt="RU"&gt;&lt;strong&gt;RU&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//README.polish.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PB4t1sg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png" alt="PL"&gt;&lt;strong&gt;PL&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//README.japanese.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N26jGWUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png" alt="JA"&gt;&lt;strong&gt;JA&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//README.basque.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7UKCZ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png" alt="EU"&gt;&lt;strong&gt;EU&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translations"&gt;(&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xhr-ddOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png" alt="ES"&gt;&lt;strong&gt;ES&lt;/strong&gt;, &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XycuYyrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png" alt="FR"&gt;&lt;strong&gt;FR&lt;/strong&gt;, &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7-klpRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png" alt="HE"&gt;&lt;strong&gt;HE&lt;/strong&gt;, &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eb-IuTW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png" alt="KR"&gt;&lt;strong&gt;KR&lt;/strong&gt; and &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dhy8M72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png" alt="TR"&gt;&lt;strong&gt;TR&lt;/strong&gt; in progress! )&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h6&gt;
Built and maintained by our &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#steering-committee"&gt;Steering Committee&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#collaborators"&gt;Collaborators&lt;/a&gt;
&lt;/h6&gt;
&lt;h1&gt;
Latest Best Practices and News&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master//assets/flags/EU.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7UKCZ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png" alt="EU"&gt;&lt;/a&gt; Basque translation!:&lt;/strong&gt; wow even our Basque readers can read in their mother-tongue language! Courtesy of &lt;a href="https://github.com/anediaz"&gt;Ane Diaz de Tuesta&lt;/a&gt; and Joxefe Diaz de Tuesta, who did this all by theirselves&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;🇯🇵 Japanese translation:&lt;/strong&gt; Our guide is now also translated to Japanese! Courtesy of the amazing &lt;a href="https://github.com/YukiOta"&gt;YukiOta&lt;/a&gt; and &lt;a href="https://github.com/YA21"&gt;Yuta Azumi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;🎊 60,000 stars!&lt;/strong&gt;: Our repo was starred and trusted by 60,100 developers. We're speechless&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Welcome! 3 Things You Ought To Know First&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1. You are reading dozens of the best Node.js articles -&lt;/strong&gt; this repository is a summary and curation of the top-ranked content on Node.js best practices, as…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/goldbergyoni/nodebestpractices"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-paolocarrascojavascriptstyleguide"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/paolocarrasco/javascript-style-guide"&gt;paolocarrasco/javascript-style-guide&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Una guía completamente en &lt;strong&gt;ESPAÑOL&lt;/strong&gt; sobre javascript, bastante completa hace que el lector comprenda conceptos modernos del lenguaje y como codificar con legibilidad y consistencia.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/paolocarrasco"&gt;
        paolocarrasco
      &lt;/a&gt; / &lt;a href="https://github.com/paolocarrasco/javascript-style-guide"&gt;
        javascript-style-guide
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Guía de Estilo para programar con JavaScript, en español. Apoyo es bienvenido :)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Airbnb JavaScript Style Guide() {&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Un enfoque altamente razonable para JavaScript&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Esta guía asume que usas &lt;a href="https://babeljs.io" rel="nofollow"&gt;Babel&lt;/a&gt;, adicionalmente de tener instalado &lt;a href="https://npmjs.com/babel-preset-airbnb" rel="nofollow"&gt;babel-preset-airbnb&lt;/a&gt; o su equivalente. También asume que tienes instalado shims/pollyfills en tu aplicación, con
&lt;a href="https://npmjs.com/airbnb-browser-shims" rel="nofollow"&gt;airbnb-browser-shims&lt;/a&gt; o su equivalente.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/eslint-config-airbnb" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a933cce640ac4a82eadf6bba106e1523b12c8e1dd8e8dc4b8754d6b555c18615/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f65736c696e742d636f6e6669672d616972626e622e737667" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/eslint-config-airbnb-base" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eec211cbd52a6227ef09a18a19bdd49234ce48e395a383bfbfedeaf6c5052d33/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f65736c696e742d636f6e6669672d616972626e622d626173652e737667" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/airbnb/javascript?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Gitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Otras Guías de Estilos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/es5/"&gt;ES5&lt;/a&gt; (Obsoleto)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/agrcrobles/javascript/tree/master/react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript/tree/master/css-in-javascript/"&gt;CSS-in-JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ismamz/css"&gt;CSS &amp;amp; SASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Tabla de Contenido&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#tipos"&gt;Tipos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#referencias"&gt;Referencias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#objetos"&gt;Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#arreglos"&gt;Arreglos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#destructuring"&gt;Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#cadenas-de-texto"&gt;Cadenas de Texto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#funciones"&gt;Funciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#notaci%C3%B3n-de-funciones-de-flecha"&gt;Notación de Funciones de Flecha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#clases-y-constructores"&gt;Clases y Constructores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#m%C3%B3dulos"&gt;Módulos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#iteradores-y-generadores"&gt;Iteradores y Generadores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#propiedades"&gt;Propiedades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#hoisting"&gt;Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#expresiones-de-comparaci%C3%B3n-e-igualdad"&gt;Expresiones de comparación e igualdad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#bloques"&gt;Bloques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#comentarios"&gt;Comentarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#espacios-en-blanco"&gt;Espacios en blanco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#comas"&gt;Comas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#puntos-y-comas"&gt;Puntos y Comas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#casting-de-tipos-y-coerci%C3%B3n"&gt;Casting de Tipos y Coerción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#convenciones-de-nomenclatura"&gt;Convenciones de nomenclatura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#funciones-de-acceso"&gt;Funciones de Acceso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#eventos"&gt;Eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#jquery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#compatibilidad-con-ecmascript-5"&gt;Compatibilidad con EcmaScript 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#estilos-de-ecmascript6-es-2015"&gt;Estilos de EcmaScript6+ (ES2015+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#pruebas"&gt;Pruebas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#desempe%C3%B1o"&gt;Desempeño&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#recursos"&gt;Recursos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#en-la-cancha"&gt;En la cancha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#traducciones"&gt;Traducciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#la-gu%C3%ADa-de-la-gu%C3%ADa-de-estilos-de-javascript"&gt;La guía de la Guía de Estilos JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#charla-con-nosotros-sobre-javascript"&gt;Charla con nosotros sobre Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#colaboradores"&gt;Colaboradores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paolocarrasco/javascript-style-guide/master/#licencia"&gt;Licencia&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
Tipos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Primitivos&lt;/strong&gt;: Cuando accedes a un tipo primitivo, manejas directamente su…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/paolocarrasco/javascript-style-guide"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-thedaviddiasfrontendchecklist"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;thedaviddias/Front-End-Checklist&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Herramientas para comprobar aspectos importantes de una web terminada. Antes de lanzar tu app web a producción es importante verificar por ejemplo si la semántica HTML está bien escrita, verificar si las fuentes usadas siempre están o estarán disponibles, performance, accesibilidad web, SEO, etc, etc, etc. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thedaviddias"&gt;
        thedaviddias
      &lt;/a&gt; / &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;
        Front-End-Checklist
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🗂 The perfect Front-End Checklist for modern websites and meticulous developers
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/data/images/logo-front-end-checklist.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pRijHDR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/data/images/logo-front-end-checklist.jpg" alt="Front-End Checklist" width="130"&gt;&lt;/a&gt;
  &lt;br&gt;
    &lt;br&gt;
  Front-End Checklist
  &lt;br&gt;
&lt;/h1&gt;
&lt;h4&gt;
The Front-End Checklist is an exhaustive list of all elements you need to have / to test before launching your website / HTML page to production.&lt;/h4&gt;
&lt;p&gt;
  &lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;
  &lt;/a&gt;
    &lt;a href="https://github.com/thedaviddias/Front-End-Checklist/graphs/contributors"&gt;
    &lt;img src="https://camo.githubusercontent.com/4aa098f8dd3ba3a7ef5d3cdf8a446144cc7c939e50ded629055e56c8a33deba1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f7468656461766964646961732f46726f6e742d456e642d436865636b6c6973742e7376673f7374796c653d666c61742d737175617265" alt="Contributors"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/thedaviddias/Front-End-Checklist/"&gt;
    &lt;img src="https://camo.githubusercontent.com/8072e14bbbee2ad3fa40a5b99d029bb33942dc45f2e596225ffee15f48100131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f46726f6e74e28091456e645f436865636b6c6973742d666f6c6c6f7765642d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Front‑End_Checklist followed"&gt;
  &lt;/a&gt;
    &lt;a href="https://creativecommons.org/publicdomain/zero/1.0/" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/7de1b7fd70687fa6d07e273737f0465ef27971f193842c2d2c4a4ac01b3946bf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4343302d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="CC0"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#how-to-use"&gt;How To Use&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#contributing"&gt;Contributing&lt;/a&gt; • &lt;a href="https://frontendchecklist.io" rel="nofollow"&gt;Website&lt;/a&gt; • &lt;a href="https://www.producthunt.com/posts/front-end-checklist" rel="nofollow"&gt;Product Hunt&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;span&gt;Other Checklists:&lt;/span&gt;
    &lt;br&gt;
  &lt;a href="https://github.com/thedaviddias/Front-End-Performance-Checklist#---------front-end-performance-checklist-"&gt;🎮 Front-End Performance Checklist&lt;/a&gt; • &lt;a href="https://github.com/thedaviddias/Front-End-Design-Checklist#front-end-design-checklist"&gt;💎 Front-End Design Checklist&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;It is based on Front-End developers' years of experience, with the additions coming from some other open-source checklists.&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#head"&gt;Head&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#html"&gt;HTML&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#webfonts"&gt;Webfonts&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#css"&gt;CSS&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#images"&gt;Images&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#javascript"&gt;JavaScript&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#security"&gt;Security&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#performance-1"&gt;Performance&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#accessibility"&gt;Accessibility&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#seo"&gt;SEO&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/#translations"&gt;Translations&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
How to use?&lt;/h2&gt;
&lt;p&gt;All items in the &lt;strong&gt;Front-End Checklist&lt;/strong&gt; are required for the majority of the projects, but some elements can be omitted or are not essential (in the case of an administration web app, you may not need RSS feed for example). We choose to use 3 levels of flexibility:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/data/images/priority/low.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BEBePSfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/data/images/priority/low.svg" alt="Low"&gt;&lt;/a&gt; means that the item is &lt;strong&gt;recommended&lt;/strong&gt; but can be omitted in some particular situations.&lt;/li&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/data/images/priority/medium.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ItaM8bqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thedaviddias/Front-End-Checklist/master/data/images/priority/medium.svg" alt="Medium"&gt;&lt;/a&gt; means that the item…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/thedaviddias/Front-End-Checklist"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#6-gothinksterrealworld"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/gothinkster/realworld"&gt;gothinkster/realworld&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Repositorio que proporciona código de aplicaciones web desarrolladas en varias tecnologías diferentes, como React, Angular, Vue, Svelte, etc.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gothinkster"&gt;
        gothinkster
      &lt;/a&gt; / &lt;a href="https://github.com/gothinkster/realworld"&gt;
        realworld
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      "The mother of all demo apps" — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more 🏅
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/gothinkster/realworld/master/media/realworld.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SuBQplt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gothinkster/realworld/master/media/realworld.png" alt="RealWorld Example Applications"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h3&gt;
Stay on the bleeding edge — &lt;a href="https://gitter.im/realworld-dev/main" rel="nofollow"&gt;join our Gitter room!&lt;/a&gt; 🎉
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/gothinkster/realworld" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d169483c2a36d81aa61b58dbf96156011917ccefef7efb49747a74fa50f05763/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f676f7468696e6b737465722f7265616c776f726c642e737667" alt="Travis"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/realworld-dev/main" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/482556bec6b95fe2ea82507cd9b82a54417c4304e078c1045a0eabd7f8cc6f03/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f7265616c776f726c642d6465762f6d61696e2e737667" alt="Gitter"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/gothinkster" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f51d3c318fc1b6df37930806077c4ba6826950f9b61a853be529eb571caeb566/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f676f7468696e6b737465722e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/gothinkster/realworld/master/media/stacks_hr.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2A51EQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/gothinkster/realworld/master/media/stacks_hr.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://demo.realworld.io/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-_jC50r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gothinkster/realworld/master/media/conduit_l.png" width="250px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
See how &lt;em&gt;the exact same&lt;/em&gt; Medium.com clone (called &lt;a href="https://demo.realworld.io" rel="nofollow"&gt;Conduit&lt;/a&gt;) is built using any of our supported &lt;a href="https://raw.githubusercontent.com/gothinkster/realworld/master/#frontends"&gt;frontends&lt;/a&gt; and  &lt;a href="https://raw.githubusercontent.com/gothinkster/realworld/master/#backends"&gt;backends&lt;/a&gt;. Yes, you can mix and match them, because &lt;strong&gt;they all adhere to the same &lt;a href="https://raw.githubusercontent.com/gothinkster/realworld/master/spec/"&gt;API spec&lt;/a&gt;&lt;/strong&gt; 😮😎
&lt;/h3&gt;

&lt;p&gt;While most "todo" demos provide an excellent cursory glance at a framework's capabilities, they typically don't convey the knowledge &amp;amp; perspective required to actually build &lt;em&gt;real&lt;/em&gt; applications with it.&lt;/p&gt;

&lt;p&gt;RealWorld solves this by allowing you to choose any frontend (React, Angular 2, &amp;amp; more) and any backend (Node, Django, &amp;amp; more) and see how they power a real world, beautifully designed fullstack app called "&lt;a href="https://demo.realworld.io" rel="nofollow"&gt;Conduit&lt;/a&gt;".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read the &lt;a href="https://medium.com/@ericsimons/introducing-realworld-6016654d36b5" rel="nofollow"&gt;full blog post announcing RealWorld on Medium.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
See an updated list of RealWorld implementations on the &lt;a href="https://codebase.show/projects/realworld" rel="nofollow"&gt;CodebaseShow website&lt;/a&gt;.&lt;/h3&gt;

&lt;h1&gt;
Frontends&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Sorted by popularity on Thu Mar 11 2021&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;br&gt;
&lt;thead&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;th&gt;🥇&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;🥈&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;🥉&lt;/th&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/thead&gt;
&lt;br&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gothinkster/realworld"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#7trekhlebjavascriptalgorithms"&gt;
  &lt;/a&gt;
  7.&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;trekhleb/javascript_algorithms&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Los arreglos y objetos son ampliamente usados en JS, pero hay estructuras de datos mucho más complejas y que resuelven problemas específicos y que se deben conocer. Este repositorio resume algoritmos y estructuras de datos populares.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trekhleb"&gt;
        trekhleb
      &lt;/a&gt; / &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;
        javascript-algorithms
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
JavaScript Algorithms and Data Structures&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPiprYPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg" alt="CI"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/trekhleb/javascript-algorithms" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ff751911f19ea8aefdbd2b20184c1ab5fba47caf8b31a02fb18f8d7df6e43ba/68747470733a2f2f636f6465636f762e696f2f67682f7472656b686c65622f6a6176617363726970742d616c676f726974686d732f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This repository contains JavaScript based examples of many
popular algorithms and data structures.&lt;/p&gt;
&lt;p&gt;Each algorithm and data structure has its own separate README
with related explanations and links for further reading (including ones
to YouTube videos).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt;
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md"&gt;&lt;em&gt;简体中文&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md"&gt;&lt;em&gt;繁體中文&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md"&gt;&lt;em&gt;한국어&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md"&gt;&lt;em&gt;日本語&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md"&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md"&gt;&lt;em&gt;Français&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md"&gt;&lt;em&gt;Español&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md"&gt;&lt;em&gt;Português&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md"&gt;&lt;em&gt;Русский&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md"&gt;&lt;em&gt;Türk&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md"&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md"&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md"&gt;&lt;em&gt;Українська&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md"&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;☝ Note that this project is meant to be used for learning and researching purposes
only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Data Structures&lt;/h2&gt;
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can
be accessed and modified efficiently. More precisely, a data structure is a collection of data
values, the relationships among them, and the functions or operations that can be applied…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trekhleb/javascript-algorithms"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Referencias&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;El presente artículo no hubiera sido posible sin el post en instagram de &lt;a class="comment-mentioned-user" href="https://dev.to/vikingcodeblog"&gt;@vikingcodeblog&lt;/a&gt;
, créditos correspondientes a el.&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CNYKXKzA2_x/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;
   

&lt;p&gt;Acá te dejo su post original en instagram, siguelo, hace muy buen contenido para devs. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/eY1JD4KPG4HMk/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eY1JD4KPG4HMk/giphy.gif" alt="end"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>spanish</category>
    </item>
    <item>
      <title>How I migrated my development environment to a Raspberry Pi</title>
      <author>Mike Eason</author>
      <pubDate>Mon, 12 Apr 2021 14:39:19 +0000</pubDate>
      <link>https://dev.to/mikeeason/how-i-migrated-my-development-environment-to-a-raspberry-pi-1olg</link>
      <guid>https://dev.to/mikeeason/how-i-migrated-my-development-environment-to-a-raspberry-pi-1olg</guid>
      <description>&lt;p&gt;In my spare time I develop an open source strategy game called &lt;strong&gt;Solaris&lt;/strong&gt;, &lt;a href="https://solaris.games"&gt;check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the problems with software development is that you need to set up a development environment on every device that you code on, also there can be differences between dev and production which often lead to unforeseen issues.&lt;/p&gt;

&lt;p&gt;An ideal solution would be to be able to develop on &lt;em&gt;any&lt;/em&gt; device without having to go through a long setup process other than installing VS Code (even this is optional as you will see later) on my development machine and have all of the code and apps hosted on a &lt;strong&gt;remote server&lt;/strong&gt;. In this case, a Raspberry Pi.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introducing-the-raspberry-pi"&gt;
  &lt;/a&gt;
  Introducing the Raspberry Pi
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; is an awesome little device capable of a lot of different tasks, like most tinkerers I have a few lying around doing nothing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://solaris.games"&gt;Solaris&lt;/a&gt; runs on Ubuntu Server, the Pi is the perfect candidate to mimic production as it can run the same software in an almost identical environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h3&gt;

&lt;p&gt;The end result of this exercise will be set up the development environment to be &lt;strong&gt;as close as possible&lt;/strong&gt; to what runs in production:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install everything required to run Solaris.&lt;/li&gt;
&lt;li&gt;Run the client and server applications in dev mode.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;Visual Studio Code&lt;/strong&gt; with &lt;code&gt;ssh&lt;/code&gt; to edit files and debug the applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pi-installation-and-setup"&gt;
  &lt;/a&gt;
  Pi Installation and Setup
&lt;/h4&gt;

&lt;p&gt;The setup for Ubuntu running on the Pi is super simple. Using the &lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/"&gt;Pi imager software&lt;/a&gt;, I just chose &lt;strong&gt;Ubuntu Server&lt;/strong&gt; and using the &lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-imager-update-to-v1-6/"&gt;advanced options&lt;/a&gt;, set up the hostname, WiFi and SSH there and then. There was no need to even plug in a keyboard and monitor once this installation was complete, just insert the SD card, power the Pi and SSH in from another machine for the rest of the setup process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-node-and-mongodb"&gt;
  &lt;/a&gt;
  Setting Up Node and MongoDB
&lt;/h4&gt;

&lt;p&gt;Solaris requires &lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;MongoDB&lt;/strong&gt; to run, it was straightforward to get these running as they are very well supported and documented.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/"&gt;MongoDB installation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall"&gt;Node.js installation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next step was to &lt;code&gt;git clone&lt;/code&gt; the repository down and walk through the steps in the &lt;a href="https://github.com/mike-eason/solaris#readme"&gt;README&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/mike-eason/solaris.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-apps-and-services"&gt;
  &lt;/a&gt;
  Setting Up Apps and Services
&lt;/h4&gt;

&lt;p&gt;The Node applications will be managed on the server by &lt;a href="https://pm2.keymetrics.io/"&gt;PM2&lt;/a&gt;. After installing &lt;code&gt;pm2&lt;/code&gt; the setup is easy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API - &lt;code&gt;pm2 start ~/solaris/server/api/index.js --name solaris-api --watch&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Server jobs - &lt;code&gt;pm2 start ~/solaris/server/jobs/index.js --name solaris-jobs --watch&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Vue.js client - &lt;code&gt;pm2 start ~/solaris/client/node_modules/@vue/cli-service/bin/vue-cli-service.js --name solaris-client --node-args="serve"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0O5p-fGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05rvi2v5o7ui4yi4ddbf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0O5p-fGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05rvi2v5o7ui4yi4ddbf.PNG" alt="pm2 status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above is where the magic happens. &lt;code&gt;pm2&lt;/code&gt; will manage the 3 processes, automatically watch for changes and restart the apps when necessary. The app is now accessible via the local IP address &lt;code&gt;192.168.1.xxx:8080&lt;/code&gt;, amazing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0GkJBzYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlkor9qzlm6l6nlt5kfe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GkJBzYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlkor9qzlm6l6nlt5kfe.PNG" alt="Solaris running on the Pi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-visual-studio-code"&gt;
  &lt;/a&gt;
  Setting Up Visual Studio Code
&lt;/h4&gt;

&lt;p&gt;Now the apps are running and watching for changes, I needed a way to actually edit files. I chose to use VS Code for this as it has an awesome &lt;a href="https://code.visualstudio.com/docs/remote/ssh#:~:text=The%20Visual%20Studio%20Code%20Remote,anywhere%20on%20the%20remote%20filesystem."&gt;extension&lt;/a&gt; for &lt;strong&gt;remote development&lt;/strong&gt; via &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h4&gt;

&lt;p&gt;The only caveat with debugging is that it is &lt;em&gt;slightly&lt;/em&gt; inconvenient to stop the &lt;code&gt;pm2&lt;/code&gt; process and then launch a VS Code debugging session.&lt;/p&gt;

&lt;p&gt;The best way to get around this is to enable the &lt;code&gt;--inspect&lt;/code&gt; flag when launching the &lt;code&gt;pm2&lt;/code&gt; process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 start solaris-jobs --node-args="--inspect=9230" --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then using a VS Code configuration to attach to the process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "type": "node",
    "request": "attach",
    "name": "Attach to Jobs",
    "port": 9230
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info on the &lt;code&gt;--inspect&lt;/code&gt; flag, see &lt;a href="https://nodejs.org/en/docs/guides/debugging-getting-started/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;With all of that setup I can now simply open VS Code on my development machine and get straight into coding without really having to think about getting set up first. The environment is remote so any changes are &lt;strong&gt;persistent&lt;/strong&gt;, I can code on my desktop and then switch over to my laptop and continue what I was working on.&lt;/p&gt;

&lt;p&gt;I could take this a step further and use something like &lt;a href="https://github.com/cdr/code-server"&gt;code-server&lt;/a&gt; which will actually host VS Code itself on the Pi. Then all I need is a device with a browser and I'm good to go. Finally, I'll be able to code on my Samsung Smart Fridge!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let me know what you think in the comments or if you have any suggestions. Thanks for reading.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>raspberrypi</category>
      <category>node</category>
      <category>ubuntu</category>
    </item>
  </channel>
</rss>
