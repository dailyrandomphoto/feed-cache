<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How many domains have you let expire?</title>
      <author>Madza</author>
      <pubDate>Thu, 29 Apr 2021 09:28:57 +0000</pubDate>
      <link>https://dev.to/madza/how-many-domains-have-you-let-expire-525f</link>
      <guid>https://dev.to/madza/how-many-domains-have-you-let-expire-525f</guid>
      <description>&lt;p&gt;Unsuccessful project ideas, thoughtless domain structure, or domains purposely bought for temporary projects/testing might all be reasons to let the domain names expire.&lt;/p&gt;

&lt;p&gt;How many have you let expire and what were the reasons behind it?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>domain</category>
    </item>
    <item>
      <title>Solution: Find First and Last Position of Element in Sorted Array</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 29 Apr 2021 09:23:56 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-find-first-and-last-position-of-element-in-sorted-array-2fg0</link>
      <guid>https://dev.to/seanpgallivan/solution-find-first-and-last-position-of-element-in-sorted-array-2fg0</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href=""&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-34-medium-find-first-and-last-position-of-element-in-sorted-array"&gt;
  &lt;/a&gt;
  &lt;a href=""&gt;Leetcode Problem #34 (&lt;em&gt;Medium&lt;/em&gt;): Find First and Last Position of Element in Sorted Array&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; sorted in ascending order, find the starting and ending position of a given &lt;code&gt;target&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;target&lt;/code&gt; is not found in the array, return &lt;code&gt;[-1, -1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow up&lt;/strong&gt;: Could you write an algorithm with &lt;code&gt;O(log n)&lt;/code&gt; runtime complexity?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [5,7,7,8,8,10], target = 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[3,4]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [5,7,7,8,8,10], target = 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[-1,-1]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [], target = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[-1,-1]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums.length &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^9 &amp;lt;= nums[i] &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nums&lt;/code&gt; is a non-decreasing array.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^9 &amp;lt;= target &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem is very nearly the definition of a &lt;strong&gt;binary search&lt;/strong&gt;. A binary search allows us to find the insertion index for a target number in a sorted array. It's called a "binary" search because in each step it halves the input array and determines in which half the number belongs. Since a binary search is able to eliminate half the remaining array in each iteration, it can accomplish its objective with a &lt;strong&gt;time complexity&lt;/strong&gt; of &lt;strong&gt;O(log N)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this case, however, we don't just want to find out where the target number (&lt;strong&gt;T&lt;/strong&gt;) would be placed in the nums array (&lt;strong&gt;N&lt;/strong&gt;), we want to additionally find out if &lt;strong&gt;T&lt;/strong&gt; &lt;em&gt;actually&lt;/em&gt; exists in &lt;strong&gt;N&lt;/strong&gt;, as well as the starting and end indexes.&lt;/p&gt;

&lt;p&gt;The standard implementation of a binary search will find the left-most index in which &lt;strong&gt;T&lt;/strong&gt; could be placed, though many languages have functions for both sides. Rather than having to define two sets of functions here, however, we can, with a little creativity, use a single function to find our answer.&lt;/p&gt;

&lt;p&gt;First, we can perform the standard left binary search (&lt;strong&gt;find&lt;/strong&gt;) on &lt;strong&gt;T&lt;/strong&gt;. Next, we can easily check to see if &lt;strong&gt;T&lt;/strong&gt; exists in &lt;strong&gt;N&lt;/strong&gt; already by checking the value stored at the result of that first search (&lt;strong&gt;N[Tleft]&lt;/strong&gt;). If we don't find &lt;strong&gt;T&lt;/strong&gt; at that index, then &lt;strong&gt;T&lt;/strong&gt; does not exist in &lt;strong&gt;N&lt;/strong&gt; and we should &lt;strong&gt;return [-1, -1]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, we still need to find the right end of the range of &lt;strong&gt;T&lt;/strong&gt; values in &lt;strong&gt;N&lt;/strong&gt;. To do this, we can just use &lt;strong&gt;find&lt;/strong&gt; again, this time with the next integer (&lt;strong&gt;T + 1&lt;/strong&gt;). Since this will find the index &lt;em&gt;after&lt;/em&gt; the end of the range of &lt;strong&gt;T&lt;/strong&gt; values, we can just move back one position to find the end of the &lt;strong&gt;T&lt;/strong&gt; range.&lt;/p&gt;

&lt;p&gt;Now that we have our range, we can &lt;strong&gt;return&lt;/strong&gt; it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(log N)&lt;/strong&gt; for the binary search&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Python has built-in binary search functions for both sides: &lt;strong&gt;bisect_left()&lt;/strong&gt; and &lt;strong&gt;bisect_right()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The built-in function for Java, &lt;strong&gt;Arrays.binarySearch()&lt;/strong&gt; does not find the left-most insertion point, so it's easier to define our own binary search function.&lt;/p&gt;

&lt;p&gt;C++ can use the built-in function &lt;strong&gt;equal_range()&lt;/strong&gt;, which returns iterator pointers to the range of T values.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;searchRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-bisectleft-amp-bisectright"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ bisect_left() &amp;amp; bisect_right():&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;searchRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bisect_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bisect_right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-custom-binary-search"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Custom Binary Search:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;searchRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
        &lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;searchRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nc"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Tleft&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Tleft&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Tleft&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-equalrange"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ equal_range():&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;searchRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;equal_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-custom-binary-search"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Custom Binary Search:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;searchRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tleft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>How to get a free domain name for your Laravel project?</title>
      <author>Bobby Iliev</author>
      <pubDate>Thu, 29 Apr 2021 09:15:04 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-get-a-free-domain-name-for-your-laravel-project-2984</link>
      <guid>https://dev.to/bobbyiliev/how-to-get-a-free-domain-name-for-your-laravel-project-2984</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;There could be various reasons why you would need a free domain name for your project.&lt;/p&gt;

&lt;p&gt;For example, having multiple side projects could be quite costly in case that your projects are not generating any income. So saving costs could be crucial.&lt;/p&gt;

&lt;p&gt;Another reason why you might need a free domina name is that you might want to do some just testing and not really need an actual domain which could cost you anywhere from $5 to +$50 dollars depending on the provider and the domain extension.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will show you &lt;strong&gt;how to get a free domain name&lt;/strong&gt; from &lt;a href="https://freenom.com/"&gt;Freenom&lt;/a&gt; and use it with your Laravel Project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Before you get started you would need to have a Laravel project already installed. &lt;/p&gt;

&lt;p&gt;To make things even better you can use the following referral link to get free $100 credit that you could use to deploy your servers and test the guide yourself:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://m.do.co/c/2a9bba940f39"&gt;DigitalOcean $100 Free Credit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then once you have your account ready, you can follow the steps on &lt;a href="https://devdojo.com/bobbyiliev/how-to-install-laravel-on-digitalocean-with-1-click"&gt;How to Install Laravel on DigitalOcean with 1-Click here&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#choosing-a-free-domain-name"&gt;
  &lt;/a&gt;
  Choosing a free domain name
&lt;/h1&gt;

&lt;p&gt;In this tutorial, we will use &lt;a href="https://freenom.com/"&gt;Freenom&lt;/a&gt; to register a free domain name! As far as I am aware, Freenom is the world's only free domain name provider.&lt;/p&gt;

&lt;p&gt;They provide free domain names with the following domain extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.TK &lt;/li&gt;
&lt;li&gt;.ML &lt;/li&gt;
&lt;li&gt;.GA &lt;/li&gt;
&lt;li&gt;.CF &lt;/li&gt;
&lt;li&gt;.GQ
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, Freenom does not offer free &lt;code&gt;.com&lt;/code&gt; domains but for testing purposes, only the above domain extensions are a great alternative!&lt;/p&gt;

&lt;p&gt;To check if a specific domain is available, just visit the &lt;a href="https://freenom.com/"&gt;Freenom&lt;/a&gt; website, you would get to a page where you can search and check if a specific domain is available:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_1-SdXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_1-SdXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-01.png" alt="Free domain name for Laravel Project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case I will look for &lt;code&gt;bobbyiliev&lt;/code&gt; and then choose the available extension:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NfNx-saz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NfNx-saz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-02.png" alt="Freenom free domain name for your website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, &lt;code&gt;bobbyiliev.ml&lt;/code&gt; is available so I will go for that one by clicking on the &lt;code&gt;Get it now!&lt;/code&gt; button, and then click on &lt;code&gt;Checkout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You would get to a page where you could choose for how long would you like to keep the domain name for:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZY9cvQb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZY9cvQb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-03.png" alt="Free domain name for 12 months"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose the period from the dropdown menu and then hit next. After that follow the steps and sign up for a free account.&lt;/p&gt;

&lt;p&gt;Once you are ready with the registration process, then go ahead and proceed to the next step where you will need to add your new free domain name to your DigitalOcean account.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-your-domain-to-digitalocean"&gt;
  &lt;/a&gt;
  Adding your Domain to DigitalOcean
&lt;/h1&gt;

&lt;p&gt;If you don't have a DigitalOcean account already make sure to create one via this link here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://m.do.co/c/2a9bba940f39"&gt;Sign up for DigitalOcean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've created a DigitalOcean account follow these steps here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First go to your &lt;a href="https://cloud.digitalocean.com/"&gt;DigitalOcean Control Panel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Then click on Networking on the left&lt;/li&gt;
&lt;li&gt;After that click on Domains&lt;/li&gt;
&lt;li&gt;And there add your new domain name button and then add the domain name that you just registered:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xxFRdo4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xxFRdo4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-04.png" alt="Add domain name to DigitalOcean"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you would see your new DNS zone where you would need to add an A record for your domain name and point it your Laravel server! For more information on &lt;a href="https://www.digitalocean.com/docs/networking/dns/"&gt;how to manage your DNS make sure to read this guide&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#updating-your-nameservers"&gt;
  &lt;/a&gt;
  Updating your Nameservers
&lt;/h1&gt;

&lt;p&gt;Once you have your Domain name all configured and ready to go in DigitalOcean, then you need to update your Nameservers, so that your domain would start using your new DigitalOcean DNS zone.&lt;/p&gt;

&lt;p&gt;To do so just copy the following 3 nameservers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ns1.digitalocean.com&lt;/li&gt;
&lt;li&gt;ns2.digitalocean.com&lt;/li&gt;
&lt;li&gt;ns3.digitalocean.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then go back to your Freenom account, there follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the menu click on Services&lt;/li&gt;
&lt;li&gt;Then click on My Domains&lt;/li&gt;
&lt;li&gt;After that click on Manage Domain for your new domain&lt;/li&gt;
&lt;li&gt;Then from the "Management Tools" dropdown click on "Nameservers"&lt;/li&gt;
&lt;li&gt;There choose "Use custom nameservers (enter below)" and enter the 3 DigitalOcean nameservers from above and click "Save"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ap6wtku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ap6wtku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2020/free-domain-laravel-project-05.png" alt="Change nameservers in freenom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, it could take up to 24 hours for the DNS to propagate over the Globe and after that, you will be able to see your Laravel application when visiting your free domain name in your browser!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Now you know how to get a free domain name for your Laravel Project and add it to DigitalOcean or your web hosting provider where you could manage your DNS zone and point it to your Laravel server.&lt;/p&gt;

&lt;p&gt;Hope that this helps!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Sharpen your Ruby: Iterators</title>
      <author>Eric Chapman</author>
      <pubDate>Thu, 29 Apr 2021 09:14:11 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-iterators-3jio</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-iterators-3jio</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Classic Loop&lt;/h2&gt;

&lt;p&gt;In Ruby like any other programming language we can iterate a number of fix or variable times. Here are a classic infinite loop that will execute until the program crash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;While loop&lt;/h2&gt;

&lt;p&gt;It is possible loop while a condition is meet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Will print numbers from 0 to 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop until&lt;/h2&gt;

&lt;p&gt;It is possible loop until a condition is meet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Will print numbers from 0 to 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop x number of times&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# print numbers from 1 to 19&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or also&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop through each element&lt;/h2&gt;

&lt;p&gt;By far, the most use loop is the 'each' iteration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Array of names&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Iterate the names list&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# or shorthand version&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Break and Continue&lt;/h2&gt;

&lt;p&gt;It is possible to stop the loop before the end. It is also possible to skip one iteration and go to the next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Peter &lt;/span&gt;
&lt;span class="c1"&gt;# John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The iteration will skip the puts statement if the name is equal to Mike&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
  &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Peter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The iteration will stop if the name is equal to Mike. &lt;/p&gt;

&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a loop with 10 iterations (from number 1 to 10)&lt;/li&gt;
&lt;li&gt;Each iteration will print only if the iteration number is even. Odd number will be skip.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Number &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Wordlist and Password Generator</title>
      <author>kalilinux</author>
      <pubDate>Thu, 29 Apr 2021 09:12:26 +0000</pubDate>
      <link>https://dev.to/kalilinux/wordlist-and-password-generator-3gc3</link>
      <guid>https://dev.to/kalilinux/wordlist-and-password-generator-3gc3</guid>
      <description>&lt;p&gt;Easily create permutations and combinations of words with predefined sets of extensions, words and patterns/function to create complex endpoints, wordlists and passwords. Easy UX, Checkout Usage&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/cook-wordlist-and-password-generator"&gt;Cook – Wordlist and Password Generator&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>password</category>
    </item>
    <item>
      <title>Design Systems — Designing Component APIs</title>
      <author>Eduardo Ferreira</author>
      <pubDate>Thu, 29 Apr 2021 08:35:32 +0000</pubDate>
      <link>https://dev.to/eduferfer/design-systems-designing-component-apis-2h94</link>
      <guid>https://dev.to/eduferfer/design-systems-designing-component-apis-2h94</guid>
      <description>&lt;p&gt;Not so long ago, user interfaces for the web were built mostly using standard HTML and CSS. The rise of frameworks such as React, Vue, Angular and Polymer made it possible to &lt;strong&gt;wrap and re-use UI components&lt;/strong&gt; across parts of the same application or even different products.&lt;/p&gt;

&lt;p&gt;Components found their perfect match with &lt;strong&gt;Design Systems&lt;/strong&gt;, and allowed them to evolve from style guides or reference style sheets to full-blown libraries with modular assets containing &lt;strong&gt;Application Programming Interfaces (APIs)&lt;/strong&gt; for setting a component’s appearance, content and behaviour.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-components-vs-cssonly"&gt;
  &lt;/a&gt;
  1. Components vs. CSS-Only
&lt;/h2&gt;

&lt;p&gt;Design systems can be implemented as component libraries or CSS-only stylesheets. While both have their pros and cons, in this post I will focus on the component-based approach.&lt;/p&gt;

&lt;p&gt;Among the many advantages of using components over CSS-only libraries, these are the ones I consider the most valuable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design can be kept consistent&lt;/strong&gt; by only exposing the parts which are supposed to be customised.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Product code becomes easier to read and maintain&lt;/strong&gt; through the encapsulation of logic, styles and markup inside components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Conflicting class names and other definitions can be avoided&lt;/strong&gt; since they are isolated inside the component’s scope.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, let us take a look at Material Design’s button implemented both ways. If only label, icon and type are customisable, a component approach only exposes the necessary APIs while a CSS-only approach exposes all the complexity:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZhK6eD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AwhbXv83ob-aapk0xKjrKww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZhK6eD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AwhbXv83ob-aapk0xKjrKww.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#2-why-should-designers-care"&gt;
  &lt;/a&gt;
  2. Why should designers care?
&lt;/h2&gt;

&lt;p&gt;Since APIs are not visible to the final users, it may not be clear why UX designers should be involved in designing them.&lt;/p&gt;

&lt;p&gt;Components are first assembled by product teams before reaching the final users, and the API is the main interface between a component and product designers or developers consuming it. From this perspective, developers and designers are the first users of a Design System and their experience should be considered as well.&lt;/p&gt;

&lt;p&gt;A well designed API will increase the developer’s experience, reducing the risk that they will implement their own solutions and therefore increasing productivity and enhancing the consistency of the final product.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-factors-to-consider"&gt;
  &lt;/a&gt;
  3. Factors to consider
&lt;/h2&gt;

&lt;p&gt;When designing a component and its corresponding API, some key factors should be considered to ensure they are easy to consume, consistent with the rest of the system, and easy to scale and maintain in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-which-variations-should-be-offered"&gt;
  &lt;/a&gt;
  &lt;strong&gt;a) Which variations should be offered?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;With an overview of all possible use cases, designers can help define which parts of a component should be customisable through the use of **properties **and which should be kept stable, avoiding unwanted variations and therefore enhancing design consistency.&lt;/p&gt;

&lt;p&gt;On the image below, label and icon are customisable, while icon-color and removable are not designed to be changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mHviaCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A9qC-utGyDsLrgWJdLN7CgQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mHviaCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A9qC-utGyDsLrgWJdLN7CgQ.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;—&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-which-styles-should-be-customisable"&gt;
  &lt;/a&gt;
  b) Which styles should be customisable?
&lt;/h3&gt;

&lt;p&gt;Since consumers do not have access to the encapsulated content, customising styles can only be done through APIs.&lt;/p&gt;

&lt;p&gt;CSS variables can be used for changing single css values (e.g. --border-radius). In case multiple styles should be changed together for a given variation (e.g. alert type changing icon color and font size) a property could be used instead.&lt;/p&gt;

&lt;p&gt;Variables can be defined as a global theme (e.g. --accent-color) and modified for a single component, or new variables can be defined only for a given component (e.g. --footer-padding)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7DPVv9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2DOOveDOZAcgEzmR1f_4lA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7DPVv9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2DOOveDOZAcgEzmR1f_4lA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;—&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-how-will-the-component-evolve-in-the-future"&gt;
  &lt;/a&gt;
  c) How will the component evolve in the future?
&lt;/h3&gt;

&lt;p&gt;Components and their APIs evolve over time as new use cases arise. For this reason, they should be &lt;strong&gt;designed for change&lt;/strong&gt;, based on facts or forecasts of how use cases may evolve.&lt;/p&gt;

&lt;p&gt;An API that is not designed with evolution in mind will likely result in &lt;strong&gt;breaking changes&lt;/strong&gt; when new use cases come up.&lt;/p&gt;

&lt;p&gt;On the image below, the &lt;strong&gt;warning&lt;/strong&gt; variation of the dialog could be defined as a warning boolean prop, but if &lt;strong&gt;error&lt;/strong&gt; or &lt;strong&gt;success&lt;/strong&gt; use cases are expected to come up in the future, it could instead be defined as a type="warning" string prop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UM6Al2u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOlbA7BUckrFgsl1Xh4F_zg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UM6Al2u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOlbA7BUckrFgsl1Xh4F_zg.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;—&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-which-parts-can-be-isolated"&gt;
  &lt;/a&gt;
  d) Which parts can be isolated?
&lt;/h3&gt;

&lt;p&gt;Complex components are hard to consume. To simplify a component’s API, it is good practice to isolate smaller, reusable elements.&lt;/p&gt;

&lt;p&gt;These elements can be wrapped inside the parent component or manually added by the consumer as child elements, depending on the amount of variation expected (see paragraph about slots below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3RsF5Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEF0PPIt4KUb-9pk8KJrmtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3RsF5Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEF0PPIt4KUb-9pk8KJrmtg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#e-where-can-content-be-inserted"&gt;
  &lt;/a&gt;
  e) Where can content be inserted?
&lt;/h3&gt;

&lt;p&gt;Not all functionalities of a component need to be pre-defined and offered through specific APIs.&lt;/p&gt;

&lt;p&gt;For use cases that require more flexibility, consumers should be able to insert custom content inside pre-defined slots (AKA portals, containers or children areas).&lt;/p&gt;

&lt;p&gt;Slots can define how its children elements will appear (e.g. from top to bottom or left to right, with 8px space between them), but the consumers have full control over the style of the inserted elements, since they are not encapsulated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APLmaMFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOfZEhF7ZIR-WJWWr1NIUFg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APLmaMFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOfZEhF7ZIR-WJWWr1NIUFg.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While it is extremely important that components are easy to use for the final users, developers and designers should be considered first-hand users of Design Systems and component libraries, and designing APIs that are easy to consume will significantly improve their experience.&lt;/p&gt;

&lt;p&gt;Designers that understand how components API work can make more meaningful decisions when defining a component, and this will enhance the communication with developers as well.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>FREE 3D ILLUSTRATION LIBRARIES </title>
      <author>Innocent Coder</author>
      <pubDate>Thu, 29 Apr 2021 08:23:43 +0000</pubDate>
      <link>https://dev.to/innocentcoder/free-3d-illustration-libraries-5d6c</link>
      <guid>https://dev.to/innocentcoder/free-3d-illustration-libraries-5d6c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#handz"&gt;
  &lt;/a&gt;
  Handz
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZPwnusT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0l5m4bjd54bt54w4t06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZPwnusT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0l5m4bjd54bt54w4t06.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Is Free 3D Hands Gestures Library For Any Occasion.&lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://www.handz.design/"&gt;https://www.handz.design/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#slam"&gt;
  &lt;/a&gt;
  Slam
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqDPwy4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hg09ulby4fkugnh08d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqDPwy4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hg09ulby4fkugnh08d1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discover Nice Objects Created With Cinema 4D. Virtual Reality Tools And Other Gadgets Are Embodied In Volumetric Graphics.&lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://craftwork.design/downloads/slam"&gt;https://craftwork.design/downloads/slam&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#power-people-platform"&gt;
  &lt;/a&gt;
  Power People Platform
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCfQciGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxvnh4btfw4y4pphtr0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCfQciGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxvnh4btfw4y4pphtr0n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Power People Platform Is A Delicious Design Library Of 3D Avatars. Made With Love For More Fun And Color In Your Work &lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://powerpeopleplatform.com/"&gt;https://powerpeopleplatform.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shapefest"&gt;
  &lt;/a&gt;
  Shapefest
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cy4FsG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zslu9j6wh0g4ugcrkzqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cy4FsG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zslu9j6wh0g4ugcrkzqj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Massive Free Library Of Beautifully Rendered 3D Shapes. 160000+ High Resolution PNG Images In One Cohesive Library. &lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://www.shapefest.com/"&gt;https://www.shapefest.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#faticons-medicine"&gt;
  &lt;/a&gt;
  Faticons Medicine
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr-86hol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pwn9dac32hkqcyh9lzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr-86hol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pwn9dac32hkqcyh9lzv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressive easy-customizable low-poly 3d icons for your project. Faticons Medicine. Sketch. Figma. Compatible with Figma and Sketch&lt;/p&gt;

&lt;p&gt;link:- &lt;a href="http://minima.market/faticons-medicine"&gt;http://minima.market/faticons-medicine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/5-icons-resource-for-your-web-projects-545a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Icons Resource For Your Web Projects&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ Apr 28 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>illustration</category>
      <category>freebies</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>State Machines: Should this be a state, or in context?</title>
      <author>Matt Pocock</author>
      <pubDate>Thu, 29 Apr 2021 07:54:37 +0000</pubDate>
      <link>https://dev.to/mpocock1/state-machines-should-this-be-a-state-or-in-context-1d7e</link>
      <guid>https://dev.to/mpocock1/state-machines-should-this-be-a-state-or-in-context-1d7e</guid>
      <description>&lt;p&gt;State machines offer several API's for expressing state. Like other tools, you can keep arbitrary values in a store (usually expressed as an object) called &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is handy for values which change over time and you need to keep updated, like the value of a form input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CHANGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time the &lt;code&gt;CHANGE_NAME&lt;/code&gt; event is sent to the machine, we'll update the value in &lt;code&gt;context&lt;/code&gt;. We can then use that value to display the value in our UI or send it to an API.&lt;/p&gt;

&lt;p&gt;XState also gives you another way of expressing state - through finite states. Let's imagine a modal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the modal's state is expressed through the &lt;code&gt;states: {}&lt;/code&gt; attribute, which also defines which events can be received during each state. You can only &lt;code&gt;CLOSE&lt;/code&gt; the modal when it's &lt;code&gt;open&lt;/code&gt;, and vice versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-should-i-choose"&gt;
  &lt;/a&gt;
  Which should I choose?
&lt;/h2&gt;

&lt;p&gt;The choice between using &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;states&lt;/code&gt; isn't always clear. For instance, the modal machine above could be expressed using &lt;code&gt;context&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives you exactly the same functionality as the states-based one above - you can track when the modal is open and closed, and send the same events.&lt;/p&gt;

&lt;p&gt;The reason this can be expressed using both &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; is because &lt;em&gt;all of the events do the same thing no matter what state you're in&lt;/em&gt;. There are no events you need to declare as impossible in certain states.&lt;/p&gt;

&lt;p&gt;To show you what I mean, let's imagine a form input inside a modal. We only want to allow changes to the form input while the modal is open.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;CHANGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the modal is in the &lt;code&gt;closed&lt;/code&gt; state, the &lt;code&gt;CHANGE_NAME&lt;/code&gt; event will not change the value in &lt;code&gt;context&lt;/code&gt;. State machines are great at this - only allowing the things you want to happen to happen. Some other examples might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not allowing users to submit a form while the previous API call is loading&lt;/li&gt;
&lt;li&gt;Only allowing users to log in if they're not already logged in&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#putting-things-in-context"&gt;
  &lt;/a&gt;
  Putting things in context
&lt;/h2&gt;

&lt;p&gt;You might be wondering - but, I &lt;em&gt;can&lt;/em&gt; express the above in &lt;code&gt;context&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;CHANGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// This acts as the guard to prevent editing&lt;/span&gt;
        &lt;span class="c1"&gt;// the name while it's open&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this is incorrect for two reasons. First, as requirements grow, so will the complexity of your logic. Let's imagine that the modal can now be either &lt;code&gt;closing&lt;/code&gt; (i.e. animating out) or &lt;code&gt;closed&lt;/code&gt;. We'll soon see an explosion of booleans, as I discussed in &lt;a href="https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e"&gt;this article on useState/useReducer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, XState is auto-documenting via the &lt;a href="https://xstate.js.org/viz/"&gt;XState visualiser&lt;/a&gt;. The more your logic is expressed in &lt;code&gt;states&lt;/code&gt;, the easier it's going to be to visualise. The machine above is basically a single state with its logic expressed in ways that XState can't visualise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules-to-live-by"&gt;
  &lt;/a&gt;
  Rules to live by
&lt;/h2&gt;

&lt;p&gt;You should be keeping most of your state in context. That includes form values, API data - anything which cannot be expressed finitely.&lt;/p&gt;

&lt;p&gt;But state machines are powerful &lt;em&gt;because&lt;/em&gt; of their states. Use states when you want to express your logic visually, or gate events to certain states.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>xstate</category>
    </item>
    <item>
      <title>The best developer productivity hacks to master</title>
      <author>Pavel Polívka</author>
      <pubDate>Thu, 29 Apr 2021 07:49:16 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/the-best-developer-productivity-hacks-to-master-59o9</link>
      <guid>https://dev.to/pavel_polivka/the-best-developer-productivity-hacks-to-master-59o9</guid>
      <description>&lt;p&gt;In general, I consider myself a productive person. I usually manage to complete a lot of things per day. I read a lot of articles and books about how to increase your productivity and adopted few techniques that help me a lot. In this article, I will go over them, describe the technique, how it helps me and what I use to implement it. &lt;/p&gt;

&lt;p&gt;This is not an orderer list. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-goal"&gt;
  &lt;/a&gt;
  Single goal
&lt;/h2&gt;

&lt;p&gt;Every day I will set up a single goal for that day. The one thing I want complete. It does not have to necessarily be work-related, it should be the thing you spent most of your day doing. &lt;/p&gt;

&lt;p&gt;For me, it usually is something like: "Finish this JIRA ticket." But it can be stuff like clean your house, etc... &lt;/p&gt;

&lt;p&gt;If this is a work task I usually try to spend about 80% of my work time on this goal. Rest is spent on meetings, email, and other ad-hoc tasks. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#short-bursts"&gt;
  &lt;/a&gt;
  Short bursts
&lt;/h2&gt;

&lt;p&gt;This is also called the Pomodoro technique. The principle behind this is very simple. You set some time (20 minutes), start a timer, and focus on a single unit of work during that time. You will not answer email, chat, phone, etc.. you work on a task that you want to advance. I try to fit as many of these as possible into my day. Not just into my workday.&lt;/p&gt;

&lt;p&gt;Every time I complete an interval I follow it with a short break.&lt;/p&gt;

&lt;p&gt;There is a lot of timer apps that can be used. I mostly use &lt;a href="https://www.forestapp.cc"&gt;Forest&lt;/a&gt; but you can use anything you like. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conquer-email-and-chat"&gt;
  &lt;/a&gt;
  Conquer email and chat
&lt;/h2&gt;

&lt;p&gt;The biggest problem for my at the beginning was not to answer to email and or chat message right away. You see those notifications during your work session and it's super easy to just open Outlook and reply. The first step for me was to considerably disable notifications. I regularly open Outlook and Slack to skim through messages if there is something important that needs my immediate attention. I usually do it after every work session, not a lot of things are that important that it cannot wait 20 minutes. &lt;/p&gt;

&lt;p&gt;Twice a day I dedicate more time to deal with the rest of it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#say-no"&gt;
  &lt;/a&gt;
  Say NO
&lt;/h2&gt;

&lt;p&gt;This was big to me as well. I tend to please everyone so I was naturally saying yes to most of the requests that came my way. This way you get a lot of things to do and it will distract you from the main goal of the day. &lt;/p&gt;

&lt;p&gt;Normalize saying NO. Do not be mean about tho. If you do not have time right now, just say NO. Most people will not be mad at you, they are the ones asking. It's perfectly ok to say no to your manager as well, maybe explain that you have a lot on your plate right now. They may ask somebody else or reassign some of your other work if the new one is really important. Everything is always possible to discuss. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-tasks"&gt;
  &lt;/a&gt;
  Quick tasks
&lt;/h2&gt;

&lt;p&gt;When going through email or chat I have a rule if the required task to complete the action on the mail (can be a reply) takes less than 2 minutes I do it right now and then. This way you do not have a long TODO list filled with quick-to-complete tasks. This is one of those things that seem minor but increase your productivity a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-list"&gt;
  &lt;/a&gt;
  TODO list
&lt;/h2&gt;

&lt;p&gt;TODO list is essential to me. I am not using any apps or other technology I am a pen and paper guy. I have a list of things to do, every day I circle my main goal of the day. When the task is done I cross it. When my paper is full I copy incomplete items to a new sheet. &lt;/p&gt;

&lt;p&gt;I am adding stuff throughout the day, mainly after email/chat sessions.&lt;/p&gt;

&lt;p&gt;You can use any app or whatever technique works for you, but keeping a list of stuff that needs to be done is essential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-multitasking"&gt;
  &lt;/a&gt;
  No multitasking
&lt;/h2&gt;

&lt;p&gt;Multitasking kills productivity. When you are trying to do multiple things at once you usually do all of them halfway only. When you are working with the Pomodoro technique do always just one thing in your interval. If you need multiple intervals to finish your task try to limit the intervals with other work to as few as possible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#done-is-better-than-perfect"&gt;
  &lt;/a&gt;
  Done is better than perfect
&lt;/h2&gt;

&lt;p&gt;The "done is better than perfect" sentence was something that made me mad the first time one of our managers wrote it on our whiteboard with big letters. I want my work to be perfect, with no compromising. Over time I figure out that this is good for us. Let's finish our work and worry about theoretical edge cases when they become a thing. Do not spend weeks finishing that one feature that almost nobody will use just because you think it's super cool to do.&lt;/p&gt;




&lt;p&gt;For more awesome tips like this please follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>All About Knapsack Problem | python</title>
      <author>vinayak</author>
      <pubDate>Thu, 29 Apr 2021 07:37:45 +0000</pubDate>
      <link>https://dev.to/itsvinayak/all-about-knapsack-problem-python-1mc5</link>
      <guid>https://dev.to/itsvinayak/all-about-knapsack-problem-python-1mc5</guid>
      <description>&lt;p&gt;The knapsack problem is a problem in combinatorial optimization:&lt;/p&gt;

&lt;p&gt;Given a set of items, each with a weight and a value, determine the number of each item included in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items. The problem often arises in resource allocation where the decision-makers have to choose from a set of non-divisible projects or tasks under a fixed budget or time constraint, respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of knapsack problem:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0-1 Knapsack Problem

&lt;ul&gt;
&lt;li&gt;for recursive solution time Complexity - O(2^n)&lt;/li&gt;
&lt;li&gt;using dynamic programming time complexity is O(nW) where "W" is capacity and "n" in no. of the item &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Unbounded Knapsack (Repetition of items allowed) Θ((W+1)*N)&lt;/li&gt;
&lt;li&gt;fractional knapsack problem O(nlogn)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Given knapsack&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4TnXFu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619342085603/Z1S1f6z7U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4TnXFu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619342085603/Z1S1f6z7U.png" alt="Screenshot (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;variables used&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wt = [10,40,20,30]
val = [60,40,100,120]
capacity = 50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#01-knapsack-problem-unbounded-knapsack-repetition-of-items-not-allowed"&gt;
  &lt;/a&gt;
  0-1 knapsack problem (Unbounded Knapsack (Repetition of items not allowed)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### 0-1 Knapsack Problem
## recursive solution time Complexity - O(2^n)

def zeroOneKnapsackRec(index,wt,val,capacity):
    # base condition
    if capacity == 0 or index == 0:
        return 0
    elif wt[index-1] &amp;gt; capacity:
        return zeroOneKnapsackRec(index-1,wt,val,capacity)
    else:
        # if we take or leave
        return max(val[index-1]
                   + zeroOneKnapsackRec(index-1,wt,val,capacity-wt[index-1]),  # taking element
                   zeroOneKnapsackRec(index-1,wt,val,capacity)  # leaving element
                    )
zeroOneKnapsackRec(len(wt),wt,val,capacity)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 220&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-using-dp-on-a-recursive-solution"&gt;
  &lt;/a&gt;
  now using dp on a recursive solution
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#type-of-dynamic-programming-approach"&gt;
  &lt;/a&gt;
  Type of dynamic programming approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;top-down approach( Memoization Technique (an extension of recursive approach) )&lt;/li&gt;
&lt;li&gt;bottom-up approach
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Memoization Technique ... 

# Time Complexity: O(number of items*capacity).

# we have taken capacity and weigth because both variables are changing
dp = [[None for i in range(capacity + 1)] for j in range(len(wt) + 1)]  ## array to store recursive call or for Memoization

def zeroOneKnapsackMemoization(index,wt,val,capacity):
    # base condition
    if capacity == 0 or index == 0:
        return 0

    if dp[index][capacity] is not None:
        return dp[index][capacity]
    else:    
        if wt[index-1] &amp;gt; capacity:
            dp[index][capacity] = zeroOneKnapsackRec(index-1,wt,val,capacity)
            return dp[index][capacity]
        else:
            dp[index][capacity] =  max(val[index-1] \
                        + zeroOneKnapsackRec(index-1,wt,val,capacity-wt[index-1]) ,\
                                zeroOneKnapsackRec(index-1,wt,val,capacity-wt[index-1]))

            return dp[index][capacity]

zeroOneKnapsackMemoization(len(wt),wt,val,capacity)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 220&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def topDownKnapsack(wt,val,capacity):
    dp = [[0 for i in range(capacity+1)] for j in range(len(wt)+1)]
    for i in range(len(wt)+1):
        for j in range(capacity+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif wt[i-1] &amp;lt;= j:
                dp[i][j] = max(
                    val[i - 1] + dp[i - 1][j - wt[i - 1]],
                               dp[i - 1][j])      
            else:
                 dp[i][j] = dp[i - 1][j]

    return dp

print("ans :",topDownKnapsack(wt,val,capacity)[len(wt)][capacity])

# to see dp table
from pandas import *
matrix = topDownKnapsack(wt,val,capacity)
df = DataFrame(matrix)
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; ans : 220&lt;/p&gt;

&lt;p&gt;Table formed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
1   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60
2   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  100
3   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  100 100 100 100 100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160
4   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  100 100 100 100 100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 180 180 180 180 180 180 180 180 180 180 220
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unbounded-knapsack-repetition-of-items-allowed"&gt;
  &lt;/a&gt;
  Unbounded Knapsack (Repetition of items allowed)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def recursiveUnboundedKnapsack(val, wt, W, n):
    """
    W = capacity,
    n = index
    """
    if n == 0 or W == 0:
        return 0
    elif wt[n - 1] &amp;gt; W:
        return recursiveUnboundedKnapsack(val, wt, W, n-1)
    else:
        return max(
            val[n - 1] + recursiveUnboundedKnapsack(val, wt, W - wt[n - 1], n),
            recursiveUnboundedKnapsack(val, wt, W, n-1),
        )
print(recursiveUnboundedKnapsack(val, wt, capacity, len(wt)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 300&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def unboundedKnapsackDp(val, wt, W, n):
    """
    W = capacity,
    n = index
    """
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    for i in range(n + 1):
        for j in range(W + 1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif wt[i - 1] &amp;gt; j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = max(val[i - 1] + dp[i][j - wt[i - 1]], dp[i - 1][j])
    return dp

print("ans :",unboundedKnapsackDp(val, wt, capacity, len(wt))[len(wt)][capacity])

# to see dp table
from pandas import *
matrix = unboundedKnapsackDp(val, wt, capacity, len(wt))
df = DataFrame(matrix)
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; ans : 300&lt;br&gt;
Table formed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
1   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300
2   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300
3   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300
4   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;## fractional knapsack problem (greedy  approach)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class item(object):
    """ class to store item """
    def __init__(self,wt,val,index):
        self.wt = wt
        self.val = val
        self.index = index
        self.cost = val // wt
    def __lt__(self, other):
        return self.cost &amp;lt; other.cost

class build_item_list:
    """ class to build item list """
    def __init__(self,wt_list,val_list):
        self.wt_list = wt_list
        self.val_list = val_list
    def build(self):
        item_list = []
        for index in range(len(self.wt_list)):
            item_list.append(item(self.wt_list[index],self.val_list[index],index))
        return item_list

class FractionalKnapSack(object):
    """ knapsack sol class """
    def __init__(self,wt_list,val_list,capacity):
        # Builder design pattern
        self.item_list = build_item_list(wt_list,val_list).build()
        self.capacity = capacity
        self.totalValue = 0
        self.totalValue = self.getMaxValue()   

    def getMaxValue(self):
        """ function return max val a knapsack can hold"""
        self.item_list.sort(reverse=True)
        for i in self.item_list:
            curWt = int(i.wt)
            curVal = int(i.val)
            if self.capacity - curWt &amp;gt;= 0:
                self.capacity -= curWt
                self.totalValue += curVal
            else:
                fraction = self.capacity / curWt
                self.totalValue += curVal * fraction
                self.capacity = int(self.capacity - (curWt * fraction))
                break
        return self.totalValue

    def __repr__(self):
        return f" Total value of knapsack is {self.totalValue}"

    def __str__(self):
        return f" Total value of knapsack is {self.totalValue}"

print(FractionalKnapSack(wt,val,capacity))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; Total value of knapsack is 240.0&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>python</category>
      <category>programming</category>
      <category>showdev</category>
    </item>
    <item>
      <title>A beginner’s journey into software development in Nigeria.</title>
      <author>Opeyemi Stephen</author>
      <pubDate>Thu, 29 Apr 2021 07:36:32 +0000</pubDate>
      <link>https://dev.to/resourcefulmind/a-beginner-s-journey-into-software-development-in-nigeria-86b</link>
      <guid>https://dev.to/resourcefulmind/a-beginner-s-journey-into-software-development-in-nigeria-86b</guid>
      <description>&lt;p&gt;No one really writes about the pain involved in learning to code in Nigeria and I don’t know why.&lt;/p&gt;

&lt;p&gt;First of all, peep the the cover picture on this post, it represents an art-work for a song by a music artiste in Nigeria titled “Thunder Fire You” by Ric Hassani. Literal meaning...may thunder strike a person dead. &lt;/p&gt;

&lt;p&gt;It was sung as a song for a heartbroken man but I put that up there because there’s a lot of forces designed to frustrate the average young Nigerian mind by the Government.&lt;/p&gt;

&lt;p&gt;I started my developer journey, no prior computer science degree, delving into a new career because well, there are simply not enough jobs. I said what I said.&lt;/p&gt;

&lt;p&gt;And now, it has only gotten worse...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Laptop prices have doubled and are now tripling due to the weak strength of the Naira against the dollar. Some developer advocates like Hack Sultan, Prosper Otemuyiwa and Adora Nwodo have been doing their best to help the Nigerian community but for how long? Trust the government to try and take the plaudits when a Nigerian dev builds a world class product tho.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data!!!! A successful developer needs to learn to know how to ask the right questions on Google and StackOverflow yeah? &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you see,in order to use Google, you actually have to be connected to the internet...Now the average Nigerian earns 2000 naira daily and the least internet plans go for half that price!&lt;br&gt;
Funny story? Many people do not even earn that...tell me again how it’s supposed to be easy to just be in the “zone” to code? &lt;/p&gt;

&lt;p&gt;The way I see it, to use YouTube and the plenty resources available online for self-study, you’ve got to have access to the internet and how are you supposed to cope with spending at least 12-20 thousand naira on data monthly when you haven’t even started getting paid? And to plunge you into further depression, you’re given an option of “borrowing” data...sighs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now to the most annoying part...EPILEPTIC...nah scratch that...NO POWER SUPPLY!!! Paint this scenario in your head...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Young and defiant newbie dev who is trying their best to scale through, has been able to get a laptop, buy/borrow data and joined a free boot camp or tried to do some self study. This young developer wants to maximize their time and draws up a study schedule so they can also get their tasks and assignments submitted early enough. &lt;br&gt;
There’s a problem tho...”PHCN”(the corrupt organization in charge of supplying power) only gives them electricity 3 hours(phased irregularly) daily and coupled with that, they still have to “share” light in their street because the transformer is not powerful enough to supply the 12 streets using it.&lt;br&gt;
Their street uses the epileptic power for two days and there’s a total blackout for the third day. &lt;br&gt;
In total they have +/- 6 hours of a possible 72hours to power their devices, get studies in and also do their assignments. Then you find them at Bet9ja shops (sports betting kiosks) trying to charge and learning to code with street kings(agbero and urchins) shouting in the background trying to stake bets on virtual football games.&lt;/p&gt;

&lt;p&gt;That is just a peek into the life of most newbie Nigerian developers. I just thought you should know. I deliberately excluded some parts because it gets ugly as you go. Feel free to add your experiences and draw strength from each other. Selah.&lt;/p&gt;

&lt;p&gt;Despite all this, we still do our best yeah? But think of the talents being wasted because they do not have the psychological capacity to cope with these kinds of problems...just think about it for a minute?&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Technological Advancements in Aerospace Engineering.</title>
      <author>A.RAJSHEKAR</author>
      <pubDate>Thu, 29 Apr 2021 07:25:35 +0000</pubDate>
      <link>https://dev.to/raj100100/technological-advancements-in-aerospace-engineering-4a9l</link>
      <guid>https://dev.to/raj100100/technological-advancements-in-aerospace-engineering-4a9l</guid>
      <description>&lt;p&gt;"Over the past few years, the aerospace industry has seen countless innovations coming to fruition with many more on the horizon. Here are six emerging aerospace technologies everyone would want to know about":&lt;br&gt;
  1.ZERO-FUEL AIRCRAFT&lt;br&gt;
     Zero Fuel aircraft use photovoltaic panels to utilize solar energy to provide necessary thrust to the engines.&lt;br&gt;
  2.STRUCTURAL HEALTH MONITORING&lt;br&gt;
     Advanced health management systems such as monitoring, prognostics and self healing are being developed to enhance our ability to analyze and determine the status of an aircraft. This technology has already been used by Boeing and airbus and was previously used onboard an air frame jet that crashed in 2009 to notify headquarters of electrical problems.&lt;br&gt;
  3.ADVANCED SPACE PROPULSION TECHNOLOGIES&lt;br&gt;
   A new plasma based rocket propulsion technology known as the VASIMR ROCKET(variable specific impulse magneto plasma rocket)has been in development by NASA along with department of energy.&lt;br&gt;
 4.ADVANCED MATERIALS&lt;br&gt;
   Advances in material science have hinted toward huge benefits for aircraft manufacturers. New materials like graphene and carbon nanotubes are helping to make airplane wings more efficient by reducing weight and fuel consumption.&lt;br&gt;
 5.SMART AUTOMATION AND BLOCKCHAIN&lt;br&gt;
   Manufacturing aircraft parts is a highly specialized and complicated process. However, new technologies and processes are making it faster and simpler .Aerospace and defense companies are also staring to explore the digital realm, as well. Technologies such as blockchain are helping to improve transparency and automate transactions among supply chain partners.&lt;br&gt;
 6.3D PRINTING&lt;br&gt;
   Companies that have had trouble keeping up with production deadlines have turned to 3D printing as solution in recent years. Space parts that need to be replaced on a regular basis, such as door handles, will be the first targets. Next, the tools that are used to create aircraft parts will also be printed. This will cut back on time, cost and weight.&lt;br&gt;
THE FUTURE IS HERE:&lt;br&gt;
 Innovative technologies and manufacturing processes are being developed on a seemingly constant basis and small to medium sized manufacturers are reaping the benefits as aerospace companies look for niche suppliers to help expand their supply chain.&lt;br&gt;
  More and more joint ventures and outsourcing are expected to occur in the next five to ten years as these emerging markets start to compete on a global scale. &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
