<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JWTs explained with code examples</title>
      <author>propelauthblog</author>
      <pubDate>Sat, 30 Oct 2021 21:38:07 +0000</pubDate>
      <link>https://dev.to/propelauth/jwts-explained-with-code-examples-3k29</link>
      <guid>https://dev.to/propelauth/jwts-explained-with-code-examples-3k29</guid>
      <description>&lt;p&gt;The Wikipedia description of a JSON Web Token (JWT) is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption &lt;br&gt;
whose payload holds JSON that asserts some number of claims. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, this definition says a lot without really saying a lot. When I'm trying to understand a concept, I like to play around with relevant libraries. We'll try this out with JWTs using the popular javascript library &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-jwt"&gt;
  &lt;/a&gt;
  Creating a JWT
&lt;/h2&gt;

&lt;p&gt;The first thing the &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;docs&lt;/a&gt; mention is that the &lt;code&gt;sign&lt;/code&gt; function returns a &lt;br&gt;
JWT, and the only required arguments are some JSON and a string called &lt;code&gt;secret&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsonwebtoken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The only arguments we need are a secret value and some JSON&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shhhhh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Ignore the options for now, we'll check them later&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ2YWx1ZSIsImtleTIiOiJ2YWx1ZTIiLCJpYXQiOjE2MzQxNzgxMTB9.vnXM0oxw05QH1Vs6RsvYp6LaEqFFqZ-NExQMXBgP7Mk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our first look at a what a JWT looks like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-jwt"&gt;
  &lt;/a&gt;
  Using a JWT
&lt;/h2&gt;

&lt;p&gt;What can we do with this JWT? The library has two other methods, &lt;code&gt;verify&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt;. It lists &lt;code&gt;verify&lt;/code&gt; first so we'll try that first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From previous example&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ2YWx1ZSIsImtleTIiOiJ2YWx1ZTIiLCJpYXQiOjE2MzQxNzgxMTB9.vnXM0oxw05QH1Vs6RsvYp6LaEqFFqZ-NExQMXBgP7Mk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shhhhh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Ignore the options for now, we'll check them later&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifyResult:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// verifyResult: { key: 'value', key2: 'value2', iat: 1634178110 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks like we got back the JSON that we specified above plus an extra entry &lt;code&gt;iat&lt;/code&gt;. The docs say that &lt;code&gt;iat&lt;/code&gt; is short for &lt;code&gt;issued at&lt;/code&gt; and is a unix timestamp of when the JWT was created. &lt;/p&gt;

&lt;p&gt;What happens if we used the wrong secret?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ2YWx1ZSIsImtleTIiOiJ2YWx1ZTIiLCJpYXQiOjE2MzQxNzgxMTB9.vnXM0oxw05QH1Vs6RsvYp6LaEqFFqZ-NExQMXBgP7Mk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incorrectSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;thisiswrong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incorrectSecret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// JsonWebTokenError: invalid signature&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unsurprisingly, we get an error. So far, we can determine that a JWT somehow encodes the JSON value that we passed in along with other metadata (&lt;code&gt;iat&lt;/code&gt;). Later on, we can check that a JWT was created with a specific secret and get back that encoded JSON.&lt;/p&gt;

&lt;p&gt;What about the &lt;code&gt;decode&lt;/code&gt; method?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From previous example&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ2YWx1ZSIsImtleTIiOiJ2YWx1ZTIiLCJpYXQiOjE2MzQxNzgxMTB9.vnXM0oxw05QH1Vs6RsvYp6LaEqFFqZ-NExQMXBgP7Mk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodeResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;decodeResult:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decodeResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// decodeResult: { key: 'value', key2: 'value2', iat: 1634178110 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is kind of strange. We didn't pass in the secret, but we still got back the original JSON and &lt;code&gt;iat&lt;/code&gt;. There's a warning on the method in the docs which gives us a hint about what's going on:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: This will not verify whether the signature is valid. You should not use this for untrusted messages. &lt;br&gt;
You most likely want to use jwt.verify instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tells us something important. The JSON within the JWT is not encrypted. If we store anything sensitive in a JWT, anyone could read it, even if they don't have the secret.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-might-this-be-useful"&gt;
  &lt;/a&gt;
  Where might this be useful?
&lt;/h2&gt;

&lt;p&gt;A quick recap on what we've learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A JWT can be created with JSON and a secret&lt;/li&gt;
&lt;li&gt;Anyone can get the JSON out of the JWT, even without the secret&lt;/li&gt;
&lt;li&gt;We can verify that a JWT was created with a specific secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One common example is authentication. After a user logs in, we can create a JWT containing metadata about the user, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsonwebtoken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shhhhh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createJwtForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Users can send us the JWT, and we can securely know who sent it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserIdForJwt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Can more gracefully handle errors&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need is our secret, and we are confident in the returned &lt;code&gt;user_id&lt;/code&gt;. The only way someone could impersonate a user is if they had our secret (so choose something better than &lt;code&gt;shhhhh&lt;/code&gt;) or if they stole a valid JWT from someone else (so make sure to keep them safe).&lt;/p&gt;

&lt;p&gt;Additionally, we don't need to maintain any state or query any external services to validate the userIds. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsonwebtoken-options"&gt;
  &lt;/a&gt;
  jsonwebtoken Options
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;sign&lt;/code&gt; function takes in a bunch of options that we have skipped. Let's go back and look at some.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsonwebtoken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whatever we want&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anything&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shhhhh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Specify expiresIn for 1h&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifyResult:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// verifyResult: { 'whatever we want': 'anything', iat: 1634186608, exp: 1634190208 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding &lt;code&gt;expiresIn&lt;/code&gt;, we can see that a new entry was added to the JSON &lt;code&gt;exp&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;exp&lt;/code&gt; is another unix timestamp, and it's 3600 seconds (1 hour) after the issued time. What happens when the time expires? We can either wait an hour or speed things up by specifying a negative &lt;code&gt;expiresAt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... same as before&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-1h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TokenExpiredError: jwt expired&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get an expected error, because the jwt expired an hour ago. &lt;/p&gt;

&lt;p&gt;Why is &lt;code&gt;expiresIn&lt;/code&gt; useful? We said before that once we create a JWT we can check that it's valid without doing any external lookups. The issue with this is once a JWT is created, it's valid forever (as long as the secret doesn't change). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;exp&lt;/code&gt; allows us to bound how long the token is valid for, by encoding that information in the JSON itself.&lt;/p&gt;

&lt;p&gt;Note that while this library allows us to specify it in a user-friendly way (&lt;code&gt;1h&lt;/code&gt;), we could also have just added it directly to the JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whatever we want&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anything&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// 1 hour in the past&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shhhhh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TokenExpiredError: jwt expired&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is actually how most of the options work. They are a nice way to specify entries (also known as claims) that are added to the JSON. The &lt;code&gt;issuer&lt;/code&gt; option, for example, adds a claim &lt;code&gt;iss&lt;/code&gt; to the JSON. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;iss&lt;/code&gt; is used as an id for whoever created the JWT. The party verifying the JWT can check the &lt;code&gt;iss&lt;/code&gt; to make sure it came from the source they were expecting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8383&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shhhhh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;issuer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@propelauth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyNoIssuer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verifyNoIssuer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { user_id: '8383', iat: 1634178110, iss: '@propelauth' }&lt;/span&gt;
&lt;span class="c1"&gt;// ^ this works because the library only checks the issuer if you ask it to&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyCorrectIssuer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;issuer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@propelauth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verifyCorrectIssuer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { user_id: '8383', iat: 1634178110, iss: '@propelauth' }&lt;/span&gt;
&lt;span class="c1"&gt;// ^ this works because the issuer matches&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyIncorrectIssuer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;issuer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oops&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verifyIncorrectIssuer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// JsonWebTokenError: jwt issuer invalid. expected: oops&lt;/span&gt;
&lt;span class="c1"&gt;// ^ this fails because the issuer doesn't match&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A complete list of standard fields is available &lt;a href="https://en.wikipedia.org/w/index.php?title=JSON_Web_Token#Standard_fields"&gt;here&lt;/a&gt;.&lt;br&gt;
Almost every JWT library will support checking these standard fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-algorithms"&gt;
  &lt;/a&gt;
  What are algorithms?
&lt;/h2&gt;

&lt;p&gt;The last thing to explore in this library is the &lt;code&gt;algorithms&lt;/code&gt; option. There are quite a few &lt;a href="https://www.npmjs.com/package/jsonwebtoken#algorithms-supported"&gt;supported algorithms&lt;/a&gt; in the docs.&lt;/p&gt;

&lt;p&gt;The algorithms ultimately control the signing and verification functions. There's a lot we can dig into here, but at a high level, there are two types of algorithms: symmetric and asymmetric.&lt;/p&gt;

&lt;p&gt;The default algorithm (&lt;code&gt;HS256&lt;/code&gt;) is symmetric, meaning the same secret is used for signing and verifying. We saw this above when we passed &lt;code&gt;shhhhh&lt;/code&gt; into both &lt;code&gt;sign&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt; as the secret. This is often used when a service is verifying the JWTs they issue themselves.&lt;/p&gt;

&lt;p&gt;Another common algorithm is &lt;code&gt;RS256&lt;/code&gt; which is asymmetric. In this case, a private key is used to &lt;code&gt;sign&lt;/code&gt;, but a public key is used to &lt;code&gt;verify&lt;/code&gt;. This is often used when the issuer and verifier are different. Anyone with the private key can create valid JWTs, so if a service is only verifying JWTs, they only need the public key.&lt;/p&gt;

&lt;p&gt;It is good practice to specify the algorithm you are expecting in the &lt;code&gt;verify&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ^ don't do this&lt;/span&gt;

&lt;span class="nx"&gt;jwtLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;algorithms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HS256&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// ^ do this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why does this matter? Well, unfortunately &lt;code&gt;none&lt;/code&gt; is a valid algorithm. There have been security flaws in applications when a person creates a fake token but uses the &lt;code&gt;none&lt;/code&gt; algorithm (which expects there to be no signature).&lt;/p&gt;

&lt;p&gt;Some libraries won't allow &lt;code&gt;none&lt;/code&gt; at all since it kind of defeats the purpose of &lt;code&gt;verify&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing up
&lt;/h2&gt;

&lt;p&gt;You should now have a pretty good grasp on JWTs based on this implementation. If you want to test your understanding,&lt;br&gt;
try reading the docs for a different popular JWT library (&lt;a href="https://pyjwt.readthedocs.io/en/stable/"&gt;PyJWT&lt;/a&gt; is a good&lt;br&gt;
choice for python folks) and see if the interfaces make sense.&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>SASS - An Overview</title>
      <author>Eunit </author>
      <pubDate>Sat, 30 Oct 2021 20:15:18 +0000</pubDate>
      <link>https://dev.to/eunit/sass-an-overview-a4n</link>
      <guid>https://dev.to/eunit/sass-an-overview-a4n</guid>
      <description>&lt;h1&gt;Overview Of SCSS/SASS&lt;/h1&gt;

&lt;p&gt;In this tutorial, we shall briefly take an overview of what &lt;code&gt;SASS&lt;/code&gt; is and how to get it up and running in your local&lt;br&gt;
machine so you can start using it in your projects. We all get a little frustrated/overwhelmed when styling large scale applications, especially using plain CSS. Things do get very messy easily. Things can get a lot easier using SASS :-D. Before delving in, let's start with what SASS actually means.&lt;/p&gt;



&lt;h1&gt;SASS - Meaning&lt;/h1&gt;

&lt;p&gt;SASS stands for Syntactically Awesome Stylesheets. It is a CSS superset which gives you programming type features and&lt;br&gt;
pre-compiles into CSS. It is essentially a CSS pre-processor - an upgrade to what CSS is and what CSS offers. So it&lt;br&gt;
makes it easier to work with CSS, it reduces the repetition and saves time which ultimately leads to you styling your&lt;br&gt;
pages efficiently with fewer CSS lines.&lt;/p&gt;



&lt;h1&gt;Prerequisite&lt;/h1&gt;

&lt;p&gt;Before using or learning SASS, you should be conversant with:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        HTML fundamentals
    &lt;/li&gt;
    &lt;li&gt;
        CSS properties
    &lt;/li&gt;
    &lt;li&gt;
        Basic understanding of programming (if/else, loops)
    &lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;Under the hood - SASS&lt;/h1&gt;

&lt;p&gt;SASS works like our regular CSS, but the browser does not understand SASS - that is why we will need a SASS&lt;br&gt;
pre-processor to convert SASS code into CSS.&lt;/p&gt;



&lt;h1&gt;Setting up SASS&lt;/h1&gt;

&lt;p&gt;Before you can use SASS, you need to set it up on your project. There are basically many ways to set SASS up. From the&lt;br&gt;
SASS official documentation, you can &lt;a href="https://sass-lang.com/install"&gt;install SASS&lt;/a&gt; using two methods. These&lt;br&gt;
are:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        either downloading and installing different &lt;b&gt;applications&lt;/b&gt; that will get you up and running with SASS in a few
        minutes for Mac, Windows, and Linux. You can download most of the applications for free but a few of them are paid
        apps (and totally worth it).
    &lt;/li&gt;

    &lt;li&gt;
        or using the &lt;b&gt;command line&lt;/b&gt; to install SASS. This will enable you to run the SASS executable to compile `.sass`
        and `.scss` files to `.css` files. For example:


        ```sass source/stylesheets/index.scss build/stylesheets/index.css```


    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another straight forward way of using SASS is install an &lt;code&gt;extension&lt;/code&gt; in VSCode (a text editor). For you to use this&lt;br&gt;
method, it means that you must be using VSCode as your text editor. Thi extension is called “Live SASS Compiler”, it&lt;br&gt;
does all the job for you, you just need to install it from your VsCode and you are good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSzKMIOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iptebl1i6lfw3p73qton.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSzKMIOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iptebl1i6lfw3p73qton.png" alt="Live SASS compiler" width="700" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After successful installation, a button “&lt;b&gt;Watch SASS&lt;/b&gt;” will show up at the bottom of your editor just click on it&lt;br&gt;
then it will start compiling your SCSS to regular CSS. One thing you should make sure to do is that you link your Scss&lt;br&gt;
file with HTML, but you need to link it the way you do with CSS. if your SASS file name will be “style” and it is placed&lt;br&gt;
in a folder named “SCSS”, then you have to link it like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="scss/style.css"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;After linking it, Now you can compile your SCSS file (SASS) just by clicking the “&lt;b&gt;Watch SASS&lt;/b&gt;” button like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eiE8IebO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0oe80jyaao4qfzevdnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eiE8IebO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0oe80jyaao4qfzevdnr.png" alt="Compiling SASS" width="700" height="267"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;SASS features&lt;/h1&gt;

&lt;p&gt;As we have discussed earlier in the introductory part of this tutorial, SASS gives you superpowers to use over your regular CSS. Below are the some of the features we can use to give us that superpowers:&lt;/p&gt;


&lt;h2&gt;Variables&lt;/h2&gt;
&lt;br&gt;
You can use the variables feature in SASS to avoid writing and modifying repetitive style properties. Variables are useful when you want to preserve say a brand color consistent in the website. Let's say we have a brand color of &lt;code&gt;#9966ff&lt;/code&gt;

&lt;p&gt;You can declare a variable in the following manner:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$brand-color: #9966ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the SASS is processed, it takes the variables we defined for the &lt;code&gt;$brand-color&lt;/code&gt; and outputs normal CSS with our variable values placed in the CSS. This can be extremely powerful in keeping the colors consistent throughout the site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SCSS&lt;/code&gt; file:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$brand-color: #9966ff;

body {
  font: 100% $font-stack;
  color: $brand-color;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will translate to our CSS as:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;CSS&lt;/code&gt; file:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  font: 100% Helvetica, sans-serif;
  color: #9966ff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Nesting&lt;/h2&gt;

&lt;p&gt;When writing HTML you know that it is nested; that is there is a visual hierarchy. CSS, on the other hand, doesn't have this visual hierarchy.&lt;/p&gt;

&lt;p&gt;SASS will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice according to the&lt;br&gt;
SASS &lt;a href="https://sass-lang.com/"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind, here's an example of some typical styles for a site's navigation:&lt;/p&gt;



&lt;p&gt;&lt;code&gt;SCSS&lt;/code&gt; file:&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li {
        display: inline-block;
    }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt; file:&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}
&lt;/pre&gt;

&lt;h2&gt;Partials&lt;/h2&gt;

&lt;p&gt;You can create partial SASS files that contain little snippets of CSS that you can include in other SASS files. This is a great way to modularize your CSS (just like in JAvaScript) and help keep things easier to maintain. A partial is a SASS file named with a leading &lt;b&gt;underscore&lt;/b&gt;. You might name it something like &lt;code&gt;_partial.scss&lt;/code&gt;. The underscore lets SASS know that the file is only a partial file and that it should not be generated into a CSS file. SASS partials are used with the &lt;code&gt;@import&lt;/code&gt; rule.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;SCSS&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;
@import "variables";

$brand-color: #9966ff;
$background-color: #f5f5f5;

body {
    color: $brand-color;
    background-color: $background-color;
    * {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
    }
}
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: We neither added the extension &lt;code&gt;.scss&lt;/code&gt; or the underscore. But beware of not having two separate files of the same name: one with underscore and another without underscore. It is a good practice to save all your partials in a separate folder to avoid confusion.&lt;/p&gt;


&lt;h2&gt;Mixins&lt;/h2&gt;
&lt;br&gt;
Mixins are very useful to declare reusable styles for your application. Some things in CSS are a bit tedious to write, especially with &lt;code&gt;CSS3&lt;/code&gt; and the many vendor prefixes that exist. A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. It helps keep your Sass very DRY. You can even pass in values to make your mixin more flexible. Here's an example for theme.

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;SCSS&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;
@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}

.info {
  &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 theme;
}
.alert {
  &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 theme($theme: DarkRed);
}
.success {
  &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 theme($theme: DarkGreen);
}
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;CSS&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;
.info {
  background: DarkGray;
  box-shadow: 0 0 1px rgba(169, 169, 169, 0.25);
  color: #fff;
}

.alert {
  background: DarkRed;
  box-shadow: 0 0 1px rgba(139, 0, 0, 0.25);
  color: #fff;
}

.success {
  background: DarkGreen;
  box-shadow: 0 0 1px rgba(0, 100, 0, 0.25);
  color: #fff;
}
&lt;/pre&gt;

&lt;h2&gt;&lt;/h2&gt;Inheritance in SASS or the ‘Extends’ keyword

&lt;p&gt;You can inherit or extend the properties of any class or other selectors using the &lt;code&gt;extends&lt;/code&gt; keyword in SASS.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;SCSS&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;
.general-container {
    width: 98%;
    max-width: 1440px;
}

.article-container {
    @extend .general-container;
    font-size: 16px;
}
&lt;/pre&gt;

&lt;p&gt;In the above snippet, we defined some styles in our &lt;code&gt;general-container&lt;/code&gt; class and using the extends keyword, we will be able to use the same styles in our &lt;code&gt;article-container&lt;/code&gt;.&lt;br&gt;
When compiled, he above code will result in the following CSS styles:&lt;/p&gt;

&lt;pre&gt;.general-container, .article-container {
    width: 98%;
    max-width: 1440px;
}

.article-container {
    font-size: 16px;
}
&lt;/pre&gt;

&lt;p&gt;Seems like magic :-D :-P&lt;/p&gt;

&lt;h1&gt;SASS - Built-in functions&lt;/h1&gt;

&lt;p&gt;SASS has many built in functions,we will just review a few of them.&lt;/p&gt;

&lt;h2&gt;For loops and Each loops:&lt;/h2&gt;

&lt;p&gt;You can use loops in SASS to write repetitive styles used in your applications like:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;CSS&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.col-1 {
    width: 100%;
}

.col-2 {
    width: 50%;
}

.col-3 {
    width: 33.33%
}

.col-4 {
    width: 25%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This above snippet can be converted to the following code using the SASS for loop feature:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;SCSS&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@for $width from 1 through 4 {
    .col-#{$width} {
        width: (100%/ $width );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;$width&lt;/code&gt; is the value of each iteration. Notice the use of the iterating value in the class-name. &lt;code&gt;#{$variable}&lt;/code&gt; — you can use this syntax anywhere in your SASS code to combine variables with other strings.&lt;br&gt;
Each loops in SASS can be used to iterate through Lists. Lists in SASS are basically arrays of some values. We can have a list of strings/names and traverse the same. The syntax of each loop is little different from for loop. It starts with &lt;code&gt;@each&lt;/code&gt; keyword and used &lt;code&gt;in&lt;/code&gt; instead of &lt;code&gt;through&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for making it to the end of this article. I have included some links at the end of this post for your reading pleasure.&lt;/p&gt;

&lt;h1&gt;Continue Reading:&lt;/h1&gt;

&lt;ul&gt;
    &lt;li&gt;
        &lt;a href="https://sass-lang.com/guide"&gt;
        Sass Basics 
        &lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href="https://sass-lang.com/install"&gt;
            Install SASS
        &lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href="https://thoughtbot.com/upcase/sass-fundamentals"&gt;
        SASS Fundamentals
        &lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href="https://teamtreehouse.com/library/sass-basics-2"&gt;
        SASS basics
        &lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href="https://levelup.gitconnected.com/the-useful-sass-features-in-a-nutshell-sass-cheatsheet-c5767340d43b"&gt;
        The Useful SASS Features in a Nutshell — SASS Cheatsheet
        &lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href="https://frontendmasters.com/courses/sass/"&gt;
        SASS Fundamentals
        &lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>sass</category>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Think Like a Programmer: Stepwise Refinement</title>
      <author>Edwin Torres ✨</author>
      <pubDate>Sat, 30 Oct 2021 20:12:43 +0000</pubDate>
      <link>https://dev.to/realedwintorres/think-like-a-programmer-stepwise-refinement-2cel</link>
      <guid>https://dev.to/realedwintorres/think-like-a-programmer-stepwise-refinement-2cel</guid>
      <description>&lt;p&gt;I see lots of posts about how to do &lt;em&gt;something&lt;/em&gt; in a particular programming language, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to center a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;How to use JavaScript promises&lt;/li&gt;
&lt;li&gt;How to create random numbers in Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I rarely see posts about &lt;em&gt;how to develop a program&lt;/em&gt;. Any tutorial or online resource can explain programming syntax. That is only part of the battle. Knowing how to choose, combine, and organize programming statements to solve a programming problem is the real challenge.&lt;/p&gt;

&lt;p&gt;One way to develop a program is what I call the &lt;em&gt;all or none&lt;/em&gt; approach. It is straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think about a solution&lt;/li&gt;
&lt;li&gt;Code the entire program: Line 1, 2, 3, ...&lt;/li&gt;
&lt;li&gt;Execute, test, and revise the program until it there are no more errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One problem with this approach is that the program may encounter numerous errors, making it difficult to debug and fix. There is a better way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stepwise refinement&lt;/strong&gt; is a programming technique where you start by looking at the problem at a high level. Then you break down the problem into smaller, more manageable components. Next, you develop and refine each component, at each level, step by step. Compile, execute, and test every step of the way. The process continues until all components are developed, with no need to break them down any further. It is an iterative approach where you develop the program a little bit at a time.&lt;/p&gt;

&lt;p&gt;Here is an example of stepwise refinement. Consider the following problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Convert Fahrenheit temperature to Celsius temperature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will write this program in Java. Using stepwise refinement, we break down that problem into subtasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accept Fahrenheit temperature as input.&lt;/li&gt;
&lt;li&gt;Calculate Celsius temperature.&lt;/li&gt;
&lt;li&gt;Output results.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We break down these subtasks even further. To &lt;em&gt;Accept Fahrenheit temperature as input&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prompt the user to enter a Fahrenheit temperature.&lt;/li&gt;
&lt;li&gt;Accept the temperature value as input.&lt;/li&gt;
&lt;li&gt;Store the temperature value in a variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, we can write a small program that only prompts the user to enter the Fahrenheit temperature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a Fahrenheit temperature: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now compile and execute the program. Make sure it works. Make sure the output is what you expect. If there are errors, it will be easy to debug, since the program is small.&lt;/p&gt;

&lt;p&gt;Once you are certain that the program works properly, continue to the next subtasks. Write code to accept the input Fahrenheit temperature and store the value in a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// NEW&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a Fahrenheit temperature: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// NEW&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;fahr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextDouble&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// NEW&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, compile, execute, and test. But you only need test the &lt;em&gt;new&lt;/em&gt; code, not the code from the previous iteration. Use a debugger or output statement to verify the value of the &lt;code&gt;fahr&lt;/code&gt; variable. Make sure the input value is what you expect. This completes the &lt;em&gt;Accept Fahrenheit temperature as input&lt;/em&gt; step.&lt;/p&gt;

&lt;p&gt;Now write the code for the &lt;em&gt;Calculate Celsius temperature&lt;/em&gt; step. With much of the program already written, this step only requires a little research to find the formula and just one new line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a Fahrenheit temperature: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;fahr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextDouble&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;cels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fahr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// NEW&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compile, execute, and test. Use a debugger or output statement to verify the value of the &lt;code&gt;cels&lt;/code&gt; variable. Make sure the value is correct.&lt;/p&gt;

&lt;p&gt;The last step is the &lt;em&gt;Output results&lt;/em&gt; subtask:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a Fahrenheit temperature: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;fahr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextDouble&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;cels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fahr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fahr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"degrees Fahrenheit is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cels&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" degrees Celsius."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// NEW&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compile, execute, and test. Verify that the output statement is correct. If it is not, revise and repeat.&lt;/p&gt;

&lt;p&gt;This sample problem may be simple enough to solve using the &lt;em&gt;all or none&lt;/em&gt; programming approach. But the example demonstrates stepwise refinement, which is useful when solving more complicated programming problems. Break them down into more manageable subtasks and so on. Code a little bit at a time, execute, test, and repeat. Develop the program incrementally. Fix problems along the way. This will make complicated programming problems a lot easier to solve.&lt;/p&gt;

&lt;p&gt;Thanks for reading. 😃&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for more programming tips and help.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>HTML - Let's Talk About Semantics</title>
      <author>Atif Aiman</author>
      <pubDate>Sat, 30 Oct 2021 20:08:30 +0000</pubDate>
      <link>https://dev.to/alserembani/html-lets-talk-about-semantics-4jo4</link>
      <guid>https://dev.to/alserembani/html-lets-talk-about-semantics-4jo4</guid>
      <description>&lt;p&gt;Salam and hello, folks!&lt;/p&gt;

&lt;p&gt;Today, let's discuss semantics. So, what's about it?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#semantics"&gt;
  &lt;/a&gt;
  Semantics
&lt;/h2&gt;

&lt;p&gt;So, what is the dictionary meaning of semantics?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Semantics is the study of meaning, reference, or truth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, how about in the computer science field?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Semantics is the field concerned with the rigorous mathematical study of the meaning of programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, put it easy, semantics is a way to understand easily what programming syntax means, so your code will be easily read, or the right word is "more verbose".&lt;/p&gt;

&lt;p&gt;Is it just about you able to read the code? Let's proceed with the discussion.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-screen-readers"&gt;
  &lt;/a&gt;
  The screen readers
&lt;/h2&gt;

&lt;p&gt;Technology in general, and specifically the web, is not just about doing the products, but beyond that. Delivering a quality web means that more and more audiences can benefit from it, whether they are visually challenged or not, or anything that makes the experience of visiting the web difficult. At least, that is one of definitions that I come up with throughout my years (though it is still little compared to other "lions" in the web development industry).&lt;/p&gt;

&lt;p&gt;To assist these kinds of difficulties, semantics are some aspects that should be highlighted, so screen readers can recognise each element inside your HTML, and people that require accessibilities can benefit from it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#crawlers"&gt;
  &lt;/a&gt;
  Crawlers
&lt;/h2&gt;

&lt;p&gt;Other than that, there is an entity that will crawl through your page and see what your page features. Other than all your Meta tags (oooops.. I mean, meta tags), crawlers will crawl through your DOM and see what is inside your content and try to classify based on the content.&lt;/p&gt;

&lt;p&gt;That is why semantics is important if you really prioritise your Search Engine Optimisation (SEO), so crawlers can keep their eyes on your pages and serve them to the deserving audience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#verbosity"&gt;
  &lt;/a&gt;
  Verbosity
&lt;/h2&gt;

&lt;p&gt;And of course, for developer experience, verbosity is one of the scoring points so your page can be easily maintained. Providing the elements gives a contextual meaning, the readers, whether the technical or non-technical ones, can distinguish which part of your code needs to pay attention to when the time comes.&lt;/p&gt;

&lt;p&gt;Okay, so my point is - semantics is quite important for these aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Verbosity&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe there are a lot more reasons for semantics, so put in the comments below what you think about semantics 👇&lt;/p&gt;

&lt;p&gt;So..... onto the HTML!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#semantics-in-html"&gt;
  &lt;/a&gt;
  Semantics in HTML
&lt;/h2&gt;

&lt;p&gt;So, what about semantics in HTML? All the elements in HTML do give meaning to what you want to put inside it, whether it contains navigations, or information, or maybe emphasising the content. It's up to you of course, but improving your HTML elements does give a lot of benefit to the audience 🧑 and the robot 🤖.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals"&gt;Text&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello DEVto!&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as paragraph element &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, displaying text to the user. So to tell that the tag is a title, you may use class or style to indicate that is the title, sure. Let's do just that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello DEVto!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is this a good practice? Well, it is subjective whether it is right or wrong, but to help screen readers and crawlers to understand your content, you can use several other tags that can assist you there, and improve the styling using those tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Headings (title) =&amp;gt; &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;
Text highlights =&amp;gt; &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;sub&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;abbr&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
Text formatting only =&amp;gt; &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can actually wrap your text without any of these tags, but I would not recommend that practice, because screen readers won't know what those text contexts refer to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Not recommended
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Hello DEVto&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

Instead,
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello DEVto&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#containers"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Semantics"&gt;Containers&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello DEVto&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have seen a lot of pages that use &lt;code&gt;div&lt;/code&gt; elements, and that is okay. Of course, &lt;code&gt;div&lt;/code&gt; is a way to containerise your content, but oftentimes, I see the &lt;code&gt;div&lt;/code&gt; element is abused, especially used for button 💀. Not exactly abused, but it is better to give it meaningful context.&lt;/p&gt;

&lt;p&gt;For example, for navigation, you can use the &lt;code&gt;nav&lt;/code&gt; element. You can put all your navigation content inside &lt;code&gt;nav&lt;/code&gt;, so your crawlers understand that the division represents your page navigation or any navigation context you intend to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Navigation =&amp;gt; &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
Layouts =&amp;gt; &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
Contexts =&amp;gt; &lt;span class="nt"&gt;&amp;lt;mark&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forms"&gt;
  &lt;/a&gt;
  Forms
&lt;/h3&gt;

&lt;p&gt;Most of the websites nowadays required input from users, whether for newsletters, or registration, or login, or the exact thing I did so this article can be read by you!&lt;/p&gt;

&lt;p&gt;Usually, for simple single input, I can just put &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. But for more than two inputs, I will use &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; for the purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  For simple input =&amp;gt; &lt;span class="nt"&gt;&amp;lt;input&amp;gt;&lt;/span&gt;
  For more diverse options =&amp;gt; &lt;span class="nt"&gt;&amp;lt;select&amp;gt;&amp;lt;option&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;textarea&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;meter&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;datalist&amp;gt;&lt;/span&gt;
  For labeling =&amp;gt; &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;legend&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;progress&amp;gt;&lt;/span&gt;
  For actions =&amp;gt; &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But heed my advice. &lt;strong&gt;NEVER USE DIV FOR BUTTONS&lt;/strong&gt; for screen won't detect it for keyboard users. This is what I am talking about regarding people abusing &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; for buttons.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-existing-semantic-elements"&gt;
  &lt;/a&gt;
  Other existing semantic elements
&lt;/h3&gt;

&lt;p&gt;Well, of course, there are other elements that already have contexts within.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt; - &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;:&lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;:&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; and &lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt; for list, &lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt; for more advanced list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, there are actually &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;a rough total of 100 semantic elements&lt;/a&gt; you can use to give more meaning of course!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-semantic-a-must"&gt;
  &lt;/a&gt;
  Is semantic a must?
&lt;/h2&gt;

&lt;p&gt;Well, I wouldn't say you have to, but try to improve your content, so others can benefit from it, and might as well help you in future for your page discovery! The reason behind my writing today is about encouraging web developers to pay attention to semantics.&lt;/p&gt;

&lt;p&gt;You might be thinking "There are a lot of tags that I have to know then". Well, HTML elements are interchangeable, which means that changing from &lt;code&gt;div&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt; doesn't break any of your page content, as long as you know which context it belongs to, so improvisation can even come later, given if you still have the motivation to go to your code and replace it 🤨.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#my-personal-approach"&gt;
  &lt;/a&gt;
  My personal approach
&lt;/h2&gt;

&lt;p&gt;Oftentimes, you want to make your design system first before creating your content. You can standardise your content globally using these semantic tags. For example, in my CSS sheet;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, later you want to develop more complex components, so then you will utilise class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with Tailwind utilities&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-blue-500;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these, your design system will be organised, standardised, and easy to debug later on. Well, it is up to the developer in which they prefer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-next-after-semantics"&gt;
  &lt;/a&gt;
  What next after semantics?
&lt;/h2&gt;

&lt;p&gt;If you are into semantics, you might be interested in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"&gt;ARIA standards in HTML&lt;/a&gt;, where it really boost experience in screen reading and accessibility.&lt;/p&gt;

&lt;p&gt;Well, what is your opinion in semantics? Write what you think below, and keep the discussion healthy. A meme or two should be okay for a little bit fun, but keep it in context.&lt;/p&gt;

&lt;p&gt;That's it for this week. And for that, have some rest, and peace be upon ya!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Calendar using Vanilla JS</title>
      <author>Harshita Nahta</author>
      <pubDate>Sat, 30 Oct 2021 20:03:02 +0000</pubDate>
      <link>https://dev.to/harshitanahta/calendar-using-vanilla-js-2g5m</link>
      <guid>https://dev.to/harshitanahta/calendar-using-vanilla-js-2g5m</guid>
      <description>&lt;p&gt;Hola!&lt;br&gt;
In this busy world Having a calendar is often a handy feature to have.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/harshita-nahta/embed/PoKpRVp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There many calendar libraries out, components out there but&lt;br&gt;
I tried to create a Calendar Using Vanilla JS, where I can move through the months. lets see how I have done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;weekdays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;thu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fri&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;months&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Feb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Apr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jul&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sept&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oct&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nov&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we need a function which checks for leap year to set no of days in a month&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;checkLeapYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;setYear&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setYear&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setYear&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;monthdays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Feb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;checkLeapYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Apr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jul&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sept&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oct&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nov&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set Top bar for calendar&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setTopDate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-selected="full-date"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;setYear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;set colspan for 1st row so that it should show empty column for the weekdays before 1st date of the month&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setFirstColspan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;monthdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ele&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;monthdate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colspan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;monthdate&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nx"&gt;setCalendarData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;monthdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setLastColspan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;finally set calendar data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setCalendarData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;monthdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;monthdate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tempMonthDays&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;monthdays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;tempMonthDays&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;tempMonthDays&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we also need to set colspan for last row empty columns&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setLastColspan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ele_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ele&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;ele_len&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colspan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;on change of month if user pressed on previous month the operation="prev" else if user want to move to next month the operation in that case is "next"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ele&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
  &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
     &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setTopDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setFirstDay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add some css to style the calendar&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.actions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.actions-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.next-button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;border-radius&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3d3d3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.prev-button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;border-radius&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3d3d3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;offwhite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;colspan&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;lightgrey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#3d3d3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;hope you understood and liked this little program&lt;br&gt;
Happy Developing!&lt;/p&gt;

&lt;p&gt;for reference :&lt;br&gt;
codepen - &lt;a href="https://codepen.io/harshita-nahta/pen/PoKpRVp"&gt;https://codepen.io/harshita-nahta/pen/PoKpRVp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Let’s Develop an E-Commerce Application from Scratch Using Spring Boot and Vue.js</title>
      <author>Nil Madhab</author>
      <pubDate>Sat, 30 Oct 2021 19:32:16 +0000</pubDate>
      <link>https://dev.to/nilmadhabmondal/lets-develop-an-e-commerce-application-from-scratch-using-spring-boot-and-vuejs-2lm0</link>
      <guid>https://dev.to/nilmadhabmondal/lets-develop-an-e-commerce-application-from-scratch-using-spring-boot-and-vuejs-2lm0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#project-set-up-and-building-admin-panel-for-managing-category-in-vuejs"&gt;
  &lt;/a&gt;
  Project set up and building admin panel for managing Category in Vue.js
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;In my opinion, the best way to learn programming is to create a real-life project which has practical use. This way, the entire learning experience becomes quite exciting. Also, you can showcase your app in your portfolio, which can help you a lot if you want to land a freelancing gig or in an interview.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#this-tutorial-is-perfect-for-people-who-are-starting-their-journey-in-vuejs-as-we-build-it-from-scratch-integrate-remote-api-call-router-break-down-ui-into-components-form-handling-as-well-as-cover-some-important-concepts-like-vmodel-von"&gt;
  &lt;/a&gt;
  This tutorial is perfect for people who are starting their journey in Vue.js as we build it from scratch, integrate remote API call, router, break down UI into components, form handling as well as cover some important concepts like v-model, v-on.
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this series of blogs, you will amplify your development skills by learning how to build an e-commerce platform from scratch. I am good at backend development, and I wanted to learn Vue.js, so I learned it by creating this project. I wanted to share what I built, so I choose medium.com to share my journey.&lt;/p&gt;

&lt;p&gt;Video tutorial&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PDDXAztk6xg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note-to-the-reader"&gt;
  &lt;/a&gt;
  Note to the reader
&lt;/h2&gt;

&lt;p&gt;Although I have built the entire application and wrote series of &lt;a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f"&gt;tutorials&lt;/a&gt;, which are quite popular and top in google result, which I am very proud of, (more than 130K views in medium alone) I later found some parts are missing from those tutorials and some tutorials are not relevant anymore. For example, in some tutorials, we used vanilla JS and also started to develop an android app, which we discarded later. Also, the detailed explanation for each part was missing, as my focus was to build the application, less on writing tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaI-PBSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AE_S48on3P7vpI75SX4zMOQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaI-PBSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AE_S48on3P7vpI75SX4zMOQ.png" alt="" width="851" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, this is my attempt to redo the tutorials, deleting/editing some parts which are not relevant anymore and creating some tutorials which cover the missing pieces, so it will be very easy for the users to follow the tutorials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-tutorial"&gt;
  &lt;/a&gt;
  Backend Tutorial
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nilmadhabmondal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OpzD2Hie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Zb1A-zgX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/550216/8c33f5c6-db02-4573-8807-087913986856.jpg" alt="nilmadhabmondal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nilmadhabmondal/lets-develop-an-e-commerce-application-from-scratch-using-java-and-spring-28go" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Develop an E-Commerce Application from Scratch Using Java and Spring&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ Oct 29 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-we-will-cover-in-the-tutorial"&gt;
  &lt;/a&gt;
  What we will cover in the tutorial
&lt;/h2&gt;

&lt;p&gt;This tutorial will focus on the front-end.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set up a Vue.js project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure router, API call, sweet alert&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a dashboard to list all the categories present in the backend&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding and Editing Categories.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As part of building an E-Commerce application, previously we have configured the back end of this App and developed some APIs using Spring boot. If you are interested, you can check out this &lt;a href="https://dev.to/nilmadhabmondal/lets-develop-an-e-commerce-application-from-scratch-using-java-and-spring-28go"&gt;tutorial&lt;/a&gt;. But if you are only interested in the front-end, you can start directly from here.&lt;/p&gt;

&lt;p&gt;Every e-commerce store like Amazon will have millions of products, and they often belong to a category. For example, a shoe category consists of many shoes which are products. There can be a category, a sub-category, but for simplicity, we will just take categories and products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OEmDkpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ASiNToBQgtsPUrXfpAdk_0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OEmDkpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ASiNToBQgtsPUrXfpAdk_0w.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let us see how to configure the front-end and create the user interface for category using one of the most popular JavaScript frameworks — Vue.js. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-demo"&gt;
  &lt;/a&gt;
  Final Demo
&lt;/h2&gt;

&lt;p&gt;At the end of the tutorial, we will&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;list all categories&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwiIPBMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2596/1%2AMB6aoXw_YhFz6z-OkVlhMA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwiIPBMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2596/1%2AMB6aoXw_YhFz6z-OkVlhMA.png" alt="" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a new category&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gYysOVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3240/1%2AgH52b663GaVfVP03n-73Gg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gYysOVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3240/1%2AgH52b663GaVfVP03n-73Gg.png" alt="" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a category&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8fOvjiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A6UkmaAjlkpmz_E2CxNXFRg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8fOvjiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A6UkmaAjlkpmz_E2CxNXFRg.png" alt="" width="754" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-the-project"&gt;
  &lt;/a&gt;
  Start the project
&lt;/h2&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzwpDhp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6962/0%2Aa9HbxKloNHUNXK02" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzwpDhp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6962/0%2Aa9HbxKloNHUNXK02" alt="Photo by [Braden Collum](https://unsplash.com/@bradencollum?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the command line and execute the following command to initiate a new Vue project, assuming you have vue.js installed or go to this &lt;a href="https://v3.vuejs.org/guide/installation.htm"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; vue create ecommerce-ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The command should work properly if you already have Vue CLI installed. Next, it will ask for some project configurations. Give the following data for configuring our front end Vue app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aC72bzPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2594/1%2AgQaMQVZVo-4uLF-v1Fk5Qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aC72bzPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2594/1%2AgQaMQVZVo-4uLF-v1Fk5Qg.png" alt="" width="880" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After confirming all the details, we will have a project folder created for us by Vue CLI.&lt;/p&gt;

&lt;p&gt;Go to the project folder and give the following command to run the application&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;After the server got hosted and the application is started, you can go to &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;. The response should be something similar to the output, as below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIjZve8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2386/1%2AAb9tW8hDJtmChUPoU5jmxQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIjZve8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2386/1%2AAb9tW8hDJtmChUPoU5jmxQ.png" alt="" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay! We have created our Vue app. Already off to a good start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OP2Zs7Rl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/10944/0%2AMZ9OVQ5HC1wZD0fp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OP2Zs7Rl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/10944/0%2AMZ9OVQ5HC1wZD0fp" alt="Photo by [Peter Conlan](https://unsplash.com/@peterconlan?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project will have some files with .vue extension, which are called Vue components.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vue-components"&gt;
  &lt;/a&gt;
  Vue Components
&lt;/h2&gt;

&lt;p&gt;Almost all frontend frameworks allow us to create components that we can reuse at multiple places on the same or different websites. Some examples include a search bar, login form, product display component, etc. In Vue, files with “.vue” extension are known as single file components. These single file components are composed of HTML, JavaScript, and CSS.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;!-- HTML Template --&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  export default {}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The template part contains the HTML of the component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script tag contains the code defining the custom behavior of the component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The style tag houses the CSS of the component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;src/components and src/views contain all our components.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjVyjZ7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Agy9wCp55fKXeYyQDOsWNrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjVyjZ7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Agy9wCp55fKXeYyQDOsWNrg.png" alt="" width="445" height="611"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h2&gt;

&lt;p&gt;Let’s go through the folder structure of our newly created Vue project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;public&lt;/strong&gt; — contains the main HTML file of our project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;src/assets&lt;/strong&gt; — stores the media files like images, logos, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;src/components&lt;/strong&gt; — stores all the reusable components of our project. These components are not unique to some specific route.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this, we have some important files too&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App.vue&lt;/strong&gt; — it is the root component of our project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;main.js&lt;/strong&gt; — it is the starting point of our project. Here we import our root component &lt;strong&gt;App.vue&lt;/strong&gt;, our router file &lt;strong&gt;index.js&lt;/strong&gt; and &lt;strong&gt;createApp&lt;/strong&gt; method. After this, we mount our root component to the DOM using the following statement:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    new Vue({
      render: h =&amp;gt; h(App),
    }).$mount('#app')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The folder structure is not enforced by Vue, we can customize this as per our requirements.&lt;/p&gt;

&lt;p&gt;And now we have our basic version of the front-end of our App where we will work more to add more functionalities. The basic project structure can be found in the following GitHub repository.&lt;br&gt;
&lt;a href="https://github.com/webtutsplus/ecommerce-ui/tree/setup"&gt;&lt;strong&gt;GitHub — webtutsplus/ecommerce-ui at setup&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-ui-for-category"&gt;
  &lt;/a&gt;
  Building the UI for Category
&lt;/h2&gt;

&lt;p&gt;Once the basic structure is ready, we will start building the dashboard for categories.&lt;/p&gt;

&lt;p&gt;We will first add a router to our project. Run the following command in your command line to install the Vue router in your system&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue add router
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;When asked to choose history mode, choose yes. Now if you run the app, you will see two links in the above.&lt;/p&gt;

&lt;p&gt;It will create a router directory with index.js file inside it. Also, it will create a views directory, with two files inside it, which are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;About.vue&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Home.vue&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nosex5Ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AsBUmn5YGv5tL_zNEBKB6Xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nosex5Ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AsBUmn5YGv5tL_zNEBKB6Xg.png" alt="" width="365" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you run the front end application using the command &lt;strong&gt;&lt;em&gt;npm run serve&lt;/em&gt;&lt;/strong&gt;, you will see two links on thehomepage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j03Z_D37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ayz6zkuZVOLDJ8jsA3Mxjbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j03Z_D37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ayz6zkuZVOLDJ8jsA3Mxjbw.png" alt="" width="880" height="860"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Trfp0xx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AORA6PBsfHL2qR0IzPd0ISg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Trfp0xx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AORA6PBsfHL2qR0IzPd0ISg.png" alt="" width="603" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still have Helloworld component, let’s delete that. Also delete lines 4 and 10 and 15 from Home.vue, containing the Vue logo image and references to HelloWorld.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
If you run the app, you will see the following screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ePwhxBUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArgGoP5WwMRXrvbSgLBEaSA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ePwhxBUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArgGoP5WwMRXrvbSgLBEaSA.png" alt="" width="840" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-app"&gt;
  &lt;/a&gt;
  Styling the App
&lt;/h3&gt;

&lt;p&gt;Open the file index.html and replace the content with the following code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We just added some basic fonts, bootstrap.css and jQuery.
&lt;h2&gt;
  &lt;a href="#adding-a-category"&gt;
  &lt;/a&gt;
  Adding a Category
&lt;/h2&gt;

&lt;p&gt;Time to create a form for adding category.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We will create a directory Category inside the views directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file *AddCategory.vue *inside it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the content given below, which contains the form that takes input data for creating a category&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#vmodel-binding-concept"&gt;
  &lt;/a&gt;
  v-model binding concept
&lt;/h3&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, in the form, we have used v-model=”categoryName”. This is an important concept in Vue.js called &lt;a href="https://vuejs.org/v2/guide/forms.html"&gt;Form Input Bindings&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#you-can-use-the-vmodel-directive-to-create-twoway-data-bindings-on-form-input-textarea-and-select-elements-it-automatically-picks-the-correct-way-to-update-the-element-based-on-the-input-type-although-a-bit-magical-vmodel-is-essentially-syntax-sugar-for-updating-data-on-user-input-events-plus-special-care-for-some-edge-casesupdating-router-paths"&gt;
  &lt;/a&gt;
  You can use the v-model directive to create two-way data bindings on form input, textarea, and select elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical, v-model is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.Updating Router Paths
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;For our single-page application to run properly, we need to create router paths for our newly created components. Go to src/router/index.js file and update it as below by adding as well as importing AddCategory component.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    path: "/admin/category/add",
    name: "AddCategory",
    component: AddCategory,
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&amp;gt; # Notice although we have vue components both in views and components directory, the main difference is we use vue components in views directory to use in router, i.e each vue components in views directory mapped to a route.&lt;/p&gt;

&lt;p&gt;Now if we go to the page &lt;a href="http://localhost:8080/admin/category/add"&gt;http://localhost:8080/admin/category/add&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--66hrQffB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2490/1%2A_vFIdmIAYW4fdX5EJCe8QA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--66hrQffB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2490/1%2A_vFIdmIAYW4fdX5EJCe8QA.png" alt="" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#axios-and-sweetalert-integration"&gt;
  &lt;/a&gt;
  Axios and sweetalert integration
&lt;/h3&gt;

&lt;p&gt;Axios is a popular, promise-based HTTP client that sports an easy-to-use API and can be used in both the browser and Node&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the command npm install --save axios&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We add the following line in main.js window.axios = require('axios')&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We will also install the package npm install --save sweetalert&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#api-call"&gt;
  &lt;/a&gt;
  API call
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;First, we will trigger addCategory function, by clicking the submit button. We can do it easily by adding the code @click="addCategory" in submit button, so it looks like this
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

We will define a function in the methods section inside the script tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#base-url"&gt;
  &lt;/a&gt;
  Base url
&lt;/h3&gt;

&lt;p&gt;We have hosted our backend on Heroku, which you can access by the endpoint, &lt;a href="https://limitless-lake-55070.herokuapp.com/swagger-ui.html#/category-controller/getCategoriesUsingGET"&gt;https://limitless-lake-55070.herokuapp.com/swagger-ui.html#/category-controller&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will define &lt;a href="https://limitless-lake-55070.herokuapp.com/"&gt;https://limitless-lake-55070.herokuapp.com/&lt;/a&gt; as our base url and to create a new category, we need to hit,&lt;/p&gt;

&lt;p&gt;For adding a new category, we need to hit the baseURL + “category/create” with this JSON with a post request, of request body.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Which we will implement in the script section.&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UGScQLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2256/1%2AqOyjueQLHgE1HozHbdKyhw.png" alt="" width="880" height="415"&gt;

&lt;p&gt;The complete code until this stage of this application can be found in the GitHub repository given below.&lt;br&gt;
&lt;a href="https://github.com/webtutsplus/ecommerce-ui/tree/category-add"&gt;&lt;strong&gt;GitHub — webtutsplus/ecommerce-ui at category-add&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvwi2Lpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2ABClSZbSwiZ6H_mwj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvwi2Lpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2ABClSZbSwiZ6H_mwj" alt="Photo by [IA SB](https://unsplash.com/@iasb?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice job guys, if you succeeded in making it so far. Next, we will start with displaying the categories. If not, you can run the above Github repo in your local machine, it should work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#displaying-the-categories"&gt;
  &lt;/a&gt;
  Displaying the Categories
&lt;/h2&gt;

&lt;p&gt;Now, we can create a new category, time to display all the categories in a nice manner.&lt;/p&gt;

&lt;p&gt;Our final result of displaying the categories will be as shown below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tC3C-iaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArpdeQRKI4XkjRwNA7r8mYw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tC3C-iaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArpdeQRKI4XkjRwNA7r8mYw.png" alt="" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-breakdown"&gt;
  &lt;/a&gt;
  Component Breakdown
&lt;/h2&gt;

&lt;p&gt;To display all the categories, we need to create a view for that. Create a file named Category.vue under src/views/Category folder. This view is used to display the categories that are fetched from the database. This view also holds the references that will redirect us to AddCategory view.&lt;/p&gt;

&lt;p&gt;In modern frontend framework like Vue.js/react, we break down our UI into small components for reusability.&lt;/p&gt;

&lt;p&gt;Here we will also break down this by each category. This will be a component-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ulvcm0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbjOPGgszAqGaXnvQJ5tKKw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ulvcm0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbjOPGgszAqGaXnvQJ5tKKw.png" alt="" width="592" height="621"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#categoryboxvue-component"&gt;
  &lt;/a&gt;
  CategoryBox.vue component
&lt;/h2&gt;

&lt;p&gt;We will create a directory Category in src/components and create CategoryBox.vue file in it.&lt;/p&gt;

&lt;p&gt;It will have a prop category which will be passed from a parent view, and it will just display the category with an option to go to the edit page, which we will build in the next chapter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#categoryvue-component"&gt;
  &lt;/a&gt;
  Category.vue component
&lt;/h2&gt;

&lt;p&gt;Now it’s time to create the component for listing all the categories!&lt;/p&gt;

&lt;p&gt;This component fetches the categories from the back-end using axios and passes each category as a prop to CategoryBox component, which displays each category. Finally, the component will be a collection of categories displayed in CategoryBox components.&lt;/p&gt;

&lt;p&gt;Go to src/views/Category/Category.vue file that we have already created and update it with the following code!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#updating-the-routes"&gt;
  &lt;/a&gt;
  Updating the Routes
&lt;/h2&gt;

&lt;p&gt;And as the final step, let us create the router path for this component to display all the categories. The following route will be appended to the routes-&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    path: "/admin/category",
    name: "AdminCategory",
    component: Category,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The complete index.js file is as below-&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue from "vue";
import VueRouter from "vue-router";
import AddCategory from "../views/Category/AddCategory";
import Category from "../views/Category/Category";

Vue.use(VueRouter);

const routes = [
  {
    path: "/",
    name: "Home",
    component: Home,
  },
  {
    path: "/about",
    name: "About",
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () =&amp;gt;
      import(/* webpackChunkName: "about" */ "../views/About.vue"),
  },
  {
    path: "/admin/category/add",
    name: "AddCategory",
    component: AddCategory,
  },
  {
    path: "/admin/category",
    name: "AdminCategory",
    component: Category,
  },
];

const router = new VueRouter({
  mode: "history",
  base: process.env.BASE_URL,
  routes,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsJ3os7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2372/1%2AG0FATh9mPwtfPWCtrVM1LQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsJ3os7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2372/1%2AG0FATh9mPwtfPWCtrVM1LQ.png" alt="" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The complete code until this stage of the application can be found in the GitHub repository given below-&lt;br&gt;
&lt;a href="https://github.com/webtutsplus/ecommerce-ui/tree/category-display"&gt;&lt;strong&gt;GitHub — webtutsplus/ecommerce-ui at category-display&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kH7WlNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6064/0%2AMaB9sxu8wsq2LBUz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kH7WlNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6064/0%2AMaB9sxu8wsq2LBUz" alt="Photo by [Nick Fewings](https://unsplash.com/@jannerboy62?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep going on guys. Next, we will move to editing category.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#editing-a-category"&gt;
  &lt;/a&gt;
  Editing a Category
&lt;/h2&gt;

&lt;p&gt;Open src/views/Category folder and create a file for EditCategory view with the boilerplate code as below.&lt;/p&gt;

&lt;p&gt;Pretty simple, we are just defining the three sections, template, script and style.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-the-form"&gt;
  &lt;/a&gt;
  Add the form
&lt;/h2&gt;

&lt;p&gt;Now, we will add the form to edit the category. It will be a form similar to AddCategory view. We also define 5 variables id, categoryName, description, imageUrl, categoryIndex and initialize those to null. We will also define the baseUrl&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#send-the-category-data-to-view"&gt;
  &lt;/a&gt;
  Send the category data to view
&lt;/h2&gt;

&lt;p&gt;Now the question is how do we get the data from the Category home page to this view. The answer is simple. First, we create a router for the view. We set props: true at line 5. We will pass the Category data which we need to edit as prop.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#add-option-to-edit"&gt;
  &lt;/a&gt;
  Add option to edit
&lt;/h2&gt;

&lt;p&gt;Now, we will add an option to edit a category in the CategoryBox. Line number 10–12.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQQeaH_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AsyXZUPc9Op9zjoPk3Ez_2Q.png" alt="" width="880" height="313"&gt;

&lt;h2&gt;
  &lt;a href="#update-the-script"&gt;
  &lt;/a&gt;
  Update the script
&lt;/h2&gt;

&lt;p&gt;Now, we will create one prop category and in the mounted section we populate all the data.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
That’s it, now if we click the edit button in categoryBox, we will see the data.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IXetZD4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3074/1%2AsEs9WyAfWpZXXzizA6Hi_Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IXetZD4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3074/1%2AsEs9WyAfWpZXXzizA6Hi_Q.png" alt="" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-call-to-save-the-data"&gt;
  &lt;/a&gt;
  API call to save the data
&lt;/h2&gt;

&lt;p&gt;Now, we have only one thing left, how to update the data in the remote server?&lt;/p&gt;

&lt;p&gt;We will define a function editCategory in the method section. We will call this function in the submit button.&lt;/p&gt;

&lt;p&gt;Submit&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHcXIdUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2294/1%2AoSo4wA1XSSJpJbwGj03GfQ.png" alt="" width="880" height="450"&gt;

&lt;p&gt;The complete code for EditCategory.vue&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
The complete project for this tutorial can be found in the GitHub repository given below-&lt;br&gt;
&lt;a href="https://github.com/webtutsplus/ecommerce-ui/tree/category-edit"&gt;GitHub — webtutsplus/ecommerce-ui at category-edit&lt;/a&gt;

&lt;p&gt;Hurray! We have completed the part of building the front end to create categories using Vue.js! But wait! There are a lot more to learn in this tutorial series! Stay tuned until then!&lt;/p&gt;

&lt;p&gt;Let me know in comment, if you like the tutorial, or you like any improvement to understand it better,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>👨‍💻[FirstDevRole #3] How to Write an Effective CV/Resume for a Programmer Role if You Have No Work Experience</title>
      <author>Antonio Pekeljevic</author>
      <pubDate>Sat, 30 Oct 2021 18:51:31 +0000</pubDate>
      <link>https://dev.to/antoniopk/firstdevrole-2-how-to-write-an-effective-cvresume-for-a-programmer-role-if-you-have-no-work-experience-35mb</link>
      <guid>https://dev.to/antoniopk/firstdevrole-2-how-to-write-an-effective-cvresume-for-a-programmer-role-if-you-have-no-work-experience-35mb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#short-intro"&gt;
  &lt;/a&gt;
  Short Intro
&lt;/h2&gt;

&lt;p&gt;In this article of the FirstDevRole series I want to share my knowledge about how to make a CV/Resume effective when preparing to apply for a developer role if you have no previous work experience in the IT field.&lt;br&gt;
I will share a structure of what I think is good for a CV, what to include and what not to include.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note that the advice I will write has proven to be effective in my case but there are also other ways to do it.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-things-to-consider"&gt;
  &lt;/a&gt;
  General Things to Consider
&lt;/h2&gt;

&lt;p&gt;These are some things that you should have in mind when creating your resume. Again, all of this based on my research and through trial and error.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It would be the best if you tailor each resume to the job post you are applying to vs. having a "one size fits all" resume.&lt;/li&gt;
&lt;li&gt;Google about country specific rules regarding resumes - for example some countries prefer a more conservative design (black and white), some prefer colors. Google will give you an answer about that.&lt;/li&gt;
&lt;li&gt;File format should be PDF and text selectable. Reason is that some companies run your CV through an automatic "CV scanner" and depending on the result it decides if you can move forward. That automatic mechanism can only detect selectable text so don't make your resume an image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#effective-structure"&gt;
  &lt;/a&gt;
  Effective Structure
&lt;/h2&gt;

&lt;p&gt;Below you can see the structure that I use for my personal resume which has proven to be very effective. It contains all crucial information on a single page which makes it easy for the reader to scan it in a short amount of time so I would highly suggest to use this structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQsK6SZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6nnpr66osmll8hum23a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQsK6SZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6nnpr66osmll8hum23a.png" alt="cvstructure.png" width="880" height="1245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you gave the overall resume structure a look, I will continue with explaining what each section should contain and what not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#header"&gt;
  &lt;/a&gt;
  Header
&lt;/h3&gt;

&lt;p&gt;The header should contain only your first name, last name and optionally your vocation.&lt;br&gt;
If you have a logo then you can include that too.&lt;br&gt;
Make the area clean and breathable by not stuffing anything else in there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu3Oueey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/33F5USzk3gJdZTinpS/giphy.gif%3Fcid%3D790b761125878621e3edefc198916ef70e365b5a71a0fcc5%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu3Oueey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/33F5USzk3gJdZTinpS/giphy.gif%3Fcid%3D790b761125878621e3edefc198916ef70e365b5a71a0fcc5%26rid%3Dgiphy.gif%26ct%3Dg" alt="fresh air" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#side-content"&gt;
  &lt;/a&gt;
  Side Content
&lt;/h3&gt;

&lt;p&gt;Side content should be a narrower section of the resume on either side of the main content and it should contain the following:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#personal-information"&gt;
  &lt;/a&gt;
  Personal Information
&lt;/h4&gt;

&lt;p&gt;Here is what to put here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your geographical location (only the city and the country). Don't put your exact address here.&lt;/li&gt;
&lt;li&gt;Your contact email&lt;/li&gt;
&lt;li&gt;Contact phone number&lt;/li&gt;
&lt;li&gt;A link to your portfolio website and/or GitHub profile&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#skills-programming-languages"&gt;
  &lt;/a&gt;
  Skills (programming languages)
&lt;/h4&gt;

&lt;p&gt;After analyzing the job requirements put all relevant skills that you posses here. It's the best if you make a list of them one by one. Don't include any form of skill ratings because it doesn't tell much to the reader anyway and it could in some cases make you less desirable for the position. &lt;/p&gt;

&lt;p&gt;People often ask me how to know which skills to include and which not. The answer is pretty simple. Include the skills that are listed in the job post PLUS all other skills that you consider yourself to be good at. That is, put any programming language that you used to create a project by yourself but don't put programming languages which you only used to create a Hello World application or just followed one tutorial. &lt;/p&gt;

&lt;p&gt;Here is how to know if you are good at something or at a programming language to be precise. Ask yourself this question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If someone gave me a random task to do in that programming language, would I be able to do it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the answer is yes then you are confident enough to list the language/skill to along with the required skills that you should obviously posses. If the answer is no, I would really think about if I should list it as a skill.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#languages"&gt;
  &lt;/a&gt;
  Languages
&lt;/h4&gt;

&lt;p&gt;List your native language and other languages that you know. &lt;br&gt;
Rate your level of proficiency for each listed language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-content"&gt;
  &lt;/a&gt;
  Main Content
&lt;/h3&gt;

&lt;p&gt;This is the area where your content that takes more space should be located in. &lt;br&gt;
Also notice the order of sections. I would suggest to keep this order that especially applies to the Summary section since that is your "pitch to sell yourself".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;This section is in my opinion the most important section of your resume. It's the first section that your future employer/HR person will look at and decide if he/she should keep reading. Usually the time spend on looking at a resume is about 6 seconds before the reader decides if it's interesting enough to keep reading further. &lt;br&gt;
Basically, in most cases if you don't "sell" yourself in the Summary section then the chances that the reader will keep on reading are quite low.&lt;/p&gt;

&lt;p&gt;Having said that, let's see how we can make this important section as good as it can be.&lt;/p&gt;

&lt;p&gt;The most important thing about the Summary section is to present yourself as someone whose skills have made an impact.&lt;br&gt;
It is important to precisely say how the skill that you used to do something has been helpful. No fillers and no mumbo jumbo stuff allowed here.&lt;br&gt;
The impact that you made should be measurable and concrete.&lt;/p&gt;

&lt;p&gt;Maybe it's easier to get to the point if I give you a few examples:&lt;/p&gt;

&lt;p&gt;"By utilizing my knowledge in Java I have build an application that helped speed up the process of preparing food in a local restaurant by 120%".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a list of questions that you should ask yourself when writing the summary.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What skills did I use?&lt;/li&gt;
&lt;li&gt;What measurable goal have I reached by doing so?&lt;/li&gt;
&lt;li&gt;Who has benefited from my skills and why?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, the best way to list your achievements is to make it a list and try to be as objective as possible.&lt;br&gt;
Note that you don't need too many lines of text here but make sure that your message goes straight to the point.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#education"&gt;
  &lt;/a&gt;
  Education
&lt;/h4&gt;

&lt;p&gt;Put your most recent education level along with the name of the school and also if you have any related certificates or have attended a workshop/internship.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h4&gt;

&lt;p&gt;This section should contain a few of your BEST projects. Make sure to describe what is the point of your project, what technologies did you use and what have you learned from it. If it has made an impact to the society or environment also consider to include that. Put a link that leads the reader to the live application and a link to the GitHub repository of the project.&lt;/p&gt;

&lt;p&gt;I will have a dedicated article in this series on how to make your GitHub profile better.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#work-experience"&gt;
  &lt;/a&gt;
  Work Experience
&lt;/h4&gt;

&lt;p&gt;Include any work experience that you might have where you have gathered any experience that can be beneficial to the role you are applying to.&lt;br&gt;
Make sure to list the position you worked as and a description on how working there has affected you. (in a positive way of course)&lt;br&gt;
For example if you have been a restaurant worker in the USA, you can say that it has helped you improve your English language skills, work under pressure, communication skills and things like that.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hobbies"&gt;
  &lt;/a&gt;
  Hobbies
&lt;/h4&gt;

&lt;p&gt;This is a place where you can optionally put any hobbies that you might want your future employer to know about. &lt;br&gt;
Don't say things like I code as a hobby or anything that might make you look to pushy about getting the job. Just be honest and try to make a personal contact with the reader.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQu_8Qir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/KCEB0pLlqLqo0/giphy.gif%3Fcid%3D790b7611f304a31a8ba7effd675dcf4fee104e538a6b3d45%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQu_8Qir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/KCEB0pLlqLqo0/giphy.gif%3Fcid%3D790b7611f304a31a8ba7effd675dcf4fee104e538a6b3d45%26rid%3Dgiphy.gif%26ct%3Dg" alt="I am perfect" width="245" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-tips"&gt;
  &lt;/a&gt;
  Design Tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use a readable font and avoid any cursive or overly styled fonts.&lt;/li&gt;
&lt;li&gt;Use a lot of whitespace and make sure that all gaps are even.&lt;/li&gt;
&lt;li&gt;Colors should be carefully used or avoided and the overall resume should have a good contrast between the text and background.&lt;/li&gt;
&lt;li&gt;Use left text alignment&lt;/li&gt;
&lt;li&gt;Don't include a photo of you if it's really not necessary. Depending on company's policies you might be disqualified right at the start if someone from the HR or whoever is looking at your CV doesn't like your appearance. Weird but true.&lt;/li&gt;
&lt;li&gt;Single page resume is the best if possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope that I have cleared some questions that you might have had about writing a resume for a developer position.&lt;br&gt;
If you have any questions please feel free to comment or &lt;a href="https://twitter.com/antoniopkvc"&gt;tweet to me&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you found this article helpful or if you maybe got your first job because of it, you can support me here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/S6S06RIRQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-M12wuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D3" alt="Buy Me a Coffee at ko-fi.com" width="286" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Complete Guide on How SQL Injection Attacks Work</title>
      <author>Nicholas Dill</author>
      <pubDate>Sat, 30 Oct 2021 18:40:17 +0000</pubDate>
      <link>https://dev.to/nicholasdill/a-complete-guide-on-how-sql-injection-attacks-work-45e</link>
      <guid>https://dev.to/nicholasdill/a-complete-guide-on-how-sql-injection-attacks-work-45e</guid>
      <description>&lt;p&gt;We need to talk about SQL injection. &lt;/p&gt;

&lt;p&gt;What it is, how to do it, and most importantly how to prevent it. We'll cover some examples of SQL injection too and explain how to identify vulnerabilities so you can protect your data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#sql-injection"&gt;What is SQL Injection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-sql-injection-works"&gt;How Does SQL Injection Work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identify-sql-injection"&gt;Identifying SQL Injection Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevent-sql-injection"&gt;Preventing SQL Injection Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get into it.&lt;/p&gt;

&lt;p&gt;&lt;a id="sql-injection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-sql-injection"&gt;
  &lt;/a&gt;
  What is SQL Injection
&lt;/h2&gt;

&lt;p&gt;SQL injection is a vulnerability that allows a malicious user to access your database in unintended ways.&lt;/p&gt;

&lt;p&gt;This vulnerability is usually created when you allow user input to be passed directly to the database. When an attacker identifies this, they are able to craft inputs that include SQL commands that run on the database. &lt;/p&gt;

&lt;p&gt;They essentially get access to read or manipulate your entire database.&lt;/p&gt;

&lt;p&gt;We will go over examples in a moment, but the idea is this.&lt;/p&gt;

&lt;p&gt;If you have an input on your site, like a search box that returns records from your database. An attacker can enter a string that gets read by the database to return matching results.&lt;/p&gt;

&lt;p&gt;When an attacker identifies an injection vulnerability, they are able to pass SQL instructions in that string to the database. The database will then run whatever SQL commands it was given by the user. &lt;/p&gt;

&lt;p&gt;This is not good.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-sql-injection-attacks-expose"&gt;
  &lt;/a&gt;
  What Can SQL Injection Attacks Expose?
&lt;/h4&gt;

&lt;p&gt;The potential impact of this vulnerability is massive. It can result in anything from letting a user read every row of every table in your database, to being able to write &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; commands to modify or potentially even delete your database.&lt;/p&gt;

&lt;p&gt;Hackers have deleted debts from government databases, and stolen and published the personal information of millions of people because of SQL injection.&lt;/p&gt;

&lt;p&gt;Hopefully, as you can see SQL injection is an incredibly dangerous security vulnerability.&lt;/p&gt;

&lt;p&gt;And somehow even some of the largest companies still regularly &lt;a href="#sql-injection-news"&gt;expose this vulnerability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="how-sql-injection-works"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-sql-injection-work"&gt;
  &lt;/a&gt;
  How Does SQL Injection Work?
&lt;/h2&gt;

&lt;p&gt;The attack is based on a malicious user passing SQL instructions to your database.&lt;/p&gt;

&lt;p&gt;There are a ton of ways this can be done, and ultimately there is a potential threat on any line of code that you use to communicate with your database.&lt;/p&gt;

&lt;p&gt;Let's set up a scenario. Say your website sells a product and you use categories to filter what the user can see.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/products?category=books
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your server takes the URL and parses the category query string to figure out how to filter the results for you.&lt;/p&gt;

&lt;p&gt;It will result in a SQL statement that could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'books'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if a malicious user is savvy enough to realize that you are querying the database based on that URL?&lt;/p&gt;

&lt;p&gt;They might change the URL to something like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/products?category=books'+OR+1=1--
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your server might then pass that string to the database, resulting in a query like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'books'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;--'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What they are doing is terminating the string early by passing the closing single quote in their input.&lt;/p&gt;

&lt;p&gt;This allows them to add additional SQL to their command. In this case they add an &lt;code&gt;OR 1=1&lt;/code&gt; which means they'll now see all products regardless of category since &lt;code&gt;1=1&lt;/code&gt; will be true for all rows in the table. They then append the final &lt;code&gt;--&lt;/code&gt; which is a comment so when your server adds the closing single quote, it doesn't throw any errors.&lt;/p&gt;

&lt;p&gt;This is a very benign example but demonstrates the easiest way to run raw SQL against someone else's database.&lt;/p&gt;

&lt;p&gt;Now imagine if instead of an &lt;code&gt;OR&lt;/code&gt; operator, a savvy attacker added a &lt;code&gt;UNION&lt;/code&gt; and appended other tables. &lt;/p&gt;

&lt;p&gt;They might even be able to return user emails, passwords, and other sensitive data this way.&lt;/p&gt;

&lt;p&gt;Also, this is just the URL, but any interface that allows user input is a potential attack vector. Input fields on your site, any textbox, forms... anything that interacts with the database creates a potential vulnerability.&lt;/p&gt;

&lt;p&gt;So as you can see, it's easier to pull off a SQL injection attack than you might think.&lt;/p&gt;

&lt;p&gt;&lt;a id="#second-order-injection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#secondorder-sql-injection"&gt;
  &lt;/a&gt;
  Second-Order SQL Injection
&lt;/h3&gt;

&lt;p&gt;Another form of SQL injection can be categorized as second-order SQL injection.&lt;/p&gt;

&lt;p&gt;In the above example we were able to submit SQL instructions and immediately return results from the database. Second-order attacks work slightly differently and can be harder to detect.&lt;/p&gt;

&lt;p&gt;Instead of passing input to the database, the goal with a second-order attack is to persist malicious SQL commands for future use.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#got-an-example"&gt;
  &lt;/a&gt;
  Got an example?
&lt;/h4&gt;

&lt;p&gt;Yep, let's walk through an example. Say I want to change my email on a website.&lt;/p&gt;

&lt;p&gt;In the email field, I might enter malicious data that I know will be stored on the database and retrieved later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello@example.com';update users set password='password'--&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Can you guess what this might do?&lt;/p&gt;

&lt;p&gt;If that website ever passes my email directly to the database, it will include my SQL instructions... (and everyone's password will then be set to password).&lt;/p&gt;

&lt;p&gt;This strategy of attack is dangerous because malicious inputs can sit dormant for a long time before they perform their intended exploit.&lt;/p&gt;

&lt;p&gt;&lt;a id="identify-sql-injection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-identify-sql-injection-vulnerabilities"&gt;
  &lt;/a&gt;
  How to Identify SQL Injection Vulnerabilities
&lt;/h2&gt;

&lt;p&gt;When you have a good understanding of how SQL injection works, I recommend you try and identify vulnerabilities on your site.&lt;/p&gt;

&lt;p&gt;You can do this by testing your site and trying to inject harmless SQL.&lt;/p&gt;

&lt;p&gt;You should also review your code to make sure you aren't passing strings directly to your database.&lt;/p&gt;

&lt;p&gt;I would recommend you take a look at libraries for the language and framework you use to develop your site. Most frameworks have helpful tools that can detect these kinds of vulnerabilities before you promote them to production environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-your-site-for-vulnerabilities"&gt;
  &lt;/a&gt;
  Test Your Site For Vulnerabilities
&lt;/h3&gt;

&lt;p&gt;A surefire way to identify SQL injection vulnerabilities is to test your site for them.&lt;/p&gt;

&lt;p&gt;Take some of the examples in the section above. Watch how your server responds. You might be surprised to see that it's easier to perform a SQL injection attack than you thought.&lt;/p&gt;

&lt;p&gt;Don't dismiss this vulnerability just because you can't attack your own system though.&lt;/p&gt;

&lt;p&gt;There are many ways of performing SQL injection beyond passing user input.&lt;/p&gt;

&lt;p&gt;As mentioned above, &lt;a href="#second-order-injection"&gt;second order SQL injection&lt;/a&gt; can't be detected immediately. It can be difficult to detect if users are storing queries that can be executed at a later time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#carefully-review-your-code"&gt;
  &lt;/a&gt;
  Carefully Review Your Code
&lt;/h3&gt;

&lt;p&gt;The best approach to protect against SQL injection is to learn and understand how SQL injection is made possible.&lt;/p&gt;

&lt;p&gt;When you understand how it works and what makes it possible, you will have a better idea of where you might be exposing opportunities in your code. Take a look at your code. Anywhere that you interact with your database. And make sure you aren't passing any kind of user input or user generated content (remember, second order injection) directly to your database.&lt;/p&gt;

&lt;p&gt;Ask yourself, what could happen if this string contained malicious SQL instructions?&lt;/p&gt;

&lt;p&gt;It's better to be safe than sorry, or in this case secure rather than exposing your entire database.&lt;/p&gt;

&lt;p&gt;&lt;a id="prevent-sql-injection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-protect-from-sql-injection"&gt;
  &lt;/a&gt;
  How to Protect From SQL Injection
&lt;/h2&gt;

&lt;p&gt;Protecting against SQL injection is actually really easy.&lt;/p&gt;

&lt;p&gt;What you need is input validation and sanitization. &lt;/p&gt;

&lt;p&gt;These are techniques that clean user input to prevent it passing harmful strings to your database.&lt;/p&gt;

&lt;p&gt;3 of the top website attacks (SQL injection, cross-site scripting, and remote file inclusion) all come from a lack of input sanitization. &lt;/p&gt;

&lt;p&gt;And luckily, it's not hard to sanitize inputs in most major languages and frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-sanitize-user-input"&gt;
  &lt;/a&gt;
  How to Sanitize User Input
&lt;/h3&gt;

&lt;p&gt;The idea is, you take a string the user submitted and you escape any characters that could cause issues.&lt;/p&gt;

&lt;p&gt;Ruby on Rails handles this for you automatically when you use the Active Record ORM correctly.&lt;/p&gt;

&lt;p&gt;But if you don't use Active Record correctly, or if you write SQL directly in code, you can still open your database up to vulnerabilities.&lt;/p&gt;

&lt;p&gt;A good example of how easy it is to accidentally expose your data...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Don't do this!&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you pass malicious input into the &lt;code&gt;params[:id]&lt;/code&gt;, you can inject SQL into this database call. &lt;/p&gt;

&lt;p&gt;String interpolation is generally a very bad pattern to use in your database calls.&lt;/p&gt;

&lt;p&gt;In this case, the better way to use Active Record would be to pass the string as an additional argument. Active Record will then sanitize it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Better example&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;where()&lt;/code&gt; method sanitizes strings passed as additional arguments, but it won't sanitize the first argument's SQL command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-writing-sql-in-active-record"&gt;
  &lt;/a&gt;
  Avoid Writing SQL in Active Record
&lt;/h3&gt;

&lt;p&gt;The truly correct way to use Active Record is to avoid passing raw SQL strings altogether.&lt;/p&gt;

&lt;p&gt;If you use Active Record's methods without string interpolation it will always sanitize your inputs automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Safe example&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# or even better&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes you need to write queries with operators that Active Record doesn't support. Such as the &lt;code&gt;LIKE&lt;/code&gt; operator or when comparing dates. Just remember to check for SQL injection vulnerabilities you might be introducing.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://stackoverflow.com/questions/21886170/best-way-to-go-about-sanitizing-user-input-in-rails"&gt;StackOverflow post&lt;/a&gt; has a great in-depth explanation or input sanitization in Rails, if you're curious.&lt;/p&gt;

&lt;p&gt;Python, PHP, and most other popular languages also come with support for sanitizing user input.&lt;/p&gt;

&lt;p&gt;So as you can see it's not hard to protect your database, it's actually pretty easy. &lt;/p&gt;

&lt;p&gt;The real challenge is how to you prevent incidents where someone &lt;em&gt;forgets&lt;/em&gt; to sanitize and protect from malicious user input.&lt;/p&gt;

&lt;p&gt;That's hard... really hard.&lt;/p&gt;

&lt;p&gt;Even the biggest, most advanced technology companies still struggle with this.&lt;/p&gt;

&lt;p&gt;&lt;a id="sql-injection-news"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#recent-sql-injection-attacks"&gt;
  &lt;/a&gt;
  Recent SQL Injection Attacks
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#the-ghostshell-attack"&gt;
  &lt;/a&gt;
  The GhostShell Attack
&lt;/h4&gt;

&lt;p&gt;A group of hackers from the APT group Team GhostShell used SQL injection to attack 53 universities. They managed to steal the personal records of 36,000 university students, faculty, and staff.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#turkish-government"&gt;
  &lt;/a&gt;
  Turkish Government
&lt;/h4&gt;

&lt;p&gt;RedHack collective (another APT group) used SQL injection to access a Turkish government website and erase debt to government agencies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7eleven-attack"&gt;
  &lt;/a&gt;
  7-Eleven Attack
&lt;/h4&gt;

&lt;p&gt;Attackers used SQL injection to access data from several corporations, including 7-Eleven. They managed to access over 130 million credit card numbers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hbgary-attack"&gt;
  &lt;/a&gt;
  HBGary Attack
&lt;/h4&gt;

&lt;p&gt;Hackers from the Anonymous activist group used SQL injection to take down the website of IT security company, HBGary. The CEO of HBGary shared that he had the names of Anonymous organization members, which prompted the attack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recent-sql-injection-vulnerabilities-discovered"&gt;
  &lt;/a&gt;
  Recent SQL Injection Vulnerabilities Discovered
&lt;/h3&gt;

&lt;p&gt;You'll recognize some of these companies. It goes to show that nobody is immune from this exploit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fortnite-vulnerability"&gt;
  &lt;/a&gt;
  Fortnite Vulnerability
&lt;/h4&gt;

&lt;p&gt;In 2019, a SQL injection vulnerability was discovered that allowed attackers to access user accounts. Fortnite, by the way, has over 350 million users. Luckily, the vulnerability was quickly patched. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cisco-vulnerability"&gt;
  &lt;/a&gt;
  Cisco Vulnerability
&lt;/h4&gt;

&lt;p&gt;In 2018, a SQL injection vulnerability was discovered in the Cisco Prime License Manager. The vulnerability gave attackers shell access to systems where license manager was deployed. This vulnerability has been patched.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tesla-vulnerability"&gt;
  &lt;/a&gt;
  Tesla Vulnerability
&lt;/h4&gt;

&lt;p&gt;In 2014, security researchers shared that they were able to gain administrative privileges and steal user data through Tesla's website.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;All it takes is one vulnerable line of code, and your entire system is at risk.&lt;/p&gt;

&lt;p&gt;Please, take SQL injection seriously!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>sql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Halloween🎃 with JS!</title>
      <author>Arya Narayan Tiwari</author>
      <pubDate>Sat, 30 Oct 2021 18:22:35 +0000</pubDate>
      <link>https://dev.to/aryanarayantiwari/halloween-with-js-4af0</link>
      <guid>https://dev.to/aryanarayantiwari/halloween-with-js-4af0</guid>
      <description>&lt;p&gt;Make your first project in &lt;strong&gt;JavaScript&lt;/strong&gt; with DOM manipulation and surprise your friends on halloween.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-project"&gt;
  &lt;/a&gt;
  About the Project
&lt;/h2&gt;

&lt;p&gt;So, I was watching Dev Ed latest YouTube &lt;a href="https://www.youtube.com/watch?v=sIBZGWQ7gM8"&gt;video&lt;/a&gt; where he recreated the classic scary maze game with JS, and that's where I got idea for my project. I wanted to create something similar to his project but not wanted it to be a maze game. So I thought I would apply his logic to the classic switch bulb project in JS where a user clicks on a button to turn the light 'on' or 'off'. Here when a user click on the button to turn the lights off we have a horror sound playing and Pennywise from &lt;a href="https://en.wikipedia.org/wiki/It_(2017_film)"&gt;IT&lt;/a&gt; movie series showing up with a laugh.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-html"&gt;
  &lt;/a&gt;
  Setting up HTML
&lt;/h2&gt;

&lt;p&gt;There isn't much required in html file just the starting state of &lt;br&gt;
the contents of file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;h1 class="head"&amp;gt;Don't turn off the lights 💡&amp;lt;/h1&amp;gt;
    &amp;lt;button class="btn"&amp;gt;💡LIGHTS ON&amp;lt;/button&amp;gt;
    &amp;lt;img src="./img/pennywise.png" class="penny" alt="pennywise"&amp;gt;
    &amp;lt;audio src="./audio/scream.mp3" class="spooky-audio"&amp;gt;&amp;lt;/audio&amp;gt;
    &amp;lt;audio src="./audio/laugh.mp3" class="laugh"&amp;gt;&amp;lt;/audio&amp;gt;
    &amp;lt;script src="./js/main.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-css"&gt;
  &lt;/a&gt;
  Setting up CSS
&lt;/h2&gt;

&lt;p&gt;CSS adds a little bit of styling to the project also with some spooky font styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Fruktur&amp;amp;display=swap');
*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
body{
    font-family: 'Fruktur',sans-serif;
    color: #fff;
    background-color: #485461;
    background-image: linear-gradient(0deg,#485461 0%, #28313b 100%);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    text-align: center;
    padding: 25px auto;
    margin: 80px auto;
    font-weight: 600;
    letter-spacing: 5px;
    overflow: hidden;
}
button{
    margin: 25px auto;
    padding: 10px 20px;
    color: #fff;
    background-color: #28313b;
    outline: none;
    border: 2px solid #28313b;
    border-radius: 5px;
    font-weight: 800;
    cursor: pointer;
}
button:hover{
border: 2px solid orange;
}
img{
    display:none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-js"&gt;
  &lt;/a&gt;
  Setting up JS
&lt;/h2&gt;

&lt;p&gt;First we get all the DOM items whose behavior we want to change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const btn = document.querySelector(".btn")
const head = document.querySelector(".head")
const penny = document.querySelector(".penny")
const audio = document.querySelector(".spooky-audio")
const laugh = document.querySelector(".laugh")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we get to the event listener part to listen for click events on button.&lt;/p&gt;

&lt;p&gt;The event listener just contains a bunch of if and else statements that check the current value of the heading and button text with the &lt;code&gt;innerHTML&lt;/code&gt; method and takes actions based on these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;btn.addEventListener("click",(e) =&amp;gt; {
    if(btn.innerHTML == "💡LIGHTS ON"){
        btn.innerHTML = "🎈LIGHTS OFF"
    }
    else{
        btn.innerHTML = "💡LIGHTS ON"
    }
    if(penny.style.display == "block"){
        penny.style.display = "none"
    }
    else{
        penny.style.display="block"
    }
    if(head.innerHTML == "Don't turn off the lights 💡"){
        head.innerHTML="You shouldn't have done that!🎃"
    }
    else{
        head.innerHTML="Don't turn off the lights 💡"
    }
    laugh.volume = 1
    audio.volume = 1
    if(btn.innerHTML=="🎈LIGHTS OFF"){
    laugh.play()
    audio.play()    
    }
    else{
        laugh.pause()
        audio.pause()
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#thats-it-you-have-just-created-a-fun-js-dom-manipulation-project-within-an-hour-and-you-can-show-it-your-friends-and-surprise-them-on-halloween-"&gt;
  &lt;/a&gt;
  That's it, you have just created a fun JS DOM manipulation project within an hour and you can show it your friends and surprise them on Halloween 👍.
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#important-links-"&gt;
  &lt;/a&gt;
  Important links -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/aryanarayantiwari/halloween"&gt;Source Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aryanarayantiwari.github.io/halloween/"&gt;Project Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>halloween</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Real-Time Bitcoin Price Tracker in Appsmith</title>
      <author>Devika Kulkarni</author>
      <pubDate>Sat, 30 Oct 2021 18:19:53 +0000</pubDate>
      <link>https://dev.to/devikakulkarni/building-a-real-time-bitcoin-price-tracker-in-appsmith-3gap</link>
      <guid>https://dev.to/devikakulkarni/building-a-real-time-bitcoin-price-tracker-in-appsmith-3gap</guid>
      <description>&lt;p&gt;Recently, &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt; introduced the functionality that enables &lt;a href="https://github.com/appsmithorg/appsmith/issues/3312"&gt;real-time polling of data&lt;/a&gt; using JavaScript timers. The data coming from the APIs and queries can now be periodically updated using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/setInterval"&gt;setInterval()&lt;/a&gt; method of JavaScript.&lt;/p&gt;

&lt;p&gt;The setInterval() method repeatedly executes a code snippet with a fixed time interval between the calls. Earlier in Appsmith, the user would have to manually click the refresh button to update the data. But now using the JavaScript timer one can do it programmatically.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build a Bitcoin price tracker application as shown below to demonstrate real-time polling of data. For this, we would be using the Stats Box widget and the recently introduced timer functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AACR7HOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdbl9wjw6ct45dr50271.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AACR7HOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdbl9wjw6ct45dr50271.gif" alt="Image description" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most important requirement for this project is of an API that would provide us real-time Bitcoin prices. &lt;a href="https://finnhub.io/"&gt;Finnhub&lt;/a&gt; is one such website that provides free APIs to access real-time stocks, currencies, and crypto. So the first step is to create an account on Finnhub from where you get a key to access their APIs.&lt;/p&gt;

&lt;p&gt;Once you create an account on Finnhub, you can access your API key as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtnMSvJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcdna2ocmjd7ukpgr8nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtnMSvJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcdna2ocmjd7ukpgr8nw.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finnhub provides several APIs to get the financial data. We will be using the Quote API to track the Bitcoin price as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLc7z5VA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw7dfwwh57b3eyly3j5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLc7z5VA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw7dfwwh57b3eyly3j5g.png" alt="Image description" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create a new Appsmith app. From the menu panel on the left, click on Datasources and select “Create new API.” Rename this new API as&lt;code&gt;GetBitcoinPrice&lt;/code&gt;. Enter the Finnhub Quote API to fetch the Bitcoin prices as shown below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://finnhub.io/api/v1/quote?symbol=BINANCE:BTCUSDT&amp;amp;token=YOUR_API_KEY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDURslMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpfe9bg3g7ap53olv5sr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDURslMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpfe9bg3g7ap53olv5sr.png" alt="Image description" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, from the menu panel click open the Widgets section. Drag and drop a Stats Box and a Switch onto the canvas. The Stats Box is a compound widget that comprises of multiple elements such as text boxes and icon. Rename the Stats Box widget as &lt;code&gt;StatBox&lt;/code&gt; and the Switch widget as &lt;code&gt;SwLive&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Follow the given steps to configure the Stats Box widget to display Bitcoin Price that will be fetched from the above configured API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Change the text of the first text box to “Bitcoin Price” and change the text color and font size to your desired choice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rename the second text box to &lt;code&gt;TxtPrice&lt;/code&gt; and bind its Text property to the code shown below. This code extracts the current bitcoin price from the &lt;code&gt;GetBitcoinPrice&lt;/code&gt; API and displays it as text in the Stats Box.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvTjH9gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2weeampuorjbp3q9ylhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvTjH9gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2weeampuorjbp3q9ylhi.png" alt="Image description" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following is the sample response returned from the Finnhub API where  &lt;code&gt;c&lt;/code&gt; is the current price and &lt;code&gt;dp&lt;/code&gt; is the precent change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z872wW9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcxbfuudbr2nyb0i65nn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z872wW9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcxbfuudbr2nyb0i65nn.png" alt="Image description" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename the third text box to &lt;code&gt;TxtChange&lt;/code&gt; and bind its Text property with the following code. This code extracts the percentage change in the Bitcoin price from the &lt;code&gt;GetBitcoinPrice&lt;/code&gt; API.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mbcj0HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysr4ir3okbtwov38jaan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mbcj0HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysr4ir3okbtwov38jaan.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now bind &lt;code&gt;TxtChange&lt;/code&gt; widget’s Text Color property with the following code. This code changes the color of the text displayed to either red or green depending on negative or positive value of the percent change returned by the API.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KG8qGvdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31kxm7bpiy6gxy0wv0fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KG8qGvdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31kxm7bpiy6gxy0wv0fg.png" alt="Image description" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And our last step will be to add a new Image widget in the Stats Box to display Up or Down arrows as shown in the following screenshot depending on the negative or positive Percent Change value returned from the API. To do this, follow the steps below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZ5-rlyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thugkotgcrwrb0fzjtqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZ5-rlyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thugkotgcrwrb0fzjtqp.png" alt="Image description" width="880" height="192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a. Delete the Icon Button widget that comes with the Stats Box widget’s default configuration.&lt;/p&gt;

&lt;p&gt;b. Add a new Image widget in place of the Icon Button (inside Stats Box widget). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ny9cRHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxds3tyk94eb29salfhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ny9cRHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxds3tyk94eb29salfhe.png" alt="Image description" width="698" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c. Rename this new Image widget as &lt;code&gt;ImgUpDown&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;d. Now we will be embedding following two images in Base64 format in this &lt;code&gt;ImgUpDown&lt;/code&gt;'s Image     property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJZBUWxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7baxiqbpmg1eukjn96i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJZBUWxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7baxiqbpmg1eukjn96i.png" alt="Image description" width="370" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use online image encoder using service like this &lt;code&gt;https://elmah.io/tools/base64-image-encoder/&lt;/code&gt; to convert an image into Base64 format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBITbO0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr05tm2qwu7kwpa8uq2s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBITbO0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr05tm2qwu7kwpa8uq2s.png" alt="Image description" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e. Once you have Base64 equivalents of your images, bind the Image property of &lt;code&gt;ImgUpDown&lt;/code&gt; widget to following code.  Notice here that if the value of Percent Change is negative we return the Base64 equivalent of red down arrow image and if it is positive we return Base64 equivalent of green up arrow image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;

&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iVBORw0KGgoAAAANSUhEUgAAADYAAWFQIBxKbwhMrV8283eqQVllVErPOTjOeSGfnaui364X7plY………….cKDu13Qa5mfTI+AVg00vCweFcJhk9mAyjPRYIx2QtFh3OkhpmQMw3rWgDu9S202qzgTgWckfDOee9J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iVBORw0KGgoAAAANSUhEUgAAADYAAAA2CAYAAACMRWrdAAAABGdBTUEAALGPC/xhBQAAA4b………..WxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q816DF3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pybvvgki6uf0hg18mm9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q816DF3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pybvvgki6uf0hg18mm9i.png" alt="Image description" width="880" height="937"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will setup a timer which runs periodically. It will run depending on whether the auto update switch widget (&lt;code&gt;SwLive&lt;/code&gt;) is switched on or not. If it is switched on, we start a timer which will run the &lt;code&gt;GetBitcoinPrice&lt;/code&gt; API at every second. And if it is switched off, we clear the timer. Write the following binding in &lt;code&gt;SwLive&lt;/code&gt;'s &lt;code&gt;onChange&lt;/code&gt; event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SwLive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSwitchedOn&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timer1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timer1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;})()&lt;/span&gt;

&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iU6QhgS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdsy9080llz3ghgnzrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iU6QhgS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdsy9080llz3ghgnzrq.png" alt="Image description" width="880" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default we don’t want the time to start on page load, so we turn off “Default Selected” property of the widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I38VzjZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35y6krugocf38s9ut3k8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I38VzjZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35y6krugocf38s9ut3k8.png" alt="Image description" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to publish our app. Click Deploy to take your application live!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tx0dcfwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gg67s2v1x6bx1fugma2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tx0dcfwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gg67s2v1x6bx1fugma2.png" alt="Image description" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>appsmith</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Git Rebase for Preventing Merge Commits</title>
      <author>jen chan</author>
      <pubDate>Sat, 30 Oct 2021 18:01:34 +0000</pubDate>
      <link>https://dev.to/jenc/git-rebase-for-preventing-merge-commits-2len</link>
      <guid>https://dev.to/jenc/git-rebase-for-preventing-merge-commits-2len</guid>
      <description>&lt;p&gt;Within trunk-based or agile development, minimizing the number of noisy commits to keep any possible regressions easy to back-trace is often considered a good practice.&lt;/p&gt;

&lt;p&gt;There was the workplace that kept everything minimal on their main branch, with commits few as possible. Everyone's feature branches would be merged in as singular squashed commits. The danger here was that if there was a bug introduced in a feature branch, it would be tremendously difficult to trace chronologically.&lt;/p&gt;

&lt;p&gt;Then there was the workplace that wanted each commit to tell a story so we'd make a commit annotating the changes on each file. In either case, the lesson learned was to take care in allowing the commits to tell a story of what changes were made. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-preventing-merge-commits-when-prs-are-merged-in-on-remote-trunk"&gt;
  &lt;/a&gt;
  1. Preventing Merge Commits When PRs are Merged In on Remote Trunk
&lt;/h2&gt;

&lt;p&gt;(...where "trunk" is the iterative development branch)&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://www.atlassian.com/git/tutorials/using-branches/merge-strategy"&gt;"Merge Strategies"&lt;/a&gt; detailed by Atlassian For Bitbucket&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github"&gt;"About Merge Methods"&lt;/a&gt; for Github&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-preventing-merge-commits-when-pulling-from-remote-to-local"&gt;
  &lt;/a&gt;
  2. Preventing Merge Commits when Pulling from Remote to Local
&lt;/h2&gt;

&lt;p&gt;I imagine this is what you came to the article for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-principle-this-is-the-setting-to-change"&gt;
  &lt;/a&gt;
  In Principle, This is the Setting to Change
&lt;/h3&gt;

&lt;p&gt;That you set your git config to rebase whenever you pull: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global branch.autosetuprebase always&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Depending on your work-style, here's 3 ways to prevent merge commits when merging from remote after it has moved forward while you've been developing. They all have to do with how you manage your own changes.&lt;/p&gt;

&lt;p&gt;The following 3 workflows will illuminate exactly what that means if a rebase happens every time you pull, if you &lt;strong&gt;don't&lt;/strong&gt; use the setting above. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; Make your local commits as usual and &lt;code&gt;git pull rebase&lt;/code&gt; when you need to merge from remote origin&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On your checked out feature branch, commit your changes as you go - It will create commits on your local branch.&lt;/li&gt;
&lt;li&gt;You're ready to make a PR but realize the dev branch has advanced, so you run:
 &lt;code&gt;git pull --rebase &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;&lt;/code&gt; or in our case, 
&lt;code&gt;git pull origin development —rebase&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If what's new on &lt;code&gt;development&lt;/code&gt; conflicts with changes you have in your code, VS code will tell you something like:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;From&lt;/span&gt; &lt;span class="nx"&gt;bitbucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt;            &lt;span class="nx"&gt;development&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FETCH_HEAD&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;ab345e&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;d321ff7&lt;/span&gt;  &lt;span class="nx"&gt;development&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;development&lt;/span&gt;
&lt;span class="nx"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;merging&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;merging&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;CONFLICT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Merge&lt;/span&gt; &lt;span class="nx"&gt;conflict&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;merging&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;CONFLICT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Merge&lt;/span&gt; &lt;span class="nx"&gt;conflict&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;f4e0681&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;Rename&lt;/span&gt; &lt;span class="nx"&gt;thing&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;thing&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="nx"&gt;Resolve&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;conflicts&lt;/span&gt; &lt;span class="nx"&gt;manually&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;resolved&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git add/rm &amp;lt;conflicted_files&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase --continue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase --skip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;abort&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase --abort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, Git will list out every file that has a merge conflict in it with the &lt;code&gt;CONFLICT&lt;/code&gt; flag! &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to each file listed, where VS code will make the local and incoming changes apparent. Select whether you want the "current" or "incoming" change or "both" included. You can even make edits within either version and keep that one. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add&lt;/code&gt; each conflicted file's name to acknowledge/stage the changes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git rebase —-continue&lt;/code&gt; to complete the rebase.&lt;/li&gt;
&lt;li&gt;finally, files that are changed as a result of your own local commits will also need to be &lt;code&gt;git add&lt;/code&gt;-ed. so add those and run &lt;code&gt;git rebase --continue&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You know everything has succeeded when you get the message:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Successfully&lt;/span&gt; &lt;span class="nx"&gt;rebased&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt; &lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⚠️ The rebase will take out the commits that you committed on your current local branch &lt;code&gt;HEAD&lt;/code&gt; as a patch. Then it will apply all the remote commits on top of &lt;code&gt;HEAD&lt;/code&gt;, and then applies your newest commits on top of it.&lt;/p&gt;

&lt;p&gt;⚠️ Highly recommend you groom your own local branch's commit history (see &lt;a href="https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history"&gt;interactive rebase&lt;/a&gt;) before you perform this method. If your branch after step 3 is merged into remote &lt;code&gt;development&lt;/code&gt;, will contain a revised history. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;git log&lt;/code&gt; and you'll see a linear retrospective history of the choices you made for each file with no merge commit!&lt;/li&gt;
&lt;li&gt;Sometimes when you're ready to push, you'll see that your remote local is now out of sync with whatever you've pulled and rebased from &lt;code&gt;development&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Your&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;origin/bug-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;diverged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;different&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;respectively&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we have here: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;28 commits on local that are a reconciliation of my own local commits with most recent changes on &lt;code&gt;development&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 commit on remote feature branch that I made and pushed to my remote feature branch&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running &lt;code&gt;git pull —-rebase&lt;/code&gt; off the contents of my now-behind remote local is going to start a rebase process that won't be fruitful in this case, so I run &lt;code&gt;git push -f&lt;/code&gt; (&lt;code&gt;—-force&lt;/code&gt;)on my feature/bug branch. &lt;/p&gt;

&lt;p&gt;If you have impact tested that your current local builds, and you are super confident your current version is the authoritative version you can use &lt;code&gt;-f&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Force push with &lt;strong&gt;ultimate&lt;/strong&gt; care, and never on a shared public branch. &lt;/p&gt;

&lt;p&gt;You are literally rewriting history!&lt;/p&gt;

&lt;p&gt;➕ Pros: &lt;/p&gt;

&lt;p&gt;No excessive merge commits.&lt;/p&gt;

&lt;p&gt;Trigger less merge conflict markers, or none if the code you're contributing is new.&lt;/p&gt;

&lt;p&gt;At the end of the rebase the &lt;code&gt;HEAD&lt;/code&gt; of your branch will be in sync with the &lt;code&gt;development&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;➖ Cons: &lt;/p&gt;

&lt;p&gt;The enormous risk here is that any files or code that are supposed to be deleted by someone else's merge commit, might be re-added if they remained in your branch. You can accidentally overwrite someone else's work in the process of rebasing changes on a large feature branch. Fortunately, even if you do, when you make a pull request with this feature branch, your teammates will notice anything you're overwriting or removing on your PR.&lt;/p&gt;

&lt;p&gt;If you have squashed any commits together that are also already on the remote, you will experience really difficult merge conflicts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;: &lt;a href="https://www.atlassian.com/git/tutorials/saving-changes/git-stash"&gt;stash&lt;/a&gt; any uncommitted changes, git pull rebase pull from remote, then commit your changes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Checkout a new branch and start working on changes. making no commits so if you run &lt;code&gt;git status&lt;/code&gt; there would be lots of red untracked files.&lt;/li&gt;
&lt;li&gt;You realize the remote branch is ahead and need to update your local but you need to hang onto your uncommitted changes:
&lt;code&gt;git stash&lt;/code&gt; 
The above brings the state of your project back to the previous one before you made changes. Your local branch is simply behind remote &lt;code&gt;development&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;You run &lt;code&gt;git pull —-rebase&lt;/code&gt; to bring in new changes without causing a merge commit.&lt;/li&gt;
&lt;li&gt;Bring back uncommitted changes you made with  &lt;code&gt;git stash apply&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;And then commit all of them &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;➕ Pros: again, way less merge conflicts to resolve. No merge commits.&lt;/p&gt;

&lt;p&gt;➖ Cons: Hanging onto all my changes without commits requires working in a very clearsighted way, makes an issue hard to show a teammate if I make a PR just to show them where I'm stuck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 3:&lt;/strong&gt; Make a side-branch to run the rebase on &lt;/p&gt;

&lt;p&gt;If you're not comfortable with all this yet, you can use your feature branch as the branch in which you will merge a series of commits in a separate branch with the ones from remote. &lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;git checkout development&lt;/code&gt; to start on development branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b feature-branch&lt;/code&gt; to checkout a feature branch that contains the current commits on development&lt;/li&gt;
&lt;li&gt;Start making all yer commits for all your changes&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you're ready you can check out a temporary branch with all of your feature branch's changes, while still on &lt;code&gt;feature-branch&lt;/code&gt;: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b temporary-branch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last command creates a "copy" of your feature branch. To bring what's newly on &lt;code&gt;development&lt;/code&gt; and your temporary branch together (while on your temporary-branch)[^1]:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rebase -i development&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checkout your initial feature branch: &lt;code&gt;git checkout feature-branch&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git merge temporary-branch --ff&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here the &lt;code&gt;—-ff&lt;/code&gt; flag tells our merging of 2 branches not to create a merge commit, and to fast-forward the pointer to the most recent commit (aka. the &lt;code&gt;HEAD&lt;/code&gt;) to your most recent one.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push and create a PR of your feature branch as usual.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;➕ Pros: this is the most safe approach probably, of all three ways&lt;/p&gt;

&lt;p&gt;➖ Cons: This is quite a longer-winded way to do things and probably more theoretical. I have not actually done the whole process verbatim before&lt;/p&gt;

&lt;p&gt;[^1] I say "copy" in quotes because it's easier to think about, but Git is actually creating a pointer to the initial branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Reading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"&gt;rebase&lt;/a&gt; command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing"&gt;Merge vs. Rebase&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Messaging and Madness: Sending Messages with AMQP and Amazon MQ</title>
      <author>George Offley</author>
      <pubDate>Sat, 30 Oct 2021 17:23:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-2m9b</link>
      <guid>https://dev.to/aws-builders/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-2m9b</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="https://georgeoffley.com/blog/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq.html"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#amqp"&gt;AMQP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#amqp_amazon_mq"&gt;AMQP and Amazon MQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serialization"&gt;Serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;How do software systems talk to each other? Back-end systems can scale into giant melted together &lt;a href="https://youtu.be/NH-8L1iZq20"&gt;Cronenberg monsters&lt;/a&gt;, often making up different tools and languages. So, communicating between these services can become an untenable challenge without some shared vocabulary. We can communicate in many ways, but today I wanted to talk about asynchronous messaging protocols and figure out how AWS can help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amqp"&gt;
  &lt;/a&gt;
  AMQP &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;AMQP stands for Advanced Message Queuing Protocol. I’ve been working to implement it for some back-end software suites I’m building out to enable them to talk to each other. AMQP utilizes these things called &lt;em&gt;brokers&lt;/em&gt; to publish messages on, then on the other end, a receiving service subscribed to the same “channel” that we posted to can pick up that message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X05DUDqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/hello-world-example-routing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X05DUDqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/hello-world-example-routing.png" alt="Hello World Visualization" width="700" height="328"&gt;&lt;/a&gt;&lt;br&gt;
via &lt;a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html"&gt;Rabbit MQ Tutorials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s dive a little further down; the &lt;em&gt;publisher&lt;/em&gt; service publishes a message to an &lt;em&gt;exchange&lt;/em&gt; on a &lt;em&gt;broker&lt;/em&gt;. This exchange has &lt;em&gt;routes&lt;/em&gt; that lead to &lt;em&gt;queues&lt;/em&gt;, or “channels,” where the payload is published. We make sure to include the sending information with our message to be routed to the correct queue. The broker cannot see the message, although it might look into any metadata attached to the message from the publisher. This workflow asynchronously sends messages. Imagine a server version of a mail sorting machine shooting letters into the correct mail slot based on the address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZqARNPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/mail_sorting.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZqARNPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/mail_sorting.gif" alt="Mail Sorting Gif from MIB II" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When referring to a publisher, I mean some code that we utilize to connect and send a message. AMQP is programmable, so I can shape it to fit most situations. In this case, we need to send messages to our different software suites to trigger actions to happen. Learning this took some time, but it’s been simple to implement. &lt;/p&gt;

&lt;p&gt;There are different types of exchanges that we can use to make these services fit our needs. I’m going to explain what we use briefly.&lt;/p&gt;

&lt;p&gt;We use a &lt;em&gt;direct exchange&lt;/em&gt; utilizing &lt;em&gt;routing keys&lt;/em&gt; to bind queues to exchanges. Our code can use direct exchanges to distribute tasks to many different endpoints, but we used these direct exchanges to make direct routes between our services. Other types of exchanges can be used to broadcast messages. More information can be found &lt;a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html"&gt;here&lt;/a&gt;. For now, we’re going to focus on direct exchanges. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amqp-and-amazon-mq"&gt;
  &lt;/a&gt;
  AMQP and Amazon MQ &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We touched on all that because I wanted to talk about &lt;a href="https://aws.amazon.com/amazon-mq/?amazon-mq.sort-by=item.additionalFields.postDateTime&amp;amp;amazon-mq.sort-order=desc"&gt;Amazon MQ&lt;/a&gt;. Amazon MQ is a fully managed platform for setting up message brokers. Amazon MQ utilizes both RabbitMQ and Apache Active MQ for creating brokers. We’re sticking with Rabbit MQ for the time being.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tb8ynwwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/amazon_mq_dash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tb8ynwwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/amazon_mq_dash.png" alt="Amazon MQ Dashboard" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here above, you can see you can easily set up a broker in just a few clicks. I left most of the settings on default, except for choosing “RabbitMQ” for our broker engine and setting some security up for accessing our management console. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WupXkx6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/rabbit_mq_dash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WupXkx6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/rabbit_mq_dash.png" alt="Rabbit MQ Management Console" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we get that, we have access to the RabbitMQ dashboard Amazon MQ created and is managing. Now that we have a broker set up, we can play with some code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AAn3Wix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AAn3Wix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/code.png" alt="Code" width="880" height="781"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above I use the library &lt;a href="https://github.com/celery/kombu"&gt;Kombu&lt;/a&gt; to create some connections and send some stuff. I started by setting up our environment variables. Then created exchange and queue objects. Finally, I made our connection object and the producer object, and then we sent a simple “Hello” message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  Serialization &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Serialization is &lt;a href="https://www.tutorialspoint.com/object_oriented_python/object_oriented_python_serialization.htm"&gt;another blog post&lt;/a&gt;, but I chose to use JSON to serialize the payload. In the production software, I use a combination of JSON and &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;Pickle&lt;/a&gt; to serialize things like image data.&lt;/p&gt;

&lt;p&gt;Now we can see our message published on the queue I declared in our publisher service. An identical receiving service would be set up on the other side to read out messages sent to that queue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4hcWaug4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/results.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hcWaug4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/results.png" alt="Results" width="502" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In conclusion, using Amazon MQ allows us to set up managed brokers for us to send messages. With AMQP as the broker engine, we have a lightweight message-sending workflow. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;

</description>
      <category>python</category>
      <category>aws</category>
      <category>amqp</category>
      <category>amazonmq</category>
    </item>
  </channel>
</rss>
