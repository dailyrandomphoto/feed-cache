<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>No YAML Needed! Create GitHub Actions Workflows from VS and CLI</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Fri, 01 Oct 2021 00:14:28 +0000</pubDate>
      <link>https://dev.to/n3wt0n/no-yaml-needed-create-github-actions-workflows-from-vs-and-cli-50kp</link>
      <guid>https://dev.to/n3wt0n/no-yaml-needed-create-github-actions-workflows-from-vs-and-cli-50kp</guid>
      <description>&lt;p&gt;Today I'm going to show you two very easy ways to create your GitHub &lt;strong&gt;Actions CI&lt;/strong&gt; Workflow for .NET Applications, &lt;strong&gt;without writing a single line of YAML&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Getting started with GitHub Actions may not be always easy. Especially when the alternatives for deployment are so easy (like the right-click publish in Visual Studio, for example). What if we could create our CI workflows with Actions in the same way?&lt;/p&gt;

&lt;p&gt;Btw, I'd be curious to know how you create your GitHub Actions workflow. Let me know in the comment section below if you do it directly in the GitHub UI, or in VSCode perhaps with some extension, or however else you do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N2ELIqLWz0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/N2ELIqLWz0k"&gt;Link to the video: https://youtu.be/N2ELIqLWz0k&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tools"&gt;
  &lt;/a&gt;
  The Tools
&lt;/h3&gt;

&lt;p&gt;The first tool we are going to take a look at is &lt;strong&gt;integrated in Visual Studio&lt;/strong&gt;, so it works on Windows, while the second one requires the &lt;strong&gt;use of the CLI&lt;/strong&gt; and therefore can be used in MacOS and Linux as well.&lt;/p&gt;

&lt;p&gt;Let's jump into VS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#from-visual-studio"&gt;
  &lt;/a&gt;
  From Visual Studio
&lt;/h4&gt;

&lt;p&gt;Doing it from Visual Studio is pretty straight forward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HY_FxW0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9zzkq0tc5qqzdg00zwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HY_FxW0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9zzkq0tc5qqzdg00zwa.png" alt="Deployment Type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just right-click on the &lt;strong&gt;Project Name&lt;/strong&gt;, select &lt;em&gt;__Publish&lt;/em&gt;&lt;em&gt;, choose your deployment target, and then you have the new _&lt;/em&gt;&lt;em&gt;Deployment Type&lt;/em&gt;_ selection.&lt;/p&gt;

&lt;p&gt;You can either deploy directly, as usual, or create a YAML file for the GitHub Actions CI/CD.&lt;/p&gt;

&lt;p&gt;After confirmation, Visual Studio will take care of the rest and create the YAML file for you in the &lt;code&gt;.github/workflows&lt;/code&gt; folder, named as your deployment target.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzbJANW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oefpiafjskopdjgtccqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzbJANW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oefpiafjskopdjgtccqm.png" alt="YAML Generated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image, the workflow takes care of both CI and CD for your application&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are on Visual Studio 2019 and you don't see the deployment type selection, make sure the feature is enabled. Go to &lt;em&gt;Tools &amp;gt; Options &amp;gt; Environment &amp;gt; Preview Features&lt;/em&gt; and make sure the &lt;strong&gt;&lt;em&gt;GitHub Actions support in Publish&lt;/em&gt;&lt;/strong&gt; is checked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#from-the-cli"&gt;
  &lt;/a&gt;
  From The CLI
&lt;/h4&gt;

&lt;p&gt;As I've said, the second way I have for you to generate a GitHub Actions Workflow without writing the YAML is using the &lt;strong&gt;dotnet CLI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://timheuer.com"&gt;Tim Heuer&lt;/a&gt; has in fact created an &lt;strong&gt;awesome template&lt;/strong&gt; that generates the workflow files for GitHub Actions from the CLI.&lt;/p&gt;

&lt;p&gt;First thing, we need to &lt;strong&gt;install the template&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new &lt;span class="nt"&gt;-i&lt;/span&gt; TimHeuer.GitHubActions.Templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the feature we want to use. Then just execute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new workflow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in the root folder of your project and you are done.&lt;/p&gt;

&lt;p&gt;What you’ll get is a straightforward GitHub Actions workflow to &lt;strong&gt;build and test&lt;/strong&gt; your .NET application. Keep in mind this is a starting point. It’s not going to do everything you might want, but it’s a solid base to build from.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Cool right? Let me know down below what you think about this, and as I've said before also how you usually create your Actions workflows.&lt;/p&gt;

&lt;p&gt;Also, speaking of GitHub Actions, checkout &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt;, where I talk about creating and using templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N2ELIqLWz0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>yaml</category>
      <category>cicd</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Coding is knowing how to ask questions *well*</title>
      <author>𝙹𝚊𝚜𝚘𝚗 𝙻𝚎𝚘𝚠 👨🏻‍💻</author>
      <pubDate>Thu, 30 Sep 2021 23:44:27 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/coding-is-knowing-how-to-ask-questions-well-4a7n</link>
      <guid>https://dev.to/jasonleowsg/coding-is-knowing-how-to-ask-questions-well-4a7n</guid>
      <description>&lt;p&gt;I’d been taking a web development course on Udemy and this week I finally started on learning server-side programming. Front-end development had been relatively easier for me to pick up because over the years of setting up Wordpress websites, one invariably comes across HTML, CSS and some Javascript. I realised there had been a lot of accidental immersion and learning in that aspect. But, back-end is completely foreign to me and now it’s feeling really hard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nobody-teaches-how-to-properly-google-for-answers"&gt;
  &lt;/a&gt;
  Nobody teaches how to properly google for answers
&lt;/h3&gt;

&lt;p&gt;One of the main things I never learned though was how to properly google programming questions when I’m stuck. As a beginner, I’m completely unfamiliar with the technical terms of the language, so I end up searching using very broad, vague keywords that doesn’t help much at all. I don’t even know how to phrase my problem properly!&lt;/p&gt;

&lt;p&gt;For instance, I was learning how to make a web scraper using PHP. The instructor showed us how to use &lt;code&gt;file_get_contents&lt;/code&gt; function but just to get the whole web page. I wanted to scrape a specific text content from a specific class so just simply using &lt;code&gt;file_get_contents&lt;/code&gt; wouldn’t work . So I simply googled “PHP scrape html class element”. Some useful stuff but still kind of broad. A lot of stuff pointing me to using other libraries. I fiddled around, copy and pasted bits of code I found from Stack Overflow but nothing worked (I later realised I needed to download the libraries, which wasn’t really mentioned in the answers ?). &lt;/p&gt;

&lt;p&gt;Later on during the instructor demo, he googled “split a string” and got links to the &lt;code&gt;explode&lt;/code&gt; function, which helps to extract specific parts of the HTML code after you used the &lt;code&gt;file_get_contents&lt;/code&gt; function. Like WTF? How does a beginner even know “split a string” are the right keywords to use?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-even-knowing-the-right-search-key-words-to-use"&gt;
  &lt;/a&gt;
  Not even knowing the right search key words to use
&lt;/h3&gt;

&lt;p&gt;The problem is I don’t even know the right words to use to get to what I need. The right words at the right level of specificity and technicality. Learning the coding ‘vocabulary’ of terms and syntax takes time and as a beginner, that’s my weak spot in being able to find the right answers online.&lt;/p&gt;

&lt;p&gt;It felt like I was trying to learn a foreign language, like say French, but only had a German-French dictionary to learn it. If I don’t know German to start with, how do I even find the right word in French? How do I bridge English to German (i.e. rookie search keywords to right technical terms to the right answer)?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners-guide-on-how-to-know-what-key-words-to-use"&gt;
  &lt;/a&gt;
  Beginner's guide on how to know what key words to use
&lt;/h3&gt;

&lt;p&gt;After doing some reading online and coming across great articles like this one, I learned that it’s like a funnel/spiral, with at least 2 layers of search to slowly zoom in on my answer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Do a general, intentionally imperfect search first, to find the right technical terms:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a.  Search on community forums where beginners might have phrased the same question in the same way as you would have. Stack Overflow might not be the most useful at this stage yet.&lt;/p&gt;

&lt;p&gt;b.  Or scroll through support documentation like W3 School or specific ones like PHP.net (these are like the ‘dictionaries’ of programming), where you can read through the definitions of the syntax, and starting collecting the right keywords…&lt;/p&gt;

&lt;p&gt;c.  Narrow in on a few keywords - the language/framework/library you’re using, a noun to describe the what (e.g. element, selector), a verb to describe an action/task you want to do with something (e.g. event, function)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then get more specific and technical on the next layer of search:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a.  This time, we can start trying more expert forums like Stack Overflow, or one for your language&lt;/p&gt;

&lt;p&gt;b.  Type and search away! &lt;/p&gt;

&lt;p&gt;Did I miss out anything? Any other useful tips on how to google for the right answer in programming?&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Don't be an SMS Spammer. Build a tool to help you manage your SMS using Twilio and Retool.</title>
      <author>Eric Goldman</author>
      <pubDate>Thu, 30 Sep 2021 23:02:13 +0000</pubDate>
      <link>https://dev.to/thisisgoldman/don-t-be-an-sms-spammer-build-a-tool-to-help-you-manage-your-sms-using-twilio-and-retool-1l77</link>
      <guid>https://dev.to/thisisgoldman/don-t-be-an-sms-spammer-build-a-tool-to-help-you-manage-your-sms-using-twilio-and-retool-1l77</guid>
      <description>&lt;p&gt;In this tutorial, you'll add text messaging to a &lt;a href="https://retool.com/"&gt;Retool&lt;/a&gt; app using &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; and &lt;a href="https://www.twilio.com/"&gt;Sync Inc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Text messages (SMS) are an excellent medium for chatting with customers or notifying your team. Adding text messaging to a Retool app is easy with Twilio. Still, there are many prerequisites: Before you can send your first SMS from Retool, you'll need to set up and deploy a server that adequately handles Twilio webhooks. Then, as messages come in and out, you'll need to implement middleware to match conversations to your users appropriately. And if you want to pull insights from your conversations, you'll need to work out a process for extracting your data from Twilio.&lt;/p&gt;

&lt;p&gt;Using Sync Inc, you'll skip these prerequisites. Sync Inc replicates Twilio to your Postgres database in real-time. No need to handle webhooks, deploy a server, or rethink your schema. With all your Twilio data in your database, mapping conversations to users is a simple &lt;code&gt;JOIN&lt;/code&gt;. Pair a Sync Inc database with Retool's first-class support for SQL - and you can add SMS (or phone calls, WhatsApp, etc.) to your app in no time.&lt;/p&gt;

&lt;p&gt;To show you how these systems work together, you'll build a Retool app that allows you to select a user, read text message conversation history, and continue the conversation by sending a new reply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-twilio"&gt;
  &lt;/a&gt;
  Setting up Twilio
&lt;/h2&gt;

&lt;p&gt;You'll need a Twilio account and a Twilio phone number. Follow &lt;a href="https://www.twilio.com/docs/sms/quickstart/node#sign-up-for-twilio-and-get-a-twilio-phone-number"&gt;Twilio's quickstart guide&lt;/a&gt; to get your account and phone number set up.&lt;/p&gt;

&lt;p&gt;Out of the box, Twilio uses webhooks to notify you of incoming messages. Without a webhook in place, Twilio will automatically respond to any incoming messages with errors. To assign a webhook to your new phone number, navigate to the &lt;a href="https://console.twilio.com/us1/develop/phone-numbers/manage/active?frameUrl=/console/phone-numbers/incoming"&gt;active numbers&lt;/a&gt; page and select the phone number you just created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1UQcMa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/002_select_phone.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1UQcMa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/002_select_phone.png" alt="Select phone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the messaging section, and under &lt;strong&gt;A message comes in&lt;/strong&gt; select &lt;strong&gt;webhook&lt;/strong&gt;. Enter Sync Inc's homepage (&lt;code&gt;https://syncinc.so&lt;/code&gt;), select &lt;code&gt;HTTP GET&lt;/code&gt;, and click &lt;strong&gt;Save&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtvtqcUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/003_enter_webhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtvtqcUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/003_enter_webhook.png" alt="Add webhook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the last step, you'll want to be able to test your new messaging capabilities. To make testing possible, go to the &lt;a href="https://console.twilio.com/us1/develop/phone-numbers/manage/verified"&gt;Verified Caller ID's&lt;/a&gt; page and click the &lt;strong&gt;+ button&lt;/strong&gt; to enter and verify a phone number you can send and receive texts from:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQnp_QOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/004_verify_num.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQnp_QOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/004_verify_num.png" alt="Verify number"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've now configured Twilio so that you can send and receive text messages. Before moving on, note down your Twilio credentials from your Twilio dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0037itbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/005_twilio_details.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0037itbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/005_twilio_details.png" alt="Twilio details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Phone number&lt;/li&gt;
&lt;li&gt;Account SID&lt;/li&gt;
&lt;li&gt;Auth token&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-sync-inc"&gt;
  &lt;/a&gt;
  Setting up Sync Inc
&lt;/h2&gt;

&lt;p&gt;Sync Inc will sync your Twilio data to a Postgres database in real-time. Within a couple of seconds, all new Twilio conversation data will be updated in your database.&lt;/p&gt;

&lt;p&gt;To get your Twilio sync started, &lt;a href="https://app.syncinc.so/signup"&gt;create a Sync Inc account&lt;/a&gt; and then select &lt;strong&gt;Twilio&lt;/strong&gt; as your source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4GOOvR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/006_select_twilio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4GOOvR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/006_select_twilio.png" alt="Select Twilio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter your Twilio &lt;strong&gt;Account SID&lt;/strong&gt; and &lt;strong&gt;Auth Token&lt;/strong&gt; (which you noted down earlier).&lt;/p&gt;

&lt;p&gt;For your destination, you have two options. You can sync to a &lt;strong&gt;Sync Inc-hosted database&lt;/strong&gt; that will be immediately provisioned for you. Or, you can select to sync to your &lt;strong&gt;self-hosted database&lt;/strong&gt;. To get up and running quickly in this tutorial, select to sync to a new Sync Inc database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pz2WGapa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/007_enter_twilio_details.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pz2WGapa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/007_enter_twilio_details.png" alt="Enter twilio details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For your full application, you'll likely want to sync to your database so you have more control and can query across your data with ease. You can learn more about syncing to your database in the &lt;a href="https://docs.syncinc.so/self-hosted"&gt;Sync Inc docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, click &lt;strong&gt;Start syncing&lt;/strong&gt;. Sync Inc will provision your database and begin syncing your Twilio data. You can learn more about the full sync process in our &lt;a href="https://docs.syncinc.so/twilio/reference"&gt;Twilio reference docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll be presented with the credentials for your database. Note down these credentials or keep the Sync Inc tab open as you set up Retool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-your-data"&gt;
  &lt;/a&gt;
  Setting up your data
&lt;/h2&gt;

&lt;p&gt;The purpose of your Retool app is to quickly allow you to communicate with users or your team members using SMS. So your app is going to need some user data.&lt;/p&gt;

&lt;p&gt;Ideally, you already have this data (i.e., names and phone numbers) in your database. But for this tutorial, we'll use some fake data in Airtable to help jump-start the process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxHHNoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/008_airtable.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxHHNoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/008_airtable.png" alt="Airtable base"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't have one already, create a &lt;a href="https://airtable.com"&gt;free Airtable account&lt;/a&gt;. Then, open up the &lt;a href="https://airtable.com/shrOWbIbTw8sdM2y1"&gt;Airtable template&lt;/a&gt; we put together for this tutorial and copy it to your workspace by clicking the &lt;strong&gt;Copy base&lt;/strong&gt; link in the top right corner.&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Twilio + Retool + Sync Inc&lt;/strong&gt; base you just added to your workspace, and in the first row, enter your details - including the phone number that you verified in your Twilio account earlier.&lt;/p&gt;

&lt;p&gt;Now, sync your Airtable base to your Sync Inc database. To do so, head back to Sync Inc and click the &lt;strong&gt;Add Sync&lt;/strong&gt; button. Select Airtable and enter your &lt;strong&gt;Airtable API Key&lt;/strong&gt; (which you can find on your &lt;a href="https://airtable.com/account"&gt;Airtable account page&lt;/a&gt;). Select the &lt;strong&gt;Twilio + Retool + Sync Inc&lt;/strong&gt; base and sync all the tables:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--un7Ej0pI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/009_sync_at.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--un7Ej0pI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/009_sync_at.png" alt="Sync Airtable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make things easier, sync your sample user data to the same database you are using for your Twilio data. This way, you'll only need to connect one database to Retool and simplify your queries. To do so, click the &lt;strong&gt;Edit&lt;/strong&gt; button in the &lt;strong&gt;Destination&lt;/strong&gt; section and select &lt;strong&gt;Choose existing&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azjVCS1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/010_sync_existing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azjVCS1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/010_sync_existing.png" alt="Select existing DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the window that appears, select the database that contains your Twilio data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PY3ky1x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/011_select_twilio_db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PY3ky1x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/011_select_twilio_db.png" alt="Select existing DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the name of the schema Sync Inc will sync to. Something like &lt;code&gt;users&lt;/code&gt; will be easy and short. Then click &lt;strong&gt;Confirm changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gi7hPGOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/012_set_schema.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gi7hPGOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/012_set_schema.png" alt="Select existing DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click the &lt;strong&gt;Create&lt;/strong&gt; button to sync your data into a new schema within the same database containing all your Twilio data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-retool"&gt;
  &lt;/a&gt;
  Setting up Retool
&lt;/h2&gt;

&lt;p&gt;With all your data in place, you're ready to connect your Sync Inc database and Twilio to Retool.&lt;/p&gt;

&lt;p&gt;To get going, create a free &lt;a href="https://login.retool.com/auth/signup"&gt;Retool account&lt;/a&gt;, then go to the &lt;strong&gt;Resources tab&lt;/strong&gt; and click the &lt;strong&gt;Create new&lt;/strong&gt; button. Select &lt;strong&gt;Postgres&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Enter the name for your resource (i.e., &lt;code&gt;Sync Inc&lt;/code&gt;) and then enter the &lt;strong&gt;Host&lt;/strong&gt;, &lt;strong&gt;Port&lt;/strong&gt;, &lt;strong&gt;Database name&lt;/strong&gt;, &lt;strong&gt;Database username&lt;/strong&gt;, and &lt;strong&gt;Password&lt;/strong&gt; for your Sync Inc database (you can use the credentials from either your Twilio resource or your Airtable sample data resource — since both are in the same database, the credentials are the same!). You can copy and paste these from Sync Inc. Then click the blue &lt;strong&gt;Create resource&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zhxrCr5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/013_add_sync_inc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zhxrCr5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/013_add_sync_inc.png" alt="Add Sync Inc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With your Sync Inc database connected, you'll now create a Twilio resource so you can easily write to the Twilio API. On the resources tab, click the &lt;strong&gt;Create new&lt;/strong&gt; button again. This time, select &lt;strong&gt;Twilio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Give your resource a name (something like &lt;code&gt;Twilio&lt;/code&gt; :) ) and then enter your &lt;strong&gt;Twilio Account SID&lt;/strong&gt; and &lt;strong&gt;Twilio Auth token&lt;/strong&gt;, which you noted earlier. Click &lt;strong&gt;Create resource&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bsN3Rkl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/014_add_twilio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bsN3Rkl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/014_add_twilio.png" alt="Add Twilio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-your-retool-app"&gt;
  &lt;/a&gt;
  Building your Retool app
&lt;/h2&gt;

&lt;p&gt;For this Retool app, you want to select a user, see their details and conversation history, and then continue the conversation by sending a new text message to the user.&lt;/p&gt;

&lt;p&gt;To build this app, you'll first scaffold the front-end in Retool. Then you'll populate that front-end with data by querying your Sync Inc database. Finally, you'll add the ability to write and send new text messages to the selected user.&lt;/p&gt;

&lt;p&gt;To get started, create a new blank Retool app by clicking the &lt;strong&gt;Create new&lt;/strong&gt; button and selecting &lt;strong&gt;Create a blank app&lt;/strong&gt;. Then name your app something like &lt;code&gt;Comms Central Command&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaffold-the-ui"&gt;
  &lt;/a&gt;
  Scaffold the UI
&lt;/h3&gt;

&lt;p&gt;The interface for this app will have four main components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A table where you can sort, search, and find the user you want to chat with.&lt;/li&gt;
&lt;li&gt;A user details card that shows some details about the user.&lt;/li&gt;
&lt;li&gt;A chat timeline that shows the chronological order of sent and received messages.&lt;/li&gt;
&lt;li&gt;A form where you can compose and send new messages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Drag and drop the following components onto your canvas and enter placeholder text for now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9TboMc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/001_scaffold.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9TboMc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/001_scaffold.png" alt="Scaffold the UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need more guidance on scaffolding your UI, check out our more thorough step-by-step Retool tutorial &lt;a href="https://docs.syncinc.so/playbooks/airtable/retool-svoc"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#query-your-data"&gt;
  &lt;/a&gt;
  Query your data
&lt;/h3&gt;

&lt;p&gt;With your scaffolding in place, begin to add data to your application, starting with the users table.&lt;/p&gt;

&lt;p&gt;Open up the bottom drawer where you can create a new query. Select your &lt;strong&gt;Sync Inc&lt;/strong&gt; Postgres database as the resource and enter the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;phone&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query selects several columns from the &lt;code&gt;users&lt;/code&gt; table within the &lt;code&gt;users&lt;/code&gt; schema. It also performs a &lt;em&gt;string aggregation&lt;/em&gt; to concatenate the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; columns.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save and run&lt;/strong&gt; and then rename the query &lt;code&gt;get_users&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QX036fwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/016_get_users.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QX036fwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/016_get_users.png" alt="Get users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, pipe the data from your new &lt;code&gt;get_users&lt;/code&gt; query into the table component. Select the table component on the canvas and in the inspector on the right, enter &lt;code&gt;{{get_users.data}}&lt;/code&gt; into the data field. The double brackets tell Retool you'll be entering JavaScript. Then the &lt;code&gt;get_users.data&lt;/code&gt; pulls the data in from the query.&lt;/p&gt;

&lt;p&gt;You'll see the table now contains the data from your query:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urM_a67R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/017_pop_table.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urM_a67R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/017_pop_table.png" alt="Populate table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With your user data in the table, you can now populate the user details card.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;First Last&lt;/strong&gt; placeholder text in the card. In the inspector on the right, replace the value with &lt;code&gt;# {{table1.selectedRow.data.name}}&lt;/code&gt;. This javascript statement pulls the &lt;code&gt;name&lt;/code&gt; field from the selected row in your table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7j3D65mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/018_detail_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7j3D65mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/018_detail_1.png" alt="Populate card 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finish populating the customer card by selecting the &lt;strong&gt;📨 user_email | 💬 user_phone&lt;/strong&gt; placeholder text. Replace the value in the inspector with &lt;code&gt;📨 {{table1.selectedRow.data.email}} | 💬 {{table1.selectedRow.data.phone}}&lt;/code&gt;. As before, this statement pulls in the user's email and phone details from the selected row in the table component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdZbjhL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/019_detail_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdZbjhL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/019_detail_2.png" alt="Populate card 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have your user table and user details card populating with data. Now, pull in the conversations for each user from the &lt;code&gt;message&lt;/code&gt; table in your Sync Inc database.&lt;/p&gt;

&lt;p&gt;The first step in pulling in the users's messages is to join the &lt;code&gt;user&lt;/code&gt; data to the &lt;code&gt;message&lt;/code&gt; data using the phone number. To do so, you need to ensure that the format of the phone number is consistent. Twilio uses the &lt;a href="https://www.twilio.com/docs/glossary/what-e164"&gt;E.164 standard format&lt;/a&gt; for phone numbers - so you'll need a helper function to ensure all your user's phone numbers are converted into the E.164 format.&lt;/p&gt;

&lt;p&gt;Create a helper function by opening up the bottom drawer, and clicking to create a new JavaScript transformer. Then, paste in the following script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]{0,14}&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Join parts returned from RegEx match&lt;/span&gt;
  &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Start number with "+"&lt;/span&gt;
  &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Limit length to 15 characters&lt;/span&gt;
  &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script pulls in the selected phone number from the table and uses RegEx to format and return the phone number in E.164 format.&lt;/p&gt;

&lt;p&gt;Save this helper function and name it &lt;code&gt;e164_phone&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaF34O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/020_transformer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaF34O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/020_transformer.png" alt="Transformer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create a new query on your Sync Inc Postgres database and paste in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_sent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;e164_phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;e164_phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_sent&lt;/span&gt; &lt;span class="k"&gt;asc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query uses the phone number for the selected user (formatted in e.164 by your helper function) to pull in any message sent to or received from that user. Even though the query returns an empty table for now (you haven't sent or received a text yet from your Twilio phone number) can click to save the query and name it &lt;code&gt;get_messages&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7CYcJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/021_get_messages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7CYcJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/021_get_messages.png" alt="Get messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll want to run this query every 15 seconds or so to see if any new messages from the user arrived. Click on the &lt;strong&gt;Advanced&lt;/strong&gt; tab and check the box to &lt;strong&gt;Run this query periodically&lt;/strong&gt;. Then, set the period interval to &lt;strong&gt;15000&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPUvSn3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/022_advanced.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPUvSn3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/022_advanced.png" alt="Get messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, map this query to your UI by selecting the timeline component. In the inspector, make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;Grouped&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Items&lt;/strong&gt; enter: &lt;code&gt;{{get_messages.data.body}}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Timestamps&lt;/strong&gt; enter: &lt;code&gt;{{get_messages.data.date_sent}}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The timeline will appear blank (we still haven't sent a message yet!) but your UI is now pulling in all the data you need from your database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7PYL7Ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/023_set_timeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7PYL7Ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/023_set_timeline.png" alt="Set timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-and-receive-messages"&gt;
  &lt;/a&gt;
  Send and receive messages
&lt;/h3&gt;

&lt;p&gt;With your database reads working, your Retool app is already configured to receive incoming messages. Now, you'll setup Twilio with the Sync Inc &lt;code&gt;/wait&lt;/code&gt; endpoint to send messages - completing the loop.&lt;/p&gt;

&lt;p&gt;Open the bottom drawer in Retool and create a new query on your Twilio resource as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJ2hzYNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/024_send_sms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJ2hzYNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/024_send_sms.png" alt="Send SMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operation&lt;/strong&gt;: &lt;code&gt;POST&lt;/code&gt; to the &lt;code&gt;/2010-04-01/Accounts/{AccountSid}/Messages.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To&lt;/strong&gt;: &lt;code&gt;{{format_for_twilio.value}}&lt;/code&gt; - this is the phone number of the selected customer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;From&lt;/strong&gt;: Your Twilio phone number (enter it as a string using "")&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Body&lt;/strong&gt;: &lt;code&gt;{{textArea1.value}}&lt;/code&gt; - this is the value of the text input in your UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the query and name it &lt;code&gt;send_sms&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After sending a message to a user, you'll want to run the &lt;code&gt;get_messages&lt;/code&gt; query to populate the new message into your UI. Sync Inc provides a convenient &lt;code&gt;/wait&lt;/code&gt; endpoint. It will return a &lt;code&gt;200 ok&lt;/code&gt; after all events have been written to the database. This ensure that when you query your database for new messages it includes the message you just sent.&lt;/p&gt;

&lt;p&gt;To configure this into your Retool app, click to create one more query and select &lt;strong&gt;RESTQuery&lt;/strong&gt; as the resource. Then, configure the query as a simple &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;wait/&lt;/code&gt; URL for your Twilio resource (you can get the unique &lt;code&gt;wait/&lt;/code&gt; endpoint for your resource from the Sync Inc console by clicking the &lt;strong&gt;Connect&lt;/strong&gt; button on your resource):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h64IvGQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/025_wait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h64IvGQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/025_wait.png" alt="Wait"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save and run&lt;/strong&gt;. Then name your query &lt;code&gt;sync_inc_wait&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, you need to chain these queries together: As soon as a message is sent, the &lt;code&gt;/wait&lt;/code&gt; endpoint is called, then the &lt;code&gt;get_messages&lt;/code&gt; query is run, and simultaneously the form for sending the text messages is cleared.&lt;/p&gt;

&lt;p&gt;To do so, open the &lt;code&gt;send_sms&lt;/code&gt; query, and under &lt;strong&gt;Event handlers&lt;/strong&gt; click the &lt;strong&gt;New&lt;/strong&gt; link. Configure the event handler to trigger the &lt;code&gt;sync_inc_wait&lt;/code&gt; query on success. Then &lt;strong&gt;Save&lt;/strong&gt; your changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxPbv-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/026_event_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxPbv-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/026_event_1.png" alt="Event 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, reopen the &lt;code&gt;sync_inc_wait&lt;/code&gt; query and add two more event handlers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ob10U3JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/027_event_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ob10U3JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/027_event_2.png" alt="Event 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On success, trigger the &lt;code&gt;get_messages&lt;/code&gt; query.&lt;/li&gt;
&lt;li&gt;On success, clear the value of the &lt;code&gt;textArea1&lt;/code&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last step is to connect the &lt;code&gt;send_sms&lt;/code&gt; query to your app.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Send&lt;/strong&gt; button in your UI, and add an event handler that triggers the &lt;code&gt;send_sms&lt;/code&gt; query when clicked:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYSp8F5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/028_trigger_button.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYSp8F5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/028_trigger_button.png" alt="Event 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-your-app"&gt;
  &lt;/a&gt;
  Test your app
&lt;/h3&gt;

&lt;p&gt;Let's see your app in action. Select your test user in the table (i.e., the user with your validated phone number). Then, compose a quick message to yourself and click the &lt;strong&gt;Send&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Voila - the message is sent! On your phone, reply to the message... and it appears in your app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhVbn2AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/029_final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhVbn2AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/029_final.png" alt="Final"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;You can now message anyone with a phone number from your Retool app. You didn't need to setup a back-end, deal with webhooks, or think twice about missing an event. You used SQL to quickly pull your data together, and Retools easy to build UI and query management to string it all together.&lt;/p&gt;

&lt;p&gt;From here, you can tailor the app to your needs. Add workflows, validation, bulk messaging, and more.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>twilio</category>
      <category>tooling</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Automatically Redirect Auth0 WordPress Users to SSO Login</title>
      <author>Cody Ogden</author>
      <pubDate>Thu, 30 Sep 2021 22:17:08 +0000</pubDate>
      <link>https://dev.to/codyogden/automatically-redirect-auth0-wordpress-users-to-sso-login-2524</link>
      <guid>https://dev.to/codyogden/automatically-redirect-auth0-wordpress-users-to-sso-login-2524</guid>
      <description>&lt;p&gt;A recent project had me working with the &lt;a href="https://wordpress.org/plugins/auth0/"&gt;Login by Auth0&lt;/a&gt; again. It's a great, simple, "does one thing and doesn't try to take over the WordPress dashboard" plugin. In my opinion, this is the best kind of plugin. And while it has its issues around documentation, I was presented with some challenges around building custom login buttons that bypass the included Auth0 login screen.&lt;/p&gt;

&lt;p&gt;Ideally, the user could click "Sign In with Google" or "Sign In with Apple," and they would be immediately sent to the services' login flow avoiding clicking through the example-tenant-domain.auth0.com login page. While &lt;a href="https://auth0.com/docs/cms/wordpress-plugin/extend-login-by-auth0"&gt;Auth0's documentation&lt;/a&gt; for this plugin could be better, I was able to create separate buttons that act much more like a native SSO login experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-skip-the-auth0-login-page-while-using-the-auth0-wordpress-plugin"&gt;
  &lt;/a&gt;
  How to skip the Auth0 Login page while using the Auth0 WordPress plugin?
&lt;/h2&gt;

&lt;p&gt;The Auth0 plugin has a built-in way to auto-direct users to a specific login provider (i.e. Users can specify &lt;code&gt;google-oauth2&lt;/code&gt; and the login will automatically redirect to Google). We're going to co-opt this ability to build our own, automatically redirecting login URLs.&lt;/p&gt;

&lt;p&gt;First, let's set a valid list of subscribers. This simple function will return a filterable array of SSO provider slugs that match our settings in Auth0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;wpa0_sso_connections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'google-oauth2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wpa0_sso_connections'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$connections&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we'll build a function that can potentially replace all (or some) of the &lt;code&gt;wp_login_url()&lt;/code&gt;  function. We can use this function in templating when we create specific buttons for provider logins, or a drop-in replacement where we'd normally use &lt;code&gt;wp_login_url&lt;/code&gt;. It takes three, optional arguments: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$connection&lt;/code&gt;: The Auth0 provider slug.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$redirect&lt;/code&gt;: The URL the user should be redirected to after they successfully login.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$force_reauth&lt;/code&gt;: Allows us to force reauthorization even if a cookie is present (force a login on the user).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If no arguments are passed, it will simply return the default &lt;code&gt;wp_login_url&lt;/code&gt;, which will redirect users to the Auth0 login page.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;wpa0_sso_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$redirect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$force_reauth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$login_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;wp_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$force_reauth&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wpa0_sso_login_url'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nf"&gt;add_query_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$login_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$login_url&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you pass a provider slug to the $connection argument, you'll find that the &lt;code&gt;wp_login_url&lt;/code&gt; is returned with an extra query var. (e.g. &lt;code&gt;https://example.com/wp-login.php?connection=google-oauth2&lt;/code&gt;). This query var is key to letting us tell Auth0 to which provider it should automatically forward the user.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-auth0getautologinconnection-to-redirect-users"&gt;
  &lt;/a&gt;
  How to use auth0_get_auto_login_connection to redirect users?
&lt;/h2&gt;

&lt;p&gt;Auth0 provides a filter called &lt;a href="https://auth0.com/docs/cms/wordpress-plugin/extend-login-by-auth0#auth0_get_auto_login_connection"&gt;&lt;code&gt;auth0_get_auto_login_connection&lt;/code&gt;&lt;/a&gt; that does exactly what you might think: it returns the connection specified by a user in the plugin's settings. This filter is run during a user accessing the login link we generated above. We can return the connection slug we provided in the login link above, and the user will be automatically redirected to that provider's SSO.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'auth0_get_auto_login_connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wpa0_auto_login_filter'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;wpa0_auto_login_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;wpa0_sso_connections&lt;/span&gt;&lt;span class="p"&gt;())))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function checks to ensure we have a connection query var and that it's not empty, then it checks to ensure the query var that was passed is valid by checking it against our &lt;code&gt;wpa0_sso_connections&lt;/code&gt; function. If all those conditions pass, it returns the connection query var, triggering the user's login attempt to be immediately forwarded to the provider.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-create-auth0-automatic-redirect-login-button"&gt;
  &lt;/a&gt;
  How to create Auth0 automatic redirect login button?
&lt;/h2&gt;

&lt;p&gt;Let's put it all together. In our fake templating file, let's pretend we have a link to Sign In with Apple.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Sign In with Apple&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's add our &lt;code&gt;wpa0_sso_login_url&lt;/code&gt; function with the Apple connection slug, and then let's redirect users to &lt;code&gt;/wp_admin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;wp_sso_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;admin_url&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In with Apple&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above will output:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/wp-login.php?redirect_to=https%3A%2F%2Fexample.com%2Fwp-admin%2F&amp;amp;connection=apple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In with Apple&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice the &lt;code&gt;connection&lt;/code&gt; query variable? This will be detected by our &lt;code&gt;wpa0_auto_login_filter&lt;/code&gt; when a user clicks. Since &lt;code&gt;apple&lt;/code&gt; is a valid Auth0 connection slug in our &lt;code&gt;wpa0_sso_connections&lt;/code&gt; function, the user will automatically be sent to the Apple sign in screen and then redirected to &lt;code&gt;/wp-admin&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;You can place all these functions in your theme's &lt;code&gt;functions.php&lt;/code&gt; file or inside your custom plugin. Here's a Gist with doc comments that summarizes this post.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;p&gt;Thanks for reading! Follow me on &lt;a href="https://twitter.com/codyogden"&gt;Twitter&lt;/a&gt;! Originally published on &lt;a href="https://codyogden.com/blog/login-by-autho-wordpress-user-automatic-sso"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>auth0</category>
      <category>php</category>
      <category>sso</category>
    </item>
    <item>
      <title>Have Fear and Contribute Anyway</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 30 Sep 2021 22:04:18 +0000</pubDate>
      <link>https://dev.to/coffeecraftcode/have-fear-and-contribute-anyway-4843</link>
      <guid>https://dev.to/coffeecraftcode/have-fear-and-contribute-anyway-4843</guid>
      <description>&lt;p&gt;&lt;small&gt;Cover Photo by &lt;a href="https://unsplash.com/@thetonik_co?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Tonik&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;I am a mom of 4. When I was pregnant with my second child I had a lot of fears about labor. I had these fears despite already having labored once with my first child. These fears consumed me until I read an article titled &lt;a href="https://midwifethinking.com/2013/03/27/feel-the-fear-and-birth-anyway"&gt;"Feel the Fear and Birth Anyway"&lt;/a&gt; by Dr Rachel Reed.&lt;/p&gt;

&lt;p&gt;I know, I know. You are probably thinking, "Whoa this is a developer blog platform, why are you talking about birth!?" &lt;/p&gt;

&lt;p&gt;I am talking about this because we all experience fear. I bring up the article "Feel the Fear and Birth Anyway" because it didn't just help me with my fear of giving birth – it helped me understand that fear is not only ok it’s something we all must feel at some point. The article also made me understand that I didn't have to talk myself &lt;em&gt;out&lt;/em&gt; of fear to  accomplish something. &lt;/p&gt;

&lt;p&gt;When I later started learning to code, I went into the field with the same mindset. I was starting something completely new, so it was natural for me to be afraid! I could be afraid and still be a software developer. &lt;/p&gt;

&lt;p&gt;Contributing to open source is something a lot of developers fear. They fear it because they don't understand how to do it, they are worried about someone critiquing their code, or for many other reasons. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am writing &lt;em&gt;this&lt;/em&gt; article to tell you it is ok to have these fears but you can still contribute anyway.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started?
&lt;/h2&gt;

&lt;p&gt;One reason software developers  fear open source is because of the unknown. If we don't know how to do something, we are much less likely to try it. In my opinion, the remedy for this is external support and guidance, so I’m going to give you some tips here on how you can get started contributing to open source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributing-guides"&gt;
  &lt;/a&gt;
  Contributing Guides
&lt;/h3&gt;

&lt;p&gt;My first tip is to find a project that has a good contributing guide. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w4OUkyEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s62kjphvzadu2nw60mna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w4OUkyEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s62kjphvzadu2nw60mna.png" alt="Contributing guide on Forem repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This file will usually be labelled as &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; and can be found in most open source repositories that are looking for community help. Again, having this file is typically a good indication that a project will be helpful and encourage your contributions. &lt;/p&gt;

&lt;p&gt;Take the time to read through a projects contributing guide &lt;strong&gt;before&lt;/strong&gt; you try to contribute. This will save you and the maintainers of the project a lot of time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;Tip number two is to get acquainted with a project's open issues. &lt;br&gt;
If a project is on GitHub you will see the open issues in the &lt;code&gt;Issues&lt;/code&gt; tab. You can also use filters to search for specific issues.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6q0ybzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgj2gzhqs8x6g9fr9bd4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6q0ybzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgj2gzhqs8x6g9fr9bd4.png" alt="filtering issues"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the questions you will want to consider include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Does this project &lt;a href="https://github.com/forem/forem/labels"&gt;label&lt;/a&gt; their open issues?&lt;/strong&gt; 
&lt;em&gt;Labels are useful to help contributors know if the issue is a bug, a good first issue, what tech might be needed, for the Core team only to work on, etc.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Are there conversations happening on the open issues?&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How many open issues does the project have and how responsive are the maintainers to contributors' questions?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;These last two points are important to check so you know if you can ask questions before creating a PR.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h3&gt;

&lt;p&gt;This is probably one of the most important parts of contributing to an open source project. Good communication between a contributor and maintainers can make your experience so much better. &lt;/p&gt;

&lt;p&gt;Contributors should ask questions often before they start working on an issue and while working on their PR. &lt;/p&gt;

&lt;p&gt;To get help quicker from maintainers be sure to ask &lt;strong&gt;thoughtful questions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Your questions should provide a lot of detail about where you are stuck or what you think you should do to fix an issue. &lt;/p&gt;

&lt;p&gt;Keep in mind that many maintainers volunteer on projects and also may be in vastly different time zones than you. Asking short, indirect questions, will lead to you getting a response much slower from a maintainer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-pr"&gt;
  &lt;/a&gt;
  Creating a PR
&lt;/h3&gt;

&lt;p&gt;Once you have discussed the open issue with the maintainers you can start working on a pull request (“PR”).&lt;/p&gt;

&lt;p&gt;You will want to again see if the project has guidelines for how they would like you to create a PR.&lt;/p&gt;

&lt;p&gt;In general, most projects will have you &lt;a href="https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/about-forks"&gt;fork&lt;/a&gt; (make a copy of) the project to work from. &lt;/p&gt;

&lt;p&gt;Every project is a little different when it comes to their expectations for &lt;a href="https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches"&gt;branch&lt;/a&gt; usage, naming conventions, filling out PR templates, etc. If the project does not have guidelines on creating a PR, be sure to communicate with the maintainers beforehand. &lt;/p&gt;

&lt;p&gt;If you have never created a PR before I suggest you go through GitHub's Learning Lab called &lt;a href="https://lab.github.com/githubtraining/introduction-to-github"&gt;"Introduction to Github"&lt;/a&gt;. This lab will walk you through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a pull request&lt;/li&gt;
&lt;li&gt;Branches and commits&lt;/li&gt;
&lt;li&gt;Introducing changes with pull requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… and more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#draft-pr"&gt;
  &lt;/a&gt;
  Draft PR
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pMkfTOMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bxmalz0gzo4r84exkye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pMkfTOMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bxmalz0gzo4r84exkye.png" alt="Draft PR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2019-02-14-introducing-draft-pull-requests/"&gt;Draft PRs&lt;/a&gt; can be used when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need more guidance &lt;/li&gt;
&lt;li&gt;You would like more discussion on your PR&lt;/li&gt;
&lt;li&gt;You don't want to have your PR reviewed right away&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On both draft PRs and regular PRs, you can discuss any potential changes with maintainers.&lt;/p&gt;

&lt;p&gt;However, draft PRs can't be merged and maintainers will not be automatically requested to review your PR. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h4&gt;

&lt;p&gt;Once your PR is in and the maintainers start to review it, you will likely receive some feedback before your PR can be merged. &lt;/p&gt;

&lt;p&gt;You may see a "change request" or a "commit suggestion" added to your PR. Take the time to review the changes that were requested and ask any questions before making changes. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0ZHbbLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxemtgp8cyr84zgr78a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0ZHbbLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxemtgp8cyr84zgr78a.png" alt="Request for changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your PR is reviewed, it can be merged to the project's main branch. &lt;br&gt;
Every team is different and you may need to wait for a maintainer to merge your PR for you. If you are unsure &lt;strong&gt;ask thoughtful questions!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#etiquette"&gt;
  &lt;/a&gt;
  Etiquette
&lt;/h3&gt;

&lt;p&gt;When you are contributing to a project remember there are real people maintaining it. &lt;br&gt;
Respect their time. Be patient if someone is not responding as quickly as you would like. &lt;/p&gt;

&lt;p&gt;It is ok to be frustrated or confused, but do take the time to gather your thoughts, keep your cool, and most important of all &lt;strong&gt;be kind&lt;/strong&gt; when communicating.&lt;/p&gt;

&lt;p&gt;You can read more about etiquette for contributors in the post &lt;a href="https://dev.to/devteam/hacktoberfest-etiquette-for-contributors-ec6"&gt;Hacktoberfest Etiquette for Contributors.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now go forth, embrace the fear, &lt;strong&gt;but contribute to open source anyway!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohs4oKP0TgsP9acF2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohs4oKP0TgsP9acF2/giphy.gif" alt="Ready for the next step"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>GraphQL is not meant to be exposed over the internet</title>
      <author>S ♠️</author>
      <pubDate>Thu, 30 Sep 2021 21:24:45 +0000</pubDate>
      <link>https://dev.to/growthatwundergraph/graphql-is-not-meant-to-be-exposed-over-the-internet-3kel</link>
      <guid>https://dev.to/growthatwundergraph/graphql-is-not-meant-to-be-exposed-over-the-internet-3kel</guid>
      <description>&lt;p&gt;Hello World! My name is S and I am the head of growth here at &lt;a href="//www.wundergraph.com"&gt;Wundergraph&lt;/a&gt;. The article was written by our CEO / CTO Jens Neuse. Enjoy!&lt;/p&gt;

&lt;p&gt;GraphQL is currently one of the most frequently mentioned technologies when it comes to innovation in the API economy. Adopters enjoy the ease of use and tooling like for example GraphiQL, the browser-based user interface to try out any GraphQL API. The whole experience of GraphQL is exactly what frontend-developers need to build amazing interactive web applications.&lt;/p&gt;

&lt;p&gt;However, with the rise of adoption, I’m starting to get more and more concerned about the way people understand GraphQL and use it. In this post, I’d like to share my unpopular opinion on what GraphQL really is meant to be and why you should be concerned if you’re using it the popular-but-risky way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-styles"&gt;
  &lt;/a&gt;
  API styles
&lt;/h1&gt;

&lt;p&gt;Let’s take a step back and discuss APIs and API styles in general before answering the main question of why you’re probably using GraphQL the wrong way.&lt;/p&gt;

&lt;p&gt;APIs offer a way to hide the complexity of the implementation behind a user-friendly interface. For example, a shopping basket can have methods to add and delete items or to move forward to the checkout. As a user of this shopping cart API, you don’t have to think about how the data gets stored or what exactly happens when you add or remove an item.&lt;/p&gt;

&lt;p&gt;Over the last few decades various styles of APIs have emerged, all with different implementations, depending on the use cases. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-probably-dont-need-graphql"&gt;
  &lt;/a&gt;
  You probably don’t need GraphQL
&lt;/h1&gt;

&lt;p&gt;If you’d like to choose the right API style for a problem, you also have to consider how the API gets published and used. Do you know all your users and use cases? Are these users part of your own organization? Are they partners? The answers will most probably influence your choice of the API style and implementation, doesn’t it?&lt;/p&gt;

&lt;p&gt;The last sentence is where I think we get it wrong a lot of the time. I see people all over the place choose the API style and implementation long before the important questions were answered.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#do-you-have-facebook-scale-problems"&gt;
  &lt;/a&gt;
  Do you have Facebook scale Problems?
&lt;/h1&gt;

&lt;p&gt;The current most popular example of this behavior is GraphQL. Are you building a modern single page application with React? Awesome, use GraphQL! Facebook, Airbnb, Paypal, Netflix, they all do it so it must be a good fit.&lt;/p&gt;

&lt;p&gt;Why don’t we see more discussions around choosing the right technology for a given problem? I assume it’s a lack of education, but I’m not sure on this one. If you have any relevant degree, you might respond to this with your experience of education on APIs.&lt;/p&gt;

&lt;p&gt;Always keep in mind, if you use Facebook-scale tooling without having a Facebook-scale organization and Facebook-scale problems, you might realize painfully that you’re using a sledgehammer to crack a nut. It’s the same reason why chaos monkey makes sense for Netflix while it doesn’t for your two docker containers running on a 5$ machine on digital ocean.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-graphql-getting-so-popular"&gt;
  &lt;/a&gt;
  Why is GraphQL getting so popular?
&lt;/h1&gt;

&lt;p&gt;GraphQL simplifies the communication between API developer and API consumer. API consumers, often frontend developers, get lots of change requests from product owners which lead to changing requirements on the API. With GraphQL, you have a good chance of not being forced to talk to the developer of the API. You change the Query and can get back to CSS and Javascript.&lt;/p&gt;

&lt;p&gt;I assume this was one of the main drivers at GitHub to choose GraphQL as an implementation of the query-based API style for their new API. Their API is publicly available. They have big numbers of API consumers, all with different requirements. They can’t build resource-based APIs that satisfy all of their users. In this particular use-case, GraphQL might actually be a good choice. Instead of trying to solve each problem, they rather offer a generic GraphQL API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youre-probably-not-github-are-you"&gt;
  &lt;/a&gt;
  You’re probably not GitHub, are you?
&lt;/h1&gt;

&lt;p&gt;What are the trade-offs that GitHub is willing to accept when publicly exposing a GraphQL API? They have a whole team behind their GraphQL API, making sure you, the user, does not accidentally or intentionally break their systems. You can watch videos of them talking at conferences about the complex systems they built to secure their API and keep it stable. They’ve built tooling for GraphQL specific analytics to get better insights into API usage.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#do-you-fully-understand-the-risks"&gt;
  &lt;/a&gt;
  Do you fully understand the risks?
&lt;/h1&gt;

&lt;p&gt;I assume that many developers with a focus outside of security have little experience on what it takes to secure a REST API exposed on the internet. Most of us have little experience implementing authentication, authorization, rate limiting etc. . However, I think securing a RESTful API is rather simple, compared to a GraphQL API. Any HTTP-based API framework lets you define your routes and attach standardized middlewares to solve the problems listed above. A single HTTP call always corresponds to a single call on the controller of an API. With GraphQL on the other hand, a single Query might result in thousands of calls on the controllers (resolvers) of the API. There is no simple way to solve this problem.&lt;/p&gt;

&lt;p&gt;Depending on the language you use, various libraries are trying to help you with the issue. How trustful are these libraries? Do you fully understand how they work? Are there edge cases we’re not yet fully aware of?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#will-you-benefit-as-much-as-github-does"&gt;
  &lt;/a&gt;
  Will you benefit as much as GitHub does?
&lt;/h1&gt;

&lt;p&gt;Are you a single developer working on a side project? Do you benefit as much as you’re expecting from using GraphQL? Are you using many different clients with different data needs? Do you really need a query-based API? What’s your strategy to combat the problems listed above?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-im-not-exposing-my-graphql-api"&gt;
  &lt;/a&gt;
  But I’m not exposing my GraphQL API
&lt;/h1&gt;

&lt;p&gt;You might be thinking that your GraphQL API is not really exposed. It’s used on your website, but you don’t show the playground anywhere. If you’re using a GraphQL client in the frontend that directly talks to your GraphQL API, this API is exposed, even if not visually exposed with a GraphQL playground.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#am-i-leaking-sensitive-information"&gt;
  &lt;/a&gt;
  Am I leaking sensitive information?
&lt;/h1&gt;

&lt;p&gt;Do you allow any client to invoke the introspection Query? Are you leaking sensitive information through the introspection Query? Are you planning a new feature on the UI which will be made public in a few weeks or months? Is this feature already visible to your competition if they look at your schema? What if someone scrapes your schema every day to track changes and try attacks whenever you update your schema?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#schema-traversal-attacks"&gt;
  &lt;/a&gt;
  Schema traversal attacks
&lt;/h1&gt;

&lt;p&gt;Are you aware of schema traversal attacks? A user might be allowed to see his own account balance, but how about his/her friends? Is it possible to traverse the schema in a way you didn’t anticipate which leaks data? How do you test for this kind of behavior and ensure it’s not possible for your own schema?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bug-bounties-everywhere"&gt;
  &lt;/a&gt;
  Bug bounties everywhere
&lt;/h1&gt;

&lt;p&gt;Is there a reason why companies like Shopify participate in bug bounty programs? They seem to be aware of the complexity of securing a GraphQL API. They invite security experts to help them make their publicly available GraphQL API more secure. Do you realize that your GraphQL API is as vulnerable as Shopify’s?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-most-secure-graphql-server"&gt;
  &lt;/a&gt;
  The most secure GraphQL server
&lt;/h1&gt;

&lt;p&gt;How to make a system 100% secure to any kind of remote attack? If you want to be 100% safe, you should consider unplugging the network cable. However, this comes with some inconvenient drawbacks. You probably don’t want to store your GraphQL query on a USB dongle, walk to the remote computer and execute it manually, then copy the response back on the dongle and walk back to your own computer.&lt;/p&gt;

&lt;p&gt;What’s in between an unplugged network cable and exposing GraphQL? How about reducing the complexity to the level of a REST or RPC-based API while keeping the advantages of a query-based API?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#graphql-as-a-serverside-language"&gt;
  &lt;/a&gt;
  GraphQL as a server-side language
&lt;/h1&gt;

&lt;p&gt;If we primarily use GraphQL on the server to define JSON-RPC APIs, we get the best of both worlds. The flexibility of GraphQL combined with the security and predictable performance of an RPC-based API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-graphql-specification-is-designed-for-this"&gt;
  &lt;/a&gt;
  The GraphQL specification is designed for this
&lt;/h1&gt;

&lt;p&gt;The GraphQL spec allows us to define multiple Operations (Queries, Mutations, Subscriptions) in a single GraphQL document. In addition to this, the validation rules of the spec require all Operations in a GraphQL document to be named. There’s just one exception which allows a single anonymous Query. But in case the number of operations in a document are above 1 we’re already forced to name our Operations. Another important requirement is that all Operation names must be unique. That is, there shall be no two Operations with the same name.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-set-of-graphql-operations-is-a-jsonrpc-api"&gt;
  &lt;/a&gt;
  A set of GraphQL Operations is a JSON-RPC API
&lt;/h1&gt;

&lt;p&gt;The design of the GraphQL specification alongside with the validation rules builds a perfect foundation for what we’re trying to achieve here.&lt;/p&gt;

&lt;p&gt;If we want to define a new JSON-RPC API, all we have to do is create a new file containing a set of GraphQL Operations. Each Operation has a unique name. This name becomes the function name of the JSON-RPC. The Operation variables become the input of the RPC call.&lt;/p&gt;

&lt;p&gt;Next, we can “deploy” all Operations on our API backend and prepare the RPC Endpoints. Finally, based on the Operations and the known RPC-Endpoints we’re able to generate a client that knows about the schema as well as all RPC endpoints.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jsonrpcgraphql-compared-to-exposed-graphql"&gt;
  &lt;/a&gt;
  JSON-RPC-GraphQL compared to exposed GraphQL
&lt;/h1&gt;

&lt;p&gt;Pros: input and outputs are typesafe the attack surface is reduced you know all the Operations a client is using the generated client is very small, compared to a thick GraphQL client, which leads to smaller JS bundle size less bandwidth usage because we’re not sending Operations but just making RPC calls Query Parsing, Normalization &amp;amp; Validation happens at compile-time, not at runtime, making it more secure and performant no exposed GraphQL endpoint and therefore no exposed introspection either graph traversal attacks are impossible as the graph is not exposed anymore you know in advance when a change to the schema or one of the Operations would break a client and can mitigate this JSON-RPC turns any GraphQL Query into a GET request and therefore makes them easily cacheable at the transport layer because Operations are stored on the backend and never exposed to the client, you’re able to put authorization logic into the Operations&lt;/p&gt;

&lt;p&gt;Cons: you can no longer use your favorite GraphQL client you have to run a code generator whenever you update the Schema or any of the Operations you need to compile and store all Operations on the API backend this approach does only work when the API user is allowed to prepare and store Operations on the API backend&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Using GraphQL as a framework for building JSON-RPC APIs is not a solution to every problem. There are situations where it’s not feasible or simply technically impossible. However, a lot of GraphQL users can benefit from this approach, as it increases security and performance at marginal costs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#is-implementing-this-approach-your-business"&gt;
  &lt;/a&gt;
  Is implementing this approach your business?
&lt;/h1&gt;

&lt;p&gt;For most of you, the answer to this question will probably be “no”. At &lt;a href="//www.wundergraph.com"&gt;Wundergraph&lt;/a&gt;, our goal is to make APIs easy to use, secure and performant. We’ve already implemented the approach outlined above. If you don’t want to re-invent the wheel, we’d be more than happy to work with you together. We focus on the plumbing so you can solve problems of your own business domain and not waste your time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#interested-in-implementing-wundergraph-in-your-business"&gt;
  &lt;/a&gt;
  Interested in implementing Wundergraph in your business?
&lt;/h1&gt;

&lt;p&gt;Let’s chat!&lt;br&gt;
&lt;a href="https://8bxwlo3ot55.typeform.com/to/bAaZKNd7"&gt;https://8bxwlo3ot55.typeform.com/to/bAaZKNd7&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The DERN stack, the perfect alternative to MERN stack for Serverless</title>
      <author>Remi W.</author>
      <pubDate>Thu, 30 Sep 2021 21:20:57 +0000</pubDate>
      <link>https://dev.to/ixartz/the-dern-stack-the-perfect-alternative-to-mern-stack-for-serverless-1edm</link>
      <guid>https://dev.to/ixartz/the-dern-stack-the-perfect-alternative-to-mern-stack-for-serverless-1edm</guid>
      <description>&lt;p&gt;The &lt;strong&gt;MERN stack&lt;/strong&gt; is one of the most famous stacks in the JavaScript ecosystem. A combination of &lt;strong&gt;MongoDB, Express.js, React and Node&lt;/strong&gt; to build web applications. Unfortunately, MERN isn't ready for modern application in the Serverless world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uihXRREs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/mern-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uihXRREs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/mern-logo.png" alt="Mern stack logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bottleneck-in-the-database"&gt;
  &lt;/a&gt;
  A bottleneck in the database
&lt;/h2&gt;

&lt;p&gt;Today, you can deploy your React application to &lt;strong&gt;modern static hosting services&lt;/strong&gt; like Netlify or Cloudflare pages. These platforms remove the burden to manage servers for your application frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAgGl0bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudflare-page-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAgGl0bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudflare-page-logo.png" alt="Cloudflare pages hosting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same for the backend side, the Serverless community has grown a lot. There is now a lot of tutorial on how to write an &lt;strong&gt;Express.js backend on AWS Lambda&lt;/strong&gt;. If you have already written the Express.js code, you can easily convert to Serverless without any issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" title="Serverless framework AWS lambda"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" title="Express js serverless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what's wrong with the MERN stack for Serverless? &lt;strong&gt;The database&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements-for-a-serverless-database"&gt;
  &lt;/a&gt;
  Requirements for a Serverless Database
&lt;/h2&gt;

&lt;p&gt;A Serverless Database should work like the Serverless function. It needs to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Easy to use&lt;/strong&gt; and &lt;strong&gt;Easy to configure&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pay-as-you-go pricing&lt;/strong&gt;, only charged for what you use.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalable&lt;/strong&gt;, can handle the request based on your usage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scale to Zero&lt;/strong&gt;, no cost when there is no request.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Managed service&lt;/strong&gt;, no maintenance in scaling and update.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, the most used databases in the JS community are &lt;strong&gt;MongoDB, MySQL and PostgreSQL&lt;/strong&gt;. But, none of them is Serverless for the production environment. There is some solution like AWS Aurora Serverless but there are several limitations and doesn't meet all the requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dern-at-the-rescue"&gt;
  &lt;/a&gt;
  DERN at the rescue
&lt;/h2&gt;

&lt;p&gt;The idea is to &lt;strong&gt;replace MongoDB with DynamoDB&lt;/strong&gt; in your MERN stack. So, now it becomes &lt;strong&gt;DERN&lt;/strong&gt;. DynamoDB is a true Serverless database: managed, highly scalable and scales to zero.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jr-N9Mtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/dern-stack-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jr-N9Mtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/dern-stack-logo.png" alt="Dern stack logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DynamoDB gives access to more interesting features that you can enable if you are interested:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Continuous backups&lt;/strong&gt;, with Point-In-Time Recovery (PITR)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global tables&lt;/strong&gt;, make your database close to your users&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Streaming applications&lt;/strong&gt;, you can capture every changes in your table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the drawbacks I see with DynamoDB is the vendor lock-in to AWS. If you follow best practices, you shouldn't have any issue switching databases to a different cloud provider.&lt;/p&gt;

&lt;p&gt;AWS is at the head of the Serverless race, AWS Lambda is more performant and provides more features when comparing to its competitor.&lt;/p&gt;

&lt;p&gt;So, if you are building a Serverless application for production, you have a high chance to use already AWS ecosystem. Integrating DynamoDB into your stack shouldn't be a problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dern-stack-in-action"&gt;
  &lt;/a&gt;
  DERN stack in action
&lt;/h2&gt;

&lt;p&gt;I recently launched my first SaaS product with a &lt;strong&gt;DERN stack, 100% serverless&lt;/strong&gt; from backend to frontend. Definitively, it makes my developer life so much easier with &lt;strong&gt;no server management&lt;/strong&gt; and I can now have &lt;strong&gt;a deep sleep&lt;/strong&gt; ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postmage.com"&gt;PostMage&lt;/a&gt; is my first SaaS and it's built using the DERN stack. I've also written a detailed article about &lt;a href="https://creativedesignsguru.com/saas-tech-stack/"&gt;the tech stack as a solo developer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It took me 5 months of development to build the first version of PostMage by spending a lot of time choosing the right tech stack, designing the landing page and the dashboard, implementing the authentication and the integration to Stripe.&lt;/p&gt;

&lt;p&gt;So, I've built a &lt;a href="https://nextlessjs.com"&gt;Next JS SaaS&lt;/a&gt; Boilerplate Template for you to start a SaaS product and save a ton of time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>serverless</category>
      <category>aws</category>
    </item>
    <item>
      <title>Navigating Complex Objects</title>
      <author>Kenny Fitzgerald (he/him)</author>
      <pubDate>Thu, 30 Sep 2021 21:06:51 +0000</pubDate>
      <link>https://dev.to/fitzgeraldkd/navigating-complex-objects-4pe7</link>
      <guid>https://dev.to/fitzgeraldkd/navigating-complex-objects-4pe7</guid>
      <description>&lt;p&gt;When you're just starting off in coding, the concept of nested objects and accessing their properties can be difficult to grasp. Seeing a complicated object with multiple levels of depth can be intimidating at first, but working with these kinds of objects is an important skill to develop. When retrieving information from databases and APIs, the results are often packaged in a &lt;strong&gt;JSON&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;(JavaScript Object Notation)&lt;/em&gt;&lt;/strong&gt; object that has many levels of nested objects. Understanding how to navigate these objects will be crucial when working with this kind of data. This post is written for those who are new to working with objects and are looking for a breakdown on how to access a property multiple layers deep in nested objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-sample-data"&gt;
  &lt;/a&gt;
  The Sample Data
&lt;/h2&gt;

&lt;p&gt;For the purpose of the examples here, we'll be looking at some real world &lt;em&gt;(and beyond)&lt;/em&gt; data provided by NASA. There are a number of free APIs from NASA that are available for anyone to access, so this will be a good example of what a complex object could look like in a real application. Our sample data will be fetched from the &lt;a href="https://api.nasa.gov/#asteroids-neows"&gt;Asteroids - NeoWs&lt;/a&gt; API which provides information about near-Earth asteroids. Below I have included a simplified &lt;em&gt;JSON schema&lt;/em&gt; of the dataset that shows the organizational structure without the actual data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Simplified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;schema&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;fetchResults&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"links"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"element_count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"near_earth_objects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"yyyy-mm-dd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"links"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"neo_reference_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"nasa_jpl_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"absolute_magnitude_h"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"estimated_diameter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"is_potentially_hazardous_asteroid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"close_approach_data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"is_sentry_object"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;A couple of things to note&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There could be any number of key/value pairs under &lt;code&gt;near_earth_objects&lt;/code&gt;, depending on how many days of data is requested through the API.&lt;/li&gt;
&lt;li&gt;The values associated with each date key are arrays, and these arrays can also contain any number of items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in seeing the actual JSON object, &lt;a href="https://github.com/fitzgeraldkd/blog-posts/blob/main/navigating-objects/sample-data.json"&gt;here is the sample data&lt;/a&gt; that I fetched with the API. The examples below will assume that a variable &lt;code&gt;fetchResults&lt;/code&gt; has already been declared and that these results have already been assigned to it. There are two dates included in the results: &lt;code&gt;"2015-09-07"&lt;/code&gt; (with 13 objects), and &lt;code&gt;"2015-09-08"&lt;/code&gt; (with 11 objects).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-the-data"&gt;
  &lt;/a&gt;
  Accessing the Data
&lt;/h2&gt;

&lt;p&gt;Let's say we wanted to read the &lt;code&gt;is_potentially_hazardous_asteroid&lt;/code&gt; property of the first element associated with the date &lt;code&gt;"2015-09-07"&lt;/code&gt;. How do we go about doing it? Well we have to navigate down through each level in the object, working our way through the nested objects to find the specific property we're trying to reach. Here's how you can do it in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="c1"&gt;//           ┌ access the 'near_earth_objects' object&lt;/span&gt;
&lt;span class="c1"&gt;//           │                 ┌ access the array associated with the desired date&lt;/span&gt;
&lt;span class="c1"&gt;//           │                 │             ┌ acccess the first object in the array&lt;/span&gt;
&lt;span class="c1"&gt;//           │                 │             │   ┌ access the desired property&lt;/span&gt;
&lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;near_earth_objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2015-09-07&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;is_potentially_hazardous_asteroid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All right! So we got the property we were looking for and it returns the expected value of &lt;code&gt;false&lt;/code&gt;, but how does this all work? Let's break this down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;fetchResults&lt;/code&gt; is the object returned from the API request as described above.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.near_earth_objects&lt;/code&gt; accesses the object that contains all the dates.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;['2015-09-07']&lt;/code&gt; accesses the array of objects for the desired date. Note that &lt;strong&gt;bracket notation is required&lt;/strong&gt; here for two reasons:

&lt;ul&gt;
&lt;li&gt;The key starts with a number.&lt;/li&gt;
&lt;li&gt;The key contains a hyphen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[0]&lt;/code&gt; accesses the first object of the array. &lt;strong&gt;Bracket notation is required&lt;/strong&gt; here since we are retrieving an element inside an &lt;strong&gt;array&lt;/strong&gt; instead of a property in an object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.is_potentially_hazardous_asteroid&lt;/code&gt; finally gets us to the property we wanted to retrieve.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Why can't we just do the following?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_potentially_hazardous_asteroid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well the &lt;code&gt;fetchResults&lt;/code&gt; object only has three keys: &lt;code&gt;links&lt;/code&gt;, &lt;code&gt;element_count&lt;/code&gt;, and &lt;code&gt;near_earth_objects&lt;/code&gt;. Accessing any other key will return &lt;code&gt;undefined&lt;/code&gt; since an object does not have immediate access to the keys in any children objects. The property we're trying to get to is four levels deep in the &lt;code&gt;fetchResults&lt;/code&gt; object, so we have to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors"&gt;&lt;strong&gt;property accessors&lt;/strong&gt;&lt;/a&gt; four times in order to get to it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note&lt;/em&gt;: Accessing this property can also be done purely with &lt;strong&gt;bracket notation&lt;/strong&gt; as shown below, however I prefer using &lt;strong&gt;dot notation&lt;/strong&gt; where possible for its readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;near_earth_objects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2015-09-07&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is_potentially_hazardous_asteroid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visualizing-the-data"&gt;
  &lt;/a&gt;
  Visualizing the Data
&lt;/h2&gt;

&lt;p&gt;When you're first learning about objects, accessing these nested properties can seem abstract and might be a hard concept to grasp. Another way to visualize this may be to &lt;strong&gt;imagine this object as a folder tree&lt;/strong&gt; on your computer. When you want to access a file, you sometimes have to navigate through &lt;em&gt;multiple levels of directories&lt;/em&gt; first. For each level of arrays/objects nested within the main object, imagine another subfolder with its own contents. When you're in the top level directory, you don't have immediate access to files in any of the sub-directories. &lt;/p&gt;

&lt;p&gt;For the purpose of demonstration, I have created a &lt;em&gt;mockup set of folders&lt;/em&gt; to mirror the structure of the &lt;code&gt;fetchResults&lt;/code&gt; object. Below is the output of running the &lt;code&gt;tree&lt;/code&gt; command in the terminal for these directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# bash&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;tree fetchResults
fetchResults
├── element_count
├── links
│   ├── next
│   ├── prev
│   └── self
└── near_earth_objects
    ├── 2015-09-07
    │   ├── 0
    │   │   ├── absolute_magnitude_h
    │   │   ├── close_approach_data
    │   │   │   ├── close_approach_date
    │   │   │   ├── close_approach_date_full
    │   │   │   ├── epoch_date_close_approach
    │   │   │   ├── miss_distance
    │   │   │   │   ├── astronomical
    │   │   │   │   ├── kilometers
    │   │   │   │   ├── lunar
    │   │   │   │   └── miles
    │   │   │   ├── orbiting_body
    │   │   │   └── relative_velocity
    │   │   │       ├── kilometers_per_hour
    │   │   │       ├── kilometers_per_second
    │   │   │       └── miles_per_hour
    │   │   ├── estimated_diameter
    │   │   │   ├── feet
    │   │   │   │   ├── estimated_diameter_max
    │   │   │   │   └── estimated_diameter_min
    │   │   │   ├── kilometers
    │   │   │   │   ├── estimated_diameter_max
    │   │   │   │   └── estimated_diameter_min
    │   │   │   ├── meters
    │   │   │   │   ├── estimated_diameter_max
    │   │   │   │   └── estimated_diameter_min
    │   │   │   └── miles
    │   │   │       ├── estimated_diameter_max
    │   │   │       └── estimated_diameter_min
    │   │   ├── &lt;span class="nb"&gt;id&lt;/span&gt;
    │   │   ├── is_potentially_hazardous_asteroid
    │   │   ├── is_sentry_object
    │   │   ├── links
    │   │   │   └── self
    │   │   ├── name
    │   │   ├── nasa_jpl_url
    │   │   └── neo_reference_id
    │   └── ...
    └── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how the structure here is nearly identical to the structure of the object? The process of retrieving a file in this folder structure is very similar to that of retrieving a property in the object. In JavaScript you use dot and/or bracket notation to access a property of an object. In Bash or your file explorer you use &lt;code&gt;/&lt;/code&gt; to access a subfolder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="c1"&gt;// accessing a property in a series of nested objects&lt;/span&gt;
&lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;near_earth_objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2015-09-07&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;is_potentially_hazardous_asteroid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# bash&lt;/span&gt;
&lt;span class="c"&gt;# accessing a file in series of nested folders&lt;/span&gt;
fetchResults/near_earth_objects/2015-09-07/0/is_potentially_hazardous_asteroid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a more visual example see below for an example of navigating through the mockup folder set up to match the structure of &lt;code&gt;fetchResults&lt;/code&gt;. When you're trying to access a property that is multiple levels deep in an object, imagine that you are navigating a folder structure to get to the information you're looking for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZTsW9DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/quJB88C.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZTsW9DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/quJB88C.gif" alt="Animation demonstrating navigating through nested directories" title="Animation demonstrating navigating through nested directories"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Hopefully this brief explanation provides some clarity into navigating through nested objects! It may be intimidating at first, but it's an important skill to develop. &lt;strong&gt;Objects with this level of complexity are common&lt;/strong&gt; and they can be structured in countless different ways. When you get data from an API, you may not have much (or any) control on how the data is formatted as you receive it. Being familiar with how to access the different properties will be a big help as you start to work with complex datasets. &lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>json</category>
      <category>objects</category>
    </item>
    <item>
      <title>Who's participating in Hacktoberfest 2021?</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 30 Sep 2021 20:55:25 +0000</pubDate>
      <link>https://dev.to/devteam/who-s-participating-in-hacktoberfest-2021-4pgf</link>
      <guid>https://dev.to/devteam/who-s-participating-in-hacktoberfest-2021-4pgf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zak5Tj59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ZhpKB8nfZQzANvvTMH/giphy.gif%3Fcid%3Decf05e47na68gkj100jhe66wklks6uxkll1trzdre2e55owi%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zak5Tj59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ZhpKB8nfZQzANvvTMH/giphy.gif%3Fcid%3Decf05e47na68gkj100jhe66wklks6uxkll1trzdre2e55owi%26rid%3Dgiphy.gif%26ct%3Dg" alt="Ghost Saying Hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest 2021&lt;/a&gt; starts on Friday, October 1!&lt;/strong&gt; 🎃 &lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#in-the-comments-below-tell-us-who-you-are-whether-or-not-this-is-your-first-hacktoberfest-and-why-youre-taking-part-in-2021"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In the comments below, tell us who you are, whether or not this is your first Hacktoberfest, and why you're taking part in 2021&lt;/strong&gt; 🎉
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're an open source project maintainer looking for contributors OR if you're looking for projects to contribute to for Hacktoberfest, don't miss this thread on DEV:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/hacktoberfest-2021-who-s-looking-for-contributors-32k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hacktoberfest 2021 — Who's Looking for Contributors? &lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Sep 30 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#contributorswanted&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 




&lt;p&gt;&lt;strong&gt;Whether you already have a plan for the projects you'll contribute to or not, this is a great place to meet the other participants. Let's make this a supportive community experience!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Hacktoberfest 2021 — Who's Looking for Contributors? </title>
      <author>dev.to staff</author>
      <pubDate>Thu, 30 Sep 2021 20:52:45 +0000</pubDate>
      <link>https://dev.to/devteam/hacktoberfest-2021-who-s-looking-for-contributors-32k</link>
      <guid>https://dev.to/devteam/hacktoberfest-2021-who-s-looking-for-contributors-32k</guid>
      <description>&lt;p&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest 2021&lt;/a&gt; kicks off on Friday, October 1 and lasts through the end of the month! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open source maintainers can drop links to/information on their projects in the comments below.&lt;/strong&gt; The goal? To find helpful contributors seeking projects to improve in the name of Hacktoberfest!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note for Maintainers:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;If you’d like your project to be eligible for Hacktoberfest contributions, you &lt;strong&gt;must&lt;/strong&gt; classify it as a &lt;a href="https://github.com/topics/hacktoberfest"&gt;Hacktoberfest Project&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Participating&lt;/em&gt; in Hacktoberfest?&lt;/strong&gt; Let us know in &lt;a href="https://dev.to/devteam/who-s-participating-in-hacktoberfest-2021-4pgf"&gt;here&lt;/a&gt;. You can also use &lt;strong&gt;this&lt;/strong&gt; thread as a reference for projects that are actively seeking contributions 🎉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're a maintainer who's interested in getting your repository ready for contributors, &lt;a href="https://dev.to/virtualcoffee/preptember-maintainer-powerups-4m1n"&gt;this&lt;/a&gt; handy guide from &lt;a class="mentioned-user" href="https://dev.to/bekahhw"&gt;@bekahhw&lt;/a&gt;
 is a great place to start.&lt;/em&gt; &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>discuss</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>What is Playfair Cipher Encryption Algorithm</title>
      <author>Karan-Munjani</author>
      <pubDate>Thu, 30 Sep 2021 20:37:36 +0000</pubDate>
      <link>https://dev.to/karanmunjani/what-is-playfair-cipher-encryption-algorithm-4npk</link>
      <guid>https://dev.to/karanmunjani/what-is-playfair-cipher-encryption-algorithm-4npk</guid>
      <description>&lt;p&gt;This is going to be two or three part series where I'm going to explain the theory behind the Playfair cipher and how we can program it using most probably everyone's favourite language 🥁🥁🥁 (&lt;em&gt;"DRUM ROLLS"&lt;/em&gt;)  &lt;strong&gt;Python&lt;/strong&gt;, Yay!!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Playfair cipher or Playfair square or Wheatstone–Playfair cipher is a manual symmetric encryption technique and was the first literal digram substitution cipher. The scheme was invented in 1854 by Charles Wheatstone, but bears the name of Lord Playfair for promoting its use. - Source: Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;So what we can grasp from above is that, this algorithm was developed by Charles Wheatstone but bears the name as Lord Playfair promoted it. Also we can depict that it was first practical digraph substitution cipher.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Digraph Cipher&lt;/strong&gt; : It simply means that we encrypt the plaintext to ciphertext with two characters at a time. (Will get more idea as I explain you through.)  &lt;/p&gt;
&lt;/blockquote&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#the-playfair-cipher-algorithm"&gt;
  &lt;/a&gt;
  The Playfair Cipher Algorithm
&lt;/h2&gt;

&lt;p&gt;The Algorithm mainly consist of three steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert plaintext into digraphs (i.e., into pair of two letters)&lt;/li&gt;
&lt;li&gt;Generate a Cipher Key Matrix&lt;/li&gt;
&lt;li&gt;Encrypt plaintext using Cipher Key Matrix and get ciphertext.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For the rest of our discussion we will be using below mentioned Key and Plaintext:&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Key&lt;/strong&gt; = DevToDiesel&lt;br&gt;
&lt;strong&gt;Plaintext&lt;/strong&gt; = Awesome Dev Community&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let's move forward!!&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yx34-l4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf66y8toak3tmukyvjtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yx34-l4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf66y8toak3tmukyvjtp.png" alt="Full Mat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step1-convert-plaintext-into-digraphs-ie-into-pair-of-two-letters"&gt;
  &lt;/a&gt;
  Step:1 Convert plaintext into digraphs (i.e., into pair of two letters)
&lt;/h2&gt;

&lt;p&gt;So our Plaintext &lt;code&gt;Awesome Dev Community&lt;/code&gt; will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[AW, ES, OM, ED, EV, CO, MX, MU, NI, TY] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now You might be wondering why &lt;code&gt;MX&lt;/code&gt; instead of &lt;code&gt;MM&lt;/code&gt; and where did the whitespaces go! Because there are three rules to be followed here and those are:&lt;/p&gt;

&lt;p&gt;1.While splitting text into pairs, if the letters are same in a pair then insert filler x. &lt;/p&gt;

&lt;p&gt;2.At the end if only one letter is left it has no pair we can insert our filler x&lt;/p&gt;

&lt;p&gt;3.Remove Whitespaces from the string as well as special characters apart from 25 alphabets.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step2-generate-a-cipher-key-matrix"&gt;
  &lt;/a&gt;
  Step:2 Generate a Cipher Key Matrix
&lt;/h2&gt;

&lt;p&gt;Cipher Key Matrix is a 5×5 grid of alphabets that acts as the key for encrypting the plaintext.&lt;/p&gt;

&lt;p&gt;Each of the 25 alphabets must be unique and one letter of the alphabet (usually J) is omitted from the table (as the table can hold only 25 alphabets). &lt;/p&gt;

&lt;p&gt;If the plaintext contains J, then it is replaced by I.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As you might expected! There are also rules to generate this key matrix. You're getting brainy now!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rules"&gt;
  &lt;/a&gt;
  Rules:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. If our key has repeating letters omit them.&lt;/strong&gt;&lt;br&gt;
So our Key = "DevToDiesel" Will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;D E V T O I E S L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Fill this unique characters key in our 5X5 Matrix&lt;/strong&gt;&lt;br&gt;
So it might look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGHD8Zyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrif2fq5zro15h7ck9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGHD8Zyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrif2fq5zro15h7ck9x.png" alt="Half Mat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Fill the remaining places with unused alphabets without J&lt;/strong&gt; As it should only contain 25 letters, only omitting J would result in matrix like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGW0ngW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtui4hbfoieyswnshv0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGW0ngW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtui4hbfoieyswnshv0d.png" alt="Full Mat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3-encrypt-plaintext-using-cipher-key-matrix-and-get-ciphertext"&gt;
  &lt;/a&gt;
  Step 3: Encrypt plaintext using Cipher Key Matrix and get ciphertext.
&lt;/h2&gt;

&lt;p&gt;Now we will encrypt our diagraph plaintext that is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[AW, ES, OM, ED, EV, CO, MX, MU, NI, TY]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into Cipher text with the help of cipher key matrix, and following below listed rules.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rule-1"&gt;
  &lt;/a&gt;
  Rule: 1
&lt;/h3&gt;

&lt;p&gt;If both letters are not in same column and not in same row and making a rectangle shape then take letters on the horizontal opposite corner of the rectangle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
Our first pair from plaintext is "AW", so A will be enciphered to S and W will enciphered to Y.&lt;br&gt;
i.e., &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A -&amp;gt; S&lt;/li&gt;
&lt;li&gt;W -&amp;gt; Y
resulting in,&lt;strong&gt;AW -&amp;gt; SY&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcccPbFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev1lp2r8v7q5dqmdbnfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcccPbFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev1lp2r8v7q5dqmdbnfp.png" alt="Rule 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, pair OM will be enciphered to DR.&lt;br&gt;
i.e., &lt;strong&gt;OM -&amp;gt; DR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eCLJNxQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1lbkr77y02gugevlye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eCLJNxQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1lbkr77y02gugevlye.png" alt="Rule 1.2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rule-2"&gt;
  &lt;/a&gt;
  Rule: 2
&lt;/h3&gt;

&lt;p&gt;If both the letters are in the same column: Take the letter below each one (going back to the top if at the bottom).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br&gt;
Our Second pair is "ES", so according to above rule it will be enciphered to its below character in same column.&lt;br&gt;
i.e., &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;E -&amp;gt; S&lt;/li&gt;
&lt;li&gt;S -&amp;gt; F
thus, &lt;strong&gt;ES -&amp;gt; SF&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvNKqiDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29f3of9b4b48zkir46ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvNKqiDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29f3of9b4b48zkir46ym.png" alt="Rule 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rule-3"&gt;
  &lt;/a&gt;
  Rule: 3
&lt;/h3&gt;

&lt;p&gt;If both the letters are in the same row: Take the letter to the right of each one (going back to the leftmost if at the rightmost position)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br&gt;
The pair DE is in same row, so just choose the right next to each character from cipher key matrix.&lt;br&gt;
i.e., &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;D -&amp;gt; E&lt;/li&gt;
&lt;li&gt;E -&amp;gt; V
so, &lt;strong&gt;DE -&amp;gt; EV&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPQHHjEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3j5t5cg7esa6m9dbt1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPQHHjEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3j5t5cg7esa6m9dbt1f.png" alt="Rule 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Same way after performing above rules for whole the list of diagraph plain text, our cipher text will be generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Plaintext&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[AW, ES, OM, ED, EV, CO, MX, MU, NI, TY]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ciphertext&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[SY, SF, DR, VE, VT, KD, PU, UD, MS, AT]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Plaintext = &lt;strong&gt;AWESOMEDEVCOMXMUNITY&lt;/strong&gt;&lt;br&gt;
Ciphertext = &lt;strong&gt;SYSFDRVEVTKDPUUDMSAT&lt;/strong&gt;&lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#in-the-next-part-of-series-ill-be-showing-how-to-code-playfair-cipher-using-python-so-stay-tuned"&gt;
  &lt;/a&gt;
  In the next part of series I'll be showing how to code playfair cipher using python, so stay tuned.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave your thoughts and doubts in discussion section below, also drop a heart ❤ if you gained some knowledge!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading out!😀😀&lt;/p&gt;

</description>
      <category>security</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best VS Code features &amp; Learning Material UI ✏️</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Thu, 30 Sep 2021 20:37:04 +0000</pubDate>
      <link>https://dev.to/tumee/best-vs-code-features-learning-material-ui-2o4</link>
      <guid>https://dev.to/tumee/best-vs-code-features-learning-material-ui-2o4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;my newsletter&lt;/a&gt; last week. I publish previous week's newsletter here on the blog. If you want to read these as soon as they are published, &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;sign up&lt;/a&gt; for the newsletter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahoy,&lt;/p&gt;

&lt;p&gt;I use Visual Studio Code as my main code editor. To be honest it is pretty much the only editor I use. There is bunch of great features in VS Code that I use daily. Features that honestly make my life a lot easier and productive.&lt;/p&gt;

&lt;p&gt;So I thought that it might be helpful to share those features in case you are not yet using them or leveraging them fully in your own workflow. You can find the features from the latest video on my &lt;a href="https://www.youtube.com/tuomokankaanpaa"&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZKq5OIhKpzE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Or if you just want to know the list, here it is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timeline&lt;/li&gt;
&lt;li&gt;Integrated Terminal&lt;/li&gt;
&lt;li&gt;Multiline editing&lt;/li&gt;
&lt;li&gt;Command palette&lt;/li&gt;
&lt;li&gt;Extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned-this-week"&gt;
  &lt;/a&gt;
  What I learned this week?
&lt;/h2&gt;

&lt;p&gt;I worked on a Next.js project where I decided to use &lt;a href="https://mui.com/"&gt;Material UI&lt;/a&gt; as a component library. At first it was kind of hard to know and find what components I should use but after a while, I got actually something good looking on the screen.&lt;/p&gt;

&lt;p&gt;The project is actually a simple Next.js blog application. I plan on shooting a video about it, teaching how to code one by yourself. I'm not yet sure when I'll be making that video but it might be in the near future so &lt;a href="https://www.youtube.com/tuomokankaanpaa?sub_confirmation=1"&gt;stay tuned for that&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I have used Material UI for the past couple of weeks on couple of projects in addition to the Next.js blog application. I am quite excited about Material UI, now that I have a bit better understanding on how the whole thing works and what kind of components should I use for certain situations and what kind of components they actually have!&lt;/p&gt;

&lt;p&gt;I have some time now thought that I need to learn something that I can use to make my apps and UIs look even half decent (I am terrible at designing and styling in general). So I was thinking of learning TailwindCSS next but now that I have worked with Material UI a bit, I'm thinking of giving Material UI a chance and learning that first. Of course they are not / don't do "the same thing" but Material UI serves the need that I have and there is only so much one can be learning simultaneously.&lt;/p&gt;

&lt;p&gt;Have you used Material UI or TailwindCSS? If you have, let me know what you think about them!&lt;/p&gt;

&lt;p&gt;That's it for this week!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Tuomo&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
