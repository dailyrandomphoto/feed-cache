<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The one and only SEO checklist you will ever need</title>
      <author>Kars van Iersel</author>
      <pubDate>Thu, 26 Aug 2021 07:11:35 +0000</pubDate>
      <link>https://dev.to/karsvaniersel/the-one-and-only-seo-checklist-you-will-ever-need-34k3</link>
      <guid>https://dev.to/karsvaniersel/the-one-and-only-seo-checklist-you-will-ever-need-34k3</guid>
      <description>&lt;p&gt;If you are an SEO newbie or have some experience but would like to get a step-by-step SEO guide on how to avoid common website promotion mistakes, here's a list of SEO tasks based on best practices that you should take into account when creating and optimising your websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;So you got your fancy website or blog up and running, but now you need to rank high in Google. The question is always how do I make sure I rank so that my pages get found by Google? Well Look no further, I've compiled a complete step-by-step SEO checklist of SEO tasks based on the best practices. I guarantee you that you will see results if you can check all of them!&lt;/p&gt;

&lt;p&gt;I'm currently working on a Notion board with an actionable checklist that you guys can duplicate and use! I will update this post once I'm done with that. Consider checking back on this page for the Notion link, or follow me on Twitter or subscribe to my newsletter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keyword-research"&gt;
  &lt;/a&gt;
  1. Keyword research 🔬
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#analyse-competitor-keywords"&gt;
  &lt;/a&gt;
  Analyse competitor keywords
&lt;/h3&gt;

&lt;p&gt;To begin the process of gathering keywords for your website, start by researching a competitor's page that ranks well in search engines. This is because these pages may contain highly valuable keywords already proven to work on Google and other search engines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://moz.com/seo-competitor-analysis"&gt;The Guide to SEO Competitor Analysis by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/blog/how-to-do-seo-competitive-analysis/"&gt;How to Do an SEO Competitive Analysis by SEMrush&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://ahrefs.com/blog/competitive-analysis/"&gt;How to Do an SEO Competitor Analysis [Template Included] by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.advancedwebranking.com/seo-competitor-analysis/"&gt;Your Essential Guide to Crushing Competition [w/ Template] by Advanced Web Ranking&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://databox.com/seo-competitive-analysis-tips-and-tools"&gt;The SEO Competitive Analysis Tools &amp;amp; Tips 100+ Marketers Rely On Most by Databox&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collect-core-keywords"&gt;
  &lt;/a&gt;
  Collect core keywords
&lt;/h3&gt;

&lt;p&gt;A semantic core of a website is the collection of keywords that describes what you're selling and helps gain top search results. You describe your website by these core keywords.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://ahrefs.com/blog/keyword-research/"&gt;How to Do Keyword Research for SEO by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://moz.com/keyword-research-guide"&gt;The SEO Keyword Research Master Guide by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/blog/keyword-research-guide-for-seo/"&gt;The 2021 Keyword Research Guide for SEO by SEMrush&lt;/a&gt; 
&lt;a href="https://www.searchenginejournal.com/keyword-research-seo-beginners-guide/379386/"&gt;- How to Do Keyword Research for SEO: A Step-by-Step Guide by Search Engine Journal
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://mangools.com/blog/keyword-research/"&gt;Keyword research for SEO by Mangools&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://backlinko.com/keyword-research"&gt;Keyword Research: The Definitive Guide (2021) by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://ftf.agency/keyword-research-now/"&gt;How To Do Keyword Research in 2020 by Nick Eubank&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/academy/courses/keyword-research-course-with-greg-gifford"&gt;Keyword Research Course with Greg Gifford by SEMrush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=ek0yCkmfVuM"&gt;Keyword Research for SEO Today: Guide, Steps, Tips, Tools, Mistakes and more! by Crawling Mondays&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#keyword-mapping"&gt;
  &lt;/a&gt;
  Keyword mapping
&lt;/h3&gt;

&lt;p&gt;Keyword mapping is the process of breaking down a list of keywords into semantic clusters that allows you to distribute them between your site's pages. This can help avoid keyword cannibalization, which occurs when several pages on one website compete for the same words in search results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://riseatseven.com/blog/keyword-mapping-guide/"&gt;A beginner’s guide to keyword mapping (with template)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/blog/guide-keyword-mapping-improve-seo-content/"&gt;A Four-Step Guide on Keyword Mapping To Improve Your SEO and Content Strategy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.digitalthirdcoast.com/blog/create-successful-keyword-mapping-strategy"&gt;How to Create a Successful Keyword Mapping Strategy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.aleydasolis.com/en/search-engine-optimization/keyword-mapping-cheatsheet/"&gt;The Keywords Mapping Cheatsheet For Different Types of Sites [with a Google Sheets Included] &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.searchenginejournal.com/keyword-mapping-seo-success/388082/"&gt;How to Leverage Keyword Mapping for SEO Success&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-onpage-seo-optimisation"&gt;
  &lt;/a&gt;
  2. On-page SEO optimisation 📈
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-a-web-analytics-tool-and-set-up-your-goals"&gt;
  &lt;/a&gt;
  Install a web analytics tool and set up your goals
&lt;/h3&gt;

&lt;p&gt;Web analytics tools track how many visitors your website is receiving and what these users are doing on the site. To measure performance, you need to set goals for different user actions (such as registrations or transactions). Goals help define marketing strategies by identifying key objectives that can be adjusted over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://moz.com/blog/smart-seo-goals"&gt;How Do You Set Smart SEO Goals for Your Team/Agency/Project? by Moz
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://databox.com/how-to-set-seo-goals"&gt;How to Set SEO Goals for Your Team (That Actually Drive Action) by Elise Dopson
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kevin-indig.com/blog/the-roi-of-seo-how-to-predict-traffic-and-revenue/"&gt;The ROI of SEO – how to predict traffic and revenue by Kevin Indig
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/set-achieve-realistic-seo-goals/288839/"&gt;How to Set &amp;amp; Achieve Realistic SEO Goals by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.botify.com/blog/seo-okrs"&gt;OKRs for SEO: How to Set SEO Goals That Increase Your Value &amp;amp; Get You Greater Investment by Botify
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-your-website-to-google-search-console"&gt;
  &lt;/a&gt;
  Add your website to Google Search Console
&lt;/h3&gt;

&lt;p&gt;Google Search Console is a free tool that tracks website rankings and helps reveal indexed pages. It also shows errors on the site, which can give insight into how to improve it for search engines to rank it higher.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://search.google.com/search-console/about"&gt;Google Search Console Coverage, URL Inspection &amp;amp; Crawl Stats Reports by Google
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://search.google.com/search-console/about"&gt;Google Search Console Performance Report by Google&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#register-a-local-business-on-google-maps"&gt;
  &lt;/a&gt;
  Register a local business on Google Maps
&lt;/h3&gt;

&lt;p&gt;Google Maps is a useful tool for finding local businesses. To show up on Google Maps, you must complete the registration process by filling out all necessary information and verifying that your business exists in real life. Doing so will boost your visibility within search results relevant to users of certain areas, which should lead to increased website traffic from people looking at those specific regions who are interested in what you're selling!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.google.com/business/"&gt;Google My Business by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.brightlocal.com/free-local-seo-tools/"&gt;BrightLocal's Free Local SEO Tools: Local Listings Health Scanner, Local Search Results Checker, and more! by BrightLocal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gsuite.google.com/marketplace/app/%F0%9F%A4%96_postamatic/460920737213"&gt;Postamatic: Build your Google My Business Posts, Q + As, and manage GMB Reviews via the Google My Business API by Two Octobers + AgencyAutomaters&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-a-logical-site-structure"&gt;
  &lt;/a&gt;
  Create a logical site structure
&lt;/h3&gt;

&lt;p&gt;The structure of the website is what determines how easy it is to find all pages on a site. Organizing each section, subsection, and page in an open-ended way makes it easier for bots that search engines use to crawl through your site and index every single one of its pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/internal-links-for-seo/"&gt;Internal Links for SEO: An Actionable Guide by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kevin-indig.com/blog/internal-linking-the-full-guide-to-internal-link-axioms/"&gt;Internal Linking for SEO: best practices, strategies, axioms by Kevin Indig&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/internal-links-guide-to-building-strategy-that-works/"&gt;Internal Links: A Guide to Building a Strategy that Works by SEMrush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/hub/seo/internal-links"&gt;Internal Linking Guide by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sitebulb.com/resources/guides/internal-link-optimisation-for-seo/"&gt;Internal Link Optimisation for SEO by Sitebulb&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/internal-linking-for-seo-why-and-how/"&gt;Internal linking for SEO: Why and how? by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#secure-the-website-by-migrating-it-to-https"&gt;
  &lt;/a&gt;
  Secure the website by migrating it to HTTPS
&lt;/h3&gt;

&lt;p&gt;HTTPS protocol is an extension of the HTTP developed for safe communication. It's needed to maintain site security so no information such as visitor actions or their contact details are retrievable. The presence of this HTTPS has been influential in Google search rankings since 2014, and its influence on these rankings will likely grow over time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-preferred-domain-www-or-nonwww"&gt;
  &lt;/a&gt;
  Define the preferred domain (www or non-www)
&lt;/h3&gt;

&lt;p&gt;Search engines will see example.com and example.com as separate pages, so defining the preferred domain is useful in avoiding page duplication since it allows you to specify which one should be indexed by search engines first if both are found on a website's link list or sitemap file for instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-robotstxt-file"&gt;
  &lt;/a&gt;
  Create a robots.txt file
&lt;/h3&gt;

&lt;p&gt;When building a website, the robots.txt file is used to tell search engine crawlers which pages are and aren't indexed on our site. For example, we wouldn't want any sensitive information or internal documents being crawled as it could cause damage if they were viewed publicly; therefore, these specific pages should be blocked from access by bots for them not to appear on Google Search results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-xml-sitemap"&gt;
  &lt;/a&gt;
  Create an XML sitemap
&lt;/h3&gt;

&lt;p&gt;The sitemap.xml file is a document in the Extensible Markup Language (XML) that lists all of your website's URLs to help search engine robots index them faster. Sitemaps are used on websites where content changes frequently or has lots of pages and helps Google find those quickly so their users can have better browsing experiences with minimal time waiting for results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/sitemaps/overview"&gt;Learn about sitemaps by Google&lt;/a&gt; 
&lt;a href="https://backlinko.com/hub/seo/sitemaps"&gt;XML Sitemaps by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oncrawl.com/oncrawl-seo-thoughts/optimize-xml-sitemap/"&gt;How to Optimize Your XML Sitemap to Improve Your SEO by OnCrawl
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/xml-sitemap/"&gt;How to Create an XML Sitemap: Tips &amp;amp; Best Practices by SEMRush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/xml-sitemap-best-practices/237649/"&gt;How to Optimize XML Sitemaps: 13 SEO Best Practices by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-a-language-with-hreflang-attribute"&gt;
  &lt;/a&gt;
  Set a language with .hreflang attribute
&lt;/h3&gt;

&lt;p&gt;The hreflang attribute is used to define a website's language or regional URL in case the site has translated versions. This tells Google what URLs to display for specific regions and which version of your content they should index during crawls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/crawling/managing-multi-regional-sites"&gt;Managing multi-regional and multilingual sites by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.onely.com/blog/ultimate-guide-to-international-seo/"&gt;The Ultimate Guide to International SEO by Onely&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.slideshare.net/aleydasolis/international-seo-for-ecommerce-websites-sejlive-sejesummit"&gt;International SEO for E-Commerce Websites by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/7-ways-to-fail-at-international-seo/"&gt;7 Ways to Fail at International SEO by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.aleydasolis.com/en/search-engine-optimization/avoiding-hreflang-issues-by-following-a-6-steps-implementation-process/"&gt;An Hreflang Implementation Guide: How to add and Implement Hreflang Tags by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-seofriendly-urls"&gt;
  &lt;/a&gt;
  Create SEO-friendly URLs
&lt;/h3&gt;

&lt;p&gt;The SEO-friendly URL is more readable and includes keywords that are recognized by search engine robots. This has a positive effect on the page’s ranking because it helps both users and bots understand what they can find on this webpage quickly. For example: /seo-checklist vs. /xn-sEoChecKListeX123534098/. /seo-checklist/ is the type of friendly URL you want to aim for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-breadcrumb-navigation"&gt;
  &lt;/a&gt;
  Use breadcrumb navigation
&lt;/h3&gt;

&lt;p&gt;Breadcrumbs show a user how they moved around between the pages on your website so that he/she does not get lost. They are also helpful to search engines as it clarifies the hierarchy of all webpages, and can be shown in snippets within SERPs (Search Engine Results Pages).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-your-seo-with-userfriendly-interlinking"&gt;
  &lt;/a&gt;
  Improve your SEO with user-friendly interlinking
&lt;/h3&gt;

&lt;p&gt;The purpose of internal links is to make a website more navigable and structured. They can direct the user towards other parts of the site, establish information hierarchy by pointing out what content comes first or last in an article, spread link weight across pages that are related so it does not all rest on one page alone (this enhances search engine optimization), and ultimately give your online presence authority.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/internal-links-for-seo/"&gt;Internal Links for SEO: An Actionable Guide by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kevin-indig.com/blog/internal-linking-the-full-guide-to-internal-link-axioms/"&gt;Internal Linking for SEO: best practices, strategies, axioms by Kevin Indig&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/internal-links-guide-to-building-strategy-that-works/"&gt;Internal Links: A Guide to Building a Strategy that Works by SEMrush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/hub/seo/internal-links"&gt;Internal Linking Guide by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sitebulb.com/resources/guides/internal-link-optimisation-for-seo/"&gt;Internal Link Optimisation for SEO by Sitebulb&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/internal-linking-for-seo-why-and-how/"&gt;Internal linking for SEO: Why and how? by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#check-http-status-codes"&gt;
  &lt;/a&gt;
  Check HTTP status codes
&lt;/h3&gt;

&lt;p&gt;When a web browser requests information from the server, it receives an HTTP status code in response. These codes are divided into classes and tell browsers if everything goes well or not; they let you know whether all pages of your website function as expected. Search engines may lower rankings for websites with many incorrect responses that have wrong status codes since this signals to them there is something suspicious going on at these sites--they're probably trying to hide their low-quality content by sending back fake statuses instead of real ones!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-canonical-urls"&gt;
  &lt;/a&gt;
  Use Canonical URLs
&lt;/h3&gt;

&lt;p&gt;Duplicate content is a problem for websites that want to appear unique in search engines. A canonical tag tells robots which page they should index and rank higher, so you can avoid the penalty of duplicate pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-the-markup-validity-of-web-documents-in-html"&gt;
  &lt;/a&gt;
  Check the markup validity of web documents in HTML
&lt;/h3&gt;

&lt;p&gt;The validity of your website's HTML code is extremely important in terms of search engine optimization. If it contains a lot of errors, such as deprecated tags or misspelled words, then this can damage how well the website ranks on Google and other major search engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fix-broken-links"&gt;
  &lt;/a&gt;
  Fix broken links
&lt;/h3&gt;

&lt;p&gt;Broken links are detrimental to the user experience, and as a result, they can hurt your website's signals that search engine robots look at. When non-working links discourage users from exploring further on your site, it means an error for search engines. If there is a great number of such errors, then this tells them you have low-quality content which will affect their overall rankings in results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mind-the-number-of-outbound-links"&gt;
  &lt;/a&gt;
  Mind the number of outbound links
&lt;/h3&gt;

&lt;p&gt;If a website has too many irrelevant links, search engines may consider it spam. For this reason, the site's rankings in search results might plummet significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-404-error-page"&gt;
  &lt;/a&gt;
  Create a 404 error page
&lt;/h3&gt;

&lt;p&gt;Non-existing pages can occur when a page is redirected, deleted, renamed. All such non-existent pages should be sent to the 404 status code which will inform users what happened and how they need to overcome it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-the-page-load-speed"&gt;
  &lt;/a&gt;
  Improve the page load speed
&lt;/h3&gt;

&lt;p&gt;One of the most influential Google ranking factors is page load speed. It refers to how long it takes for a webpage's content and images to show up after loading on the website, which can dramatically impact whether users choose your site or another one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals by web.dev
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://builtvisible.com/googles-page-experience-update-and-core-web-vitals-everything-you-need-to-know/"&gt;Google’s Page Experience Update and Core Web Vitals: Everything you need to know by Builtvisible
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kinsta.com/learn/page-speed/"&gt;A Beginner’s Guide to Website Speed Optimization by Kinsta
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://seosly.com/google-page-experience-audit/"&gt;Google Page Experience Audit (15 Steps + Free Audit Template) by Olga Zarzeczna
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hallanalysis.com/2020/10/27/optimizing-for-performance-in-seo-and-speed/"&gt;Optimizing For Performance in SEO and Speed by Joe Hall&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-mobile-optimisation"&gt;
  &lt;/a&gt;
  3. Mobile optimisation 📱
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-a-responsive-version-of-your-website"&gt;
  &lt;/a&gt;
  Create a responsive version of your website
&lt;/h3&gt;

&lt;p&gt;Most of the traffic these days comes from mobile devices. Roughly 60/70% of web visitors, visit your website on a mobile device. That is why Google started using a Mobile-first type of indexing. This means that Google cares more about your mobile site than your desktop version. Making sure your website works great on mobile is one of the most important factors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/mobile-sites"&gt;Mobile Optimization Guidelines by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/mobile-sites/mobile-first-indexing"&gt;Mobile-first indexing best practices by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/mobile-seo-guide"&gt;Mobile SEO: The Definitive Guide by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.slideshare.net/aleydasolis/mobile-first-seo-at-wceu"&gt;Mobile First SEO by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/mobile-seo-ultimate-guide/"&gt;Mobile SEO: The ultimate guide by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://trafficthinktank.com/preparing-for-googles-mobile-only-index/"&gt;Preparing for Google’s Mobile-Only Index by Patrick Hathaway&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/academy/courses/mobile-seo-course-with-greg-gifford"&gt;Mobile SEO Course with Greg Gifford by SEMRush&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-content-strategy"&gt;
  &lt;/a&gt;
  4. Content strategy ✏️
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#write-unique-titles-for-each-page"&gt;
  &lt;/a&gt;
  Write unique titles for each page
&lt;/h3&gt;

&lt;p&gt;The title tag is the essential part of web page coding that determines a website's ranking on search engine result pages (SERPs). While it only takes up to 70 characters, being able to optimize your titles can make or break you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-unique-meta-descriptions-for-each-page"&gt;
  &lt;/a&gt;
  Write unique meta descriptions for each page
&lt;/h3&gt;

&lt;p&gt;Meta descriptions are snippets of content that appear in the search engines as a preview of your page. They're also an opportunity for you to tell users what they'll find on your site and whether it's relevant to their query or intent about landing pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/guides/search-gallery"&gt;Google's Search Gallery by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://moz.com/learn/seo/serp-features"&gt;What is a SERP Feature? Appearance, description and obtainability﻿ by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://komarketing.com/blog/understanding-google-serp-features-complete-guide/"&gt;Understanding Google SERP Features in 2021: The Complete Guide by Komarketing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ignitevisibility.com/serp-features/"&gt;Ultimate Guide to Google SERP Features by John E Lincoln
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rankranger.com/google-serp-features-guide"&gt;Visual Guide to Google SERP Features by RankRanger&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.accuranker.com/blog/how-you-can-use-serp-features-to-boost-traffic"&gt;How You Can Use SERP Features to Boost Traffic by Accuranker&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optimise-htags"&gt;
  &lt;/a&gt;
  Optimise H-tags
&lt;/h3&gt;

&lt;p&gt;The HTML headings in a website are important because they give search engines an indication of what the page is about. There are six different levels to choose from, all with varying degrees of importance when it comes to SEO (search engine optimization). Keywords should be distributed evenly throughout each level as this will show Google which keywords deserve more weight than others and allow them to rank accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-alt-tags-on-every-image"&gt;
  &lt;/a&gt;
  Use alt tags on every image
&lt;/h3&gt;

&lt;p&gt;The alt attribute or alt tag is an HTML attribute for a text that describes an image in detail. It must be placed directly in the image tag and not as a separate link like title tags. Alt tags help search engines quickly get a better understanding of what’s illustrated on an image, users who might otherwise have difficulty viewing images, especially those with disabilities because it will read out to them what's described on each picture that has this feature which also helps people understand why they should click into something if pictures are explaining how things work instead of just words alone whereas screen readers use these descriptions when images aren't displayed at all due to technical difficulties, etc...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/guidelines/google-images"&gt;Google Images best practices by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/on-page-seo/image-optimization/"&gt;11 Important Image SEO Tips You Need to Know by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/image-seo/"&gt;Image SEO: 12 Actionable Tips (for More Organic Traffic) by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.contentkingapp.com/academy/image-seo/"&gt;Image SEO: the Ultimate Guide by ContentKing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.iloveseo.net/how-to-optimize-your-ecommerce-for-google-images-and-visual-search/"&gt;How to optimize your Ecommerce for Google Images and Visual Search by Gianluca Fiorelli&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optimise-content-both-for-crawlers-and-people"&gt;
  &lt;/a&gt;
  Optimise content both for crawlers and people
&lt;/h3&gt;

&lt;p&gt;Search engine robots have the user's best interest in mind. They like it when content is original and valuable, which means that keywords should be included naturally in a piece of writing instead of being stuffed into sentences just to tick boxes on an SEO checklist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/crawling/large-site-managing-crawl-budget"&gt;Large site owner's guide to managing your crawl budget by Google
&lt;/a&gt;  - &lt;a href="https://www.contentkingapp.com/academy/crawl-budget/"&gt;Crawl budget explained by ContentKing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.onely.com/blog/ultimate-guide-crawl-budget/"&gt;The Ultimate Guide to Crawl Budget Optimization by Onely&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/crawl-budget-optimization/"&gt;How to optimize your crawl budget by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.deepcrawl.com/blog/best-practice/optimize-crawl-budget-tips-examples/"&gt;An SEO’s Guide to Crawl Budget Optimisation by Deepcrawl&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.botify.com/blog/crawl-budget-optimization"&gt;All About Crawl Budget Optimization (&amp;amp; How One Site Used It to Double Organic Traffic in Under 3 Months) by Botify&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/technical-seo/crawl-budget/"&gt;7 Tips to Optimize Crawl Budget for SEO by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-fresh-content"&gt;
  &lt;/a&gt;
  Create fresh content
&lt;/h3&gt;

&lt;p&gt;As a website owner, it is important to look at your user intent and demand so that you can meet their expectations. You need eye-catching content with relevant information for the reader to attract them as they surf through various websites online.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#develop-a-content-plan"&gt;
  &lt;/a&gt;
  Develop a content plan
&lt;/h3&gt;

&lt;p&gt;The content plan is a list of pieces that will be published on the site to help it rank higher. The updates play an important role because they work alongside SEO and make sure what's being shared online isn't just about promotion but also relevant information for users. It helps streamline the publication process by keeping track of upcoming web pages so there aren’t any delays or overlaps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-a-blog-to-your-website"&gt;
  &lt;/a&gt;
  Add a blog to your website
&lt;/h3&gt;

&lt;p&gt;Using a blog to attract, engage and convert users is important for any marketing strategy. Blogs are also an overlooked way of improving your website's search engine rankings (SERP).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-offpage-seo-optimisation"&gt;
  &lt;/a&gt;
  5. Off-page SEO optimisation 🚀
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#check-quantity-and-quality-of-sites-backlinks"&gt;
  &lt;/a&gt;
  Check quantity and quality of site's backlinks
&lt;/h3&gt;

&lt;p&gt;Backlinks from different web sources to our website play a significant role in how the site ranks on search engine results. It's important to have both quantity and quality backlinks when it comes to SEO, since having too much of one or not enough of another will impact your link profile negatively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analyse-your-competitors-backlinks"&gt;
  &lt;/a&gt;
  Analyse your competitors' backlinks
&lt;/h3&gt;

&lt;p&gt;To understand what a backlink profile should look like, it's important to research competitors that rank highly in the SERPs.&lt;/p&gt;

&lt;p&gt;Competitor research is an integral part of a link-building strategy. Analyzing competitor backlinks helps you get insight into how your website can improve its ranking on Google search results pages. It also enables you to see exactly where opponents are gaining all their links and learn from them so that your site doesn't make similar mistakes when trying to gain rankings yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-link-building-strategy"&gt;
  &lt;/a&gt;
  Create a link building strategy
&lt;/h3&gt;

&lt;p&gt;A link-building strategy is a process of prioritizing your website's links to help you get more backlinks and compete with top-ranking competitors. This may depend on how many backlinks you currently have, along with those from high competition sites'&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://moz.com/beginners-guide-to-link-building"&gt;The Beginner's Guide to Link Building by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/link-building/"&gt;The Beginner’s Guide to Link Building by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/link-building"&gt;Link Building for SEO: The Definitive Guide (2021) by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://smart.linkresearchtools.com/linkthing/link-building/golden-rules-link-building"&gt;7 Golden Rules of Link Building for 2021 and beyond by Christoph Cemper&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mangools.com/blog/link-building-techniques-checklist/"&gt;60+ link building techniques checklist [2021 update] by Paddy Moogan&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.aira.net/link-building-book/"&gt;The Link Building Book by Gisele Navarro&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collaborate-with-websites-by-sharing-relevant-content-within-the-industry-or-niche"&gt;
  &lt;/a&gt;
  Collaborate with websites by sharing relevant content within the industry or niche
&lt;/h3&gt;

&lt;p&gt;One of the most important factors to consider when looking for backlinks is if your host website has a related topic. If it does, then you should exchange guest posts with them because they would be more valuable than on an authoritative site unrelated to yours. That means you should do exchanges and write guest blogs at resources popular in your targeted niche!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://neomam.com/blog/link-prospecting/"&gt;How to Find Sites That Will Want to Link to Your Content by Gisele Navarro&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#participate-in-niche-forum-discussions-and-answer-the-questions"&gt;
  &lt;/a&gt;
  Participate in niche forum discussions and answer the questions
&lt;/h3&gt;

&lt;p&gt;Users who are potentially interested in some product or service often search for relevant forums where they can find fresh information and reviews. Participation on the forum creates content, which helps websites rank higher in Google's results pages as well as increasing traffic to a website. Q&amp;amp;A platforms (Yahoo Answers, Quora) not only provide interesting answers about different topics but also help increase brand awareness and attract targeted users back to your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encourage-users-to-write-reviews-about-your-product-or-service"&gt;
  &lt;/a&gt;
  Encourage users to write reviews about your product or service
&lt;/h3&gt;

&lt;p&gt;You can choose to use a review aggregator, where the user's opinion about services/products is shared and it will impact your decision whether or not you should try out that service/product. Search engines evaluate mentions of reviews for websites impacted by local SEO in particular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-images-videos-and-documents-for-website-promotion"&gt;
  &lt;/a&gt;
  Use images, videos, and documents for website promotion
&lt;/h3&gt;

&lt;p&gt;With the growing number of tools to create shareable multimedia content, businesses need to understand how these media can be best optimized and integrated into their overall SEO strategy. We will look at some common types of sharable files as well as a few tips on optimizing them properly to maximize search visibility. The key to efficient use lies in maximizing search visibility with proper optimizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-social-media-strategy"&gt;
  &lt;/a&gt;
  6. Social media strategy 🧑🏾‍🤝‍🧑🏾
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#learn-the-social-signals-model-of-your-industry"&gt;
  &lt;/a&gt;
  Learn the social signals model of your industry
&lt;/h3&gt;

&lt;p&gt;Social media shares increase the visibility of a page and its user engagement metrics which leads to an increase in the SERP ranking. Before starting any social media campaign, define what sort of content will strike a chord for your particular business segment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aim-to-create-viral-content"&gt;
  &lt;/a&gt;
  Aim to create viral content
&lt;/h3&gt;

&lt;p&gt;To drive additional traffic to your website, you should grow a strong social account on Facebook, Twitter, and Pinterest. Social accounts can help increase search engine rankings by engaging in positive interactions with the users who share links for relevant content that matches what is listed under "content."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-social-media-buttons-to-your-website"&gt;
  &lt;/a&gt;
  Add social media buttons to your website
&lt;/h3&gt;

&lt;p&gt;The fact that you have influential accounts on Twitter, Facebook, and Pinterest will inevitably attract a lot of people to your website. These platforms are also great for increasing the search engine rankings of your site!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-the-open-graph-protocol-for-social-media-posts"&gt;
  &lt;/a&gt;
  Use the Open Graph protocol for social media posts
&lt;/h3&gt;

&lt;p&gt;Interested in learning how to share your content with the world via social media? Open Graph is a protocol that allows you to control the way it looks when shared on Facebook. It is a meta tags structure for each post headline, description, and preview so that they attract more clicks and shares!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this post can help you a bit! I will keep this post updated when I find newer or better links that are relevant to these steps. Consider following me on Twitter or subscribing to my newsletter in order to stay up to date!&lt;/p&gt;

</description>
    </item>
    <item>
      <title> PE featured in LA WEEKLY </title>
      <author>perpetual . education</author>
      <pubDate>Thu, 26 Aug 2021 06:24:27 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/pe-featured-in-la-weekly-4n7a</link>
      <guid>https://dev.to/perpetual_edu/pe-featured-in-la-weekly-4n7a</guid>
      <description>&lt;p&gt;(from the article)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-something-new-perpetual-education-is-the-best-online-programming-and-design-school"&gt;
  &lt;/a&gt;
  Try Something New: Perpetual Education Is The Best Online Programming And Design School
&lt;/h2&gt;

&lt;p&gt;One of the more exciting new schools in this space is &lt;a href="https://perpetual.education"&gt;Perpetual Education&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perpetual Education popped in 2021, right here in Los Angeles. They believe that the future will require designers with a broader knowledge and understanding of the entire design process.&lt;/p&gt;

&lt;p&gt;Their flagship course, “Design for The Web” (DFTW) is a 6-month online design and programming mentorship. DFTW combines the best parts of a stepped college curriculum, boot camp pace, flexibility of a MOOC, and one-on-one meetings with the instructor.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;




&lt;p&gt;Read the whole thing here: &lt;a href="https://www.laweekly.com/best-online-programming-and-design-school"&gt;https://www.laweekly.com/best-online-programming-and-design-school&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Importing metadata from the AWS Glue data catalog into Apache Atlas with EMR</title>
      <author>Christopher Thompson H.</author>
      <pubDate>Thu, 26 Aug 2021 06:22:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/importing-metadata-from-the-aws-glue-data-catalog-into-apache-atlas-with-emr-4h8k</link>
      <guid>https://dev.to/aws-builders/importing-metadata-from-the-aws-glue-data-catalog-into-apache-atlas-with-emr-4h8k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-going-to-be-implemented"&gt;
  &lt;/a&gt;
  What is going to be implemented
&lt;/h2&gt;

&lt;p&gt;We will implement Apache Atlas through the AWS EMR service by connecting the Hive catalog directly to the Glue service, being able to dynamically classify your data and see the lineage of your data as it goes through different processes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bwn8TWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsxohqzl3jq6omwzeb5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bwn8TWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsxohqzl3jq6omwzeb5g.png" alt="architecture of reference"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation-of-services-to-use"&gt;
  &lt;/a&gt;
  Presentation of services to use
&lt;/h2&gt;

&lt;p&gt;Amazon EMR is a managed service that simplifies the implementation of big data frameworks like Apache Hadoop and Spark. If you are using Amazon EMR, you can choose from a predefined set of applications or choose your own from the list.&lt;/p&gt;

&lt;p&gt;The Apache Atlas project is a set of core governance services that enables companies to effectively and efficiently meet their compliance requirements with the entire enterprise data ecosystem. Apache Atlas provides metadata governance and management capabilities for organizations to catalog their data assets, classify and control these assets, and provide collaboration capabilities internally. In other words, help teams make the cycle of their own data transparent. For this reason, it is important in some business or architectural solutions to have these mechanisms of transparency and governance of their own data, in order to make the most of the knowledge of their data, through predictions in different ways. For example, market predictions, customer safety sessions, generation of impact campaigns, among many other ways to take advantage of the behavior of your data.&lt;/p&gt;

&lt;p&gt;Of the many features that Apache Atlas offers, the main feature of interest in this article is Apache Hive's data lineage and metadata management. After a successful Atlas setup, use native tools to import tables from Hive, analyze your data, and intuitively present your data lineage to your end users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#implementation-steps"&gt;
  &lt;/a&gt;
  Implementation Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-gluesettingsjson-configuration-file"&gt;
  &lt;/a&gt;
  1.- Create glue-settings.json configuration file
&lt;/h3&gt;

&lt;p&gt;The first thing we will need to do is create a .json file with the following structure on our local computer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Classification"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"hive-site"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"hive.metastore.client.factory.class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-preparation-of-environment-in-aws-review-of-defaultemrrole-and-network-infrastructure"&gt;
  &lt;/a&gt;
  2.- Preparation of environment in AWS (Review of default_emr_role and network infrastructure)
&lt;/h3&gt;

&lt;p&gt;This step is important for when we launch an EMR for the first time through the AWS CLI, especially for our command that we will execute in the following steps. The reason for this step is that when you start an EMR cluster you need to assign it a role, however when you first create it, that role is automatically created with the name default_emr_role.&lt;/p&gt;

&lt;p&gt;This is easily solved by launching a test cluster through the AWS Management Console. When you launch the cluster for the first time through the console, it will automatically create the default_emr_role role for you, which you can use with the lifting of our original cluster.&lt;/p&gt;

&lt;p&gt;Then you can go directly to the IAM service and check if the default role is already created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8gTxdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4g7cezu5xdnl4b1rlim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8gTxdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4g7cezu5xdnl4b1rlim.png" alt="IAM Roles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced tip:&lt;/strong&gt; If you want to implement Apache Atlas in a limited and productive scenario, you must create a new role with the least possible privilege for EMR, which will be the one you will use to execute the following steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to delete the test cluster that you used to create the role.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-prepare-parameters-to-create-and-run-emr-cluster"&gt;
  &lt;/a&gt;
  3.- Prepare parameters to create and run EMR cluster
&lt;/h3&gt;

&lt;p&gt;This step is important for the execution of the following code. The parameters to define are the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster_Name:&lt;/strong&gt; The name of the cluster you will need&lt;br&gt;
&lt;strong&gt;Instance_Type:&lt;/strong&gt; The type of family that each node will have&lt;br&gt;
&lt;strong&gt;Instance_Vol_Size:&lt;/strong&gt; The size of the EBS that is configured with the EMR&lt;br&gt;
&lt;strong&gt;Key_Name:&lt;/strong&gt; The name of the key pair created for the use and connection of this EMR&lt;br&gt;
&lt;strong&gt;Subnet_id:&lt;/strong&gt; The id of a subnet to use for this EMR&lt;br&gt;
&lt;strong&gt;S3_EMR_LOGDIR:&lt;/strong&gt; EMR machine log location&lt;/p&gt;

&lt;p&gt;In my case, the parameters that I will choose are the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CLUSTER_NAME=EMR-Atlas
INSTANCE_TYPE=m4.large
INSTANCE_VOL_SIZE=80
KEY_NAME=key-0a97d3c96668decaf
SUBNET_ID=subnet-09de17cf9eb1c56d3
S3_EMR_LOGDIR=s3://aws-logs-39483989-us-east-1/elasticmapreduce/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To obtain the subnet, you must go to the Amazon VPC service and obtain the ID of the subnet that you are going to use. You can also do it by command with the AWS CLI. For more information I leave you the following link: &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html"&gt;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-emr-cluster-with-aws-cli"&gt;
  &lt;/a&gt;
  4.- Create EMR Cluster with AWS CLI
&lt;/h3&gt;

&lt;p&gt;After having everything configured, the EMR cluster is created through the AWS CLI. It is important to note that these steps could be carried out through the AWS management console, decomposing the command according to the configuration options that are made from the interface. In my case, I find it easier to use the AWS CLI.&lt;/p&gt;

&lt;p&gt;The command with all our previously defined configurations would be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws emr create-cluster &lt;span class="nt"&gt;--applications&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hive &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;HBase &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hue &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hadoop &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ZooKeeper &lt;span class="nt"&gt;--release-label&lt;/span&gt; emr-5.33.0 &lt;span class="nt"&gt;--instance-groups&lt;/span&gt;  &lt;span class="nv"&gt;InstanceGroupType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MASTER,InstanceCount&lt;span class="o"&gt;=&lt;/span&gt;1,InstanceType&lt;span class="o"&gt;=&lt;/span&gt;m4.large &lt;span class="nv"&gt;InstanceGroupType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CORE,InstanceCount&lt;span class="o"&gt;=&lt;/span&gt;1,InstanceType&lt;span class="o"&gt;=&lt;/span&gt;m4.large &lt;span class="nt"&gt;--use-default-roles&lt;/span&gt; &lt;span class="nt"&gt;--ebs-root-volume-size&lt;/span&gt; 80 &lt;span class="nt"&gt;--ec2-attributes&lt;/span&gt; &lt;span class="nv"&gt;KeyName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;apache-atlas,SubnetId&lt;span class="o"&gt;=&lt;/span&gt;subnet-0d95c4cdf3119f9ae &lt;span class="nt"&gt;--configurations&lt;/span&gt; file://./glue_settings.json &lt;span class="nt"&gt;--tags&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EMR-Atlas &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="s2"&gt;"EMR-Atlas"&lt;/span&gt; &lt;span class="nt"&gt;--steps&lt;/span&gt; &lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CUSTOM_JAR,Jar&lt;span class="o"&gt;=&lt;/span&gt;command-runner.jar,ActionOnFailure&lt;span class="o"&gt;=&lt;/span&gt;TERMINATE_CLUSTER,Args&lt;span class="o"&gt;=&lt;/span&gt;bash,-c,&lt;span class="s1"&gt;'curl https://s3.amazonaws.com/aws-bigdata-blog/artifacts/aws-blog-emr-atlas/apache-atlas-emr.sh -o /tmp/script.sh; chmod +x /tmp/script.sh; /tmp/script.sh'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create an EMR cluster that you can monitor if you want from the AWS management console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-modify-importhivesh-script-in-emr-cluster"&gt;
  &lt;/a&gt;
  5.- Modify import-hive.sh script in EMR cluster
&lt;/h3&gt;

&lt;p&gt;When we have the cluster up and running, we must enter the cluster with any of the various possible forms of connection. In my case I use an SSH connection. If you want more information about the steps I leave you the following link: &lt;a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html"&gt;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are already inside the cluster, you must execute the following commands in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="nt"&gt;-ai&lt;/span&gt; /apache/atlas/bin/import-hive.sh&lt;span class="o"&gt;{&lt;/span&gt;,.org&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;sudo &lt;/span&gt;vim /apache/atlas/bin/import-hive.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This in order to modify the &lt;code&gt;import-hive.sh&lt;/code&gt; file. You could also use another editor that suits you other than vim.&lt;/p&gt;

&lt;p&gt;When you are inside the &lt;code&gt;import-hive.sh&lt;/code&gt; file, you must make the following changes:&lt;/p&gt;

&lt;p&gt;You will have to change this line of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;CP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ATLASCPPATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HIVE_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HADOOP_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;CP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ATLASCPPATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HIVE_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HADOOP_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:/usr/lib/hive/auxlib/aws-glue-datacatalog-hive2-client.jar"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the objective that Glue catalog to read directly to the base Atlas catalog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-importing-the-glue-data-catalog-to-atlas"&gt;
  &lt;/a&gt;
  6.- Importing the Glue data catalog to Atlas
&lt;/h3&gt;

&lt;p&gt;Run the modified script to import the Glue metadata into Atlas.&lt;/p&gt;

&lt;p&gt;The user is &lt;code&gt;admin&lt;/code&gt; and the password is &lt;code&gt;admin&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/apache/atlas/bin/import-hive.sh


Enter username &lt;span class="k"&gt;for &lt;/span&gt;atlas :- admin
Enter password &lt;span class="k"&gt;for &lt;/span&gt;atlas :-

2021-08-25T13:58:234,43 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.atlas.hive.bridge.HiveMetaStoreBridge - Successfully imported 5 tables from database aws_db
Hive Meta Data imported successfully!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way you will have already imported the glue catalog into Atlas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced tip:&lt;/strong&gt; If you want to automate this catalog update you will have to run the &lt;code&gt;import-hive.sh&lt;/code&gt; shell file again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-connection-to-atlas"&gt;
  &lt;/a&gt;
  7.- Connection to Atlas
&lt;/h3&gt;

&lt;p&gt;Finally, you must build a tunnel locally from the EMR in order to build an endpoint to connect to the atlas interface. For this, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;ssh&lt;/span&gt; -i apache-atlas.pem -vnNT -L &lt;span class="m"&gt;21000&lt;/span&gt;:localhost:21000 hadoop@&lt;span class="err"&gt;{&lt;/span&gt;ip_of_your_cluster&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this to connect to the interface you can access the following link:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://localhost:21000"&gt;http://localhost:21000&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The login screen will be displayed as shown below: Login with the password &lt;code&gt;admin&lt;/code&gt; and user &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LypgtvzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5771paum4phna5mkfni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LypgtvzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5771paum4phna5mkfni.png" alt="Apache Atlas login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Already inside the interface, if you search for hive_table you will find the information of your glue catalog:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nuDo49g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p9ob0p7zwjkslwt1t92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuDo49g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p9ob0p7zwjkslwt1t92.png" alt="Apache Atlas interfaces"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references-links"&gt;
  &lt;/a&gt;
  References Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://atlas.apache.org/#/"&gt;https://atlas.apache.org/#/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html"&gt;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/news/metadata-classification-lineage-and-discovery-using-apache-atlas-on-amazon-emr/"&gt;https://aws.amazon.com/jp/blogs/news/metadata-classification-lineage-and-discovery-using-apache-atlas-on-amazon-emr/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html"&gt;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-what-is-emr.html"&gt;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-what-is-emr.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>architecture</category>
      <category>cloud</category>
      <category>government</category>
    </item>
    <item>
      <title>JavaScript Promises The Easy Way👨‍🎓🤓.</title>
      <author>Lokesh_Choudhary</author>
      <pubDate>Thu, 26 Aug 2021 05:55:03 +0000</pubDate>
      <link>https://dev.to/lokeshchoudharylc/javascript-promises-the-easy-way-41a5</link>
      <guid>https://dev.to/lokeshchoudharylc/javascript-promises-the-easy-way-41a5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-promise-in-javascript"&gt;
  &lt;/a&gt;
  What is a Promise in JavaScript:
&lt;/h1&gt;

&lt;h6&gt;
  &lt;a href="#definition-by-mdn"&gt;
  &lt;/a&gt;
  &lt;em&gt;Definition by MDN:&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;&lt;em&gt;A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#sourcemdn-link-here"&gt;
  &lt;/a&gt;
  Source(MDN): &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Link Here&lt;/a&gt;
&lt;/h6&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading-i-hope-now-you-now-understand-everything"&gt;
  &lt;/a&gt;
  Thanks for reading, I hope now you now understand everything.
&lt;/h4&gt;

&lt;p&gt;What, No? Didn't Understand.&lt;/p&gt;

&lt;p&gt;No problem that why I am here writing this beautiful article for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-literal-meaning-of-a-promise"&gt;
  &lt;/a&gt;
  The literal meaning of a promise.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Your parents promised you to buy a new computer, but on a condition that you have to get good grades in school&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In our real life this is a meaning of a Promise, So it highly depends that you could get a new computer or couldn't if you didn't get good grades in school and even if you did well in exams until the results come the promise from your parent will be in a pending state.  &lt;/p&gt;

&lt;p&gt;Just like that in JavaScript Programming a Promise has three states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pending:&lt;br&gt;
&lt;em&gt;You will either get new computer or not.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fulfilled/Resolved:&lt;br&gt;
&lt;em&gt;You will get a new computer for sure.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rejected:&lt;br&gt;
&lt;em&gt;Sorry, you will not get a new computer.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#now-enough-for-the-example-lets-get-started-with-some-coding"&gt;
  &lt;/a&gt;
  Now enough for the example lets get started with some coding🤩💻.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzUr9o_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ielny44dfj5w2t1cydw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzUr9o_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ielny44dfj5w2t1cydw7.png" alt="code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what is happening is this code example is that, I have assigned a boolean value &lt;code&gt;goodGrades&lt;/code&gt; and also in some real world cases this could be a external fetch request you are making to get some data or any other function for which you are not sure to get a result that's why you use a Promise.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;goodGrades&lt;/code&gt; is true you the Promise will resolve or otherwise if false the Promise will reject and give the specified Error (reason).&lt;/p&gt;

&lt;p&gt;Also you can chain a Promise with &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;catch()&lt;/code&gt; or put in a &lt;code&gt;try catch&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So this is the most basic way I could found to explain JavaScript Promises.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading.
&lt;/h3&gt;

&lt;p&gt;This is my first post here, feedbacks are appreciated.&lt;/p&gt;

&lt;p&gt;And also about what topic should I write next?&lt;br&gt;
More on JavaScript?&lt;br&gt;
Backend with NodeJs/ExpressJs?&lt;br&gt;
Databases?&lt;br&gt;
Or Anything else.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Demystifying state management</title>
      <author>Kevin Pennekamp</author>
      <pubDate>Thu, 26 Aug 2021 05:52:21 +0000</pubDate>
      <link>https://dev.to/crinklesio/demystifying-state-management-2c1c</link>
      <guid>https://dev.to/crinklesio/demystifying-state-management-2c1c</guid>
      <description>&lt;p&gt;State management is one of the most complicated, and opinionated topics in modern and JavaScript-focused front-end development. But before diving in, what is state? State, in all its different forms, is nothing more than values we use to determine what to show towards our users and what behavior we allow. That is it. A global or application state is nothing more than a (complex) JavaScript object accessible from our UI code. We can read from it and we can change it. When we change it, we see the change or effect from the change reflected on the screen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-states"&gt;
  &lt;/a&gt;
  Types of states
&lt;/h2&gt;

&lt;p&gt;Let's discuss the different types first. Many say they manage their state on a global level, using packages like Redux. But, people often forget that they use different types of states as well, even when they don't know it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_CC_-tW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bevl72hukm3zfjlzmm6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_CC_-tW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bevl72hukm3zfjlzmm6o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Local&lt;/strong&gt;: state that is used by a single UI component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shared&lt;/strong&gt;: state that is used by many UI components. It is often managed in a parent or wrapper component. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global&lt;/strong&gt;: a special kind of &lt;em&gt;shared&lt;/em&gt; state, as it lives on the highest level, accessible to all UI components (or even helper functions). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Meta&lt;/strong&gt;: also known as 'state about state'. It tells you something about &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Route&lt;/strong&gt;: state stored in the current URL of the application (e.g. object IDs or pagination information).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remote&lt;/strong&gt;: a copy of the data coming from a server. The responses of fetch requests are stored as 1-on-1 copies in this state. It should not deviate from the server (except when applying &lt;a href="https://www.smashingmagazine.com/2016/11/true-lies-of-optimistic-user-interfaces/"&gt;optimistic UI&lt;/a&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The above image is coming from a &lt;a href="https://github.com/crinklesio/reference-architecture"&gt;reference architecture&lt;/a&gt; from client-side applications. It is only used to visualize the different types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don't have to manage these types of states all by yourself, most of the time. Many packages can be used to help you around. When looking at the React eco-system, packages like Redux (global), &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt; (remote), React Router (route, ), and &lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt; (remote), are all good examples of packages that do a lot for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eventdriven"&gt;
  &lt;/a&gt;
  Event-driven
&lt;/h2&gt;

&lt;p&gt;The best-known state management pattern is the flux pattern. It gained popularity with the 'Redux' package. It is a great example of an event-driven pattern. Let's take a closer look at its flow. The user, via the view, dispatches an action, via an action creator. The dispatched action is nothing more than a simple JavaScript object describing the type, and the payload. It is an &lt;em&gt;event&lt;/em&gt;. Within the store, many different reducers act upon the dispatched &lt;em&gt;event&lt;/em&gt; and change the content of the store. The view queries the store to display the correct information to the user. When changes happen, the store notifies the view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A core concept within this pattern is the &lt;em&gt;reducer&lt;/em&gt; pattern. A reducer is a function that takes a state object and action as input and returns a state object. Based on the action, it determines how to change the state for the output. This is often achieved by using a switch statement. But it can also be achieved using a &lt;em&gt;strategy&lt;/em&gt; pattern. A big benefit of the strategy pattern is that each 'case' is a separate function. Makes variable naming inside a complex reducer a lot easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;EVENT_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;EVENT_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;__default__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__default__&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Event-driven state management is related to &lt;a href="https://statecharts.dev/"&gt;state machines&lt;/a&gt;. State machines allow us to model state more , in a way that can be visualized. Below is an example of a state machine for an animated toast message. This toast message should disappear after X seconds. Implementing something like this is easy when already using reducers. By adding if-statements, we can guard state changes: "You can do action X if we are in state Y". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atomic"&gt;
  &lt;/a&gt;
  Atomic
&lt;/h2&gt;

&lt;p&gt;Most event-driven solutions go for a single global store. The atom pattern does it differently. Instead of having a single global state, we have many different global states of single values. The popularity of this pattern rose with the introduction of Recoil from Facebook. This pattern is often seen as easier. Because everything is a single value, you don't have the overarching boilerplate of action creators, actions, events, etc. You just have a global value, and when you change it, your application re-renders. &lt;/p&gt;

&lt;p&gt;Another benefit is its &lt;em&gt;decoupled&lt;/em&gt; nature. When using a single store, you have to register the structure, default values, etc. in a single place. You cannot modularize your code. With atoms, you can define them where ever you want. Lastly, atoms can be combined (in most implementations). This means you can use atoms in other atoms. When an underlying atom changes, the parent atom changes as well. You don't have to worry about re-render or listening, it is all managed for you. &lt;/p&gt;

&lt;p&gt;It does have some downsides. When the number of atoms grows, managing them can become a hassle. You have to name them all, and you have to be aware that they exist. Also, managing a complex structure of dependencies between atoms can become quite a task for developers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactivity-and-proxies"&gt;
  &lt;/a&gt;
  Reactivity and proxies
&lt;/h2&gt;

&lt;p&gt;Many modern front-end frameworks are &lt;em&gt;reactive&lt;/em&gt;. When a state changes, the framework knows that it should re-render. Or in other words, the state lets the framework knows it changed. This mental model is very like a &lt;em&gt;proxy&lt;/em&gt;. A proxy is a wrapper object that is being called, instead of accessing the targeted object . This allows us to add custom behavior to various calls. &lt;/p&gt;

&lt;p&gt;Proxies are ideal to create reactive and robust state management. The basic power lays in the fact that we can add listeners to state changes. Besides, the values of a proxy can directly be changed. You do not have to invoke the change via a function. If you want to create a more complex proxy, you could implement validators that validate changes before applying a state change. You could even add several layers of 'middleware' before each state change. You can go nuts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Count updated:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Count updated: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above shows an example proxy. As you can see, we add a &lt;code&gt;listener&lt;/code&gt; function for when the value of &lt;code&gt;count&lt;/code&gt; changes. Now when we change the value of &lt;code&gt;count&lt;/code&gt;, the &lt;code&gt;listener&lt;/code&gt; function is triggered. Do note that this particular implementation is not &lt;em&gt;immutable&lt;/em&gt;. You can change the value . Many people prefer to have an immutable state, as it is less prone to development errors. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Now you should have a better understanding of some fundamentals of state management. Knowing the different types of state and how to manage state is the start. With proper state management, you can get a long way in complex web applications. But it is the start. There are many (more) ways to manage data that are important in client-side applications. When you master state, go dive into persistent storage or caching.    &lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Python Collections: Hackerrank Question on Counter</title>
      <author>Kathan Vakharia</author>
      <pubDate>Thu, 26 Aug 2021 05:49:09 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-collections-hackerrank-question-on-counter-80i</link>
      <guid>https://dev.to/kathanvakharia/python-collections-hackerrank-question-on-counter-80i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackerrank.com/challenges/word-order/problem"&gt;https://www.hackerrank.com/challenges/word-order/problem&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You are given &lt;em&gt;n&lt;/em&gt; words. Some words may repeat. For each word, output its number of occurrences. The output order should correspond with the input order of appearance of the word.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-approach"&gt;
  &lt;/a&gt;
  The Approach
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;store the words as they come in the Counter. &lt;/li&gt;
&lt;li&gt;print them.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;🧾 I hope you remember, &lt;code&gt;Counter&lt;/code&gt; after python 3.7 internally maintains insertion order.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#n -&amp;gt; no of words
&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;#
&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>hackerrank</category>
      <category>counter</category>
    </item>
    <item>
      <title>5 VS Code Extensions which I use extensively[2021]🤩</title>
      <author>Shyamal Joshi</author>
      <pubDate>Thu, 26 Aug 2021 05:35:45 +0000</pubDate>
      <link>https://dev.to/shyamaljoshi/5-vs-code-extensions-which-i-use-extensively-2a8i</link>
      <guid>https://dev.to/shyamaljoshi/5-vs-code-extensions-which-i-use-extensively-2a8i</guid>
      <description>&lt;p&gt;What are the &lt;strong&gt;Extensions&lt;/strong&gt; in VScode 🤔? Actually without VScode Extensions life way so boring🥱.Extensions provides you more productivity as a Developer. So see listed Extensions and download it and use it. Thank me latter😁.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1live-server"&gt;
  &lt;/a&gt;
  1.Live Server:
&lt;/h2&gt;

&lt;p&gt;I think this is the most basic extension every web developer must use and most of you already have this extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lnq89eN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6fxqj8j1kpfhrf7j2n5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lnq89eN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6fxqj8j1kpfhrf7j2n5.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2auto-close-tag"&gt;
  &lt;/a&gt;
  2.Auto Close Tag
&lt;/h2&gt;

&lt;p&gt;Oh dude it's too boring to add closing tags😣, and sometimes we got stuck in the hierarchy if we don't close tag but now Auto Close Tag Extension is here for us😎&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F7HhN2wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg5rxkl2y6qtibppxf0e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7HhN2wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg5rxkl2y6qtibppxf0e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3prettier-formatter-for-visual-studio-code"&gt;
  &lt;/a&gt;
  3.Prettier Formatter for Visual Studio Code:
&lt;/h2&gt;

&lt;p&gt;Did you ever noticed that your code doesn't have proper hierarchy and for that reason even you yourself don't able to debug the code. Trust me its a very bad nightmare 😖.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxtiVh3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2t1qcxwywvjuzcojk2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxtiVh3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2t1qcxwywvjuzcojk2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&amp;amp;ssr=false#overview"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  4.Bracket Pair Colorizer 2:
&lt;/h2&gt;

&lt;p&gt;This is also a good extension for the same hierarchy problem, By using this extension you can colorize your bracket pairs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmKviAle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy853m1p7ewf9y1jaclg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmKviAle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy853m1p7ewf9y1jaclg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5auto-rename-tag"&gt;
  &lt;/a&gt;
  5.Auto Rename Tag:
&lt;/h2&gt;

&lt;p&gt;Guys we are at our last extension as the name suggest this extension , If you rename your any one of tag then automatically this tag will rename the other tag also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DkwN-GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s8wh4jn1lqzkwqskmgm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DkwN-GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s8wh4jn1lqzkwqskmgm.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Little TV Series Survey using pure HTML, CSS and Javascript
for practicing those technologies.</title>
      <author>R0land013</author>
      <pubDate>Thu, 26 Aug 2021 03:52:53 +0000</pubDate>
      <link>https://dev.to/r0land013/little-tv-series-survey-using-pure-html-css-and-javascript-for-practicing-those-technologies-2g60</link>
      <guid>https://dev.to/r0land013/little-tv-series-survey-using-pure-html-css-and-javascript-for-practicing-those-technologies-2g60</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello everybody!&lt;/strong&gt; I feel so happy because I have just&lt;br&gt;
created my second web page using pure &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;Javascript&lt;/strong&gt;,&lt;br&gt;
and I loved the result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Efj9SAql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy2hmdksu0isewnoq8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Efj9SAql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy2hmdksu0isewnoq8a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This web page, was created to practice the mentioned technologies.&lt;br&gt;
It let you choose a series from &lt;em&gt;'The Big Bang Theory'&lt;/em&gt;, &lt;em&gt;'Mr. Robot'&lt;/em&gt;&lt;br&gt;
and &lt;em&gt;'Game of Thrones'&lt;/em&gt;(Some of my favorite series). When you choose&lt;br&gt;
the series, the web page will show you some data about it, and it&lt;br&gt;
will let you choose your favorite character from that series. Then&lt;br&gt;
you have to leave a comment about why did you like about that series.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6vCQyiUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n80i9iiz93n3qqud2hu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vCQyiUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n80i9iiz93n3qqud2hu7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
When you click &lt;em&gt;'submit'&lt;/em&gt;, a thankful message will appear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gs0wpZE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arxffsun68ebm2ish1qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gs0wpZE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arxffsun68ebm2ish1qg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
It also validate that you are selecting a series and leaving a comment.&lt;/p&gt;

&lt;p&gt;The repository of this little project is:&lt;br&gt;
&lt;a href="https://github.com/R0land013/TV-Series-Survey"&gt;https://github.com/R0land013/TV-Series-Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment showing what do you think about this practice.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React VS Vue | How about some style ✨?</title>
      <author>Atif Aiman</author>
      <pubDate>Thu, 26 Aug 2021 02:43:42 +0000</pubDate>
      <link>https://dev.to/alserembani94/react-vs-vue-how-about-some-style-1ofi</link>
      <guid>https://dev.to/alserembani94/react-vs-vue-how-about-some-style-1ofi</guid>
      <description>&lt;p&gt;Previously, I talked about features offered by both frameworks, and shout out to &lt;a class="mentioned-user" href="https://dev.to/fyodorio"&gt;@fyodorio&lt;/a&gt;
 for asking me to do comparison about both frameworks' approach on CSS. Well, it's gonna be long article, but I hope I can open to possibilities offered by frameworks and later can be used however you see fit.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alserembani94" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfqPzcq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BEjPGr6W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186380/b3ea7705-180e-4b18-979d-1e6467225f89.png" alt="alserembani94"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alserembani94/react-vs-vue-what-about-them-2o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React VS Vue | What about them?&lt;/h2&gt;
      &lt;h3&gt;Atif Aiman ・ Aug 19 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I will talk about the beginning, on how people use CSS back then, and later will dive into specifics such as preprocessors and postprocessors, as well as available CSS frameworks. I know most of you love Tailwind, so hold on you cup of drink, and dwell in the history first, shall we?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#inline-styles"&gt;
  &lt;/a&gt;
  Inline Styles
&lt;/h2&gt;

&lt;p&gt;In the beginning of times, after 4 years of the existence of HTML, comes the debut of CSS. Although that time, styling is not that great (as we evaluate the styling on current standard), but the debut of CSS brings great change to the web development. To style an element, you only need to add &lt;code&gt;style&lt;/code&gt; attribute to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"margin: 16px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style, in this matter, is the only style available at that time, and it's still available to this day. Element's &lt;code&gt;style&lt;/code&gt; will always be treated at the top level, since we style it directly to a extremely specific element. Just imagine, there are hundreds, thousands of elements that uses the same style. Crazy right? But our predecessors used to do this, you know!&lt;/p&gt;

&lt;p&gt;Well, for React and Vue, both of them are available! Though it differs on how you want to use it, especially when you need dynamic styling for a specific element, you might use &lt;code&gt;style&lt;/code&gt; attributes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-jsx"&gt;
  &lt;/a&gt;
  React JSX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// React&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00d8ff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that the first curly bracket is to trigger javascript code inside JSX, and the second curly bracket is for object notation.&lt;/p&gt;

&lt;p&gt;Since React is using JSX, anything inside curly bracket should always use camelCase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Vue --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:style=&lt;/span&gt;&lt;span class="s"&gt;"{ backgroundColor }"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#42b883&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the respective example for the usage of &lt;code&gt;style&lt;/code&gt; attribute for both React and Vue. However, we are too lazy to make ourselves repeat the code and read millions of line, so we are gonna escalate this a little bit!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#selectors"&gt;
  &lt;/a&gt;
  Selectors
&lt;/h2&gt;

&lt;p&gt;We want to avoid repetitive works, so the existence of CSS helps us a lot on splitting the code between HTML and CSS, thus comes the selectors such as elements, classes, ids, siblings, and finally a cursed &lt;code&gt;!important&lt;/code&gt; 💀&lt;/p&gt;

&lt;p&gt;So, in standard HTML, you can use &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag to handle it for you. As usual, you either use a global one, from element selector, to the most specific selector, the id, and then increasing the specificity by using siblings, data-attributes, and &lt;code&gt;!important&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="m"&gt;#35495e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In React, we don't have &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, so we cannot do this way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"#42b883"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#stylesheet"&gt;
  &lt;/a&gt;
  Stylesheet
&lt;/h2&gt;

&lt;p&gt;Cascading StyleSheet (CSS), as the word describes, is a sheet of styles, where we can split the styling totally from the HTML. Quite neat right? So when we want to debug the CSS, we can just open the sheet, without going through HTML codes. Easier to read, easier for bug-hunting. To import the sheet, just use the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"your-css-sheet.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since React and Vue both are using Javascript, we instead use Javascript way of importing the sheet. Both have the same implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/to/your-css-sheet.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and later just use the class that is declared inside your CSS files. Neat!&lt;/p&gt;

&lt;p&gt;However, heed this advice. Until this point, if you use general selectors, and import your CSS that the global level, that means all element, includes the children of the component will have the same styles. There are some case, you need the specificity, so you make a class e.g. &lt;code&gt;.Header__wrapper__link&lt;/code&gt;. Imagine how specific you want to make it, but there are a better war for both React and Vue. Read more below!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#modules-and-scopes"&gt;
  &lt;/a&gt;
  Modules and scopes
&lt;/h2&gt;

&lt;p&gt;This is where some concerns arises. As I talked before, there are some use cases, where we need to specifically target a specific component, without affecting other components, including the children component. This is where modules and scopes comes in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Modules and scopes are only available for javascript, and not vanilla HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, we have a file called &lt;code&gt;your-style.css&lt;/code&gt;. Do you know that you can actually modularise your CSS by just changing from &lt;code&gt;.css&lt;/code&gt; to &lt;code&gt;.module.css&lt;/code&gt;? Let me explain how it works.&lt;/p&gt;

&lt;p&gt;Assume that this is your &lt;code&gt;your-style.css&lt;/code&gt; sheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: In &lt;code&gt;.module.css&lt;/code&gt;, it is not allowed to use element selector at the base of selector. As example, &lt;code&gt;div &amp;gt; .blog&lt;/code&gt; is not allowed, but &lt;code&gt;.blog &amp;gt; div&lt;/code&gt; is allowed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After compile, when you inspect your element in your browser, you will see the element this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you convert it to &lt;code&gt;your-style.module.css&lt;/code&gt;, javascript will help in hashing your class, so it will only target that specific element in specific component. In result, you will see this result during inspection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog-12ba89"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;To use in React, simply import you module css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-style.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"styles.blog"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;

&lt;p&gt;Since Vue also supports in-file stylesheet, so there are two ways of using &lt;code&gt;.module.css&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"styles.blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-style.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR you can just do it inside your &lt;code&gt;.vue&lt;/code&gt; file!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, for Vue, you need to set up module loader to use CSS modules. You can refer to &lt;a href="https://vue-loader.vuejs.org/guide/css-modules.html"&gt;the documentation on Vue Loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, don't be sad, for there is a Vue way of doing things, that is scopes!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different on how CSS modules handle things, instead of hashing the class itself, it create a data-attribute which handles the hashing. So the output should be like below when you inspect your website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt; &lt;span class="na"&gt;data-v-f3f3eg9&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#preprocessors-and-postprocessors"&gt;
  &lt;/a&gt;
  Preprocessors and Postprocessors
&lt;/h2&gt;

&lt;p&gt;Sometimes, when we write our own CSS, there is a time where the class name initials are the same such as &lt;code&gt;blog__#&lt;/code&gt;, or maybe you refer to the same initial selector such as &lt;code&gt;div &amp;gt; .wrapper&lt;/code&gt; and &lt;code&gt;div &amp;gt; .title&lt;/code&gt;. As your stylesheet grows, you find out that you need to copy the same sheet over and over (pun intended).&lt;/p&gt;

&lt;p&gt;Of course, this is one of the example of the use case, but this is the time where you should consider using preprocessors or postprocessors to do the job.&lt;/p&gt;

&lt;p&gt;Preprocessors such as LESS, SASS, SCSS, and postprocessors such as PostCSS are CSS-to-go for developers that well versed in CSS, since they support plugins and have some features such as nesting and variables (though I personally feel variables can be done using vanilla CSS). Let me show you some example on how they work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will later processed and the result will be as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.blog__wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just imagine how easy your CSS can be debug later on!&lt;/p&gt;

&lt;p&gt;These, of course can be used for both React and Vue, but you need to let your compiler know what you are using. You might need to find the loader of your desired preprocessor or postprocessor and install it as your dependency.&lt;/p&gt;

&lt;p&gt;Since Vue also supports in-file styling, after you install the loader. you can do it this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You only need to add &lt;code&gt;lang&lt;/code&gt; attribute to your &lt;code&gt;style&lt;/code&gt;, and you are good to go!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cssinjs"&gt;
  &lt;/a&gt;
  CSS-in-JS
&lt;/h2&gt;

&lt;p&gt;Since we are using Javascript, why not having Javascript all the way? Of course, it is also available! It is one of the option, so you can use it if you want.&lt;/p&gt;

&lt;p&gt;There are tons of libraries out there for CSS-in-JS, especially for React, so developer can do code sharing between React and React Native for development, since React Native didn't support CSS. &lt;a class="mentioned-user" href="https://dev.to/michelebertoli"&gt;@michelebertoli&lt;/a&gt;
 did a good job discovering &lt;a href="https://michelebertoli.github.io/css-in-js/"&gt;most of CSS-in-JS libraries&lt;/a&gt;, so you can explore there.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-frameworks"&gt;
  &lt;/a&gt;
  CSS Frameworks
&lt;/h2&gt;

&lt;p&gt;There are a ton of CSS frameworks that can be used as well, so you can use their CDN and just use all the utilities available for you. CSS frameworks such as Bootstrap, TailwindCSS, Materialize, Bulma etc. help developers to focus on component development, instead of composing your own CSS.&lt;/p&gt;

&lt;p&gt;All you need to do, is to head to their respective framework documentation, and install it, or import it to your project to get going.&lt;/p&gt;

&lt;p&gt;Personally, I really love TailwindCSS and Bulma for the features offered, but I won't explain further.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are a lot of ways you want to style your components. Of course, React and Vue has its own way of doing styling, so you can choose one of them that suits your style. Improving developer experience is one thing  that we need to keep in mind, especially when working in a team.&lt;/p&gt;

&lt;p&gt;But of course, for you web artisans out there, you are cool 😎!&lt;/p&gt;

&lt;p&gt;Anything lacking, you can comment down below!&lt;/p&gt;

&lt;p&gt;Peace be upon ya!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Can I Write A Clean Code?</title>
      <author>Jeff Chavez</author>
      <pubDate>Thu, 26 Aug 2021 01:54:31 +0000</pubDate>
      <link>https://dev.to/jctechdev/can-i-write-clean-code-4lbb</link>
      <guid>https://dev.to/jctechdev/can-i-write-clean-code-4lbb</guid>
      <description>&lt;p&gt;I have been having difficulties in writing clean code. But the series of posts in Medium helped a lot. So here are the links to the posts and my takeaways that are worth sharing from &lt;a href="https://faun.pub/writing-clean-code-9f3a4e8d06b7"&gt;part 1&lt;/a&gt;, &lt;a href="https://faun.pub/writing-clean-code-part-2-1e89dcf774df"&gt;part 2&lt;/a&gt;, &lt;a href="https://faun.pub/writing-clean-code-part-3-83ff269f9e58"&gt;part 3&lt;/a&gt;, &amp;amp; &lt;a href="https://faun.pub/writing-clean-code-part-4-bc436800a7f5"&gt;part 4&lt;/a&gt; of the &lt;strong&gt;Writing Clean Code&lt;/strong&gt; series by &lt;a href="https://medium.com/@logeshvarl"&gt;Logeshvar L&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid redundant information. E.g: UserWithNameAndAge is more redundant and is very lengthy. Prefer User&lt;/li&gt;
&lt;li&gt;Follow the casing conventions according to the language you’re using. Example: camelCase in Java/Javascript, snake_case in Python and so on.&lt;/li&gt;
&lt;li&gt;Be consistent in naming your variables/methods. Example: Avoid using getAge(), fetchName(), retrieveMail(). Instead, be consistent and name them getAge(), getName(), and getMail().&lt;/li&gt;
&lt;li&gt;Avoid slang, unclear abbreviations and disinformation (indicative of wrong data structure in the variable name, etc).&lt;/li&gt;
&lt;li&gt;Avoid comments that say the obvious or those which are misleading.&lt;/li&gt;
&lt;li&gt;Never comment out code, just remove.&lt;/li&gt;
&lt;li&gt;Use comments only when you want to provide licensing information, warnings or there is a need to provide API documentation.&lt;/li&gt;
&lt;li&gt;Use comments when code is difficult to grasp at a single sight and it would make it easier by providing some comments as explanations (e.g: regex).&lt;/li&gt;
&lt;li&gt;Properly format the code by adding blank lines to separate unrelated concepts and grouping similar/ related concepts together.&lt;/li&gt;
&lt;li&gt;Do not write an unreadably long line of code or name in a single line. Split them into multiple lines and use precise short names.&lt;/li&gt;
&lt;li&gt;Write functions with a minimum number of parameters.&lt;/li&gt;
&lt;li&gt;Keep your functions simple to read and understand without writing 100s of lines of code inside a single function. Instead, split into multiple short functions.&lt;/li&gt;
&lt;li&gt;Consider splitting of functions, but be sensible.&lt;/li&gt;
&lt;li&gt;Increase reusability and make code DRY (Don’t Repeat Yourself).&lt;/li&gt;
&lt;li&gt;Try not to mix different levels of abstraction in the function.&lt;/li&gt;
&lt;li&gt;Avoid unexpected side effects.&lt;/li&gt;
&lt;li&gt;Check if your function makes unit testing easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the takeaways that you can pretty much read in the blog posts. After reading the posts. I hope we can all answer the question above that Yes! We can write clean code with practice and tips provided in the blog posts. &lt;/p&gt;

&lt;p&gt;I encourage you to read each post as he provides helpful examples and detailed steps/tips to implement writing clean code.&lt;/p&gt;

&lt;p&gt;I'll surely get back to these posts as I write codes.&lt;/p&gt;

&lt;p&gt;To God be the glory!&lt;/p&gt;

</description>
      <category>cleancode</category>
      <category>javascript</category>
      <category>functions</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Frontend Javascript Ajax/Http Request Guide</title>
      <author>Alex Merced</author>
      <pubDate>Wed, 25 Aug 2021 23:54:36 +0000</pubDate>
      <link>https://dev.to/alexmercedcoder/frontend-javascript-ajax-http-request-guide-1jk2</link>
      <guid>https://dev.to/alexmercedcoder/frontend-javascript-ajax-http-request-guide-1jk2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-ajax"&gt;
  &lt;/a&gt;
  What is AJAX?
&lt;/h2&gt;

&lt;p&gt;AJAX stands for (Asynchronous Javascript and XML) which is a throw back term when XML was the standard way to send data across the web. JSON (Javascript Object Notation) is now the standard but AJAX is still used as the term for features that allow browser run javascript to make requests to the web beyond clicks on anchor tags or submissions on a form (there was a time this was not a feature, how far we have come!)&lt;/p&gt;

&lt;p&gt;** XML **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;users&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;user&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
      Alex Merced
    &lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;
      36
    &lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/user&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;user&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
      Bob Smith
    &lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;
      55
    &lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/user&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/users&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;** The same data set represented as JSON&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alex Merced"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bob Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may notice JSON uses less charachters and is much easier to read, so it isn't hard to imagine how JSON supplanted XML as the standard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-an-api"&gt;
  &lt;/a&gt;
  What's an API
&lt;/h2&gt;

&lt;p&gt;API (Application Programming Interface) can mean many things but in the context of making AJAX requests an API refers to applications that don't neccessarily respond with the traditional HTML but instead respond to requests with data typically in JSON format.&lt;/p&gt;

&lt;p&gt;We will be using &lt;a href="https://jsonplaceholder.typicode.com/"&gt;JSON Placeholder&lt;/a&gt; for today's exercise as they provide serveal "practice" API for practicing making AJAX requests.&lt;/p&gt;

&lt;p&gt;After practicing a little try building some basic applications with free public API's.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mixedanalytics.com/blog/list-actually-free-open-no-auth-needed-apis/"&gt;List of Free Public APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or you can create your own data and have an API made from it using a Headless CMS!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tuts.alexmercedcoder.com/2021/1/freeheadless/"&gt;List of Headless CMS services with a free tier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-promise"&gt;
  &lt;/a&gt;
  What's a Promise
&lt;/h2&gt;

&lt;p&gt;We will be discussing three functions that are commonly used for this purpose, all of these functions return an object that is called a Promise. So before we use these functions let's discuss how promises work.&lt;/p&gt;

&lt;p&gt;A promise is an object that lives up its name, it represents a "promise" that some data will eventually be available. Every promise initially begins in a "pending" state which allows code after the promise to run and then checks in later if the state of the promise has changed. This is known as your code running "Asynchronously" (Out of Order or in Parallel)&lt;/p&gt;

&lt;p&gt;What if we have code that we want to run when promise is no longer pending (resolved or error), how would we write this in javascript. A promise has three methods to provide a function that should only run in a certain situation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.then((data) =&amp;gt; {})&lt;/code&gt; The function given to this method runs when the promise is resolved and is passed the data from the resolved promise as an argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.catch((error) =&amp;gt; {})&lt;/code&gt; The function given to this method runs if the promise is rejected and is an error state, it is passed the error&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.finally(() =&amp;gt; {})&lt;/code&gt; This function runs whether the promise resolves or is rejected&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;some illustrative code...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theReturnedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatReturnsAPromise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;theReturnedPromise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I run whether the promise succeeds or fails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This line of code is synchronous so it'll run before all the above has a chance to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we saved the promise to variable, but typically we developers don't do that and instead just chain the methods of the return value of the function directly like so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This line of code is synchronous so it'll run before all the above has a chance to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  Async/Await
&lt;/h4&gt;

&lt;p&gt;Sometimes these methods can be a little messy looking so there is an alternative syntax called Async/Await. In this syntax the keyword "async" allows us to designate a function as asynchronous which automatically makes whatever it returns a promise, in which case we can use the keyword "await" in place of .then to pause the function until a promise resolved to make our code look for synchronous. This can ONLY be used in an async function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//define the async function&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;functionThatReturnsAPromise&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// call the async function&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This line of code is synchronous so it'll run before all the above has a chance to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So while that's a little clear, error handling still required us to use .catch or to wrap the code in a try/catch block. If we wanted to setup a finally scenario we would need a .finally to. So really, Async/Await really just cleans the need for a .then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jquery-ajax"&gt;
  &lt;/a&gt;
  jQuery \$.ajax
&lt;/h2&gt;

&lt;p&gt;To use this function you need to add the jQuery script tag inside your html document's head tag. All these functions will do the same thing, make a request for the data to a URL we specify and then return a promise of that data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://code.jquery.com/jquery-3.6.0.js"&lt;/span&gt;
  &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="&lt;/span&gt;
  &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#basic-use"&gt;
  &lt;/a&gt;
  Basic Use
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I run whether the promise succeeds or fails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#asyncawait-version-with-a-trycatch-block-for-error-handling"&gt;
  &lt;/a&gt;
  Async/Await Version (with a try/catch block for error handling)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fetch"&gt;
  &lt;/a&gt;
  Fetch
&lt;/h2&gt;

&lt;p&gt;This function is built into the browser but comes with an extra step. The promise does not give you back the data but a response object with details of the request, to get the data you'll want to use the response objects .json methods (to get a javascript object from json data) or .text method (great for non-json data that may need some deeper work, gives you just the text version of the data).&lt;/p&gt;

&lt;p&gt;This is always available in the browser but it does not exist in node, to use fetch in node you will have to install the &lt;code&gt;node-fetch&lt;/code&gt; library.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-use"&gt;
  &lt;/a&gt;
  Basic Use
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;== convert the response into a javascript object which is received by the next .then&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I run whether the promise succeeds or fails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#asyncawait-version-with-a-trycatch-block-for-error-handling"&gt;
  &lt;/a&gt;
  Async/Await Version (with a try/catch block for error handling)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h2&gt;

&lt;p&gt;This is a popular third party library available in the frontend with a script tag and can be installed in node. The only catch with Axios is the object you get back from the promise isn't the data but a response object with the data already nested inside it within a property called data.&lt;/p&gt;

&lt;p&gt;To use Axios just add it in your head tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#basic-use"&gt;
  &lt;/a&gt;
  Basic Use
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I run whether the promise succeeds or fails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#asyncawait-version-with-a-trycatch-block-for-error-handling"&gt;
  &lt;/a&gt;
  Async/Await Version (with a try/catch block for error handling)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise resolved and gave me:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The Promise failed and the error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;thisAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The above should have you all ready to go in getting data from APIs around the web, if you need to make more complex requests (post, put, delete) check out this github gist where I should how to make these requests in fetch and axios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/AlexMercedCoder/49430b0e19604f3940a45b29c27e089a"&gt;Full Crud Requests in Fetch and Axios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>axios</category>
      <category>fetch</category>
      <category>jquery</category>
    </item>
    <item>
      <title>JavaScript introduction</title>
      <author>Oscar Ortiz 🇲🇽</author>
      <pubDate>Wed, 25 Aug 2021 23:52:43 +0000</pubDate>
      <link>https://dev.to/cleveroscar/javascript-introduction-3ohh</link>
      <guid>https://dev.to/cleveroscar/javascript-introduction-3ohh</guid>
      <description>&lt;p&gt;A introduction to &lt;em&gt;JavaScript&lt;/em&gt; for those of you who are new to the &lt;strong&gt;Javascript&lt;/strong&gt; &lt;em&gt;programming&lt;/em&gt; &lt;em&gt;language&lt;/em&gt; or just &lt;em&gt;programming&lt;/em&gt;. You will need to learn how computers use &lt;em&gt;programmatic&lt;/em&gt; approach &lt;strong&gt;problem solving&lt;/strong&gt; to achieve goals. By the end of this article you will learn how &lt;strong&gt;Javascript&lt;/strong&gt; is used for on the &lt;strong&gt;WEB&lt;/strong&gt; and what capabilities it has. &lt;/p&gt;

&lt;p&gt;This is a series in the making so please feel free to give feedback, error corrections, etc. I would love this to be a Free Path for self-taught developer's and provide as much resources and useful information as possible. &lt;/p&gt;

&lt;p&gt;There are plenty of things we can accomplish with &lt;strong&gt;Javascript&lt;/strong&gt; on the web but what exactly is it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-use-javascript-on-the-web"&gt;
  &lt;/a&gt;
  How do we use Javascript on the web?
&lt;/h2&gt;

&lt;p&gt;Here is a quick list of what it can accomplish when working with the web.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Access Content&lt;/li&gt;
&lt;li&gt;Modify Content&lt;/li&gt;
&lt;li&gt;Program Rules&lt;/li&gt;
&lt;li&gt;React To Event&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTt-UmlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://html-css-js.com/images/og.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTt-UmlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://html-css-js.com/images/og.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's okay if you don't understand what is going on at first but just know that &lt;strong&gt;Javascript&lt;/strong&gt; is what allows us to make web pages come to life with these steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-script"&gt;
  &lt;/a&gt;
  What is a Script?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROpC0xBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybttqum8jnxrnkrln5jg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROpC0xBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybttqum8jnxrnkrln5jg.jpeg" alt="Form Component Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Script is a series of instructions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This may seem very simple because in fact it is that simple. &lt;strong&gt;Javascript&lt;/strong&gt; is simply a &lt;em&gt;series&lt;/em&gt; of instructions that are followed by the &lt;em&gt;computer&lt;/em&gt; to achieve a goal. For example when it comes to other things other than computers like &lt;strong&gt;Handbooks&lt;/strong&gt;, &lt;strong&gt;Recipes&lt;/strong&gt;, and &lt;strong&gt;Manuals&lt;/strong&gt; they all have something in common and it's following a set of steps to achieve a goal. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axoCswZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.conceptdraw.com/How-To-Guide/picture/Food-and-Beverage-Cooking-Recipes-Canadian-Apple-Pie-Recipe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axoCswZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.conceptdraw.com/How-To-Guide/picture/Food-and-Beverage-Cooking-Recipes-Canadian-Apple-Pie-Recipe.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recipes give folks a set of instructions to follow to create a dish they have never made before. This can be considered a &lt;em&gt;script&lt;/em&gt; since it's simple steps for a meal. Some recipes may seem very basic and quick to make, others may have complex steps and take longer for preparation. So if you're a new &lt;strong&gt;COOK&lt;/strong&gt; then there is a lot of &lt;strong&gt;&lt;em&gt;terminology&lt;/em&gt;&lt;/strong&gt; to learn, same concept can be looked at as a programmer.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ElOcJHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://venngage-wordpress.s3.amazonaws.com/uploads/2019/09/employee-handbook-example-booklet.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ElOcJHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://venngage-wordpress.s3.amazonaws.com/uploads/2019/09/employee-handbook-example-booklet.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handbooks are often provided by companies to &lt;em&gt;New&lt;/em&gt; employees to familiarize themselves with the work environment guidelines. For example steps for a fire emergency exits incase a fire were too goes off or maybe some steps that need to follow within a specific event.  I'm sure you get the picture for Manuals as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-create-a-script"&gt;
  &lt;/a&gt;
  How do we create a script?
&lt;/h3&gt;

&lt;p&gt;When writing a &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt; we need a few things to keep in mind to make sure we write a good &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the goal &lt;/li&gt;
&lt;li&gt;Design the script&lt;/li&gt;
&lt;li&gt;Code each step&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;As tempting as it can be to start coding right away, it pays to spend time designing your script before your start writing it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Computers unfortunately need us to tell them how to solve problems, it may seem crazy because we're so use to programs doing things for us without thinking that now we have to step out of our comfort-zone and start thinking like a computer to be able to achieve what we are trying to accomplish with our script. This is where you become different than most developers that simply copy and paste without actually knowing what the script is doing. For example when first learning how to ride a bike, you were scared to fall but once you realized it wasn't that scary to fall when learning to balance yourself you learned by starting off with small tasks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;GOAL&lt;/em&gt;&lt;/strong&gt;: To be able to ride the bike without falling off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Design Script&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Training wheels to help balance and get used to turning the handles&lt;/li&gt;
&lt;li&gt;Remove training wheels and learn to ride freely as someone is there besides you to help you not fall&lt;/li&gt;
&lt;li&gt;Stepping off a ledge or step to start riding and get a feel for yourself&lt;/li&gt;
&lt;li&gt;If you keep on falling and feel like going no where, repeat steps one through 3. &lt;/li&gt;
&lt;li&gt;Should be able to balance all on your own now and ride freely. (Don't forget to wear your helmet and safety pads.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Code Each Step&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Well in this example we would just start riding our bikes and follow the steps as instructed. I might not have the steps correctly but we have an idea on how we can get better at riding a bike with these steps (script). &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt; terms this can be as a &lt;strong&gt;Calculator&lt;/strong&gt; App when developing the &lt;em&gt;addition function&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;GOAL&lt;/em&gt;&lt;/strong&gt;: Add up numbers for a new value&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Design Script&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ask the user for two numbers&lt;/li&gt;
&lt;li&gt;Add numbers up together&lt;/li&gt;
&lt;li&gt;Return new number&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Code Each Step&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create add function&lt;br&gt;
&lt;code&gt;function add(){}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pass in arguments to act as our numbers that the user passes&lt;br&gt;
&lt;code&gt;function add(a, b) {}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Return summed up numbers&lt;br&gt;
&lt;code&gt;function add(a, b) { return a + b }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It's good to know that again &lt;strong&gt;computers&lt;/strong&gt; don't learn how to perform tasks like you and I, it needs to follow instructions every time it performs tasks. Important things to note when learning a new programming language. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Vocabulary&lt;/em&gt;&lt;/strong&gt;: The words that computers understand&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Syntax&lt;/em&gt;&lt;/strong&gt;: How you put those words together to create instructions computers can follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So what is a script and how do I create one?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A script is a series of instructions that the computer can follow in order to achieve a goal&lt;/p&gt;

&lt;p&gt;Computers approach tasks in a different way than humans, so your instructions must let the computer solve the task programmatically&lt;/p&gt;

&lt;p&gt;To approach writing a script, break down your goal into a series of tasks and then work out each step needed to complete that task&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope by the end of this article you managed to learn something new. It is very important to understand how your code works, not only does it help you become a better developer but can also help you use the tools you are working with more efficient.&lt;/p&gt;

&lt;p&gt;These articles are mostly intended for personal use on becoming a better programmer, writer, and grow my programming skills. Feel free to drop any feedback or corrections that you believe that should be made to help me and others. Thank you for your time for sticking this far!&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/CleverOscarDev"&gt;Twitter&lt;/a&gt; for any future article suggestions you’d like to see about.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
