<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 raisons pourquoi j'aimes Laravel !</title>
      <author> </author>
      <pubDate>Tue, 18 May 2021 20:13:19 +0000</pubDate>
      <link>https://dev.to/ericcodeur/10-raisons-pourquoi-j-aimes-laravel-cc3</link>
      <guid>https://dev.to/ericcodeur/10-raisons-pourquoi-j-aimes-laravel-cc3</guid>
      <description>&lt;p&gt;Au cours des deux dernières années, j'ai essayé plusieurs langages et frameworks de programmation. J'ai réalisé des projets avec Django, Laravel, Ruby on Rails et Node.js avec Express.js&lt;/p&gt;

&lt;p&gt;J'ai adoré tout ces frameworks. Ils sont tous matures et font tous le travail. En revanche, l'un de ces framework m'a séduit un peu plus que les autres ... Laravel.&lt;/p&gt;

&lt;p&gt;Voici les 10 raisons pour lesquelles je crois sincèrement que Laravel est génial!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;PHP est génial! Oui. Ceux qui prétendent le contraire sont, désolés de le dire, ignorants. Ils ignorent que PHP 3.0 est obsolète depuis longtemps et que PHP 8 est désormais un langage POO complet, relativement rapide, mature, stable et très agréable à utiliser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Le framework Laravel est précisément construit en POO avec les derniers standards PHP. La syntaxe de Laravel est simple, claire et élégante.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il n'y a presque pas de code standard à écrire. Comparé à plusieurs autres frameworks, Laravel est livré avec une configuration de démarrage complète. Grâce aux librairies de Laravel, développer une application web c'est simple et ultra rapide!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Il existe une panoplie de packages tiers. Pourquoi ré-inventer la roue ? Utilisez un package existant et économisez des heures et des heures de développement... Un point fort en faveur de Laravel est que les packages tier Laravel sont maintenu, à jour et prêt pour être utilisé sur des vraie projets! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Les créateurs de Laravel ont créé un éco-système de produits professionnels qui complète Laravel d'une manière merveilleuse. Bien sûr, ces produits sont payants, mais en retour, ils sont prêts pour la mise en production à grande échelle et peuvent vous faire économiser des centaines d'heures de développement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il est également possible de créer des applications fullstack, c'est-à-dire backend mais aussi frontend. Le code reste exécuté sur le serveur mais certains produits comme Livewire permettent de développer des UI interactives comme React mais en pur PHP, simple et facile et sans une ligne de code Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel prend également en charge la création de composants d'interface utilisateur. Il est donc possible d'intégrer dans votre UI des widgets déjà pré-développés et clé en main qui peuvent être installés en moins d'une minute et toujours en PHP pur et sans javascript. (ex. graphique chart, calendrier, datatable, ect.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel est open source mais il est développé par ces créateurs comme un produit pro. C'est-à-dire que les retours clients sont pris en compte dans les décisions et que des corrections et améliorations sont régulièrement publiées. Laravel peut se targuer d'être à jour avec les dernières technologies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Une documentation incroyables. Laravel a à mon avis la meilleure documentation pour un framework backend. Tout est simple, clair et détaillé avec des exemples. Les outils de recherche fonctionnent très bien, il est donc facile de trouver ce que vous recherchez. De plus, elle est régulièrement mis à jour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La communauté Laravel est géniale! Tout le monde est le bienvenu pour rejoindre la famille. Il n'y a pas de discrimination et pas de snobisme. Aucune question n'est considérée comme stupide. Les gens veulent aider du mieux qu'ils peuvent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C'est tout :-)&lt;/p&gt;

&lt;p&gt;Si cela vous donne envie d'en savoir plus sur Laravel et pourquoi pas l'essayer. Vous pouvez commencer ici: &lt;a href="http://www.laravel.com"&gt;www.laravel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Je publierai plusieurs articles dans les semaines à venir sur Laravel. Vous pouvez me suivre si vous ne voulez rien manquer.&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to use SVGR?</title>
      <author>Mihriban Alp</author>
      <pubDate>Tue, 18 May 2021 20:09:29 +0000</pubDate>
      <link>https://dev.to/mihrilp/how-to-use-svgr-25gj</link>
      <guid>https://dev.to/mihrilp/how-to-use-svgr-25gj</guid>
      <description>&lt;p&gt;Hey Everyone, this is my first post and i'll mention about &lt;a href="https://react-svgr.com/"&gt;SVGR&lt;/a&gt;. If you've never heard of it before, SVGR is an amazing tool that converts your SVGs into React components.&lt;/p&gt;

&lt;p&gt;There are a few ways for using SVGR:&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#1playground"&gt;
  &lt;/a&gt;
  1.Playground.
&lt;/h4&gt;

&lt;p&gt;You can use their online &lt;a href="https://react-svgr.com/playground/"&gt;playground&lt;/a&gt;. Enter your svg code in the left box (SVG INPUT) then you will see the converted React component on right box (JSX OUTPUT).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ED_1vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58886855/117895443-08c07a00-b2c7-11eb-9d69-13eebdb304b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ED_1vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58886855/117895443-08c07a00-b2c7-11eb-9d69-13eebdb304b4.png" alt="Playground - SVGR — Firefox Developer Edition 5_10_2021 2_14_43 AM (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also create components for React-Native, TypeScript etc. You just need to mark from the left of the screen.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#2command-line"&gt;
  &lt;/a&gt;
  2.Command Line
&lt;/h4&gt;

&lt;p&gt;First you need to install the CLI tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/cli --save-dev
# or use yarn
yarn add @svgr/cli --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's think we have an svg named "my_icon.svg" in the project directory. If we write this command line to terminal we will get the code of the our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @svgr/cli my_icon.svg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SvgMyIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 499.859 499.859&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M469.223 270.371c9.237-9.218 14.329-21.48 14.335-34.53.007-13.05-5.071-25.318-14.298-34.546a48.44 48.44 0 00-15.946-10.611l20.045-19.969c9.258-9.214 14.365-21.481 14.38-34.543s-5.062-25.342-14.298-34.578l-.519-.519a48.52 48.52 0 00-25.169-13.37c.56-2.968.857-6.007.86-9.094.015-13.06-5.063-25.339-14.298-34.573l-.637-.637c-9.221-9.221-21.48-14.299-34.52-14.299-8.804 0-17.248 2.323-24.645 6.665a48.603 48.603 0 00-11.268-17.559l-.42-.422c-19.033-19.03-50.004-19.033-69.039.001L163.331 148.244l16.204-66.917c6.402-26.44-8.045-53.401-33.605-62.715-14.384-5.242-30.346-4.048-43.792 3.271S79.026 41.96 75.618 56.886l-2.222 9.736C62.768 113.177 45.2 159.96 21.18 205.668 3.181 239.918-3.674 279.973 1.878 318.455c5.744 39.816 23.855 75.938 52.376 104.458 35.01 35.011 81.542 54.286 131.049 54.284h.126c49.552-.032 96.113-19.373 131.105-54.458l37.349-37.448zm-173.93 131.182c-29.328 29.406-68.353 45.616-109.883 45.644h-.106c-41.491 0-80.495-16.155-109.837-45.497-23.906-23.905-39.085-54.173-43.897-87.528-4.656-32.273 1.086-65.852 16.167-94.549 25.228-48.006 43.702-97.237 54.907-146.325l2.222-9.735c1.514-6.633 5.639-12.077 11.615-15.33s12.789-3.761 19.18-1.433c11.194 4.079 17.522 15.887 14.718 27.467l-28.77 118.803c-3.413 12.246 12.364 25.887 25.185 14.137L315 39.001c7.337-7.339 19.276-7.337 26.601-.014l.42.421c3.554 3.555 5.511 8.279 5.511 13.306s-1.958 9.752-5.511 13.307L238.659 169.382c-5.858 5.857-5.858 15.355 0 21.213s15.356 5.858 21.213 0l125.982-125.98c3.554-3.555 8.279-5.512 13.306-5.512s9.752 1.957 13.307 5.512l.637.637a18.695 18.695 0 015.512 13.327 18.697 18.697 0 01-5.544 13.317c-37.611 37.461-89.049 88.677-126.281 125.783-5.87 5.847-5.888 15.344-.042 21.214a14.953 14.953 0 0010.627 4.414c3.829 0 7.659-1.457 10.585-4.372 25.028-24.931 93.218-92.857 117.168-116.678 7.337-7.301 19.261-7.287 26.581.031l.518.519c3.561 3.561 5.518 8.294 5.512 13.329s-1.975 9.764-5.548 13.32c-36.483 36.339-94.262 93.883-130.424 129.934-5.869 5.848-5.887 15.345-.04 21.214a14.955 14.955 0 0010.626 4.413c3.829 0 7.66-1.458 10.586-4.373l68.783-68.524 9.78-9.68c7.337-7.262 19.245-7.229 26.544.068a18.691 18.691 0 015.511 13.316 18.685 18.685 0 01-5.518 13.303L332.675 364.072zM451.123 374.497c3.26-7.615-.271-16.433-7.886-19.692-7.616-3.262-16.433.27-19.693 7.886-5.032 11.754-12.214 22.345-21.346 31.477-11.157 11.156-24.34 19.323-39.184 24.274-7.859 2.621-12.105 11.116-9.484 18.976 2.096 6.284 7.948 10.258 14.228 10.258 1.573 0 3.173-.249 4.748-.774 19.3-6.438 36.428-17.042 50.906-31.521 11.845-11.847 21.169-25.602 27.711-40.884zM490.765 382.77c-7.615-3.264-16.433.261-19.697 7.876-7.009 16.349-17.003 31.079-29.704 43.78-14.772 14.772-32.148 25.807-51.644 32.796-7.798 2.796-11.854 11.384-9.058 19.183 2.196 6.126 7.967 9.941 14.121 9.941 1.68 0 3.389-.284 5.062-.884 23.698-8.496 44.804-21.895 62.732-39.823 15.412-15.411 27.545-33.301 36.064-53.173 3.264-7.614-.262-16.432-7.876-19.696z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SvgMyIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, but if we have more than one icon, converting them one by one can be a bit boring and exhausting. One of the best ways to using SVGR is add a script to your package.json to automate the SVG transformation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgr icons -d components/icons --icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the script below transforms each SVG in the "icons" folder by composing React in "components/icons".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run svgr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#3webpack"&gt;
  &lt;/a&gt;
  3.Webpack
&lt;/h4&gt;

&lt;p&gt;For install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/webpack --save-dev
# or use yarn
yarn add @svgr/webpack --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update your webpack.config.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;svg$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@svgr/webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import our SVGs as a React component and use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my_icon.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
You can check the documentation for more 👉  &lt;a href="https://react-svgr.com/docs/getting-started/"&gt;https://react-svgr.com/docs/getting-started/&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😊
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>State Management With WebAssembly &amp; Rust</title>
      <author>Sean Watters</author>
      <pubDate>Tue, 18 May 2021 19:56:18 +0000</pubDate>
      <link>https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g</link>
      <guid>https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#object-oriented-state-management-with-webassembly-and-rust"&gt;
  &lt;/a&gt;
  Object Oriented State Management With WebAssembly and Rust
&lt;/h1&gt;

&lt;p&gt;State management in any application is always a &lt;em&gt;super&lt;/em&gt; fun problem to solve. When it comes to integrating WebAssembly with existing applications or starting from scratch with a new project, this problem gets even more interesting, but it’s not as complicated as it may seem.&lt;/p&gt;

&lt;p&gt;Before we jump in, I do want to make it known that this may not yet be the most performant solution for general state management (“&lt;em&gt;yet&lt;/em&gt;” is important there). Interop between JavaScript and WebAssembly still suffers some performance limitations when it comes to serialization and de-serialization of complex data structures, but it is &lt;a href="https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%f0%9f%8e%89/"&gt;improving&lt;/a&gt; and there are &lt;a href="https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md"&gt;proposals&lt;/a&gt; that are on their way that could have a significant, positive impact on performance.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#jumping-in"&gt;
  &lt;/a&gt;
  Jumping In
&lt;/h2&gt;

&lt;p&gt;For this example, we’re going to build a super basic counter application — you’ll be able to increment and decrement the count with “+” and “-” buttons. This will cover very surface level information and basic implementation, but won’t go deep into state management patterns like “&lt;a href="https://facebook.github.io/flux/"&gt;flux&lt;/a&gt; with Rust,” or how to build your signup form; those are posts for another time, and I do plan on covering those topics in the next little while if folks find this walk-through helpful.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re feeling like, &lt;em&gt;“just show me the code!”&lt;/em&gt; you can view it &lt;em&gt;&lt;a href="https://github.com/seanwatters/webassembly-and-rust-counter-app"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#high-level"&gt;
  &lt;/a&gt;
  High Level
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wo2COILd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AND-Ql5GM-mbSNOhSHqjTQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wo2COILd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AND-Ql5GM-mbSNOhSHqjTQA.png" alt="State Management Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the diagram above, we can think about our application as being three distinct parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The View — our HTML document that a user would interact with&lt;/li&gt;
&lt;li&gt;The Link — our JavaScript code that bridges the gap between our View and our State layer&lt;/li&gt;
&lt;li&gt;The State — our Rust code that worries about application state and provides an interface for our JavaScript to read and write from&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The View layer is relatively simple — a couple of buttons and a &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; to render our counter state. The JavaScript necessary for hooking up our view to our application state is mostly generated by a Rust library called wasm_bindgen, but we will still need to utilize the generated bindings in our custom JavaScript.&lt;/p&gt;

&lt;p&gt;The state layer is the most interesting and complex of the three, but if implemented properly, can actually provide a very clean interface through which we interact with our application state.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;First we’re going to create a basic vanilla JavaScript, WebAssembly &amp;amp; Rust project. You’ll need to make sure that you have &lt;code&gt;rust&lt;/code&gt; installed via &lt;code&gt;rustup&lt;/code&gt; — instructions &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;here&lt;/a&gt;. You’ll also need to make sure that &lt;code&gt;wasm-pack&lt;/code&gt; is installed — link &lt;a href="https://rustwasm.github.io/wasm-pack/installer/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll generate the project — if you have difficulty with this step, you may need to use &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init rust-webpack counter-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we’re going to build and run the project — again, may need to use &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build &amp;amp;&amp;amp; npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see a blank page at &lt;code&gt;localhost:8080&lt;/code&gt; with &lt;code&gt;Hello world!&lt;/code&gt; logged in the console. If you take a look in the &lt;code&gt;src/lib.rs&lt;/code&gt; file, the default project is using the &lt;code&gt;web_sy&lt;/code&gt;s and &lt;code&gt;wasm_bindgen&lt;/code&gt; Crates (Rust libraries) to generate this message.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;So now that we’ve got our project up and running, we need to actually write some code. If you’re not yet familiar with Rust, I highly recommend reading through &lt;em&gt;&lt;a href="https://doc.rust-lang.org/book/"&gt;The Book&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We’re going to use some Object Oriented Programming paradigms to start out. &lt;a href="https://doc.rust-lang.org/book/ch17-00-oop.html"&gt;OOP in Rust&lt;/a&gt;, is an interesting animal, and isn’t necessarily the most idiomatic approach, but may be an easier transition for folks coming from OOP backgrounds. We’ll cover a more functional style in a separate post.&lt;/p&gt;

&lt;p&gt;In our Object Oriented approach, we are going to use only Rust for state management, and won’t be using &lt;code&gt;web_sys&lt;/code&gt; to generate our HTML via JavaScript bindings.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;First let’s create a new file called &lt;code&gt;counter_state.rs&lt;/code&gt; in our &lt;code&gt;src&lt;/code&gt; directory:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;There’s a bit going on here —&lt;/p&gt;

&lt;p&gt;First we’re creating a public Rust &lt;code&gt;struct&lt;/code&gt;, then we are implementing that &lt;code&gt;struct&lt;/code&gt; using the &lt;code&gt;impl&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: all structs with JavaScript bindings generated by wasm_bindgen must use the pub keyword.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The key indicator here that we’re using OOP-style Rust, is that in our &lt;code&gt;struct&lt;/code&gt; implementation, we are adding a public &lt;code&gt;new()&lt;/code&gt; method which will return an instance of the previously defined &lt;code&gt;CounterState&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition to the &lt;code&gt;new()&lt;/code&gt; method, we have also exposed three other public methods: &lt;code&gt;increment_counter()&lt;/code&gt;, &lt;code&gt;decrement_counter()&lt;/code&gt;, and &lt;code&gt;get_counter()&lt;/code&gt;. The &lt;code&gt;counter&lt;/code&gt; property on the &lt;code&gt;CounterState&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt; is private and isn’t exposed to the consumer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important:&lt;/em&gt; we will also need to add this &lt;code&gt;counter_state&lt;/code&gt; module to our imports in the &lt;code&gt;src/lib.rs&lt;/code&gt; file. Add the line: &lt;code&gt;mod counter_state;&lt;/code&gt; to the top of your file below the other imports.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;The next step will be to update our &lt;code&gt;static/index.html&lt;/code&gt; file to include the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; elements, as well as the element where we’ll display the counter state:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;Before we can create the JavaScript glue to connect the HTML &lt;em&gt;document&lt;/em&gt; to the Rust &lt;em&gt;state&lt;/em&gt; we will first need to update our &lt;code&gt;package.json&lt;/code&gt; file to provide access to our WebAssembly module by adding &lt;code&gt;"wasm": "file:pkg"&lt;/code&gt; to our dependencies — you will also need to run &lt;code&gt;npm i&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Finally, we can add the JavaScript that will access our stateful WebAssembly module. It will go in the &lt;code&gt;js/counter.js&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;We will also need to update our &lt;code&gt;js/index.js&lt;/code&gt; file to import the &lt;code&gt;counter.js&lt;/code&gt; file, instead of the &lt;code&gt;pkg/index.js&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;In the &lt;code&gt;counter.js&lt;/code&gt; file, we’re importing the &lt;code&gt;CounterState&lt;/code&gt; JavaScript class that &lt;code&gt;wasm_bindgen&lt;/code&gt; has generated as a binding for our Rust &lt;code&gt;struct&lt;/code&gt;. The generated code looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;Because we now have access to this &lt;code&gt;class&lt;/code&gt; we also have access to the public methods on the Rust &lt;code&gt;struct&lt;/code&gt; — what we’re doing on line 3 of the &lt;code&gt;counter.js&lt;/code&gt; file is creating an instance of the &lt;code&gt;struct&lt;/code&gt; in WebAssembly, and assigning it to a JavaScript variable using the &lt;code&gt;new()&lt;/code&gt; method we created in our &lt;code&gt;counter_state.rs&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;From here, we’re setting the initial text content of the &lt;code&gt;#counter&lt;/code&gt; HTML element using the &lt;code&gt;get_counter()&lt;/code&gt; method. We’re also adding event listeners to the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; elements in our HTML document, that will increment and decrement our counter’s state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;increment_counter()&lt;/code&gt; and &lt;code&gt;decrement_counter()&lt;/code&gt; methods both return the post-modification state of the private counter property, so we don’t need to use &lt;code&gt;get_counter()&lt;/code&gt; a second time.&lt;/p&gt;

&lt;p&gt;To validate that we’ve successfully implemented the counter we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i &amp;amp;&amp;amp; npm run build &amp;amp;&amp;amp; npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout &lt;code&gt;localhost:8080&lt;/code&gt; and you should see something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fV2TQpA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1052/1%2Aq3uKJJWFK8XnLiHECBzorg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fV2TQpA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1052/1%2Aq3uKJJWFK8XnLiHECBzorg.png" alt='Number 42 with "+" and "-" buttons'&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Object Oriented state management with Rust and WebAssembly is not only very possible, it’s actually relatively straightforward to reason about. Similar to other state management solutions, you still are creating a persistent store of some kind, and making it available as a module to your renderer — but with WebAssembly modules, you can get the performance boost for computation intensive methods, added type safety, and the other features that make Rust great.&lt;/p&gt;

&lt;p&gt;This example only covers surface level problem spaces. We’re not using complex types or having to manage serialization or de-serialization — that does make things a little more complicated, but I will be writing another post that addresses all that in the context of &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; creation, in the coming weeks.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>Build Cross-Platform Native Mobile Apps using Java/Kotlin for iOS, Android, Desktop &amp; Web</title>
      <author>Shai Almog</author>
      <pubDate>Tue, 18 May 2021 19:24:05 +0000</pubDate>
      <link>https://dev.to/codename_one/build-cross-platform-native-mobile-apps-using-java-kotlin-for-ios-android-desktop-web-5g3j</link>
      <guid>https://dev.to/codename_one/build-cross-platform-native-mobile-apps-using-java-kotlin-for-ios-android-desktop-web-5g3j</guid>
      <description>&lt;p&gt;The new Codename One Maven build makes building native mobile and desktop apps trivial… It’s also free and open source to boot!&lt;/p&gt;

&lt;p&gt;We can get started by opening start.codenameone.com&lt;/p&gt;

&lt;p&gt;Where we select the package name for our app. This is very important as it can’t be changed once the app is submitted to a store!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fPqpXSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A4GPJ7_DpFLf9XGEcaBoaQQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fPqpXSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A4GPJ7_DpFLf9XGEcaBoaQQ.jpeg" alt="start.codenameone.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We enter the name to the app and download a zip containing the maven project, notice that you need to pick Kotlin if you wish to build a Kotlin app…&lt;/p&gt;

&lt;p&gt;We can now open the app in any IDE, I used IntelliJ/IDEA but you can use Eclipse, NetBeans, or even VSCode. Most of the important code in the project is under the common directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggnB22li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://javarevisited.blogspot.com/2018/09/top-5-courses-to-learn-intellij-idea-java-and-android-development.html%23axzz6A8Vy1sea" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggnB22li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://javarevisited.blogspot.com/2018/09/top-5-courses-to-learn-intellij-idea-java-and-android-development.html%23axzz6A8Vy1sea" alt="The project opened in IntelliJ/IDEA. Form creation highlighted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right now it only has the main class under the package you selected which in my case is com.example.myapp. Let’s look at the start method within the main app which creates a hello world form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZBrp7eM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ATEg4EtX-0ef-X6zCRSo0pw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZBrp7eM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ATEg4EtX-0ef-X6zCRSo0pw.png" alt="Main Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This code creates a Form, which is the root component for a Codename One app, and shows it. It also adds a “Hello World” label under the “Hi World” title.&lt;/p&gt;

&lt;p&gt;The maven target “Run in Simulator” lets us run the simulator and produces this result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFLeVjQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmpuwWT8pDlWiv5bkZyJrtA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFLeVjQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmpuwWT8pDlWiv5bkZyJrtA.jpeg" alt="Simulator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many other maven targets we can use to do pretty much everything you will need and I will go through a few of them, but first I want to show off the ease of Codename One programming…&lt;/p&gt;

&lt;p&gt;We can change the code above to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqUKVk-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AF1ig4a223TL54xyj6Vq61w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqUKVk-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AF1ig4a223TL54xyj6Vq61w.png" alt="Changes in the source"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We add a button called “sayHi” and add a listener to an event.&lt;/p&gt;

&lt;p&gt;In the event callback we show a dialog. This is pretty intuitive and works exactly as you would expect…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZn9Tiol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AoWB70LpEJNcdmDrumZZEaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZn9Tiol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AoWB70LpEJNcdmDrumZZEaw.png" alt="Dialog showing after clicking the button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can place a breakpoint, debug and even make changes to the code and see it update on the fly (this requires a bit of work but does in fact work). But one of the cooler things is the ease of styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZD3PcIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AyCbOR4z-m81AEzCaly0xyw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZD3PcIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AyCbOR4z-m81AEzCaly0xyw.jpeg" alt="theme.css enables styling the entire UI on the fly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting the button color to red in the css produces an instant change without recompiling, reloading or anything:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-3qAIcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AxU1ojbXwTfGGEHsxb1kjOQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-3qAIcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AxU1ojbXwTfGGEHsxb1kjOQ.png" alt="Results of styling the color to red"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build a native app we can select the appropriate target such as Android build, iOS, Mac Windows etc. This sends a build to Codename One servers which have all the tools installed and let you build iOS apps without a Mac. You can also generate a local build which I’ll below. Notice I’m simplifying a bit, since you also need a certificate. That’s a bit of a painful subject in general. Codename One makes that relatively simple with wizards etc. but that’s a bit of a big subject.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIXhnfUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARrZm_7ywu1nXrxxJ_Q7BPg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIXhnfUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARrZm_7ywu1nXrxxJ_Q7BPg.jpeg" alt="Sending a native build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can track the results in three places, the first is the build cloud from where you can download the resulting file, scan the QR code to install it on the device, copy or email the link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t5Qwe2Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A2wdEcmE2nSWcfWBQSF4tqQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t5Qwe2Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A2wdEcmE2nSWcfWBQSF4tqQ.png" alt="Cloud Build Results: https://cloud.codenameone.com/secure/index.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second way is through Codename One Settings which you can launch via maven too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--594bHzWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ACkjU2avMXtoXwcvRwVisHg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--594bHzWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ACkjU2avMXtoXwcvRwVisHg.jpeg" alt="Launching Codename One Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This launches a desktop app that’s a “one stop shop” for controlling Codename One. You can define project settings, generate certificates, monitor builds etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHrkpWMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZ9En7VIUI8cYmXbkpbZ8mw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHrkpWMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZ9En7VIUI8cYmXbkpbZ8mw.jpeg" alt="Device Builds section of Codename One Settings AKA Control Center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s also a native Android app which you can use to track builds and install them. For iOS you can open the web URL which will work well on device.&lt;/p&gt;

&lt;p&gt;Finally, we can build a native app without the build cloud. We can run the Xcode iOS project target or the Gradle Android Project maven target.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_t16GLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZYLCnwBK4hWRGQnLMnjm-A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_t16GLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZYLCnwBK4hWRGQnLMnjm-A.jpeg" alt="xcode ios project maven target"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running the Xcode project Apples Xcode environment launches seamlessly with the generated native iOS project which we can run in the native iOS simulator or on the device! Notice that this requires a Mac. The Android Studio equivalent works everywhere…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtCpzCki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AONlxfqvv7XsjNex3OYlfmQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtCpzCki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AONlxfqvv7XsjNex3OYlfmQ.jpeg" alt="The native project in xcode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the above is also in this tutorial video if you prefer that:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=rl6z7DD2-vg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDNnNmk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/rl6z7DD2-vg/0.jpg" alt="Build Cross-Platform Native Mobile Apps using Java/Kotlin for iOS, Android, Desktop &amp;amp; Web"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-note"&gt;
  &lt;/a&gt;
  Final Note
&lt;/h2&gt;

&lt;p&gt;Everything I wrote about is open source in our github project where we discuss a lot more. If you think we did a good job we could use your help in &lt;a href="//github.com/codenameone/CodenameOne/"&gt;starring&lt;/a&gt; and promoting our work here.&lt;/p&gt;

&lt;p&gt;If you have any questions please follow the codenameone tag on stackoverflow and ask anything with that tag. I make an effort to answer everything I can.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>java</category>
      <category>opensource</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>WAO: How do you test software?</title>
      <author>Nathan Kallman</author>
      <pubDate>Tue, 18 May 2021 19:12:08 +0000</pubDate>
      <link>https://dev.to/kallmanation/wao-how-do-you-test-software-l9f</link>
      <guid>https://dev.to/kallmanation/wao-how-do-you-test-software-l9f</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@michalmatlon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michal Matlon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/wrong-answer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrong-answers-only"&gt;
  &lt;/a&gt;
  Wrong Answers Only
&lt;/h1&gt;

&lt;p&gt;How do you test your software?&lt;/p&gt;




&lt;p&gt;Comment your wrong answer!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>wronganswersonly</category>
    </item>
    <item>
      <title>How to configure Nginx configuration file in ubuntu for localhost port forwarding</title>
      <author>Avinash Sharma</author>
      <pubDate>Tue, 18 May 2021 19:12:07 +0000</pubDate>
      <link>https://dev.to/avi9360/how-to-configure-nginx-configuration-file-in-ubuntu-for-localhost-port-forwarding-1hlj</link>
      <guid>https://dev.to/avi9360/how-to-configure-nginx-configuration-file-in-ubuntu-for-localhost-port-forwarding-1hlj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#-raw-first-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;First&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd &lt;/span&gt;etc/nginx/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes you to the root dir of the Nginx server&lt;br&gt;
then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sites-available
vim YourSiteName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;server &lt;span class="p"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;3000&lt;/span&gt; default_server;
        listen &lt;span class="p"&gt;[::]:&lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt; default_server;

        root &lt;span class="sr"&gt;/var/&lt;/span&gt;www/html;
        &lt;span class="nb"&gt;index&lt;/span&gt; &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;html &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;htm &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;nginx&lt;span class="p"&gt;-&lt;/span&gt;debian&lt;span class="p"&gt;.&lt;/span&gt;html;

        server_name _;

        location / &lt;span class="p"&gt;{&lt;/span&gt;
                try_files $uri $uri/ &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save and exit from the vim use this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, We want to update the sites-enabled dir&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd &lt;/span&gt;sites-enabled/
vim YourSiteName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;server &lt;span class="p"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;3000&lt;/span&gt; default_server;
        listen &lt;span class="p"&gt;[::]:&lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt; default_server;

        root &lt;span class="sr"&gt;/var/&lt;/span&gt;www/html;
        &lt;span class="nb"&gt;index&lt;/span&gt; &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;html &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;htm &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;nginx&lt;span class="p"&gt;-&lt;/span&gt;debian&lt;span class="p"&gt;.&lt;/span&gt;html;

        server_name _;

        location / &lt;span class="p"&gt;{&lt;/span&gt;
                try_files $uri $uri/ &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Rur your project/application and forward the port.&lt;br&gt;
In the given example the defeat port is 3000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd
cd &lt;/span&gt;yourProject 
npx http-server &lt;span class="nt"&gt;-p&lt;/span&gt; 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out more on in-depth guide through &lt;a href="https://avinash-sharma.com"&gt;Nginx&lt;/a&gt; The Nginx is a reverse proxy that enables the user to host a static and dynamic website &lt;/p&gt;

</description>
      <category>nginx</category>
      <category>node</category>
      <category>docker</category>
    </item>
    <item>
      <title>Load-balancing a gRPC service using Docker</title>
      <author>Anvil Engineering</author>
      <pubDate>Tue, 18 May 2021 19:01:34 +0000</pubDate>
      <link>https://dev.to/useanvil/load-balancing-a-grpc-service-using-docker-2dfe</link>
      <guid>https://dev.to/useanvil/load-balancing-a-grpc-service-using-docker-2dfe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#night-sweats"&gt;
  &lt;/a&gt;
  Night sweats
&lt;/h2&gt;

&lt;p&gt;It’s sometime after midnight and you toss and turn. In your slumber, you are dreaming about getting a Slack alert that your production app is on fire from a random burst of traffic. After further inspection, you notice that one of your services seems to be having issues. You suspect this is due to some backpressure being created by read/write contentions in a shared queue... or any of a million other things. Every second spent trying to get your staging environment or PR deployment running with repro scenarios is a potential second of downtime for your service.&lt;/p&gt;

&lt;p&gt;Gasp! You wake up. Now you get to thinking: 🎶Wouldn’t it be nice🎶 if you could quickly bring up a few instances of your microservice locally and try some suspect edge cases out?&lt;/p&gt;

&lt;p&gt;Luckily, there is a quick and easy way to get set up to extend your &lt;code&gt;docker-compose.yml&lt;/code&gt; with minimal impact to your workflow, allowing you to scale your services and load balance gRPC requests.&lt;/p&gt;

&lt;p&gt;In this post, we will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to use &lt;code&gt;docker-compose&lt;/code&gt; to scale a gRPC service&lt;/li&gt;
&lt;li&gt;how to use NGINX as a gRPC proxy and load-balancer&lt;/li&gt;
&lt;li&gt;how to inspect your running containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;While using RESTful APIs is a great way to expose services externally in a human readable way, there are a number of reasons why this may not be the best option for your internal services. One alternative is to use Remote Procedure Calls (&lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;) for this inter-service communication. Some advantages of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you define your message format and service calls using Protocol Buffers, which serve as contracts between clients and servers&lt;/li&gt;
&lt;li&gt;binary message format optimized to reduce bandwidth&lt;/li&gt;
&lt;li&gt;leverages modern HTTP2 for communication&lt;/li&gt;
&lt;li&gt;supports bi-directional streaming connections&lt;/li&gt;
&lt;li&gt;both clients and servers have the perk of interoperability across languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this seems like something that would suit your needs, here’s a helpful resource which provides great &lt;a href="https://grpc.io/docs/languages/"&gt;walkthroughs&lt;/a&gt; of setting up a client and server in several languages. &lt;br&gt;
For this post we’ll be using Node.js by extending a starter example from the &lt;a href="https://github.com/grpc/grpc"&gt;gRPC repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#is-this-for-me"&gt;
  &lt;/a&gt;
  Is this for me?
&lt;/h2&gt;

&lt;p&gt;So let’s say you already have a microservice using gRPC, or maybe you don’t and want to learn how to make one. You run a containerized workflow using Docker Compose for your dev environment. Maybe you are running many instances of your microservice in production already through Docker Swarm, Kubernetes, or some other orchestration tool.&lt;/p&gt;

&lt;p&gt;How would you go about replicating this configuration locally? Well ideally you could try to match up your local with what you have in production by using something like minikube or Docker Desktop with Kubernetes support (or others), but what if this is not an option or you need to get something up and running quickly to test out a new feature or hotfix? The rest of this post will cover how to get set up to do just that, providing examples along the way.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-sample-project"&gt;
  &lt;/a&gt;
  The sample project
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#make-a-grpc-service"&gt;
  &lt;/a&gt;
  Make a gRPC service
&lt;/h3&gt;

&lt;p&gt;If you already have a service that uses gRPC you can follow along on how to change your &lt;code&gt;docker-compose.yml&lt;/code&gt; to get up and running. If you don’t, you can use our provided &lt;a href="https://github.com/anvilco/grpc-lb-example"&gt;example&lt;/a&gt; for inspiration. Either way, you can go ahead and clone the repo to follow along:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/anvilco/grpc-lb-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-the-code"&gt;
  &lt;/a&gt;
  Running the code
&lt;/h3&gt;

&lt;p&gt;Everything you need is in our example repo and is run with three commands.&lt;/p&gt;

&lt;p&gt;Open three separate terminal windows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In one, start the server (this will build the images for you as well).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker compose up &lt;span class="nt"&gt;--scale&lt;/span&gt; &lt;span class="nv"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In another, monitor the container metrics.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker stats
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Once the servers and proxy are up, run the client in another terminal.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker compose run &lt;span class="nt"&gt;--rm&lt;/span&gt; grpc ./src/client.js &lt;span class="nt"&gt;--target&lt;/span&gt; nginx:50052 &lt;span class="nt"&gt;--iterations&lt;/span&gt; 10000 &lt;span class="nt"&gt;--batchSize&lt;/span&gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! Did you notice in the container metrics that all your servers were being used? That seems easy, but let’s take a look at how we did this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reviewing-the-project"&gt;
  &lt;/a&gt;
  Reviewing the project
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory structure
&lt;/h4&gt;

&lt;p&gt;The project directory structure breaks out a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src/&lt;/code&gt; - contains both the client and the server code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;protos/&lt;/code&gt; - the protocol buffer files used to define the gRPC messages and services&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;conf/&lt;/code&gt; -  the NGINX configuration file needed to proxy and LB the gRPC requests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker/&lt;/code&gt; - the Dockerfile used to run both the client and the server apps&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker-compose.yml&lt;/code&gt; - defines the docker services we will need&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; - defines the project dependencies for the client and the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_U-IiMq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42sebw2tiisoznzzku5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_U-IiMq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42sebw2tiisoznzzku5g.png" alt="project directory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dependencies for this project are in the &lt;code&gt;package.json&lt;/code&gt;. These allow us to ingest the service and message definition in the protobuf and run the server and the client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"grpc-lb-example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"@grpc/grpc-js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"@grpc/proto-loader"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^0.6.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"async"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"google-protobuf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.17.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"minimist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.2.5"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using a node image to install the dependencies and run the server or client code in a container. The Dockerfile for this looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:16
COPY . /home/node/
WORKDIR /home/node
RUN yarn install
USER node
ENTRYPOINT [ "node" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the client and server, we use the gRPC project &lt;a href="https://github.com/grpc/grpc/tree/master/examples/node/dynamic_codegen"&gt;Node.js example&lt;/a&gt; with some modifications to suit us. We will get into details on these later.&lt;/p&gt;

&lt;p&gt;The NGINX proxy config looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user nginx;
events {
 worker_connections 1000;
}
http {
 upstream grpc_server {
   server grpc:50051;
 }
 server {
   listen 50052 http2;
   location / {
     grpc_pass grpc://grpc_server;
   }
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main things that are happening here are that we are defining NGINX to listen on port 50052 and proxy this HTTP2 traffic to our gRPC server defined as &lt;code&gt;grpc_server&lt;/code&gt;. NGINX figures out that this &lt;code&gt;serviceName:port&lt;/code&gt; combo resolves to more than one instance through Docker DNS. By default, NGINX will round robin over these servers as the requests come in. There is a way to set the load-balancing behavior to do other things, which you can learn about more in the comments of the repo.&lt;/p&gt;

&lt;p&gt;We create three services through our &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;grpc&lt;/code&gt; - runs the server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nginx&lt;/code&gt; - runs the proxy to our &lt;code&gt;grpc&lt;/code&gt; service&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cAdvisor&lt;/code&gt; - gives us a GUI in the browser to inspect our containers
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.9'

services:
 grpc:
    image: grpc_lb
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./src:/home/node/src:ro
    ports:
      - "50051"
    command: ./src/server.js

  nginx:
    image: nginx:1.20.0
    container_name: nginx
    ports:
      - "50052:50052"
    depends_on:
      - grpc
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro

  cAdvisor:
    ...&amp;lt;leaving out for brevity&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scaling-your-service"&gt;
  &lt;/a&gt;
  Scaling your service
&lt;/h4&gt;

&lt;p&gt;This section is especially important if you already have a gRPC service and are trying to replicate the functionality from this example repo. There are a few notable things that need to happen in your &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let your containers grow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure you remove any &lt;code&gt;container_name&lt;/code&gt; from a service you want to scale, otherwise you will get a warning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7VZGsHpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/typm7mb6q0uyvdyq9b8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VZGsHpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/typm7mb6q0uyvdyq9b8q.png" alt="unique container name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is important because docker will need to name your containers individually when you want to have more than one of them running.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t port clash&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need to make sure that if you are mapping ports, you use the correct format. The standard host port mapping in short syntax is &lt;code&gt;HOST:CONTAINER&lt;/code&gt; which will lead to port clashes when you attempt to spin up more than one container. We will use ephemeral host ports instead.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ports:
     - "50051:50051"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ports:
     - "50051"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing it this way, Docker will auto-”magic”-ly grab unused ports from the host to map to the container and you won’t know what these are ahead of time. You can see what they ended up being after you bring your service up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mcw1xEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrozmg86oheuv7umrish.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mcw1xEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrozmg86oheuv7umrish.png" alt="ephemeral ports"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get the proxy hooked up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;nginx&lt;/code&gt; service in &lt;code&gt;docker-compose.yml&lt;/code&gt; plus the &lt;code&gt;nginx.conf&lt;/code&gt; should be all you need here. Just make sure that you replace the &lt;code&gt;grpc:50051&lt;/code&gt; with your service’s name and port if it is different from the example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bring it up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After working through the things outlined above, to start your proxy and service up with a certain number of instances you just need to pass an additional argument &lt;code&gt;--scale &amp;lt;serviceName&amp;gt;:&amp;lt;number of instances&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;--scale&lt;/span&gt; &lt;span class="nv"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally this would require us to first spin up the scaled instances, check what ports get used, and add those ports to a connection pool list for our client. But we can take advantage of both NGINX proxy and Docker’s built-in DNS to reference the &lt;code&gt;serviceName:port&lt;/code&gt; to get both DNS and load balancing to all the containers for that service. Yay!&lt;/p&gt;

&lt;p&gt;If all is working, you will see logs from &lt;code&gt;nginx&lt;/code&gt; service when you run the client:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9-6eRTTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70jj9ny9ev7j14t06clh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9-6eRTTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70jj9ny9ev7j14t06clh.png" alt="nginx logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-highlights-about-the-example-code"&gt;
  &lt;/a&gt;
  Some highlights about the example code
&lt;/h4&gt;

&lt;p&gt;Let’s call out some things we did in the example code that may be important for you. A good bit of syntax was changed to align with our own preferences, so here we mention the actual functionality changes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is mostly the same as the original example except that we added a random ID to attach to each server so we could see in the reponses. We also added an additional service call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* Create a random ID for each server
*/&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// New service call&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayGoodbye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;See you next time &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; from &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;helloworld.proto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we added another service and renamed the messages slightly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight protobuf"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The service definitions.&lt;/span&gt;
&lt;span class="kd"&gt;service&lt;/span&gt; &lt;span class="n"&gt;Greeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;rpc&lt;/span&gt; &lt;span class="n"&gt;SayHello&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
 &lt;span class="k"&gt;rpc&lt;/span&gt; &lt;span class="n"&gt;SayGoodbye&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;client.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is where we changed a lot of things. In broad strokes we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Collect the unique serverIDs that respond to us to log after all requests.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serversVisited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;serversVisited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serversVisited&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serversVisited&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Promisify the client function calls to let us &lt;code&gt;await&lt;/code&gt; them and avoid callback hell.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sayGoodbye&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayGoodbye&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Perform batching so we send off a chunk of requests at a time, delay for some time, then second another chunk off until we burn through all our desired iterations.

&lt;ul&gt;
&lt;li&gt;Here you can play with the &lt;code&gt;batchSize&lt;/code&gt; and &lt;code&gt;iterations&lt;/code&gt; arguments to test out where your service blows up in latency, throughput, or anything else you are monitoring like CPU or memory utilization.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// Handles the batching behavior we want&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberOfBatchesToRun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;batchSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;timesSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nx"&gt;numberOfBatchesToRun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="c1"&gt;// function to run for `numberOfBatchesToRun` times in series&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;batchSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fnToRunInBatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="c1"&gt;// function to run after all our requests are done&lt;/span&gt;
   &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serversVisited&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serversVisited&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inspecting-containers"&gt;
  &lt;/a&gt;
  Inspecting containers
&lt;/h3&gt;

&lt;p&gt;You can use the handy command &lt;code&gt;docker stats&lt;/code&gt; to get a view in your terminal of your containers. This is a nice and quick way to see the running containers’ CPU, memory, and network utilization, but it shows you these live with no history view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSrOR2vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c4jdq033ulxx1wdsh5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSrOR2vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c4jdq033ulxx1wdsh5h.png" alt="docker stats view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, we provide a service in the &lt;code&gt;docker-compose.yml&lt;/code&gt; that spins up a container running &lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt;, which offers a GUI around these same useful metrics with user-friendly graphs.&lt;br&gt;
If you would rather run this as a one off container instead of a service, remove the service &lt;code&gt;cAdvisor&lt;/code&gt; and run this command in another terminal session instead (tested on macOS):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/:/rootfs:ro &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/docker.sock:/var/run/docker.sock:ro &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/sys:/sys:ro &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/docker/:/var/lib/docker:ro &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/disk/:/dev/disk:ro &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--publish&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3003:8080 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--detach&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cadvisor &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--privileged&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--device&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/kmsg &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--userns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;host &lt;span class="se"&gt;\&lt;/span&gt;
gcr.io/cadvisor/cadvisor:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open a browser and go to &lt;code&gt;http://localhost:3003/docker/&lt;/code&gt; to see the list of containers. It should look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZVZkfTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5vh2gg0uwwxz2ougguk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZVZkfTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5vh2gg0uwwxz2ougguk.png" alt="cadvisor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a view of all four of the instances of my &lt;code&gt;grpc&lt;/code&gt; service in action. You can see they all share the load during the client requests. Without load-balancing, only a single instance would get all the traffic, bummer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Mqm_dbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi6z1d5nib36lg59kfaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Mqm_dbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi6z1d5nib36lg59kfaz.png" alt="cpu per core"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watching for errors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now may be a good time for you to start tweaking the arguments to your client and seeing how this impacts your service. If you end up overwhelming it, you will start to see things like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFWlgYFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hntib2vw83awuwvid3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFWlgYFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hntib2vw83awuwvid3w.png" alt="grpc client error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is when you know to start honing in on problem areas depending on what types of errors you are seeing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this post we have covered how to use Docker Compose to scale a service locally. This allows us to leverage NGINX as a proxy with load-balancing capabilities and Docker’s own DNS to run multiple instances of a gRPC service. We also looked at how to inspect our running containers using &lt;code&gt;docker stats&lt;/code&gt; and &lt;code&gt;cAdvisor&lt;/code&gt;. No more night sweats for you!&lt;/p&gt;

&lt;p&gt;If you enjoyed this post and want to read more about a particular topic, like using Traefik instead of NGINX, we’d love to hear from you! Let us know at &lt;a href="//mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>javascript</category>
      <category>googlecloud</category>
      <category>nginx</category>
    </item>
    <item>
      <title>An Effective Strategy To Learn Vue.js In Less Than Seven Days</title>
      <author>Roberto Hernandez</author>
      <pubDate>Tue, 18 May 2021 18:21:25 +0000</pubDate>
      <link>https://dev.to/blarzhernandez/an-effective-strategy-to-learn-vue-js-in-less-than-seven-days-4dp6</link>
      <guid>https://dev.to/blarzhernandez/an-effective-strategy-to-learn-vue-js-in-less-than-seven-days-4dp6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#no-bs-here-the-action-plan-and-strategy-i-followed-to-achieve%C2%A0it"&gt;
  &lt;/a&gt;
  No BS. Here the action plan and strategy I followed to achieve it
&lt;/h2&gt;

&lt;p&gt;Learning &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; in less than seven days was one of my recent challenges. At first, I was skeptical about if I was going to able to achieve it.&lt;br&gt;
Before following the next pragmatic methodology to learn Vue.js that we are going to reveal throughout this post I have I wrong believe.&lt;/p&gt;

&lt;p&gt;I thought that those who are knowledgeable in different areas were born with a special power. I was completely wrong.&lt;/p&gt;

&lt;p&gt;As someone said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Everything is difficult until you know how to do it."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After I finished university and obtained a master's degree in Computer Science, I dug into the self-taught journey.&lt;/p&gt;

&lt;p&gt;Over this journey, I realized that the difference between super learners and others is basically the way both learn.&lt;/p&gt;

&lt;p&gt;I knew nothing about building a learning map based on your personal needs and even less about how to identify what drives me (if it is an internal or external force).&lt;/p&gt;

&lt;p&gt;As cliche as it sounds, setting the right mindset plays a big role in achieving your goal in less time and effort.&lt;br&gt;
If we are now jumping on the technical and explicit things related to Vue.js, there will be a few crucial things to consider.&lt;/p&gt;

&lt;p&gt;Choosing the official documentation and a video course format will save you a lot of time, so you can get familiar with the main concepts faster.&lt;br&gt;
Anyway, let's jump to the exact action plan I followed to learn Vue.js in less than seven days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt; This is just a guide to give you a list of key factors to succeed while learning Vue.js.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The outcome might vary depending on different factors like your level of experience (in this case, mainly with JavaScript, HTML, and CSS). In my case, I learned the Vue.js fundamentals and got a decent code velocity, but more complex concepts were digested as long I continued developing Vue.js projects.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There two crucial stages you need to focus on if you want to learn anything faster.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#planning-and-strategy%C2%A0stage"&gt;
  &lt;/a&gt;
  Planning and Strategy Stage
&lt;/h1&gt;

&lt;p&gt;The plan and the strategy you're going to stick to will play a big role in how fast you can grasp all Vue.js-related concepts and elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-a-learning%C2%A0map"&gt;
  &lt;/a&gt;
  Build a learning map
&lt;/h2&gt;

&lt;p&gt;Picking a course and going straight into it is one of the common mistakes we make when learning something new.&lt;/p&gt;

&lt;p&gt;Do you want to fix that? So then start by building a learning map. It will help you to get an understanding of all the things you are trying to learn.&lt;/p&gt;

&lt;p&gt;Simply put, it is a personalized guide based on your own needs.&lt;/p&gt;

&lt;p&gt;OK, all of this sounds good, but how do I really build a learning map? No worries, let's jump to it right now.&lt;/p&gt;

&lt;p&gt;To build a learning map to learn Vue.js, there are three main things you have to consider so you can boost your learning speed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-what-drives-you-to%C2%A0learn"&gt;
  &lt;/a&gt;
  1. What drives you to learn?
&lt;/h3&gt;

&lt;p&gt;The first thing to do to build a learning map is to be completely honest about what drives you to learn. Is this an internal or external force?&lt;/p&gt;

&lt;p&gt;If this is an internal force, that means you have a genuine passion for the frontend and you are probably fully focused on mastering every detail of the Vue.js framework.&lt;/p&gt;

&lt;p&gt;An external motivation means you are learning it because the company needs you to learn it for an incoming project or because it is a trending and on-demand framework and you want to get on that train.&lt;/p&gt;

&lt;p&gt;Yet you are not interested enough in learning it.&lt;/p&gt;

&lt;p&gt;Why is it so crucial to know the type of motivation?&lt;br&gt;
That's simple. Because there might be a few sections or things that are irrelevant for the type of motivation, so you can skip them for later.&lt;/p&gt;

&lt;p&gt;With a clear idea of what drives you to learn, you can now devote your time and energy to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-build-a-learning-structure"&gt;
  &lt;/a&gt;
  2. Build a learning structure
&lt;/h3&gt;

&lt;p&gt;The idea behind building a learning structure is to find the fastest route to grasp a topic. By doing this, you will speed up your understanding of how Vue.js works and all concepts involved in it.&lt;/p&gt;

&lt;p&gt;There are two things you need to consider when building a learning structure: concepts and facts.&lt;/p&gt;

&lt;p&gt;Concepts are all the fundamentals and principles about Vue.js you need to understand, whereas a fact is all the truthful things you must remember about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concepts-and-facts-to-learn-about%C2%A0vuejs"&gt;
  &lt;/a&gt;
  Concepts and facts to learn about Vue.js
&lt;/h3&gt;

&lt;p&gt;What is the right version to learn (as of this writing)? Vue 2 or 3?&lt;/p&gt;

&lt;p&gt;What is a common/popular tech stack of an app based on Vue.js?&lt;br&gt;
Get familiar with the most common and used Vue.js concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#facts-and%C2%A0dilemmas"&gt;
  &lt;/a&gt;
  Facts and dilemmas
&lt;/h3&gt;

&lt;p&gt;Let's start out by talking about a few things you will probably stumble upon just after you start learning the Vue.js ecosystem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-right-vue-version-to%C2%A0learn"&gt;
  &lt;/a&gt;
  What is the right Vue version to learn?
&lt;/h3&gt;

&lt;p&gt;When I was starting out learning Vue.js, this was a question that quickly came ups so you might have the same dilemma too.&lt;/p&gt;

&lt;p&gt;Research and dive into it a little bit without worrying too much. The idea is to be clear why you're choosing either version 2 or 3.&lt;/p&gt;

&lt;p&gt;I suggest you just make a comparison at a high level. For instance, the following Reddit threads will give you insight into the difference between both versions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/vuejs/comments/g1v72x/start_with_vue_3_or_learn_vue_2_first/"&gt;Learn Vue 2 or 3?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.reddit.com/r/vuejs/comments/hx0bh1/im_currently_learning_vue_2_and_ive_heard_vue_3/"&gt;Should I learn Vue 2 or 3&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-commonpopular-tech-stack-of-an-app-based-on%C2%A0vuejs"&gt;
  &lt;/a&gt;
  What is a common/popular tech stack of an app based on Vue.js?
&lt;/h3&gt;

&lt;p&gt;Knowing what to learn is crucial to boost your learning speed.&lt;br&gt;
You need to have an idea of what is a common tech stack when building Vue.js apps so you can devote time and energy to those specific elements.&lt;/p&gt;

&lt;p&gt;Here is a common Vue.js stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Framework: Vue 2/3&lt;/li&gt;
&lt;li&gt;Routing: vue-router&lt;/li&gt;
&lt;li&gt;Bundler: WebPack&lt;/li&gt;
&lt;li&gt;UI kit/framework: Element UI, Vuetify.&lt;/li&gt;
&lt;li&gt;State management: VueX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#common-concepts"&gt;
  &lt;/a&gt;
  Common concepts
&lt;/h3&gt;

&lt;p&gt;Now that you have a better understanding of the right Vue.js version and the stack you want to focus on, it is time to jump to the fundamentals, concepts, and unique things that belong to Vue.js.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Vue instance: Every Vue.js app starts by creating a new &lt;code&gt;Vue&lt;/code&gt; instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data and methods: When a &lt;code&gt;Vue&lt;/code&gt; instance is created, it adds all properties found in its &lt;code&gt;data object to&lt;/code&gt;Vue's reactivity` system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instance Lifecycle Hooks (different than lifecycle Hooks): This is a series of steps that run whenever the Vue instance is created ( &lt;code&gt;init, beforeCreate, created&lt;/code&gt;, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lifecycle hooks: Functions that give users the ability to add their own code at a specific stage ( &lt;code&gt;mounted, updated, destroyed&lt;/code&gt;, etc. ).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Template syntax: Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance's data. The template syntax includes interpolations, directives, and shorthand (e.g. &lt;code&gt;v-bind, v-on&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Computed properties: Allow you to handle complex logic and operations. They are calculations that will be cached based on their dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watchers: Allow you to perform asynchronous or expensive operations in response to changing data. They allow you to track any property and react to any change on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class and style binding: Allow you to manipulate classes and inline style. You can pass data to apply specific classes or styles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conditional rendering: Vue.js allows you to condition whether or not to show a block, component, or element using different directives such as &lt;code&gt;v-if, v-else, v-show, and v-for&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Event handling: Listening to events from the DOM, event handlers, inline handlers, event modifiers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Form input binding: Use the v-model directive to create two-way data binding on form input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components Basics: Components are reusable Vue instances with a name like &lt;code&gt;&amp;lt;button-counter&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Passing data to child components with props: Props are custom attributes you can register on a component. Props passed down to a child component become properties on that child component.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These concepts are the most common or useful when starting with Vue.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-choose-the-right-resources"&gt;
  &lt;/a&gt;
  3. Choose the right resources
&lt;/h2&gt;

&lt;p&gt;By building a learning structure, you figured out the fastest route to learn Vue.js. Now it is time to research the right resources and methods other effective learners are using. As Scott Young, the author of the &lt;a href="https://www.scotthyoung.com/blog/ultralearning/"&gt;Ultralearning book&lt;/a&gt;, says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Spending one or two hours figuring out the right resources and 'how do people get good at this,' is a very useful investment."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#vuejs-official-guide-36%C2%A0hours"&gt;
  &lt;/a&gt;
  Vue.js official guide (~3–6 hours)
&lt;/h3&gt;

&lt;p&gt;I suggest you start off by reading the &lt;a href="https://vuejs.org/v2/guide/"&gt;Vue.js official documentation&lt;/a&gt;. Since it is your first time with Vue.js, you probably will not be able to grasp and digest all the information. No worries. That's fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-a-highly-rated-video-course-1015%C2%A0hours"&gt;
  &lt;/a&gt;
  Choose a highly rated video course (~10–15 hours)
&lt;/h3&gt;

&lt;p&gt;Again, at this point in your learning journey, you shouldn't worry about all the items in the course.&lt;/p&gt;

&lt;p&gt;A video course will help you to speed the learning process up. It will help you to bridge the understanding gap you had after you read the Vue.js official guide.&lt;/p&gt;

&lt;p&gt;The goal of the course is to understand the Vue.js fundamentals. It should take roughly 10–15 effective hours. While doing this, try to use the Pomodoro technique in order to avoid burnout.&lt;/p&gt;

&lt;p&gt;I suggest taking the following Vue.js courses. A few of them are free and others are quite cheap, so there are no excuses.&lt;/p&gt;

&lt;p&gt;Courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/vuejs-2-the-complete-guide/"&gt;Develop with VueJS 2 (Complete Vue.js Router and Vuex Course)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vuemastery.com/"&gt;Vue Mastery&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pluralsight.com/courses/vuejs-fundamentals"&gt;Vue.js Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#execution-stage"&gt;
  &lt;/a&gt;
  Execution Stage
&lt;/h1&gt;

&lt;p&gt;At this point, you have the right mindset, a learning map, and the right resources to crush the Vue.js roadmap.&lt;/p&gt;

&lt;p&gt;In order to grasp as much of Vue's world as possible, you need to follow a series of steps. The time to execute the plan has arrived.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Keep in mind that all the following steps are required from day 0 to day 7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#teach-it-to-yourself-or-to-a-child-part-of-the-feynman-technique"&gt;
  &lt;/a&gt;
  Teach it to yourself or to a child (part of the &lt;a href="https://medium.com/taking-note/learning-from-the-feynman-technique-5373014ad230"&gt;Feynman technique&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;If you can explain what you have learned in plain English, there is no doubt you have achieved two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You are clear about the topic and its elements. You can't explain what you don't understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You stored that knowledge in your long-term memory rather than in your working memory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For any confusing or unclear concepts, try to explain them to yourself or to a child without using jargon or dense vocabulary. I usually practice this with my &lt;a href="https://medium.com/better-code-and-life/how-to-explain-to-a-2-half-years-old-kid-what-is-a-promise-in-javascript-1c3c931ac23"&gt;four-year-old son&lt;/a&gt;. It is not easy at all. But when he is able to get an idea of what I am talking about, I understand that I grasped it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-live-on%C2%A0youtube"&gt;
  &lt;/a&gt;
  Go live on YouTube
&lt;/h3&gt;

&lt;p&gt;Really? No worries. You don't need to expose yourself - at least for now.&lt;/p&gt;

&lt;p&gt;Again, this is a matter of measuring how much you understand the topic you are learning. You don't need to go live on YouTube but live on private mode.&lt;/p&gt;

&lt;p&gt;Confused? Let me explain.&lt;/p&gt;

&lt;p&gt;Whenever I am learning something new, one effective thing I do is to record myself. I try to explain a confusing or complex topic and then see how well I did.&lt;/p&gt;

&lt;p&gt;I use YouTube for simplicity and quick access, but you can record yourself using your laptop's tools if you want or use whatever method you feel comfortable with. Check the screenshot below. I was recording how to know when to use a computed property and a watcher.&lt;/p&gt;

&lt;p&gt;I went live on YouTube but using private visibility. If you consider your explanation good enough, you can even publish it or just have it there for future access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nIo7D34Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A66E5bBqIK3rDvIK4rpUjjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nIo7D34Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A66E5bBqIK3rDvIK4rpUjjw.png" alt="Trying to explain when to use Vue.js computed properties and watchers. Screenshot by the author."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-down-what-you-have%C2%A0learned"&gt;
  &lt;/a&gt;
  Write down what you have learned
&lt;/h3&gt;

&lt;p&gt;You might not be a writer, but that doesn't mean you can't put your learning process on record and most importantly create the neural connections in your brain to store that knowledge in your long-term memory.&lt;/p&gt;

&lt;p&gt;Indeed, this article was the result of learning Vue.js. I documented the most important lessons, concepts, and elements of the process.&lt;/p&gt;

&lt;p&gt;That helped me to remember things easily.&lt;br&gt;
Blogging what you are learning will help in different areas, and it might end up becoming something meaningful to you at some point. That's what I went through - I am now a writer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-practice-practice"&gt;
  &lt;/a&gt;
  Practice, practice, practice
&lt;/h3&gt;

&lt;p&gt;This is so obvious. Once you have a better understanding of Vue's ecosystem, you should implement a project. I recommend starting from a basic one to a mid-level project.&lt;/p&gt;

&lt;p&gt;There's no silver bullet. You will need to practice over and over. That is part of our dev journey. We will never be prepared enough. We will need to re-learn and come back several times.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;Learning Vue.js in less than seven days was an amazing experience. As I outlined throughout this article, that doesn't mean I am the boss of Vue.js now.&lt;/p&gt;

&lt;p&gt;It means I grasped the relevant concepts and elements because I built a learning map that sped up my learning process.&lt;/p&gt;

&lt;p&gt;Determining if your motivation to learn is internal or external is a key factor to decide what resources to include and what you have to leave out.&lt;/p&gt;

&lt;p&gt;All the prior points are about the plan and strategy to follow. They will boost your learning process with Vue.js or any JS framework or topic you are learning.&lt;/p&gt;

&lt;p&gt;Yet the execution stage is what will help you to crush your learning process.&lt;/p&gt;

&lt;p&gt;When learning Vue.js, try to explain to yourself or to a child confusing or complex concepts without using dense vocabulary or jargon.&lt;/p&gt;

&lt;p&gt;Also, try to record yourself or write down what you have learned in plain English. When you force your brain to explain a concept in your own words, you create neural connections that help you to store it in your long-term memory.&lt;/p&gt;

&lt;p&gt;** Happy coding! **&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If this post turned out helpful share it to reach more devs. Also feel free to reach me on &lt;a href="//www.mullinstack.com"&gt;my blog&lt;/a&gt; and &lt;a href="https://medium.com/@blarz"&gt;Medium&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Less annoying CSS in React with CSS modules</title>
      <author>fawazsullia</author>
      <pubDate>Tue, 18 May 2021 18:15:10 +0000</pubDate>
      <link>https://dev.to/fawazsullia/less-annoying-css-in-react-with-css-modules-38kk</link>
      <guid>https://dev.to/fawazsullia/less-annoying-css-in-react-with-css-modules-38kk</guid>
      <description>&lt;p&gt;A fundamental problem with CSS is that it's globally scoped. &lt;/p&gt;

&lt;p&gt;So, if you have a number of components in your React app, you would have to think of unique classes to name your components.&lt;/p&gt;

&lt;p&gt;And the bigger your app gets, the harder.&lt;/p&gt;

&lt;p&gt;This is where CSS modules come in. &lt;/p&gt;

&lt;p&gt;CSS modules let you create CSS files that are locally scoped. &lt;/p&gt;

&lt;p&gt;Here's how you do it;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a CSS file with &lt;code&gt;.module.css&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;In your component, use &lt;code&gt;import * as anyName from 'relative path'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;And in yout jsx elements, use &lt;code&gt;className={anyName.nameofclass}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In your module.css file, use &lt;code&gt;.nameofclass&lt;/code&gt; to select the elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that, you can select child elements with .nameofclass element name as well (.container button)&lt;/p&gt;

&lt;p&gt;This way, you don't have to worry about thinking of unique names to name your class.&lt;/p&gt;

&lt;p&gt;If you found this useful, let me know in the comments. if there's a better way to CSS in react, drop a comment&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 18 May 2021 18:05:25 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1mnn</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1mnn</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-educational-purposes"&gt;
  &lt;/a&gt;
  For educational purposes 👀
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/hotpotatoc"&gt;@hotpotatoc&lt;/a&gt;
 made a clone of Twitter using VueJS as its frontend and Golang as its backend server. Super cool!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hotpotatoc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZO3z6fO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---J3HYwZV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386058/8ac55134-c938-4ce3-b00e-029f9ed03c44.jpg" alt="hotpotatoc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hotpotatoc/i-made-a-twitter-clone-with-vuejs-and-go-59jf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I made a Twitter Clone with VueJS and Go&lt;/h2&gt;
      &lt;h3&gt;Juan Christian ・ May 14 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#go-with-the-flow"&gt;
  &lt;/a&gt;
  Go with the flow
&lt;/h2&gt;

&lt;p&gt;— the git flow, that is. &lt;a class="mentioned-user" href="https://dev.to/theowlsden"&gt;@theowlsden&lt;/a&gt;
 reviews the basics of Git-flow and how it can help you in this article. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theowlsden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpaqbVBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i1FKrDD3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/603640/5e20119b-e2b7-43b5-a49b-c434f77c4340.jpg" alt="theowlsden image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theowlsden/git-flow-non-technical-intro-3ahh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git-flow, non-technical intro.&lt;/h2&gt;
      &lt;h3&gt;Shaquil Maria ・ May 11 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#detect-advise-fix"&gt;
  &lt;/a&gt;
  Detect, advise, fix
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/opinionatedpie"&gt;@opinionatedpie&lt;/a&gt;
 has rounded up five tools that help you do all three when it comes to security vulnerabilities 🔥 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/opinionatedpie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzmuzWwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3eavZjGF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/623404/139b8342-1247-452a-84cb-4444b371aede.jpg" alt="opinionatedpie image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/opinionatedpie/5-developer-tools-for-detecting-and-fixing-security-vulnerabilities-h1j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 developer tools for detecting and fixing security vulnerabilities&lt;/h2&gt;
      &lt;h3&gt;ingrid.e ・ May 12 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tooling&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#with-great-power-comes-great-complexity"&gt;
  &lt;/a&gt;
  With great power comes great... complexity
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aveuiller"&gt;@aveuiller&lt;/a&gt;
, our head Kubernetes chef, is here to help us wade through the (at times, murky) waters of this powerful orchestrator. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aveuiller" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYn4usij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Gc0lXF1S--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/611814/c894717f-b91b-48a0-a003-d2fa070edc1e.jpeg" alt="aveuiller image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aveuiller/kubernetes-apprentice-cookbook-4j6h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Kubernetes: Apprentice Cookbook&lt;/h2&gt;
      &lt;h3&gt;Antoine Veuiller ・ May 11 ・ 17 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#open-source-culture-and-communication"&gt;
  &lt;/a&gt;
  Open source culture and communication
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pragativerma18"&gt;@pragativerma18&lt;/a&gt;
's informative post explains a handful of open-source nuances with the goal of helping us arrive at a deeper understanding of the community. Love it!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pragativerma18" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_m4K1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JR-0Kc_W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/242611/68277387-0fa0-4c79-ad6f-4be3ddc940b7.jpeg" alt="pragativerma18 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pragativerma18/open-source-best-practices-902" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Open Source Best Practices&lt;/h2&gt;
      &lt;h3&gt;Pragati Verma ・ May 15 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#on-your-markdown-get-set-go"&gt;
  &lt;/a&gt;
  On your mark(down), get set... go!
&lt;/h2&gt;

&lt;p&gt;Check out &lt;a class="mentioned-user" href="https://dev.to/alagrede"&gt;@alagrede&lt;/a&gt;
's awesome .md-based note-taking app &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alagrede" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7S1Xj1Iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jFtj15DP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/47181/032821dc-6e13-4359-94f8-9596b45fb7ad.jpg" alt="alagrede image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alagrede/dev-tool-a-markdown-editor-for-developers-1j13" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dev tool: A Markdown editor for developers 🔥&lt;/h2&gt;
      &lt;h3&gt;Anthony Lagrede ・ May 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-ethereum-guide-for-devs-that-youve-been-waiting-for"&gt;
  &lt;/a&gt;
  The Ethereum guide for DEVs that you've been waiting for
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;
 to the rescue.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/how-to-get-into-ethereum-crypto-web3-as-a-developer-9l6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Get Into Ethereum | Crypto | Web3 as a Developer&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit ・ May 12 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cryptocurrency&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Is it worth it to cross-post on Medium in 2021?</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Tue, 18 May 2021 18:01:39 +0000</pubDate>
      <link>https://dev.to/jmfayard/is-it-worth-it-to-cross-post-on-medium-in-2021-5dn4</link>
      <guid>https://dev.to/jmfayard/is-it-worth-it-to-cross-post-on-medium-in-2021-5dn4</guid>
      <description>&lt;p&gt;Maybe, sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-writing"&gt;
  &lt;/a&gt;
  The writing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👍🏼 Copy-pasting from DEV basically works&lt;/li&gt;
&lt;li&gt;🤔 Except when you use DEV liquid tags, but that's understandable&lt;/li&gt;
&lt;li&gt;👎🏻👎🏻 But Medium still does not support code snippets in 2021 and that's super lame. Instead of your article being a single source of truth, you have your article plus ten outside gist&lt;/li&gt;
&lt;li&gt;🤔 Remember to use the option &lt;strong&gt;Customize Canonical Link&lt;/strong&gt; to an URL on your personal website&lt;/li&gt;
&lt;li&gt;😃 Don't have a personal website yet? The wonderful people at DEV/forem have partnered with Stackbit. I use it for &lt;a href="https://jmfayard.dev/"&gt;https://jmfayard.dev/&lt;/a&gt; with great joy. See &lt;a href="https://dev.to/connecting-with-stackbit"&gt;https://dev.to/connecting-with-stackbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👎🏻👎🏻 Medium uses a &lt;a href="https://www.darkpatterns.org/"&gt;Dark Design Pattern&lt;/a&gt; to hide the &lt;strong&gt;Customize Canonical Link&lt;/strong&gt; option. It's hidden in a submenu &lt;strong&gt;....&lt;/strong&gt;, then the 10th entry called &lt;strong&gt;More settings&lt;/strong&gt;, then you have to scroll completely to the bottom, wait it's still hidden behind &lt;strong&gt;Advanced Settings&lt;/strong&gt;, then it's still hidden behind a checkbox, and only then do you find &lt;strong&gt;Customize Canonical Link&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-paywall"&gt;
  &lt;/a&gt;
  The paywall
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;👎🏻 As a reader, I hate the Medium Paywall&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 But that would be OK if it actually gives writers sustainable income. There is a paywall to access the Financial Times articles, and it segregates between users who don't want to pay and hate it, and users who get lots of value from the FT and pay. And that's OK.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👍🏼 And sometimes, you get real money on Medium. My article &lt;a href="https://betterprogramming.pub/what-is-your-current-salary-is-a-red-flag-that-you-dont-want-to-work-there-8a4f19a91bf"&gt;“What’s Your Current Salary?” Is a Red Flag That You Don’t Want to Work There&lt;/a&gt; got 21K view and I earned with it $923.36 to this day&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 But wait, there is a catch, it happened only once, and I have basically given up retrying&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻 And that's because on Medium, &lt;strong&gt;Publications have all the power&lt;/strong&gt;. If you publish on your own name, unless you are a celebrity, which I assume lots of my readers are, you will get few views and peanuts in terms of dollar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 Isn't that normal if we follow the analogy of the FT paywall? Well no, let's be real here, Medium publications will not play the role of improving your writing the way a professional editor with a set of rules would. It's just one or few guys (probably not lots of women) who earn lots of followers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻 But actually publications don't earn the followers either, they just rent it to Medium. My friend at &lt;a href="https://blog.kotlin-academy.com/"&gt;https://blog.kotlin-academy.com/&lt;/a&gt; would like to move away from Medium, but it's only possible if you don't care about loosing all your readers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻 And I really disliked the experience of submitting to publications. You put lots of work in your content, you click submit, a random number of days later you get a message "&lt;em&gt;Thank you, but I will pass on this one&lt;/em&gt;".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;😃 On the other hand, if the publication owner is a friend, I would cross post to his publication.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 I'm not sure readers get a ton of value from the content behind the paywall anyway. For example, my article &lt;a href="https://dev.to/jmfayard/what-is-your-current-salary-is-a-red-flag-that-you-don-t-want-to-work-here-3aji"&gt;&lt;em&gt;What's Your Current Salary&lt;/em&gt; is available freely on DEV&lt;/a&gt;, and intentionally so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻👎🏻 Medium uses another &lt;a href="https://www.darkpatterns.org/"&gt;Dark Design Pattern&lt;/a&gt; to confuse people into using the paywall whether they want it or not. I have just published an article today under my company account &lt;a href="https://medium.zenika.com/15-command-line-tools-which-spark-joy-in-your-terminal-ec420d770bcc"&gt;https://medium.zenika.com/15-command-line-tools-which-spark-joy-in-your-terminal-ec420d770bcc&lt;/a&gt; It's part of the paywall, not because we chose to because even after following the help page, neither my colleague in charge of the publication nor I can find how to deactivate it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Cross-posting to Medium can be interesting for reach and sometimes for money, but there are big cons as well.&lt;/p&gt;

&lt;p&gt;In general, it's not an enjoyable experience.&lt;/p&gt;

&lt;p&gt;If you work at Medium, I think you should protest the lack of code snippets and even more against the dark patterns designed to screw the writers.&lt;/p&gt;

</description>
      <category>meta</category>
      <category>writing</category>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
    <item>
      <title>CI for Dotnet project with GitHub Action</title>
      <author>ohalay</author>
      <pubDate>Tue, 18 May 2021 17:59:00 +0000</pubDate>
      <link>https://dev.to/ohalay/ci-for-dotnet-project-with-github-action-5hmp</link>
      <guid>https://dev.to/ohalay/ci-for-dotnet-project-with-github-action-5hmp</guid>
      <description>&lt;p&gt;Я розкажу як можна автоматизувати роботу використовуючи можливості GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-ci-for-dotnet"&gt;
  &lt;/a&gt;
  Implement CI for dotnet
&lt;/h2&gt;

&lt;p&gt;Для створення СI ми будемо використовувати функціональність &lt;a href="https://docs.github.com/en/actions/guides/building-and-testing-net"&gt;GitHub Actions&lt;/a&gt;. GitHub actions - надає можливість автоматизації процесів розробки. GitHub Actions оперує концепцією workflow, що є по-суті одиницею автоматизації. Workflow запускається подіями (push, pull_request, cron та інші). GitHub Actions, як і більшість CI систем використовує &lt;code&gt;.yml&lt;/code&gt; синтаксис для опису одиниць автоматизації. Є два способи як можна створити workflow: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вручну&lt;/li&gt;
&lt;li&gt;Безпосередньо з GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для створення CI необхідно вибрати свій репозиторій в GitHub перейти на вкладку &lt;strong&gt;Actions&lt;/strong&gt; далі &lt;strong&gt;New workflow&lt;/strong&gt; і обрати &lt;strong&gt;NET&lt;/strong&gt;. Після цього залишилось тільки зробити &lt;strong&gt;commit&lt;/strong&gt; обраного файлу.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Описана автоматизація запускається кожного разу коли ми робимо &lt;em&gt;pull_request&lt;/em&gt; чи &lt;em&gt;push&lt;/em&gt; в гілку &lt;em&gt;master&lt;/em&gt; і збирає наш проект потім запускає тести. Щоб трохи покращити наш процес GitHub має функцію &lt;strong&gt;Branch protection rule&lt;/strong&gt;, яка дозволяє налаштувати правила для наших pull_request. Для нас є цікавою опція &lt;strong&gt;Require status checks to pass before merging&lt;/strong&gt;, за допомогою якої можна заборонити &lt;strong&gt;merge&lt;/strong&gt; коли наш &lt;strong&gt;build workflow&lt;/strong&gt; виконався неуспішно.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apAL3X1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZiB2g5YuSajrVpjzwOCrpdvUK0p170YK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apAL3X1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZiB2g5YuSajrVpjzwOCrpdvUK0p170YK" alt="check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Якщо нам необхідно додати нову автоматизацію, то вона має знаходитися в папці &lt;code&gt;.github\workflows&lt;/code&gt;. І нашою вишенькою буде &lt;code&gt;badge&lt;/code&gt; який ми можемо додати до нашого репозиторія про результат виконання. Для цього необхідно  перейти на вкладку &lt;strong&gt;Actions&lt;/strong&gt; вибрати наш Action - &lt;strong&gt;Build&lt;/strong&gt; та в меню обрати &lt;strong&gt;Create status badge&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;В загальному досить зручний інструмент, зіткнувся тільки з однією проблемою, я створював тестовий &lt;code&gt;workflows&lt;/code&gt;, який я потім видалив з репозиторія, але він залишився у вкладці &lt;em&gt;Actions&lt;/em&gt;, щоб видалити його звідти необхідно видалити всі запуски цієї одиниці автоматизації.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#add-sonar%D1%81loud"&gt;
  &lt;/a&gt;
  Add Sonarсloud
&lt;/h2&gt;

&lt;p&gt;Sonarсloud - статичний аналізатор коду, що надає інформацію про покриття тестами, дублювання, підтримуваність та безпеку коду. Він має хорошу інтеграцію з GitHub. Для того щоб додати наш репозиторій до &lt;em&gt;Sonarсloud&lt;/em&gt; необхідно зробити наступні кроки:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Логуємось в &lt;a href="https://sonarcloud.io/"&gt;https://sonarcloud.io/&lt;/a&gt; використовуючи &lt;em&gt;GitHub&lt;/em&gt; і обираємо &lt;em&gt;репозиторій&lt;/em&gt; який ми хочемо проаналізувати.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dmP6Kg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uozxkh9ebp6ija1r7vq1.PNG" alt="sonar"&gt;
&lt;/li&gt;
&lt;li&gt;Вибираємо CI &lt;em&gt;GitHab Actions&lt;/em&gt; і записуємо &lt;code&gt;SONAR_TOKEN&lt;/code&gt; в &lt;em&gt;GitHub Secrets&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-onz1Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7d1ti8bnjcsy9254p0i.PNG" alt="secret"&gt;
&lt;/li&gt;
&lt;li&gt;Далі вибираємо &lt;code&gt;NET&lt;/code&gt; і копіюємо згенерований &lt;code&gt;.yml&lt;/code&gt; до нашого репозиторію. Необхідно тільки замінити &lt;code&gt;&amp;lt;your clean build command&amp;gt;&lt;/code&gt; на наші команди для побудови &lt;code&gt;dotnet build&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Аналізатор коду готовий до роботи і можна використовувати &lt;code&gt;badge&lt;/code&gt; для метрик. Щоб додати покриття тестами необхідно згенерувати результат запуску тестів в зрозумілому для &lt;em&gt;sonarcloud&lt;/em&gt; форматі це наприклад &lt;strong&gt;opencover&lt;/strong&gt;. Для цього необхідно додати конфігурацію для opencover&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;run: |
  .\.sonar\scanner\dotnet-sonarscanner begin /k:"ohalay_TestSonarCloud" /o:"ohalay" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.language="cs" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
  dotnet build
  dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
  .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Даний інструмент хороший тим, що дозволяє знайти проблеми в коді, що вже в нашому репозиторії та в коді, який ще не потрапив в наш репозиторій (&lt;em&gt;pull_request&lt;/em&gt;). Також працюючи з sonarcloud наткнувся на проблему, коли тести виконуються не успішно, а сам запуск одиниці автоматизації залишається успішним, щоб це виправити необхідно перенести запуск тестів в окремий крок.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#add-dependabot"&gt;
  &lt;/a&gt;
  Add Dependabot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically"&gt;Dependabot&lt;/a&gt; - функціонал GitHub який автоматично моніторить і оновлює версії пакетів створюючи &lt;em&gt;pull_request&lt;/em&gt; для цього. Щоб додати цей функціонал до реопзиторія необхідно перейти на вкладку &lt;strong&gt;Settings&lt;/strong&gt; вибрати &lt;strong&gt;Security &amp;amp; analysis&lt;/strong&gt; і ввімкнути &lt;strong&gt;Dependabot security updates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWMmCUrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq4l9tkq3172eookkeym.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWMmCUrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq4l9tkq3172eookkeym.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Після цього залишається тільки додати файл конфігурації до нашого репозиторія &lt;code&gt;.github/dependabot.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 2
updates:

  - package-ecosystem: "github-actions"
    directory: "/"
    target-branch: "master"
    schedule:
      interval: "daily"

  - package-ecosystem: "nuget"
    directory: "/"
    target-branch: "master"
    schedule:
      interval: "daily"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Зараз в нашому репозиторію версії &lt;code&gt;nuget&lt;/code&gt; та &lt;code&gt;github-actions&lt;/code&gt; пакетів оновлюються автоматично. Важливо є те, що &lt;code&gt;dependabot.yml&lt;/code&gt; обов'язково має знаходитись в &lt;em&gt;master&lt;/em&gt; гілці. І щоб &lt;em&gt;dependabot&lt;/em&gt; мав доступ завантажувати результати аналізу в &lt;em&gt;sonatcloud&lt;/em&gt;, то необхідно додати йому &lt;code&gt;SONAR_TOKEN&lt;/code&gt;. Також зіткнувся з проблемою, коли хотів налаштувати автоматичне оновлення пакетів лиши &lt;em&gt;minor&lt;/em&gt; версії, поки цей &lt;a href="https://github.com/dependabot/dependabot-core/issues/2219"&gt;функціонал ще в розробці&lt;/a&gt; єдиний варіант для кожного пакету вказати максимальну версію до якої можна оновлювати.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#add-codeql"&gt;
  &lt;/a&gt;
  Add CodeQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://securitylab.github.com/tools/codeql/"&gt;CodeQL&lt;/a&gt; - семантичний аналізатор коду, який дозволяє виявити потенційні вразливості в коді. Додати його можна перейшовши на вкладку &lt;strong&gt;Security&lt;/strong&gt; вибрати &lt;strong&gt;Code scanning alerts&lt;/strong&gt; і додати одиницю автоматизації для цього.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzXZIcYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktardzyeabcuupadvg3a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzXZIcYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktardzyeabcuupadvg3a.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Конфігурація виглядає наступним чином&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: CodeQL

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: github/codeql-action/init@v1
      with:
        languages: csharp
    - uses: github/codeql-action/autobuild@v1
    - uses: github/codeql-action/analyze@v1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Перевагою такого підходу є те що всі налаштування знаходяться в одному місці, в нашому репозиторії і таким чином їх зручно підтримувати.&lt;br&gt;
Трохи про ціни:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Actions - 2000 безкоштовних хвилин в місяць для приватних репозиторіїв з &lt;em&gt;free GitHub plan&lt;/em&gt; (публічні безкоштовно)&lt;/li&gt;
&lt;li&gt;SonarCloud -  безкоштовний для публічних проектів&lt;/li&gt;
&lt;li&gt;Dependabot - безкоштовний, зараз є частиною GitHub&lt;/li&gt;
&lt;li&gt;CodeQL - використовує хвилини з GitHub Actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Приклад GitHub проекту, який містить описану вище конфігурацію &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ohalay"&gt;
        ohalay
      &lt;/a&gt; / &lt;a href="https://github.com/ohalay/TestSonarCloud"&gt;
        TestSonarCloud
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Test SonarCloud&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ohalay/TestSonarCloud/actions/workflows/build.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PaEIElNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ohalay/TestSonarCloud/actions/workflows/build.yml/badge.svg" alt="Build"&gt;&lt;/a&gt;
&lt;a href="https://github.com/ohalay/TestSonarCloud/actions/workflows/codeql-analysis.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tx7nqvPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ohalay/TestSonarCloud/actions/workflows/codeql-analysis.yml/badge.svg" alt="CodeQL"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/60fa641d68392f7b6ec27edc15eadb257f99fe4dc05f06bec6c653d102c6c2a7/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d62756773" alt="Bugs"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a83a25398e9897b658ae21d93aaa212875fdd6e6fa8a1f90a98fe578ce10a741/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d636f64655f736d656c6c73" alt="Code Smells"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91614f860afad6b209cf33bd4dcd5633fe8636aeb3852a3f9cd53c32589de2b3/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d636f766572616765" alt="Coverage"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/50bf4cf05f59dc7a9158d1df8cdd434750e17f5995aac3ed0a520dcb378857a5/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d6475706c6963617465645f6c696e65735f64656e73697479" alt="Duplicated Lines (%)"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b34f2e9ad829efcad0649b9ed1d0e1ab82a9be875481c97a929e8b172444267f/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d6e636c6f63" alt="Lines of Code"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a92c3924a96027137a44d9132f23e4936d6e74fa681f3437ed147e0827fd2fa/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d7371616c655f726174696e67" alt="Maintainability Rating"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/10ee6b8f7c6ad87d068a09883a38c6083bff99dc03c40458b9c669ad66a9cb59/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d616c6572745f737461747573" alt="Quality Gate Status"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c63f26110f76d1628363dc504fe85244c383675eb43f8abb687c350dc7fe26c/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d72656c696162696c6974795f726174696e67" alt="Reliability Rating"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/00ec9decedfd44ec5de4b117de341a1ddebd229b39d5231772a52c94d2a456e5/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d73656375726974795f726174696e67" alt="Security Rating"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9de67c080af5d85fc265777a7e73eb7e4ca51d38ed83c24c08e0818bdd68aefb/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d7371616c655f696e646578" alt="Technical Debt"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c5d194e35562c7cfb3aed1b884ef19a77661a52a2e7c111c271758eb83ec996/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d76756c6e65726162696c6974696573" alt="Vulnerabilities"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simple API porject to test Github Action with SonarCloud&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ohalay/TestSonarCloud"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>dotnet</category>
      <category>ukrainian</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
