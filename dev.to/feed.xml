<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Webpack in 1 minute</title>
      <author>Rishabh Singh ‚ö°</author>
      <pubDate>Mon, 16 Aug 2021 20:21:24 +0000</pubDate>
      <link>https://dev.to/mindninjax/webpack-in-1-minute-140h</link>
      <guid>https://dev.to/mindninjax/webpack-in-1-minute-140h</guid>
      <description>&lt;p&gt;If you're a web developer, then it's likely that you've heard the term - Webpack. What is Webpack and how does it fit into modern web development?&lt;/p&gt;

&lt;p&gt;That's what you'll learn in a few minutes! Keep reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urNQBkTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5PpB0JEPdB30wER8_XWuIQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urNQBkTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5PpB0JEPdB30wER8_XWuIQ.jpeg" alt="https://miro.medium.com/max/1400/1*5PpB0JEPdB30wER8_XWuIQ.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In general, Webpack is a module bundler for JavaScript applications.&lt;/p&gt;

&lt;p&gt;Still unclear? I'll break it down for you!&lt;/p&gt;

&lt;p&gt;Web applications usually have many files, such as images, assets, dependencies, HTML files, style sheets, etc.&lt;/p&gt;

&lt;p&gt;Whenever we want the web app to be loaded on a browser, the browser first must download all these files. As a result, the browser may have difficulty maintaining the order of script tags to avoid breaking dependent code, etc.&lt;/p&gt;

&lt;p&gt;Thanks to the ES6 release, now we have Webpack which simply takes all of these related files and bundles them into one, reducing the number of files and making the downloading task simple &amp;amp; less error prone.&lt;/p&gt;

&lt;p&gt;That's all!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt; for more awesome content like this. &lt;/p&gt;

&lt;p&gt;Post a comment/discussion here for any feedback or queries &amp;amp; promise I will try my best to help you :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you learnt something new today. Please leave a like, a lovely comment or feedback &amp;amp; also consider following me as I regularly post useful &amp;amp; informative articles to help you become a better programmer. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;



&lt;center&gt;&lt;a href="https://buymeacoff.ee/mindninjaX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/center&gt;

</description>
      <category>webpack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>SE Internship Log[3] </title>
      <author>Ruheni Alex</author>
      <pubDate>Mon, 16 Aug 2021 19:59:00 +0000</pubDate>
      <link>https://dev.to/ruheni/se-internship-log-3-16am</link>
      <guid>https://dev.to/ruheni/se-internship-log-3-16am</guid>
      <description>&lt;p&gt;Hello there internet stranger, üëãüèΩ&lt;/p&gt;

&lt;p&gt;This is the 4th installment of the Software  Engineering(SE) Log.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills"&gt;
  &lt;/a&gt;
  Technical Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#toolbox"&gt;
  &lt;/a&gt;
  Toolbox üß∞
&lt;/h3&gt;

&lt;p&gt;This week, I'll share a some libraries/ tools I discovered that I found helpful:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tsnode-raw-require-endraw-flag"&gt;
  &lt;/a&gt;
  ts-node &lt;code&gt;--require&lt;/code&gt; flag
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/ts-node"&gt;&lt;code&gt;ts-node&lt;/code&gt;&lt;/a&gt;transforms TypeScript into JavaScript, which is executed in Node.js.&lt;/p&gt;

&lt;p&gt;A useful flag I discovered is the &lt;code&gt;-r&lt;/code&gt;/ &lt;code&gt;--require&lt;/code&gt; that enables you to execute a file with an export (aka a module):&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path to file on your computer: /src/hello.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can execute this file by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx ts-node &lt;span class="nt"&gt;-r&lt;/span&gt; ./src/hello.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#reading-and-writing-files-with-raw-fsjetpack-endraw-"&gt;
  &lt;/a&gt;
  Reading and writing files with &lt;code&gt;fs-jetpack&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/fs-jetpack"&gt;&lt;code&gt;fs-jetpack&lt;/code&gt;&lt;/a&gt; is a utility library that makes interacting with the file-system delightful.&lt;br&gt;
This can be the CRUD of files and directories - creating, reading, updating and deleting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-skills"&gt;
  &lt;/a&gt;
  Soft Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;Sometimes ‚Äì or most times ‚Äì software engineering gets tough. Tasks may be daunting, issues may be vague, or sometimes getting help/ feedback on a task may take a little longer than expected.&lt;/p&gt;

&lt;p&gt;It's frustrating. The feeling sucks!&lt;/p&gt;

&lt;p&gt;The frustration is part of the learning/ growth process.&lt;/p&gt;

&lt;p&gt;There will be days you will crush it! &lt;/p&gt;

&lt;p&gt;And sometimes, the simplest of tasks can seem impossible.&lt;/p&gt;

&lt;p&gt;What matters the most is showing up and making an attempt to fix and a bug, close an issue, or just give feedback on a project. &lt;/p&gt;

&lt;p&gt;A hack that I use to "trick" my brain to getting it done is starting with the simplest task to build up some momentum. For example, opening VS Code, starting the app server, and breaking something to try fix it.&lt;/p&gt;

&lt;p&gt;Or, take a break. It's totally fine.&lt;/p&gt;

&lt;p&gt;I've discovered that I get most of my eureka moments when I take a walk, I'm in the shower or lying on the bed &lt;em&gt;‚Äì thinking about the finality of death and how life is meaningless and we're all going to die someday and nothing we do matters.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;üí°&lt;/p&gt;

&lt;p&gt;Till next week. ‚úåüèΩ&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Your first Introduction to TypeScript</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 16 Aug 2021 19:54:52 +0000</pubDate>
      <link>https://dev.to/ericchapman/your-first-introduction-to-typescript-3p6h</link>
      <guid>https://dev.to/ericchapman/your-first-introduction-to-typescript-3p6h</guid>
      <description>&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is Typescript?
&lt;/h2&gt;

&lt;p&gt;TypeScript is a javascript superset&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-typescript-the-same-as-javascript"&gt;
  &lt;/a&gt;
  Is TypeScript the same as Javascript?
&lt;/h2&gt;

&lt;p&gt;Yes and No. TypeScript has been created by Microsoft and is built on top of javascript. &lt;/p&gt;

&lt;p&gt;In short, it is the same as Javascript but with added features.&lt;/p&gt;

&lt;p&gt;Everything you know from Javascript will be useful in TypeScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-one-should-i-learn-first"&gt;
  &lt;/a&gt;
  Which one should I learn first?
&lt;/h2&gt;

&lt;p&gt;You definitively learn Javascript first. If you don't know Javascript, you will have a hard time learning and understanding TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-create-a-new-language-javascript-is-ok-isnt-it"&gt;
  &lt;/a&gt;
  Why create a new language? Javascript is ok, isn't it?
&lt;/h2&gt;

&lt;p&gt;When people start using JavaScript in complex applications, they quickly realize that JavaScript became hard to work in terms of OOP and difficult to find some bugs.&lt;/p&gt;

&lt;p&gt;TypeScript was developed by Microsoft to bridge this gap. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-exactly-typescript-adds-to-javascript"&gt;
  &lt;/a&gt;
  So what exactly TypeScript adds to javascript?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Powerful type system&lt;/li&gt;
&lt;li&gt;Type error checking at development time&lt;/li&gt;
&lt;li&gt;Better Object-Oriented Programming&lt;/li&gt;
&lt;li&gt;New features like Interfaces, Generics, etc.&lt;/li&gt;
&lt;li&gt;Meta-Programming like Decorators&lt;/li&gt;
&lt;li&gt;Compile to javascript that can run on an older browser&lt;/li&gt;
&lt;li&gt;Code Auto-completion in the editor&lt;/li&gt;
&lt;li&gt;And more...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#anything-else-i-should-know"&gt;
  &lt;/a&gt;
  Anything else I should know?
&lt;/h2&gt;

&lt;p&gt;TypeScript does not run in the browser or with node.js like Javascript. To execute, TypeScript needs to be converted/compile to Javascript. &lt;/p&gt;

&lt;p&gt;Using TypeScript involves the use of a compiler. For example, if you have a file name app.ts, TypeScript compiler will create the javascript equivalent app.js. That one will be used to run your app.&lt;/p&gt;

&lt;p&gt;So that is why we say TypeScript help at development time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-and-use-typescript-compiler"&gt;
  &lt;/a&gt;
  How to install and use TypeScript compiler
&lt;/h2&gt;

&lt;p&gt;You can install TypeScript globally on your dev machine with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install -g typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To executer the compiler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tsc app.js

// or watch mode
$ tsc app.js -w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In watch mode TypeScript will automatically re-compile your app.ts in app.js on every save.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-config"&gt;
  &lt;/a&gt;
  TypeScript config?
&lt;/h2&gt;

&lt;p&gt;There is a lot of config/setting available for TypeScript. I will not cover those in this introduction article but just want to let you know that TypeScript settings are store in a file called tsconfig.json. You can create this file with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tsc --int
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#typescript-101"&gt;
  &lt;/a&gt;
  TypeScript 101
&lt;/h2&gt;

&lt;p&gt;You will now learn how to use basic TypeScript features&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#core-types"&gt;
  &lt;/a&gt;
  Core Types
&lt;/h3&gt;

&lt;p&gt;One of the most valuable features of TypeScript is the type system. In TypeScript you can assign a type to a variable and TypeScript compiler will throw an error if anywhere in your code that type is not respected.&lt;/p&gt;

&lt;p&gt;To understand what type, we will do a TypeScript vs Javascript comparison.&lt;/p&gt;

&lt;p&gt;Here a regular Javascript code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;       &lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, result1 will be 30 and result2 will be 1020&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-result2-is-not-30"&gt;
  &lt;/a&gt;
  Why result2 is not 30?
&lt;/h4&gt;

&lt;p&gt;Since you supply double quotes, Javascript thinks your parameters are string and so execute the code with that logic without reporting any error.&lt;/p&gt;

&lt;p&gt;Now imagine the kind of damage this error could do in an accounting application. Finding that kind of bug in a 100k lines of code web application is very hard, very frustrating, and time-consuming.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#typescript-to-the-rescue"&gt;
  &lt;/a&gt;
  TypeScript to the rescue!
&lt;/h4&gt;

&lt;p&gt;Let's use the same code above but in TypeScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function add(num1: number, num2: number) {
  return num1 + num2
}

const result1 = add(10, 20).       // 30
const result2 = add("10", "20")  // editor/compile error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference is the :number type added after the parameter name&lt;/p&gt;

&lt;p&gt;In this exemple, the 'const result2 = add("10", "20")' line will report an error in the code editor and when compiling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type inference
&lt;/h3&gt;

&lt;p&gt;When a variable is initialized TypeScript can infer/detect the type of the variable automaticaly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.95&lt;/span&gt;
&lt;span class="c1"&gt;// same as&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.95&lt;/span&gt; &lt;span class="c1"&gt;// best practice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both variables will be of type number.  The best practice is to let the TypeScript inference do its job since we set the initial value ourselves. That helps avoids repetitive code.&lt;/p&gt;

&lt;p&gt;Note that we only specify the type when the variable is not initialized with a value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-type"&gt;
  &lt;/a&gt;
  object Type
&lt;/h3&gt;

&lt;p&gt;TypeScript will also infer the object type automatically&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will result in TypeScript object type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#array-type"&gt;
  &lt;/a&gt;
  Array type
&lt;/h3&gt;

&lt;p&gt;The syntax to declare an array is: type&lt;a href="https://dev.totype%20followed%20by%20the%20bracket%20%5B%5D"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tuple-type"&gt;
  &lt;/a&gt;
  Tuple type
&lt;/h3&gt;

&lt;p&gt;Use when we need a fixed number of values in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#emun-type"&gt;
  &lt;/a&gt;
  Emun type
&lt;/h3&gt;

&lt;p&gt;Enum is mainly used to assign names to constants&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;READ_ONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AUTHOR&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also specify the key (key can be any type)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ADMIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;READ_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#any-type"&gt;
  &lt;/a&gt;
  Any type
&lt;/h3&gt;

&lt;p&gt;Use any as a fallback if you really don't know the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is not a good practice. Try to avoid it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union-type"&gt;
  &lt;/a&gt;
  union type
&lt;/h3&gt;

&lt;p&gt;A variable can be flexible and be assigned with two type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for union type is:  type2 | type2&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-alias"&gt;
  &lt;/a&gt;
  Type Alias
&lt;/h3&gt;

&lt;p&gt;We can create a custom type that will act as an alias for example a union type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Dual&lt;/span&gt;

&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-type-alias"&gt;
  &lt;/a&gt;
  object type alias
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the syntax is then simplyfy&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// instead of&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stringl&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-return-type"&gt;
  &lt;/a&gt;
  Function return type
&lt;/h3&gt;

&lt;p&gt;We can specify the return type of a function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#void-return-type"&gt;
  &lt;/a&gt;
  Void return type
&lt;/h3&gt;

&lt;p&gt;When a function don't return any value TypeScript will infer the function to be type 'void'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-type"&gt;
  &lt;/a&gt;
  Function type
&lt;/h3&gt;

&lt;p&gt;The declaring syntax is: (var: type, var: type) ‚áí return type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;

&lt;span class="c1"&gt;// or more specific&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;
&lt;span class="nx"&gt;calc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unknown-type"&gt;
  &lt;/a&gt;
  Unknown type
&lt;/h3&gt;

&lt;p&gt;Variable of type unknown will not be assignable except if we check the typeof the assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userInout&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#oop-in-typescript"&gt;
  &lt;/a&gt;
  OOP in TypeScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class-declaration"&gt;
  &lt;/a&gt;
  class declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shorthand-properties-initialization"&gt;
  &lt;/a&gt;
  Shorthand properties initialization
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-modifiers-private-public-readonly-protected"&gt;
  &lt;/a&gt;
  Access Modifiers (private, public, readonly, protected)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;displayProduct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The public keyword is optional because that's the default modifier if none supply.&lt;/p&gt;

&lt;p&gt;p*&lt;em&gt;ublic&lt;/em&gt;* mean a variable or function available outside of the class&lt;/p&gt;

&lt;p&gt;p*&lt;em&gt;rivate&lt;/em&gt;* is for variables or functions not available outside of the class&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;readonly&lt;/strong&gt; is to variables private and readonly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protected&lt;/strong&gt; is for variables or functions available only inside the class or subclass&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inherits"&gt;
  &lt;/a&gt;
  Inherits
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Friends&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getters-and-setters"&gt;
  &lt;/a&gt;
  Getters and Setters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Friend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#static-properties-and-methods"&gt;
  &lt;/a&gt;
  Static properties and methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;defaultName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  interface
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IsPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IsPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generics"&gt;
  &lt;/a&gt;
  Generics
&lt;/h2&gt;

&lt;p&gt;When writing programs, one of the most important aspects is to build reusable components. This ensures that the program is flexible as well as scalable in the long term.&lt;/p&gt;

&lt;p&gt;Generics offer a way to create reusable components. Generics provide a way to make components work with any data type and not restrict to one data type. So, components can be called or used with a variety of data types. &lt;/p&gt;

&lt;p&gt;For example, if we want to create an interface with a data property that can contain a different object type&lt;/p&gt;

&lt;p&gt;First create the interface&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &amp;lt;T&amp;gt; is a placeholder for the type that will be added by TypeScript at compile time&lt;/p&gt;

&lt;p&gt;You can then use the generic interface in your code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Info about person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Info about person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the same interface has been used to store string and strings arrays.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Organizing TypeScript code using namespaces</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 16 Aug 2021 19:46:48 +0000</pubDate>
      <link>https://dev.to/logrocket/organizing-typescript-code-using-namespaces-253n</link>
      <guid>https://dev.to/logrocket/organizing-typescript-code-using-namespaces-253n</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/emmanueljohn/"&gt;Emmanuel John&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With the use of third-party libraries in enterprise software increasing, we often encounter the problem of polluted global namespaces, causing name collision between components in the global namespace. Therefore, we need to organize blocks of code using namespaces so that variables, objects, and classes are uniquely identified.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss namespaces, when you'll need them, and how to use them to enhance the organization of your TypeScript code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Knowledge of TypeScript&lt;/li&gt;
&lt;li&gt;  Familiarity with JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-namespaces"&gt;
  &lt;/a&gt;
  What are namespaces?
&lt;/h2&gt;

&lt;p&gt;Namespaces are paradigm of organizing code so that variables, functions, interfaces, or classes are grouped together within a local scope in order to avoid naming conflicts between components in the global scope. This is one of the most common strategies to reduce global scope pollution.&lt;/p&gt;

&lt;p&gt;While &lt;a href="https://blog.logrocket.com/organize-code-in-typescript-using-modules/"&gt;modules&lt;/a&gt; are also used for code organization, namespaces are easy to use for simple implementations. Modules offer some additional benefits like strong code isolation, strong support for bundling, re-exporting of components, and renaming of components that namespaces do not offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-namespaces"&gt;
  &lt;/a&gt;
  Why do we need namespaces?
&lt;/h2&gt;

&lt;p&gt;Namespaces have these advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Code reusability ‚Äî The importance of namespaces for code reusability cannot be understated&lt;/li&gt;
&lt;li&gt;  Bloated global scope ‚Äî Namespaces reduce the amount of code in the global scope, making it less bloated&lt;/li&gt;
&lt;li&gt;  Third-party libraries ‚Äî With the increasing number of websites depending on third-party libraries, it's important to safeguard your code using namespaces to prevent same-name conflicts between your code and the third-party libraries&lt;/li&gt;
&lt;li&gt;  Distributed development ‚Äî With distributed development becoming popular, pollution is almost unavoidable because it‚Äôs a lot easier for developers to use common variable or class names. This results in name collision and pollution of the global scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#design-considerations-using-namespaces"&gt;
  &lt;/a&gt;
  Design considerations using namespaces
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#implicit-dependency-order"&gt;
  &lt;/a&gt;
  Implicit dependency order
&lt;/h3&gt;

&lt;p&gt;Using namespaces while working with some external libraries will require an implicit implementation of dependency between your code and these libraries. This results in the stress of managing the dependencies yourself so that they are loaded correctly, because the dependencies can be error-prone.&lt;/p&gt;

&lt;p&gt;If you find yourself in such a situation, using modules will save you the stress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-applications"&gt;
  &lt;/a&gt;
  Node.js applications
&lt;/h3&gt;

&lt;p&gt;For &lt;a href="https://blog.logrocket.com/how-to-use-ecmascript-modules-with-node-js/"&gt;Node.js applications, modules are recommended&lt;/a&gt; over namespaces since modules are the de facto standard for encapsulation and code organization in Node.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nonjavascript-content-import"&gt;
  &lt;/a&gt;
  Non-JavaScript content import
&lt;/h3&gt;

&lt;p&gt;Modules are recommended over namespaces when dealing with non-JavaScript content since some module loaders such as SystemJS and AMD allow non-JavaScript content to be imported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#legacy-code"&gt;
  &lt;/a&gt;
  Legacy code
&lt;/h3&gt;

&lt;p&gt;When working with a codebase that is no longer engineered but continually patched, using namespaces is recommended over modules.&lt;/p&gt;

&lt;p&gt;Also, namespaces come in handy when porting old JavaScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-namespaces-in-typescript"&gt;
  &lt;/a&gt;
  Exploring namespaces in TypeScript
&lt;/h2&gt;

&lt;p&gt;Now that we have a shared understanding of what TypeScript namespaces are and why we need them, we can take a deeper dive into how to use them.&lt;/p&gt;

&lt;p&gt;Given that TypeScript is a superset of JavaScript, it derives its namespace concept from JavaScript.&lt;/p&gt;

&lt;p&gt;By default, JavaScript has no provision for namespacing because we have to implement namespaces using IIFE (Immediately Invoked Function Expression):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is so much code for defining a namespace. Meanwhile, TypeScript does things differently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlefile-namespacing"&gt;
  &lt;/a&gt;
  Single-file namespacing
&lt;/h3&gt;

&lt;p&gt;In TypeScript, namespaces are defined using the &lt;code&gt;namespace&lt;/code&gt; keyword followed by a name of choice.&lt;/p&gt;

&lt;p&gt;A single TypeScript file can have as many namespaces as needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, TypeScript namespaces are a piece of syntactic cake compared to our JavaScript implementation of namespaces using the IIFE.&lt;/p&gt;

&lt;p&gt;Functions, variables, and classes can be defined inside a namespace as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Panda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code allows us to use the same variable and function name without collision.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-functions-variables-objects-and-classes-outside-a-namespace"&gt;
  &lt;/a&gt;
  Accessing functions, variables, objects, and classes outside a namespace
&lt;/h3&gt;

&lt;p&gt;In order to access functions or classes outside their namespaces, the &lt;code&gt;export&lt;/code&gt; keyword must be added before the function or class name as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we had to omit the &lt;code&gt;export&lt;/code&gt; keyword with the variable because it should not be accessible outside the namespace.&lt;/p&gt;

&lt;p&gt;Now, we can access the &lt;code&gt;getName&lt;/code&gt; function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//Toyota&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#organizing-code-using-nested-namespaces"&gt;
  &lt;/a&gt;
  Organizing code using nested namespaces
&lt;/h3&gt;

&lt;p&gt;TypeScript allows us to organize our code using nested namespaces.&lt;/p&gt;

&lt;p&gt;We can create nested namespaces as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;TransportMeans&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;export&lt;/code&gt; keyword before the &lt;code&gt;Vehicle&lt;/code&gt; namespace. This allows the namespace to be accessible outside of the &lt;code&gt;TransportMeans&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;We can also perform deep nesting of namespaces.&lt;/p&gt;

&lt;p&gt;Our nested namespaces can be accessed as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TransporMeans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Toyota&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-namespace-alias"&gt;
  &lt;/a&gt;
  The namespace alias
&lt;/h3&gt;

&lt;p&gt;For deeply nested namespaces, the namespace alias comes in handy to keep things clean.&lt;/p&gt;

&lt;p&gt;Namespace aliases are defined using the import keyword as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;carName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TransporMeans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;carName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Toyota&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multifile-namespacing"&gt;
  &lt;/a&gt;
  Multi-file namespacing
&lt;/h3&gt;

&lt;p&gt;Namespaces can be shared across multiple TypeScript files. This is made possible by the &lt;code&gt;reference&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Considering the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//constant.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//vehicle.ts&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;reference&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we had to reference the &lt;code&gt;constant.ts&lt;/code&gt; file in order to access &lt;code&gt;name&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//index.ts&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;reference&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;reference&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vehicle.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Toyota&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we started our references with the highest-level namespace. This is how to handle references in multi-file interfaces. TypeScript will use this order when compiling the files.&lt;/p&gt;

&lt;p&gt;We can instruct the compiler to compile our multi-file TypeScript code into a single JavaScript file with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; tsc --outFile index.js index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this command, the TypeScript compiler will produce a single JavaScript file called &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In order to build scalable and reusable TypeScript applications, TypeScript namespaces are handy because they improve the organization and structure of our application.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôve been able to explore namespaces, when you need them, and how to implement them. Check out &lt;a href="https://www.typescriptlang.org/docs/handbook/namespaces.html"&gt;TypeScript Handbook: Namespaces&lt;/a&gt; for more information about namespaces.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python Concatenate Lists</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Mon, 16 Aug 2021 19:35:56 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/python-concatenate-lists-ocf</link>
      <guid>https://dev.to/adamgordonbell/python-concatenate-lists-ocf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#concatenate-two-lists-in-python"&gt;
  &lt;/a&gt;
  Concatenate Two Lists in Python
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You have two lists and you'd like to join them into a new list.&lt;br&gt;
Solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'four'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'five'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;üì¢ TLDR: Use &lt;code&gt;+&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In almost all simple situations, &lt;strong&gt;using &lt;code&gt;list1 + list2&lt;/code&gt; is the way you want to concatenate lists&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The edge cases below are better in some situations, but &lt;code&gt;+&lt;/code&gt; is generally the best choice. All options covered work in Python 2.3, Python 2.7, and all versions of Python 3&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combine-lists-in-place-in-python"&gt;
  &lt;/a&gt;
  Combine Lists in Place in Python
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You have a huge list, and you want to add a smaller list on the end while minimizing memory usage.&lt;/p&gt;

&lt;p&gt;In this case, it may be best to append to the existing list, reusing it instead of recreating a new list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;longlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shortlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with any optimization, you should verify that this reduces memory thrash in your specific case and stick to the simple idiomatic &lt;code&gt;x + y&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;p&gt;Let's use the &lt;a href="https://docs.python.org/3/library/timeit.html"&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; module to check some performance numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Performance Check
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;x = ["one","two","three"] * 1000 
y = ["four","five","six"]
"""&lt;/span&gt;
&lt;span class="c1"&gt;# x + y with large x
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x + y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;3.6260274310000113&lt;/span&gt;
&lt;span class="c1"&gt;# x.extend(y) with large x
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x.extend(y)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.06857255800002804&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, where x is 3000 elements, extend is around 50x faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ùó Concatenating Lists With Large Elements is Fine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the elements in your list are huge (million character strings), but the list size is less than a thousand elements, the previous solution &lt;code&gt;x + y&lt;/code&gt; will work just fine. This is because Python stores references to the values in the list, not the values themselves. Thus, the element size makes no difference to the runtime complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"five"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#This is fine
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#Performance Testing (extend is slower for large elements)
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;x = ["one" * 1000, "two" * 1000, "three" * 1000]
y = ["four" * 1000, "five" * 1000]
"""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x + y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.05397573999994165&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x.extend(y)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.06511967799997365&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;extend&lt;/code&gt; does not have an advantage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-chain-from-raw-itertools-endraw-for-two-lists"&gt;
  &lt;/a&gt;
  Avoid Chain From &lt;code&gt;itertools&lt;/code&gt; For Two Lists
&lt;/h3&gt;

&lt;p&gt;It is possible to use &lt;code&gt;chain&lt;/code&gt; from &lt;code&gt;itertools&lt;/code&gt; to create an iterable of two lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;longlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt; &lt;span class="p"&gt;..........&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shortlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shortlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;..........,&lt;/span&gt; &lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check the performance of using chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;from itertools import chain
x = ["one","two","three"] * 1000 
y = ["four","five","six"]
"""&lt;/span&gt;
&lt;span class="c1"&gt;# x + y with large x
# x.extend(y) with large x
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x.extend(y)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.06857255800002804&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list(chain(x, y))'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;16.810488051999982&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;chain&lt;/code&gt; with two lists is slower in all cases tested, and &lt;code&gt;x + y&lt;/code&gt; is easier to understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combining-n-lists-in-python"&gt;
  &lt;/a&gt;
  Combining N Lists in Python
&lt;/h2&gt;

&lt;p&gt;If you need to add three or even ten lists together and the lists are statically known, then &lt;code&gt;+&lt;/code&gt; for concatenate works great.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#flatten-a-list-of-lists-in-python"&gt;
  &lt;/a&gt;
  Flatten a List of Lists in Python
&lt;/h2&gt;

&lt;p&gt;However, if the number of lists is dynamic and unknown until runtime, &lt;code&gt;chain&lt;/code&gt; from &lt;code&gt;itertools&lt;/code&gt; becomes a great option. Chain takes a list of lists and flattens it into a single list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;],[]]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'four'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'five'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'four'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'five'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; can take anything iterable, making it an excellent choice for combining lists, dictionaries, and other iterable structures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#performance-of-flattening-a-list-of-lists"&gt;
  &lt;/a&gt;
  Performance of Flattening a List of Lists
&lt;/h3&gt;

&lt;p&gt;Performance doesn't always matter, but readability always does, and the chain method is a straightforward way to combine lists of lists. That said, let's put readability aside for a moment and try to find the fastest way to flatten lists.&lt;/p&gt;

&lt;p&gt;One option is iterating ourselves:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nestedlist&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nestedlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check its performance vs chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;from itertools import chain
l = [["one","two", "three"],["four","five"],[]] * 99
"""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Add Nested Lists using chain.from_iterable
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list(chain.from_iterable(l))'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.0384087909997106&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;### Add using our own iteration
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;result = []
for nestedlist in l:
    result.extend(nestedlist)  
"""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.8619721710001613&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shows that &lt;code&gt;chain.from_iterable&lt;/code&gt; is faster than extend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flattening-and-merging-lists-with-one-big-list"&gt;
  &lt;/a&gt;
  Flattening and Merging Lists With One Big List
&lt;/h2&gt;

&lt;p&gt;What about adding a list of lists to an existing and large list? We saw that using extend can be faster with two lists when one is significantly longer than the other so let's test the performance of &lt;code&gt;extend&lt;/code&gt; with N lists.&lt;/p&gt;

&lt;p&gt;First, we use our standard &lt;code&gt;chain.from_iterable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Method 1 - chain.from_iterable 
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;longlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nestedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;longlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;],[]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nestedlist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then test its performance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;from itertools import chain
longlist = ["one","two", "three"] * 1000;
combinedlist = [longlist, ["one","two", "three"],["four","five"],[]]
"""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list(chain.from_iterable(combinedlist))'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.8676087710009597&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's try concatenating by adding everything onto the long list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Method 2 - extend
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;longlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;nestedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;"four"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"five"&lt;/span&gt;&lt;span class="p"&gt;],[]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nestedlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;longlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Performance Test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;from itertools import chain
longlist = ["one","two", "three"] * 1000;
nestedlist = [["one","two", "three"],["four","five"],[]]
"""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;for item in nestedlist:
   longlist.extend(item)
   """&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="mf"&gt;0.02403609199973289&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There we go, &lt;code&gt;extend&lt;/code&gt; is much faster when flattening lists or concatenating many lists with one long list. If you encounter this, using &lt;code&gt;extend&lt;/code&gt; to add the smaller lists to the long list can decrease the work that has to be done and increase performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;These are the main variants of combining lists in python. Use this table to guide you in the future.&lt;/p&gt;

&lt;p&gt;Also, if you are looking for a nice way to standardize the processes around your python projects -- running tests, installing dependencies, and linting code -- take a look at Earthly for &lt;a href="https://earthly.dev/"&gt;Repeatable Builds&lt;/a&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;th&gt;Performance Optimization&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2 lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x + y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 large list, 1 small list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x.extend(y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Known number of N lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x + y + z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unknown number of N lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list(chain.from_iterable(l))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List of Lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list(chain.from_iterable(l))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 large list, many small lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for l1 in l: x.extend(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;I did all the performance testing using Python 3.9.5 on MacOS BigSur.¬†&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;If you don't have a performance bottleneck, clarity trumps performance, and you should ignore the performance suggestions.¬†&lt;a href="#fnref2"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Sigstore: A Solution to Software Supply Chain Security</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 16 Aug 2021 18:17:57 +0000</pubDate>
      <link>https://dev.to/martinheinz/sigstore-a-solution-to-software-supply-chain-security-163o</link>
      <guid>https://dev.to/martinheinz/sigstore-a-solution-to-software-supply-chain-security-163o</guid>
      <description>&lt;p&gt;In the recent months there's been a lot of noise in the area of supply chain security, because of increase in attacks, with notable ones like &lt;em&gt;Microsoft Exchange Server&lt;/em&gt;, &lt;em&gt;Colonial pipeline&lt;/em&gt; or &lt;em&gt;SolarWinds&lt;/em&gt; breach. These attacks could have been prevented with proper tools in place, yet finding the right tool for the job might be difficult as this area is hard to navigate and most of us - developers - aren't security experts. Recently however, a new project was announced that might solve a lot of problems for all of us. It's name is &lt;em&gt;sigstore&lt;/em&gt; and in this article we will look at what it does, why we need it and how it fits into landscape of existing tools in this area. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sigwhat"&gt;
  &lt;/a&gt;
  sig-what?
&lt;/h2&gt;

&lt;p&gt;sigstore is a new kid on the block. It's a project under CNCF umbrella that was &lt;em&gt;"donated"&lt;/em&gt; to the foundation in March. It's purpose is to provide software signing public-good service. Which means that it should become a software-signing equivalent to &lt;em&gt;Let's Encrypt&lt;/em&gt;. sigstore however, isn't just one tool or piece of software, it's a collection of projects that aim to simplify software signing and transparency. It's main components as of right now are &lt;code&gt;fulcio&lt;/code&gt;, &lt;code&gt;rekor&lt;/code&gt; and &lt;code&gt;cosign&lt;/code&gt; (more details on those a bit later).&lt;/p&gt;

&lt;p&gt;Now you might be asking &lt;em&gt;"Why do we actually need this?"&lt;/em&gt; - software-signing is not a new problem, so there must be some solution already, right? Yes, but signing software and maintaining keys is very difficult especially for non-security folks and UX of existing tools such as PGP leave much to be desired. That's why we need something like sigstore - an easy to use software/toolset for signing software artifacts.&lt;/p&gt;

&lt;p&gt;Additionally, there are couple of reasons why sigstore's solution is superior to tools like PGP that try to solve the same problem. Unlike with other tools, with sigstore you don't need to manage private keys. You also don't have to understand ins-and-outs of security standards thanks to better UX. sigstore also makes it simpler to manage revocations and with all this it still provides all the required features of software signing, that being &lt;em&gt;integrity&lt;/em&gt;, &lt;em&gt;non-repudiation&lt;/em&gt; and &lt;em&gt;authentication&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bottom line is that sigstore aims to make artifact signing so simple that it can be done by default and transparently, and is ubiquitous across all registries and artifact storages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h2&gt;

&lt;p&gt;From the above it might seem like sigstore is the tool that can solve it all, but if you start googling around, you will find plenty of great tools in supply chain security space. Most of these tools however, don't serve exactly the same purpose and they really are complementary to what sigstore is doing. So, let's also review rest of the landscape to see what else is out there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of the many tools you'll come across is &lt;em&gt;&lt;a href="https://theupdateframework.io/overview/"&gt;The Update Framework (TUF)&lt;/a&gt;&lt;/em&gt;. It's also part of CNCF and its purpose is specifically to protect the process of finding and downloading patches/updates for some particular system (e.g. YUM, PyPI). This system is suitable for artifacts that are meant to be distributed using an update system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While talking about TUF, it also makes sense to mention &lt;em&gt;Notary&lt;/em&gt; which is an implementation of TUF specification. It is most notably used in &lt;em&gt;Docker Notary&lt;/em&gt; which provides the ability to use digital signatures for data sent to and received from remote Docker registries. You can read more about &lt;em&gt;Docker Content Trust&lt;/em&gt; &lt;a href="https://docs.docker.com/engine/security/trust/"&gt;here&lt;/a&gt; or can also try playing with &lt;code&gt;docker trust&lt;/code&gt; command. In case you might want to implement something like that, then you can checkout this article for full &lt;a href="https://www.cncf.io/blog/2021/07/28/enforcing-image-trust-on-docker-containers-using-notary/"&gt;demo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another great tool is &lt;em&gt;&lt;a href="https://github.com/in-toto/in-toto"&gt;in-toto&lt;/a&gt;&lt;/em&gt;. This tool isn't just for signing artifacts, it rather produces &lt;em&gt;attestations&lt;/em&gt; about how the software was produced. Essentially, verifying that each task in a pipeline was carried out as planned and therefore providing assurance that final product was not tampered with. You can use &lt;em&gt;in-toto&lt;/em&gt; as part of &lt;em&gt;Tekton Chains&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, I also want to mention &lt;a href="https://transparency.dev/#trillian"&gt;Trillian&lt;/a&gt; which is a tamper-evident log that stores an accurate, immutable and verifiable history of activity. This kind of log can be used for example to add tamper-checking to a system, simplify regulatory compliance or track modifications of documents. sigstore also includes tamper-evident log called &lt;code&gt;rekor&lt;/code&gt; which is will talk about later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's much more we could talk about, but that would take a while. If you want to dig deeper, then checkout &lt;a href="https://landscape.cncf.io/"&gt;CNCF Landscape page&lt;/a&gt; and more specifically &lt;em&gt;Security and Compliance&lt;/em&gt; (e.g. OPA) and &lt;em&gt;Key Management&lt;/em&gt; (e.g. SPIFFE and SPIRE) sections.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these tools have their pros and cons and could be combined and extended to provide stronger security. For more details about this you can checkout &lt;a href="https://github.com/sigstore/community/blob/main/docs/zero-trust-supply-chains.pdf"&gt;document&lt;/a&gt; in sigstore's community repository (see &lt;em&gt;Further Work&lt;/em&gt; section).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;Before we dig deeper into components of sigstore, we first need to understand the basics of the signing process. The basic steps are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Short-lived code-signing credentials (a keypair) are generated.&lt;/li&gt;
&lt;li&gt;User authenticates with &lt;em&gt;OpenID Connect (OIDC)&lt;/em&gt; provider such as Google or GitHub to verify ownership of email address and possession of previously generated keys.&lt;/li&gt;
&lt;li&gt;If authentication is successful, user receives code-signing certificate.&lt;/li&gt;
&lt;li&gt;Code-signing certificate is published to transparency log, so that it can be verified by others.&lt;/li&gt;
&lt;li&gt;User signs an artifact (e.g. container image) using code-signing certificate and their keypair.&lt;/li&gt;
&lt;li&gt;Signature from the artifact is published to transparency log.&lt;/li&gt;
&lt;li&gt;Short-lived code-signing credentials used to create signature are destroyed.&lt;/li&gt;
&lt;li&gt;Signed artifact can be published (e.g. on container registry).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Different explanation of the process can be also found on sigstore website in &lt;a href="https://sigstore.dev/what_is_sigstore/"&gt;What is sigstore? section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have a better idea about how it all works, let's look at all the components. There are couple of things that apply to all of them, namely, they can (and should) run in cloud by default (runs on Kubernetes). Even though sigstore hosts a public-good service you can take any of these components and host them yourself (for example behind firewall) and you also don't need to use all of the service, but maybe just one of them, for example just the transparency log server.&lt;/p&gt;

&lt;p&gt;As for the individual components, there are currently 3 main pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt; is a container signing tool. Its responsibility is to sign containers and publish that information to OCI registries. In the above process that matches the steps 1, 5, 6 and 7.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sigstore/fulcio"&gt;fulcio&lt;/a&gt; is a root CA for code signing certs. Its job is to issue code-signing certificates and to embed OIDC identity into code-signing certificate. From this description we can see that it performs these tasks in steps 2, 3, 4 and 8.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sigstore/rekor"&gt;rekor&lt;/a&gt; is the transparency log. It's append-only, immutable ledger that serves as transparent source of truth of what was signed by whom. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, in practice the above tools and services would be used in the following way to perform the signing process:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cosign&lt;/code&gt; generates an ephemeral keypair and requests code-signing certificate from &lt;code&gt;fulcio&lt;/code&gt; which then asks you to login with OIDC provider of your choice. It uses the authentication to verify that you're owner of the ephemeral private key. &lt;code&gt;cosign&lt;/code&gt; will then retrieve container image manifest of the image you want to sign and will generate a signature using the key it previously generated. Next, &lt;code&gt;cosign&lt;/code&gt; uploads the signature, certificate and public key to registry. Finally, it sends the information to &lt;code&gt;rekor&lt;/code&gt;, which verifies the signature and adds entry into transparency log. Here, this entry includes the artifact digest, signature and public key. At this point ephemeral keypair can be deleted.&lt;/p&gt;

&lt;p&gt;In addition to these pieces of software, there also needs to be a monitoring service that checks the transparency log (&lt;code&gt;rekor&lt;/code&gt;) for any anomalies. Example of such anomaly could be if someone stole your password and used your OpenID identity to sign and publish an artifact, which would be clear from the transparency log.&lt;/p&gt;

&lt;p&gt;Finally, there needs to a way to - for example - say who are the maintainers who are actually trusted to sign artifacts/releases of some project. This could be done e.g. using Open Policy Agent (OPA) and by maintaining list emails (OpenID identities) in the project repository and allowing to sign artifacts only the people in this list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This kind of security practices are not exactly common right now and in some cases really neglected. So, the more people start using this, the more likely it's to become the default process and good practice. With that said, at the time of writing, sigstore is a very young project and is not yet production-ready but it should be by the end of summer, so very soon you might be able to put this knowledge to some good use and help the software supply chain be a bit more secure.&lt;/p&gt;

&lt;p&gt;With all that said, this article should serve as a primer on supply chain security and to give you a general idea about sigstore and in follow-up article we will tackle the actual signing process in detail with hands-on examples.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>security</category>
    </item>
    <item>
      <title>Skills required to be a full stack developer: a checklist</title>
      <author>Simon Barker</author>
      <pubDate>Mon, 16 Aug 2021 18:16:12 +0000</pubDate>
      <link>https://dev.to/allthecode/skills-required-to-be-a-full-stack-developer-a-checklist-2805</link>
      <guid>https://dev.to/allthecode/skills-required-to-be-a-full-stack-developer-a-checklist-2805</guid>
      <description>&lt;p&gt;The skills list required to be a full stack developer is long and it can be hard to know exactly what skills you need and to what level before you starting looking for a job. The often shared online resource for this kind of thing is roadmap.sh but, while it is extensive, I actually think the amount covered here is too much to be helpful to new developers. So, I have my own list, it‚Äôs a bare minimum required skills list and it looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A basic understanding of how the internet works and HTTP requests&lt;/strong&gt; (GET, POST, PUT, PATCH and DELETE) and the basic response codes (200, 404, 500)

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://httpstatuses.com/"&gt;httpstatuses.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL"&gt;What is a URL?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;HTTP request methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt; - &lt;a href="https://www.w3schools.com/html/default.asp"&gt;W3Schools HTML&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS&lt;/strong&gt; - &lt;a href="https://www.w3schools.com/css/default.asp"&gt;W3Schools CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A CSS frameworks like &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; or &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt; - &lt;a href="https://www.w3schools.com/js/default.asp"&gt;W3Schools JS&lt;/a&gt; - yes just one language, it‚Äôs the only viable option for frontend so just use it on the backend as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Package manager like npm&lt;/strong&gt; - &lt;a href="https://www.instagram.com/p/CHO-LyGsyDG/"&gt;@allthecode npm overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NodeJS&lt;/strong&gt; - &lt;a href="https://www.w3schools.com/nodejs/default.asp"&gt;W3Schools NodeJS&lt;/a&gt; and &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React](&lt;a href="https://web.dev/react/"&gt;&lt;/a&gt;&lt;a href="https://web.dev/react/"&gt;https://web.dev/react/&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;React Component library like &lt;a href="https://material-ui.com/"&gt;MaterialUI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Git version control&lt;/strong&gt; - &lt;a href="https://www.w3schools.com/git/default.asp"&gt;W3Schools Git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Know enough about security to know that you don‚Äôt know enough about security (CORS, HTTPS, Content Security Policy) - &lt;a href="https://web.dev/secure/#i18n.paths.secure.topics.understand_security_basics"&gt;Web Dev Security Basics&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A database technology&lt;/strong&gt; (pick a or b)

&lt;ul&gt;
&lt;li&gt;a) MySQL is a great started RDBMS - &lt;a href="https://www.w3schools.com/sql/default.asp"&gt;W3Schools SQL&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;b) MongoDB is the primary NoSQL database technology &lt;a href="https://university.mongodb.com/"&gt;University Mongodb&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to make a REST API in NodeJS and Express&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Docker and containerization - this is a more advanced topic however having an awareness of Docker and the basics of a Docker file would be a big ‚úÖ&lt;/li&gt;
&lt;li&gt;Awareness of testing with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; for Javascript.&lt;/li&gt;
&lt;li&gt;Understanding of Linux commands and some basic OS principles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Absolutely required items are in bold.&lt;/p&gt;

&lt;p&gt;Being full stack is not about being an expert in all of these, it is about knowing enough to get a system up and running, being able to search for the right things on Google and have a sensible conversation with someone who is an expert in their respective areas. You need to be a good, well rounded developer but you don‚Äôt need to be expert in every field!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Real-life Terraform Refactoring Guide</title>
      <author>Matheus Cunha</author>
      <pubDate>Mon, 16 Aug 2021 18:06:35 +0000</pubDate>
      <link>https://dev.to/macunha/real-life-terraform-refactoring-guide-2jo9</link>
      <guid>https://dev.to/macunha/real-life-terraform-refactoring-guide-2jo9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#orga4c7a97"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#org3702753"&gt;How to break a big ball of mud? STRANGLE IT&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#orgeaee6de"&gt;The mono-repository (monorepo) approach to Legacy&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#orgdd4979a"&gt;Splitting the &lt;code&gt;modules&lt;/code&gt; sub-path to its own repository&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#org5026de0"&gt;Let‚Äôs start strangling the repository&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#org5230407"&gt;Import state? Remove state and code from what? Where?&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id="orga4c7a97"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;As reality hits, the unavoidable fact of dealing with a hard-to-manage Terraform &lt;a href="https://en.wikipedia.org/wiki/Big_ball_of_mud"&gt;Big ball of mud&lt;/a&gt; code base comes in. There is no way around natural growth and evolution of code bases and the design flaws that come with it. Our Agile mindset is to &lt;a href="https://www.brainyquote.com/quotes/mark_zuckerberg_453439"&gt;‚Äúmove fast and break things‚Äù&lt;/a&gt;, implement something as simple as possible and let the design decisions for the next iterations (if any).&lt;/p&gt;

&lt;p&gt;Refactoring Terraform code is actually as natural as developing it, time andtime again you will be face situation where a better structure or organization can be achieved, maybe you want to upgrade from a home-made module to an open-source/community alternative, maybe you just want to segregate your resources into different states to speed-up development. Regardless of the goal, once you get into it, you will realize that Terraform code refactoring is actually a basic missing step on the development process that no one told you before.&lt;/p&gt;

&lt;p&gt;As the &lt;a href="http://nathanmarz.com/blog/suffering-oriented-programming.html"&gt;Suffering-Oriented Programming&lt;/a&gt; mantra dictates:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúFirst make it possible. Then make it beautiful. Then make it fast.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, time to make the Terraform code beautiful!&lt;/p&gt;

&lt;p&gt;&lt;a id="org3702753"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-break-a-big-ball-of-mud-strangle-it"&gt;
  &lt;/a&gt;
  How to break a big ball of mud? STRANGLE IT
&lt;/h1&gt;

&lt;p&gt;Martin Fowler has already written everything there is to write about (early 2000s) DevOps, Agile, and Software Development. Therefore, we could reference Martin Fowler for virtually anything Software related, but really, the &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring book&lt;/a&gt; is &lt;strong&gt;THE&lt;/strong&gt; reference on this subject.&lt;/p&gt;

&lt;p&gt;Martin Fowler shared the &lt;a href="https://martinfowler.com/bliki/StranglerFigApplication.html"&gt;Stangler (Fig) Pattern&lt;/a&gt;, which describes a strategy to refactor a legacy code base by re-implementing the same features (sometimes even the bugs) on another application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[‚Ä¶] the huge strangler figs. They seed in the upper branches of a tree and gradually work their way down the tree until they root in the soil. Over many years they grow into fantastic and beautiful shapes, meanwhile strangling and killing the tree that was their host.&lt;/p&gt;

&lt;p&gt;This metaphor struck me as a way of describing a way of doing a rewrite of an important system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this document we are going to follow the same idea:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; implement the same feature on a different &lt;a href="https://www.terraform-best-practices.com/key-concepts#composition"&gt;Terraform composition&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt; migrate the Terraform state;&lt;/li&gt;
&lt;li&gt; delete (kill) the previous implementation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id="orgeaee6de"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-monorepository-monorepo-approach-to-legacy"&gt;
  &lt;/a&gt;
  The mono-repository (monorepo) approach to Legacy
&lt;/h1&gt;

&lt;p&gt;Let‚Äôs suppose that your Terraform code base is versioned in a single repository (a.k.a. monorepo), following the random structure displayed below (just to help illustrate)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ modules/    # Definition of TF modules used by underlying compositions
‚îú‚îÄ‚îÄ global/     # Resources that aren't restricted to one environment
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ aws/
‚îú‚îÄ‚îÄ production/ # Production environment resources
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ aws/
‚îî‚îÄ‚îÄ staging/    # Staging environment resources
    ‚îî‚îÄ‚îÄ aws/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On this example each directory corresponds to a Terraform state. In order to apply changes you have to walk to a path and execute &lt;code&gt;terraform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The structure on this example repository was created a few hypothetical years ago when the number of existing microservices and resources (DB, message queues, etc) was significantly smaller. At the time, it was feasible to keep Terraform definitions together because it was easier to maintain, Cloud resources were managed with one-shot!&lt;/p&gt;

&lt;p&gt;As the time went by, the number of Products and the team grew, and engineers started facing concurrency issues: Terraform lock executions on a shared storage when someone else is running &lt;code&gt;terraform apply&lt;/code&gt; as well as a general slowness on &lt;strong&gt;every execution&lt;/strong&gt; since the number of data sources to sync is frightening.&lt;/p&gt;

&lt;p&gt;A mono-repository approach is not necessarily bad, versioning is actually simpler when performed in one single repository. Ideally, there won‚Äôt be many changes on the scale of GiB meaning that it is safe to proceed on this one &lt;em&gt;as long as the Terraform remote states are divided&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgdd4979a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#splitting-the-raw-modules-endraw-subpath-to-its-own-repository"&gt;
  &lt;/a&gt;
  Splitting the &lt;code&gt;modules&lt;/code&gt; sub-path to its own repository
&lt;/h2&gt;

&lt;p&gt;One thing to mention though is the &lt;code&gt;modules&lt;/code&gt; sub-path, this one could be stored in a different git repository to leverage its own versioning. Since Terraform modules and its implementations don‚Äôt always evolve in the same pace, keeping two distinct version trees is beneficial. Additionally, a separated repository for Terraform modules allows the specification of ‚Äúpinned versions‚Äù, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"aws_main_vpc"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"git::https://github.com/terraform-aws-modules/terraform-aws-vpc.git?ref=2ca733d"&lt;/span&gt;
    &lt;span class="c1"&gt;# Note the ref=${GIT_REVISION_DIGEST}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That reference for a module‚Äôs version should always be specified, regardless if it comes from an internal/private repository or public. When you specify the version, you are ensuring reproducibility.&lt;/p&gt;

&lt;p&gt;Therefore, let‚Äôs move the &lt;code&gt;modules&lt;/code&gt; sub-path to another git repository, following instructions from &lt;a href="https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository/17864475#17864475"&gt;this StackOverflow answer&lt;/a&gt; so that the git commit history is preserved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;MAIN_BIGGER_REPO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/the/monorepo
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MAIN_BIGGER_REPO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
git subtree &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nt"&gt;-P&lt;/span&gt; modules &lt;span class="nt"&gt;-b&lt;/span&gt; refact-modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  1.
&lt;/h3&gt;

&lt;p&gt;Create the new repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /path/to/the/terraform-modules &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
git init
git pull &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MAIN_BIGGER_REPO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; refact-modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  2.
&lt;/h3&gt;

&lt;p&gt;Link the new repository to your remote Git (server)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin &amp;lt;git@git.com:user/terraform-modules.git&amp;gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  3.
&lt;/h3&gt;

&lt;p&gt;Cleanup inside $MAIN_BIGGER_REPO, if desired&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; modules
git filter-branch &lt;span class="nt"&gt;--prune-empty&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--tree-filter&lt;/span&gt; &lt;span class="s2"&gt;"rm -rf modules"&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="org5026de0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-strangling-the-repository"&gt;
  &lt;/a&gt;
  Let‚Äôs start strangling the repository
&lt;/h2&gt;

&lt;p&gt;Now that a substantial piece of code was moved somewhere else, it is time to put the &lt;a href="https://martinfowler.com/bliki/StranglerFigApplication.html"&gt;Stangler (Fig) Pattern&lt;/a&gt; in practice.&lt;/p&gt;

&lt;p&gt;Move all the existing content as-is to the &lt;code&gt;legacy&lt;/code&gt; sub-path, keeping the same repository and change history (commits). It also allows to apply the &lt;code&gt;legacy&lt;/code&gt; code as it used to be from one of those paths.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îî‚îÄ‚îÄ legacy
    ‚îú‚îÄ‚îÄ global
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ aws
    ‚îú‚îÄ‚îÄ production
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ aws
    ‚îî‚îÄ‚îÄ staging
        ‚îî‚îÄ‚îÄ aws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the content is moved to legacy, the idea is to follow the &lt;a href="https://www.oreilly.com/library/view/97-things-every/9780596809515/ch08.html"&gt;Boy Scout rule&lt;/a&gt; in order to strangle the &lt;code&gt;legacy&lt;/code&gt; content little-by-little (unless you are really committed to migrate it all at once, which is going to be exhaustive).&lt;/p&gt;

&lt;p&gt;The Boy Scout rule goes like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; every time a task that involves deprecated code appears, we implement it on &lt;a href="https://dev.to/macunha/terraform-design-best-practices-1i0h"&gt;the new structure&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt; import the Terraform state to keep the Cloud resources that a given coderepresents/describes;&lt;/li&gt;
&lt;li&gt; remove the state and the code from &lt;code&gt;legacy&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Until there is nothing left inside &lt;code&gt;legacy&lt;/code&gt; (or there are only unused resources/left-behinds that could be destroyed/garbage collected either way).&lt;/p&gt;

&lt;p&gt;&lt;a id="org5230407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-state-remove-state-and-code-from-what-where"&gt;
  &lt;/a&gt;
  Import state? Remove state and code from what? Where?
&lt;/h3&gt;

&lt;p&gt;That will depend on the kind of resource we are migrating from remote state, on the bottom of each &lt;code&gt;resource&lt;/code&gt; on Terraform‚Äôs provider documentation you can find a reference command to import existing resources into your Terraform code specification. e.g.: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#import"&gt;AWS RDS DB instance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we want to replace the code of the AWS RDS Aurora defined in &lt;code&gt;production/aws&lt;/code&gt; and then re-implement the same using &lt;a href="https://github.com/terraform-aws-modules/terraform-aws-rds-aurora"&gt;the community module&lt;/a&gt;. After creating the corresponding sub-path to the monorepo according to your preference, provisioning the bucket and initializing the Terraform &lt;code&gt;backend&lt;/code&gt;:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  1.
&lt;/h3&gt;

&lt;p&gt;Implement the definition of the community module &lt;a href="https://github.com/terraform-aws-modules/terraform-aws-rds-aurora"&gt;github.com/terraform-aws-modules/terraform-aws-rds-aurora&lt;/a&gt; with the closest parameters from the existing one; e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"aws_aurora_main_cluster"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"terraform-aws-modules/rds-aurora/aws"&lt;/span&gt;
 &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 5.2"&lt;/span&gt;

 &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  2.
&lt;/h3&gt;

&lt;p&gt;Import the Terraform states from the previous (existing) cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform import &lt;span class="s1"&gt;'aws_aurora_main_cluster.aws_rds_cluster.this[0]'&lt;/span&gt; main-database-name
terraform import &lt;span class="s1"&gt;'aws_aurora_main_cluster.aws_rds_cluster_instance.this[0]'&lt;/span&gt; main-database-instance-name-01
terraform import &lt;span class="s1"&gt;'aws_aurora_main_cluster.aws_rds_cluster_instance.this[1]'&lt;/span&gt; main-database-instance-name-02

&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then if you haven‚Äôt yet and would like to ‚Äúmatch reality‚Äù between the existing and the specified resource, run &lt;code&gt;terraform plan&lt;/code&gt; a few times and adjust the parameters until Terraform reports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;No changes. Your infrastructure matches the configuration.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  3.
&lt;/h3&gt;

&lt;p&gt;Last but not least, remove the corresponding resources from the &lt;code&gt;legacy&lt;/code&gt; Terraform state so that it doesn‚Äôt try to keep track of the changes and also don‚Äôt try to destroy once the resource definition is no longer in that code base:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Hypothetical name of the resource inside production/aws/main.tf&lt;/span&gt;
terraform state &lt;span class="nb"&gt;rm &lt;/span&gt;aws_rds_cluster.default &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s1"&gt;'aws_rds_cluster_instance.default[0]'&lt;/span&gt; &lt;span class="s1"&gt;'aws_rds_cluster_instance.default[1]'&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;once that is performed, feel free to remove the corresponding resource‚Äôs definition from the &lt;code&gt;legacy&lt;/code&gt; code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_rds_cluster"&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_rds_cluster_instance"&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number_of_database_instances&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>terraform</category>
      <category>devops</category>
      <category>infrastructureascode</category>
      <category>cloud</category>
    </item>
    <item>
      <title>The cheat sheet about how display: flex and display: grid works</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 16 Aug 2021 18:01:49 +0000</pubDate>
      <link>https://dev.to/melnik909/the-cheat-sheet-about-how-display-flex-and-display-grid-works-5188</link>
      <guid>https://dev.to/melnik909/the-cheat-sheet-about-how-display-flex-and-display-grid-works-5188</guid>
      <description>&lt;p&gt;Friends, I made the cheat sheet that will help you learn how the CSS display property works. You can learn what happens when you use display: block, display: inline, display: flex and display: grid. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melnik909/embed/LYyXreW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
üòä If you like this post, please, &lt;a href="https://twitter.com/intent/tweet?text=Stas%20Melnikov%20told%20about%20all%20nuances%20of%20the%20display%20property%20www.codepen.io/melnik909/full/LYyXreW"&gt;share on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üñê I make free written accessibility review so that you don't make common mistakes. If you're interested in that chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct. Please, specify the subject of the email "Stas, need help" &lt;/p&gt;

&lt;p&gt;üëÄ Friends, I tell stories from my career on Substack. Join &lt;a href="https://stasmelnikov.substack.com"&gt;my free newsletter&lt;/a&gt;, if you're interested in my background or you want to get my updates first&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; Thank you so much, my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Sparrow plugin to run gitlab pipelines programmatically </title>
      <author>Alexey Melezhik</author>
      <pubDate>Mon, 16 Aug 2021 18:00:11 +0000</pubDate>
      <link>https://dev.to/melezhik/sparrow-plugin-to-run-gitlab-pipelines-programmatically-5113</link>
      <guid>https://dev.to/melezhik/sparrow-plugin-to-run-gitlab-pipelines-programmatically-5113</guid>
      <description>&lt;p&gt;Meet sparrow plugin &lt;a href="http://sparrowhub.io/plugin/gitlab-run-pipeline/0.000001"&gt;gitlab-run-pipeline&lt;/a&gt; to run gitlab pipelines through Raku API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;task-run "pipe-run", "gitlab-run-pipeline", %(
  debug =&amp;gt; True,
  project =&amp;gt; 1001,
  gitlab_api =&amp;gt; "https://git.company.com/api/v4/",
  variables =&amp;gt; %(
    color =&amp;gt; "green",
    size =&amp;gt; "big",
    use_salt =&amp;gt; True
  )
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>gitlab</category>
      <category>raku</category>
      <category>automation</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why It‚Äôs Super to Have a Super App</title>
      <author>Callstack Engineers</author>
      <pubDate>Mon, 16 Aug 2021 17:29:20 +0000</pubDate>
      <link>https://dev.to/callstackengineers/why-it-s-super-to-have-a-super-app-2ien</link>
      <guid>https://dev.to/callstackengineers/why-it-s-super-to-have-a-super-app-2ien</guid>
      <description>&lt;p&gt;Most mobile users have a dedicated application for a particular service or function. The more services they want to use, the more apps they need to install. No wonder that in 2020 alone there were &lt;a href="https://www.statista.com/statistics/271644/worldwide-free-and-paid-mobile-app-store-downloads/"&gt;218 billion app downloads&lt;/a&gt; (iOS App Store, Google Play and third-party Android stores combined) and the number is always growing.&lt;/p&gt;

&lt;p&gt;What if a number of these apps got consolidated into one? This is exactly the idea behind a super app ‚Äì an integrated ecosystem made of dedicated services called mini apps. And yes, like so many things in the world, it was made in China.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-super-app"&gt;
  &lt;/a&gt;
  What is a super app?
&lt;/h2&gt;

&lt;p&gt;A super app is a multi-purpose platform that offers a plethora of services through one mobile interface. The user can chat, check news, make daily purchases, call a taxi, and so on, and they don‚Äôt need to have separate apps to do the jobs. This is exactly a super app‚Äôs superpower: giving users the access to all functions in one place. &lt;/p&gt;

&lt;p&gt;The whole concept could be compared to a huge shopping mall that rents its space to interested retailers. When using a super app, you don‚Äôt leave the building, you just move around its premises. The ‚Äúmall‚Äù saves your preferences or payment details so each retailer knows how you want to pay and where they should deliver your purchase. Once introduced, all the details are there. That also means fewer registrations as only one sign-in is required.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cN0j6bNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmdu836stx31s5kthhci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cN0j6bNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmdu836stx31s5kthhci.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-of-super-apps-worldwide"&gt;
  &lt;/a&gt;
  Examples of super apps worldwide
&lt;/h2&gt;

&lt;p&gt;The super app emerged in China. The very first one, &lt;a href="https://www.wechat.com/"&gt;WeChat&lt;/a&gt;, was initially created as a messaging app (a Chinese counterpart to WhatsApp), and it soon evolved into a marketplace of various services and offerings. Now there are hundreds of public services, mini programs, coupons, bill payment options, etc., available for &lt;a href="https://www.businessofapps.com/data/wechat-statistics/"&gt;over a billion WeChat users&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All-in-one applications took the Asian market by storm with apps such as &lt;a href="https://global.alipay.com/"&gt;Alipay&lt;/a&gt;, &lt;a href="https://www.grab.com/"&gt;Grab&lt;/a&gt;, &lt;a href="https://www.gojek.com/"&gt;Gojek&lt;/a&gt; or &lt;a href="https://paytm.com/"&gt;Paytm&lt;/a&gt;, to name just a few. It soon became an international tech trend and now the key market players are either in the process of implementing a super app, e.g. Uber, or they are planning to upgrade to a super app, e.g. &lt;a href="https://www.forbes.com/sites/ronshevlin/2021/05/26/paypal-wants-to-be-a-super-app/"&gt;Paypal&lt;/a&gt;, &lt;a href="https://www.adjust.com/blog/super-apps-mobile-marketing/"&gt;Airbnb or Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#super-apps-super-opportunities"&gt;
  &lt;/a&gt;
  Super apps ‚Äì super opportunities
&lt;/h2&gt;

&lt;p&gt;There are good reasons why most giants strive to build a one-stop portal. Having a super app comes with a wealth of benefits. To start with, it‚Äôs convenient for both the user and business owner. For the former one, it means the comfort of downloading one app to access a bunch of services and hit the big market. In practical terms, it also means less registration and login hassle.&lt;/p&gt;

&lt;p&gt;For the latter one, it definitely means a long-term reduction of development and maintenance costs. Running a super app minimizes the challenges that might occur when developing and maintaining multiple apps. All in all, it means less effort made to reach a wider audience that is very likely to make in-app purchases you will earn from.&lt;/p&gt;

&lt;p&gt;The biggest selling point, however, is the all-in-one experience itself. Creating a one-stop shop for all things users need on a daily basis is almost bound to succeed. With a good plan and &lt;a href="https://callstack.com/team/"&gt;team of trusted app developers&lt;/a&gt;, your success should be just a matter of time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_JQkD1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljr5vscrahs8xtvhho3o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_JQkD1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljr5vscrahs8xtvhho3o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-super-apps"&gt;
  &lt;/a&gt;
  Developing super apps
&lt;/h2&gt;

&lt;p&gt;Super apps have the potential to reshape the mobile marketing landscape ‚Äì no wonder that more and more companies want to develop one! How to get started? &lt;/p&gt;

&lt;p&gt;First of all, your super app still needs to focus on one main service so you need to make sure this is already settled. WeChat did start as a messaging app and over time it did evolve into a super app, but it never moved away from its original purpose. It‚Äôs still a communication tool after all ‚Äì even way more advanced than it used to be.&lt;/p&gt;

&lt;p&gt;What do you need to develop a super app, technically speaking? There‚Äôs no ‚Äúone and only‚Äù path to doing it right. There are different approaches and solutions, depending on whether you want to go for native or &lt;a href="https://callstack.com/cross-platform-development-services?utm_campaign=Re_Pack&amp;amp;utm_source=dev.to&amp;amp;utm_medium=subpage&amp;amp;utm_content=cross_platform_services_dev_to"&gt;cross-platform development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Possible solutions you can adopt when designing a super app architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Native Android application with Feature Delivery&lt;/li&gt;
&lt;li&gt;Native iOS application with WebViews&lt;/li&gt;
&lt;li&gt;Cross-platform React Native application with Metro&lt;/li&gt;
&lt;li&gt;Cross-platform React Native application with Webpack and &lt;a href="https://callstack.com/re-pack?utm_campaign=Re_Pack&amp;amp;utm_source=dev.to&amp;amp;utm_medium=re_pack_subpage&amp;amp;utm_content=re_pack_subpage_clutch_link"&gt;Re.Pack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each solution addresses different needs and comes with different benefits. Given our experience, it‚Äôs better to adopt cross-platform solutions because native applications not only use different platform languages, but also require radically different architectures.&lt;/p&gt;

&lt;p&gt;Only React Native allows us to leverage a truly cross-platform &lt;a href="https://callstack.com/blog/code-splitting-in-react-native-applications/?utm_campaign=Re_Pack&amp;amp;utm_source=dev.to&amp;amp;utm_content=code_splitting_art"&gt;code splitting&lt;/a&gt; technique which enables super apps‚Äô implementation. Because of Webpack‚Äôs widely used and battle-tested code splitting, we can easily introduce it into React Native applications with the help of Re.Pack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4jgtiWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uhtkegy5x8eaepsgm7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4jgtiWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uhtkegy5x8eaepsgm7j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#super-future"&gt;
  &lt;/a&gt;
  Super future
&lt;/h2&gt;

&lt;p&gt;Super apps are spreading rapidly nowadays. The model is gaining popularity in &lt;a href="https://www.cnbc.com/video/2021/07/16/what-is-a-super-app-and-why-havent-they-gone-global.html"&gt;Latin America and Africa&lt;/a&gt;. Businesses from almost every market segment take interest in developing a super app. Even though the very definition of a super app may vary from continent to continent, the trend is there. And it‚Äôs there to stay!&lt;/p&gt;

&lt;p&gt;The worldwide use of super apps is spurring a new era in online shopping, payments and communication. Among the big brands that are planning to jump on the bandwagon are also social media giants such as Facebook or Twitter. That clearly means the super app landscape is going to further evolve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The super app quickly went mainstream in Asian countries ‚Äì with a mobile-first population, homogeneous markets, blocked competition, and huge government support, the evolution of a multi-purpose ecosystem seemed only natural. &lt;/p&gt;

&lt;p&gt;Most probably, the super app trend will continue to grow in and out of Asia. More and more companies worldwide see the potential of retaining their users within their all-in-one application. &lt;/p&gt;

&lt;p&gt;Building a super app can give you serious competitive advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The comfort of using only one place to get things done offers a unique user experience&lt;/li&gt;
&lt;li&gt;The fact you open up your space to different service providers lets you monetize your app easily &lt;/li&gt;
&lt;li&gt;The implementation of super apps gives you a stronger digital presence&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webpack</category>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (August 16, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 16 Aug 2021 17:01:06 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-august-16-2021-latest-mongodb-tutorials-events-podcasts-streams-2011</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-august-16-2021-latest-mongodb-tutorials-events-podcasts-streams-2011</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  üëã Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  üéì Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-cicd-pipelines-for-mongodb-realm-apps-using-github-actions"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/build-ci-cd-pipelines-realm-apps-github-actions/"&gt;How to Build CI/CD Pipelines for MongoDB Realm Apps Using GitHub Actions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/lauren_schaefer"&gt;Lauren Schaefer&lt;/a&gt; &lt;br&gt;
In this article, I'll walk you through how I crafted a CI/CD pipeline for a mobile app built with MongoDB Realm.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#new-realm-cocoa-data-types"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/realm-cocoa-data-types/"&gt;New Realm Cocoa Data Types&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/lee-maguire/"&gt;Lee Maguire&lt;/a&gt; &lt;br&gt;
In this blog post we will discover the new data types that Realm has to offer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#at-the-intersection-of-aiml-and-hci-with-douglas-eck-of-google-mongodb-podcast"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/mongodb-podcast-doug-eck-google-brain/"&gt;At the Intersection of AI/ML and HCI with Douglas Eck of Google (MongoDB Podcast)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mlynn"&gt;Michael Lynn&lt;/a&gt; &amp;amp; &lt;a href="https://www.mongodb.com/developer/author/anaiya-raisinghani/"&gt;Anaiya Raisinghani&lt;/a&gt; &lt;br&gt;
We are going to be diving headfirst into HCI (Human Computer Interaction), Google‚Äôs new GPT-3 language model.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#official-mongodb-events"&gt;
  &lt;/a&gt;
  üìÖ Official MongoDB &lt;a href="https://live.mongodb.com/events/#/calendar"&gt;Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you (virtual for now)! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Aug 19 (6:00pm GMT | Location) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-help-me-unsqlize-my-app/"&gt;Help me UnSQLize my app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aug 25 (4:00pm GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-realm-global-community-presents-deep-dive-into-coroutines-kotlin-flow-and-livedata/"&gt;Deep dive into Coroutines, Kotlin Flow and LiveData&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch"&gt;
  &lt;/a&gt;
  üì∫ MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community every Friday. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream - &lt;a href="https://youtu.be/FtY66SQdhos"&gt;Get Hyped: Using Docker + Go with MongoDB&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FtY66SQdhos"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;üçø &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  üéô Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4nQFFTDACplvuNNN9RuIXf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 68 - &lt;a href="https://open.spotify.com/episode/5BpusNFzpYQUsX0tyd6Ccy?si=So36Cd-nSaC8QPJ4tfVJug&amp;amp;dl_branch=1"&gt;Learning MongoDB Charts with Xixi Zhang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 69 - &lt;a href="https://open.spotify.com/episode/16u7s0GjBBCVYTwp9Qrvht?si=T9I0hVxjTxClNZsGeUTsDw&amp;amp;dl_branch=1"&gt;At the Intersection of AI/ML/HCI with Doug Eck of Google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 70 - &lt;a href="https://open.spotify.com/episode/2AqpryYRv3dVUiAJpfWPdp?si=bvDBcjCsQtOM7R8FYwHqHg&amp;amp;dl_branch=1"&gt;Scaling the Real Estate Industry with Jim McClarty of Keller Williams&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; üòä)&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  üåç MongoDB DevRel around the Interwebz
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üìÖ Upcoming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join Adrienne at &lt;a href="https://www.javascriptandfriends.com/"&gt;JavaScript &amp;amp; Friends&lt;/a&gt; on Aug 20th! She'll give her talk &lt;em&gt;Documentation: The Missing Pieces&lt;/em&gt;:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoPCw0B2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8Yb7PpX0AEC2rM.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcoWe1uT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1101665721153699845/1KspSSg3_normal.png" alt="JSandFriendsConf profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        JSandFriendsConf
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jsfriendsconf
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Register NowüéüÔ∏è- &lt;a href="https://t.co/pp19o5G1kQ"&gt;eventbrite.com/e/163395816285‚Ä¶&lt;/a&gt;&lt;br&gt;Join us on Aug-20 to hear &lt;a href="https://twitter.com/AdrienneTacke"&gt;@AdrienneTacke&lt;/a&gt; speak about Documentation- The Missing Pieces at JavaScript and Friends Conference 2021.&lt;br&gt;&lt;a href="https://twitter.com/hashtag/JSFriendsConf2021"&gt;#JSFriendsConf2021&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/TechConference"&gt;#TechConference&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Ohio"&gt;#Ohio&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DevCommunity"&gt;#DevCommunity&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:18 PM - 09 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424857645815640066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424857645815640066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424857645815640066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;üí° These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>mobile</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
