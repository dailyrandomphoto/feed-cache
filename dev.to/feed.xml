<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What Does a DevOps Engineer Do?</title>
      <author>Francesco Ciulla</author>
      <pubDate>Thu, 06 Jan 2022 21:41:43 +0000</pubDate>
      <link>https://dev.to/tinystacks/what-does-a-devops-engineer-do-5795</link>
      <guid>https://dev.to/tinystacks/what-does-a-devops-engineer-do-5795</guid>
      <description>&lt;p&gt;Hiring a DevOps Engineer for the first time? Knowing what to look for in a talented engineer can be a challenge. In this article, I discuss what you can expect from a DevOps Engineer in today's marketplace. I share some of my own experiences hiring DevOps Engineers in today's competitive labor market. Finally, I talk about cheaper alternatives to hiring a full-time DevOps Engineer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-do-you-need-a-devops-engineer"&gt;
  &lt;/a&gt;
  When Do You Need a DevOps Engineer?
&lt;/h2&gt;

&lt;p&gt;In my past articles,  &lt;a href="https://blog.tinystacks.com/stacks-stages-environments-definitions"&gt;I've discussed DevOps release pipelines, stacks, and stages in-depth&lt;/a&gt;. A release pipeline is a software-driven process that development teams use to promote application changes from development into production. The pipeline creates multiple stacks - full versions of your application - across multiple stages of deployment. &lt;/p&gt;

&lt;p&gt;A development team usually starts a pipeline automatically via a push to a source code control system, such as Git. The team then pushes the change set gradually through each stage (dev-&amp;gt;test-&amp;gt;staging-&amp;gt;prod), testing and validating their changes along the way. &lt;/p&gt;

&lt;p&gt;What I haven't discussed (directly, at least) is how &lt;em&gt;complicated&lt;/em&gt; this process is. A DevOps release pipeline is itself a piece of software. It requires code to run - and that code needs to be tested, debugged, and maintained. &lt;/p&gt;

&lt;p&gt;Many teams and small development shops get started without a dedicated DevOps engineer. Yours may be one of them! In these situations, a few team members generally own pieces of the pipeline and keep it running. Pipelines at this point are usually a mix of automated promotion and old-school manual deployment. &lt;/p&gt;

&lt;p&gt;However, as your application and requests from your customers grow, you may realize the lack of a dedicated DevOps engineer is slowing your team down. Some of the signs include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your team's velocity slows under the weight of its current (mostly manual) deployment processes. &lt;/li&gt;
&lt;li&gt;You have a somewhat automated deployment process but maintaining it is consuming more and more of the team's time. &lt;/li&gt;
&lt;li&gt;You realize after a high-profile failure that your release procedures need professional help. &lt;/li&gt;
&lt;li&gt;You know you should improve your deployment process but your team is so crushed with feature work that no one has time to spend on it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're facing down one or more of these issues, it may be time to hire a part-time or full-time DevOps Engineer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsibilities-of-a-devops-engineer"&gt;
  &lt;/a&gt;
  Responsibilities of a DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;A DevOps Engineer's role will likely look slightly different at every company. However, the following broad-based responsibilities tend to be common and consistent. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automate-the-full-release-pipeline"&gt;
  &lt;/a&gt;
  Automate the Full Release Pipeline
&lt;/h3&gt;

&lt;p&gt;A good release pipeline eliminates unnecessary manual steps and reduces the time required to deploy changes to your application. Building and maintaining this pipeline is the DevOps Engineer's primary job. &lt;/p&gt;

&lt;p&gt;DevOps Engineers usually craft release pipelines using  &lt;a href="https://blog.tinystacks.com/using-codebuild-and-codepipeline-to-deploy-aws-applications-easily"&gt;a Continuous Integration/Continuous Development tool&lt;/a&gt;. Tools  &lt;a href="https://www.katalon.com/resources-center/blog/ci-cd-tools/"&gt;such as Jenkins, Atlassian, GitLab, and Azure DevOps&lt;/a&gt; integrate with source code control tools (usually Git) and handle triggering automated actions in response to repository check-ins. If your team already uses such a tool and is committed to it, you'll want to find someone proficient in your specific CI/CD toolset. &lt;/p&gt;

&lt;p&gt;Many CI/CD toolsets offer a set of predefined actions to assist with the CI/CD process. However, other actions will be specific to your team's application. A DevOps engineer uses one or more scripting languages to automate complicated deployment tasks your team may have been executing manually. Python, JavaScript, shell scripting, and PowerShell (on Windows)  &lt;a href="https://www.devopsuniversity.org/what-programming-languages-are-used-by-a-devops-engineer/"&gt;are some of the more popular scripting languages that DevOps Engineers use&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For cloud-deployed software, a DevOps Engineer is also responsible for setting up the entire stack on which the application runs using  &lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;Infrastructure as Code&lt;/a&gt;. A DevOps Engineer should be able to design and implement a stack deployment that can be deployed multiple times to any stage of your release pipeline. &lt;/p&gt;

&lt;p&gt;Some engineers implement Infrastructure as Code using a scripting language such as Python. However, it's more common to use a templating language, such as  &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation on AWS&lt;/a&gt; or  &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview"&gt;Azure Resource Manager (ARM) Templates&lt;/a&gt; on Azure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-best-practices-for-software-development"&gt;
  &lt;/a&gt;
  Setting Best Practices for Software Development
&lt;/h3&gt;

&lt;p&gt;As part of setting up the build and release pipeline, your DevOps guru will also define best practices for coding and validation of changes. In other words, they're the point person for your team's  &lt;a href="https://blog.tinystacks.com/pipeline-approvals-manual-automatic"&gt;change management approval process&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For example, a DevOps Engineer may work with their team to devise the best way to manage the overall work process. For most teams, this usually means adopting an Agile approach to software development  &lt;a href="https://www.planview.com/resources/guide/introduction-to-kanban/kanban-vs-scrum/"&gt;such as Scrum or Kanban&lt;/a&gt;. It could also mean defining a code review process and teaching the team how to conduct good reviews. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitor-builds-and-deployments"&gt;
  &lt;/a&gt;
  Monitor Builds and Deployments
&lt;/h3&gt;

&lt;p&gt;The DevOps Engineer is responsible for ensuring the continued health of the team's CI/CD pipeline. This includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitoring build progress and logs from your team's CI/CD tool&lt;/li&gt;
&lt;li&gt;Moving quickly to resolve broken builds and keep changes flowing through the pipeline&lt;/li&gt;
&lt;li&gt;Observing dashboard metrics as new instances of the application come online&lt;/li&gt;
&lt;li&gt;Staying alert for errors as your deployment shifts more users over to the new version of your application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Monitoring should occur in all stages of the pipeline.  &lt;a href="https://www.atlassian.com/devops/devops-tools/devops-monitoring"&gt;As Atlassian points out&lt;/a&gt;, pre-production monitoring means you can stomp out critical errors before they ever reach customers. &lt;/p&gt;

&lt;p&gt;Depending on the size of your organization, the DevOps Engineer may supervise all of this themselves. They may also work in conjunction with a Sustained Engineering or Support team that's ultimately responsible for maintaining application health. In either case, your DevOps Engineer should take the lead in defining what the team needs to monitor. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-the-git-guru"&gt;
  &lt;/a&gt;
  Be the Git Guru
&lt;/h3&gt;

&lt;p&gt;Ahhh, Git. The free source code control system is a marvelous invention. You can't be a developer nowadays and not know at least the basics of Git. And yet even seasoned developers will sometimes find themselves mired in Merge Conflict Hell. &lt;/p&gt;

&lt;p&gt;A team's DevOps Engineer should know Git inside and out. They should understand, for example,  &lt;a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing"&gt;the difference between a merge and a rebase&lt;/a&gt; - and which one to use when. They are the person primarily responsible for defining the team's branching and merging strategy - and maintaining quality internal documentation for other team members.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-look-for-in-a-devops-engineer"&gt;
  &lt;/a&gt;
  What to Look for in a DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;As an engineering manager, I've hired multiple DevOps engineers. During the interview process, my loops focus on validation a combination of technical and soft skills: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps knowledge&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Does the candidate have the basics of CI/CD down pat? What successes have they accumulated in developing successful pipelines? What setbacks have they encountered - and how have they overcome them? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud platform and DevOps tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In what DevOps tools is your candidate most experienced? Do they know the tools your team is already using? &lt;/p&gt;

&lt;p&gt;A DevOps Engineer will also need to make numerous decisions on whether to buy or build certain parts of the DevOps process. For example, does your team roll its own artifact storage features? Or does it leverage a tool like  &lt;a href="https://jfrog.com/artifactory/"&gt;Artifactory&lt;/a&gt;? DevOps Engineers need to remain up to speed on the tools marketplace so they can make these critical buy vs. build decisions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leadership&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A DevOps Engineer needs to do more than build a pipeline. They need to convince a (sometimes reluctant) team of engineers and stakeholders to change the way they develop software. Does your candidate have experience talking a tough crowd into adopting new processes? &lt;/p&gt;

&lt;p&gt;As a manager, I like to use  &lt;a href="https://www.indeed.com/career-advice/interviewing/how-to-use-the-star-interview-response-technique"&gt;STAR (Situation-Task-Action-Result) questions&lt;/a&gt; to determine a candidate's experience with being a technical leader. So I might ask something like, "Tell me about a time when you received pushback from your team on a process change. What was it and how did you resolve it?" &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Growth mindset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The DevOps and cloud spaces are changing constantly. So it's important that a DevOps Engineer not get overly set in their ways. &lt;/p&gt;

&lt;p&gt;I also like to use STAR questions to gauge a candidate's willingness to grow. For example, what's the last thing that they learned just because it looked interesting? Did they end up using it on the job? If so, what was the result? &lt;/p&gt;

&lt;p&gt;Alternatively, I may ask when was the last time they received critical feedback from their manager. What was it? And how did they use that feedback to improve their job performance? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-hiring-a-fulltime-devops-engineer"&gt;
  &lt;/a&gt;
  Alternatives to Hiring a Full-Time DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;You've determined that you need more DevOps savvy in your org. But that doesn't mean you need to start off with a full-time position out of the gate. Maybe you can't afford a full-time position at the moment. Or perhaps you'd just like to test the waters before diving in with both feet. &lt;/p&gt;

&lt;p&gt;Fortunately, there are a couple of alternatives to hiring someone full-time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hire-a-parttime-devops-engineer"&gt;
  &lt;/a&gt;
  Hire a Part-Time DevOps Engineer
&lt;/h3&gt;

&lt;p&gt;You may not need (nor even desire) a full-time team member. It may be enough to hire someone on a part-time basis to construct and maintain your build and release pipeline.&lt;/p&gt;

&lt;p&gt;In this scenario, you'd want to find a DevOps Engineer who's good at building self-service solutions. Your team should be able to kick off builds, perform releases, and monitor rollouts without having a full-time DevOps Engineer on call to oversee a successful outcome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrate-to-tinystacks"&gt;
  &lt;/a&gt;
  Migrate to TinyStacks
&lt;/h3&gt;

&lt;p&gt;Another option? Forego the engineer! You can potentially save both time and money by adopting a DevOps tool that essentially provides you "DevOps as a service". &lt;/p&gt;

&lt;p&gt;TinyStacks is one such tool. Built by a team with deep experience building out the Amazon Web Services console, TinyStacks provides an automated approach to DevOps. Using a simple UI Web interface, your team can migrate its application into a full release pipeline - complete with AWS cloud architecture - within the week. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.tinystacks.com/"&gt;Read a little more on what TinyStacks can do for you&lt;/a&gt;  and contact us below to start a discussion!&lt;/p&gt;

&lt;p&gt;Article by Jay Allen&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>These were my favorite apps of 2021</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 06 Jan 2022 21:15:47 +0000</pubDate>
      <link>https://dev.to/fernandocutire/these-were-my-favorite-apps-of-2021-2nof</link>
      <guid>https://dev.to/fernandocutire/these-were-my-favorite-apps-of-2021-2nof</guid>
      <description>&lt;p&gt;This is not some kind of paid promotion. Just that sometimes are curious about what other people use in a daily basis.&lt;/p&gt;

&lt;p&gt;When I ask, I get different responses and is cool to have this variety.&lt;/p&gt;

&lt;p&gt;So I present my favorite apps/software of the last year&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-favorite-apps"&gt;
  &lt;/a&gt;
  My favorite apps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#calm"&gt;
  &lt;/a&gt;
  Calm
&lt;/h3&gt;

&lt;p&gt;A sleep and meditation app, has a ton of meditation exercises and calm music. Really an amazing app , i wish it has a better web app but for now it’s ok.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dashlane"&gt;
  &lt;/a&gt;
  Dashlane
&lt;/h3&gt;

&lt;p&gt;This password manager is really useful. By now it makes all that it needs to do. Also it has VPN, and a dark web email analyzer. It is a really great password manager.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggl"&gt;
  &lt;/a&gt;
  Toggl
&lt;/h3&gt;

&lt;p&gt;It is a time tracker useful when working on different projects and clients. For me i use it to know how many time i spent on different topics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rescuetime"&gt;
  &lt;/a&gt;
  Rescuetime
&lt;/h3&gt;

&lt;p&gt;Another time tracker, this really blows my mind. It can track without specifying some task. When i open my PC it begins to track, really useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#os-ubuntu"&gt;
  &lt;/a&gt;
  OS: Ubuntu
&lt;/h3&gt;

&lt;p&gt;This was the year i began to use linux. Ubuntu has make things easier in development, although i had audio related issues, and the os freeze sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connnect"&gt;
  &lt;/a&gt;
  Let's connnect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter &lt;a class="mentioned-user" href="https://dev.to/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there&lt;/p&gt;

</description>
      <category>software</category>
      <category>apps</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to create a PyPi (Python) package</title>
      <author>Kalob Taulien</author>
      <pubDate>Thu, 06 Jan 2022 21:04:03 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-to-create-a-pypi-python-package-3g52</link>
      <guid>https://dev.to/kalobtaulien/how-to-create-a-pypi-python-package-3g52</guid>
      <description>&lt;p&gt;Have you ever wanted to create a Python package so you can type the following?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;my-awesome-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If so, this tutorial is for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-getting-poetry"&gt;
  &lt;/a&gt;
  1. Getting Poetry
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; is a system package you can use to &lt;strong&gt;very easily&lt;/strong&gt; manage your Python Packages. &lt;/p&gt;

&lt;p&gt;It makes handling your packages super easy. I have 9 Python packages under my name, and this is by far the best solution. &lt;/p&gt;

&lt;p&gt;First, you need to install Poetry on your system. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#osx-linux-bashonwindows-install-instructions"&gt;
  &lt;/a&gt;
  osx / linux / bashonwindows install instructions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-sSL&lt;/span&gt; https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-powershell-install-instructions"&gt;
  &lt;/a&gt;
  windows powershell install instructions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;Invoke-WebRequest &lt;span class="nt"&gt;-Uri&lt;/span&gt; https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py &lt;span class="nt"&gt;-UseBasicParsing&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.Content | python -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://python-poetry.org/docs/#installation"&gt;More details about installation here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can type &lt;code&gt;poetry --version&lt;/code&gt; to see the version you're running. If this doesn't work for you, try closing and re-opening your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-a-poetry-project"&gt;
  &lt;/a&gt;
  2. Creating a Poetry project
&lt;/h2&gt;

&lt;p&gt;In this tutorial we're going to create a new package from scratch. &lt;/p&gt;

&lt;p&gt;Go ahead and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry new test-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the docs mention, it'll create a new folder with a bunch of files for you that are structured like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test-package
├── pyproject.toml
├── README.rst
├── test_package
│   └── __init__.py
└── tests
    ├── __init__.py
    └── test_test_package.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-adding-your-code"&gt;
  &lt;/a&gt;
  3. Adding your code
&lt;/h2&gt;

&lt;p&gt;Create a new file in &lt;code&gt;test-package/test_package/&lt;/code&gt; called &lt;code&gt;myfile.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your file structure should look like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test-package
├── pyproject.toml
├── README.rst
├── test_package
│   ├── __init__.py
│   └── myfile.py  # &amp;lt;- This is new
└── tests
    ├── __init__.py
    └── test_test_package.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of your code will go in the &lt;code&gt;test_package/&lt;/code&gt; folder. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This folder name will be different if you used a different package name during step 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can add any files you want in this folder. This is what get's bundled in your package.&lt;/p&gt;

&lt;p&gt;Now in your &lt;code&gt;myfile.py&lt;/code&gt; file, add this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Later we can use this code like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test_package.myfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👆 We'll get to that later, first we need to build the package. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-building-your-package"&gt;
  &lt;/a&gt;
  4. Building your package
&lt;/h2&gt;

&lt;p&gt;So far we just have a bunch of code sitting on our computer and if someone else wants to use our code, they need to copy all the files and folders. &lt;/p&gt;

&lt;p&gt;Let's "build" the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take all your code, bundle it, and put it in a versioned file inside of a &lt;code&gt;/dist/&lt;/code&gt; folder. The file should look something like this: &lt;code&gt;test-package-0.1.0.tar.gz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will also create a wheel file for you that looks something like this: &lt;code&gt;test_package-0.1.0-py3-none-any.whl&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-testing-your-code-in-other-virtual-environments"&gt;
  &lt;/a&gt;
  5. Testing your code in other virtual environments
&lt;/h2&gt;

&lt;p&gt;Now what I like to do is test my package in a brand new virtual environment. &lt;/p&gt;

&lt;p&gt;Create a new virtual env in a new folder somewhere else on your computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;testenv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;testenv 
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv .venv/ 
&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Your virtual env will be created differently if you're on Windows. You can use virtualenv, pipenv, Docker, etc. It just needs to be a fresh environment. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you're in a new Python environment, copy that .tar.gz from from earlier into this folder. (I usually use the operating systems OS for this, but there's nothing wrong with using &lt;code&gt;cp&lt;/code&gt; to copy the file). The only file in this virtual environment should be your .tar.gz file. &lt;/p&gt;

&lt;p&gt;Now install this file with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;test-package-0.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming everything went well, let's test this out. &lt;/p&gt;

&lt;p&gt;Open a new Python shell (REPL) with:&lt;br&gt;
&lt;code&gt;python&lt;/code&gt; (on non-Windows) or &lt;code&gt;py&lt;/code&gt; on Windows. And type this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test_package.myfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_function&lt;/span&gt;

&lt;span class="n"&gt;custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kalob"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should print out &lt;code&gt;Hello Kalob!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And just like that, you have create a bundled package. But it's not available for everybody just yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-push-it-to-github"&gt;
  &lt;/a&gt;
  6. Push it to GitHub
&lt;/h2&gt;

&lt;p&gt;At this stage I like to push my code up to GitHub. &lt;/p&gt;

&lt;p&gt;Because we're making a public package, I tend to make my repo's public as well. No use hiding the source code when it will be easily downloaded from PyPi.org anyway. &lt;/p&gt;

&lt;p&gt;Dont forget to add &lt;code&gt;/dist/&lt;/code&gt; and other files to your .gitignore file. The &lt;code&gt;/dist/&lt;/code&gt; folder is where your bundled code goes when it's built by Poetry. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-publish-the-package"&gt;
  &lt;/a&gt;
  7. Publish the package
&lt;/h2&gt;

&lt;p&gt;Now let's publish this code on PyPi.org. &lt;/p&gt;

&lt;p&gt;First, you need a free &lt;a href="https://pypi.org/"&gt;PyPi.org&lt;/a&gt; account.  You'll need your username and password handy because Poetry will ask for it so it can upload your file to PyPi and associate it with your account. &lt;/p&gt;

&lt;p&gt;Once you have a free PyPi account, go ahead and run this in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask for your username and password. Go ahead and type those in. &lt;/p&gt;

&lt;p&gt;And now your package will be on PyPi.org. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the package of &lt;code&gt;test-package&lt;/code&gt; already exists, or at one point existed, on PyPi.org you &lt;em&gt;cannot&lt;/em&gt; use the same name. Making your Python packages have unique names is the best way to avoid this problem. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you didn't run into a naming problem, you'll have successfully published a package to PyPi.org! &lt;/p&gt;

&lt;p&gt;Congrats!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-install-your-package-using-pip"&gt;
  &lt;/a&gt;
  8. Install your package using pip
&lt;/h2&gt;

&lt;p&gt;Assuming your package is now on PyPi, let's install your package in another project and test it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;test-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything should work as expected now. And your code is now easily accessible to every Python developer. 🎉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-repo"&gt;
  &lt;/a&gt;
  Example repo
&lt;/h2&gt;

&lt;p&gt;If you'd like to see a simple package I recently created for &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt; take a look at &lt;a href="https://github.com/arbington/python-vimeo"&gt;python-vimeo on GitHub&lt;/a&gt; and feel free to use any part of that repo. That's why we open sourced it! :) &lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>4 years of taking online education taught me this (first year) Pt1</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 06 Jan 2022 20:51:57 +0000</pubDate>
      <link>https://dev.to/fernandocutire/5-years-of-taking-online-education-taught-me-this-first-year-pt1-eeh</link>
      <guid>https://dev.to/fernandocutire/5-years-of-taking-online-education-taught-me-this-first-year-pt1-eeh</guid>
      <description>&lt;p&gt;Online courses are everywhere, and every day there are more. &lt;br&gt;
This is not going anywhere, and don't expect that it would slow down.&lt;/p&gt;

&lt;p&gt;In a series of articles, I will explain my approach to online education. &lt;/p&gt;

&lt;p&gt;This is written in a personal way, maybe you can relate. It wasn't always perfect, I was really slow and the start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-this-was-the-first-year"&gt;
  &lt;/a&gt;
  So this was the first year.
&lt;/h1&gt;

&lt;p&gt;In my first year, I discover online courses, but I didn’t see it as a way that can help me at the time. &lt;/p&gt;

&lt;p&gt;I would only say to myself, this looks good but I don’t feel pressured to finish it, maybe someday, like when I am looking for a job I will have better reasons&lt;/p&gt;

&lt;p&gt;As you may know, my way of thinking was not very mature, and it wasn’t because I was at school with so many hours and for me, it was not a big deal to finish.&lt;/p&gt;

&lt;p&gt;The topics that interested me at the time were mainly programming and business. I enroll in 3 free udemy courses and paid for 3. I remember that I just completed 2 but because it was 2 hours or less, so no big deal.&lt;/p&gt;

&lt;p&gt;As you may know, some Udemy Courses can get through 30 hours of content, and this makes it hard to finish. At the time I thought that more content meant that the course was better, but obviously, I was mistaken.&lt;/p&gt;

&lt;p&gt;Finally, it is important to say that I just took courses from Spanish speakers instructors so as you may think, the offer was not very high back then.&lt;/p&gt;

&lt;p&gt;This series will continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connnect"&gt;
  &lt;/a&gt;
  Let's connnect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter  &lt;a href="https://twitter.com/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My First React Project &amp; React State | Day 5 &amp; 6</title>
      <author>Web.Developer.io</author>
      <pubDate>Thu, 06 Jan 2022 20:35:34 +0000</pubDate>
      <link>https://dev.to/developerioweb/my-first-react-project-react-state-day-5-6-4b21</link>
      <guid>https://dev.to/developerioweb/my-first-react-project-react-state-day-5-6-4b21</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;The State is a &lt;strong&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/strong&gt; where we store our values that belongs to the Component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what are Objects🤔 ??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So we have heard about the &lt;strong&gt;&lt;code&gt;variables&lt;/code&gt;&lt;/strong&gt; , they are the containers which used to store the data values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Objects are also Variable but they can contain many values.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tesla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;But we already have &lt;strong&gt;&lt;code&gt;props&lt;/code&gt;&lt;/strong&gt; then why we need the &lt;strong&gt;&lt;code&gt;State.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Props used to pass data to Component but we can’t change the data once passed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;But state is used to store the Dynamic data .&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s helps in making the &lt;strong&gt;Dynamic Web Application.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also we need something which keep track what is happing in our Application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State is Designed to Change in Response to the Event.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTecpfkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ese91i41zs7kt01auyse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTecpfkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ese91i41zs7kt01auyse.png" alt="React State" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As u can see in the above example the uses of state.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use state to find out like whether a user is logged-in or logged-out and display the different Screen depending upon the case.&lt;/p&gt;

&lt;p&gt;So every time we are doing something we are changing the State of our Component like we click to &lt;code&gt;read more&lt;/code&gt; and the text expands this is also a state change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also there are 2 types of State changes which state keep track of&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI Logic → When we are changing the State of the Interface&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt; we click on some button and a pop-up opens so this comes under the UI logic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Business Logic → When we are changing the state of the Data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt; we are Deleting some message. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;To use the State u should use the class Component instead of Functional Component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React state is an Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;like if u did &lt;code&gt;this.state&lt;/code&gt; same as the &lt;code&gt;this.props&lt;/code&gt; it will return a object which will have the key-value pairs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;we set/initialize the state in the Constructor Function.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cld-RpRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr7khqvyn0xn091knxff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cld-RpRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr7khqvyn0xn091knxff.png" alt="Constructor" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing is that we have to declare/initialize our State but in the case of props they are already Declared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;did&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;give&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; 

&lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;give&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;nothing&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; 
&lt;span class="nx"&gt;rendered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code Explanation →&lt;/strong&gt;&lt;br&gt;
So the Code Look like this👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have made a Constructor which take &lt;code&gt;props&lt;/code&gt; as an argument after that we have call the Super with props as Argument &lt;/p&gt;

&lt;p&gt;So to explain this thing let’s first understand the use of the super&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look at the Code Below&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inside Constructor of Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inside the Constructor of App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;When u ran this , a error will pop-up that say.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dW01uq4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8n861q4d18hzs2xmzy0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dW01uq4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8n861q4d18hzs2xmzy0.png" alt="Error" width="880" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so we have to use the &lt;code&gt;Super&lt;/code&gt; to use the functionality of the derived class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/-Pro/pen/yLzqYzQ?editors=0010"&gt;React State&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why we use the props as a argument in the Super 🤔?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As u know that the props are pre-declared and accessible throughout the Component But they are not accessible inside the Constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ScoreKeeper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;constrctor&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=**&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Score : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If u try to run , this will give the error cuz the props are not accessible inside the constructor to use them we should use &lt;code&gt;**super(props)&lt;/code&gt;;**&lt;/p&gt;

&lt;p&gt;So when we need to use the props inside the Constructor we should take them as a argument otherwise not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#another-way-of-defining-the-state"&gt;
  &lt;/a&gt;
  Another way of Defining the State
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ScoreKeeper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Score : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;So we can also define like this&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;But this isn’t a valid JavaScript , Babel Convert it in the valid JavaScript code.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-states%E2%86%92"&gt;
  &lt;/a&gt;
  Setting States→
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0VNdxfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6u6sm02524cgrujglgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0VNdxfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6u6sm02524cgrujglgt.png" alt="Changing States" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this.setState() expects an object to be passed as an Argument also u can pass a Function in this or there are other ways of using this also.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Also the keys which we passed as an Object are changes and other remains unchaged.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;This process is Asynchronous → Means React will not do it Immediately.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Don&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t do like this to change the state**
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don’t use the setState() method inside the Constructor Function and also not in the render.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 👇&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maketimer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;maketimer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-first-project"&gt;
  &lt;/a&gt;
  My First Project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pokedex-99321.herokuapp.com/"&gt;&lt;strong&gt;PokeGame 👆&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a PokeGame Project which render 2 pokedex each having 4-4 Pokemon and it will compare the Exp of both the pokedexes and declare the Winner &amp;amp; Loser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!🙂&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Future of Color in CSS</title>
      <author>Kathryn Grayson Nanz</author>
      <pubDate>Thu, 06 Jan 2022 20:03:32 +0000</pubDate>
      <link>https://dev.to/kathryngrayson/the-future-of-color-in-css-5316</link>
      <guid>https://dev.to/kathryngrayson/the-future-of-color-in-css-5316</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-past"&gt;
  &lt;/a&gt;
  The Past
&lt;/h2&gt;

&lt;p&gt;We’ve always known that the way colors are represented on a monitor doesn’t encompass the full width and breadth of colors that the human eye can perceive. As always, art is limited by the technology of the time – ages ago, color decisions were limited based on the relative expense of various dyes or paint colors to produce. That’s why purple is associated with royalty in many western cultures; purple dyes used to be quite expensive, so wearing purple clothes was a real flex! Similarly, early computers were limited to green text on a black background because the monochrome monitors used phosphor, and green phosphor was the brightest and had the longest afterglow (which helped disguise the low refresh rates). Heck, if you’ve been doing web design or development for a while, you probably remember the list of 216 “web-safe” colors we were limited to in the 90s! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-present"&gt;
  &lt;/a&gt;
  The Present
&lt;/h2&gt;

&lt;p&gt;Similarly, the way we’re used to writing RGB colors now has a lot to do with the limitations of the time it was created. For instance, did you know that the reason RGB colors are defined on a scale from 0 to 255 is because a color is stored in three bytes of data (one for red, one for green, and one for blue)? So, if we were to take things all the way back to the binary, we’d see &lt;code&gt;00000000 - 00000000 - 00000000&lt;/code&gt; as the code for pure black and &lt;code&gt;11111111 - 11111111 - 11111111&lt;/code&gt; as the code for pure white – all off, or all on, basically. When we convert from binary to decimal, &lt;code&gt;1111111&lt;/code&gt; converts to &lt;code&gt;255&lt;/code&gt;. So, when we’re defining RGB colors, we’re really telling each one of those subpixels in an RGB display what binary value we want it to take...but it’s a lot faster and easier for us to write them in the decimal value shorthand. Kind of cool, right? Like, we abstractly know that it’s all 1s and 0s in the end, but I think it can be a lot of fun to see the curtain pulled back in this way. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--poHca8rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rffrjwdywf6ny6bfa157.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--poHca8rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rffrjwdywf6ny6bfa157.gif" alt="RGB pixels" width="600" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://www.quora.com/Why-in-RGB-the-biggest-number-for-any-particular-color-is-255#:~:text=The%20reason%20it%20is%20255,lowest%2C%20255%20is%20the%20highest"&gt;https://www.quora.com/Why-in-RGB-the-biggest-number-for-any-particular-color-is-255#:~:text=The reason it is 255,lowest%2C 255 is the highest&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-the-future"&gt;
  &lt;/a&gt;
  Back to the Future
&lt;/h2&gt;

&lt;p&gt;Today, we’re seeing the shift from LCD to OLED screens, which opens up a whole new array of newly displayable colors for our usage. That new color set is known as &lt;strong&gt;P3&lt;/strong&gt;, and it’s about 50% larger than our current RGB color set – which is pretty great, right?. It mean we’ll be able to design using brighter and more vibrant colors. But, we also know that it won’t be the &lt;em&gt;last&lt;/em&gt; color set; the human eye is capable of seeing even more colors than we can currently represent on OLED screens. The set beyond P3 is known as Rec. 2020, and it’s what you can currently see on ultra-high definition displays (like when you see a TV advertised as being “4K UHD”) – although some of those still only support 90-97% of the full Rec. 2020 range. &lt;/p&gt;

&lt;p&gt;The important thing to take away from this is that P3 is the next – but &lt;em&gt;not&lt;/em&gt; the last – color set available to us as developers, which meant that it was important for us to define a color syntax that could grow with us...unlike, unfortunately, the RGB model, which is too limited to use with P3 colors. What we’ve been referring to as RGB colors will be known moving forward as sRGB; the S is for “standard”. You might also start to see reference to “wide-gamut” color support, which is just a quick way to say “able to support more colors than an sRGB display”. &lt;/p&gt;

&lt;p&gt;It’s possible to automatically convert from sRGB to P3 (or backwards), but when that’s done by an algorithm, it can distort the colors slightly from what the designer intended. That means we needed a new way for developers and designers to define color in CSS – one that’s not limited to the sRGB color model the way &lt;code&gt;rgb()&lt;/code&gt;, &lt;code&gt;hsl()&lt;/code&gt; or hex are. There are a few options out there for defining P3 colors, all from the CSS Color Module Level 4.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options-for-writing-p3-colors-in-css"&gt;
  &lt;/a&gt;
  Options for Writing P3 Colors in CSS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-colordisplayp3-0-0-0-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;color(display-p3 0 0 0)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In this syntax, we begin by specifying the color display type, which for our purposes would be &lt;code&gt;display-p3&lt;/code&gt; but could also be &lt;code&gt;srgb&lt;/code&gt; or &lt;code&gt;rec2020&lt;/code&gt;. Then, the three numbers are kind of an updated version of how we used to define sRGB color: each number still represents red, green, and blue (in that order), but instead of maxing out at 255, it now functions on a scale from 0 to 1, with 1 being equal to 100% (the same way we define opacity). So, if we wanted a color that was 100% pure red, we’d write it like &lt;code&gt;color(display-p3 1 0 0)&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;This method is nice, because it’s a very similar syntax to the stuff we’re already familiar with – no big learning curve on the developer end. However, some argue that it’s actually less useful since the RGB approach to defining color is unintuitive. Which is true; it’s hard to fine-tune an RGB defined color in the code alone, unless you’re some kind of color and code wizard. For example, if you have a color that’s &lt;code&gt;color(display-p3 0.6 0.44 0.89)&lt;/code&gt; how do you make it darker? How do you make it brighter? You’d almost always have to go back to some kind of color selection tool and adjust the color there, then derive a new RBG color value to copy into your code. Kind of a pain. Which brings us to...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lab0-0-0-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lab(0% 0 0)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lab()&lt;/code&gt; syntax is a method of defining colors based on lightness and color channels. In fact, that’s what the L in &lt;code&gt;lab&lt;/code&gt; stands for: Lightness! Lightness, Color Channel A, and Color Channel B. Lightness is defined on a scale from 0-100%, with 0 being completely dark and 100% being the lightest it can go. The color channels work a little bit differently than we might be accustomed to; they define color as a value between two ends of a spectrum, going from -128 to 127 (which, spoiler alert, is a total spectrum of 255 values). Channel A works on a spectrum between red and green, and channel B works on a spectrum between blue and yellow. In both situations, 0 would be the exact middle – grey. Picture an X shape, with green to red being one crossbar and blue to yellow being the other. &lt;code&gt;lab(50% -40 60)&lt;/code&gt; allows us to plot on that graph, but also adds a new value at the very beginning to define lightness on a scale from 1-100%. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oMgOsUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0ikf4w4k3lw0xlatwl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oMgOsUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0ikf4w4k3lw0xlatwl.jpg" alt="lab_colourspace_3.jpg" width="348" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://www.colourphil.co.uk/lab_lch_colour_space.shtml"&gt;https://www.colourphil.co.uk/lab_lch_colour_space.shtml&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lch0-0-0-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lch(0% 0 0)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lch()&lt;/code&gt; syntax is similar, but not quite the same as &lt;code&gt;lab()&lt;/code&gt; – it might even be &lt;em&gt;more&lt;/em&gt; easy to use. The L still stands for lightness, and the scale works in exactly the same way: 0-100% to control the lightness of the color. However, the next two values are different; the C stands for chroma, and the H for hue. Chroma is the saturation or intensity of the color, with 0 being grey and 230 (the "max" value) being the highest vividness. Technically, that upper value is limitless, but in practice you'll never (currently) see it go higher than 230. Hue, as you probably guessed, is the color itself. It works on a scale from 0 to 360 (representing the color wheel), with each number representing a hue in the available spectrum. This approach is nice because it’s an incredibly intuitive approach to color. The L and C values correlate really well to the “brightness” and “saturation” controls that we’ve become really accustomed to through things like instagram filters or color picker UI tools. If you want to play around with it a little bit, &lt;a href="https://css.land/lch/"&gt;this LCH Color Picker&lt;/a&gt; can really help you visualize how it works. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aKTjdRrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbkk02b7nyvcvp6oh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKTjdRrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbkk02b7nyvcvp6oh.jpg" alt="lch_colourspace_3.jpg" width="348" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://www.colourphil.co.uk/lab_lch_colour_space.shtml"&gt;https://www.colourphil.co.uk/lab_lch_colour_space.shtml&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Oh, and in case you were wondering about alpha values (aka: transparency), it works the same way it did before (on a scale from 0 to 1) and can be appended to the end of any of these three new CSS syntaxes by adding a slash after the values within the parenthesis. So a new color value defined in LCH, for example, would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;lch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;66&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;132&lt;/span&gt; &lt;span class="err"&gt;359&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;65&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#great-when-can-i-start"&gt;
  &lt;/a&gt;
  Great, when can I start?
&lt;/h2&gt;

&lt;p&gt;As always, the bad news with future tech is that...well, it’s still mostly in the future! This stuff has only recently been finalized in the CSS specs, so that when P3 color is widely adopted the CSS is already there to support it. Most browsers right now don’t support P3 color. Here’s a quick overview on what &lt;em&gt;is&lt;/em&gt; currently supported, as of Jan 1, 2022. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CSS&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;FF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;color()&lt;/td&gt;
&lt;td&gt;Yes, v15+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lab()&lt;/td&gt;
&lt;td&gt;Yes, v15+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lch()&lt;/td&gt;
&lt;td&gt;Yes, v15+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Suffice to say, it’s officially on its way...but not quite here. That being said, it’s fully supported in Safari &lt;em&gt;right now&lt;/em&gt;, so if you want to start playing around with this new approach to color there’s a browser you can use to do so without needing to turn on any experimental flags or anything! In fact, there are even some really great P3 color tools built right into the Safari Web Inspector panel – Jen Simmons has &lt;a href="https://twitter.com/jensimmons/status/1478858248677736454?s=21"&gt;a really great, short overview video&lt;/a&gt; on those tools that I’d highly encourage you to check out if you’re interested in starting to work with P3 colors today. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-fallbacks-with-raw-colorgamut-endraw-"&gt;
  &lt;/a&gt;
  Setting fallbacks with &lt;code&gt;color-gamut&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The other thing that’s important to know if you want to start using P3 colors is how to set a fallback for your users who don’t yet have support for the new colors. By using the &lt;code&gt;color-gamut&lt;/code&gt; media query, you can check the user’s browser AND output device for current color compatibility by passing in &lt;code&gt;srgb&lt;/code&gt;, &lt;code&gt;p3&lt;/code&gt;, or &lt;code&gt;rec2020&lt;/code&gt; and then conditionally rendering your styles based on the status. So if you want to start writing for those future color spectrums, you could set up a little graceful degradation like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color-gamut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;66%&lt;/span&gt; &lt;span class="m"&gt;132&lt;/span&gt; &lt;span class="m"&gt;359&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;65%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color-gamut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;srgb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;110&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also do basically the same thing using &lt;code&gt;@supports&lt;/code&gt;, if you were so inclined. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-ready-for-the-future-of-color"&gt;
  &lt;/a&gt;
  Are you ready for the future of color?
&lt;/h2&gt;

&lt;p&gt;Being able to witness (and participate in!) these kinds of technological advances is my favorite part of being a developer. Sometimes it can feel frustrating that everything moves so fast, and it can be hard to make peace with the knowledge that the stuff you just learned a year or two ago will inevitably be outdated soon...and yet, in the same breath, I also feel very lucky to be able to work in a field that’s constantly growing, improving, and expanding. As a huge design nerd, the new color gamut support coming to CSS is something I’m especially excited about – the new methods for defining colors are all great options, and I’m thrilled to be able to create designs with brighter and more vibrant colors than we were able to use before. With the adoption P3 color support in Safari, full modern browser support is expected within the next year or so. So get ready; the future of color is here, and we get to be the ones to write it!&lt;/p&gt;

</description>
      <category>css</category>
      <category>ui</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>WeAreDevelopers Live - Java Day</title>
      <author>Gerry Schneider</author>
      <pubDate>Thu, 06 Jan 2022 19:31:20 +0000</pubDate>
      <link>https://dev.to/gerryvienna/wearedevelopers-live-java-day-fj7</link>
      <guid>https://dev.to/gerryvienna/wearedevelopers-live-java-day-fj7</guid>
      <description>&lt;p&gt;Ready to level up your Java skills? Then sign up and join for our first WeAreDevelopers Live Event this year - it’s Java Day! &lt;strong&gt;It’s free!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you think about Java you either think about beautiful tropical islands, a good cup of coffee or that’s right: one of the best known and most important programming languages of all time. Basically there’s nothing you can’t do with Java- therefore we have reached out to some real Java Pros to learn what’s on their mind!&lt;/p&gt;

&lt;p&gt;So grab your coffee and tune in on January :&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;Going reactive with Spring WebFlux&lt;/strong&gt;&lt;br&gt;
📣 Michael Eder &amp;amp; Philipp Frauenthaler&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;Get old, go slow, write code!&lt;/strong&gt;&lt;br&gt;
📣 Tobias Modig&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;What´s New for Developers Moving from Java 11 to 17?&lt;/strong&gt;&lt;br&gt;
📣 Daniel Strmečki&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;The Cool Thing about Cool Things in Java 16 &amp;amp; 17 LTS&lt;/strong&gt;&lt;br&gt;
📣 Mohamed Taman&lt;/p&gt;

&lt;p&gt;Save your spot - &lt;strong&gt;it's free&lt;/strong&gt;! &lt;br&gt;
&lt;a href="https://bit.ly/WADJavaDay2021"&gt;https://bit.ly/WADJavaDay2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS: Join our latest &lt;strong&gt;raffle&lt;/strong&gt; provided by Deloitte for your chance to &lt;strong&gt;win a Nintendo Switch&lt;/strong&gt; and some &lt;strong&gt;nice goodies&lt;/strong&gt;. &lt;a href="https://bit.ly/WADWinaNintendoSwitch"&gt;https://bit.ly/WADWinaNintendoSwitch&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>wearedevs</category>
      <category>developerevent</category>
      <category>onlineevent</category>
    </item>
    <item>
      <title>What is in your bag?</title>
      <author>Pavel Polívka</author>
      <pubDate>Thu, 06 Jan 2022 19:25:40 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/what-is-in-your-bag-1ijb</link>
      <guid>https://dev.to/pavel_polivka/what-is-in-your-bag-1ijb</guid>
      <description>&lt;p&gt;As a new year article, I decided to write up some words about what are the daily drivers I have in my bag. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bag"&gt;
  &lt;/a&gt;
  Bag
&lt;/h2&gt;

&lt;p&gt;I use a top-loaded HP bag for 15-inch laptops. My 17 inch Mac Book fits it well and it's pretty nice. But nothing special. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laptops"&gt;
  &lt;/a&gt;
  Laptops
&lt;/h2&gt;

&lt;p&gt;I have multiple laptops. For my work, I mostly use Macbook Pro 17" - 16GB RAM, 2019 model. I also have Macbook Air 13" M1 model I use for my personal projects. I also got a few Windows and Linux machines but those are rarely used.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-electronics"&gt;
  &lt;/a&gt;
  Other electronics
&lt;/h2&gt;

&lt;p&gt;I carry Kindle Whitepaper 4 with me almost everywhere. I love reading.&lt;br&gt;
I also carry Jabra Evolve 75 I use it for work meetings. It's a really great headset. I also have Marshall Mode II true wireless for music and or audiobooks on the go. I love the Marshall sound. &lt;/p&gt;

&lt;p&gt;I also have some USB/USB-C cables and some USB-C dongles. Fully embracing that Mac dongle life. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drug-store"&gt;
  &lt;/a&gt;
  Drug store
&lt;/h2&gt;

&lt;p&gt;I have deodorant in spray, hand sanitizer, mouth deodorant, and glass cleaning gel. Nothing special. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#various"&gt;
  &lt;/a&gt;
  Various
&lt;/h2&gt;

&lt;p&gt;I have my Moleskin notebook, Parker pen, FFP2 respirator, chopsticks, and set of lockpicks. I have lockpicking as one of my hobbies I rarely use those but saved me calling locksmith more than once. &lt;/p&gt;




&lt;p&gt;If you like this article you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>gear</category>
    </item>
    <item>
      <title>Clearing Rows with CSS Grid</title>
      <author>Benny Powers 🇮🇱🇨🇦</author>
      <pubDate>Thu, 06 Jan 2022 19:14:26 +0000</pubDate>
      <link>https://dev.to/bennypowers/clearing-rows-with-css-grid-49c1</link>
      <guid>https://dev.to/bennypowers/clearing-rows-with-css-grid-49c1</guid>
      <description>&lt;p&gt;Today I completed a fun little challenge using CSS Grid.&lt;/p&gt;

&lt;p&gt;The goal was to update a layout that relied on container elements and flexbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cards"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cards"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.cards&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cards&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My first step was to remove the container elements and 'lift up' the flex properties into the grid container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;auto-fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This did most of the job on its own, but there was one issue: in the original layout, card &lt;code&gt;b-1&lt;/code&gt; appeared in a new 'row' below the first set of cards. How could I emulate this 'row-clearing' behaviour? Using &lt;code&gt;grid-column&lt;/code&gt;, I specified the position of the first card in the second set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#b-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that one specific card 'resets' it's whole row, replicating the original behaviour, but with fewer non-semantic elements, and less CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edJ2YsXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwu3aivsmjqa0g898mbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edJ2YsXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwu3aivsmjqa0g898mbj.png" alt="Browser Screenshot showing rows of cards. The second row ends with two empty cells, and the third row begins with the desired element" width="880" height="767"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nice&lt;/em&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>React folder structuring</title>
      <author>Rakesh Shravz</author>
      <pubDate>Thu, 06 Jan 2022 19:14:11 +0000</pubDate>
      <link>https://dev.to/rakeshshravz/react-folder-structure-10i2</link>
      <guid>https://dev.to/rakeshshravz/react-folder-structure-10i2</guid>
      <description>&lt;p&gt;Hey all great minds, this post is all about how I used to structure the react applications that I built so far. It's completely opinionated. Please comment with your thoughts.&lt;/p&gt;

&lt;p&gt;Let's assume that we are building a simple application with some common modules and features in it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDYlRkEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4a07e7oyxeqhm72jxdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDYlRkEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4a07e7oyxeqhm72jxdl.png" alt="Image description" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I always do the structuring based on the features or routes. This is the most common approach by the react community.&lt;/p&gt;

&lt;p&gt;From the above project view, when we open the "src" folder, all the folders with the feature name need to be aligned on the same vertical line. By looking at these folders inside the "src" folder, we should come to an idea of the nature of the application and what this project is about.&lt;/p&gt;

&lt;p&gt;Every features folder should contain an "index.js" file that has the root component of this feature. The presentational and non-presentational components are placed inside the "Components" folder. The other files are styles.js, actions.js, actionTypes.js, and reducers.js are placed within the folder for all the features&lt;/p&gt;

&lt;p&gt;Every feature folder should have all these files which help in code splitting and project folders looks identical which avoids chaos and helps better debugging.&lt;/p&gt;

&lt;p&gt;The "Common" folder can contain the styles, constants, and utils which we think can be used by other components.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I decided which language I should learn </title>
      <author>𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻</author>
      <pubDate>Thu, 06 Jan 2022 18:43:14 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-decided-which-language-i-should-learn-2lk4</link>
      <guid>https://dev.to/yuridevat/how-i-decided-which-language-i-should-learn-2lk4</guid>
      <description>&lt;p&gt;Like many of you, I also thought for a long time about which programming language I should actually learn. Python for machine learning and AI, Java for big apps, Swift for mobile apps, each language/field seemed so interesting and I spent a lot of time trying different things and still had no idea which language to stick with. This cost me a lot of time that I really want to spare you.&lt;/p&gt;

&lt;p&gt;Hello, I am Julia 👩‍💻, a self-taught React developer and I would like to explain to you why I chose frontend and ReactJS in particular as a programming language to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-choose-frontend"&gt;
  &lt;/a&gt;
  Why to choose frontend
&lt;/h2&gt;

&lt;p&gt;Frontend seemed to me to be the easiest to learn at the time. And in my situation, it was definitely much easier than Python or Java. I needed to see things right away, and fiddling around with CSS and creating something beautiful made me happy.&lt;/p&gt;

&lt;p&gt;That doesn't mean I'll stay with frontend forever, I'm interested in other languages too, but I wanted to get a job as soon as possible and calculated my odds, so I started learning HTML, CSS, and then JS/React.&lt;/p&gt;

&lt;p&gt;When I googled for tutorials, React was everywhere. React seemed to be THE language to learn at that moment, and when I learned about a mentorship program called &lt;a href="https://the-collab-lab.codes/"&gt;&lt;strong&gt;The Collab Lab&lt;/strong&gt;&lt;/a&gt; where you can apply if you know React to work on a smart app in an agile team, that was the final decision and motivation to dedicate myself fully to React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to get into this program, so I'm going to learn React, no matter the cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After learning frontend for three months, I applied for the program and was accepted 💪. I have to admit that at that point I didn't have the knowledge that the others had. I had to put in a lot more hours than the others and learn React all day to keep up.&lt;/p&gt;

&lt;p&gt;But it was definitely worth it. The experience was amazing because even though I didn't have all the programming skills of my peers, I was able to impress the mentors with other skills like motivation, communication, and a little bit of leadership, and they asked me to become an assistant mentor for future cohorts, which I gladly accepted.&lt;/p&gt;

&lt;p&gt;It was a great experience. Last but not least, this experience was also the most interesting one on my CV that was talked about in every interview I had and ultimately helped me get my first tech job ☝️.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is the language in demand?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Because I'm talking about my first job: I hadn't thought about whether React was even used here in Austria. There were very few jobs that required React at the time of job searching, but I was lucky. React is just coming, so I am one of the few who already know React, while others have worked with Angular for years and now have to relearn.&lt;/p&gt;

&lt;p&gt;That's why it's important to look for jobs in advance, for example on LinkedIn, and find out if the programming language you want to learn is even in demand in the place where you live and want to work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#possibilites-with-frontend"&gt;
  &lt;/a&gt;
  Possibilites with frontend
&lt;/h2&gt;

&lt;p&gt;There are so many paths after that, if you don't like frontend, and you have enough time after the successful job search to focus on the things you really enjoy. The good thing is that JavaScript has many logical parts that Java and Python also have. That means it's important to master logical thinking, and that's what you need to improve on, how to solve problems. So then learning a new language won't be as hard as it was in the beginning. &lt;/p&gt;

&lt;p&gt;What I'm saying is that even if frontend seems a bit boring to you now, like, "I don't want to build websites", there are so many other areas you can focus on after you have a deep knowledge. You could become a frontend developer with a strong focus on &lt;em&gt;UX/UI design&lt;/em&gt;, a focus on &lt;em&gt;animation&lt;/em&gt;, if you like teaching you can apply for jobs at a coding school to become a &lt;em&gt;mentor&lt;/em&gt;, &lt;em&gt;freelancer&lt;/em&gt; or &lt;em&gt;content creator&lt;/em&gt;, or you can learn Python in your spare time and switch your career to Machine Learning or AI. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages worth mentioning&lt;/strong&gt;&lt;br&gt;
After getting my first job, I can assure you that I feel so relieved because I made it, I feel secure because I'm making money now. The way I study now in my free time is much more effective because I don't have any ulterior motives anymore: "Am I really going to make it? Is there any point in learning this language at all?"&lt;/p&gt;

&lt;p&gt;While getting better at frontend at work, you will also get better in other areas, like internal tools, personal growth, and soft skills. And maybe the company provides other areas too and a switch within the company would be possible 🙂.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My recommendation&lt;/strong&gt;&lt;br&gt;
Learning React development, after mastering the basics, you can and should also specialize in something to stand out from the crowd when applying for jobs, like UX design, UI design, a11y, some BackEnd, animation, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;When learning frontend / JavaScript, you can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;develop websites using frameworks and libraries like &lt;a href="https://beta.reactjs.org/"&gt;ReactJS&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, etc&lt;/li&gt;
&lt;li&gt;develop mobile apps using &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop desktop apps using &lt;a href="https://www.electronjs.org/"&gt;ElectronJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop (game) animations using &lt;a href="https://threejs.org/"&gt;ThreeJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop ML models using &lt;a href="https://www.tensorflow.org/js"&gt;TensorflowJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop web3 using &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3JS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find a good start into programming and can get started now. Have fun ✨.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Git Workflows - Solo Vs Team Work, Undoing Mistakes, Contributing to Open Source... and more</title>
      <author>Danny Adams</author>
      <pubDate>Thu, 06 Jan 2022 18:40:18 +0000</pubDate>
      <link>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</link>
      <guid>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</guid>
      <description>&lt;p&gt;In this article, I give my workflows for almost everything that you will ever need to do with Git:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Git commands&lt;/li&gt;
&lt;li&gt;Setting up a remote repository and pushing to Github&lt;/li&gt;
&lt;li&gt;Undoing things in Git&lt;/li&gt;
&lt;li&gt;Ignoring things in Git&lt;/li&gt;
&lt;li&gt;Git branches for new features&lt;/li&gt;
&lt;li&gt;Working solo vs in a team&lt;/li&gt;
&lt;li&gt;Forking and contributing to open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-git-commands"&gt;
  &lt;/a&gt;
  Basic Git Commands
&lt;/h2&gt;

&lt;p&gt;These are the commands you will use in every single project.&lt;/p&gt;

&lt;p&gt;1) Initialise Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Add files to the staging area&lt;/p&gt;

&lt;p&gt;To add all files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files in a specific folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add src/posts/Git_Commands_Post&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add one file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add styles.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files with a specific extension (in this case, all html files):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add *.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Check the staging area is correct before committing to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Committing the changes to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "A short message describing the changes here"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5) Push to remote repository (see below for how to set up remote repository)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-remote-repository-and-pushing-to-github"&gt;
  &lt;/a&gt;
  Setting up a remote repository and pushing to Github
&lt;/h2&gt;

&lt;p&gt;First we need to set up the repository on Github:&lt;/p&gt;

&lt;p&gt;1) Go to github.com&lt;br&gt;
2) Sign in or create an account&lt;br&gt;
3) Select "New" to create a new repository&lt;br&gt;
4) Type in your repository information. I always leave the "Add a README file", "Add a .gitignore" and "Choose a license" checkbox unchecked.&lt;br&gt;
5) Click "Create repository"&lt;/p&gt;

&lt;p&gt;Now we need to connect up our local repository to the just-created Github repository:&lt;/p&gt;

&lt;p&gt;6) Add the remote repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/YourUsername/Your-remote-repo-name.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7)  Ensure we are in the main branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8) Push your committed local code to Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#changing-your-username-and-email-in-git"&gt;
  &lt;/a&gt;
  Changing your username and email in Git
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Danny Adams"
git config --global user.email "my-email@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#undoing-things-in-git"&gt;
  &lt;/a&gt;
  Undoing things in Git
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#remove-a-file-from-staging"&gt;
  &lt;/a&gt;
  Remove a file from staging
&lt;/h3&gt;

&lt;p&gt;The below command removes the file only from the Git repository. The local, working directory copy of the file will remain intact - this is ensured by adding the &lt;code&gt;--cached&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To remove all files in a folder, add the recursive flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt; -r&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#going-back-to-a-previous-commit-to-read-only"&gt;
  &lt;/a&gt;
  Going back to a previous commit to READ ONLY
&lt;/h3&gt;

&lt;p&gt;To see how things looked at a particular commit, without re-writing history or deleting things, we can simply:&lt;/p&gt;

&lt;p&gt;1) Log the commit history and copy the ID of the commit we want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Go back in time to the commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Once done, go back to where we were&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reverting-a-commit"&gt;
  &lt;/a&gt;
  Reverting a commit
&lt;/h3&gt;

&lt;p&gt;Revert commit creates a new commit, where the changes made in a specific commit are undone.&lt;/p&gt;

&lt;p&gt;Let's say we wanted to undo what we did in commit 2 of the below branch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" alt="Git Revert commit branch before" width="427" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Revert, a new commit would be made, where the changes made in C2 are undone - but C2 is still kept in history so we could still go back and keep the changes if we decide we want them again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" alt="Git Revert commit after" width="579" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through an example. Below, I have 3 commits in my project - with the latest at the top:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" alt="Git log of commits" width="382" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say I wanted to undo the changes I made with the "Created styles.css" commit only. I can simply revert this commit:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert a432c9f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git will then open up a file in your text editor (if your using VS code) and ask you to create a message for the new commit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" alt="Git revert command line" width="467" height="63"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" alt="Git revert message" width="723" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the commit message reads 'Revert "Created styles.css"', but this can be changed to whatever you want. I usually just leave it as is.&lt;/p&gt;

&lt;p&gt;Once you're happy with the message, simply close the file and Git will add the new commit where the "Create styles.css" changes are undone.&lt;/p&gt;

&lt;p&gt;But here's the beauty of using revert to undo things: the commit history is all still there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" alt="Commit history after reverting" width="457" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the "Created styles.css" commit is still there. Revert has simply made a new commit where the changes made in "Created styles.css" are reverted (undone). This is MUCH safer than using Reset - the next section - which deletes commits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reset-commit"&gt;
  &lt;/a&gt;
  Reset commit
&lt;/h3&gt;

&lt;p&gt;Reset commit goes back in time to a previous commit and permanently deletes all commits that happened ahead of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" alt="Git Reset branch diagram" width="566" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Get the Id of the commit you want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Reset&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: all the code changes will still remain in the workspace files - but they'll be uncommitted. To remove from Git AND your workspace, use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt; --hard&lt;/code&gt; (Very dangerous - be very careful!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tell-git-to-ignore-certain-files"&gt;
  &lt;/a&gt;
  Tell Git to ignore certain files
&lt;/h2&gt;

&lt;p&gt;Some files in your project will contain private information, such as passwords and keys. It's very important that this information isn't pushed to Github. Also, folders like the node_modules folder can take up lots of disc space, and there is no need for them to be pushed to Github as they can be reinstalled any time via the project's package.json file.&lt;/p&gt;

&lt;p&gt;1) Create a &lt;code&gt;.gitignore&lt;/code&gt; file in the root of your project&lt;br&gt;
2) Add the names of the folders and files you want to ignore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
secret-password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to add these files to .gitignore as soon as they are made. But if you have accidentally committed them to git, you can untrack them with the following commands:&lt;/p&gt;

&lt;p&gt;1) Remove everything from the repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm -r --cached .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Re add everything&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now everything apart from the files in your .gitignore will be added to the staging area.&lt;/p&gt;

&lt;p&gt;3) Commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m ".gitignore fix"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The local repository is now clean. Push the changes to Github to see the changes effective there too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-branches"&gt;
  &lt;/a&gt;
  Git branches
&lt;/h2&gt;

&lt;p&gt;A common Git paradigm is to always keep the main branch deployable. This means that whenever you're working on a new feature, you should create a new branch and make your commits to that. Then once the feature is complete, you can merge it back into main.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" alt="Git merge branch diagram" width="640" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-solo"&gt;
  &lt;/a&gt;
  When working solo
&lt;/h3&gt;

&lt;p&gt;If you're the only one contributing to a repo, then you can safely merge a feature into main without creating a pull request.&lt;/p&gt;

&lt;p&gt;1) Create new branch and go into it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Make your changes in this branch. Add and commit your changes as many times as necessary.&lt;/p&gt;

&lt;p&gt;3) Checkout to main and merge the feature branch into main&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt; --no-ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The no-fastforward flag creates a new merge commit and maintains history of the feature branches. Without this flag, the head will simply fastforward to the end of the feature without a new merge commit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-in-a-team"&gt;
  &lt;/a&gt;
  When working in a team
&lt;/h3&gt;

&lt;p&gt;Let's say someone has added you to a Github repository, so that you can now contribute as part of the team.&lt;/p&gt;

&lt;p&gt;To contribute, you will need to make a pull request. A pull request is for communicating and reviewing code, before merging it to main. Merging directly, and merging with a pull request are identical - the only difference is that a pull request creates a dedicated forum on Github for discussion - this allows team members to review your code before merging it.&lt;/p&gt;

&lt;p&gt;1) Clone the Github repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone &amp;lt;repo-url&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Ensure our code is up to date&lt;/p&gt;

&lt;p&gt;Before making any changes, you should always make sure your local copy is up to date with the remote repo - as other devs may have contributed. Pull the latest code from remote repo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Create and checkout to new branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Make desired changes&lt;/p&gt;

&lt;p&gt;5) Add and commit changes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "some message"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6) Push the code in this branch to a branch in Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin &amp;lt;name-of-branch-for-Github&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7) Create a pull request&lt;/p&gt;

&lt;p&gt;Go to the Github repo main branch and click "compare and pull request".&lt;/p&gt;

&lt;p&gt;8) Leave a comment to explain exactly what you've done, then "create pull request".&lt;/p&gt;

&lt;p&gt;Other team members will get an email for the request to pull your code into main. They can see changes, see commits, leave comments, and (if happy) merge the code into main.&lt;/p&gt;

&lt;p&gt;Feature branch can be deleted once merged.&lt;/p&gt;

&lt;p&gt;** But what if people make changes to main while your still working on the feature branch? **&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;feature-branch-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge the latest main branch into your feature branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git merge main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now incorporate the latest changes by other devs into your feature.&lt;/p&gt;

&lt;p&gt;Note: you may need to iron out merge conflicts. This is normal and part of working with Git.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forking-and-contributing-to-open-source-projects"&gt;
  &lt;/a&gt;
  Forking and contributing to open source projects
&lt;/h3&gt;

&lt;p&gt;If you don't have write access to a repo, but still want to contribute to it, you can Fork the project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find an open source public repo&lt;/li&gt;
&lt;li&gt;Fork the repo (create a copy to your own Github account)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;url-of-your-fork&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make changes (could also create a new branch for the changes then push to a new branch)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; &lt;code&gt;git commit -m "message"&lt;/code&gt; &lt;code&gt;git push origin main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to your forked copy on Github and click "New pull request"&lt;/li&gt;
&lt;li&gt;"Create pull request" - this pulls your code into the parent repo to be reviewed for merging. YOU CAN'T MERGE THIS - only the repo owners are allowed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;Hopefully that was helpful.&lt;/p&gt;

&lt;p&gt;For more from me, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DoableDanny"&gt;Follow me on twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;Subscribe to my YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👋&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
