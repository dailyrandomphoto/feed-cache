<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ruby 3.1.0 Released</title>
      <author>Ben Halpern</author>
      <pubDate>Sat, 25 Dec 2021 16:00:23 +0000</pubDate>
      <link>https://dev.to/ben/ruby-310-released-f77</link>
      <guid>https://dev.to/ben/ruby-310-released-f77</guid>
      <description>&lt;h2&gt;
  &lt;a href="#official-post"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ruby-lang.org/en/news/2021/12/25/ruby-3-1-0-released/"&gt;Official post&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;YJIT: New experimental in-process JIT compiler disabled by default (needs --yjit cli option), limited to Unix-like x86-64 platforms for now&lt;/li&gt;
&lt;li&gt;debug gem: A new debugger&lt;/li&gt;
&lt;li&gt;error_highlight: Fine-grained error location in backtrace&lt;/li&gt;
&lt;li&gt;IRB Autocomplete and Document Display&lt;/li&gt;
&lt;li&gt;Values in Hash literals and keyword arguments can be omitted&lt;/li&gt;
&lt;li&gt;Pin operator in pattern matching now takes an expression&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>news</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Starfield Programming in JavaScript</title>
      <author>Bek Brace</author>
      <pubDate>Sat, 25 Dec 2021 15:59:01 +0000</pubDate>
      <link>https://dev.to/bekbrace/starfield-programming-in-javascript-3n20</link>
      <guid>https://dev.to/bekbrace/starfield-programming-in-javascript-3n20</guid>
      <description>&lt;p&gt;I did not realize how coding tutorials on YouTube are sometimes annoying - including my own (no exception 😄), don't get me wrong, I mean it's great to be taught and all but often it's just annoying, you want to watch someone coding in silence and code with them, especially if you're familiar with the language/framework/tech they're using in the video.&lt;/p&gt;

&lt;p&gt;This is an HTML/CSS/JavaScript moving background ideal for any space 2d video game like Space Invaders, Galaxy Hunters or Asteroids, coded from scratch in silence in a rainy night here in Poland, and I did not want to talk just code in silence and if you're a beginner - intermediate, you can code along with me or you can leave it turned on while doing your own stuff.&lt;/p&gt;

&lt;p&gt;The idea was inspired from one famous YouTuber called Takuya and his channel is called "devaslife", he's a Japanese from Osaka who speaks perfect English. The man types in a very smooth way on the terminal - he uses Fish terminal - and never touches the mouse in all of his videos; productive and efficient. I was only inspired by him, and started creating my own videos with my own style, just occasionally not being the main style on the channel.&lt;/p&gt;

&lt;p&gt;You might find me struggling while typing a little bit, that's because this was my first time suing this new IBM Compatible Keyboard manufactured by a German company called "Perrix".&lt;/p&gt;

&lt;p&gt;Here's the video&lt;br&gt;
Hope you enjoy it - if you like that type of videos&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WyxGIGh8p4I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Source Code: &lt;a href="https://github.com/BekBrace/starfield-game-background"&gt;https://github.com/BekBrace/starfield-game-background&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YouTube : &lt;a href="https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg"&gt;https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg&lt;/a&gt;&lt;br&gt;
Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace​​​​&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace"&gt;https://github.com/BekBrace&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Simple Digital Clock with Date using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Sat, 25 Dec 2021 15:46:58 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/simple-digital-clock-with-date-using-javascript-41c</link>
      <guid>https://dev.to/shantanu_jana/simple-digital-clock-with-date-using-javascript-41c</guid>
      <description>&lt;p&gt;In this article you will learn how to create Simple &lt;a href="https://www.foolishdeveloper.com/2021/12/javascript-digital-clock-with-date.html"&gt;Digital Clock with Date using javaScript&lt;/a&gt; HTML, CSS. Earlier I shared with you many more ways to make digital clock. This digital clock has been created with the help of Glassmorphism design.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Pg6Xjb60cI4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It was designed with HTML, CSS and JavaScript enabled this digital watch. This is a bit different from a normal digital watch. Because here you can see the date with time. &lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/12/javascript-digital-clock-with-date.html"&gt;watch the live demo&lt;/a&gt; to see how it works. If you look at the picture above you will understand that there is a small box where the date can be found.&lt;/p&gt;

&lt;p&gt;Time and date will be received from your device using New date method. Then using setInterval I instructed to update all those calculations and time every second.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-design-the-webpage"&gt;
  &lt;/a&gt;
  Step 1: Design the webpage
&lt;/h3&gt;

&lt;p&gt;Using the following HTML and CSS codes, I first created two circles on the webpage. These circles are basically a part of Glassmorphism design. You can skip this colorful circle if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shape"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shape"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#080710&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssJErZ67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjGpA3XGVERMnOBCpi-fJ3JeeR6N2phRaEonDumEr1McJ5ADkNqZtMfQo-6Bcd44nVYs51GeUbPPLCnSYSlxVyb0Amp7Cu4wpqJmEsZKsdEk6BgeRY1dsgo8K2C4uTCZU4uej25v--v7rzGBhcvgTEpZV3EHUnDSz5eciLE8qDrBVio5TI8JwWkzIq43Q%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssJErZ67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjGpA3XGVERMnOBCpi-fJ3JeeR6N2phRaEonDumEr1McJ5ADkNqZtMfQo-6Bcd44nVYs51GeUbPPLCnSYSlxVyb0Amp7Cu4wpqJmEsZKsdEk6BgeRY1dsgo8K2C4uTCZU4uej25v--v7rzGBhcvgTEpZV3EHUnDSz5eciLE8qDrBVio5TI8JwWkzIq43Q%3Ds16000" alt="Design the webpage" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
First an area has been defined which will contain these two circles. Here the width of the area: 430px and &lt;code&gt;height: 520px&lt;/code&gt;. Circle height, &lt;code&gt;width 140px&lt;/code&gt; and &lt;code&gt;border-radius: 50%&lt;/code&gt; is used to make it completely round.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;430px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;520px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now those two circles have been placed in a certain place and in both cases we have used different &lt;code&gt;linear-gradient colors&lt;/code&gt;. You can adjust the positions of the circles as you wish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="m"&gt;#1845ad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#23a2f6&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#ff512f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#f09819&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhixQYC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiyb2i9YyHVgQgNK9nZkDC4KJOgMfwWIngMFNP6jGRB7KnNacCKPsIdWCNVXVYbFQhr189V8p6Sc7lfqGAzpAbRoOubcuwz0DHbNw374RhZmCVPrQG2rVXXDzlTL6-w4XZJ1-cB6zSWOy4u2vf8KWbZK6YBet6H19k33jCP60ndSh7vONmeHV1I7ZtgAQ%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhixQYC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiyb2i9YyHVgQgNK9nZkDC4KJOgMfwWIngMFNP6jGRB7KnNacCKPsIdWCNVXVYbFQhr189V8p6Sc7lfqGAzpAbRoOubcuwz0DHbNw374RhZmCVPrQG2rVXXDzlTL6-w4XZJ1-cB6zSWOy4u2vf8KWbZK6YBet6H19k33jCP60ndSh7vONmeHV1I7ZtgAQ%3Ds16000" alt="two circles" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-basic-structure-of-digital-clock"&gt;
  &lt;/a&gt;
  Step 2: Basic structure of digital clock
&lt;/h3&gt;

&lt;p&gt;Now the basic structure of the digital clock has been created. &lt;code&gt;Backdrop-filter: blur (10px)&lt;/code&gt; has been used to blur the background of this clock.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alarm-clock"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.17&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📌📌 Remember, time &lt;code&gt;cannot be seen without JavaScript&lt;/code&gt;. I have used the image below to understand what will change after using the above HTML and CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0mdZ56E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEitexAazO46k5wBz9m5FCZzrIg-7YitNrOdDM-C5PrVbU2e5We48TpQ_Y4B02fGIW_2rRVvNySx07t65SRYqjWpcWu-y9paVdfBb-vClPRCRuk_5wFRyDFZJbbkoDhIFygp2kWuowNr51UGsbA7MWBo-xz5vP92RObOP3YhwSsUi8WmiF1Mun3DKacZNA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0mdZ56E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEitexAazO46k5wBz9m5FCZzrIg-7YitNrOdDM-C5PrVbU2e5We48TpQ_Y4B02fGIW_2rRVvNySx07t65SRYqjWpcWu-y9paVdfBb-vClPRCRuk_5wFRyDFZJbbkoDhIFygp2kWuowNr51UGsbA7MWBo-xz5vP92RObOP3YhwSsUi8WmiF1Mun3DKacZNA%3Ds16000" alt="Basic structure of digital clock " width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-code-to-view-time"&gt;
  &lt;/a&gt;
  Step 3: Add code to view time
&lt;/h3&gt;

&lt;p&gt;Now I have added the necessary HTML to view the time. Hours, minutes and seconds can be found here. A colon has been used in between each period which will help to enhance the beauty a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"time"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hours"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"minutes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; : &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"seconds"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;19px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Orbitron"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.time&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#09ecf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#375f08&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-design-the-colon-and-add-animation"&gt;
  &lt;/a&gt;
  Step 4: Design the colon and add animation
&lt;/h3&gt;

&lt;p&gt;Now the colon has been designed and animation has been added. In the meantime I have used an animation that will help to show and hide some time intervals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.time&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nc"&gt;.colon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📌📌 Remember, time &lt;code&gt;cannot be seen without JavaScript&lt;/code&gt;. I have used the image below to understand what will change after using the above HTML and CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Rh7ohlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjcJ7IGSCqNoBQwev_9Utv6v4G_OrRia_MzfZNzYqDRUfxIn_a8pFf0XhZag_AjExxRPYZwfT7B6TH0dJEkw2knoRYScwJex1rjLB737spmjcyXZWem4dvHnxWaMc7b_wX0sZ99_UaqGIOnU800JwKP_QSxsgU92sT2s5N2p9U7npTQVZYTmRjvGbAxkw%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Rh7ohlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjcJ7IGSCqNoBQwev_9Utv6v4G_OrRia_MzfZNzYqDRUfxIn_a8pFf0XhZag_AjExxRPYZwfT7B6TH0dJEkw2knoRYScwJex1rjLB737spmjcyXZWem4dvHnxWaMc7b_wX0sZ99_UaqGIOnU800JwKP_QSxsgU92sT2s5N2p9U7npTQVZYTmRjvGbAxkw%3Ds16000" alt="Add code to view time" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-code-to-view-the-date"&gt;
  &lt;/a&gt;
  Step 5: Add code to view the date
&lt;/h3&gt;

&lt;p&gt;Now we have created a place to see the date in the digital clock. As I said before, months, days and years can be seen here. Now I have used HTML and CSS code to create its basic structure. Later I implemented it with the help of JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"month"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"day"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;,
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"year"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.date&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.27&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📌📌 Remember, time and Date&lt;code&gt;cannot be seen without JavaScript&lt;/code&gt;. I have used the image below to understand what will change after using the above HTML, CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" alt=" Add code to view the date" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-activate-digital-clock-with-date-using-javascript"&gt;
  &lt;/a&gt;
  Step 6: Activate Digital Clock with Date using JavaScript
&lt;/h3&gt;

&lt;p&gt;Above we have all designed to create this &lt;strong&gt;Digital Clock with Date&lt;/strong&gt;. Now is the time to implement it with JavaScript. For this you must have an idea about basic JavaScript.&lt;/p&gt;

&lt;p&gt;First some of the class functions have been assigned a constant. Because I can't directly use the ID function in JavaScript. For that a global constant has to be determined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hours&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.minutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.seconds&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.month&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.year&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the following function I will add all the calculations. In other words, I will add all the calculations needed to increase this clock in this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I mentioned earlier, the time and date information used here will be collected from the device using JavaScript's &lt;code&gt;New Date&lt;/code&gt; Method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the current information of month day and year has been collected and stored in different constants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yyyy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way hours minutes minutes and seconds are taken from the device and they are stored in some constant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have stored the names of all the months in a constant called &lt;code&gt;"monthName"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;monthName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;March&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;April&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;June&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;September&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;October&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;November&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now through a few conditions I have managed to add one zero to the &lt;code&gt;time below 10&lt;/code&gt;. When the time is below 10, one zero will be added before that time. As a result, the times will be two numbers.&lt;/p&gt;

&lt;p&gt;Then those times have been arranged to show in the webpage using innerhtml. innerhtml helps to display any content within a web page.&lt;/p&gt;

&lt;p&gt;I have given the condition here that if the time is less than 10 then one zero will be added and then that time will be seen in the webpage. Then I gave another condition using else. If the time is &lt;code&gt;not below 10&lt;/code&gt;, then the time can be seen directly on the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hrs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;hrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now using the same innerhtml, the information of the month, day and year has been arranged in the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;monthName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mm&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I mentioned earlier, all these calculations are stored in a function called set date. Now that function has been instructed to update every &lt;code&gt;1000 milliseconds&lt;/code&gt; or one second. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;setInterval&lt;/code&gt; helps to update any information after a certain period of time. This will update all these calculations every 1 second and we will see the time change every second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" alt="Digital Clock with Date using JavaScript&amp;lt;br&amp;gt;
" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
Hopefully from this tutorial you have learned how I created &lt;strong&gt;Digital Clock with Date using JavaScript&lt;/strong&gt;. I have made many more types of digital watches before. &lt;/p&gt;

&lt;p&gt;If you have any difficulty in making this &lt;strong&gt;JavaScript Digital Clock&lt;/strong&gt;, please let me know in the comments. You can &lt;a href="https://www.foolishdeveloper.com/2021/12/javascript-digital-clock-with-date.html"&gt;download the source code&lt;/a&gt; needed to create this JavaScript Digital Clock with Date.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>50+ CSS Music Player With Free Source Code</title>
      <author>front-end.codes</author>
      <pubDate>Sat, 25 Dec 2021 14:52:14 +0000</pubDate>
      <link>https://dev.to/codesfrontend/50-css-music-player-with-free-source-code-554c</link>
      <guid>https://dev.to/codesfrontend/50-css-music-player-with-free-source-code-554c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#50-css-music-player-best-of-codepen-collection"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;50+ CSS Music Player&lt;/a&gt; Best of Codepen Collection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kw8AZiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1cj0fl76zgursaytedz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kw8AZiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1cj0fl76zgursaytedz.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-app"&gt;
  &lt;/a&gt;
  Music App
&lt;/h2&gt;

&lt;p&gt;Author - Havard Brynjulfsen&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/havardob/pen/JjJXqZm"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EaSEkP44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1wq24ror31tjs1tdk8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EaSEkP44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1wq24ror31tjs1tdk8m.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwindcss-neumorphic-music-player"&gt;
  &lt;/a&gt;
  Tailwindcss | Neumorphic Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Jedidiah Avelino&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/jedidiahavelino/pen/jOPJOWa"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Anj-K4Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l6482cflzlpex6696jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Anj-K4Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l6482cflzlpex6696jt.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dribble-shot-of-simple-music-player"&gt;
  &lt;/a&gt;
  Dribble shot of Simple Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Hussain Bhinderwala&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/hussain1605/pen/ExVNJVb"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLtXOe28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh48qez5aw4t99okzcnf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLtXOe28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh48qez5aw4t99okzcnf.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-design-music-player"&gt;
  &lt;/a&gt;
  UI Design - Music Player
&lt;/h2&gt;

&lt;p&gt;Author - CodeFrog&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/CodeFrogShow/pen/MbvVXj"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9oT5BF8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t2npsi0w25e5pu057yy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oT5BF8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t2npsi0w25e5pu057yy.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-player"&gt;
  &lt;/a&gt;
  Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Alex Ward&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/indiescope/pen/yMXRxQ"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_AMu6gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz22c8qutzhnwqq44fjj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_AMu6gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz22c8qutzhnwqq44fjj.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-player"&gt;
  &lt;/a&gt;
  Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Sixxis&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/sixxis69/pen/GZyOKZ"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIn8L300--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26bux4q0a3agyfrhqyo0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIn8L300--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26bux4q0a3agyfrhqyo0.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-player"&gt;
  &lt;/a&gt;
  Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Nitesh Kumar Niranjan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/niranjannitesh/pen/ajvgzd"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFf_gAFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxzfe71cwtvtjaik5e9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFf_gAFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxzfe71cwtvtjaik5e9c.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neumorphism-soft-ui-music-player"&gt;
  &lt;/a&gt;
  Neumorphism (Soft UI) Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Nir Tz&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/Nirtz89/pen/abzyjYz"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LIGUwa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06enf0pfvtb1xeyp14d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LIGUwa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06enf0pfvtb1xeyp14d3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-player-ui-design"&gt;
  &lt;/a&gt;
  Music player UI design
&lt;/h2&gt;

&lt;p&gt;Author - Alex Devero&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alexdevero/pen/akjLNw"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umq42O64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abv26jydew73zw612i4l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umq42O64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abv26jydew73zw612i4l.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-player"&gt;
  &lt;/a&gt;
  Music player
&lt;/h2&gt;

&lt;p&gt;Author - sarnakov&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/sarnakov/pen/RRNzJK"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2oGaq91e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4bb1dxtuklpb4j3czk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2oGaq91e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4bb1dxtuklpb4j3czk3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Flat Music Widget UI&lt;/p&gt;

&lt;p&gt;Author - Marcelo Aguila&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/marceloag/pen/Gyhfq"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daWl-phM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m3d2kyjq2qvh97jhpkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daWl-phM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m3d2kyjq2qvh97jhpkr.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#media-player"&gt;
  &lt;/a&gt;
  Media Player
&lt;/h2&gt;

&lt;p&gt;Author - Petegarvin&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/amy_e_carrigan/pen/XWNeGKp"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKl4NolX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi22ui49dghwm3pmayfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKl4NolX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi22ui49dghwm3pmayfg.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neumorphism-soft-ui-music-player"&gt;
  &lt;/a&gt;
  Neumorphism Soft UI Music Player
&lt;/h2&gt;

&lt;p&gt;Author - mixj93&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/mixj93/pen/yLybWGQ"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9THELvHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8jjmx61dxqn828cvkmc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9THELvHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8jjmx61dxqn828cvkmc.gif" alt="Image description" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#player"&gt;
  &lt;/a&gt;
  Player
&lt;/h2&gt;

&lt;p&gt;Author - Tutul&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/TutulDevs/pen/eYZJmBL"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkFIxp_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4y1vvu68xq9cttjhhxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkFIxp_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4y1vvu68xq9cttjhhxq.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dribbble-desktop-music-player"&gt;
  &lt;/a&gt;
  Dribbble Desktop Music Player
&lt;/h2&gt;

&lt;p&gt;Author - Filip Vitas&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/FilipVitas/pen/bYWggQ"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U982Epvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6shd5wbkinxq23yr49.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U982Epvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6shd5wbkinxq23yr49.gif" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3d-cube-media-player-css-only-chrome"&gt;
  &lt;/a&gt;
  3D Cube Media Player CSS only - Chrome
&lt;/h2&gt;

&lt;p&gt;Author - Jamie Coulter&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/jcoulterdesign/pen/EvQRRo"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNgvdpJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0lmcvapa8u2ggsmeho5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNgvdpJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0lmcvapa8u2ggsmeho5.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-player-design-in-css"&gt;
  &lt;/a&gt;
  Music Player Design In CSS
&lt;/h2&gt;

&lt;p&gt;Author - Ahmed Elsakaan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ixahmedxi/pen/RKbdyJ"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HEhE1Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fif1m7voozq5cbhsol2w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HEhE1Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fif1m7voozq5cbhsol2w.gif" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-music-player"&gt;
  &lt;/a&gt;
  Material music player
&lt;/h2&gt;

&lt;p&gt;Author - Roemerdt&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/Roemerdt/pen/rOqVZx"&gt;Demo of Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;Download Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full Blog present on &lt;a href="https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html"&gt;https://www.front-end.codes/2021/12/50-css-music-player-free-source-code.html&lt;/a&gt; with free source code&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>opensource</category>
      <category>design</category>
    </item>
    <item>
      <title>How does Treblle scale on AWS without breaking the bank?</title>
      <author>Vedran Cindrić</author>
      <pubDate>Sat, 25 Dec 2021 13:55:59 +0000</pubDate>
      <link>https://dev.to/cindreta/how-does-treblle-scale-on-aws-without-breaking-the-bank-2m2p</link>
      <guid>https://dev.to/cindreta/how-does-treblle-scale-on-aws-without-breaking-the-bank-2m2p</guid>
      <description>&lt;p&gt;This one has been a long time coming. Like really long. It's been in the back of my head for months on end. But the day is finally here. I'm super happy to share the details of &lt;strong&gt;how do we actually scale Treblle&lt;/strong&gt; without going bankrupt in the process.&lt;/p&gt;

&lt;p&gt;Just like with many of my other blogs I like to start off by setting the tone with some music. I chose a scene from the movie &lt;a href="https://www.imdb.com/title/tt0244244/"&gt;Swordfish&lt;/a&gt; because it accurately depicts how I worked on scaling Treblle with all of the ups and downs. Besides that it really is a good mix of two different songs.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/u1Ds9CeG-VY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So then, like the song says, let's play to the music.&lt;/p&gt;

&lt;p&gt;In case you missed my original blog post about the early days of developing Treblle you can find it &lt;a href="https://treblle.com/blog/a-leap-of-faith"&gt;here&lt;/a&gt;. In it I briefly mentioned that I dropped the entire project a few times because I couldn't get it to scale. Making sure we can scale at a cost without declaring bankruptcy in the first month was something I knew I had to solve before Treblle can exist. So I went ahead and set myself &lt;strong&gt;3 core requirements&lt;/strong&gt; for our infrastructure:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; it had to be as automated as possible&lt;/li&gt;
&lt;li&gt; it had to be globally scalable with top performance&lt;/li&gt;
&lt;li&gt; it had to be as cheap as possible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Did I set myself up for failure with such high requirements? - yes I did. Were there times I thought that hitting all 3 of those wouldn't be possible in my lifetime - yes sir. Did I give up - 3 times in 6 months. But, and there is a but. I never gave up completely. Whenever I failed I would leave it alone for a few weeks and then come back to it with a fresh pair of eyes. This is probably the most valuable thing I learned as a developer. &lt;strong&gt;When you're banging your head against a problem, step aside.&lt;/strong&gt; Let it cool down. Don't work on that work on something else. Take a few hours, days or weeks off. Just do anything else. After your mind is ready you'll find a solution. It works. Every single time. Trust me - I know 😃&lt;/p&gt;

&lt;p&gt;Here's how my path to scale looked like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempt-1-wishful-thinking"&gt;
  &lt;/a&gt;
  Attempt 1: Wishful thinking
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKEvaBiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70q6zzclccjjqsr26lye.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKEvaBiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70q6zzclccjjqsr26lye.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before every serious infrastructure expert on Twitter starts to judge me, I have to note that, I'm by far &lt;strong&gt;no expert in AWS&lt;/strong&gt;, infrastructure, DevOps and all that jazz...To use &lt;a href="https://youtu.be/8_eEyjj5Gz0"&gt;Johnny Ive'ss words&lt;/a&gt;, &lt;strong&gt;I'm just an unapologetically stubborn developer with a dream&lt;/strong&gt; 😎 That's how I started approaching scaling.&lt;/p&gt;

&lt;p&gt;Having seen many of my clients over pay for infrastructure to our beloved Jeff I wanted something better for myself and my project. A simple, elegant way of achieving the maximum with a minimum. Naturally the first thing I meaningfully started to explore was &lt;strong&gt;Load balancing and Auto scaling on AWS&lt;/strong&gt;. It took me ages to grasp the concepts given I'm this old school guy used to SSHing into servers and messing with Ubuntu commands. I figured out that I could use a Load Balancer and attach that to an Auto Scaling group on AWS. It all sounds super complicated and fancy but what actually happens is this: all requests hit a load balancing server which serves like a traffic cop and directs traffic to one of many EC2 instances that run within your auto scaling group. So you generally start with two EC2 instances and then as you need more the auto scaling service by AWS can add more and more of these instances. It started looking like a potential solution so I explored more.&lt;/p&gt;

&lt;p&gt;If you're in the AWS world you know at the end of your journey you just simply end up using ALL their services. The ones that you need and the ones that you didn't even know existed. That's what started happening here. As I started using load balancing in combination with auto scaling I needed to create Amazon Machine Images (AMIs) which essentially would have Ubuntu, Apache and PHP pre-installed so that every new EC2 instance has everything it needs. Then once I figured that out I needed a way to deploy the code to those instances. Then I started using Code Deploy and Github hooks. What happens there is when you push code on you Github repo Code Deploy would take that code and install it onto all EC2 instances that are in the autoscaling group. That was super tricky to set up, a lot of Ubuntu permissions, a lot of agony dealing with temporary files, local cache and Laravel peculiarities. But I somehow managed to get it up and running.&lt;/p&gt;

&lt;p&gt;I spent days researching efficient auto scaling policies and testing them out. I used an RDS database, a serverless one which was super expensive but totally worth it. I also started using AWS ElastiCache for Redis which would allow me to connect all the instances to a shared Redis cluster. &lt;strong&gt;This approach can scale but there were so many problems and the entire process was quite cumbersome&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance the whole process was slow. I would deploy the code and it would take AGES for the code to show up on the EC2 instances. I was never even sure what code was actually running on a given instance. It got so bad I started using weird versioning policies to try to figure it out. Then half the time deployments would fail because of Ubuntu permissions, Laravel permissions, not being able to write to local cache, not being able to install composer packages and similar. Finally it still felt weird that I had to write these policies for launching EC2 instances that run Ubuntu, that need to be updated, patched, restarted and that can jam. &lt;strong&gt;I called it quits when I got into the logistics of running cron jobs and syncing them across X servers&lt;/strong&gt;. It became this nightmare of a concept I felt could get out of control very quickly.&lt;/p&gt;

&lt;p&gt;After working on this for a few months &lt;strong&gt;I concluded that this simply isn't what I'm looking for&lt;/strong&gt;. Both in terms of process and money. Because, keep in mind, you have to pay for every EC2 instance you run and you never know how much you'll need. So you can't reserve instances in order to save money. In any case this would probably be OK for the first few months but it would probably collapse with time. It was a good try but not it didn't tick almost any of the rules I set for myself. Most importantly it didn't seem as elegant and simple. I've found that the best things in life, especially in development, are in its nature very simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempt-2-short-but-sweet"&gt;
  &lt;/a&gt;
  Attempt 2: Short but sweet
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhOInLMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ioo7mc0rnezmdn0g7a9t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhOInLMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ioo7mc0rnezmdn0g7a9t.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My second attempt didn't last long but it started by me learning more about AWS Lambda. It was the new hot trend. Serverless computing. You only pay for what you use. It's measured in milliseconds...It seemed great on paper but most people used it with Python or Node. Given I'm a PHP developer that turned out to be a no go.&lt;/p&gt;

&lt;p&gt;During my research on how to make PHP run on Lambda I stumbled upon Bref at that time which was supposed to make that happen. I spent probably a month trying to get Laravel or any kind of a PHP application running on Lambda using &lt;a href="https://bref.sh/"&gt;Bref&lt;/a&gt; but I simply couldn't do it. There was always something: it was super slow and janky, cold starts were killing me, there were bugs and issues...It wasn't something I wanted to bet at that time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This approach had promise but the tooling wasn't there yet&lt;/strong&gt;, at least for PHP developers. When I looked at this it was early 2019. Laravel Vapor didn't exist and people were still exploring Lambda. I did however like the idea that you can literally run your entire app as a code for a certain amount of time. It's like this beautiful concept where you basically get punished for writing bad code that executes long. &lt;strong&gt;I always strived to write very efficient, optimized code that is above all fast&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;I decided to wait and see&lt;/strong&gt; where AWS would take Lamda, when would some of the limitations be ironed out and finally when will the ecosystem catch up. It's very important that there is an ecosystem of developers around this because otherwise you can't learn how to use it, you can't read up on experiences of others and essentially you will be the one discovering all the early growing pains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempt-3-mysql-wins-the-war"&gt;
  &lt;/a&gt;
  Attempt 3: MYSQL wins the war
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNLPrB6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa530ui9cgneacxtjvlu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNLPrB6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa530ui9cgneacxtjvlu.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fast forward a few months from my last attempt Laravel Vapor gets released. It was still early days but it allowed you, as a Laravel developer, to literally deploy the entire Laravel application to a Lambda function without any setup or hassle. You develop your app as you normally would and once you're ready you type in vapor deploy production and within a few minutes your application is ready and live. Vapor would essentially package the entire application, ZIP it, upload it to S3, deploy it inside of a Lambda function, upload images to a Cloudfront distribution, create all the services you need and connect them into one working thing of beauty. This enabled me, a regular software developer, to essentially build my own super scalable infrastructure without the need to open aws.amazon.com.&lt;/p&gt;

&lt;p&gt;I loved it! I thought I finally cracked it and managed to solve my scaling issues. I started testing it out. It had a few problems but nothing I would deem as a blocker. It worked - magically. At the same time there were a lot of open questions about queues, performance, http support, cold starts and so one..The more I started getting into it the more I thought that &lt;strong&gt;this can't be my only solution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My biggest fear was the database. Yes the entire infrastructure would be serverless, using various other services from AWS but at the end of day I would need to save the data somewhere. And trust me &lt;strong&gt;you can scale everything but scaling a MYSQL database is a whole different ball game&lt;/strong&gt;. I simply knew, I alone, would never be able to do it and the cost of scaling a MYSQL database is HUGE. So Vapor can be a solution if I find a replacement for MYSQL or use something else.&lt;/p&gt;

&lt;p&gt;Besides that I was also afraid to run everything off of the same code base. In case you didn't know, we have SDKs for various programming languages that send the log data from your API to our API. We take that log data, we have to read it, process it, do complicated computational stuff, analyze it and show it to you in near real time. With Laravel you can have a single application for both your web and API interfaces. Which is what we did, our entire stack was a majestic monolith that shared the same codebase - all the models, helper functions and business logic. So I was super afraid that if we messed something up on a completely unrelated part of the platform it could impact the intake process. Yes we could separate our code base into multiple different microservices running on Vapor and solve that problem. But in that case we have complications on scattered codebases and we still didn't solve the MYSQL problem.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;I gave up this path as well&lt;/strong&gt; because I was afraid to use MYSQL as the only source of storing log data. But this time I knew that we would use Laravel and Laravel Vapor for everything else except the intake process. I also knew that the best scenario would be to not use MYSQL for the intake process at all. So again I took a break and started learning up on various different things that would help me solve this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution-a-serverless-symphony"&gt;
  &lt;/a&gt;
  The solution: A serverless symphony
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_o4CslxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlaabopfcdczldscnwvw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_o4CslxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlaabopfcdczldscnwvw.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we get to the fun part&lt;/strong&gt;. I desperately wanted to use Laravel in combination with Laravel Vapor to run our entire website as a Lambda function. There are no servers to install, maintain, no code base plus Vapor got even better but given our use case it simply wasn't enough. On the other hand I needed a solution that could be decoupled from our entire code base, isn't MYSQL based and can run for pennies on the dollar.&lt;/p&gt;

&lt;p&gt;I started rampantly researching many different NoSQL databases, AWS solutions like DynamoDB, reading countless blog posts, spent weeks trying to figure things out but I simply couldn't find a solution that would fit my needs. At the same time I was developing multiple platforms for our agency clients and one of them processed more than &lt;strong&gt;10TB of images per year without breaking a sweat&lt;/strong&gt;. The reason why that was even possible was because we developed it, of course 😄, but beside that it was because it was using Amazon S3. The users would come to the website we built, they would select their local images and using the AWS PHP SDK and a little bit of Javascript they would upload the images DIRECTLY to AWS, in chunks if i might add. It was so beautiful and scalable that I started exploring if &lt;strong&gt;somehow we could use AWS S3&lt;/strong&gt; for our use case. I knew that you could upload directly to AWS S3 but you needed a signed request with a specific payload. So I started exploring how we can sign requests and maybe upload a log directly from the SDK by issuing some temporary permissions or credentials.&lt;/p&gt;

&lt;p&gt;My path led to many roadblocks while trying to do this but, one night, randomly watching AWS videos on Youtube and exploring how Lambda functions worked &lt;strong&gt;I actually managed to figure it out&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The premise of the idea was this: let's somehow send the data to a Lambda function directly from the SDK and then have the Lambda function store the file into AWS S3 as JSON.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first step in this process was to set up our domain on AWS Route 53. AWS wasn't our registrar so that took a few days but we finally got the domain under Jeff's control. Then I created a super simple AWS API Gateway v1 that connects to a Lambda function. It has only one endpoint with the POST method. It had to be Gateway v1 and not the 50% cheaper v2 because of one simple thing: usage plans. So I was actually able to connect our website with the API Gateway in terms of API keys and plans. So all the plans on our website also exist on the API gateway. When you make an account on our website in the background we essentially make a new API Gateway key as well and assign you to a plan. Why do we do this? &lt;strong&gt;Well because AWS takes care of all the API limits&lt;/strong&gt;, making sure you don't go overboard, making sure all the validation is done on their side. So no MYSQL queries to our database, no calls to our server - nothing. Pure AWS - all the way 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1IiI9fMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk47qhsqpkehu65bksn6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1IiI9fMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk47qhsqpkehu65bksn6.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I got the API Gateway to work very closely with our website I wanted to make sure that our SDKs were calling a more friendlier URI than what AWS gives you. So I connected a custom subdomain &lt;strong&gt;rocknrolla.treblle.com&lt;/strong&gt;. Yes, it's a reference to a Guy Ritchie movie with the same name &lt;a href="https://www.imdb.com/title/tt1032755/"&gt;RocknRolla&lt;/a&gt;. Great movie, great cast - you should watch it! Anyhow, once the custom domain was connected it was time to make our Lambda function.&lt;/p&gt;

&lt;p&gt;So the only purpose of the Lambda function would be to take the data it gets from our SDK, via the API Gateway, and dump it into Amazon S3, the most distributed and scalable system in the world. To do that &lt;strong&gt;I used NodeJS, and in 23 lines of code&lt;/strong&gt; I wrote a simple function that does exactly what it needs. Stores the RAW request data, which is your regular JSON, as a .json file into an S3 bucket.&lt;/p&gt;

&lt;p&gt;VOILA! &lt;strong&gt;Now I had a completely scalable intake solution that didn't require a database because all the data was stored on S3&lt;/strong&gt;. Infinitely scalable, distributed, cheap as f***, fast and more importantly totally maintained by AWS.&lt;/p&gt;

&lt;p&gt;That isn't exactly the end of the journey for our logs but it sure took care of the most complicated part. After the log is stored into the S3 bucket I have &lt;strong&gt;another Lambda function which simply notifies our processing pipeline&lt;/strong&gt;, developed in Laravel powered by Laravel Vapor. That processing pipeline loads the file from the S3 bucket and starts as a 5 step process of reading, transforming, enriching the data and then storing parts of that data into a database. This process is entirely based on Laravel Queued jobs and running inside another infinitely scalable and dirt chip service AWS has called SQS.&lt;/p&gt;

&lt;p&gt;Laravel Queues combined with AWS SQS allow us to background long lasting processes and not have to execute them straight away. It's basically like saying: "hey processing pipeline we have a new job in the queue when it's next in line and you have time please process it." Using that approach each log creates up to 5 different background jobs that are executed in sequence. But in order to have the real time feeling for you as a user we show you the log, in your Treblle dashboard, as soon as the the first job is finished processing. &lt;strong&gt;That part is a simple illusion&lt;/strong&gt; that I think even David Copperfield would be proud of. In the first job we literally do only what we need to show you the request on the dashboard. By the time you see the request we are already on job two. By the time you hover towards the request we are on job 3. By the time you click on it we are on job 4.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyF9yzFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ouyipkz1t55ghflardg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyF9yzFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ouyipkz1t55ghflardg.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To process a request and one of it's jobs we need about 500ms.&lt;/strong&gt; So from your SDK to your Treblle dashboard in more or less 500ms. Given the amount of information we give you this is amazing. Just to give you a glimpse of what we have to understand or get: the location of the request, parse out the device information, server information. Map the request to an endpoint, check if the URL has dynamic parts in it, compile docs based on the request, compare the docs to multiple other previous versions...and finally store a lot of the data in MYSQL and show it you in a way that anyone on the team can read it. Of course we do a lot more but in broad strokes you now know what kind of trouble we go through to show you a single request. Also we don't stop and we are improving our processing pipeline every week, trying to push performance to the next level!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As you can see this approach ticks all the requirements I set at the beginning of my scaling journey.&lt;/strong&gt; Because we are using AWS API Gateway we are piggybacking on top of AWSes global infrastructure that helps reduce latency and brings our endpoint closer to you "free of charge". Next, we are using a Lambda function with just 23 lines of code that stores the RAW data into AWS S3. This allows us to reach almost infinite scalability without running any servers, any databases nor have to maintain anything. Finally our entire post processing is built using Laravel and Laravel Vapor which again runs everything without any servers in a Lambda function. To top it all of the entire process is spun off into multiple background jobs that get executed in sequence inside AWS SQS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For you as the user of Treblle this means our intake API never goes down, it has next to no impact on your API and we can handle as many requests as you can without breaking a sweat.&lt;/strong&gt; But optimization for us starts on our SDK level. We develop them with your API in mind. So we use a fire and forget approach when making asynchronous requests isn't possible. If the language supports it we even use queued and background jobs to push logs to us. All in an effort to literally reduce any impact on your API and make sure it's running 24/7. Even if our processing pipeline and/or our website are completely broken down, not working, kaput we will STILL be receiving logs from your API requests and as soon as we are back up we will process those logs and you'll see them. The second part hasn't yet happened, and we'll make sure it doesn't but just in case you were wondering.&lt;/p&gt;

&lt;p&gt;Now you're probably wondering about the cost of this near to infinite scale on AWS. I &lt;a href="https://twitter.com/cindreta/status/1473744091242545153"&gt;recently tweeted this screenshot&lt;/a&gt; from our Laravel Vapor dashboard. &lt;strong&gt;On it you can see that we processed over 7M queued jobs and handled over 1.3 million HTTP requests in the past 30 days.&lt;/strong&gt; On top of that you can see that the average queue duration is 500ms 🤯 You can also see that we ONLY paid 65 USD to handle all of that and around 100 USD more for the RDS database and AWS S3 fees. &lt;strong&gt;So we're able to run our entire stack for less than 200 USD per month at this scale&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We've been running on this architecture for the past 6 months without any down time and we keep doubling the amount of API requests we process every month. I haven't spent one single night thinking about our infrastructure. It simply just works. &lt;strong&gt;It works because I've spent half a year trying to isolate myself, our code base, and our future employees from the entire process.&lt;/strong&gt; At its essence it's such a simple and pure idea of running completely on the AWS infrastructure, controlled by a countless army of DevOps pros that Jeff pays.&lt;/p&gt;

&lt;p&gt;So I'd like to ask for a &lt;strong&gt;round of applause&lt;/strong&gt; 👏 for all the &lt;strong&gt;DevOps teams working at AWS&lt;/strong&gt; that have actually made Treblle possible. Making sure the Lambda functions scale, making sure S3 scales, making sure API Gateway scales...&lt;/p&gt;

&lt;p&gt;Many of you have asked me how we scale, how am I not worried, how we can process as much data. Now you know. It's a symphony of multiple serverless processes that are as scalable as Amazon is. Will we stop there - no we won't : ) There is more room to improve and I'll share some more insights on what we are doing on top of all of this.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the read, I hope it can help you scale something you are working on but above all I hope it puts a little bit of more trust into Treblle as a product.&lt;/p&gt;

&lt;p&gt;As always you can follow me on &lt;a href="https://twitter.com/cindreta"&gt;Twitter&lt;/a&gt;, add me on &lt;a href="https://www.linkedin.com/in/vedrancindric/"&gt;LinkedIn&lt;/a&gt; or read more blog posts on our &lt;a href="https://treblle.com/blog"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChslhQyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak9tb14c5p1sykic21lr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChslhQyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak9tb14c5p1sykic21lr.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh yeah, almost forgot - I just recently published a FREE E-book on how to build amazing, sclable APIs. If you're interested get it right here =&amp;gt; &lt;a href="https://treblle.com/ebooks/the-10-rest-commandments"&gt;https://treblle.com/ebooks/the-10-rest-commandments&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Learn AWS as a Frontend Developer</title>
      <author>Ali Raza</author>
      <pubDate>Sat, 25 Dec 2021 13:45:34 +0000</pubDate>
      <link>https://dev.to/aliraza/learn-aws-as-a-frontend-developer-2j7c</link>
      <guid>https://dev.to/aliraza/learn-aws-as-a-frontend-developer-2j7c</guid>
      <description>&lt;p&gt;Amazon Web Services — AWS, the leading cloud-computing platform, is historically being associated with backend technologies such as DevOps, API development, Databases, etc. This is true, given that AWS and other cloud platforms are mentioned randomly in the jobs for backend developers.&lt;/p&gt;

&lt;p&gt;However, you can learn relevant AWS technologies for your web apps. Most of those are discussed below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-aws-amplify"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. AWS Amplify&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6R4R6nK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmyrnrhqhp8349nw8zy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6R4R6nK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmyrnrhqhp8349nw8zy2.png" alt="Source: GitHub.com" width="880" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Amplify is a set of purpose-built tools and features that enables frontend web and mobile developers to quickly and easily build full-stack applications on AWS. Amplify provides two services: Amplify Hosting and Amplify Studio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Hosting&lt;/strong&gt;&lt;br&gt;
a. AWS Amplify hosting provides a git-based workflow for hosting full-stack serverless web apps with continuous deployment.&lt;br&gt;
b. Amplify supports the common SPA frameworks, for example, React, Angular, Vue.js, Ionic, and Ember, as well as static site generators like Gatsby.&lt;br&gt;
c. Manage production and staging environments for your frontend and backend by connecting new branches.&lt;br&gt;
d. Set up rewrites and redirects to maintain SEO rankings and route traffic based on your client app requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Amplify Studio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. The Studio is a visual development environment that simplifies the creation of scalable, full-stack web and mobile apps.&lt;br&gt;
b. Set up authentication for your app.&lt;br&gt;
c. Powerful and easy-to-understand authorization.&lt;br&gt;
d. Infrastructure-as-code configures all backend capabilities with AWS CloudFormation.&lt;br&gt;
e. Use Studio’s visual designer to build frontend UI components. Choose from dozens of designs in the pre-built UI component library.&lt;br&gt;
f. Import Figma prototypes built by designers into Studio as React code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-aws-appsync"&gt;
  &lt;/a&gt;
  2. AWS AppSync
&lt;/h2&gt;

&lt;p&gt;AWS AppSync is a service to create GraphQL based APIs for interaction between multiple data sources such as AWS DynamoDB, AWS Lambda, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTGI7tn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1ghzvrjezf9ygyro3b6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTGI7tn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1ghzvrjezf9ygyro3b6.png" alt="Source: GitHub.com" width="880" height="264"&gt;&lt;/a&gt;&lt;br&gt;
source: AWS&lt;/p&gt;

&lt;p&gt;Some of its features are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Real-time, collaborative mobile, and web apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS AppSync lets you build collaborative apps with shared data that is updated in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Offline data sync support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For mobile and web apps, AppSync provides local data access when devices go offline, and data synchronization with &lt;br&gt;
customizable conflict resolution, when they are back online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Integrating data from multiple sources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS AppSync allows access data in Amazon DynamoDB, triggers AWS Lambda functions, or runs Amazon OpenSearch queries, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Data collision detection and conflict resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS AppSync can automatically resolve conflicts on data that is shared between multiple users and devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Secure data access&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon AppSync integrates with Amazon Cognito and AWS Identity and Access Management, so you can set fine-grained permissions on GraphQL operations and keep users and app data secure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-amazon-device-farm"&gt;
  &lt;/a&gt;
  3. Amazon Device Farm
&lt;/h2&gt;

&lt;p&gt;AWS Device Farm provides an extensive range of desktop browsers and mobile devices to test web and mobile applications. It creates videos and logs to help identify issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a. Automated testing in parallel on multiple devices.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ERfRu-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k685u3ykaqtjhr51fj7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ERfRu-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k685u3ykaqtjhr51fj7v.png" alt="Source: GitHub.com" width="880" height="294"&gt;&lt;/a&gt;&lt;br&gt;
Source: AWS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b. Test your app on any device directly from your browser.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3q16YE-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r314oxcns7qvxqft4h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3q16YE-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r314oxcns7qvxqft4h9.png" alt="Source: GitHub.com" width="880" height="294"&gt;&lt;/a&gt;&lt;br&gt;
Source: AWS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-amazon-location-service"&gt;
  &lt;/a&gt;
  4. Amazon Location Service
&lt;/h2&gt;

&lt;p&gt;The location service provides maps, trackers, route calculators, and more services. All queries are anonymous and user data is not passed. Esri and HERE services are used for routes, tracking, and geofencing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-aws-codecommit"&gt;
  &lt;/a&gt;
  5. AWS CodeCommit
&lt;/h2&gt;

&lt;p&gt;You might have been using GitHub, BitBucket, and GitLab for hosting your codebase, however, AWS CodeCommit is also another solution for your scalable private repos. It is highly available, secure, fully managed, and can store anything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-aws-xray"&gt;
  &lt;/a&gt;
  6. AWS X-Ray
&lt;/h2&gt;

&lt;p&gt;AWS X-Ray helps developers analyze and debug production, distributed applications. With X-Ray, you can understand how your application and its underlying services are performing to identify and troubleshoot the root cause of performance issues and errors. X-Ray provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components. It helps developers with:&lt;/p&gt;

&lt;p&gt;a. Review request behavior&lt;/p&gt;

&lt;p&gt;b. Discover application issues and improve application performance&lt;/p&gt;

&lt;p&gt;c. Designed for a variety of applications&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5g_fy3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iiffft606zi141xs1kpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5g_fy3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iiffft606zi141xs1kpd.png" alt="Source: GitHub.com" width="880" height="294"&gt;&lt;/a&gt;&lt;br&gt;
Source: AWS&lt;/p&gt;

&lt;p&gt;The above-mentioned services are more suitable for frontend development and can be a good addition to your skillset.&lt;br&gt;
Let’s connect on &lt;a href="https://www.linkedin.com/in/thealiraza/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://twitter.com/nowaliraza"&gt;Twitter&lt;/a&gt;&lt;br&gt;
Thank you.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>react</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Useful JavaScript Code Snippets for Common Problems 😎</title>
      <author>Tabassum Khanum</author>
      <pubDate>Sat, 25 Dec 2021 13:31:16 +0000</pubDate>
      <link>https://dev.to/codewithtee/useful-javascript-code-snippets-for-common-problems-2lpc</link>
      <guid>https://dev.to/codewithtee/useful-javascript-code-snippets-for-common-problems-2lpc</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;
JavaScript is one of the widely used languages in Web Development.  A broad and vital ecosystem has evolved around JS, offering tons and tons of frameworks and libraries that help you develop applications faster. At the same time, it made our coding experience a little complicated. Sometimes it’s good to take a step back and try to understand how to do things without a library. In this article, we will be going through some JS snippets which will provide a little help with those repetitive, simple tasks that come up each day. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sort-an-array"&gt;
  &lt;/a&gt;
  1. Sort an array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//strings
const names = ["Seema", "Rekha", "Jaya"];
names.sort();
//['Jaya', 'Rekha', 'Seema' ]

//Numbers
const numbers = [101, 8, 87];
numbers.sort((a, b) =&amp;gt; {
  return a - b;
});
//[ 8, 87, 101 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-select-a-random-element"&gt;
  &lt;/a&gt;
  2.  Select a random element
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items = ["Ball", "Bat", "Cup"]
const randomIndex = Math.floor(Math.random()*items.length)
items[randomIndex]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-reverse-a-string"&gt;
  &lt;/a&gt;
  3. Reverse a string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function reverseString(string) {
       return string.split(" ").reverse().join(" ")
}

revereseString("Random String")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-check-if-element-has-a-class"&gt;
  &lt;/a&gt;
  4. Check if element has a class
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = document.querySelector("#element")
element.classList.contains("active")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-string-interpolation"&gt;
  &lt;/a&gt;
  5. String interpolation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = "Jaya"
console.log(`Hi, ${name}. You have ${2 ** 3} new notifications.`}
//Hi, Jaya. You have 8 new notifications.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-loop-through-an-array"&gt;
  &lt;/a&gt;
  6. Loop through an array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cars = ["Ford", "BMW", "Audi" ]
for (let car of cars) {
      console.log(car)
}

/*
Ford
BMW
Audi
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-get-current-time"&gt;
  &lt;/a&gt;
  7.  Get current time
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const date = new Date()
const currentTime = 
   `${date.getHours()}:${date.getMintues()}:${date.getSeconds()}`

console.log(currentTimes)
//example output: "22:16:41"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-replace-part-of-a-string"&gt;
  &lt;/a&gt;
  8. Replace part of a string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const string = "You are awesome."
const replacedString = string.replace("You", "We")

console.log(replacedString) //Output: "We are awesome"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-destructing-variable-assignment"&gt;
  &lt;/a&gt;
  9.  Destructing variable assignment
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let profile = ['bob', 34, 'carpenter'];
let [name, age, job] = profile;
console.log(name);
// bob
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-using-the-spread-operator"&gt;
  &lt;/a&gt;
  10. Using the spread operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let data = [1,2,3,4,5];
console.log(...data);
//  1 2 3 4 5
let data2 = [6,7,8,9,10];
let combined = [...data, ...data2];
console.log(...combined);
// 1 2 3 4 5 6 7 8 9 10
console.log(Math.max(...combined));
// 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#11-return-number-maximum-elements-from-an-array"&gt;
  &lt;/a&gt;
  11.  Return [Number] Maximum Elements From an Array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const maxElement = ( array, number = 1 ) =&amp;gt; [...array].sort(( x,y ) =&amp;gt; y - x).slice(0, number);

//Example 
maxElement ([ 1,2,3,4,5]);  // [5]
maxElement([ 6, 7, 8, 9 , 10, 10] , 2);   // [10,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript Question: What will be the output?</title>
      <author>SnowBit</author>
      <pubDate>Sat, 25 Dec 2021 13:06:01 +0000</pubDate>
      <link>https://dev.to/snowbit/javascript-question-what-will-be-the-output-m6l</link>
      <guid>https://dev.to/snowbit/javascript-question-what-will-be-the-output-m6l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-will-be-the-output"&gt;
  &lt;/a&gt;
  What will be the output?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcXtMIOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCNTKqF1vhFYX_v0ERnUa1RQ%3Flabel%3DSubscribe%2520to%2520my%2520YouTube%2520Channel%26style%3Dsocial" alt="YouTube Channel Subscribers" width="236" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tried and Tested Top 10 Video Calling API</title>
      <author>Stuti Nath</author>
      <pubDate>Sat, 25 Dec 2021 13:01:40 +0000</pubDate>
      <link>https://dev.to/stutinath/top-video-calling-api-and-conferencing-sdk-47g0</link>
      <guid>https://dev.to/stutinath/top-video-calling-api-and-conferencing-sdk-47g0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#want-to-integrate-the-secure-amp-fastest-video-calling-api-to-your-application-amp-website-here-is-the-top-video-calling-apis-that-will-drive-the-business-traffic"&gt;
  &lt;/a&gt;
  Want to integrate the secure &amp;amp; fastest Video calling API to your application &amp;amp; website? Here is the top Video calling APIs that will drive the business traffic!
&lt;/h3&gt;

&lt;p&gt;To improve productivity and connectivity, A video calling feature can be integrated  into any Web browser and mobile application with RTC via APIs . In this modernized world, Technology enhanced communication has already taken Place and will surely Upgrade in the Future. The use of mobile gadgets has surged at a rapid pace. The world is growing to step into the digital world where everything is accessible with just a few easy clicks through Video calling API. Behind the triumph of any company, there is a huge increase in digitalization. Now all of us prefer virtual communication not willingly but  rather than giving a physical appearance. After the Covid Booster shot , Virtual seems better.&lt;br&gt;
There are many prestigious organizations working on the aspect of virtual communication. The internet is flooded with so many video calling applications. These kits are developed by the software development kits that help us to communicate with the clients, corporates, and families. Because of these tools, Virtual meets becomes easy and efficient without any lags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-in-the-article-we-have-mentioned-some-effective-approaches-towards-the-top-10-video-calling-api"&gt;
  &lt;/a&gt;
  Here in the article, we have mentioned some effective approaches towards the Top 10 video calling API.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why is the popularity of video calling API increasing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The entire world has started adopting virtual activities for distant communication. If you notice, you can clearly find how students choose virtual or digital classrooms and how the healthcare industry is choosing virtual patient care assistance. &lt;br&gt;
Overall, the whole market is looking to turn their business into digital hype. The video calling API has been experiencing a huge hike in Capitalism. Choosing the right method of communication depends on features of SDK. Here in the below section, we bring some of the best tools that help to leverage your business smartly with digital communication.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-best-top-10-video-calling-api-popular-in-the-market"&gt;
  &lt;/a&gt;
  The best top 10 video calling API popular in the market:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1video-sdk"&gt;
  &lt;/a&gt;
  1.&lt;a href="https://videosdk.live/"&gt;Video SDK&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Video SDK is the driving option that makes video conferencing efficient in every possible way to explore the world of digital communication. This tool allows you to explore how the video SDK creates an impact on engagement. This tool allows the video calls to be integrated within 10 minutes along with the VideoSDK pre-built feature like whiteboards, Q&amp;amp;A, and polls. This video conferencing API tool supports unlimited private channels by integrating with advanced video streaming possibilities. &lt;/p&gt;

&lt;p&gt;Video SDK provides you best API to embed video/chat in your applications. It offers Improve video engagement with reliable video conferencing running in minutes. Support of platforms like JavaScript , React JS, React native android, flutter ,iOS. It enables the opportunity to integrate real time communication SDK.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-video-sdk"&gt;
  &lt;/a&gt;
  Features of Video SDK
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy to integrate prebuilt  live streaming SDK with 5000 participant support.&lt;/li&gt;
&lt;li&gt;Real-time communication SDK with 10,000 minutes free every month.&lt;/li&gt;
&lt;li&gt;It just requires 10 minutes to integrate explicit code.&lt;/li&gt;
&lt;li&gt;A cost-effective tool with long term solution.&lt;/li&gt;
&lt;li&gt;Unlimited channels with enhanced video quality.&lt;/li&gt;
&lt;li&gt;UI support &amp;amp; auto-scalable parallel rooms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2agora"&gt;
  &lt;/a&gt;
  2.&lt;a href="https://www.agora.io/en/"&gt;Agora&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This tool works to build a new future with the help of a real-time communication channel. The company is based on real-time communication that develops SDKs and APIs. This tool works on the engagement for the users by delivering the video call service with real-time voice and messaging, live streaming products. The company is working towards building real-time connections in the virtual world. &lt;br&gt;
With Agora video conferencing API, anyone can engage by embedding the vivid voice and video application. It provides the SDKs along with the building blocks to enable the possibility of adopting the real-time engagement possibilities. The tool offers video call, voice call, interactive live streaming, recording.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-agoraio-apis"&gt;
  &lt;/a&gt;
  Features of Agora.io APIs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The tool offers an intelligent network that will help to 
connect automatically in real-time analysis. &lt;/li&gt;
&lt;li&gt;Select the efficient routing path with 200+ data centers.&lt;/li&gt;
&lt;li&gt;Enterprise support Platforms.&lt;/li&gt;
&lt;li&gt;Minimal Battery Consumption.&lt;/li&gt;
&lt;li&gt;It can withstand even the sudden spike in traffic.&lt;/li&gt;
&lt;li&gt;Extensive API selection with customizable UI extension.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3zujonow"&gt;
  &lt;/a&gt;
  3.&lt;a href="https://zujonow.com"&gt;ZujoNow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This company is developing its products on cutting-edge technologies. The company delivers the products to its clients based on the video conferencing tool with effective scalability. It delivers customizable SDKs to clients. The video conferencing API company is popularly dealing with the products like on-demand videos, live streaming, and real-time communication. &lt;br&gt;
This is a well-crafted platform that is helping educators and other related industries. The company delivers an end-to-end solution that enables easy integration with real-time communication, on-demand video, and a content delivery network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-zujo-now-apis"&gt;
  &lt;/a&gt;
  Features of zujo now APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Provide inbuilt support to the healthcare, edtech, and dating business.&lt;/li&gt;
&lt;li&gt;Deliver interacting experience with chatting, voice &amp;amp; video calling.&lt;/li&gt;
&lt;li&gt;Get zero lags while connecting.&lt;/li&gt;
&lt;li&gt;Low latency support with real-time video streaming encoding.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4dailyco"&gt;
  &lt;/a&gt;
  4.&lt;a href="https://www.daily.co/"&gt;Daily.co&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is the real-time video and audio SDK developer platform that focuses on the clients. Best scalable video conferencing API. The platform is developing the global infrastructure solution to deliver the people throughout the world. With Daily.co, anyone can add live audio and video experience to the products along with the prebuilt user interface &amp;amp; creating custom layouts. This tool helps to build calls for any device with the quality video feature of 1080p HD video and screen sharing. Daily.co also supports the flexible recording options with transcriptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-dailyco-apis"&gt;
  &lt;/a&gt;
  Features of Daily.co APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It leaves the video call UI entirely up to you.&lt;/li&gt;
&lt;li&gt;Automatic bandwidth and switching between group sessions.&lt;/li&gt;
&lt;li&gt;Easy to use options with pre-built API.&lt;/li&gt;
&lt;li&gt;Automatic tuning of video Quality.&lt;/li&gt;
&lt;li&gt;Global infrastructure with HD RTMP streaming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5enablexio"&gt;
  &lt;/a&gt;
  5.&lt;a href="https://www.enablex.io/"&gt;Enablex.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This video solution tool helps build the HD-enabled videos application on different platforms. The tool supports Web applications, iOS and android platforms. This tool supports amazing APIs and SDKs that deliver one-to-one video chats along with the option of group video calls. Here one can get an extensive video chat experience for the users. Get the live interactive broadcast feature to broadcast varieties of content through the devices directly on the social media platforms like YouTube, Facebook, and other channels. The tool works on developing communication APIs that focus on providing real-time solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-enablexio-apis"&gt;
  &lt;/a&gt;
  Features of Enablex.io APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get advanced features like Breakout channels (rooms), 
Background blurring features.&lt;/li&gt;
&lt;li&gt;One-time payment with upfront solution.&lt;/li&gt;
&lt;li&gt;Customizable functionality with endless features.&lt;/li&gt;
&lt;li&gt;Get end to end encryption.&lt;/li&gt;
&lt;li&gt;Get customizable UI with tangible layouts.&lt;/li&gt;
&lt;li&gt;Up to 100 for video meetings and 1000 for webinar mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6mirrorfly"&gt;
  &lt;/a&gt;
  6.&lt;a href="https://www.mirrorfly.com/"&gt;Mirrorfly&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;MirrorFly is another audio and video calling API and SDK provider that offers a solution to both large and small-scale organizations. This is the versatile messaging solution working as the market's prime product. The tool is highly customizable as compared to any other. It goes perfectly with iOS, Android, and Web Applications. With this, anyone can get the absolute chat-app solution that provides a design-enriched UI/UX. Here you can get the intuitive build with a plethora of other features. This is embedded with WebRTC that enables HD quality video interaction along with the VoIP feature that gives a dynamic voice experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-mirrorfly-apis"&gt;
  &lt;/a&gt;
  Features of Mirrorfly APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Real time language translation.&lt;/li&gt;
&lt;li&gt;Get a 100% customizable solution.&lt;/li&gt;
&lt;li&gt;Private 1 to 1 chat with offline messages.&lt;/li&gt;
&lt;li&gt;Interactive Live Broadcasting with SIP calling feature.&lt;/li&gt;
&lt;li&gt;Push to Talk feature with VoIP calling facility.&lt;/li&gt;
&lt;li&gt;A versatile messaging solution with endless feature.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7twilio"&gt;
  &lt;/a&gt;
  7.&lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The platforms develop video application tools that are fully customized and scalable. This is completely flexible for usage. This tool constructs the applications and the connectivity that builds up capitalism . It allows chats, video, and programmable chats based on real-time communication with scalability and video calling API. This is a perfect fit for enterprises from small to wide. This helps the organization to engage its users in every step of the journey. This is a flexible API for any channel which has built-in intelligence with global infrastructure support. This single platform comes with flexible APIs for any channel, global infrastructure, built-in intelligence, and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-twilio-apis"&gt;
  &lt;/a&gt;
  Features of Twilio APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It gives free trial credits for video groups and video P2P .&lt;/li&gt;
&lt;li&gt;Cloud recording facility with workflow integration.&lt;/li&gt;
&lt;li&gt;24 hours support through the mail and chat.&lt;/li&gt;
&lt;li&gt;Get endless features with an intuitive interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8cometchat"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://www.cometchat.com/"&gt;Cometchat&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This platform is designed for providing the APIs and SDKs for the unlimited solution to a variety of industries. The platform supports a solution to various healthcare organizations, dating, the healthcare community, and social media integration. It also delivers the features like on-demand videos and live streaming and the complete authority to the users for customizing their Whitelabel. Cometchat, the video conferencing API, supports varieties of languages and solutions like voice and video calling, scalable in-app messaging, and cross-platform compatibility. This tool supports medium to large-scale organizations. The best part of the platform is It has WebRTC-enabled HD video and voice calling capabilities. They also offer the free-of-cost service that holds limited options to small-scale organizations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-cometchat-apis"&gt;
  &lt;/a&gt;
  Features of Cometchat APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One-on-one text chat along with group chat facility.&lt;/li&gt;
&lt;li&gt;Voice calling &amp;amp; video calling, conferencing tools.&lt;/li&gt;
&lt;li&gt;Type and Read indicators with online Presence Indicators.&lt;/li&gt;
&lt;li&gt;Drag &amp;amp; drop chat widgets.&lt;/li&gt;
&lt;li&gt;Build a completely custom UPI &amp;amp; workflow.&lt;/li&gt;
&lt;li&gt;Autoscaling &amp;amp; white label feature with message translation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9pubnub"&gt;
  &lt;/a&gt;
  9.&lt;a href="https://www.pubnub.com/"&gt;PubNub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is considered one of the best in-app chats that deliver the features of real-time chat engagement. The tool offers extensive functionality, full control, and customization without the time and expense of building in-house. With this, anyone can get complete outsourcing to the clients. It delivers the features and functionalities like custom chat, in-class integrations, functionality, and Chat UI support. This is specially built for conferences, virtual conversations, meetings, and enterprise entities. Get a one-stop platform &amp;amp; receive top-quality integration features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pubnub-apis"&gt;
  &lt;/a&gt;
  Features of PubNub APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get transfer the metadata pre-call facility.&lt;/li&gt;
&lt;li&gt;Receive extensive plugins in one platform.&lt;/li&gt;
&lt;li&gt;WebRTC signaling along with an end to end encryption.&lt;/li&gt;
&lt;li&gt;Get push notifications with complete messaging broadcasting solutions.&lt;/li&gt;
&lt;li&gt;Integrate, migrate &amp;amp; launch quickly.&lt;/li&gt;
&lt;li&gt;Open-source UI kit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10sinch"&gt;
  &lt;/a&gt;
  10.&lt;a href="https://www.sinch.com/"&gt;Sinch&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Sinch is another API that manages different APIs through messaging and calling facilities. Through this, anyone can receive the services like video calling, SMS verification, voice calls, and other engagement platforms. Varieties of industries receive an extensive solution from this, which includes health, telecommunications, retail, media and entertainment, and more. Through this, a lot of operators get opportunities for monetizing the wholesale and getting rid of the frauds and other activities. This video conferencing API offers an instant messaging SDK and API to the iOS, Android, and Web Applications. It gives complete freedom to the users for customization and supports SIP, VoIP, and PSTN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-sinch-apis-"&gt;
  &lt;/a&gt;
  Features of sinch APIs :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It offers high Quality video.&lt;/li&gt;
&lt;li&gt;Get Personalized Messaging with Voice Calling service.&lt;/li&gt;
&lt;li&gt;Live Broadcasting.&lt;/li&gt;
&lt;li&gt;Personalized communication with advanced setup.&lt;/li&gt;
&lt;li&gt;600+ operators connections globally.&lt;/li&gt;
&lt;li&gt;Amazing easy &amp;amp; intuitive interface with the endless possibilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;Even so, there are handful of good articles and video tutorials on internet. Most of the video conferencing API companies have effectively  made effective changes in their features and will definitely upgrade in future so that they can deal with clients all across the world.&lt;br&gt;
In this era, organizations need such video calling API platforms to drive their business with ease. This article will provide insight into the best video calling API platforms that support various industries with one click . &lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Advanced iOS development - Build Phases Part 1</title>
      <author>Omar Labib</author>
      <pubDate>Sat, 25 Dec 2021 12:16:01 +0000</pubDate>
      <link>https://dev.to/olabib/advanced-ios-development-build-phases-part-1-igk</link>
      <guid>https://dev.to/olabib/advanced-ios-development-build-phases-part-1-igk</guid>
      <description>&lt;p&gt;Have you ever come across this build error in Xcode..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siwbMJA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j5k09zer9bu4tlu9hyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siwbMJA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j5k09zer9bu4tlu9hyb.png" alt="Xcode build phase failure" width="702" height="120"&gt;&lt;/a&gt;&lt;br&gt;
I'm sure you have.&lt;br&gt;
During my first years of iOS development, this has been one of the most ambiauious errors for me, I can only see that I've messed up somewhere in the codebase and I have to go and see what I've done wrong, however, after I got to know build phases better in Xcode this couldn't make more sense..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-phases"&gt;
  &lt;/a&gt;
  Build Phases
&lt;/h2&gt;

&lt;p&gt;In Xcode build phases section is the scope where Xcode offers you the possibility to run custom scripts &lt;em&gt;- known as run scripts -&lt;/em&gt; as part of the build process, these script can be tailored for any behavior you can think of. The cool thing though is that you can control the build process through this powerful script of you..&lt;br&gt;
Let's better have an example..&lt;/p&gt;

&lt;p&gt;For Starter, How can we add those run scripts? &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ToFZJWIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1fjxulghozxue8lhrfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ToFZJWIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1fjxulghozxue8lhrfa.png" alt="Xcode build phase" width="880" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Head to you project file.&lt;/li&gt;
&lt;li&gt;Choose your app target.&lt;/li&gt;
&lt;li&gt;Navigate the build phases tab.&lt;/li&gt;
&lt;li&gt;Click the + button and choose &lt;code&gt;New Run Script Phase&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will add a run script template for you..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKcP5VRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffv0pyu9jzb5nj56h2hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKcP5VRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffv0pyu9jzb5nj56h2hw.png" alt="Xcode Run Script" width="880" height="845"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can give a cool name to your script.&lt;/li&gt;
&lt;li&gt;This is the path you shell on your machine.&lt;/li&gt;
&lt;li&gt;The Shell script that will be run during the building process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: All these run scripts will run serially, and you can change the order by grabbing the run script and moving it up or down.&lt;/em&gt; &lt;br&gt;
For our very first run script, we will be doing something very simple..&lt;br&gt;
Just printing some message to the user..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBPmERmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2x9ueij5gdtvkqh0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBPmERmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2x9ueij5gdtvkqh0z.png" alt="Xcode build phase" width="880" height="347"&gt;&lt;/a&gt;&lt;br&gt;
This message however won't be printed to the log. Instead, you can access it through the build report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olNrv79p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzrm5zuhifzyjgk78pjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olNrv79p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzrm5zuhifzyjgk78pjq.png" alt="Xcode Build Report" width="880" height="665"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the report navigator.&lt;/li&gt;
&lt;li&gt;Choose your build of interest.&lt;/li&gt;
&lt;li&gt;Choose all messages tab.&lt;/li&gt;
&lt;li&gt;You will find the message printed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's tweak this build a little, let's break the build for no reason..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNW6JPIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba3ucmg4icy9853s7aci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNW6JPIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba3ucmg4icy9853s7aci.png" alt="Image description" width="880" height="198"&gt;&lt;/a&gt;&lt;br&gt;
The key here is to exit the script with any value rather than zero, this will indeed fail the script and all the succeeding run scripts won't even run.&lt;/p&gt;

&lt;p&gt;This will result in our friendly message we now understand its meaning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNHFShiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxr5f2lc4zm5d2u15a7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNHFShiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxr5f2lc4zm5d2u15a7m.png" alt="Xcode Build Phase" width="846" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is it for our first part, in the next part we will build upon our knowledge and develop a very useful run script to use in you apps, so stay tuned 😉&lt;/p&gt;

</description>
      <category>ios</category>
      <category>xcode</category>
      <category>swift</category>
    </item>
    <item>
      <title>Implementing HTTP Polling</title>
      <author>Abhinav Pandey</author>
      <pubDate>Sat, 25 Dec 2021 12:00:08 +0000</pubDate>
      <link>https://dev.to/abh1navv/implementing-http-polling-1dmi</link>
      <guid>https://dev.to/abh1navv/implementing-http-polling-1dmi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#polling"&gt;
  &lt;/a&gt;
  Polling
&lt;/h2&gt;

&lt;p&gt;Polling is a technique for making requests in a non-blocking manner. It is particularly useful for applications that need to make requests to services which take a long time to process the request.&lt;/p&gt;

&lt;p&gt;Let's say we have a client and a server. If the client makes a synchronous request, its thread will block until the server responds. For a long process at the server, this can be problematic. In a real-world application accessed by lots of users, this would lead to reduced ability of the application to serve new requests.&lt;/p&gt;

&lt;p&gt;For e.g. if the capacity of the client is to hold 100 requests at a time and the server takes a few minutes to process a single request, this can lead to a situation where the client is unable to serve new requests because there are no free threads.&lt;/p&gt;

&lt;p&gt;To solve this, we need to make the client asynchronous. Polling is one of the techniques which can be used to achieve this.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;how polling works in a nutshell&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client makes a request to the server just like a simple HTTP request.&lt;/li&gt;
&lt;li&gt;The server responds to the client but has not finished processing the request.&lt;/li&gt;
&lt;li&gt;The client polls the server after some interval to see if the request has been processed.&lt;/li&gt;
&lt;li&gt;If the request has been processed, the client receives the response.&lt;/li&gt;
&lt;li&gt;If not, the client polls again after some interval.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Keep in mind that the client here can be a server in itself, like in a microservice architecture. It can also be a frontend application. I will talk about this towards the end of this article.&lt;/p&gt;

&lt;p&gt;Now let's discuss some steps in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-initial-processing-and-response"&gt;
  &lt;/a&gt;
  The initial processing and response
&lt;/h3&gt;

&lt;p&gt;The server receives the request and does the bare minimum processing before sending the response back to the client.&lt;/p&gt;

&lt;p&gt;Minimum processing would look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if the request is &lt;strong&gt;authorized&lt;/strong&gt; - whichever authentication mechanism is used.&lt;/li&gt;
&lt;li&gt;Check if the request is &lt;strong&gt;valid&lt;/strong&gt; - contains all the required parameters. Additionally, the server can check if the request can be converted to a domain object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These checks make sure the request is "processable". Any &lt;strong&gt;client side errors&lt;/strong&gt; (4xx) like Bad request, unauthorized, etc. are returned to the client at this stage itself. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-the-response-contain"&gt;
  &lt;/a&gt;
  What should the response contain?
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The status of the request - Preferably &lt;strong&gt;202 Accepted&lt;/strong&gt;. This is to indicate that the request has been received and is being processed.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;status endpoint&lt;/strong&gt; to be used for polling.&lt;/li&gt;
&lt;li&gt;Any of the two urls will need to contain &lt;strong&gt;a unique identifier for the request&lt;/strong&gt;. We have a few options:

&lt;ul&gt;
&lt;li&gt;The id of the request - Assuming every request had a unique id.&lt;/li&gt;
&lt;li&gt;The id of the resource which is being created - if the request is a create request. For e.g. if the processing results in creating a new resource, the server needs to create a token corresponding to the resource and send it back to the client.&lt;/li&gt;
&lt;li&gt;Basically anything that uniquely identifies the request. This is open to implementation decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;polling interval&lt;/strong&gt; - The time interval between two successive polls. This is optional from the server end. The client can also choose the interval. However, it is recommended that the server chooses the interval.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the polling is done with the unique identifier, the status endpoint should be able to use the identifier to check the status of the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-status-endpoint"&gt;
  &lt;/a&gt;
  The status endpoint
&lt;/h3&gt;

&lt;p&gt;The status endpoint is a &lt;strong&gt;GET&lt;/strong&gt; request to the server. It is used to check the status of the request.&lt;br&gt;
It contains a unique identifier for the request usually appended to the path. E.g. &lt;em&gt;/status/{id}&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#status-calls"&gt;
  &lt;/a&gt;
  Status calls
&lt;/h4&gt;

&lt;p&gt;The status endpoint is called periodically by the client to check the status of the request.&lt;/p&gt;

&lt;p&gt;What happens when if the request passes, fails or is still in progress has a few different ways to be handled. I recommend always treating the status endpoint in a RESTful manner. Which means whether the request has passed, failed or is still in progress, the status endpoint should return a &lt;strong&gt;200 OK&lt;/strong&gt; status with the appropriate response in the body.&lt;/p&gt;

&lt;p&gt;Let's see an example of a status endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/status/{id}&lt;/span&gt;
      &lt;span class="s"&gt;get&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
         &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get the status of a request&lt;/span&gt;
         &lt;span class="na"&gt;operationId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;getStatus&lt;/span&gt;
         &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;200'&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status of the request&lt;/span&gt;
               &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                        &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Status'&lt;/span&gt;
         &lt;span class="err"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;401'&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status request is unauthorized&lt;/span&gt;
               &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                        &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Error'&lt;/span&gt;
         &lt;span class="err"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;404'&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status request is not found&lt;/span&gt;
               &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                        &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Error'&lt;/span&gt;
&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;Status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status of the request&lt;/span&gt;
            &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Passed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Failed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;InProgress&lt;/span&gt;
         &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The url of the final resource&lt;/span&gt;
         &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The message corresponding to the status&lt;/span&gt;
            &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Request passed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Request failed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Request still in progress&lt;/span&gt;
         &lt;span class="na"&gt;nextPoll&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;integer&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The time in seconds to wait before polling again&lt;/span&gt;
            &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;int64&lt;/span&gt;
   &lt;span class="na"&gt;Error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The error message&lt;/span&gt;
            &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Invalid request&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Unauthorized request&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're not familiar with OpenAPI, you can read more about it &lt;a href="https://swagger.io/docs/specification/open-api-specification/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In that case only focus on the status object. It contains: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the status of the request, &lt;/li&gt;
&lt;li&gt;the url of the final resource, &lt;/li&gt;
&lt;li&gt;the message corresponding to the status and &lt;/li&gt;
&lt;li&gt;the time in seconds to wait before polling again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-http-polling"&gt;
  &lt;/a&gt;
  When to use HTTP polling
&lt;/h3&gt;

&lt;p&gt;There can be a number of reasons to use HTTP polling and a number of reasons not to. &lt;br&gt;
It is an old way of doing things and it is not recommended when a superior way is available.&lt;/p&gt;

&lt;p&gt;Other popular ways of doing asynchronous requests are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebSockets or Webhooks for responses.&lt;/li&gt;
&lt;li&gt;Queue-based communication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But for both of these approaches, the client should be a backend server in itself. Moreover, the original server should be able to communicate with the client using the return protocol.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So naturally, for frontend applications (websites, apps, desktop clients, etc) , HTTP polling is a valid option.&lt;/li&gt;
&lt;li&gt;It is also a valid option when the server cannot fire back HTTP requests to its clients due to network/security restrictions. We cannot use webhooks in this scenario.&lt;/li&gt;
&lt;li&gt;Sometimes, the server runs legacy code and it cannot communicate with the client using the latest protocols.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#lets-implement-a-simple-http-polling-example"&gt;
  &lt;/a&gt;
  Let's implement a simple HTTP polling example
&lt;/h2&gt;

&lt;p&gt;Imagine a use case where you have a frontend application that needs to make an HTTP request to a backend server. The server will take a long time to process the request so HTTP polling is a good option.&lt;br&gt;
The client is a javascript function running in a browser.&lt;/p&gt;

&lt;p&gt;The original request is to create a new user. If the request is successful, a 202 response is returned along with the status endpoint and the next polling time in response.&lt;/p&gt;

&lt;p&gt;Let's see the client code for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;password&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;statusUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pollStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's look at the server code in Spring Boot for this request. It sends an immediate response and executes the request in a separate thread. It also saves the request id in the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserService&lt;/span&gt; &lt;span class="n"&gt;userService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;RequestService&lt;/span&gt; &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="no"&gt;POLL_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Valid&lt;/span&gt; &lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;requestId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;randomUUID&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PENDING"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="n"&gt;userService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createUser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;createResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createStatusUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestId&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="no"&gt;POLL_INTERVAL&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACCEPTED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am not covering security and validation here. &lt;br&gt;
These concerns are handled by Spring boot before the request reaches the controller if &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Spring Security is configured.&lt;/li&gt;
&lt;li&gt;Bean Validation is enabled. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The internal details of request service are also not important for this example. The important part is that the status url is created using the request id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@Async&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;@Async&lt;/code&gt; annotation is used to execute the request in a separate thread.&lt;/p&gt;

&lt;p&gt;Now let's look at the pollStatus function. It is a recursive function that polls the status endpoint and returns the response on completed, failed or error state is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pollStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;COMPLETED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FAILED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pollStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
               &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function need not be recursive. You can use a simple while loop to poll the status endpoint with a timeout.&lt;/p&gt;

&lt;p&gt;Now let's look at the server code for the status request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatusController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;RequestService&lt;/span&gt; &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/status"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StatusResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestParam&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;RequestStatus&lt;/span&gt; &lt;span class="n"&gt;requestStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestStatus&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_FOUND&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StatusResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestStatus&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OK&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again not covering security here. If a request corresponding to the id is not found, a 404 response is returned otherwise a 200 response is returned along with the status.&lt;/p&gt;




&lt;p&gt;Thanks for reading! This should give you an idea about HTTP Polling. If you find any issues with the code, please let me know. Javascript is not my first language so please forgive me if I am not clear.&lt;br&gt;
If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Striver's SDE Sheet Journey - #6 Stock Buy And Sell</title>
      <author>sachin26</author>
      <pubDate>Sat, 25 Dec 2021 11:27:13 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-6-stock-buy-and-sell-5d51</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-6-stock-buy-and-sell-5d51</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You are given an array prices where &lt;code&gt;prices[i]&lt;/code&gt; is the price of a given stock on the ith day.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: prices = [7,1,5,3,6,4]
Output: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.&lt;br&gt;
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;by using 2 loops we can easily solve this problem. 1st loop buys the stock, the second loop sells the stock. by each selling, we maintain the max profit.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;lets understand this step by step,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialize a variable &lt;code&gt;maxProfit=0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; run a loop from &lt;code&gt;i=0&lt;/code&gt; to &lt;code&gt;prices.length&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; initialize &lt;code&gt;buyPrice = prices[i]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt;  run another loop from &lt;code&gt;j=i+1&lt;/code&gt; to &lt;code&gt;prices.length&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; initialize &lt;code&gt;sellPrice = prices[j]&lt;/code&gt;&lt;br&gt;
 &lt;strong&gt;2.&lt;/strong&gt; if &lt;code&gt;sellPrice&lt;/code&gt; &amp;gt; &lt;code&gt;buyPrice&lt;/code&gt; then,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;calculate the profit.&lt;br&gt;
&lt;code&gt;profit = sellPrice - buyPrice&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; if &lt;code&gt;profit &amp;gt; maxProfit&lt;/code&gt; then,update the &lt;code&gt;maxProfit&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;maxProfit = profit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTAeJu1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdmibaoh2gtpmid7q3rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTAeJu1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdmibaoh2gtpmid7q3rg.png" alt="buy stock sell stock" width="880" height="1245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Time Complexity⏱️&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we are running two loops then,&lt;br&gt;
Time Complexity: &lt;strong&gt;O(n*n)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Space Complexity⛰️&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we are not using any extra space then,&lt;br&gt;
Space Complexity: &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 2&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;this problem can be solve by using kadane's algorithm with &lt;strong&gt;O(n)&lt;/strong&gt; Time Complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialize three variables&lt;br&gt;
 &lt;code&gt;buyPrice = prices[0]&lt;/code&gt;,&lt;br&gt;
 &lt;code&gt;sellPrice&lt;/code&gt;,&lt;br&gt;
 &lt;code&gt;maxProfit = 0&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; run a loop from &lt;code&gt;i=1&lt;/code&gt; to &lt;code&gt;prices.length&lt;/code&gt; and then,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; initialize &lt;code&gt;sellPrice = prices[i]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; if &lt;code&gt;sellPrice &amp;lt; buyPrice&lt;/code&gt; then update the &lt;code&gt;buyPrice&lt;/code&gt;,&lt;br&gt;
  &lt;code&gt;buyPrice = sellPrice&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; calculate the profit.&lt;br&gt;
&lt;code&gt;profit = sellPrice - buyPrice&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; if &lt;code&gt;profit &amp;gt; maxProfit&lt;/code&gt; then update the &lt;code&gt;maxProfit&lt;/code&gt;&lt;br&gt;
&lt;code&gt;maxProfit = profit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;

            &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;buyPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


        &lt;span class="o"&gt;}&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;thank you for reading this article. if you find any mistake let me know in the comment section.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>dsa</category>
      <category>java</category>
    </item>
  </channel>
</rss>
