<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Automate your workflow with Microsoft Power Automate</title>
      <author>arnu515</author>
      <pubDate>Mon, 12 Jul 2021 16:50:41 +0000</pubDate>
      <link>https://dev.to/arnu515/automate-your-workflow-with-microsoft-power-automate-3m7i</link>
      <guid>https://dev.to/arnu515/automate-your-workflow-with-microsoft-power-automate-3m7i</guid>
      <description>&lt;p&gt;The most tedious part of development is doing the same tasks over and over again. Don't you feel bored having to mention someone on Slack when they get assigned a Github Issue, or having to send an email to your newsletter when you post a tweet.&lt;/p&gt;

&lt;p&gt;Sure, you can setup integrations, webhooks and CI jobs to do these tasks, but they're often tedious, require signups to hundreds of services, and all of them might not have the same steps.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://flow.microsoft.com"&gt;Microsoft Power Automate&lt;/a&gt;, also called Microsoft Flow, which allows you to automate almost everything in your tech stack. Want to send a message on Slack or Teams, sure, want to SMS a number with Twilio, you can do that too. It also has many listeners, like when a new Tweet is posted, or when a Github Issue is assigned to you.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll take a look at how we can automate a few common tasks with Microsoft Flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An Office365 Microsoft Account&lt;/li&gt;
&lt;li&gt;Accounts for the services we'll be automating (Github, Slack, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flow-1-mail-me-when-a-github-issue-is-assigned-to-me"&gt;
  &lt;/a&gt;
  Flow 1 - Mail me when a Github Issue is assigned to me
&lt;/h2&gt;

&lt;p&gt;First, create a new Automated Cloud flow and give it a name.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;When an issue is assigned to me&lt;/code&gt; trigger from Github. You will now be asked to sign in to Github, which you should do.&lt;/p&gt;

&lt;p&gt;Next, add the &lt;code&gt;Mail&lt;/code&gt; action, which uses Sendgrid under the hood.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ0q027Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/XbgBN01/Screenshot-from-2021-07-09-14-48-42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ0q027Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/XbgBN01/Screenshot-from-2021-07-09-14-48-42.png" alt="How your flow looks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can notice that I've added some dynamic elements that were provided to me by the Github Trigger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can add more things to your flow, for example, add an item on Microsoft Todo, create a Trello card, or message yourself on Slack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjgHiX62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/g4DGNVs/Screenshot-from-2021-07-09-14-53-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjgHiX62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/g4DGNVs/Screenshot-from-2021-07-09-14-53-15.png" alt="Added a Todo action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done, and you will now be emailed whenever an issue's been assigned to you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flow-2-post-your-websites-status-to-your-twitter-everyday-at-6-am"&gt;
  &lt;/a&gt;
  Flow 2 - Post your website's status to your Twitter everyday at 6 AM
&lt;/h2&gt;

&lt;p&gt;Create a Scheduled Cloud Flow, since this event is based on time.&lt;/p&gt;

&lt;p&gt;Make sure the date is set to this date, and the time is set to &lt;code&gt;6:00 AM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also set the task to repeat every 1 day. See the below image if you get confused.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHzopPVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0Bf8qqL/Screenshot-from-2021-07-09-14-58-28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHzopPVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0Bf8qqL/Screenshot-from-2021-07-09-14-58-28.png" alt="Flow creation dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a HTTP action that'll query your website's status page. My website uses Cachet to display its status, so I'll tailor my flow to Cachet's API response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cxFSuPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Lbm4ZML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cxFSuPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Lbm4ZML.png" alt="HTTP action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to parse the data down to access the &lt;code&gt;status_name&lt;/code&gt; field in the JSON response. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwA5XZrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwNrtPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwA5XZrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwNrtPK.png" alt="Data actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can tweet out the status of the website. You'll need to sign in to Twitter for this flow to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvX25Ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HujqhpF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvX25Ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HujqhpF.png" alt="Tweet action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done, and now, at 6 AM daily, your followers will be notified of your website's status.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;See how easy it is to automate the small things? The best part is that Microsoft Flow is included with the Office365 subscription, so along with Excel, Word and PowerPoint, you also get this monster of an automation tool that really, nobody cares about! So go ahead and share this article with your friends, so they can also use this wonderful tool.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azure</category>
      <category>automation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 Coding Principles Every Developer Must Know</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Mon, 12 Jul 2021 16:08:04 +0000</pubDate>
      <link>https://dev.to/unitybuddy/top-10-coding-principles-every-developer-must-know-2gk4</link>
      <guid>https://dev.to/unitybuddy/top-10-coding-principles-every-developer-must-know-2gk4</guid>
      <description>&lt;p&gt;Hello, buddies! I would like to get into our topic without wasting time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's easy to write code. It's challenging to write good code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bad code comes in many forms. Messy code, massive if-else chains, programs that break with one adjustment, variables that don't make sense. The program might work once but will never hold up to any scrutiny.&lt;/p&gt;

&lt;p&gt;If you want to be a programmer, don't settle for shortcuts. Aim to write code that is easy to maintain. Easy for you to maintain, and easy for any other developer on your team to maintain. How do you write effective code?  You write good code by being disciplined with programming principles. So Today we're going see some programming principles that can help you to be a Good Developer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keep-it-simple-stupid-kiss"&gt;
  &lt;/a&gt;
  1. Keep It Simple, Stupid (KISS)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CKoWwXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839631378/G7BJWiSsV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CKoWwXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839631378/G7BJWiSsV.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It sounds a little harsh, but it's a coding principle to live by. What does this mean?&lt;/p&gt;

&lt;p&gt;It means you should be writing code as simple as possible. Don't get caught up in trying to be overly clever or showing off with a paragraph of advanced code. If you can write a script in one line, write it in one line.&lt;/p&gt;

&lt;p&gt;Here's a simple function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function addNumbers(num1,num2){
 return num1 + num2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple. It's easy to read and you know exactly what is going on.&lt;/p&gt;

&lt;p&gt;Use clear variable names. Take advantage of coding libraries to use existing tools. Make it easy to come back after six months and get right back to work. Keeping it simple will save you the headache.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dry-dont-repeat-yourself"&gt;
  &lt;/a&gt;
  2. DRY (Don’t repeat yourself)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6nupxoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839516565/DWbKqEcoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6nupxoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839516565/DWbKqEcoa.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
DRY (don’t repeat yourself) means don’t write duplicate code, instead use Abstraction to abstract everyday things in one place.&lt;/p&gt;

&lt;p&gt;If you have a block of code in more than two places, consider making it a separate method, or if you use a hard-coded value more than one time, make them public final constant. The benefit of this Object-oriented design principle is in maintenance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s important not to abuse it, duplication is not for code, but for functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It means if you have used standard code to validate OrderId and SSN, it doesn’t mean they are the same, or they will remain the same in the future.&lt;/p&gt;

&lt;p&gt;By using standard code for two different functionality or thing, you tightly couple them forever, and when your OrderId changes its format, your SSN validation code will break.&lt;/p&gt;

&lt;p&gt;So beware of such coupling and don’t combine anything which uses similar code but is not related. You can further check out the Basics of Software Architecture &amp;amp; Design Patterns in Java course on Udemy to learn more about writing the right code and best practices to follow while designing a system.&lt;/p&gt;

&lt;p&gt;DRY code is easy to maintain. It's easier to debug one loop that handles 50 repetitions than 50 blocks of code that handle one repetition.&lt;/p&gt;

&lt;p&gt;To learn more about DRY, You should &lt;a href="https://h.daily-dev-tips.com/software-design-principles-dry"&gt;read this article&lt;/a&gt; be thankful to @&lt;a href="https://dev.to@dailydevtips"&gt;Chris Bongers&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-openclosed"&gt;
  &lt;/a&gt;
  3. Open/Closed
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk151-2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839692847/IBMAh3ear.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk151-2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839692847/IBMAh3ear.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This principle means you should aim to make your code open to extension but closed to modification. This is an important principle when releasing a library or framework that others will use.&lt;/p&gt;

&lt;p&gt;For example, suppose you're maintaining a GUI framework. You could release for coders to directly modify and integrate your released code. But what happens when you release a major update four months later?&lt;/p&gt;

&lt;p&gt;Their code will break. This will make engineers unhappy. They won't want to use your library for much longer, no matter how helpful it may be.&lt;/p&gt;

&lt;p&gt;Instead, release code that prevents direct modification and encourages extension. This separates core behavior from modified behavior. The code is more stable and easier to maintain.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-composition-over-inheritance"&gt;
  &lt;/a&gt;
  4. Composition Over Inheritance
&lt;/h2&gt;

&lt;p&gt;If you write code using object-oriented programming you're going to find this useful. The composition over inheritance principle states: objects with complex behaviors should contain instances of objects with individual behaviors. They should not inherit a class and add new behaviors.&lt;/p&gt;

&lt;p&gt;Relying on inheritance causes two major issues. First, the inheritance hierarchy can get messy in a hurry. You also have less flexibility for defining special-case behaviors. Let's say you want to implement behaviors to share:&lt;/p&gt;

&lt;p&gt;Composition programming is a lot cleaner to write, easier to maintain and allows flexibility defining behaviors. Each individual behavior is its own class. You can create complex behaviors by combining individual behaviors.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-you-arent-going-to-need-it-yagni"&gt;
  &lt;/a&gt;
  5. You Aren't Going to Need It (YAGNI)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKg4jAFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839742341/hQjL6AL7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKg4jAFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839742341/hQjL6AL7c.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This principle means you should never code for functionality on the chance that you may need in the future. Don't try and solve a problem that doesn't exist.&lt;/p&gt;

&lt;p&gt;In an effort to write DRY code, programmers can violate this principle. Often inexperienced programmers try to write the most abstract and generic code they can. Too much abstraction causes bloated code that is impossible to maintain.&lt;/p&gt;

&lt;p&gt;Only apply the DRY principle only when you need to. If you notice chunks of code written over and over, then abstract them. Don't think too far out at the expense of your current code batch.&lt;/p&gt;

&lt;p&gt;There are two main reasons to practice YAGNI,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You save time because you avoid writing code that you turn out not to need.&lt;/li&gt;
&lt;li&gt;Your code is better because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick around anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#6-single-responsibility"&gt;
  &lt;/a&gt;
  6. Single Responsibility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lakfs1aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839801179/DPn7sNIbM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lakfs1aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839801179/DPn7sNIbM.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
As you start writing code, over a long period of time, your code would become clumsy. You will have classes/modules that perform several functionalities. This will end up with classes that are hundreds and thousands of lines of code.&lt;br&gt;
This principle says that every class or module in a program should only have specific functionality. In other words, a class or module in a program should only be responsible for tasks regarding one particular function. This helps you keep your modules minimal and clean.&lt;/p&gt;

&lt;p&gt;Both Open/Closed and Single Responsibility principles are in under the SOLID Principle. &lt;a href="https://francescociulla.com/solid-principles-around-you-in-javascript"&gt;In this article&lt;/a&gt;, @&lt;a href="https://dev.to@FrancescoCiulla"&gt;Francesco Ciulla&lt;/a&gt; has wonderfully explained about each principle in SOLID.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-document-your-code"&gt;
  &lt;/a&gt;
  7. Document Your Code
&lt;/h2&gt;

&lt;p&gt;Any senior developer will stress the importance of documenting your code with proper comments. All languages offer them and you should make it a habit to write them. Leave comments to explain objects, enhance variable definitions, and make functions easier to understand.&lt;/p&gt;

&lt;p&gt;Here's a Python function with comments guiding you through the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_odd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;..))&lt;/span&gt; &lt;span class="c1"&gt;# Get a number
&lt;/span&gt;       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Divide number by 2. If no remains,
&lt;/span&gt;                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is a even number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Print it is not a odd number
&lt;/span&gt;       &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Here is the odd number!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# If 1 remains, print it is a odd number
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Leaving comments is a little more work while you're coding, and you understand your code pretty well right?&lt;/p&gt;

&lt;p&gt;Leave comments anyway!&lt;/p&gt;

&lt;p&gt;Try writing a program, leaving it alone for six months, and come back to modify it. You'll be glad you documented your program instead of having to pour over every function to remember how it works. Work on a coding team? Don't frustrate your fellow developers by forcing them to decipher your syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-separation-of-concerns"&gt;
  &lt;/a&gt;
  8. Separation of Concerns
&lt;/h2&gt;

&lt;p&gt;The separation of concerns principle is an abstract version of the single responsibility principle. This idea states that a program should be designed with different containers, and these containers should not have access to each other.&lt;/p&gt;

&lt;p&gt;A well-known example of this is the model-view-controller (MVC) design. MVC separates a program into three distinct areas: the data (model), the logic (controller), and what the page displays (view). Variations of MVC are common in today's most popular web frameworks.&lt;/p&gt;

&lt;p&gt;For example, the code that handles the database doesn't need to know how to render the data in the browser. The rendering code takes input from the user, but the logic code handles the processing. Each piece of code is completely independent.&lt;/p&gt;

&lt;p&gt;The result is code that is easy to debug. If you ever need to rewrite the rendering code, you can do so without worrying about how the data gets saved or the logic gets processed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-refactor"&gt;
  &lt;/a&gt;
  9. Refactor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHZInLSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839823516/DYVuQxQcR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHZInLSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839823516/DYVuQxQcR.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It's hard to accept, but your code isn't going to be perfect the first time. Refactoring code means reviewing your code and looking for ways to optimize it. Make it more efficient while keeping the results exactly the same.&lt;/p&gt;

&lt;p&gt;Codebases are constantly evolving. It's completely normal to revisit, rewrite, or even redesign entire chunks of code. It doesn't mean you didn't succeed the first time you wrote your program. You're going to get more familiar with a project over time. Use that knowledge to adjust your existing code to be DRY, or following the KISS principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-clean-code-at-all-costs"&gt;
  &lt;/a&gt;
  10. Clean Code At All Costs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ7bMWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839871256/bIzvjl-ln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ7bMWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839871256/bIzvjl-ln.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Leave your ego at the door and forget about writing clever code. The kind of code that looks more like a riddle than a solution. You're not coding to impress strangers.&lt;/p&gt;

&lt;p&gt;Don't try to pack a ton of logic into one line. Leave clear instructions in comments and documentation. If your code is easy to read it will be easy to maintain.&lt;/p&gt;

&lt;p&gt;Good programmers and readable code go hand-in-hand. Leave comments when necessary. Adhere to style guides, whether dictated by a language or your company. @&lt;a href="https://dev.to@macerub"&gt;Mario Cervera&lt;/a&gt; has beutifully explained about Clean Code &lt;a href="https://mariocervera.com/the-essence-of-clean-code"&gt;in this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/top-10-coding-principles-every-developer-must-know"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How our development team improved through mentorship 🧑🏼‍🏫📓🧑🏾‍💻</title>
      <author>Ivan Brcko</author>
      <pubDate>Mon, 12 Jul 2021 16:07:27 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/how-our-development-team-improved-through-mentorship-2b3d</link>
      <guid>https://dev.to/bornfightcompany/how-our-development-team-improved-through-mentorship-2b3d</guid>
      <description>&lt;p&gt;Through my experience in the IT industry, I have experienced on my own that a high-quality mentorship is a key for rapid personal development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentee-me"&gt;
  &lt;/a&gt;
  Mentee me
&lt;/h2&gt;

&lt;p&gt;Since I have initially turned my sails towards the web development island, I have been on the receiving end of some kind of mentorship relation. It has never been completely defined and it has more often than not lost its structure after a couple of months - closely related to the onboarding process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tBlEzVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfvjke9mel0j4pew1csc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tBlEzVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfvjke9mel0j4pew1csc.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Nevertheless, I have reaped the mentorship benefits greatly. The mentors I was assigned with served as an inspiration to me - both from the technical side and from the “way of thinking” side. I have tried to learn from them as much as possible, until one day I’ve started to feel confident enough to pave my own path.&lt;br&gt;
As my skills developed, I have started to become more and more independent and started to discover things on my own.&lt;/p&gt;

&lt;p&gt;And I was like: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nice, I know everything now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh boy, was I wrong…&lt;/p&gt;

&lt;p&gt;The one thing I started to know more and more is that I know how much I don’t know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#me-mentor-"&gt;
  &lt;/a&gt;
  ‘me’ === ‘mentor’ ? 🤷🏻‍♂️ : 🤷🏻‍♂️
&lt;/h2&gt;

&lt;p&gt;Once the mentorship has watered down, my mentors started to serve me more as guidelines, than a knowledge source. Over the years, I have become mostly independent in my work, as in my development, but mentors were still there. We have developed a healthy peer relationship. &lt;br&gt;
From time to time, when I was stuck on something, I have developed a healthy habit of asking my mentors for their opinion and possible guidelines, which was enough to get unstuck but to solve my issues by myself.&lt;/p&gt;

&lt;p&gt;With time, I started to feel like I wanted to share my knowledge with someone - I knew it was time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFH84_FO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ox8alrcxyp4b5sn9ey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFH84_FO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ox8alrcxyp4b5sn9ey.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentor-me"&gt;
  &lt;/a&gt;
  Mentor me
&lt;/h2&gt;

&lt;p&gt;I genuinely enjoy sharing my knowledge with others, especially the ones that seek it.&lt;br&gt;
I have started to be more enrolled in the mentor position, but then, COVID struck and with it, the remote work era started.&lt;/p&gt;

&lt;p&gt;The situation altogether was scary. Everyone was afraid of and for everyone, including themselves. &lt;br&gt;
Time has shown that it could be worse, and life started to get back to normal, one small step at a time.&lt;/p&gt;

&lt;p&gt;Our team was communicating very little, our knowledge wasn't being shared, interpersonal relationships were non-existent out of the daily work scope.&lt;/p&gt;

&lt;p&gt;That was my time to shine and to try bringing our team back to its previous glory. Encouraged by my previous experience &amp;amp; my need to be a mentor, I’ve come up with some kind of a mentorship program which was highly accepted and greatly beneficial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-hail-mentorship-20"&gt;
  &lt;/a&gt;
  All hail Mentorship 2.0
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIcWwEj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tli08h5xnfnfzhtkj5l7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIcWwEj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tli08h5xnfnfzhtkj5l7.jpeg" alt="high-risk-high-reward"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The concept behind it is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Everyone is assigned with a mentor

&lt;ul&gt;
&lt;li&gt;Preferably a mentor that is working in a similar tool or technology - so, technology facing mentor&lt;/li&gt;
&lt;li&gt;Fallback is a soft skill mentor - i.e. CTO is a mentor to the iOS development team lead&lt;/li&gt;
&lt;li&gt;You can mentor max 3 people at a time&lt;/li&gt;
&lt;li&gt;It is not fixed - you can transfer to a new mentor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every mentor-mentee combo is awarded a 30-minute weekly mentorship slot

&lt;ul&gt;
&lt;li&gt;If they wish they can merge it into a single bi-weekly 1-hour slot &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Topics are either predefined by the mentee or brought by the mentor

&lt;ul&gt;
&lt;li&gt;If a mentee wants to learn something specific or needs help with an issue, he should announce it beforehand so the mentor can prepare for it&lt;/li&gt;
&lt;li&gt;If a mentee doesn’t have anything specific, the mentor can bring his own stuff to the table&lt;/li&gt;
&lt;li&gt;If no one has any knowledge related topics, a casual catching up is always a valid option - but try your best to learn something new from time to time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolve 😉&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This program has resulted in knowledge sharing improvement, personal development boost, our work quality increase &amp;amp; interpersonal relationships forming.&lt;/p&gt;

&lt;p&gt;I would suggest that every team invests a bit more in its mentoring program, the ROI is most definitely higher than expected.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>mentorship</category>
      <category>mentor</category>
      <category>development</category>
    </item>
    <item>
      <title>Writing, GraphQL and AWS</title>
      <author>Victor Adeleke Afolayan</author>
      <pubDate>Mon, 12 Jul 2021 16:03:02 +0000</pubDate>
      <link>https://dev.to/rephidimc/writing-graphql-and-aws-4hn7</link>
      <guid>https://dev.to/rephidimc/writing-graphql-and-aws-4hn7</guid>
      <description>&lt;p&gt;As long as we still have our breath as humans, one thing is constant, which is being up to something. Although sometimes we are up to something meaningful, other times, it feels as if time just somehow passes us by without us really achieving anything. Before going into what I did last week, I would love to take a moment to explain why I take time to write about my professional development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EznXM72e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1455390582262-044cdead277a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D966%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img alt="England Euros 2021" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EznXM72e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1455390582262-044cdead277a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D966%26q%3D80"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://unsplash.com/@aaronburden"&gt;Aaron Burden&lt;/a&gt; on &lt;a href="https://unsplash.com/" rel="external"&gt;Unsplash&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Being a web developer privileged to have a job means I have deliverables that entail having to pull out technical skills already in my arsenal or picking up new ones and venturing into new fields (if need be) with the goal of finishing my task in good time.&lt;/p&gt;

&lt;p&gt;Even though not everyone takes time to document their progress, I consider it a blessing to be at a place where this is a weekly assignment; one I have come to love and would love to keep at if time permits. Writing has an undeniable number of benefits including helping me to keep tabs on my progress and aiding my communication skills.&lt;/p&gt;

&lt;p&gt;Although the personal benefits are well-established, I believe readers of my posts have a lot to gain also, with the mother being picking knowledge for free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck97-3-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1434030216411-0b793f4b4173%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img alt="Writing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck97-3-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1434030216411-0b793f4b4173%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://unsplash.com/@craftedbygc"&gt;
Green Chameleon&lt;/a&gt; on &lt;a href="https://unsplash.com/" rel="external"&gt;Unsplash&lt;/a&gt;



&lt;p&gt;I hope you are encouraged to not only come back for more but also pick up the challenge to write as well, so I alongside others learn from your experience in whatever field you choose to dwell.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;MY EXPERIENCE LAST WEEK&lt;/h1&gt;

&lt;p&gt;If you know what being a Fullstack engineer entails, then you have an idea of what I have been up to. A Fullstack engineer is a web developer who does both Frontend (what users relate with) and backend web development(what users don't see but give life and date to the frontend part). &lt;/p&gt;

&lt;p&gt;Before going into details, I would like to give a little background on what my team and I are working on.&lt;br&gt;
Gaming is something not limited to any particulate set of people as it transcends the borders of gender, race, age group, or any other category. This simple logic means it is something that has come to stay and like anything worth doing, should be done well; hence, we've been tasked with building a platform that provides users an interface to link up, create tournaments, and challenge.&lt;/p&gt;

&lt;p&gt;Last week, I built a microservice: a resource for a section of the landing page of the platform, which renders from a database loaded with data. In technical terms, I built and consumed an API. I used &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Dynamo DB&lt;/a&gt; (a database provided by Amazon Web Services &lt;a href="https://aws.amazon.com/" rel="external"&gt;(AWS)&lt;/a&gt;)) to store my data, creating a table with desired fields for me to use in populating my table. &lt;a href="https://graphql.org/" rel="external"&gt;GraphQL&lt;/a&gt; was used as playground for me to query and mutate my database. i.e. a way of creating, reading, updating and deleting information from the database, a process technically known as &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" rel="external"&gt;CRUD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I linked my database(Dynamo DB) with my playground(GraphQL) using the another Amazon web service,&lt;br&gt;
&lt;a href="https://aws.amazon.com/lambda/" rel="external"&gt;Lambda&lt;/a&gt; after having defined my environment variables. All these made up the backend side of my task(building the API and database)&lt;/p&gt;

&lt;p&gt;Although I had my database populated through the linked playground, I had one more task, which was to render data from the database on the frontend(consuming the API). This was done by importing GraphQL into the code for my frontend and mapping through the data. &lt;/p&gt;

&lt;p&gt;Before this experience, I had worked with API's using &lt;a href="https://expressjs.com/" rel="external"&gt;Express&lt;/a&gt; and making HTTP calls to the API, hence, working with GraphQL and Amazon services was entirely new for me, but hey! what matters is that I learnt, got the job done and we have new skills in the bag; which reiterates the belief I have, being I can do all things.&lt;/p&gt;

&lt;p&gt;I also worked on components within the project that use &lt;a href="https://en.wikipedia.org/wiki/Modal_window#:~:text=In%20user%20interface%20design%20for,window%20in%20front%20of%20it" rel="external"&gt;Modals&lt;/a&gt;. I refactored and extracted the modals in them into one reusable modal component and called the new component in every place it needed to be rendered. This was a simple &lt;a href="https://reactjs.org/" rel="external"&gt;React&lt;/a&gt; task. This refactoring came with some layout distortions(&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps" rel="external"&gt;CSS&lt;/a&gt;) which marked an end to my tasks for the week.&lt;/p&gt;

&lt;p&gt;It was a brilliant week, and I'm up for newer things to keep me busy the next few days. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;EXTRAS&lt;/h1&gt;

&lt;p&gt;The NBA finals got off to a brilliant start for the Phoenix Suns with the boys taking a 2-0 lead to Milwaukee. The first game in Milwaukee(Sunday night) was a loss but I believe the boys have this in the bag already. Suns in 5!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpWQANhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/the-phoenix-suns-pose-with-the-western-conference-finals-trophy-after-picture-id1233742389%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="Phoenix Suns" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpWQANhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/the-phoenix-suns-pose-with-the-western-conference-finals-trophy-after-picture-id1233742389%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=Andrew+D.+Bernstein"&gt;
Andrew D. Bernstein&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
In football, two competitions ended yesterday, one being the Copa America and the other the European Championships. I am most pleased for Lionel Messi as what looked like a dent (not winning a senior title with Argentina) in his illustrious career has finally been put to bed by clinching the Copa America with his teammates. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TUAHrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/argentinas-lionel-messi-is-thrown-into-the-air-by-teammates-after-picture-id1233914868%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="Lionel Messi" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TUAHrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/argentinas-lionel-messi-is-thrown-into-the-air-by-teammates-after-picture-id1233914868%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=NELSON+ALMEIDA"&gt;Nelson Almeida&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
I never thought there was ever any doubt of this man's greatness, but if certain quarters thought there were, I believe this sufficiently deadens all.&lt;/p&gt;

&lt;p&gt;And football went Rome! The Italians won on penalties last night to be crowned champions of Europe, and I think this is testament to the quality of Roberto Mancini as a manager, bringing them from a hell-hole in 2018 to an unimaginable place last night. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eier85EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/leonardo-bonucci-of-italy-lifts-the-trophy-and-celebrates-with-team-picture-id1233931609%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="Italy Euro 2021" src="https://res.cloudinary.com/practicaldev/image/fetch/s--eier85EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/leonardo-bonucci-of-italy-lifts-the-trophy-and-celebrates-with-team-picture-id1233931609%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=Marc+Atkins"&gt;Mark Atkins&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
He has done so in fantastic fashion with his team on a 34-match unbeaten run. His bravery has been adequately rewarded and hopefully, the team can maintain this consistency when Giorgio Chiellini and Leonardo Bonucci finally retire.&lt;/p&gt;

&lt;p&gt;To the English, the boys can hold their heads up high and pat themselves in the back for a job well done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEviTK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/england-manager-gareth-southgate-as-he-selects-his-players-to-take-picture-id1233941153%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="England Euro 2021" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEviTK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/england-manager-gareth-southgate-as-he-selects-his-players-to-take-picture-id1233941153%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=Mike+Egerton+-+PA+Images"&gt;Mike Egerton-PA Images&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Although they didn't clinch the top prize, they have set themselves on course for a successful finish in Qatar by 2022. Praise must also go to the manager, Gareth Southgate for establishing an identity and a playing structure that works for his group of players. Even though a certain section of the media and fans have berated his conservative approach, I strongly believe he is trying to make his players taste victory and become a respected footballing nation before looking at establishing an attacking pattern of play, which if anyone asks me, is a solid way of building a base in football, although the Italians have achieved success by playing in an attacking style, albeit with very experienced players in their squad. I believe 2022 can't come sooner for the boys and I think they will serve the footballing world a spectacle in Qatar.&lt;/p&gt;




&lt;p&gt;Thanks for taking the time to read.&lt;br&gt;
Till next week when I share more thoughts, it's a goodbye from me.&lt;/p&gt;

&lt;p&gt;P.S: Should you want to reach me, please feel free to use the contact info on my bio or my &lt;a href="https://victor-afolayan.vercel.app/" rel="external"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>aws</category>
      <category>graphql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>6 Topics Developers Should Prepare for Coding Interviews</title>
      <author>javinpaul</author>
      <pubDate>Mon, 12 Jul 2021 15:51:32 +0000</pubDate>
      <link>https://dev.to/javinpaul/6-topics-developers-should-prepare-for-coding-interviews-2fim</link>
      <guid>https://dev.to/javinpaul/6-topics-developers-should-prepare-for-coding-interviews-2fim</guid>
      <description>&lt;p&gt;image_credit - Educative.io&lt;br&gt;
&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is no doubt cracking the Coding interviews of top tech companies like Google, Microsoft, and Amazon is very hard, but you can still crack it by carefully planning and preparing the essential skills which matter most like &lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;Data structures and Algorithms&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/05/top-20-system-design-interview-questions-answers-programming.html"&gt;System Design&lt;/a&gt;,&lt;a href="https://javarevisited.blogspot.com/2018/06/top-5-java-multithreading-and-concurrency-courses-experienced-programmers.html"&gt;Multithreading and Concurrency&lt;/a&gt;,&lt;a href="https://javarevisited.blogspot.com/2018/05/top-5-sql-and-database-courses-to-learn-online.html"&gt;SQL and Database design&lt;/a&gt;, and of course, &lt;strong&gt;problem-solving skills&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Being an author of Java and a programming blog, I often receive queries about &lt;strong&gt;how to prepare for coding interviews?&lt;/strong&gt; &lt;em&gt;How to pass Google or Microsoft Software Developer interviews?&lt;/em&gt; Or how can I get a software development job on Amazon or Facebook?&lt;/p&gt;

&lt;p&gt;After answering many of my readers one by one on Facebook and LinkedIn, I thought to put together a list of &lt;em&gt;essential topics for coding interviews&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This list will give a good head-start for your preparation for any tech company interview like Google and Amazon. However, even if you are not targeting Google and just want a Software developer job, you can still prepare these topics.&lt;/p&gt;

&lt;p&gt;In fact, preparing for tech giants like Google, Amazon, Apple, and Facebook means you are miles ahead of other candidates, and you will most likely secure many job offers from smaller firms, startups, and investment banks.&lt;/p&gt;

&lt;p&gt;That's why I suggest aiming higher because even if you don't get what you want, you will still get job offers that are desirable by many programmers.&lt;/p&gt;

&lt;p&gt;Another critical thing to note is that different interviews need different skills. For example, when you go for a &lt;a href="https://javarevisited.blogspot.com/2020/04/top-10-courses-to-crack-java-programming-interviews.html"&gt;Java developer interview&lt;/a&gt;, you are bound to know Java. Similarly, for a Python developer interview, it's expected you to know Python and some popular Python frameworks like &lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-python-web-development-frameworks.html"&gt;Django&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/01/top-5-courses-to-learn-flask-for-web-development-with-python.html"&gt;Flask&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a Web developer, HTML, CSS, and JavaScript are core skills, and you will be grilled on those, apart from modern web development frameworks like &lt;a href="https://javarevisited.blogspot.com/2018/06/5-best-courses-to-learn-angular.html"&gt;Angular&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-online-courses-to-learn-vue.js-best.html"&gt;Vue.js&lt;/a&gt;, with a bit of &lt;a href="https://medium.com/javarevisited/7-free-courses-to-learn-node-js-in-2020-2f1dd6722b49"&gt;node.js&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;I'll not touch, that topic but I'll share essential skills that are required to pass all of those interviews. They are also known as core programming skills, and it's expected from every Software developer to know that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-essential-topics-for-coding-and-programming-interviews"&gt;
  &lt;/a&gt;
  5 Essential Topics for Coding and Programming Interviews
&lt;/h2&gt;

&lt;p&gt;Anyway, without wasting any more of your time, here is my list of topics you can prepare to boost your chances on Google, Amazon, and Microsoft Programming Job Interviews.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-data-structure"&gt;
  &lt;/a&gt;
  1. Data Structure
&lt;/h3&gt;

&lt;p&gt;As a programmer, it's Ok if you cannot write web apps using &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-courses-to-learn-django-in-2020.html"&gt;Django&lt;/a&gt; or &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React,&lt;/a&gt; but it's Not Ok if you don't know how a hash table works and when to use a list over an array? And, &lt;strong&gt;what advantages B-Tree offers over an array?&lt;/strong&gt; Data Structure and Algorithms are the core of computer science and programming, and it's expected for every software developer to have a solid knowledge of fundamental data structure.&lt;/p&gt;

&lt;p&gt;It's imperative to have a good understanding of data structure for writing a robust, performant application that your users will appreciate. &lt;/p&gt;

&lt;p&gt;Imagine, if Facebook or Google taking 1 minute to log you in, you will never go there, forget how important they are. Performance is critical, and unless you understand how your program is working and how your data is stored, you will not go anywhere.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927"&gt;&lt;em&gt;technical interviews&lt;/em&gt;&lt;/a&gt;, you will be asked to optimize your solution for time and space. You can't do that unless you have a solid understanding of how your code works and how data is stored and accessed.&lt;/p&gt;

&lt;p&gt;This is probably the most important topic for coding interviews and you should prepare it well. At a bare minimum, you should know about the &lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html#axzz5dCg1cNYo"&gt;array&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2017/07/top-10-linked-list-coding-questions-and.html"&gt;linked list&lt;/a&gt;, &lt;a href="https://www.java67.com/2020/02/top-40-binary-tree-interview-questions.html"&gt;binary trees&lt;/a&gt;, binary search tree, self-balanced trees like AVL tree, hash table(or map or dictionaries as known in Java and Python) stack, queue, and graph.&lt;/p&gt;

&lt;p&gt;You should understand how to store and access elements from these data structures and the computing cost involved. You should also have a comparative analysis of when to use a particular data structure like for a faster search array, and the hash table is better. Still, for faster addition and deletion, a linked list will outperform an array.&lt;/p&gt;

&lt;p&gt;If you need a resource to get up to speed, I suggest you pick a data structure course where examples are shown in the language you are most comfortable with. For Java developers, I recommend&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;Data Structure and Algorithms: Deep Dive in Java&lt;/a&gt;, and for Python Programmers, I recommend Algorithms and Data Structure in Python course on Udemy. You can check out that course &lt;a href="https://medium.com/javarevisited/top-10-free-data-structure-and-algorithms-courses-for-beginners-best-of-lot-ad807cc55f7a"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRrK8AzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-DuGEAa13JmU/XnlpMlXqVlI/AAAAAAAAdfw/OcAHHxFcGII_LXwEdqosKekMBx5gAYQFACLcBGAsYHQ/w400-h283/balance%252Btree%252Bdata%252Bstructure.png" alt="5 Essential Topics for Coding Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-algorithms"&gt;
  &lt;/a&gt;
  2. Algorithms
&lt;/h3&gt;

&lt;p&gt;While it's important to know the essential data structure like an array, linked list, and trees, it's equally important to learn how to work with those data structures. If you don't know the difference between linear search and binary search algorithms, and what it means to run in O(log n) as opposed to O(n^2), you need to spend some time learning algorithms.&lt;/p&gt;

&lt;p&gt;This can often be the difference between a fine-tuned application and a slow, crappy process that hangs more than it works. At a bare minimum, you should know about sorting algorithms like &lt;a href="https://javarevisited.blogspot.com/2014/08/quicksort-sorting-algorithm-in-java-in-place-example.html"&gt;quicksort&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/03/mergesort-in-java-algorithm-example-and.html"&gt;mergesort&lt;/a&gt;, heapsort, etc. searching algorithms like binary search, and some graph algorithms like fastest route-finding algorithms, which are the base of many deliveries and taxi-hailing apps like Uber, Grab, and Ola.&lt;/p&gt;

&lt;p&gt;You should also understand how the library methods you are using for sorting an array work, which algorithm it uses internally, and when a different algorithm would do a better job.&lt;/p&gt;

&lt;p&gt;I strongly suggest you prepare for this topic in depth. If you need a resource, Thomas H. Cormen's "&lt;a href="http://www.amazon.com/dp/0072970545/?tag=javamysqlanta-20"&gt;Introduction to Algorithms,"&lt;/a&gt; is the most recommended resource, but it's not for the faint-hearted. For a less intimidating entry, I would recommend the &lt;a href="https://www.amazon.com/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230/?tag=javamysqlanta-20"&gt;Grokking Algorithms&lt;/a&gt; book by Aditya Bhargava and Algorithms course on Coursera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/grokking-algorithms-book-review-aa4459da93f5"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKq2f6jN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-fEUTaD_iF2s/XnloZVAGWRI/AAAAAAAAdfo/0ipeAFEos8Qprf_ebUGjYCbyg20Va70ZgCLcBGAsYHQ/w400-h275/Grokking%252BAlgorithms%252BBook%252BReview.png" alt="Data structure and algorithms for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-system-design"&gt;
  &lt;/a&gt;
  3. System Design
&lt;/h3&gt;

&lt;p&gt;This is another crucial topic you need to prepare well for your programming job interviews, especially at big tech companies like &lt;a href="https://medium.com/javarevisited/5-best-programming-languages-to-get-a-sofware-developer-job-in-google-3d8c83c444d6"&gt;Google&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2015/12/30-microsoft-interview-questions-for-software-development-engineers.html"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2016/01/top-20-amazon-and-google-programming-interview-questions.html"&gt;Amazon&lt;/a&gt;, and Facebook. You need to have some ideas about how to design your solution from architecture to coding.&lt;/p&gt;

&lt;p&gt;System design is actually very vast. At a high level, it covers things like software architecture, I mean the advantage between monolithic and microservice architecture and choosing between a &lt;a href="https://javarevisited.blogspot.com/2019/03/top-5-nosql-database-web-developers-should-learn.html#ixzz64aBvbXQ4"&gt;NoSQL&lt;/a&gt; and &lt;a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61"&gt;SQL database&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It covers things like how we will design an application that can handle 10000 concurrent users? And includes things like scalability.&lt;/p&gt;

&lt;p&gt;At a low level, it covers Object-Oriented Programming and Design, which talk about designing your classes and their relationships, following good coding practices, and software design principles like SOLID.&lt;/p&gt;

&lt;p&gt;Because of this, many candidates struggle to answer system design questions, and if you want to succeed, you must put particular emphasis on this skill. If you need a resource, I recommend you to checking about the &lt;a href="https://www.educative.io/collection/5668639101419520/5649050225344512?affiliate_id=5073518643380224"&gt;Grokking System Design Interview&lt;/a&gt; course on Educative, which is prepared by people who served as hiring managers on those tech companies, and it also walks you through common system design interview questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5649050225344512?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHdlm6oF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-kjkuBo81alA/XnloK-9Z4dI/AAAAAAAAdfg/UMYVaPpsRIMmTeA_33OQuEr_D7C251N5gCLcBGAsYHQ/w400-h320/System%252Bdesign%252Binterview%252Bquestions%252Bbig.png" alt="Software design for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Object-Oriented design and analysis, I recommend the Head First Object-Oriented design book to learn fundamentals and &lt;strong&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5692201761767424?affiliate_id=5073518643380224"&gt;Grokking the Object-Oriented Interviews&lt;/a&gt;&lt;/strong&gt; course on Educative for some practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-multithreading-and-concurrency"&gt;
  &lt;/a&gt;
  4. Multithreading and Concurrency
&lt;/h3&gt;

&lt;p&gt;Concurrency is one of the most desired skills by employers, and also one of the most advanced topics brought up in interviews. Because it shows your ability to design a program that efficiently uses resources but at the same time it's a very tricky topic to master and that's why interviewers love it. &lt;/p&gt;

&lt;p&gt;Concurrency can also be used to gauge your expertise and technical depth and is often uses as a key deciding factor in your overall hiring level.&lt;/p&gt;

&lt;p&gt;Whether you are just entering your career or are looking to switch jobs, it never hurts to dedicate some time to mastering concurrency. &lt;/p&gt;

&lt;p&gt;At a bare minimum, you should know about threads, processes, shared memory, monitors, locks, critical section, and deferred callbacks. Having a good knowledge of how to avoid race conditions and deadlock can be even better.&lt;/p&gt;

&lt;p&gt;Practicing classical concurrency interview questions like &lt;a href="https://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html"&gt;Producer-Consumer&lt;/a&gt;, Dining Philosopher, and others can also teach you a lot about concurrency and multithreading and give you the confidence to visualize how code and data work when multiple threads run in parallel.&lt;/p&gt;

&lt;p&gt;If you have an interviewing coming up, then I highly suggest you double down on concurrency. This is because I know it can be one of the most challenging topics brought up during most of the interviews, even for experienced developers. However, gaining a mastering concurrency will put you at a considerable advantage over other candidates.&lt;/p&gt;

&lt;p&gt;If you need resources, I strongly suggest you check out &lt;a href="https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews?affiliate_id=5073518643380224"&gt;Multithreading and Concurrency Interview Questions&lt;/a&gt; by C.H. Afzal on Educative. This course contains the most common concurrency interview questions solved in Python, Java, C#, and Ruby. Going through those questions will give you a good background on Concurrency and Multithreading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVqCbNIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-plCdIflEBXE/Xnln6-bmnEI/AAAAAAAAdfY/YEjBC7jCi8sd6Lb6FVIEfbGf_NyJ_fSZgCLcBGAsYHQ/w400-h275/Dining%252Bphilosopher%252Bproblem%252BConcurrency%252Band%252BParallel%252Bprogramming.png" alt="Concurrency for Coding Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-sql-and-database-design"&gt;
  &lt;/a&gt;
  5. SQL and Database Design
&lt;/h3&gt;

&lt;p&gt;As a software developer, working with a relational database is a critical skill that you'll need, and it will stick with you no matter where you are in your career. Every company from small to large uses a DBMS, so it's likely that you will come across different data models, type so databases (&lt;a href="https://medium.com/javarevisited/5-best-mongodb-courses-to-learn-nosql-for-beginners-in-2020-42df5af5496c"&gt;NoSQL&lt;/a&gt; and &lt;a href="https://www.java67.com/2018/02/5-free-database-and-sql-query-courses-programmers.html"&gt;SQL&lt;/a&gt;), and dependencies on various companies.&lt;/p&gt;

&lt;p&gt;Knowing how to structure your data within a DBMS is critical. Should you use an entity-relationship (ER), model? A hierarchical model? A three-schema architecture? &lt;/p&gt;

&lt;p&gt;The choices can be intimidating, but it's good to know about the different ways to structure your data as that when you switch database vendors like from Oracle to SQL Server or PostgreSQL, you can plugin with minimal hand-coding.&lt;/p&gt;

&lt;p&gt;As a programmer, you should also know about SQL, not just the syntax but also how the database actually runs your query and how joins are executed, how to index are used, and the difference between table scan, index scan, and index seek. These details are not just important from the coding interview perspective but also from day-to-day jobs.&lt;/p&gt;

&lt;p&gt;If you need resources, I suggest you go through with &lt;a href="https://www.educative.io/courses/database-design-fundamentals?affiliate_id=5073518643380224"&gt;&lt;strong&gt;Database Design Fundamentals for Software Engineers&lt;/strong&gt;&lt;/a&gt;, where you will learn about the different concepts and techniques you can use to structure your data and explore why you should use particular approaches for certain problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fsqldatabases%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9A0t43JE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-cGqkK0dY1ng/XnlnOXoo6FI/AAAAAAAAdfM/RBOvOMdpfYolZa_AQ_faZp0OOTTxB7QYgCLcBGAsYHQ/w400-h311/sql%252Bjoins%252Bguide%252Band%252Bsyntax.jpg" alt="SQL and Database for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also be exposed to technique likes normalization, help to increase the efficiency o the database, and avoid duplication. I also suggest you go through an SQL-focused course like &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-sql-bootcamp%2F"&gt;The Complete SQL BootCamp&lt;/a&gt;&lt;/strong&gt; by Jose Portilla on Udemy as SQL queries are also an essential part of coding interviews along with database design. I also suggest Use The Index Luke book to better understand how SQL query works in general.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-aws-docker-and-kubernetes"&gt;
  &lt;/a&gt;
  6. AWS, Docker, and Kubernetes
&lt;/h3&gt;

&lt;p&gt;While these five are definitely must-have skills for coding interviews, employers are nowadays also looking for modern tech skills like AWS, Docker, and Kubernetes, which makes them important topics for technical interviews.&lt;/p&gt;

&lt;p&gt;Since cloud computing is the next big thing and this decade of software development will be cloud-native, it's better for a software developer to know about Cloud and modern deployment tools like &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;Docker&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also important if you want to stay ahead of the curve and give a reason to your employer to hire you than the next candidate in line. For AWS and Cloud, one more thing you can do is to get a certification, not that because you can't get a job without certification but to learn better and get recognition for your skill.&lt;/p&gt;

&lt;p&gt;For AWS, I suggest you at least have an &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html"&gt;&lt;strong&gt;AWS Cloud Practitioner certification&lt;/strong&gt;&lt;/a&gt; to showcase necessary cloud skills, and if you prefer Microsoft Azure, then Azure Fundamentals (&lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-az-900-microsoft-azure-fundamentals-certification-exam.html"&gt;AZ-900&lt;/a&gt;) is an excellent certification to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4d5n8cJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-AizMAMwEXbs/XnlpW-sSFtI/AAAAAAAAdf8/Em4EO2S1X7YkNzmFhOEyv4o0OwKoXv4KgCLcBGAsYHQ/w400-h233/4.%252BLearn%252BAmazon%252BWeb%252BServices%252B%252528AWS%252529%252BThe%252BComplete%252BIntroduction%252BUdemy%252Bcourse.gif" alt="tech skills for developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is a container, which allows you to run your application as a whole, along with all the dependencies. This makes both development and deployment easier, particularly for &lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-microservices-in-java-and-spring-framework-e9fed1ba804d"&gt;Microservices&lt;/a&gt;. Since the container makes cloud deployment more manageable, and they are also easier for the manager to scaling up and down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-kubernetes-for-devops-and-certification.html"&gt;Kubernetes&lt;/a&gt; is a container orchestration tool, which means it can use manager containers at scale. &lt;/p&gt;

&lt;p&gt;It's easy to deploy and manage a few boxes, but when you have to deploy 100s of container for your application for a promotion event like Amazon prime Sale and then need to take it down once traffic return to normalcy is not easy. Kubernetes can do that for you and provide automation and peace of mind.&lt;/p&gt;

&lt;p&gt;While both Docker and Kubernetes are not mandatory skills for a programmer but definitely essential from the Job perspective. I recommend every Software developer or aspiring programmer to learn Docker and Kubernetes, and if you need a resource, Stephen Grider's online course -** &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;Docker and Kubernetes: The Complete Guide&lt;/a&gt;** on Udemy is a great starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpBb0kfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TsB64ri7usY/Xnlp9m2G9bI/AAAAAAAAdgQ/f_QFl2M5EgUkmn21zxLG8VwnQ7r-Z-trQCLcBGAsYHQ/w400-h247/Docker%252Band%252BKubernetes%252B2.png" alt="key skills for software developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the most &lt;strong&gt;important skills and topics you can prepare to crack the coding interview&lt;/strong&gt; of companies like Google, Microsoft, Apple, Facebook, and Amazon. Along with sills, I have also listed some of the best books and courses you can take to learn those skills and better prepared for your next coding interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Programming and Java Articles you May like&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/02/10-courses-to-prepare-for-programming-job-interviews.html#axzz5oeVu3CYQ"&gt;10 courses to crack Coding Interviews in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2019/05/10-great-resources-for-programming-job-interview-questions.html"&gt;10 Websites to Practice Coding Problems&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/06/10-books-to-prepare-technical-coding-job-interviews.html"&gt;10 Books to Prepare Technical Programming/Coding Job Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2015/09/top-10-algorithm-books-every-programmer-read-learn.html"&gt;10 Algorithm Books Every Programmer Should Read&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2016/05/5-free-data-structure-and-algorithm-books-in-java.html#axzz4uXETWjmV"&gt;Top 5 Data Structure and Algorithm Books for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.freecodecamp.org/these-are-the-best-free-courses-to-learn-data-structures-and-algorithms-in-depth-4d52f0d6b35a"&gt;My favorite free courses to learn Algorithms in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2019/02/top-10-free-algorithms-and-data.html"&gt;10 Free Data Structure Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-free-courses-to-learn-aws-in-2020-529e"&gt;Top 10 Free Courses to learn AWS in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free Courses to learn Docker for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/101-coding-problems-and-few-tips-to-crack-your-next-programming-interviews-402a"&gt;10 Tips and 101 Coding Problems to Crack Programming Interview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-system-design-courses-for-coding-interviews-949fd029ce65"&gt;10 Best System Design courses for Coding interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-system-design-courses-for-coding-interviews-949fd029ce65"&gt;6 Best Dynamic Programming Courses for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/06/data-structure-and-algorithm-interview-questions-programmers.html"&gt;100+ Data Structure and Coding Problems for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these *Coding interview skills and topics*useful, then please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are aiming for FAANG (Facebook, Amazon, Apple, NetFlix, and Google) companies then I also suggest you join the &lt;strong&gt;&lt;a href="https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep?affcode=441520_zytgk2dn"&gt;Master the Coding Interview: Big Tech (FAANG) Interviews&lt;/a&gt;&lt;/strong&gt; course by Andrei Negaoie on ZTM Academy. FAANG interviews are toughest to crack and this course is a valuable resource to crack FAANG interviews.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>coding</category>
      <category>algorithms</category>
      <category>datastructure</category>
    </item>
    <item>
      <title>Modern Web Applications with Hotwire</title>
      <author>Jennifer Ledezma </author>
      <pubDate>Mon, 12 Jul 2021 15:46:24 +0000</pubDate>
      <link>https://dev.to/jennlva/modern-web-applications-with-hotwire-36lj</link>
      <guid>https://dev.to/jennlva/modern-web-applications-with-hotwire-36lj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-use-hotwire"&gt;
  &lt;/a&gt;
  Why use Hotwire?
&lt;/h1&gt;

&lt;p&gt;Rails views can sometimes be fast and work perfectly, but some other times they can cause all kinds of problems. For example, one of the most common situations is rendering a lot of partials that can make the application look slow. That could happen especially when the programmer is not careful about anti-patterns associated with Rails views.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqmkqVSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eby7scw9hqpgwwxnxto.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqmkqVSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eby7scw9hqpgwwxnxto.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, JavaScript has been used as an alternative to dynamically update our content without having to refresh the entire browser. However, it is not a solution loved by many programmers: "Why would I want to leave my Ruby and Rails bubble of happiness?" (R, Subramaniamso, 2021).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is why&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hotwire uses JavaScript libraries that provide connections to develop a more interactive and modern response system without the need to write a lot of JS code. And, the most important thing: without sacrificing any of the speed or responsiveness associated with a traditional single-page application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hotwire-has-3-components"&gt;
  &lt;/a&gt;
  Hotwire has 3 Components
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Turbo: It is the heart of Hotwire and it is kind of a new version of turbolinks. Also, it is used for speed and broadcasts updates and it has two elements: frames and streams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stimulus: It is used for flexibility and it is similar to JavaScript framework but for html — it does not deal with rendering HTML at all. In addition, Stimulus pairs perfectly with Turbo to provide quick fixes with minimal effort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strada: It is not released yet; it will be used for mobile hybrid applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moreover, Turbo uses redis to store its data and handle websockets with action cable. This functionality is needed to autoloading the stimulus controllers without having to change anything in your controller classes to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Set-up
&lt;/h2&gt;

&lt;p&gt;Add the hotwire-rails gem in your Gemfile file. This gem includes setup for Turbo and Stimulus; it also includes Redis. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;bundle install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;rails hotwire:install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn install&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those steps will remove everything related to &lt;code&gt;turbolinks&lt;/code&gt; from your &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Manually in your &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; change the lines related to &lt;code&gt;data-turbolinks-track&lt;/code&gt; to &lt;code&gt;data-turbo-track&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use Hotwire&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start by setting up Turbo feature frames. This provides built-in updates to parts of the page and not to the entire page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add ActionCable broadcast channel preferences to your model.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/tags.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:tag_type&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="n"&gt;after_create_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_prepend_to&lt;/span&gt; &lt;span class="s2"&gt;"tags"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;after_update_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_replace_to&lt;/span&gt; &lt;span class="s2"&gt;"tags"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;after_destroy_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_remove_to&lt;/span&gt; &lt;span class="s2"&gt;"tags"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Edit your view, add &lt;code&gt;theturbo_stream_from&lt;/code&gt;, which tells Turbo where we get the updates from. It should be the same definition we used in our model for this example "tags".
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views/tags/_tag.html.erb&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= turbo_frame_tag dom_id(tag) do %&amp;gt;
 &amp;lt;i class=&lt;/span&gt;&lt;span class="s2"&gt;"tiny material-icons"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;local_offer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt; 
&amp;lt;% end %&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create our &lt;code&gt;turbo_frame&lt;/code&gt; to mark which parts we want to update in our app.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views/tags/index.html.erb&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"center-align"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h5&amp;gt;
&amp;lt;%= turbo_stream_from "tags" %&amp;gt;
&amp;lt;%= turbo_frame_tag "tags" do %&amp;gt;
 &amp;lt;%= render @tags  %&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;%= turbo_frame_tag "tag_form" do %&amp;gt;
  &amp;lt;%= render "form", tag: @tag   %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;The combination of Hotwire and Rails with a pinch of Stimulus for client-side interactivity, it is a powerful option for building high-performance, scalable, and easy-to-use web applications for both developers and users. Overall, you just have to consider using a design that fits this excellent solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3f1GPCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew7gbravdzkufff820q3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3f1GPCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew7gbravdzkufff820q3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.magmalabs.io/2021/07/08/hotwire-rails.html"&gt;See the original post on MagmaLabs Technical Blog:&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>hotwirerails</category>
      <category>stimulus</category>
    </item>
    <item>
      <title>What is blockchain</title>
      <author>Hamza Muhammed</author>
      <pubDate>Mon, 12 Jul 2021 15:39:56 +0000</pubDate>
      <link>https://dev.to/hamza4916/what-is-blockchain-hh4</link>
      <guid>https://dev.to/hamza4916/what-is-blockchain-hh4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Blockchain&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What Is Blockchain
&lt;/h1&gt;

&lt;p&gt;Blockchain is basically a type of digital ledger or database that information or data of transactions can be stored in and is also distributed on a network of computers that check and verify the validity of these transactions before they are being added to the chain as new blocks. These computers are called nodes.&lt;/p&gt;

&lt;p&gt;It is this technology that is used to power and secure cryptocurrencies like bitcoin, cardano, ethereum and many others through a process known as cryptography.  For example, the Ethereum blockchain contains recorded informations of transactions made on it, informations such as "sent from who", "sent to who" and "amount sent", this information is stored in a block and is then cryptographically linked to the previous block that went before it.This process makes it very next to impossible to alter or tamper with the informations stored in a block. This entire process makes it possible to store and transfer value accross the globe without the need to trust a third party middleman {usually a bank or credit card issuer}.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blockchain advantages includes but are not limited to the following:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because almost all cryptocurrencies like bitcoin, ethereum, cardano, and Litecoin, are secured  by blockchain networks, transaction validity and accuracy on these networks are being verified and validated by a large number of nodes on the network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This kind of technology is also very usefull because it does not let a single individual or corporation dictate when, how, why and  where you should spend your funds as such decisions are being made by everyone on the network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Payments done via blockchain networks are more secure and requires little to no sensitive information unlike traditional banks where your name, address, phone number, email and other sensitive informations are required just to send a payment. This level of security is only possible due to the cryotographic nature of these networks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That means there is almost zero to no risk of your financial information being compromised, or your identity being stolen by the bad guys.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine a global, open alternative to every financial service you use today, accessible with little more than a smartphone and internet connection.&lt;/p&gt;

&lt;p&gt;written by hamza muhammed IG &lt;a href="https://www.instagram.com/zanni__x/"&gt;https://www.instagram.com/zanni__x/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>programming</category>
      <category>help</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Make a Discord bot in just 30 lines of code. </title>
      <author>Shreyas Pahune</author>
      <pubDate>Mon, 12 Jul 2021 15:31:00 +0000</pubDate>
      <link>https://dev.to/basecampxd/make-a-discord-bot-in-just-30-lines-of-code-jbj</link>
      <guid>https://dev.to/basecampxd/make-a-discord-bot-in-just-30-lines-of-code-jbj</guid>
      <description>&lt;p&gt;Hey  everyone 👋🏻, today we are going to make a discord bot 🤖 which will send gifs according to the user &lt;strong&gt;in just 30 lines of code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The way this bot will work is, if you write &lt;code&gt;.gif happy&lt;/code&gt; then the bot will send a random happy gif.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are we going to use to build this mini-project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;NPM Packages:

&lt;ul&gt;
&lt;li&gt;Discord.js&lt;/li&gt;
&lt;li&gt;DOTENV&lt;/li&gt;
&lt;li&gt;node-fetch&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay so let's get started 🎉!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-"&gt;
  &lt;/a&gt;
  Steps :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We have to go to the &lt;a href="https://discord.com/developers/applications"&gt;discord developer portal&lt;/a&gt; and create a new application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9pYT03b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7zg9nzgm77funm73znr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9pYT03b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7zg9nzgm77funm73znr.png" alt="portal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then you have to create a new application ☝🏻. &lt;code&gt;(the blue button on top-right corner)&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Give a name to your application.&lt;/li&gt;
&lt;li&gt;Then on the left hand side, click on bot👇🏻 .&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWydSSKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erzhg0zi8ykpiewhbd5g.PNG" alt="second"&gt;&lt;/li&gt;
&lt;li&gt;After clicking on bot, now click on &lt;code&gt;Add Bot&lt;/code&gt; on the right hand side, and after this step you will have a screen like this 👇🏻.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1N4yaK4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1ryr6lckw6gvtg7kqny.PNG" alt="third"&gt;&lt;/li&gt;
&lt;li&gt;Now the Token is something which you have to keep a secret and not reveal anywhere or to anyone.&lt;/li&gt;
&lt;li&gt;If you reveal it by mistake, no worries just regenerate it, but make sure you don't or else someone can take over your bot.&lt;/li&gt;
&lt;li&gt;Now we have to decide what permissions does our bot need, and after deciding this, just head to OAuth2 section on the right hand side of your screen.&lt;/li&gt;
&lt;li&gt;You will have a screen when many check boxes, and you have to click on the checkbox which says &lt;code&gt;bot&lt;/code&gt; 👇🏻.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzJm8_D_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lijrp59d102ui3r06idc.PNG" alt="four"&gt;&lt;/li&gt;
&lt;li&gt;Then click on the permission you have to give to the bot.&lt;/li&gt;
&lt;li&gt;After that click on the link and copy it, after that paste it into a new tab and authorize it to add it to a new server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we just have to code it!&lt;/p&gt;

&lt;p&gt;Before explaining the code, let me explain you the folder structure 👇🏻. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lhde7OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82kix2zwih2msu2qp5w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lhde7OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82kix2zwih2msu2qp5w.PNG" alt="folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is a folder called &lt;code&gt;src&lt;/code&gt; in which we have a main file called &lt;code&gt;bot.js&lt;/code&gt; in which we are going to code our bot.&lt;/li&gt;
&lt;li&gt;Okay so you can see that there are two files and a folder, named as &lt;code&gt;package-lock.json&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; respectively, they are basically of node packages and their information.&lt;/li&gt;
&lt;li&gt;There is also a &lt;code&gt;.env&lt;/code&gt; file but we will discuss about it later in this blog.&lt;/li&gt;
&lt;li&gt;Okay so we have to use 3 packages to make a discord bot, they are as follows:

&lt;ol&gt;
&lt;li&gt;discord.js (&lt;code&gt;npm i discord.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;dotenv (&lt;code&gt;npm i dotenv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;node-fetch (&lt;code&gt;npm i node-fetch&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now using this image as my reference, I am going to explain the code.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z26av6Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t8atty7rujrytdy4wyv.png" alt="code"&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see ☝🏻, there are only 30 lines of code! How amazing it that?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your own discord bot 🤖 in just 30 lines of code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay so the first and the third line of code are the import  statements which can also be written as :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import discord from 'discord.js;'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second line of code is basically us initializing the client/user, which in this case will be our bot and the users themselves .&lt;/p&gt;

&lt;p&gt;and the fourth line is importing the env package and configuring it, so basically &lt;code&gt;.env&lt;/code&gt; &lt;strong&gt;files stores all your secrets, like your discord bot's token or your API Key, these things will not be uploaded on GitHub using the git ignore file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay so in JavaScript there is this thing called &lt;code&gt;addEventListner&lt;/code&gt; which helps us to react to certain events, like if a user clicks on something or double-tap on something a particular function should run.&lt;/p&gt;

&lt;p&gt;In the same way here in discord.js &lt;code&gt;addEventListner&lt;/code&gt; is more or less replaced by &lt;code&gt;.on&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;All of the &lt;code&gt;.on&lt;/code&gt; functions are called in regards to the &lt;code&gt;client&lt;/code&gt; so we have to write &lt;code&gt;client.on('event', callBackFunction)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On line number 6 you can see that I have written a function which is &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zl4j19W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fi5gxnbad65u50jv6jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zl4j19W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fi5gxnbad65u50jv6jw.png" alt="ready"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This basically means that, whenever the user is ready and logged in the console should log &lt;code&gt;&amp;lt;Name of the Bot&amp;gt; is up and ready!&lt;/code&gt; and name of the bot is fetched by this inbuilt property known as &lt;code&gt;.user.tag&lt;/code&gt; , which is to be called in regards to the &lt;code&gt;client&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Now we have to make our bot login to the server. And  for that we have another inbuilt method/function called &lt;code&gt;.login&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;So we can write : &lt;code&gt;client.login(process.env.TOKEN)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you might wonder what is this &lt;code&gt;process.env.TOKEN&lt;/code&gt;, this is the way we call variables from our &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
So let me show what is stored inside &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wRnL9jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o99m5yd2vqufzw18wcfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wRnL9jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o99m5yd2vqufzw18wcfq.png" alt="env"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here in this file, we have to put our bot token inside a pair of single or double quotes and our tenor API key (you can generate it from &lt;a href="https://tenor.com/developer/keyregistration"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For example if you want to call the &lt;code&gt;tenor api key&lt;/code&gt; inside your &lt;code&gt;bot.js&lt;/code&gt; file, you just have to write &lt;code&gt;process.env.TENOR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And you can make a &lt;code&gt;try-catch&lt;/code&gt; block around the &lt;code&gt;client.login()&lt;/code&gt; function, so if any error occurs, we can catch it and show it on the console. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4bRoMmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6623bj3fmz7ukbj1wxpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4bRoMmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6623bj3fmz7ukbj1wxpy.png" alt="try-catch"&gt;&lt;/a&gt;&lt;br&gt;
So as of now, we have our boiler plate code ready with us, which is 👇🏻: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHUP5mTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amssijt8pdyuvc2ttm3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHUP5mTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amssijt8pdyuvc2ttm3h.png" alt="boiler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's code the main functionality of the bot now.&lt;/p&gt;

&lt;p&gt;Now all the code discussed below will be in the reference to 👇🏻 this image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyFQKmmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vof6263rdads9k8nj6n4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyFQKmmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vof6263rdads9k8nj6n4.png" alt="main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's understand the above code step-by-step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating an add event listener to react when the user sends message:

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrKk8CPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frfzpeoygaulx3ewj3xt.png" alt="addEve"&gt;&lt;/li&gt;
&lt;li&gt;Here the parameter &lt;code&gt;msg&lt;/code&gt; will contain the message which user has sent. &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Let's add a prefix to our bot, so it will only react if we write &lt;code&gt;.gif&lt;/code&gt;.

&lt;ol&gt;
&lt;li&gt;Just to be a little safe, I am going to write the main functionality inside a &lt;code&gt;try-catch&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2VH8n13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xybcvar7n5fyqxyl3ing.png" alt="try"&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;msg.content&lt;/code&gt; helps us to fetch the content inside the msg. In leman's term, it is like &lt;code&gt;.innerText&lt;/code&gt; in JavaScript. &lt;/li&gt;
&lt;li&gt;Here when the user will write &lt;code&gt;.gif&lt;/code&gt; the code inside the &lt;code&gt;if&lt;/code&gt; statement will be executed.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now let's get user's queries.

&lt;ol&gt;
&lt;li&gt;Now if a user writes &lt;code&gt;.gif batman&lt;/code&gt; then this will be considered as a string and a problem arises here, which is how do we separate the bot command and the user's query.&lt;/li&gt;
&lt;li&gt;We do that by an inbuilt function called &lt;code&gt;.split()&lt;/code&gt;, which will help us to separate the whole string into two different values stored in an array, for example: if I write &lt;code&gt;.gif batman&lt;/code&gt; then &lt;code&gt;.split()&lt;/code&gt;  will make an array :  &lt;code&gt;['.gif', 'batman']&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Let's see it's code.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWl6yqj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hgyddtr6tzi94rcecmy.png" alt="split"&gt;&lt;/li&gt;
&lt;li&gt;We are going to compare the &lt;code&gt;first index of query&lt;/code&gt; which will be &lt;code&gt;.gif&lt;/code&gt;  to the string .gif.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Let's discuss about the API and Fetching it.

&lt;ol&gt;
&lt;li&gt;I am using node-fetch to fetch the API.&lt;/li&gt;
&lt;li&gt;The base of the API is

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;https://g.tenor.com/v1/search?q=USERQUERY&amp;amp;key=API-KEY&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;And in order to take query from the user and give the key as your API Key we have to make this URL dynamic.&lt;/li&gt;
&lt;li&gt;We can do that by using template literals.

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;https://g.tenor.com/v1/search?q=${query[1]}&amp;amp;key=${process.env.TENOR}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And now the  code looks like this.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axHEXkqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl5eu92onady5c3o02my.png" alt="url"&gt;&lt;/li&gt;
&lt;li&gt;And the query has to be the second value (First Index) in the array.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Let's fetch the API now.

&lt;ol&gt;
&lt;li&gt;We just have to put &lt;code&gt;async&lt;/code&gt; in front of the callback function as you can see in the above image on line number 10.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; will make your function, asynchronous and then we will use &lt;code&gt;await&lt;/code&gt; to wait for the response from the API.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4k1OljK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acmflsactcaxk46j97fb.png" alt="without"&gt;&lt;/li&gt;
&lt;li&gt;Now here we will have a problem, which is we will only receive one GIF every time.&lt;/li&gt;
&lt;li&gt;Now the API will return 20 GIFs and we have to pick a random one (on line 17).&lt;/li&gt;
&lt;li&gt;So to do this, we will make a random variable which will choose one GIF.&lt;/li&gt;
&lt;li&gt;Now the final code looks like 👇🏻
&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv8PmckI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23aobyz6j106syjmja4i.png" alt="final"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Let's run this.

&lt;ol&gt;
&lt;li&gt;Just open the terminal, change the directory to the home directory and inside &lt;code&gt;src&lt;/code&gt; folder, then write  &lt;code&gt;node bot.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thank you for reading the whole blog 🎉!! If you liked it do share it with your developer friends and feel free to comment and give suggestions.&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>npm</category>
      <category>discord</category>
    </item>
    <item>
      <title>Creating custom form controls using ControlValueAccessor in Angular</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Mon, 12 Jul 2021 15:18:13 +0000</pubDate>
      <link>https://dev.to/angular/creating-custom-form-controls-using-controlvalueaccessor-in-angular-202</link>
      <guid>https://dev.to/angular/creating-custom-form-controls-using-controlvalueaccessor-in-angular-202</guid>
      <description>&lt;p&gt;How to create custom form controls in Angular using ControlValueAccessor? We can create custom form components and connect them to either template-driven forms or reactive forms.&lt;/p&gt;

&lt;p&gt;So when I say custom form controls, I am talking about those elements that are not your typical controls like input fields, radio buttons, or checkboxes. For example, a star rating component or a knob. These are not available out of the box.&lt;/p&gt;

&lt;p&gt;We can also make sections in a form as child components which can be then used as custom form controls. In this way, larger forms can be broken down into manageable pieces. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--446-AHLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elk5dy5s267aojs1xbmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--446-AHLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elk5dy5s267aojs1xbmr.png" alt="Custom Form Controls using ControlValueAccessor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the default form controls like input field, radio button, checkbox, select dropdown, etc, custom control value accessors are already written and shipped with Angular. Eg:  &lt;a href="https://angular.io/api/forms/CheckboxControlValueAccessor"&gt;CheckboxControlValueAccessor&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We will be talking more about &lt;code&gt;ControlValueAccessor&lt;/code&gt; it and how to use it to create really cool form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-form-elements"&gt;
  &lt;/a&gt;
  Custom Form Elements
&lt;/h2&gt;

&lt;p&gt;When we hear the term form, we would be thinking of few input text fields and maybe some checkboxes and stuff. But when it comes to really complex forms where we have a lot of custom buttons, lists, and selections, the whole form will become very complex. And managing such a complex form would be a problem.&lt;/p&gt;

&lt;p&gt;When there are a lot of custom form elements or when the form starts to get big, it's probably a good idea to break it into smaller sections. Placing everything in a single template would make it really messy.&lt;/p&gt;

&lt;p&gt;We can break down the form into multiple components and then connect it with the main form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-form-control-in-angular"&gt;
  &lt;/a&gt;
  Custom form control in Angular
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io/api/forms/ControlValueAccessor"&gt;ControlValueAccessor&lt;/a&gt; is something that comes with Angular. It acts as a bridge between DOM elements and the angular Form API.&lt;/p&gt;

&lt;p&gt;So If you have a custom element that you would like to connect to your form, you have to make use of ControlValueAccessor to make the element compatible with Angular Forms API. Doing so will enable the element to be connected using &lt;code&gt;ngModel&lt;/code&gt; (Template Driven Forms) or &lt;code&gt;formControl&lt;/code&gt; (Reactive Forms).&lt;/p&gt;

&lt;p&gt;Let's take a look at how do we create a custom form control.&lt;/p&gt;

&lt;p&gt;When I started with Angular, I was not aware that something like this existed. I remember when I wrote child components for forms and used &lt;code&gt;@Input()&lt;/code&gt; and &lt;code&gt;@Output()&lt;/code&gt; to receive and send form values to the parent form component. I used to listen to the changes in the child component and then emit the values to the parent.&lt;/p&gt;

&lt;p&gt;In the parent, the values will be taken and used to patch the form. This was until I came across the magical ControlValueAccessor. No more inputs and outputs, everything just works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implement-the-controlvalueaccessor-interface"&gt;
  &lt;/a&gt;
  Implement the ControlValueAccessor interface.
&lt;/h3&gt;

&lt;p&gt;Step 1 is to implement the interface in the custom component. The interface would ask us to add few methods in our class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;setDisabledState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)?:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us see what each of the methods is doing. Once we are clear on how things are, we can dive into the implementation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;writeValue()&lt;/code&gt; - this function is called by the Forms API to update the value of the element. When &lt;code&gt;ngModel&lt;/code&gt; or &lt;code&gt;formControl&lt;/code&gt; value changes, this function gets called and the latest value is passed in as the argument to the function. We can use the latest value and make changes in the component. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#writevalue"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;registerOnChange()&lt;/code&gt; - we get access to a function in the argument that can be saved to a local variable. Then this function can be called when there are any changes in the value of our custom form control. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#registerOnChange"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;registerOnTouched()&lt;/code&gt; - we get access to another function that can be used to update the state of the form to &lt;code&gt;touched&lt;/code&gt;. So when the user interacts with our custom form element, we can call the saved function to let Angular know that the element has been interacted with. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#registerOnTouched"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setDisabledState()&lt;/code&gt; - this function will be called by the forms API when the disabled state is changed. We can get the current state and update the state of the custom form control. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#setDisabledState"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we implement these functions, the next step is to provide the &lt;code&gt;NG_VALUE_ACCESSOR&lt;/code&gt; token in the component's providers array like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CustomFormControlComponent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-country-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- provided here&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomFormControlComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Here I created a provider constant and then passed it into the &lt;code&gt;providers&lt;/code&gt;. Also you can see the use of &lt;code&gt;forwardRef&lt;/code&gt; (&lt;a href="https://angular.io/api/core/forwardRef"&gt;ref&lt;/a&gt;) here. It is needed because we are referring to the &lt;code&gt;CountrySelectorComponent&lt;/code&gt; class which is not defined before its reference.&lt;/p&gt;

&lt;p&gt;So now that we know what each of these functions does, we can start implementing our custom form element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-form"&gt;
  &lt;/a&gt;
  Basic Form
&lt;/h2&gt;

&lt;p&gt;We are going to take a look at the base form that we are gonna work with. We just have some basic input fields and 2 custom form elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Adithya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;github:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'https://github.com/AdiSreyaj'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;website:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'https://adi.so'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;server:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'IN'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;communications:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;label:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Marketing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;modes:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'SMS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;label:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Updates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;modes:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'SMS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we need the data to be. Here the &lt;code&gt;server&lt;/code&gt; and the &lt;code&gt;communications&lt;/code&gt; fields are going to be connected to a custom form control. We are using  &lt;a href="https://angular.io/guide/reactive-forms"&gt;Reactive Forms&lt;/a&gt;  in the example.&lt;/p&gt;

&lt;p&gt;Here is how our form will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;communications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[]]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;[formGroup]=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"github"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Github&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"github"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"github"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Website&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Region&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;app-country-selector&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/app-country-selector&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Communication&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;app-communication-preference&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"communications"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/app-communication-preference&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice in the above template we are directly using &lt;code&gt;formControlName&lt;/code&gt; on the &lt;code&gt;app-country-selector&lt;/code&gt; and &lt;code&gt;app-communication-preference&lt;/code&gt; components. This will be only possible if those components are implementing the &lt;code&gt;ControlValueAccessor&lt;/code&gt; interface. This is how you make a component behave like a form control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#country-selector-custom-form-control"&gt;
  &lt;/a&gt;
  Country Selector custom form control
&lt;/h2&gt;

&lt;p&gt;We are going to see how to implement a cool country selector component as a custom form control that can be directly connected to a form. In this example, I'll be using Reactive Forms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oOOYEc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8w2dp2s8369ogieq000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oOOYEc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8w2dp2s8369ogieq000.png" alt="Country Selector Custom Form Control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The component is pretty straightforward, we will give the user to select one country from a given list. The behavior is similar to a radio button. The only difference here is that we are using our own custom component to implement this design.&lt;/p&gt;

&lt;p&gt;As always, I start by creating a new module and component for our country selector form control.&lt;/p&gt;

&lt;p&gt;Here is how we implement the ControlValueAccessor for our country selector component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CountrySelectorComponent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We provide it in the providers array inside the &lt;code&gt;@Component&lt;/code&gt; decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-country-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div&amp;gt;
      &amp;lt;ng-container *ngFor="let country of countries"&amp;gt;
        &amp;lt;button [disabled]="disabled" (click)="selectCountry(country.code)"
             [class.selected]="!disabled &amp;amp;&amp;amp; selected === country.code"&amp;gt;
          &amp;lt;ng-container *ngIf="!disabled &amp;amp;&amp;amp; selected === country.code"&amp;gt;
            &amp;lt;!-- Checkmark Icon --&amp;gt;
          &amp;lt;/ng-container&amp;gt;
          &amp;lt;img [src]="...flag src" [alt]="country.name" /&amp;gt;
          &amp;lt;p&amp;gt;{{ country?.name }}&amp;lt;/p&amp;gt;
        &amp;lt;/button&amp;gt;
      &amp;lt;/ng-container&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CountrySelectorComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;United States&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GB-ENG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;England&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Netherlands&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;selectCountry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- mark as touched&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- call function to let know of a change&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- save the function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- save the function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;setDisabledState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user has given an initial value to &lt;code&gt;server&lt;/code&gt; in the form, we will get the initial value in the &lt;code&gt;writeValue()&lt;/code&gt; method. We get the value and assign it to our local variable &lt;code&gt;selected&lt;/code&gt; which manages the state.&lt;/p&gt;

&lt;p&gt;When the user clicks on a different country, we mark the field as &lt;code&gt;touched&lt;/code&gt; and then assign the value to the &lt;code&gt;selected&lt;/code&gt; variable. The main part is we also call the &lt;code&gt;onChanged&lt;/code&gt; method and pass the newly selected country code. This will set the new value as the form control's value.&lt;/p&gt;

&lt;p&gt;By using the argument from &lt;code&gt;setDisabledState()&lt;/code&gt; method we can implement the disabled state for our component. So If we trigger disable from the form using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing the above will trigger a call to &lt;code&gt;setDisabledState()&lt;/code&gt; method where the state &lt;code&gt;isDisabled&lt;/code&gt; is passed, which is then assigned to a local variable &lt;code&gt;disabled&lt;/code&gt;. Now we can use this local variable to add a class or disable the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setDisabledState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all! We have successfully created a custom form control. Check the GitHub repo for  &lt;a href="https://github.com/adisreyaj/ng-custom-form-elements/blob/main/src/app/components/country-selector/country-selector.component.ts"&gt;full code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-preferences-custom-form-control"&gt;
  &lt;/a&gt;
  Communication Preferences custom form control
&lt;/h2&gt;

&lt;p&gt;Now let's see how to implement the second custom form control in our form, which allows user to select their communication preferences.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NN0KzVzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4amylbv52xr6s1dtpdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NN0KzVzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4amylbv52xr6s1dtpdr.png" alt="Communication preference custom form control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also a very simple component that has a bunch of checkboxes. We could have added this in the same parent component where the form is initialized. But by creating a separate component, we are making it more maintainable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COM_PREFERENCE_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CommunicationPreferenceComponent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-communication-preference&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;ng-container *ngFor="let item of options; index as i"&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;p&amp;gt;{{ item?.label }}&amp;lt;/p&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;ng-container *ngFor="let mode of item.modes; index as j"&amp;gt;
              &amp;lt;div&amp;gt;
                &amp;lt;input
                  type="checkbox"
                  [id]="item.label + mode.name"
                  [(ngModel)]="mode.enabled"
                  (ngModelChange)="handleChange(i, j, $event)" /&amp;gt;
                &amp;lt;label [for]="item.label + mode.name"&amp;gt;{{ mode.name }}&amp;lt;/label&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/ng-container&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;/ng-container&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;COM_PREFERENCE_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CommunicationPreferenceComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CommunicationPreference&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modeIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;modeIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again it's the same thing we are doing, we have an &lt;code&gt;options&lt;/code&gt; variable that manages the local state of the component. When there is any value-change triggered by the form, we get the new value in the &lt;code&gt;writeValue&lt;/code&gt; method, we update the local state with the changed value.&lt;br&gt;
When the user makes any change, we update the local state and call the &lt;code&gt;onChanged&lt;/code&gt; method and pass the updated state which updates the form as well.&lt;/p&gt;

&lt;p&gt;Find the  &lt;a href="https://github.com/adisreyaj/ng-custom-form-elements/blob/main/src/app/components/communication-preference/communication-preference.component.ts"&gt;complete code&lt;/a&gt;  for the component in the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Angular makes it really easy to implement custom form control using &lt;code&gt;ControlValueAccessor&lt;/code&gt;. By implementing few methods, we can directly hook our component to a &lt;code&gt;Reactive&lt;/code&gt; or &lt;code&gt;Template Driven&lt;/code&gt; form with ease.&lt;/p&gt;

&lt;p&gt;We can write all sorts of crazy form elements and use them without writing logic to handle communication between parent and child. Let the forms API do the magic for us.&lt;/p&gt;

&lt;p&gt;We can also use this approach to break sections of the form into their own individual component. This way if the form is big/complex, we can break then down into smaller components that can be easily managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-demo"&gt;
  &lt;/a&gt;
  Code and Demo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Github&lt;/strong&gt;: &lt;a href="https://github.com/adisreyaj/ng-custom-form-elements"&gt;https://github.com/adisreyaj/ng-custom-form-elements&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://ng-custom-form-elements.vercel.app/"&gt;https://ng-custom-form-elements.vercel.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>(Book Notes)The Well-Grounded Rubyist: Chapter 1</title>
      <author>Annie Zheng</author>
      <pubDate>Mon, 12 Jul 2021 15:08:02 +0000</pubDate>
      <link>https://dev.to/bigfishh/the-well-grounded-rubyist-chapter-1-bootstrapping-your-ruby-literacy-2ekb</link>
      <guid>https://dev.to/bigfishh/the-well-grounded-rubyist-chapter-1-bootstrapping-your-ruby-literacy-2ekb</guid>
      <description>&lt;p&gt;Chapter 1 of The Well-Grounded Rubyist focused on laying the foundation of how Ruby works and the various tools that come with a Ruby installation. Overall, it touched on a lot of different topics; some refresher on ideas I had forgotten and others new and interesting concepts I didn't know before. I enjoyed the exercises found throughout the chapter that reinforce previously touched on topics. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quotes-that-stood-out"&gt;
  &lt;/a&gt;
  Quotes that stood out:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pg 10: "The whole universe of a Ruby program consists of objects and the messages sent to them. As a Ruby programmer, you spend most of your time either specifying the things you want objects to do (by defining methods) or asking objects to do those things (by sending them messages)."&lt;/li&gt;
&lt;li&gt;pg 11: "The class is responsible for launching the object into existence, a process known as &lt;em&gt;instantiation&lt;/em&gt;, but thereafter the object has a life of its own"&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There is a difference between Ruby with an uppercase letter 'R' and &lt;code&gt;ruby&lt;/code&gt; with a lowercase letter 'r'.

&lt;ul&gt;
&lt;li&gt;Ruby refers to the programming language.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ruby&lt;/code&gt; is the Ruby interpreter. It reads and runs our files. For example, &lt;code&gt;ruby &amp;lt;file name&amp;gt;&lt;/code&gt; tells Ruby to run our file.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The values &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; are evaluated to &lt;code&gt;false&lt;/code&gt; and everything else gets evaluated to &lt;code&gt;true&lt;/code&gt; including empty strings and zeros.&lt;/li&gt;
&lt;li&gt;Variables have different identifiers:

&lt;ul&gt;
&lt;li&gt;Local: &lt;code&gt;blueberry_cheesecake&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Instance: &lt;code&gt;@blueberry_cheesecake&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Class: &lt;code&gt;@@blueberry_cheesecake&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Global: &lt;code&gt;$BLUEBERRY_CHEESECAKE&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;All values and data structures in Ruby are objects and every object is capable of understanding a set of messages. Messages correspond with methods.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="n"&gt;blueberry_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"92"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;The dot operator between &lt;code&gt;"92"&lt;/code&gt; and &lt;code&gt;to_i&lt;/code&gt; represents that a message is being sent from the right to the left. The string 92, &lt;code&gt;"92"&lt;/code&gt;, is the receiver and the method &lt;code&gt;to_i&lt;/code&gt; is the message sent.&lt;/li&gt;
&lt;li&gt;Methods can have arguments and messages don't always need the dot operator
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"blueberries"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;The message &lt;code&gt;puts&lt;/code&gt; is sent with the argument of &lt;code&gt;"blueberries"&lt;/code&gt; to the program I'm currently running, referred to as &lt;code&gt;self&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every object is an instance of a class. The class gives the object functionality and behavior. But, the object can change and get new functionality not defined by the class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;code&gt;puts&lt;/code&gt; vs. &lt;code&gt;print&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"hello "&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"there"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;
  &lt;span class="c1"&gt;# hello &lt;/span&gt;
  &lt;span class="c1"&gt;# there&lt;/span&gt;
  &lt;span class="c1"&gt;# .&lt;/span&gt;

  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello "&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"there"&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;
  &lt;span class="c1"&gt;# hello there.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;puts&lt;/code&gt; is short for put string, this method outputs our string and adds a newline to the end of the string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;print&lt;/code&gt; will also output our string but without the newline because it will just stop after printing the line.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Ruby allows us to read and write from and to other files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To read from another file, we can use &lt;code&gt;File.read("blueberries.dat")&lt;/code&gt;. Here we're getting data from the &lt;code&gt;blueberries.dat&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;To write to another file, we have to specify the mode: &lt;code&gt;File.new("blueberries.out", "w")&lt;/code&gt;. The "w" indicates write mode so we're writing information into the &lt;code&gt;blueberries.out&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Utilizing Ruby libraries: &lt;code&gt;require&lt;/code&gt; vs. &lt;code&gt;load&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="c1"&gt;# get_my_blueberries.rb&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt; hello hello, I have my blueberries here in the get_my_blueberries.rb file"&lt;/span&gt;

  &lt;span class="c1"&gt;# current_file.rb using require&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"In the first file named current_file"&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"./get_my_blueberries"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"And back again in the current_file.rb"&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"./get_my_blueberries"&lt;/span&gt;

  &lt;span class="c1"&gt;# outputs: &lt;/span&gt;
  &lt;span class="no"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;current_file&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;I&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;blueberries&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;get_my_blueberries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
  &lt;span class="no"&gt;And&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;

  &lt;span class="c1"&gt;# current_file.rb using load&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"In the first file named current_file"&lt;/span&gt;
  &lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s2"&gt;"./get_my_blueberries"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"And back again in the current_file.rb"&lt;/span&gt;
  &lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s2"&gt;"./get_my_blueberries"&lt;/span&gt;

  &lt;span class="c1"&gt;# outputs: &lt;/span&gt;
  &lt;span class="no"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;current_file&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;I&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;blueberries&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;get_my_blueberries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
  &lt;span class="no"&gt;And&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;I&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;blueberries&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;get_my_blueberries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;require&lt;/code&gt; is used more frequently than &lt;code&gt;load&lt;/code&gt; on a day-to-day basis.

&lt;ul&gt;
&lt;li&gt;If we want to use a feature from &lt;code&gt;get_my_blueberries.rb&lt;/code&gt; file, we can add this line: &lt;code&gt;require "./get_my_blueberries"&lt;/code&gt; to our file.&lt;/li&gt;
&lt;li&gt;Ruby keeps track of the files we require so even if we write the line &lt;code&gt;require "./get_my_blueberries"&lt;/code&gt; more than once, it won't reload this file.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;load&lt;/code&gt; is a method call and to use it, we simply have to provide a filename: &lt;code&gt;load get_my_blueberries.rb&lt;/code&gt;. &lt;code&gt;load&lt;/code&gt; is useful if we want to load a file more than once.

&lt;ul&gt;
&lt;li&gt;If the file that we want to load is not found, Ruby will look for it in the load path. A load path is a list of directories.

&lt;ul&gt;
&lt;li&gt;To see the names of these directories, we can run the dollar-colon special global variable, &lt;code&gt;$:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ruby -e 'puts $:'&lt;/code&gt; will return a list of this directory.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;This chapter also includes a bunch of different switches that we can add to the Ruby command-line interpreter. Here's a few that I found interesting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-e&lt;/code&gt; will run the code written in the quotations instead of from a file, for example: &lt;code&gt;ruby -e 'puts $:'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt; will check for syntax errors in one or more files without running the code. It's generally used with the &lt;code&gt;-w&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-w&lt;/code&gt; will output warnings of your code that is valid Ruby code but might be logically questionable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-v&lt;/code&gt; stands for verbose mode which will output the version of Ruby we're using and do the same functionality as the &lt;code&gt;-w&lt;/code&gt; switch.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-h&lt;/code&gt; stands for help, great for displaying all the different switches and a description of what they do.&lt;/li&gt;
&lt;li&gt;Switches can be combined like this &lt;code&gt;ruby -cw &amp;lt;filename&amp;gt;&lt;/code&gt; or &lt;code&gt;ruby -v -e 'puts "hello".reverse'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Rake is a task-management tool, it reads and runs tasks defined in a Rakefile.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the general structure of it:
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:admin&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
      &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Task to do something"&lt;/span&gt;
      &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:do_something&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
          &lt;span class="c1"&gt;# do something here&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;To run this task, we can write &lt;code&gt;rake admin:do_something&lt;/code&gt; in the command line.&lt;/li&gt;
&lt;li&gt;If we want to see a list of all our rake tasks, we can run &lt;code&gt;rake --tasks&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>books</category>
    </item>
    <item>
      <title>Understanding React Testing Library</title>
      <author>Dhaiwat Pandya</author>
      <pubDate>Mon, 12 Jul 2021 15:04:03 +0000</pubDate>
      <link>https://dev.to/dhaiwat10/understanding-react-testing-library-406e</link>
      <guid>https://dev.to/dhaiwat10/understanding-react-testing-library-406e</guid>
      <description>&lt;p&gt;Who doesn't love &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;? If you write tests for React, you probably use it a lot. People even like to call it the successor of &lt;a href="https://enzymejs.github.io/enzyme/"&gt;Enzyme&lt;/a&gt;, but React Testing Library and Enzyme are nothing alike. While React Testing Library already gives you superpowers — understanding its principles will help you write much better tests for your React UIs. I promise you will gain something out of this short read.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea-amp-the-principles"&gt;
  &lt;/a&gt;
  The idea &amp;amp; the principles
&lt;/h2&gt;

&lt;p&gt;The user lives in the heart of the principles of React Testing Library. Everything that the library does, revolves around the user. &lt;/p&gt;

&lt;p&gt;Good UI tests give you confidence that your components work for your users. They verify that your components &lt;em&gt;look&lt;/em&gt; right and &lt;em&gt;behave&lt;/em&gt; the right way. How you implement it behind the scenes is not important for the user. This is why good UI tests should &lt;em&gt;never&lt;/em&gt; rely on the implementation details of a UI component.&lt;/p&gt;

&lt;p&gt;If your tests rely on how a given component is implemented, those test cases will break when you re-factor your codebase. This makes your tests extremely hard to maintain and will slow you down. You don't want that.&lt;/p&gt;

&lt;p&gt;Remember — you want your UI tests to verify the end result, &lt;em&gt;not&lt;/em&gt; the internal implementation. This is the pivotal idea behind React Testing Library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The more your tests resemble the way your software is used,  the more confidence they can give you. &lt;br&gt; &lt;br&gt;
— &lt;em&gt;testing-library.com&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enzyme gives you access to the component's state, props, children, etc. React Testing Library doesn't do that. It gives you the DOM instead because that's what your users will have. If your tests are good enough, you will never have to explicitly access the component's state or props to make any assertions. Just use the DOM. &lt;/p&gt;

&lt;p&gt;Passing a &lt;code&gt;backgroundColor&lt;/code&gt; prop to a &lt;code&gt;&amp;lt;Button /&amp;gt;&lt;/code&gt;? Render the button to the DOM and verify that the rendered button's background color. Don't access the props of the component and make an assertion. Make a visual assertion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should apply the background color properly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ccc222&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getByText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;altText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getByAltText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to test the loading state of a component? Make an assertion on the way the component &lt;em&gt;looks&lt;/em&gt; when it is loading. Don't verify whether the &lt;code&gt;loading&lt;/code&gt; state of the component is &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render correctly while loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;altText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getByAltText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;altText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getByAltText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;altText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadingSrc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Note: you need to write fireEvent.load(image) in order to complete loading the image.&lt;/span&gt;
    &lt;span class="c1"&gt;// Since we have not done that, the image is still 'loading'.&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-benefits"&gt;
  &lt;/a&gt;
  The benefits
&lt;/h2&gt;

&lt;p&gt;React Testing Library is inspired by its love for great user experience. If you are writing &lt;em&gt;good&lt;/em&gt; tests using React Testing Library, you can be assured that the experience you ship to your users will be what you wanted. It gives you that much-needed confidence when pushing to production and let me tell you, it feels good. Anything that relieves you of some stress is a blessing and React Testing Library is definitely one.&lt;/p&gt;

&lt;p&gt;What about the developer experience? Well, React Testing Library excels at that, too. The syntax is extremely intuitive. You don't have to know any intricacies in order to get up and running. The querying methods like &lt;code&gt;getByText&lt;/code&gt;, &lt;code&gt;getByAltText&lt;/code&gt;, etc allow developers to query the DOM just like a real end-user. This is so important.&lt;/p&gt;

&lt;p&gt;Another &lt;em&gt;massive&lt;/em&gt; benefit this library offers to developers is that as long as you only re-factor your component's implementation (&lt;em&gt;not&lt;/em&gt; functionality), your tests will not break. I might be repeating myself here, but this will save you a &lt;em&gt;lot&lt;/em&gt; of time &amp;amp; headaches. And you will absolutely love it when you refactor the code and nothing breaks. Trust me.&lt;/p&gt;

&lt;p&gt;Oh, and the &lt;a href="https://testing-library.com/docs"&gt;documentation&lt;/a&gt; is everything a developer would want from a library. It's perfect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;All in all, React Testing Library helps you ship UIs which are optimized for your end-users. This is something no developer/team would say no to. &lt;/p&gt;

&lt;p&gt;I listed a lot of pros of using the library here but if you think there are any cons, comment down below. Let's discuss!&lt;/p&gt;

&lt;p&gt;If gained anything from this article, please follow me here on DEV &amp;amp; on &lt;a href="https://twitter.com/dhaiwat10"&gt;Twitter&lt;/a&gt;. I try to balance my Twitter content between knowledge &amp;amp; shitposts. I can promise you will not be disappointed!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references-amp-resources"&gt;
  &lt;/a&gt;
  References &amp;amp; resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/"&gt;testing-library.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testingjavascript.com/"&gt;testingjavascript.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kentcdodds.com/"&gt;Kent C Dodds (The author of this library - the MVP!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cover image by &lt;a href="https://unsplash.com/photos/7R-frEeeDi8"&gt;Weiqi Xiong&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>How to Visualize Tabs in Vim</title>
      <author>Jonas B. R.</author>
      <pubDate>Mon, 12 Jul 2021 14:59:43 +0000</pubDate>
      <link>https://dev.to/rossijonas/how-to-visualize-tabs-in-vim-lh4</link>
      <guid>https://dev.to/rossijonas/how-to-visualize-tabs-in-vim-lh4</guid>
      <description>&lt;p&gt;(This is an excerpt taken from the post: &lt;a href="https://alldrops.info/posts/vim-drops/2021-07-08_tabs-and-spaces-in-vim/"&gt;Tabs &amp;amp; Spaces in Vim: How to Make Conscious Use of Both&lt;/a&gt;)&lt;/p&gt;




&lt;p&gt;It will be presented two ways to visualize Tabs in Vim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#searching-for-the-tab-character"&gt;
  &lt;/a&gt;
  Searching for the Tab Character
&lt;/h3&gt;

&lt;p&gt;A quick way to visualize whether there is a Tab character is by searching for it using Vim’s &lt;code&gt;search-commands&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In NORMAL mode, type &lt;code&gt;/\t&lt;/code&gt; and hit &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;. It will search for the Tab character (&lt;code&gt;\t&lt;/code&gt;) and highlight the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3LONV7mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg2khcud0wvl0nc7h3bj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3LONV7mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg2khcud0wvl0nc7h3bj.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it may be good for a quick check, if you need persistent Tabs visibility plus the ability to use the &lt;code&gt;search-commands&lt;/code&gt; for other purposes, you might need another solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activating-raw-list-endraw-mode"&gt;
  &lt;/a&gt;
  Activating &lt;code&gt;list&lt;/code&gt; Mode
&lt;/h3&gt;

&lt;p&gt;Vim’s &lt;code&gt;list&lt;/code&gt; mode displays on screen unprintable characters (&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;, &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;EOL&lt;/code&gt;, etc…) with strings defined by the &lt;code&gt;listchars&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;By default, it will display &lt;code&gt;^I&lt;/code&gt; for a Tab character but this default representation breaks screen alignment so, the suggestion is to set a string representation to be used for the Tab character:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;NORMAL&lt;/code&gt; mode, type &lt;code&gt;:set listchars=tab:▷▷⋮&lt;/code&gt; or add &lt;code&gt;set listchars=tab:▷▷⋮&lt;/code&gt; to your &lt;code&gt;.vimrc&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The command above defines the strings that Vim will display (&lt;code&gt;▷▷⋮&lt;/code&gt;) for a Tab character. Vim’s behavior is to repeat or omit the second character (&lt;code&gt;▷&lt;/code&gt;), which means:&lt;/p&gt;

&lt;p&gt;A Tab character on a file that the indentation is set to &lt;strong&gt;occupy two screen spaces&lt;/strong&gt;, will display &lt;code&gt;▷⋮&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A Tab character on a file that the indentation is set to &lt;strong&gt;occupy four screen spaces&lt;/strong&gt;, will display &lt;code&gt;▷▷▷⋮&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toggle &lt;code&gt;list&lt;/code&gt; mode by typing &lt;code&gt;:set invlist&lt;/code&gt; in &lt;code&gt;NORMAL&lt;/code&gt; mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrls9tuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55w50sxhces8p0jn4at8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrls9tuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55w50sxhces8p0jn4at8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#extra-create-a-mapping-to-toggle-list-mode-quickly"&gt;
  &lt;/a&gt;
  Extra: Create a Mapping to Toggle list Mode Quickly
&lt;/h4&gt;

&lt;p&gt;Add the following line to your &lt;code&gt;.vimrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;noremap &amp;lt;Leader&amp;gt;&amp;lt;Tab&amp;gt;&amp;lt;Tab&amp;gt; :set invlist&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You may substitute &lt;code&gt;&amp;lt;Leader&amp;gt;&amp;lt;Tab&amp;gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; as you wish. If you’d like to know more about Vim mappings, &lt;a href="https://alldrops.info/posts/vim-drops/2018-05-15_understand-vim-mappings-and-create-your-own-shortcuts/"&gt;please check this post&lt;/a&gt;.)&lt;/p&gt;




&lt;p&gt;&lt;a href="https://alldrops.info/posts/vim-drops/2021-07-08_tabs-and-spaces-in-vim/"&gt;Check the full post about Tabs &amp;amp; Spaces in Vim &lt;/a&gt; to know more.&lt;/p&gt;

&lt;p&gt;Do you have any other tip about visualizing Tabs in Vim? Please leave a comment!&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙌 !&lt;/p&gt;

</description>
      <category>vim</category>
      <category>cli</category>
      <category>tabs</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
