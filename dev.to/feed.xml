<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Visual Studio Code Setup</title>
      <author>Rithik Samanthula</author>
      <pubDate>Wed, 07 Apr 2021 06:51:37 +0000</pubDate>
      <link>https://dev.to/code2rithik/my-visual-studio-code-setup-483k</link>
      <guid>https://dev.to/code2rithik/my-visual-studio-code-setup-483k</guid>
      <description>&lt;p&gt;A lot of people have been asking me, what extensions and themes do you use in Visual Studio Code?&lt;/p&gt;

&lt;p&gt;Here is my response to that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-theme-the-best-theme" class="anchor"&gt;
  &lt;/a&gt;
  My Theme: &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I really love using this theme because it looks radiant and makes me go into the mood of coding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOSwKag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgpoxy8ioy8ygle86v8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOSwKag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgpoxy8ioy8ygle86v8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-font-fira-code" class="anchor"&gt;
  &lt;/a&gt;
  My Font: &lt;a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions"&gt;Fira Code&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I really love using Fira Code because it looks really cool and is very easy to install: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gOVrH51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/242uetyr5drvfvyhtq6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gOVrH51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/242uetyr5drvfvyhtq6d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-favorite-extensions" class="anchor"&gt;
  &lt;/a&gt;
  My Favorite Extensions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-tabnine" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;TabNine&lt;/a&gt;: &lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7dFbHev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tabnine.com/images/meta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7dFbHev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tabnine.com/images/meta.png" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TabNine is very helpful for JavaScript coding as it speeds up my coding process. This is a must install extension for any JS Coder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-discord-rich-presence" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=LeonardSSH.vscord"&gt;Discord Rich Presence&lt;/a&gt;: &lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;Before installing the extension:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2oBQKGj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g28qjwwyum64wcctuc0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2oBQKGj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g28qjwwyum64wcctuc0d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing the extension:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LLUxcoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6txliilhsdqk1ltz6ll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LLUxcoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6txliilhsdqk1ltz6ll.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I really like the Discord RPC That it adds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-auto-close-tag" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Auto Close Tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Automatically add a closing tag when you type in the closing bracket of the opening tag&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yc3WV0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-close-tag/raw/master/images/close-tag.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yc3WV0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-close-tag/raw/master/images/close-tag.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-auto-rename-tag" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When you rename one HTML/XML tag, automatically rename the paired HTML/XML tag&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXR3qoQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-rename-tag/raw/master/images/usage.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXR3qoQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-rename-tag/raw/master/images/usage.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-live-server" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A Quick Development Live Server with live browser reload.&lt;br&gt;
Start or Stop server by a single click from status bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjJq-5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ritwickdey.github.io/vscode-live-server/images/Screenshot/vscode-live-server-animated-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjJq-5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ritwickdey.github.io/vscode-live-server/images/Screenshot/vscode-live-server-animated-demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-live-share" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Visual Studio Live Share enables you to collaboratively edit and debug with others in real time, regardless what programming languages you're using or app types you're building. It allows you to instantly (and securely) share your current project, and then as needed, share debugging sessions, terminal instances, localhost web apps, voice calls, and more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCgSmKt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2066/1%2A73SgvYrtOG9UupYb2ODejA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCgSmKt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2066/1%2A73SgvYrtOG9UupYb2ODejA.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-gitignore-generator" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=piotrpalarz.vscode-gitignore-generator"&gt;.gitignore Generator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you don't have .gitignore file already you'll be prompted right away with the list of all available tools, frameworks etc. to choose from. You can select or deselect the item with Space or by clicking the checkbox. Fuzzy-search is also available to speed things up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8F_Wz2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/piotrpalarz/vscode-gitignore-generator/raw/master/images/readme/1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8F_Wz2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/piotrpalarz/vscode-gitignore-generator/raw/master/images/readme/1.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-babel-javascript" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel"&gt;Babel JavaScript&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This project supports:&lt;/p&gt;

&lt;p&gt;ES201x JavaScript&lt;/p&gt;

&lt;p&gt;React (including JSX)&lt;/p&gt;

&lt;p&gt;FlowType&lt;/p&gt;

&lt;p&gt;Support for GraphQL code highlighting within template strings&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btFreguI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mgmcdermott/vscode-language-babel/master/images/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btFreguI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mgmcdermott/vscode-language-babel/master/images/screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are all of my favorite extensions and themes.&lt;/p&gt;

&lt;p&gt;Thank You for reading this blog and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall" class="anchor"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>vscode</category>
      <category>theme</category>
      <category>codeeditor</category>
      <category>extensions</category>
    </item>
    <item>
      <title>Easy way to create API documentation in Laravel</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 07 Apr 2021 06:41:44 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/easy-way-to-create-api-documentation-in-laravel-im7</link>
      <guid>https://dev.to/dailydevtips1/easy-way-to-create-api-documentation-in-laravel-im7</guid>
      <description>&lt;p&gt;For today's article, I want to illustrate how easy it is to create API documentation in Laravel.&lt;br&gt;
We just created our first API, and know the importance of having good documentation.&lt;/p&gt;

&lt;p&gt;The goal for today is to have a primary documentation endpoint, we won't add all the details, but I'll show you how to get started with it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-scribe-for-laravel" class="anchor"&gt;
  &lt;/a&gt;
  Installing Scribe for Laravel
&lt;/h2&gt;

&lt;p&gt;First of all, we need to install Scribe, the documentation generator we will use for Laravel 8.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; knuckleswtf/scribe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we need to publish the vendor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan vendor:publish &lt;span class="nt"&gt;--provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Knuckles&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;cribe&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;cribeServiceProvider"&lt;/span&gt; &lt;span class="nt"&gt;--tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;scribe-config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a config file for Scribe that we can potentially use.&lt;/p&gt;

&lt;p&gt;Next up is basically the step to generate our initial documentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan scribe:generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should now be able to visit our documentation on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;localhost:port/docs/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3b7dAhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452610859/65FAMrbf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3b7dAhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452610859/65FAMrbf0.png" alt="Laravel generated API doc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-our-documentation-better" class="anchor"&gt;
  &lt;/a&gt;
  Making our documentation better
&lt;/h2&gt;

&lt;p&gt;For now, we didn't add much information. We can use the PHP Doc annotation to add information for each file.&lt;/p&gt;

&lt;p&gt;Let's open up the &lt;code&gt;AuthenticationController.php&lt;/code&gt; and check how we can make it better.&lt;/p&gt;

&lt;p&gt;First of all, above our class annotation, we can add a general piece of information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * @group Authentication
 *
 * API endpoints for managing authentication
 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Functions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will group all functions inside this file, as well as add a short description about it.&lt;/p&gt;

&lt;p&gt;Now for the login function, we can add the following doc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * Log in the user.
 *
 * @bodyParam   email    string  required    The email of the  user.      Example: testuser@example.com
 * @bodyParam   password    string  required    The password of the  user.   Example: secret
 *
 * @response {
 *  "access_token": "eyJ0eXA...",
 *  "token_type": "Bearer",
 * }
 */&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's quite the piece. First, we name the function and state what parameters it's expecting and what the return looks like.&lt;/p&gt;

&lt;p&gt;If we now generate our API doc, we should see the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iVGalhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452887501/rcHDjWGr-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iVGalhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452887501/rcHDjWGr-.png" alt="PHP doc in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool right! It shows exactly what's needed and what response a user can expect.&lt;/p&gt;

&lt;p&gt;If you are interested in making your documentation optimal, check out Scribe's documentation on PHP doc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scribe.readthedocs.io/en/latest/documenting/index.html"&gt;Read the scribe documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>api</category>
    </item>
    <item>
      <title>Top 5 Node.js/Express Tutorials For Beginners And Advanced Programmers</title>
      <author>The Code Lounge</author>
      <pubDate>Wed, 07 Apr 2021 05:48:44 +0000</pubDate>
      <link>https://dev.to/codeloungedev/top-5-node-js-express-tutorials-for-beginners-and-advanced-programmers-4iaa</link>
      <guid>https://dev.to/codeloungedev/top-5-node-js-express-tutorials-for-beginners-and-advanced-programmers-4iaa</guid>
      <description>&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally posted on the codelounge.dev blog =&amp;gt; &lt;a href="https://codelounge.dev/top-5-nodejsexpress-tutorials-for-beginners-and-advanced-programmers"&gt;Top 5 Node.js/Express Tutorials For Beginners And Advanced Programmers&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;I am mainly building the back-end of my applications using Node.js and Express. As a result, I have done a lot of courses in this area. Thus, in this article, I want to present to you my favorite courses to learn Node.js and Express. &lt;/p&gt;

&lt;p&gt;They have varying difficulty, some being easier than others. Also, each course has its particularities. For instance, some teach you sessions; some do not. Therefore, they complement each other, even though there is an overlap between them.&lt;/p&gt;

&lt;p&gt;Though, remember that nothing helps you more than building projects yourself. Follow the courses, and then put to use what you learned! Also, it's important to note that the courses are in no particular order. Without further ado, let's jump in.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#mozilla-mdn-nodejsexpress-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Mozilla MDN Node.js/Express Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8r56fEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606461183793/4U8REP3Az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8r56fEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606461183793/4U8REP3Az.png" alt="Screenshot 2020-11-27 at 09.12.38.png"&gt;&lt;/a&gt;&lt;br&gt;
Mozilla MDN is an excellent website with many tutorials, including a tutorial on Node.js and Express. In the tutorial, you learn the concepts by building an online library. The application allows users to add books, authors, and genres. It also shows what the books are written by each author, and to what genre they belong to.&lt;/p&gt;

&lt;p&gt;But the question is - what do you learn in this tutorial? You learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About Node and Express. What they are, how they work, and what their benefits are.&lt;/li&gt;
&lt;li&gt;How to set-up a Node (Express) development environment.&lt;/li&gt;
&lt;li&gt;To perform CRUD operations.&lt;/li&gt;
&lt;li&gt;How to create relationships between data. (e.g. Authors and Books)&lt;/li&gt;
&lt;li&gt;The MVC pattern - controllers, views, models, routes.&lt;/li&gt;
&lt;li&gt;How to use MongoDB and Mongoose with Node.js and Express.&lt;/li&gt;
&lt;li&gt;To create a front-end for your application using Pug.&lt;/li&gt;
&lt;li&gt;How to deploy your application to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not be fooled by the simplistic look of the application because the tutorial is not a design/front-end tutorial. The tutorial provides a lot of invaluable information on building a back-end application ready to deploy to production.&lt;/p&gt;

&lt;p&gt;The verdict? I highly recommend the tutorial, and you can check it on the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs"&gt;MDN's website&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#freecodecamp-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  FreecodeCamp Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIR7GWdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606463147274/jffvtiYF6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIR7GWdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606463147274/jffvtiYF6.png" alt="FreeCodeCamp_logo.png"&gt;&lt;/a&gt;&lt;br&gt;
Another excellent tutorial on Node and Express is the tutorial from &lt;a href="https://www.freecodecamp.org/learn"&gt;FreecodeCamp&lt;/a&gt;. Similar to Mozilla MDN, the tutorial takes you from no knowledge on the subject to advanced concepts like authentication. Besides that, you are going to build multiple applications, not just one. Thus, there are lots of opportunities to practice what you learn.&lt;/p&gt;

&lt;p&gt;Without further ado, let's see some of the things you learn by following FreecodeCamp's curriculum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to Node and Express.&lt;/li&gt;
&lt;li&gt;Learn how to serve HTML files and static assets (images, CSS, JavaScript, and others).&lt;/li&gt;
&lt;li&gt;Implement Middlewares.&lt;/li&gt;
&lt;li&gt;Learn about Query/Route Parameters.&lt;/li&gt;
&lt;li&gt;Get and parse data from POST requests.&lt;/li&gt;
&lt;li&gt;Use MongoDB and Mongoose to store data in a database and manipulate it.&lt;/li&gt;
&lt;li&gt;Set up authentication and authorization with Passport.&lt;/li&gt;
&lt;li&gt;Implement CRUD operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I extracted the most important topics, but the curriculum covers a lot more. Freecodecamp is a great way to get up and running with Node.js and Express. You would need to complete the material with other resources for advanced concepts and best practices, though.&lt;/p&gt;

&lt;p&gt;To conclude, Freecodecamp is one of the best resources because you do not have to set up your environment. That means you can focus just on coding and not other things. Besides that, the information is valuable, and you can learn a lot of stuff for free.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-complete-nodejs-developer-by-andrew-mead" class="anchor"&gt;
  &lt;/a&gt;
  The Complete Node.js Developer by Andrew Mead
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaKexogj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465393281/E0fYnWul3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaKexogj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465393281/E0fYnWul3.png" alt="Screenshot 2020-11-27 at 10.22.48.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course is one of the best to introduce you to the world of Node.js and Express. During this course, you build four web applications. Each application has a purpose, and it teaches you a handful of concepts. Thus, you learn a lot by building those four projects.&lt;/p&gt;

&lt;p&gt;Some of the concepts you learn in this course are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning about Node.js Package Manager - NPM.&lt;/li&gt;
&lt;li&gt;Designing a REST API.&lt;/li&gt;
&lt;li&gt;Version Control with Git.&lt;/li&gt;
&lt;li&gt;Uploading files and images.&lt;/li&gt;
&lt;li&gt;Sending emails.&lt;/li&gt;
&lt;li&gt;You also learn about ES6 and ES7.&lt;/li&gt;
&lt;li&gt;How to authenticate users with JWT - JSON Web Token.&lt;/li&gt;
&lt;li&gt;Testing with Jest.&lt;/li&gt;
&lt;li&gt;Debugging with VS Code and Google Chrome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, I highlighted the most important concepts you learn in the course. However, there are more concepts you learn. The course well-thought and you can use it to start with Node.js and Express or to fill gaps you have in your knowledge. The reason this course stands out is that the instructor goes into great detail about each concept. The explanations are not rushed, which makes it easier to follow along and learn better.&lt;/p&gt;

&lt;p&gt;Do I recommend the course? Yes; I did the course twice, and I cannot recommend it enough. The course is suitable whether you are a beginner or an intermediate developer.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#learn-node-by-wes-bos" class="anchor"&gt;
  &lt;/a&gt;
  Learn Node by Wes Bos
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fimjEKu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465082130/Dg9MpAz-t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fimjEKu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465082130/Dg9MpAz-t.png" alt="Screenshot 2020-11-27 at 10.17.34.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From all the Node.js courses, the best-looking application you are going to build is in Wes Bos's course. The design of the application is catchy, beautiful and professional. &lt;/p&gt;

&lt;p&gt;However, I want to mention I had troubles following the course in the beginning when I had no Node.js knowledge. I had to postpone it and follow another course to learn the basics. The course feels advanced, and there are other courses more suited for complete beginners. Though, keep in mind that this is my experience, and it might not be right for you.&lt;/p&gt;

&lt;p&gt;Now let's see what this course covers, and you learn by following it. You learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement CRUD operations.&lt;/li&gt;
&lt;li&gt;Implement REST API points.&lt;/li&gt;
&lt;li&gt;Use the MVC pattern for your application.&lt;/li&gt;
&lt;li&gt;Add routing and pagination.&lt;/li&gt;
&lt;li&gt;Implement file uploading.&lt;/li&gt;
&lt;li&gt;Set up a templating engine like Pug.&lt;/li&gt;
&lt;li&gt;Deploy to production, on various providers.&lt;/li&gt;
&lt;li&gt;Send emails to users.&lt;/li&gt;
&lt;li&gt;Storing data in a MongoDB database, and manipulating that data.&lt;/li&gt;
&lt;li&gt;Implement authentication and authorization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with the other courses, these are just some of the topics. The course covers a lot more topics, which you can find &lt;a href="https://learnnode.com/"&gt;learnnode.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do I recommend the course? Yes. It's a great course where you learn a ton of concepts by building a real-world application. The only blocker might be that it's a paid course. Otherwise, it's an all-around great course.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#nodejs-the-complete-guide-by-maximilian-schwarzm%C3%BCller" class="anchor"&gt;
  &lt;/a&gt;
  NodeJS - The Complete Guide by Maximilian Schwarzmüller
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5H0o_VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606491200402/rqLbiFi6Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5H0o_VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606491200402/rqLbiFi6Z.png" alt="Screenshot 2020-11-27 at 17.31.44.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Node.js course is a little bit different in the sense that it covers more topics than just Node.js and Express. Even though the focus is on these two technologies, you learn others too. For instance, it teaches TypeScript and Deno, which is a bonus. You get more than you paid for.&lt;/p&gt;

&lt;p&gt;Besides the usual Node.js and Express concepts you learn, which are taught in the other courses too, you also learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vanilla JavaScript and ES6 concepts.&lt;/li&gt;
&lt;li&gt;To use SQL with Node.js and Express.&lt;/li&gt;
&lt;li&gt;Advanced authentication and testing.&lt;/li&gt;
&lt;li&gt;What GraphQL is and how to use it.&lt;/li&gt;
&lt;li&gt;How to add Stripe payments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, these are not the only subjects. However, these are the concepts that differentiate the course from other courses. You get all the regular information about Node.js and Express, plus these other concepts and technologies.&lt;/p&gt;

&lt;p&gt;The verdict? The course is worth its money. It goes well-beyond Node.js and Express, and it teaches you other cool and useful concepts and technologies. You can check the course &lt;a href="https://www.udemy.com/course/nodejs-the-complete-guide/"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are the top five Node.js/Express courses I recommend. They can take you from no knowledge to an advanced level. Of course, I have to mention that these are not the only ones. Also, they are the top five based on my experience.&lt;/p&gt;

&lt;p&gt;I recommend all courses from this article because you cannot go wrong with any of them. However, if you have more suggestions, feel free to leave them in the comments. I would like to see more good courses.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What are type traits in C++?</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 07 Apr 2021 04:58:33 +0000</pubDate>
      <link>https://dev.to/sandordargo/what-are-type-traits-in-c-18j5</link>
      <guid>https://dev.to/sandordargo/what-are-type-traits-in-c-18j5</guid>
      <description>&lt;p&gt;Let's start with a more generic question, what is a trait? What does the word &lt;em&gt;trait&lt;/em&gt; mean?&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://dictionary.cambridge.org/dictionary/english/trait"&gt;Cambridge Dictionary&lt;/a&gt;, a &lt;em&gt;trait&lt;/em&gt; is "a particular characteristic that can produce a particular type of behaviour". Or simply "a characteristic, especially of a personality".&lt;/p&gt;

&lt;p&gt;It's important to start our quest with the generic meaning, as many of us are native English speakers and having a clear understanding of the word &lt;em&gt;trait&lt;/em&gt; helps us to have a better understanding also on the programming concept.&lt;/p&gt;

&lt;p&gt;In C++, we can think about type traits as properties of a type. The &lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt; header was an addition introduced by C++11. Type traits can be used in template metaprogramming to inspect or even to modify the properties of a type.&lt;/p&gt;

&lt;p&gt;As we saw in the &lt;a href="https://www.sandordargo.com/blog/2021/02/10/cpp-concepts-motivations"&gt;C++ concepts series&lt;/a&gt;, you'd often need the information of what kind of types are accepted by a template, what types are supported by certain operations. While concepts are much superior in terms of expressiveness or usability, with type traits you could already introduce compile-time conditions on what should be accepted as valid code and what not.&lt;/p&gt;

&lt;p&gt;Though &lt;em&gt;type traits&lt;/em&gt; can help with even more. With their help, you can also add or remove the &lt;code&gt;const&lt;/code&gt; specifier, or you can turn a pointer or a reference into a value and so on.&lt;/p&gt;

&lt;p&gt;As already mentioned, the library is used in the context of template metaprogramming, so everything happens at compile time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-a-type-trait" class="anchor"&gt;
  &lt;/a&gt;
  Show me a type trait!
&lt;/h2&gt;

&lt;p&gt;In the concepts series, I already mentioned &lt;code&gt;std::is_integral&lt;/code&gt; (in fact, I used &lt;code&gt;std::is_integral_v&lt;/code&gt;, more on that later.) Like other type traits, &lt;code&gt;std::is_integral&lt;/code&gt; is after all an &lt;code&gt;integral_constant&lt;/code&gt; that has a static &lt;code&gt;value&lt;/code&gt; member and some type information.&lt;/p&gt;

&lt;p&gt;Let's see how &lt;code&gt;std::is_integral&lt;/code&gt; is implemented, by looking at the &lt;a href="https://code.woboq.org/gcc/libstdc++-v3/include/std/type_traits.html#std::is_integral"&gt;GCC&lt;/a&gt; implementation. While it might be different for other implementations, it should give you the basic idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;_Tp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;is_integral&lt;/span&gt;
  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;__is_integral_helper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;remove_cv&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_Tp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, we can see that it uses a certain &lt;code&gt;__is_integral_helper&lt;/code&gt; that is also a template and it takes the passed in type without its &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;volatile&lt;/code&gt; qualifier if any.&lt;/p&gt;

&lt;p&gt;Now let's have a look at &lt;code&gt;__is_integral_helper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Due to the limitations of this blog post and also due to common sense I won't enumerate all the specialisations of the template &lt;code&gt;_is_integral_helper&lt;/code&gt;, I'll only show here three just to give you the idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;__is_integral_helper&lt;/span&gt;
  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;false_type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;__is_integral_helper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;true_type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;__is_integral_helper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;true_type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can observe, the default implementation of &lt;code&gt;__is_integral_helper&lt;/code&gt; is a &lt;code&gt;false_type&lt;/code&gt;. Meaning that in case you call &lt;code&gt;std::is_integral&lt;/code&gt; with a random type, that type will be handed over to &lt;code&gt;__is_integral_helper&lt;/code&gt; and it will be a false type that has the value of &lt;code&gt;false&lt;/code&gt;, therefore the check fails.&lt;/p&gt;

&lt;p&gt;For any type that should return &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;is_integral&lt;/code&gt; checks, &lt;code&gt;__is_integral_helper&lt;/code&gt; should be specialized and it should inherit from &lt;code&gt;true_type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to close this circle, let's see how &lt;code&gt;true_type&lt;/code&gt; and &lt;code&gt;false_type&lt;/code&gt; are implemented.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// The type used as a compile-time boolean with true value.&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;integral_constant&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;true_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;/// The type used as a compile-time boolean with false value.&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;integral_constant&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;false_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, they are simple aliased &lt;code&gt;integral_constants&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As the last step, let's see how &lt;code&gt;std::integral_constant&lt;/code&gt; is built. (I omit the #if, etc. directives on purpose)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;_Tp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_Tp&lt;/span&gt; &lt;span class="n"&gt;__v&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;integral_constant&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;_Tp&lt;/span&gt;                  &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;_Tp&lt;/span&gt;                           &lt;span class="n"&gt;value_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;integral_constant&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_Tp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__v&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="n"&gt;value_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;value_type&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So &lt;code&gt;integral_constant&lt;/code&gt; takes two template parameters. It takes a type &lt;code&gt;_Tp&lt;/code&gt; and a value &lt;code&gt;__v&lt;/code&gt; of the just previously introduced type &lt;code&gt;_Tp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__v&lt;/code&gt; will be accessible as the static &lt;code&gt;value&lt;/code&gt; member, while the type &lt;code&gt;_Tp&lt;/code&gt; itself can be referred to as the &lt;code&gt;value_type&lt;/code&gt; nested type. With the &lt;code&gt;type&lt;/code&gt; typedef you can access the type itself.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;true_type&lt;/code&gt; is an &lt;code&gt;integral_constant&lt;/code&gt; where &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;bool&lt;/code&gt; and value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case you have &lt;code&gt;std::is_integral&amp;lt;int&amp;gt;&lt;/code&gt; - through multiple layers - it inherits from &lt;code&gt;true_type&lt;/code&gt;, &lt;code&gt;std::is_integral&amp;lt;int&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. For any type &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;std::is_integral&amp;lt;T&amp;gt;::type&lt;/code&gt; is bool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-your-type-satisfy-a-type-trait" class="anchor"&gt;
  &lt;/a&gt;
  How to make your type satisfy a type trait
&lt;/h2&gt;

&lt;p&gt;We've just seen how &lt;code&gt;std::is_integral&lt;/code&gt; is implemented. Capitalizing on that we might think that if you have a class &lt;code&gt;MyInt&lt;/code&gt; then having it an integral type only means that we simply have to write such code (I omit the problem of references and cv qualifications for the sake of simplicity):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;is_integral&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyInt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;integral_constant&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is exactly what I proposed in the ]Write your own concepts](&lt;a href="https://www.sandordargo.com/blog/2021/03/10/write-your-own-cpp-concepts-part-i"&gt;https://www.sandordargo.com/blog/2021/03/10/write-your-own-cpp-concepts-part-i&lt;/a&gt;) article.&lt;/p&gt;

&lt;p&gt;If you read attentively, probably you pointed out that I used the auxiliary "might" and it's not incidental.&lt;/p&gt;

&lt;p&gt;I learned that having such a specialization results in undefined behaviour according to the standard [meta.type.synop (1)]:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The behavior of a program that adds specializations for any of the templates defined in this subclause is undefined unless otherwise specified."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is in that subsection? Go look for a draft standard (&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf"&gt;here is one&lt;/a&gt;) if you don't have access to a paid version. It's a very long list, and I tell you &lt;code&gt;std::is_integral&lt;/code&gt; is part of it. In fact, all the primary or composite type categories are in there.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;As Howard Hinnant, the father of &lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt; &lt;a href="https://stackoverflow.com/questions/25345486/why-specializing-a-type-trait-could-result-in-undefined-behaviour"&gt;explained on StackOverflow&lt;/a&gt; "for any given type T, exactly one of the primary type categories has a value member that evaluates to true." If a type satisfies &lt;code&gt;std::is_floating_point&lt;/code&gt; then we can safely assume that &lt;code&gt;std::is_class&lt;/code&gt; will evaluate to false. As soon as we are allowed to add specializations, we cannot rely on this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;type_traits&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyInt&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;is_integral&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyInt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;integral_constant&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static_assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;is_integral&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyInt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"MyInt is not integral types"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static_assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;is_class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyInt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"MyInt is not integral types"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, &lt;code&gt;MyInt&lt;/code&gt; breaks the explained assumption and this is in fact undefined behaviour, something you should not rely on.&lt;/p&gt;

&lt;p&gt;And the above example shows us another reason, why such specializations cannot be considered a good practice. Developers cannot be trusted that much. We either made a mistake or simply lied by making &lt;code&gt;MyInt&lt;/code&gt; an integral type as it doesn't behave at all like an integral.&lt;/p&gt;

&lt;p&gt;This basically means that you cannot make your type satisfy a type trait in most cases. (As mentioned the traits that are not allowed to be specialized are listed in the standard).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today, we learned what type traits are, how they are implemented and we also saw that we cannot explicitly say about a user-defined type that it belongs to a primary or composite type category. Next week, we'll see how we can use type traits.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>typetraits</category>
      <category>templates</category>
    </item>
    <item>
      <title>😬15 Very Important Javascript String Methods Every Developer Should Know</title>
      <author>Satish Naikawadi</author>
      <pubDate>Wed, 07 Apr 2021 04:45:54 +0000</pubDate>
      <link>https://dev.to/satishnaikawadi2001/15-very-important-javascript-string-methods-every-developer-should-know-1apb</link>
      <guid>https://dev.to/satishnaikawadi2001/15-very-important-javascript-string-methods-every-developer-should-know-1apb</guid>
      <description>&lt;p&gt;Manipulation of javascript strings are very important in most of the  web development projects. So , in this post we will take a look 😍 at some important and frequently used string methods in javascript. Below are the strings which we will used to learn this methods with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stringOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's learn important javascript string methods.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stringTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Also we will see their examples.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#charat" class="anchor"&gt;
  &lt;/a&gt;
  charAt()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;String&lt;/code&gt; object's &lt;code&gt;charAt()&lt;/code&gt; method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.If the &lt;code&gt;index&lt;/code&gt; cannot be converted to the integer or no &lt;code&gt;index&lt;/code&gt; is provided, the default is &lt;code&gt;0&lt;/code&gt;, so the first character of string is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Character at index &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in stringOne is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Character at index 4 in stringOne is s&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#concat" class="anchor"&gt;
  &lt;/a&gt;
  concat()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;concat()&lt;/code&gt; method concatenates the string arguments to the calling string and returns a new string. If the arguments are not of the type string, they are converted to string values before concatenating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringTwo&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;And &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringTwo&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's learn important javascript string methods.Also we will see their examples.&lt;br&gt;
Let's learn important javascript string methods.And Also we will see their examples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#endswith" class="anchor"&gt;
  &lt;/a&gt;
  endsWith()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;endsWith()&lt;/code&gt; method determines whether a string ends with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate. This method is case-sensitive. If second argument provided, it is used as the &lt;code&gt;length&lt;/code&gt; of string. Defaults to &lt;code&gt;string.length&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;methods.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;true&lt;br&gt;
false&lt;br&gt;
true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#includes" class="anchor"&gt;
  &lt;/a&gt;
  includes()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;includes()&lt;/code&gt; method performs a case-sensitive search to determine whether one string may be found within another string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate. The second argument is position within the string at which to begin searching for searchString. (Defaults to 0.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//Start searching from first index&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;let's&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//Case sensitive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;true&lt;br&gt;
false&lt;br&gt;
false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#indexof" class="anchor"&gt;
  &lt;/a&gt;
  indexOf()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;indexOf()&lt;/code&gt; method returns the index within the calling String object of the first occurrence of the specified value, starting the search at &lt;code&gt;fromIndex&lt;/code&gt;. Returns &lt;code&gt;-1&lt;/code&gt; if the value is not found. &lt;code&gt;fromIndex&lt;/code&gt; is the second argument which is an integer representing the index at which to start the search. Defaults to 0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//Start searching from index 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;8&lt;br&gt;
18&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lastindexof" class="anchor"&gt;
  &lt;/a&gt;
  lastIndexOf()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;lastIndexOf()&lt;/code&gt; method is same as &lt;code&gt;indexOf()&lt;/code&gt; method only difference is instead of first occurence it search for last occurence of a given string. It returns the &lt;code&gt;index&lt;/code&gt; of the last occurrence of searchValue; &lt;code&gt;-1&lt;/code&gt; if not found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;25&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#replace" class="anchor"&gt;
  &lt;/a&gt;
  replace()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;replace()&lt;/code&gt; method returns a new string with some or all matches of a &lt;code&gt;pattern&lt;/code&gt; replaced by a replacement. The pattern can be a &lt;code&gt;string&lt;/code&gt; or a &lt;code&gt;RegExp&lt;/code&gt;, and the replacement can be a &lt;code&gt;string&lt;/code&gt; or a &lt;code&gt;function&lt;/code&gt; to be called for each match. If pattern is a string, only the first occurrence will be replaced.&lt;br&gt;
The original string is left unchanged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;methods&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;functions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;important&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;must know&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/Javascript/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's learn important javascript string functions.&lt;br&gt;
Let's learn must know javascript string methods.&lt;br&gt;
Let's learn important JS string methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;replaceAll()&lt;/code&gt; is also a similar method only difference is instead of replacing first match it will replace every match in the string.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#startswith" class="anchor"&gt;
  &lt;/a&gt;
  startsWith()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;startsWith()&lt;/code&gt; method determines whether a string begins with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.The second argument is &lt;code&gt;position&lt;/code&gt; in this string at which to begin searching for searchString. Defaults to 0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let's&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Start searching from position at index 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;true\&lt;br&gt;
false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#slice" class="anchor"&gt;
  &lt;/a&gt;
  slice()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method &lt;strong&gt;extracts a section of a string&lt;/strong&gt; and returns it as a new string, without modifying the original string. Its first argument is &lt;code&gt;beginIndex&lt;/code&gt; - the zero-based index at which to begin extraction. And second srgument is &lt;code&gt;endIndex&lt;/code&gt; - the zero-based index before which to end extraction. &lt;strong&gt;The character at &lt;code&gt;endIndex&lt;/code&gt; will not be included.&lt;/strong&gt;\&lt;br&gt;
If any or both of the two &lt;code&gt;endIndex&lt;/code&gt; and &lt;code&gt;beginIndex&lt;/code&gt; are negative, then they are treated as &lt;code&gt;str.length + endIndex&lt;/code&gt; and &lt;code&gt;str.length + beginIndex&lt;/code&gt; . (For example, if endIndex is -3, it is treated as str.length - 3.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Length of stringOne is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Start at index 6 and extract upto index 22 not including 22&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Start at index 6 and extract upto index 48 - 9 = 39 not including 39&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Start at index 6 and extract whole string&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// As startIndex is greater than length return empty string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Length of stringOne is 48&lt;br&gt;
learn important &lt;br&gt;
learn important javascript string&lt;br&gt;
learn important javascript string methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#split" class="anchor"&gt;
  &lt;/a&gt;
  split()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;split()&lt;/code&gt; method divides a &lt;code&gt;String&lt;/code&gt; into an ordered list of substrings, puts these substrings into an &lt;code&gt;array&lt;/code&gt;, and returns the &lt;code&gt;array&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;learn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[ "Let's", 'learn', 'important', 'javascript', 'string', 'methods.' ]&lt;br&gt;
[ "Let's ", ' important javascript string methods.' ]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#substr" class="anchor"&gt;
  &lt;/a&gt;
  substr()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;substr()&lt;/code&gt; method returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Start at index 6 and extract whole remaining string&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Start at index 6 and extract next 34 characters.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;learn important javascript string methods.&lt;br&gt;
learn important javascript string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#trim" class="anchor"&gt;
  &lt;/a&gt;
  trim()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;trim()&lt;/code&gt; method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar"&gt;line terminator characters&lt;/a&gt; (LF, CR, etc.).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stringThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;       remove whitespaces       &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringThree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;remove whitespaces&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The &lt;code&gt;trimEnd()&lt;/code&gt; and &lt;code&gt;trimStart()&lt;/code&gt; are similar methods which removes whitespace from the end and start of the string respectively.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#match" class="anchor"&gt;
  &lt;/a&gt;
  match()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;match()&lt;/code&gt; method retrieves the result of matching a string against a regular expression. You can learn about regular expression &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;here&lt;/a&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;A-Z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// regex for capital characters&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[ 'L' ]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tolowercase" class="anchor"&gt;
  &lt;/a&gt;
  toLowerCase()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stringThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;THIS IS DEMO STRING&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringThree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this is demo string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#touppercase" class="anchor"&gt;
  &lt;/a&gt;
  toUpperCase()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the calling string value converted to upper case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stringThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this is demo string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringThree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totoUpperCase&lt;/span&gt;&lt;span class="p"&gt;()());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;THIS IS DEMO STRING&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that is it for this article. You can visit &lt;a href="https://satishnaikawadi.me/posts"&gt;satishnaikawadi.me&lt;/a&gt; for more articles related to programming.Thanks for reading 😇 .&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Coding is Boring! why do you love coding? </title>
      <author>Davide de Paolis</author>
      <pubDate>Wed, 07 Apr 2021 04:45:46 +0000</pubDate>
      <link>https://dev.to/dvddpl/coding-is-boring-why-do-you-love-coding-cl0</link>
      <guid>https://dev.to/dvddpl/coding-is-boring-why-do-you-love-coding-cl0</guid>
      <description>&lt;p&gt;A few days ago I was contacted by HR to know if I wanted to participate in the &lt;a href="https://www.girls-day.de/#"&gt;Boys &amp;amp; Girls Day&lt;/a&gt;  with some workshop or presentation about my daily job. &lt;br&gt;
Boys &amp;amp; Girls Day is a project/event where 5th graders from  different Hamburg schools can visit different companies to gather information about &lt;strong&gt;different types of careers&lt;/strong&gt; that might help them choose their learning path in the future, and specifically with the intent of &lt;strong&gt;going beyond the idea of gender-specific jobs&lt;/strong&gt;: therefore more Girls in Programming and more Boys in Kindergartens for example)&lt;/p&gt;

&lt;p&gt;Of course, I was thrilled with the idea and I started thinking about how to handle that 30 minutes of &lt;strong&gt;Show &amp;amp; Tell + QA.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But there is a problem:  &lt;em&gt;My job is rather dull!&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a young kid really the opposite of exciting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xULW8PxkpgZDQkXmak/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xULW8PxkpgZDQkXmak/giphy.gif" alt="boring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't build planes&lt;/li&gt;
&lt;li&gt;I don't save lives&lt;/li&gt;
&lt;li&gt;I don't create art&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I sit all day in front of a monitor&lt;/strong&gt;, hunting bugs and getting mad at my or other's people code to implement things that can barely be seen like microservices or have no special graphical appeal such as react form components or data grids.  And when I am not actively coding, I spend endless hours in meetings, often useless, boring, or frustrating, to discuss requirements, specifications, and technical details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/IKjbJJmKtWO7Uj4lul/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/IKjbJJmKtWO7Uj4lul/giphy.gif" alt="career"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But I love it.&lt;/strong&gt; &lt;br&gt;
For me, it is rewarding and challenging.  And since I completely switched career 16 years ago I never had a boring day!&lt;/p&gt;

&lt;p&gt;Why do I love it? What does make it so special? How could I describe it so that people just don't think &lt;em&gt;I am a socially awkward computer nerd&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Here are my reasons why Software Engineering is exciting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You build things&lt;/li&gt;
&lt;li&gt;You break things (and possibly then understand how they work) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You fix things&lt;/strong&gt; ( it is relieving and fulfilling and unfortunately it does not work so easily with people and the problems in society) &lt;/li&gt;
&lt;li&gt;You learn to break big problems into smaller, easier to accomplish, challenges (and this is really useful in life too) &lt;/li&gt;
&lt;li&gt;You solve problems (often it is not even a matter of technical skill rather, communication, critical thinking, asking questions) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Every day is different&lt;/strong&gt;, with different features, different bugs, different challenges,  leave alone different tech stacks, libraries, and frameworks which change very fast and require us to stay up to date and refresh our skillset &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually many people could find the last one their worst nightmare, but for me, &lt;strong&gt;avoiding boredom and doing something different&lt;/strong&gt;, learning something new all the time makes me feel alive and enjoy my job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/iFkHQLzYA09Zm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/iFkHQLzYA09Zm/giphy.gif" alt="bored"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't know yet how to phrase it in a way that could be attractive to a bunch of 10-12 years old boys and girls, but it is a good start. &lt;/p&gt;

&lt;p&gt;These are my reasons, why do you love coding? Why did you start coding and keep on doing that?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26FLh2XOL18X7oKPu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26FLh2XOL18X7oKPu/giphy.gif" alt="satisfaction"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@goian?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ian Schneider&lt;/a&gt; on &lt;a href="https://unsplash.com/photos/oqStl2L5oxI?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>advice</category>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>React Hooks + Redux: CRUD example with Axios and Rest API</title>
      <author>Tien Nguyen</author>
      <pubDate>Wed, 07 Apr 2021 04:23:42 +0000</pubDate>
      <link>https://dev.to/tienbku/react-hooks-redux-crud-example-with-axios-and-rest-api-525i</link>
      <guid>https://dev.to/tienbku/react-hooks-redux-crud-example-with-axios-and-rest-api-525i</guid>
      <description>&lt;p&gt;In this tutorial, I will show you how to build a React Redux Hooks + Axios example by a CRUD Application to consume Rest API.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/react-hooks-redux-crud/"&gt;https://bezkoder.com/react-hooks-redux-crud/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span id="Overview"&gt;Overview of React Hooks Redux CRUD example&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;We will build a React Redux Tutorial Application with Rest API calls in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;There is a Search bar for finding Tutorials by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are screenshots of our React Redux CRUD Application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pv10bHY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c31pc58v32gck8v21ps6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pv10bHY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c31pc58v32gck8v21ps6.png" alt="react-hooks-redux-crud-example-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve all Tutorials:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5bdHnqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h826sn91cudi03d3xkg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5bdHnqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h826sn91cudi03d3xkg6.png" alt="react-hooks-redux-crud-example-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;Edit&lt;/strong&gt; button to update a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7PCs92XM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02hm379d9k0b1yi75kw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PCs92XM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02hm379d9k0b1yi75kw8.png" alt="react-hooks-redux-crud-example-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this Page, you can:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;change status to &lt;strong&gt;Published&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;delete the item using &lt;strong&gt;Delete&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;update the item details with &lt;strong&gt;Update&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBJB8w1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckqj1j2oz1iegh3pmxko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBJB8w1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckqj1j2oz1iegh3pmxko.png" alt="react-hooks-redux-crud-example-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search Tutorials by title:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gB_GG-oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr7q1nqkgij5fjg5v8mt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gB_GG-oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr7q1nqkgij5fjg5v8mt.png" alt="react-hooks-redux-crud-example-search-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check Redux State with Dev-tool:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MNGWfRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxo1gsp8tk10iacxvanq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MNGWfRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxo1gsp8tk10iacxvanq.png" alt="react-hooks-redux-crud-example-check-redux-state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This React Client consumes the following Web API:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table class="table table-hover  table table-hover" width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can find step by step to build a Server like this in one of these posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-express-sequelize-mysql/"&gt;Express, Sequelize &amp;amp; MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-express-sequelize-postgresql/"&gt;Express, Sequelize &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-express-mongodb-crud-rest-api/"&gt;Express &amp;amp; MongoDb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api"&gt;Spring Boot &amp;amp; MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring Boot &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-spring-boot-mongodb/"&gt;Spring Boot &amp;amp; MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jpa-h2-example/"&gt;Spring Boot &amp;amp; H2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-cassandra-crud/"&gt;Spring Boot &amp;amp; Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-crud-mysql-rest-framework/"&gt;Django &amp;amp; MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-postgresql-crud-rest-framework/"&gt;Django &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-mongodb-crud-rest-framework/"&gt;Django &amp;amp; MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;span id="Component_Diagram"&gt;React Hooks Redux CRUD Component Diagram with Router &amp;amp; Axios&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Now look at the React components that we're gonna implement:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATJP6b69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpm5zhridly1x99r5z7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATJP6b69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpm5zhridly1x99r5z7i.png" alt="react-hooks-redux-crud-example-components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– The &lt;code&gt;App&lt;/code&gt; component is a container with React &lt;code&gt;Router&lt;/code&gt;. It has &lt;code&gt;navbar&lt;/code&gt; that links to routes paths.&lt;/p&gt;

&lt;p&gt;– Three pages that dispatch &lt;strong&gt;&lt;em&gt;actions&lt;/em&gt;&lt;/strong&gt; to &lt;code&gt;Redux Thunk Middleware&lt;/code&gt; which uses &lt;code&gt;TutorialDataService&lt;/code&gt; to call Rest API:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;code&gt;TutorialsList&lt;/code&gt; gets and displays Tutorials.&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;Tutorial&lt;/code&gt; has form for editing Tutorial's details based on &lt;code&gt;:id&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;AddTutorial&lt;/code&gt; has form for submission new Tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;– &lt;code&gt;TutorialDataService&lt;/code&gt; uses &lt;code&gt;axios&lt;/code&gt; to make HTTP requests and receive responses.&lt;/p&gt;

&lt;h2&gt;&lt;span id="React_Redux_API"&gt;React Hooks + Redux with API example&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This diagram shows how Redux elements work in our React Hooks Application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tO8eSj3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vvje4vvurrkfhsyk906.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tO8eSj3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vvje4vvurrkfhsyk906.png" alt="react-hooks-redux-crud-example-redux-store"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're gonna create Redux &lt;code&gt;store&lt;/code&gt; for storing &lt;code&gt;tutorials&lt;/code&gt; data. Other React Components will work with the Store via dispatching an &lt;code&gt;action&lt;/code&gt; or getting value using React-Redux Hooks API.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reducer&lt;/code&gt; will take the action and return new &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;span id="Technology"&gt;Technology&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;React 17/16&lt;/li&gt;
    &lt;li&gt;react-redux 7.2.3&lt;/li&gt;
    &lt;li&gt;redux 4.0.5&lt;/li&gt;
    &lt;li&gt;redux-thunk 2.3.0&lt;/li&gt;
    &lt;li&gt;react-router-dom 5.2.0&lt;/li&gt;
    &lt;li&gt;axios 0.21.1&lt;/li&gt;
    &lt;li&gt;bootstrap 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;span id="Project_Structure"&gt;Project Structure&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Zp9artb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rssb5a0zw6w9ay7rqfn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Zp9artb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rssb5a0zw6w9ay7rqfn2.png" alt="react-hooks-redux-crud-example-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm gonna explain it briefly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; contains main modules: &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-router-dom&lt;/code&gt;, &lt;code&gt;react-redux&lt;/code&gt;, &lt;code&gt;redux&lt;/code&gt;, &lt;code&gt;redux-thunk&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt; &amp;amp; &lt;code&gt;bootstrap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App&lt;/code&gt; is the container that has &lt;code&gt;Router&lt;/code&gt; &amp;amp; navbar.&lt;/li&gt;
&lt;li&gt;There are 3 pages: &lt;code&gt;TutorialsList&lt;/code&gt;, &lt;code&gt;Tutorial&lt;/code&gt;, &lt;code&gt;AddTutorial&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;http-common.js&lt;/strong&gt; initializes axios with HTTP base Url and headers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TutorialService&lt;/code&gt; has methods for sending HTTP requests to the Apis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.env&lt;/strong&gt; configures &lt;em&gt;port&lt;/em&gt; for this React CRUD App.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About Redux elements that we're gonna use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;actions&lt;/strong&gt; folder contains the action creator (&lt;em&gt;tutorials.js&lt;/em&gt; for CRUD operations and searching).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;reducers&lt;/strong&gt; folder contains the reducer (&lt;em&gt;tutorials.js&lt;/em&gt;) which updates the application state corresponding to dispatched action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For step by step and Github, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/react-hooks-redux-crud/"&gt;https://bezkoder.com/react-hooks-redux-crud/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;Security:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-hooks-jwt-auth/"&gt;React Hooks: JWT Authentication (without Redux) example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-hooks-redux-login-registration-example/"&gt;React Hooks + Redux: JWT Authentication example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related Posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-crud-web-api/"&gt;React CRUD example with Axios and Web API (using React Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-hooks-file-upload/"&gt;React Hooks File Upload example with Axios &amp;amp; Progress Bar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-table-example-hooks-crud/"&gt;React Table example: CRUD App | react-table 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serverless with Firebase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-firebase-hooks-crud/"&gt;React Hooks + Firebase Realtime Database: CRUD App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-hooks-firestore/"&gt;React Hooks + Firestore example: CRUD app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fullstack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-crud/"&gt;React + Spring Boot + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-postgresql/"&gt;React + Spring Boot + PostgreSQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-mongodb/"&gt;React + Spring Boot + MongoDB: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mysql/"&gt;React + Node.js + Express + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-redux-mysql-crud/"&gt;React Redux + Node.js + Express + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-postgresql/"&gt;React + Node.js + Express + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mongodb-mern-stack/"&gt;React + Node.js + Express + MongoDB example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-react-hooks/"&gt;React + Django + Rest Framework example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How to configure a Docker + VS Code development environment</title>
      <author>David Rios</author>
      <pubDate>Wed, 07 Apr 2021 04:04:41 +0000</pubDate>
      <link>https://dev.to/davidrios/how-to-configure-a-docker-vs-code-development-environment-3jko</link>
      <guid>https://dev.to/davidrios/how-to-configure-a-docker-vs-code-development-environment-3jko</guid>
      <description>&lt;p&gt;Há uma versão em português brasileiro aqui:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/davidrios" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0sbCa1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yeGDHWTq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/609771/31686671-1563-4d78-afc7-3c3ce31fad0d.jpeg" alt="davidrios image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/davidrios/como-configurar-um-ambiente-de-desenvolvimento-com-docker-vs-code-2pc8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Como configurar um ambiente de desenvolvimento com Docker + VS Code&lt;/h2&gt;
      &lt;h3&gt;David Rios ・ Apr  7 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#braziliandevs&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;After working with Docker for a while on some projects, I arrived at a configuration that works well for me and my colleagues, so I decided to share it in case it's useful to more people.&lt;/p&gt;

&lt;p&gt;Keep in mind it's based on my personal experience, it might not use the best practices or apply to your case. Suggestions on improvements are welcome though!&lt;/p&gt;

&lt;p&gt;I'll show you how to setup a full project from scratch and run it completely isolated within containers, so the environment will (hopefully) be reproducible and run the same, no matter your host OS.&lt;/p&gt;

&lt;p&gt;I use Ubuntu as my daily driver, so this guide will be from that perspective, but you should be able to adapt it to your OS of choice without much trouble. It'll probably work well in Windows using WSL 2.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-project"&gt;The project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#starting-out"&gt;Starting out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-backend-app"&gt;The backend app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-frontend-app"&gt;The frontend app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nginx-proxy"&gt;A simple nginx proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#vscode"&gt;VS Code for the win&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#vscode-backend"&gt;Configuring for the backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vscode-frontend"&gt;Configuring for the frontend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#addendum"&gt;Addendum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-project" class="anchor"&gt;
  &lt;/a&gt;
  The project &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To illustrate all steps, and be as realistic as possible, we'll create a basic web application using the following stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend: &lt;a href="https://www.djangoproject.com/"&gt;Python (Django)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Database: &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Frontend: &lt;a href="https://quasar.dev/"&gt;VueJS (Quasar)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end we'll have a consistent environment for code editing with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code-completion&lt;/li&gt;
&lt;li&gt;Linting&lt;/li&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;li&gt;Well defined editor settings for everyone working on the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stack choice is based on what I have more familiarity, but all the concepts in this guide should apply to any stack you choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements" class="anchor"&gt;
  &lt;/a&gt;
  Requirements &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We need very few things installed locally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; 19+ (a recent version)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.docker.com/compose/install/"&gt;docker-compose&lt;/a&gt; v1.27+&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; 1.5+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these Code extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Remote - Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starting-out" class="anchor"&gt;
  &lt;/a&gt;
  Starting out &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To make it easier for you to follow, I've set up a GitHub repository with all the code at &lt;a href="https://github.com/davidrios/example-docker-project"&gt;https://github.com/davidrios/example-docker-project&lt;/a&gt;. I'll refer to specific commits so you can see the structure along the way.&lt;/p&gt;

&lt;p&gt;We are starting the project from scratch, so the first thing we need is to sort out its structure. This is the one I like to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project root

&lt;ul&gt;
&lt;li&gt;some docker stuff and README&lt;/li&gt;
&lt;li&gt;conf

&lt;ul&gt;
&lt;li&gt;project 1&lt;/li&gt;
&lt;li&gt;project 2&lt;/li&gt;
&lt;li&gt;misc&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;code

&lt;ul&gt;
&lt;li&gt;project 1&lt;/li&gt;
&lt;li&gt;project 2&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next thing we need is to have some basic containers running to bootstrap the projects. We already know we need at least 3 containers from the project description: backend, frontend and database, so we need to create a base &lt;code&gt;docker-compose.yml&lt;/code&gt;. But before that, one of the most useful things is to have a &lt;code&gt;.env&lt;/code&gt; file, so you can have some amount of customization over the containers.&lt;/p&gt;

&lt;p&gt;Let's create the initial &lt;code&gt;.env.template&lt;/code&gt; file, that each user will make a local copy to customize:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOCAL_USER_ID=1000
POSTGRES_PASSWORD=password
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;LOCAL_USER_ID&lt;/code&gt; is used to work around Docker permission issues on Linux (more on that later). You set it with the uid of your local computer user as returned by the command &lt;code&gt;id -u&lt;/code&gt;. You can just ignore it if you are on Mac.&lt;/p&gt;

&lt;p&gt;After creating my local &lt;code&gt;.env&lt;/code&gt; copy, it's time to define the basic &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://github.com/davidrios/example-docker-project/blob/2aac6eb151104b205461d025ca07647c44bc5d36/docker-compose.yml"&gt;https://github.com/davidrios/example-docker-project/blob/2aac6eb151104b205461d025ca07647c44bc5d36/docker-compose.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Things of note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I import the &lt;code&gt;.env&lt;/code&gt; file at lines 3-5, and pass all defined variables as environment vars to all the other
containers. You can see that at lines 10-11, 19-20, etc.&lt;/li&gt;
&lt;li&gt;I'm using Alpine images with major and minor versions specified, as per best practices. You may want or
need to use an Ubuntu/Debian/etc based image, but you should aways choose specific major/minor versions.&lt;/li&gt;
&lt;li&gt;There is a volume defined for the PostgreSQL data, so that is preserved between runs.&lt;/li&gt;
&lt;li&gt;I run all projects I can as a standard (non root) user in the containers, and I like to create volumes
for the home of that user on every container that I expect to log in and execute commands, that way I
can have the shell history and other stuff preserved between rebuilds. That is an optional and personal
preference, you can just remove those volumes. Be aware that, while using those volumes is convenient,
they may have subtle effects on the overall reproducibility of the environment.&lt;/li&gt;
&lt;li&gt;For the backend and frontend, since they don't have any application configured yet, but I need them running
anyway to be able to bootstrap the apps, I just tell them to run a very long &lt;code&gt;sleep&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this time we can navigate to the main project repository and just run:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose up --build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You should see some messages from PostgreSQL about the initialization of the database and the three containers should keep running.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-backend-app" class="anchor"&gt;
  &lt;/a&gt;
  The backend app &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I like to execute the app as a regular user, and to avoid issues of permissions on Linux, that user need to have the same uid as my local computer user, that's the reason for the &lt;code&gt;LOCAL_USER_ID&lt;/code&gt; in the &lt;code&gt;.env&lt;/code&gt; file. To do that we'll add some helper scripts to be used inside the container:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enter.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll add them to a directory &lt;code&gt;conf/backend/scripts&lt;/code&gt;, as decided earlier. These scripts will only be executed on the dev environment, so they'll not be a part of the image.&lt;/p&gt;

&lt;p&gt;We'll also create a &lt;code&gt;Dockerfile&lt;/code&gt; for the container with some needed initial customizations. The compose file will be updated with the new image and mounts for the code and scripts. And the &lt;code&gt;code&lt;/code&gt; directory will also be created and docker-compose will be executed again:&lt;/p&gt;

&lt;p&gt;Check how the project has changed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/04ae1e95ca8dfe752e76a67fce5b9882847f2f8e"&gt;https://github.com/davidrios/example-docker-project/commit/04ae1e95ca8dfe752e76a67fce5b9882847f2f8e&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## *** stop docker-compose ***&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;code
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have the container running and ready to create the Django project. We use the &lt;code&gt;enter.sh&lt;/code&gt; script to enter the container with the &lt;code&gt;venv&lt;/code&gt; already activated and logged with the correct user. Now let's create the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## in another terminal at the root of the project folder:&lt;/span&gt;

&lt;span class="c"&gt;## Create the database:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; postgres postgres-db createdb &lt;span class="nt"&gt;-T&lt;/span&gt; template0 &lt;span class="nt"&gt;-E&lt;/span&gt; utf8 backend

&lt;span class="c"&gt;## Enter the backend container:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose &lt;span class="nb"&gt;exec &lt;/span&gt;backend /scripts/enter.sh

&lt;span class="c"&gt;## Now inside the container:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /code
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-binary&lt;/span&gt; psycopg2 django psycopg2
&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject backend
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;backend

&lt;span class="c"&gt;## Save the requirements:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt

&lt;span class="c"&gt;## *** Edit backend/settings.py to connect to the PostgreSQL db using the password from the environment and the host/dbname/user we already defined ***&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py createsuperuser
&lt;span class="c"&gt;## *** insert desired login information ***&lt;/span&gt;

&lt;span class="c"&gt;## Test the application runs:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver

&lt;span class="c"&gt;## *** Everything seems ok, stop the server and exit the container ***&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the files added, with special attention to the database configuration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/8f47c701e6a3984a32021da360ae0c49a2d68a95#diff-192a1d9e9543969133c5449ace7b1169de815b39d539bc55fc1d168f32eedb7bR76-R85"&gt;https://github.com/davidrios/example-docker-project/commit/8f47c701e6a3984a32021da360ae0c49a2d68a95#diff-192a1d9e9543969133c5449ace7b1169de815b39d539bc55fc1d168f32eedb7bR76-R85&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to set the application to run automatically with the container and to expose the port so we can access with our local browser. The installation of app packages will also be added to the image.&lt;/p&gt;

&lt;p&gt;To be able to run locally on any port we choose and not conflict with other running stuff, we'll add that option to the &lt;code&gt;.env.template&lt;/code&gt; file and the same line to our &lt;code&gt;.env&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APP_PORT=8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and update the docker stuff. Check the diff:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/c9276155e56f1f8c0168bb81902e5e0f22ed0dad"&gt;https://github.com/davidrios/example-docker-project/commit/c9276155e56f1f8c0168bb81902e5e0f22ed0dad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now stop docker-compose and run it again, always with &lt;code&gt;--build&lt;/code&gt;. The application should now be running and accessible at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; (or other port if you changed it).&lt;/p&gt;

&lt;p&gt;This is it for now for the backend. VS Code configuration instructions will follow later in the guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-frontend-app" class="anchor"&gt;
  &lt;/a&gt;
  The frontend app &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one is pretty similar to the backend. We'll create the same three helper scripts, with specific changes for the new environment, and customize the image a bit.&lt;/p&gt;

&lt;p&gt;At this time we'll also add a &lt;code&gt;.dockerignore&lt;/code&gt; file, so that Docker doesn't have to copy useless stuff everytime it has to build an image. That'll speed up the process a lot if you already have a big project.&lt;/p&gt;

&lt;p&gt;Take a look at the changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/bbb2c6180437c8e1ae5b3b0ca2121e78dc1250af"&gt;https://github.com/davidrios/example-docker-project/commit/bbb2c6180437c8e1ae5b3b0ca2121e78dc1250af&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## *** We stop docker-compose and start it again ***&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We bootstrap the Quasar project the same way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose &lt;span class="nb"&gt;exec &lt;/span&gt;frontend /scripts/enter.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn global add @quasar/cli
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /code
&lt;span class="nv"&gt;$ &lt;/span&gt;~/.yarn/bin/quasar create frontend
&lt;span class="c"&gt;## *** choose quasar options ***&lt;/span&gt;
&lt;span class="c"&gt;## Pick at least ESLint because it's used later.&lt;/span&gt;
&lt;span class="c"&gt;## I'll also pick TypeScript to demonstrate the great VS Code support later&lt;/span&gt;
&lt;span class="c"&gt;## And finally choose an ESLint preset you wanna use on your project. I'll stick with standard here&lt;/span&gt;
&lt;span class="c"&gt;## Let Quasar install the packages with yarn and get out of the container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll configure the frontend container to start Quasar in dev mode automatically and export the port so that we can access it.&lt;/p&gt;

&lt;p&gt;Here's the resulting changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/73e3b55df164ea2e1477cb51a8d591299c5f4643"&gt;https://github.com/davidrios/example-docker-project/commit/73e3b55df164ea2e1477cb51a8d591299c5f4643&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that we just moved the export port from the backend to the frontend container, we'll fix that in a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## *** We stop docker-compose and start it again ***&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Quasar app should now be running and accessible at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; (or other port if you changed it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-nginx-proxy" class="anchor"&gt;
  &lt;/a&gt;
  A simple nginx proxy &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To make our lives easier, we'll create a simple but flexible nginx proxy in front of everything. We need to use a custom config file, and for maximum flexibility we'll process the config and interpolate with the env vars before starting the server.&lt;/p&gt;

&lt;p&gt;These are the resulting changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/b07c83199fd8d4b1cd4dfce1e830a19e76b64543"&gt;https://github.com/davidrios/example-docker-project/commit/b07c83199fd8d4b1cd4dfce1e830a19e76b64543&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now access the frontend app at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;, the Django admin at &lt;a href="http://localhost:8000/admin"&gt;http://localhost:8000/admin&lt;/a&gt; and nginx will also proxy all requests to &lt;code&gt;/api*&lt;/code&gt; to the backend app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code-for-the-win" class="anchor"&gt;
  &lt;/a&gt;
  VS Code for the win &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have our whole project well organized and running isolated from our local machine, we need to start coding it. Wouldn't it be awesome if we could have the same consistent and pleasant experience while coding as well? That's when VS Code comes to the rescue!&lt;/p&gt;

&lt;p&gt;We'll use the remote containers extension to run VS Code directly inside the app containers, so it'll have access to the environment exactly as it runs and we can install extensions without affecting our local installation.&lt;/p&gt;

&lt;p&gt;We will be using a directory named &lt;code&gt;code/vscode&lt;/code&gt; to put related stuff, just so it is already available inside the containers because of the &lt;code&gt;/code&lt;/code&gt; mount. You could put it in another directory, but then you would have to setup another mount for each container.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-for-the-backend" class="anchor"&gt;
  &lt;/a&gt;
  Configuring for the backend &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First create the directory &lt;code&gt;code/vscode/backend&lt;/code&gt; and add the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;backend.code-workspace&lt;/code&gt;: Replace backend with the real nome of your project, so it's easier to pick the Code windows apart when navigating.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flake8.ini&lt;/code&gt;: Where we put the linter settings for Python. We'll be using flake8 instead of pylint, since it is much faster and I like it better :).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.devcontainer.json&lt;/code&gt;: Tells Code how to setup the container instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's also necessary to edit the container &lt;code&gt;base.sh&lt;/code&gt; script, so it installs necessary packages after any rebuild and also to start Python in debug mode. As a nice touch we'll also configure the server to autoreload when any file changes using &lt;a href="https://pypi.org/project/watchdog/"&gt;Watchdog&lt;/a&gt;, since the Code debugger extension for Python doesn't suport Django's autoreload. As a bonus, watchdog uses much less CPU than Django's default autoreloader.&lt;/p&gt;

&lt;p&gt;I've gone ahead and added our first test API.&lt;/p&gt;

&lt;p&gt;Check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/33cb5d775b88d8b953ba690c17e1359dd5fa34a5"&gt;https://github.com/davidrios/example-docker-project/commit/33cb5d775b88d8b953ba690c17e1359dd5fa34a5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all we have to do is stop compose and run it again, all should be running and ready. To start working with the code we open a new Code window (&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;) and go to &lt;code&gt;File &amp;gt; Open Folder&lt;/code&gt; and open the &lt;code&gt;&amp;lt;PROJECT&amp;gt;/code/vscode/backend&lt;/code&gt; directory. Right away a notification should appear, you just click the &lt;code&gt;Reopen in Container&lt;/code&gt; button. You can also open the command palette (&lt;code&gt;Ctrl+Shift+P&lt;/code&gt;) and type &lt;code&gt;reopen in container&lt;/code&gt; and pick &lt;code&gt;Remote-Containers: Reopen in container&lt;/code&gt;. Then, it'll show a notification that it's installing the Code server and after a few moments it should open the project, and there will be an indication at the status bar that you are inside the container, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqGnb42w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8a9mwayw50e7f8leqo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqGnb42w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8a9mwayw50e7f8leqo1.png" alt="" title="Project opened"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you will have all editor goodies, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8o4xA3bU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnma2gluz7tsmkg6a6p9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8o4xA3bU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnma2gluz7tsmkg6a6p9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to debug, you just click the gutter to add a breakpoint, or press &lt;code&gt;F9&lt;/code&gt; at the desired line, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPtMIIF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iy71kxn27d8838r74h2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPtMIIF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iy71kxn27d8838r74h2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to the &lt;code&gt;Run&lt;/code&gt; view clicking at the side, and click the little green "play" button. The status bar should turn to orange to indicate the debugger is connected. If you have a breakpoint, like I did here, and navigate to the new API in the browser, you will be greeted with glorious debugging goodness, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S6HEyZxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fppt8xkui449cavm18xx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S6HEyZxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fppt8xkui449cavm18xx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each time you change some file the app will also reload, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VqsShtZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66kmx40xrhsnkhiyyx18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqsShtZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66kmx40xrhsnkhiyyx18.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you need to run any Django administration commands, you can do so easily with the integrated terminal. Just open the menu &lt;code&gt;Terminal &amp;gt; New Terminal&lt;/code&gt; (&lt;code&gt;Ctrl+Shift+&amp;lt;BACKTICK&amp;gt;&lt;/code&gt;), like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EC5LMW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apy8i292493id3w7x254.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EC5LMW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apy8i292493id3w7x254.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find that the terminal did not have the venv activated, just click the &lt;code&gt;trash&lt;/code&gt; icon to kill it and open it up again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-for-the-frontend" class="anchor"&gt;
  &lt;/a&gt;
  Configuring for the frontend &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The configuration here is similar to the above. First create the directory &lt;code&gt;code/vscode/frontend&lt;/code&gt; and add the file &lt;code&gt;.devcontainer.json&lt;/code&gt;. I'm not configuring a project file here because there's no other folder besides the frontend project and to also use the settings files Quasar already creates when initializing the project. You could very well move everything to a project file just like we did with the backend.&lt;/p&gt;

&lt;p&gt;Here're the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/644b7547322d903f7e4b33454b787e5d1d4c6f49"&gt;https://github.com/davidrios/example-docker-project/commit/644b7547322d903f7e4b33454b787e5d1d4c6f49&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don't even need to rerun docker-compose, just open a new Code window, open the directory &lt;code&gt;code/vscode/frontend&lt;/code&gt; and click the &lt;code&gt;Reload in Container&lt;/code&gt; button. After opening the project, click the &lt;code&gt;ESLint&lt;/code&gt; button at the status bar and click to &lt;code&gt;allow&lt;/code&gt; when the dialog appears. No you will have a fully configured editor, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1XRS9Cu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu4cin7flkrlbmaimg74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1XRS9Cu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu4cin7flkrlbmaimg74.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You get even autocomplete for things like Quasar components!&lt;/p&gt;

&lt;p&gt;If you wand to use the quasar-cli to do things like create a component, you just open the inbuilt terminal clicking on menu &lt;code&gt;Terminal &amp;gt; New Terminal&lt;/code&gt; (&lt;code&gt;Ctrl+Shift+&amp;lt;BACKTICK&amp;gt;&lt;/code&gt;), like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LJYaoEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r3aj6tl1zm31y8bddd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LJYaoEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r3aj6tl1zm31y8bddd7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now its time to debug!&lt;/p&gt;

&lt;p&gt;To do that, we create a &lt;code&gt;launch.json&lt;/code&gt; with debug tasks for VS Code. This is not so trivial for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VS Code has two Chrome debuggers, one newer that ships with it and the old one you can install from the marketplace. The problem is the newer is better, but for some reason, and I suspect it has to do with the remote container, it can't launch Chrome instances. The old one can launch instances, but is not so good. So to solve our problems we can use both!&lt;/li&gt;
&lt;li&gt;Since we have a custom port defined in our &lt;code&gt;.env&lt;/code&gt; file, we need some way to pass that to the debug task. Unfortunately the debug extensions runs at the local editor, not the remote one, so they don't have access to env vars. To solve that I added a little prompt when running the task that asks which port the app is running at, with the default from the env template for convenience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The added tasks file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/blob/6e5195fd13d2aea79b1a31c265ddf60808d9a77e/code/frontend/.vscode/launch.json"&gt;https://github.com/davidrios/example-docker-project/blob/6e5195fd13d2aea79b1a31c265ddf60808d9a77e/code/frontend/.vscode/launch.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have three tasks which you will use depending on your browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Attach to Chrome&lt;/code&gt;: This task uses the newer debugger to attach to a running Chrome instance with remote debugging enabled, and you don't need to install anything else. &lt;a href="https://blog.chromium.org/2011/05/remote-debugging-with-chrome-developer.html"&gt;Check here how to run Chrome with remote debugging enabled&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Launch Chrome&lt;/code&gt;: This one launches an instance of Chrome with remote debugging already enabled and using a new profile, so it doesn't affect your personal one. To use this task you need to have the &lt;a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome"&gt;Debugger for Chrome extension installed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Launch Firefox&lt;/code&gt;: And this launches an instance (or attaches to one if running) of Firefox with remote debugging enabled and also using a new profile. To use this task you need to have the &lt;a href="https://marketplace.visualstudio.com/items?itemName=firefox-devtools.vscode-firefox-debug"&gt;Debugger for Firefox extension installed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's one more thing we can do to make our lives better while debugging. The default webpack config doesn't generate detailed sourcemaps, which makes debugging a pain and pretty much impossible to set breakpoints in transpiled files. We fix that by adding &lt;code&gt;devtool: 'eval-source-map'&lt;/code&gt; to its settings.&lt;/p&gt;

&lt;p&gt;Even then, for transpiled files like &lt;code&gt;.vue&lt;/code&gt; files, it generates a lot of variants of the same file with different hash names for each of the intermediate results, which is kind of annoying, so we fix that too by customizing the &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Since this project is in Quasar, we do that the way its supposed to, by editing &lt;code&gt;quasar.conf.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It ends up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidrios/example-docker-project/commit/1208e30bd280179df0780add22430af3a54c6c30"&gt;https://github.com/davidrios/example-docker-project/commit/1208e30bd280179df0780add22430af3a54c6c30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can run the debugger by going to the &lt;code&gt;Run&lt;/code&gt; view, selecting a task and clicking "play":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2BTfJBPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n67820af4t7c7npmz0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2BTfJBPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n67820af4t7c7npmz0x.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try adding some &lt;code&gt;console.log&lt;/code&gt;s and/or setting a breakpoint, running debug mode and using the app, then you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SFFMCDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfbquglbieoj4m8bmdt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SFFMCDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfbquglbieoj4m8bmdt3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#addendum" class="anchor"&gt;
  &lt;/a&gt;
  Addendum &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I'm not a huge fan of doing too much inside the code editor, especially things which are much more flexible to do in the terminal, that's why I don't use the Code Docker extension to manage/run docker-compose for example. I also think it works better that way when you have a project with several containers with different apps, like in this guide.&lt;/p&gt;

&lt;p&gt;Since we are managing the compose flow manually, sometimes VS Code can show you this notification:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00h7z7Tl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5wl8yn6nafoon3m7vo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00h7z7Tl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5wl8yn6nafoon3m7vo6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recommend you to just click &lt;code&gt;Ignore&lt;/code&gt;. If you need to rebuild things, just stop the compose running at the terminal and execute &lt;code&gt;docker-compose up --build&lt;/code&gt; again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are a lot of things to improve and different choices you could make for the various pieces, these are the ones I made and that worked the best for me.&lt;/p&gt;

&lt;p&gt;Do note that this whole configuration is better suited to individuals and small teams, there are other, often mutually-exclusive, requirements for larger teams.&lt;/p&gt;

&lt;p&gt;This is all very development focused, so the container images are not real ones that you can use to deploy, but that is doable with a little more work.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>docker</category>
      <category>webdev</category>
    </item>
    <item>
      <title>#Day17 - Fastest way to format strings in Python</title>
      <author>Rahul Banerjee</author>
      <pubDate>Wed, 07 Apr 2021 03:13:54 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/day17-fastest-way-to-format-strings-in-python-4io7</link>
      <guid>https://dev.to/rahulbanerjee99/day17-fastest-way-to-format-strings-in-python-4io7</guid>
      <description>&lt;p&gt;There are 3 ways to format strings in Python&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the % operator&lt;/li&gt;
&lt;li&gt;Using format()&lt;/li&gt;
&lt;li&gt;Using f strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aYFu25Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617759091908/w7h2m8bJb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aYFu25Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617759091908/w7h2m8bJb.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have three functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;func1&lt;/strong&gt; uses the % operator&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;func2&lt;/strong&gt; uses  format()&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;func3&lt;/strong&gt; uses f strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use the timeit function to measure the time taken by each function&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpIhl1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617759195401/4tfW4XnvL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpIhl1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617759195401/4tfW4XnvL.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We call each function 100 times and calculate the average time taken for the function call. The average time is stored in a list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWqOdPy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617759450337/cW62DYeeY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWqOdPy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617759450337/cW62DYeeY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below are the comparisons of the 3 functions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzB1Km0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617760269541/uPWKvmEh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzB1Km0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617760269541/uPWKvmEh5.png" alt="download.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, f strings are faster as compared to format() and the % operator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ifelse-with-f-strings" class="anchor"&gt;
  &lt;/a&gt;
  if.....else with f strings
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is an &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'even'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;'odd'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is an &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'even'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;'odd'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#aligning-strings" class="anchor"&gt;
  &lt;/a&gt;
  Aligning strings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Left-aligned: {variable :&amp;gt; number}&lt;/li&gt;
&lt;li&gt;Center-aligned: {variable :^ number}&lt;/li&gt;
&lt;li&gt;Right-aligned: {variable :&amp;lt; number}
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"string"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;'''
OUTPUT
              string
  string  
string  
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#round-floating-points" class="anchor"&gt;
  &lt;/a&gt;
  Round floating points
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mf"&gt;20.012345783&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;'''
OUTPUT
20.012
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pad-zeroes" class="anchor"&gt;
  &lt;/a&gt;
  Pad Zeroes
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#10
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#10
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#010
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 0010
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to pad n zeroes to a y digit number, it should be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Move Custom Fields’ Data to Custom Tables</title>
      <author>WP Meta Box Plugin</author>
      <pubDate>Wed, 07 Apr 2021 02:50:07 +0000</pubDate>
      <link>https://dev.to/wpmetabox/how-to-move-custom-fields-data-to-custom-tables-4lg2</link>
      <guid>https://dev.to/wpmetabox/how-to-move-custom-fields-data-to-custom-tables-4lg2</guid>
      <description>&lt;p&gt;As you all may know, custom fields are definitely so powerful and effective in WordPress. However, if your website has too many custom fields' data, your database will be bloated considerably. So, to solve this problem, you should try moving your custom fields' data to a custom table.&lt;/p&gt;

&lt;p&gt;Read till the end to watch our video tutorial.&lt;/p&gt;

&lt;h2&gt;Why You Need to Move Custom Fields' Data to Custom Tables&lt;/h2&gt;

&lt;p&gt;By default, WordPress saves custom fields' values in the &lt;code&gt;wp_postmeta&lt;/code&gt; table in the database, in which each row stores a custom field's data. If you move these data of &lt;a href="https://metabox.io/series/custom-fields"&gt;custom fields&lt;/a&gt; to a custom table, all fields will be saved in&lt;strong&gt; only ONE row.&lt;/strong&gt; Therefore, you can release the burden of your database and improve your website performance dramatically!&lt;/p&gt;

&lt;p&gt;Ok, now we will do it in action:&lt;/p&gt;

&lt;h2&gt;Preparation&lt;/h2&gt;

&lt;p&gt;To move your custom fields' data to a custom table, here are the tools you need:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;
&lt;a href="https://metabox.io/"&gt;Meta Box&lt;/a&gt; core plugin to have a custom fields framework. It empowers you to create custom fields so quickly and easily. Just download it from &lt;a href="https://wordpress.org/plugins/meta-box/"&gt;wordpress.org&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;
&lt;a href="https://metabox.io/plugins/mb-custom-table/"&gt;MB Custom Table&lt;/a&gt; is a premium extension of Meta Box to save custom fields' data in a custom table instead of in term / post / user meta tables like default WordPress.&lt;/li&gt;

&lt;li&gt;
&lt;a href="https://metabox.io/plugins/meta-box-builder/"&gt;Meta Box Builder&lt;/a&gt; is also a premium extension of Meta Box. It gives you a UI to create and manage custom fields right on the backend.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Next, take a look at the custom fields that we're going to move.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But please note that&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You definitely can move all the custom fields' data in a website to an only row. However, saving custom fields' values of all custom post types in one table will make it difficult to manage, categorize, and may cause confusion for you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thus, we're going to move the data of each post type to a separate custom table. This method is a bit more time-consuming, but in a long run, it will be more beneficial. That's because the custom fields' data of different post types are saved in different tables.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here, we already have a post type named &lt;strong&gt;Companies&lt;/strong&gt; with &lt;strong&gt;Company name&lt;/strong&gt;, &lt;strong&gt;Address&lt;/strong&gt;, and &lt;strong&gt;Start day&lt;/strong&gt; custom fields. This is the field group of these fields in Meta Box Builder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6O8quOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rHoumB6.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6O8quOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rHoumB6.png" alt="The field group for the Companies post type in Meta Box Builder plugin" width="1352" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These custom fields are displayed in the &lt;strong&gt;Companies&lt;/strong&gt; post type like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--flrhfc7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WapcPoq.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--flrhfc7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WapcPoq.png" alt="The custom fields are displayed in the Companies post type." width="1333" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you move it, the custom field's data above is still saved in the &lt;code&gt;wp_postmeta&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aORZRBqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ntTFIwh.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aORZRBqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ntTFIwh.png" alt="The custom field's data is still saved in the wp_postmeta table." width="1000" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To move this custom field's data to a custom table, follow these steps:&lt;/p&gt;

&lt;h2&gt;Step 1: Create a Custom Table&lt;/h2&gt;

&lt;p&gt;Now, go to &lt;strong&gt;Meta Box&lt;/strong&gt; &amp;gt; &lt;strong&gt;Custom Fields&lt;/strong&gt; and edit the field group I mentioned above:&lt;/p&gt;

&lt;p&gt;Go to the &lt;strong&gt;Settings&lt;/strong&gt; tab and just choose &lt;strong&gt;Save data in a custom table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYSXlKe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3VOC2zd.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYSXlKe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3VOC2zd.png" alt="Create a custom table in field group settings" width="1347" height="904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, some options will appear, and then you have to choose &lt;strong&gt;Create table automatically &lt;/strong&gt;and enter the name of the custom table. I'll name it &lt;code&gt;wp_custom_company&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-VqQTfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K0nd0vy.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-VqQTfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K0nd0vy.png" alt="Enter the name of the new custom table" width="1387" height="999"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, you have just created a custom table automatically with Meta Box Builder. And now, in your database, you will see a new table named &lt;code&gt;wp_custom_company&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ps3SoA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zolJh3a.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ps3SoA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zolJh3a.png" alt="A new custom table shows up in the database of the WordPress website" width="1342" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From now on, the new data will be automatically saved in the custom table whenever you update. How about the old data of this post type? It is still in the &lt;code&gt;wp_postmeta&lt;/code&gt; table, so we need to use some code to move it to the new &lt;code&gt;wp_custom_company&lt;/code&gt; table.&lt;/p&gt;

&lt;h2&gt;Step 2: Move the Data to the New Custom Table&lt;/h2&gt;

&lt;p&gt;Here is the script to copy the custom fields' data in the &lt;code&gt;wp_postmeta&lt;/code&gt; table and paste it to the &lt;code&gt;wp_custom_company&lt;/code&gt;. Then, it will delete the old data in the &lt;code&gt;wp_postmeta&lt;/code&gt; table. Just insert this code into the &lt;code&gt;functions.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This script runs on the backend and only the admin can run it.&lt;/p&gt;

&lt;pre class="wp-block-preformatted"&gt;function estar_child_data_company() {

if ( empty( $_GET['move-data-companies'] ) || ! current_user_can( 'manage_options' ) ) {

return;

}

$paged = isset( $_GET['estar-child-paged'] ) ? $_GET['scf-paged'] : 0;

$paged += 1;

$url = add_query_arg( 'estar-child-paged', $paged, 'http://yourwebsite/wp-admin/?move-data-companies=1' );

$posts = estar_child_admin_records_get_companies( $paged );

if ( empty( $posts ) ) {

die( 'Done' );

}

foreach ( $posts as $post ) {

estar_child_move_data_company( $post );

}

echo "

&amp;lt;script&amp;gt;

setTimeout( () =&amp;gt; {

window.location.href = '$url';

}, 3000 );

&amp;lt;/script&amp;gt;

";

die;

}

add_action( 'admin_init', 'estar_child_data_company' );&lt;/pre&gt;

&lt;p&gt;In this code:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;
&lt;code&gt;estar&lt;/code&gt; is the prefix name of the theme I'm using (eStar). You can download this free theme &lt;a href="https://gretathemes.com/wordpress-themes/estar/" rel="follow"&gt;here&lt;/a&gt;;&lt;/li&gt;

&lt;li&gt;
&lt;code&gt;http://yourwebsite/wp-admin/?move-data-companies=1&lt;/code&gt;: replace it with your own website URL;&lt;/li&gt;

&lt;li&gt;We will run the script when the URL has the &lt;code&gt;move-data-companies=1&lt;/code&gt; parameter. It means when you click the URL &lt;em&gt;http://yourwebsite.com/wp-admin/?move-data-companies=1&lt;/em&gt;, it will automatically move the data.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;After that, we need to write these 2 functions:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;
&lt;code&gt;star_child_admin_records_get_companies()&lt;/code&gt;: to take the list of posts&lt;/li&gt;

&lt;li&gt;
&lt;code&gt;estar_child_move_data_company()&lt;/code&gt;: to move data for each post&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Now, put this code to your &lt;code&gt;functions.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre class="wp-block-preformatted"&gt;function estar_child_admin_records_get_companies( $paged = 1 ) {

$args = [

'post_type'      =&amp;gt; 'companies',

'posts_per_page' =&amp;gt; 100,

'paged'          =&amp;gt; $paged,

'fields'         =&amp;gt; 'ids',

'orderby'        =&amp;gt; 'ID',

];

$query = new WP_Query( $args );

return $query-&amp;gt;posts;

}

function estar_child_move_data_company( $post_id ) {

global $wpdb;

echo 'Migrating company ', $post_id, '&amp;lt;br&amp;gt;';

$data = [];

$data['ID'] = $post_id;

$data['company_name'] = get_post_meta( $post_id, 'company_name', true );

$data['address'] = get_post_meta( $post_id, 'address', true );

$data['start_day'] = get_post_meta( $post_id, 'start_day', true );

$data = array_filter( $data ); 

if ( $data ) {

$wpdb-&amp;gt;insert( 'wp_custom_company', $data );

}

$meta_key_array = [

'company_name',

'address',

'start_day',

];

$meta_key = "'" . implode( "','", $meta_key_array ) . "'";

$wpdb-&amp;gt;query( $wpdb-&amp;gt;prepare( "

DELETE FROM wpqq_postmeta

WHERE post_id = %d AND meta_key IN ( $meta_key )",

$post_id

) );

}&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;td&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/td&gt;

&lt;td&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;'company_name', 'address', 'start_day'&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The ID of 3 custom fields in the &lt;strong&gt;Companies&lt;/strong&gt; post type&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;$wpdb-&amp;gt;insert( 'wp_custom_company', $data ) &lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The function to insert data to the &lt;code&gt;wp_custom_company&lt;/code&gt; table we created in the step 1&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;$wpdb-&amp;gt;query( $wpdb-&amp;gt;prepare( "DELETE FROM wpqq_postmetaWHERE post_id = %d AND meta_key IN ( $meta_key )",$post_id&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;This code is to delete the old data in the &lt;code&gt;wp_postmeta&lt;/code&gt; table&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;'Companies'&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The slug of the post type&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;'posts_per_page' =&amp;gt; 100&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The number of the posts that is handled when we run the script. To run the script at best, we should handle only 100 posts each time. After each time, the script will be automatically refreshed and handle the next 100 posts.&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;After adding code, you can go to this URL: &lt;em&gt;http://yourwebsite/wp-admin/?move-data-companies=1&lt;/em&gt; to enable moving the custom fields' data to the custom table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh6lO7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M0JQhXM.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh6lO7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M0JQhXM.png" alt="Enable moving the custom fields' data to the custom table with Meta Box plugin." width="856" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running the script, I go to the &lt;code&gt;wp_custom_company&lt;/code&gt; custom table to check. And here is the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hP9XUJAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JkBQPEK.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hP9XUJAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JkBQPEK.png" alt="The old data of custom fields is on the new custom table" width="1074" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the custom fields' data of the &lt;strong&gt;Companies&lt;/strong&gt; post type is now moved to the &lt;code&gt;wp_custom_company&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb08iLN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tRqgKhA.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb08iLN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tRqgKhA.png" alt="The custom fields' data of the Companies post type is moved to the custom table." width="723" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also is deleted from the &lt;code&gt;wp_postmeta&lt;/code&gt; table at the same time.&lt;/p&gt;

&lt;p&gt;Ok, we've done it!&lt;/p&gt;

&lt;h2&gt;Video Tutorial&lt;/h2&gt;

&lt;p&gt;This video tutorial will help you move custom fields' data to custom tables more easily. And don't forget to like and subscribe to our channel to have more video.&lt;/p&gt;

&lt;p&gt;https://youtu.be/JaEvtYa4Hcg&lt;/p&gt;

&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;This work means a lot if you have a website with lots of data inputted into the fields. So, take advantage of this special feature from Meta Box now to make your site faster and more performative.&lt;/p&gt;

&lt;p&gt;As I said at the beginning, you may think that following my method (move the data of the custom fields of each post type at one time) may take a bit more than moving custom fields' data for all post types at once. However, we highly recommend it because that will be more beneficial in the long run and help you manage your data more easily.&lt;/p&gt;

&lt;p&gt;Good luck and have a "field" day!&lt;/p&gt;

</description>
      <category>wordpress</category>
    </item>
    <item>
      <title>What is Currying in JavaScript? </title>
      <author>Rahul</author>
      <pubDate>Wed, 07 Apr 2021 02:29:13 +0000</pubDate>
      <link>https://dev.to/rahxuls/what-is-currying-in-javascript-4i2l</link>
      <guid>https://dev.to/rahxuls/what-is-currying-in-javascript-4i2l</guid>
      <description>&lt;p&gt;Currying is a technique of evaluating function with multiple arguments, into sequence of function with single argument. &lt;/p&gt;

&lt;p&gt;Currying is a transformation of function that translates a function from callable as &lt;code&gt;f(a, b, c)&lt;/code&gt; into callable as f(a)(b)(c).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="p"&gt;};&lt;/span&gt; 
    &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;curriedSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="nx"&gt;curriedSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

 &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-is-it-useful" class="anchor"&gt;
  &lt;/a&gt;
  Why is it Useful?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Currying helps you to avoid passing the same variable again and again.&lt;/li&gt;
&lt;li&gt;Little pieces can be configured and reused  with ease. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-to-convert-an-existing-function-to-curried-version" class="anchor"&gt;
  &lt;/a&gt;
  How to convert an existing function to curried version?
&lt;/h4&gt;

&lt;p&gt;The curry function does not exist in native JavaScript. But libraries like lodash makes it easier to convert a function to curried one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;curried&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curried&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curried&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;🚀Thanks For Reading | Happy Coding🏗&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>XPATH for Scraping</title>
      <author>Halcolo</author>
      <pubDate>Wed, 07 Apr 2021 01:49:02 +0000</pubDate>
      <link>https://dev.to/halcolo/xpath-for-scraping-1h5g</link>
      <guid>https://dev.to/halcolo/xpath-for-scraping-1h5g</guid>
      <description>&lt;p&gt;Xpath use path syntax to search parts of a XML document but as well allows you to find data identifying matches in an HTML file, if I compares with something similar are regular expressions but in trees later you will understand, in this case we will learn how to search data in a Webpage or scrap any web page with this syntax from scratch.&lt;/p&gt;

&lt;p&gt;Before starts, is important you learn something about web scraping, you can't scrap all web pages because all web pages have a rules (Legal reules for bots), almost all web pages need be scraped, as you imagine Google is a king of scraping, web scrapin is only one of the tools they use in their big algorithm. &lt;/p&gt;

&lt;p&gt;Now ¿How can I recognice which rules have a webpages?&lt;br&gt;
All web pages need to have a &lt;code&gt;robots.txt&lt;/code&gt; file in their root directory, if you don't believe me try search after any URL the &lt;code&gt;robots.txt&lt;/code&gt;, some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/robots.txt"&gt;https://www.google.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/robots.txt"&gt;https://unsplash.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/robots.txt"&gt;https://stackoverflow.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/robots.txt"&gt;https://www.facebook.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically the &lt;code&gt;robots.txt&lt;/code&gt; provides some rules to any bot which parts of your page are accesible and which will be disabled.&lt;/p&gt;

&lt;p&gt;If you want learn more about how can you create a robots.txt you can see it in this &lt;a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt?hl=fr"&gt;Google tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  NOTE
&lt;/h2&gt;

&lt;p&gt;This tutorial search teach you or gives you a simple guide of basic web scraping with a global syntax no matter if you codes in python, javascript or any programing language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-lets-start" class="anchor"&gt;
  &lt;/a&gt;
  Now, let's start!
&lt;/h2&gt;

&lt;p&gt;In your browser is possible use Xpath inside the console using this expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This expression allows you to start Xpath and start a HTML tree search, in this case we will be do inside the Web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quotes.toscrape.com/"&gt;Quotes to scrape Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is possible to see the tree structure of this page by viewing its HTML source code in the &lt;code&gt;F12&lt;/code&gt; browser console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJqZ0mJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paur86e0b97c1qmkcpz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJqZ0mJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paur86e0b97c1qmkcpz0.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With the following it will return the information of the div with &lt;code&gt;class = "container"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calling the tree in this way will be limited to bringing the information it finds and if we want to reach the branch that is &lt;code&gt;class =" quote "&lt;/code&gt; we could arrive in this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/div/div/div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it will be unreliable and on many occasions it is very difficult to reach some of the children of the trees.&lt;/p&gt;

&lt;p&gt;It is for this reason that we will begin to create filters to make sure what we are looking for what we want, we will start filtering by classes.&lt;/p&gt;

&lt;p&gt;It is possible to filter the classes of each of the HTML tags that exist in the web page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[class = "container"]'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you compare the expression with the previous ones you will notice that it has many changes, initially &lt;code&gt;//&lt;/code&gt; that allows us skip all elements to be able to reach a specific tag in HTML in this case a &lt;code&gt;div&lt;/code&gt; later with the squares brackets &lt;code&gt;[]&lt;/code&gt; we can select a property of the tag either a class, an id, a src or any other by referencing it with an &lt;code&gt;@&lt;/code&gt; e.g. &lt;code&gt;[@class]&lt;/code&gt;, &lt;code&gt;[@href]&lt;/code&gt;, &lt;code&gt;[@id]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[@class="quote"]'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous script we can identify that we arrive in a few words at the div tags with class quote, now we reduce it to a few words but we can be even more specific.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[@class="quote"]/..'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The previous expression allows to bring the parent of a tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/self::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/.'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two expressions allow to bring the current node, the &lt;code&gt;.&lt;/code&gt; is only syntactic sugar or a way to simplify the &lt;code&gt;self::&amp;lt;tag&amp;gt;&lt;/code&gt; this expresion refers to the axes later i will talk about it &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wildcards" class="anchor"&gt;
  &lt;/a&gt;
  Wildcards
&lt;/h2&gt;

&lt;p&gt;There are some wildcards that we can use to indicate that we want any object in which we know its position but we do not know.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With an asterisk (*) we can bring nodes of which we know their name but their position, in this case we will bring the HTML tag but without their nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the double slash as in the previous example, we are going to tell Xpath that we want all the nodes and it will bring us an array with the requested nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//span[@class="text"]/@*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example it is possible to see something new at the end of the line, the first thing is that it is possible to call attributes outside the '[]' and with * you can bring all the attributes that have the text class spans.&lt;/p&gt;

&lt;p&gt;Other examples can be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body//div/@*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now compare the following expressions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//span[@class="text"and@itemprop="text"] / node ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//span[@class="text" and @itemprop="text"]/*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; is not going to help us if the node we are consulting does not have child nodes, however the expression &lt;code&gt;node ()&lt;/code&gt; identifies not only the child nodes that the queried node has but also everything that is not nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and starts-with(., "A")] / text()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.map&lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and contains(., "Ro")]/text ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.map&lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# The ends-with and matches expression only works with Xpath versions 2.0 of XPATH,&lt;/span&gt;
&lt;span class="c"&gt;# current browsers only support up to version 1.1&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and ends-with(., "t")]/text ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.map&lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and matches(., "A.*n")] / text ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; map &lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#axes" class="anchor"&gt;
  &lt;/a&gt;
  AXES
&lt;/h2&gt;

&lt;p&gt;The axes allow the nodes to be obtained in all directions, from the child that has this node, the ansesters that follow, even bringing both the ansesters as the node itself and the parents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/self::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/child::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/descendant::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/descendant-or-self::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#challenge" class="anchor"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;From the WebPage &lt;a href="http://books.toscrape.com/"&gt;http://books.toscrape.com/&lt;/a&gt; obtain the titles and preciousness of each book, and within one of the books obtain the categories and their descriptions and if it is in stock, in the next chapter we will obtain the information with a script of all these books with Python. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-links" class="anchor"&gt;
  &lt;/a&gt;
  Other links.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://devhints.io/xpath"&gt;https://devhints.io/xpath&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
