<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Lessons from a student hackathon</title>
      <author>Jelle Smeets</author>
      <pubDate>Tue, 28 Sep 2021 13:25:27 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/lessons-from-a-student-hackathon-1kdb</link>
      <guid>https://dev.to/smeetsmeister/lessons-from-a-student-hackathon-1kdb</guid>
      <description>&lt;p&gt;I'd like to take you back to the second year of my degree in Computer science. All the way back to 2014 to be precise. A hackathon was organized where we could travel to Belgium and do a 2-day hackathon for a company, win a cash prize and stay the night in a hostel.&lt;/p&gt;

&lt;p&gt;This sounded like an exciting adventure! Getting to code with some of my classmates in a more competitive setting sounded like a nice change from the usual school projects. And having the evening to explore a nice town (and beers) in Belgium, sign me up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hackathon"&gt;
  &lt;/a&gt;
  The Hackathon
&lt;/h2&gt;

&lt;p&gt;In hindsight, the hackathon project was nothing special. It was for a company that thought it invented a new social media that could get big. The goal was to build a Chrome extension where users could share the page they were on. Calling their APIs and scraping the page you were on.&lt;/p&gt;

&lt;p&gt;Our group consisted of a few students who already had some experience outside of the course. Some had some summer jobs or internships as web developers. By the end of day 1, our group was miles ahead of the other groups.&lt;/p&gt;

&lt;p&gt;The evening was spent on nice food, awesome Belgian beers, and we had a long and fun night exploring the local bars. Which is honestly why we were a bit tired and hungover for day 2. Halfway through the day, we saw that the other groups were never going to catch up with us, and we decided to take it easy for the rest of the day.&lt;/p&gt;

&lt;p&gt;When the final demos were done we thought this one is in the pocket! No other team was near as far as we were. But when the results came out, they announced we had the nicest solution but they did not like the fact we took such a slow pace on the second day. Instead, they gave the prize to the runner-ups, who did not have such a nice product but instead worked their asses off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEt_Jd8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvannlfbcppj3qqka1j4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEt_Jd8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvannlfbcppj3qqka1j4.jpg" alt="loser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I respect the decision made, we felt screwed. Instead of a ‚Ç¨400 cash prize, we got a bottle of beer. We quickly thanked them for organizing and had a long and grumpy ride home to The Netherlands.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-aftermath"&gt;
  &lt;/a&gt;
  The aftermath
&lt;/h2&gt;

&lt;p&gt;A few weeks later we got an email from the company that organized the hackathon. They were still interested in our solution and asked if we could mail the source code. We felt used, apparently, it was not good enough to win, but they still wanted to use it.&lt;/p&gt;

&lt;p&gt;After some discussions in our group, we decided to make a bold statement. We emailed them back, that for ‚Ç¨300 we could send them the source code. Feeling almost as scared as taking your driver's license exam we sent the email.&lt;/p&gt;

&lt;p&gt;Honestly, we did not expect to get it. As we sort of guessed, we got a very angry email telling us we were entitled students that still had a lot to learn in the "grown-up world".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;p&gt;Our group talked to some teachers. Expecting to get in trouble. After all, they made the arrangements for the hackathon. Some agreed some did not really care, but one reaction really stood out and stuck with me.&lt;/p&gt;

&lt;p&gt;A teacher told us, you guys know what you were worth, they were probably pissed off you caught them in their game. Companies often take advantage of students/interns and I think it's a really good thing you stood up for yourselves. They probably just wanted to use what you coded and thought they could get away with getting it for (almost) free.&lt;/p&gt;

&lt;p&gt;The lesson this incident thought me is to always know your worth. Don't be afraid to stand your ground, but that can also mean you don't get what you want. But at least you won't feel taken advantage of.&lt;/p&gt;

&lt;p&gt;If you are interested in other lessons I learned, check the &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;4 lessons I learned as a&lt;/a&gt; starting scrum master.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
      <category>lessons</category>
    </item>
    <item>
      <title>Introducing ngx-react : üÖ∞Ô∏èAngular  + ‚öõÔ∏èReact interoperability without pain.</title>
      <author>Olivier Guimbal</author>
      <pubDate>Tue, 28 Sep 2021 13:16:45 +0000</pubDate>
      <link>https://dev.to/oguimbal/introducing-ngx-react-angular-react-interoperability-without-pain-23k</link>
      <guid>https://dev.to/oguimbal/introducing-ngx-react-angular-react-interoperability-without-pain-23k</guid>
      <description>&lt;p&gt;Have you ever wanted to use React components in an Angular application ? Or to start migrating an Angular app to React component-by-component ? Or simply use both at the same time ?&lt;/p&gt;

&lt;p&gt;I developped &lt;a href="https://github.com/oguimbal/ngx-react"&gt;ngx-react&lt;/a&gt; which allows you to do just that with ease.&lt;/p&gt;

&lt;p&gt;It enables you to use your Angular components in React, and vice versa, quite transparently, and without boilerplate.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  üìê Setup
&lt;/h1&gt;

&lt;p&gt;Just declare a bridge, somewhere in your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgxReactBridge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NgxReactBridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// bridge options:&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/** Add a global react provider here */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#use-in"&gt;
  &lt;/a&gt;
  Use üÖ∞Ô∏è in ‚öõÔ∏è
&lt;/h1&gt;

&lt;p&gt;Then, to use an Angular component in React, just import it like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AsReact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toReact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyAngularCommonent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// use it üëâ  &amp;lt;AsReact prop={whatever} /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The generated ‚öõÔ∏è component will take as props all the &lt;code&gt;@Input()&lt;/code&gt;s of your üÖ∞Ô∏è component, and all the &lt;code&gt;@Output()&lt;/code&gt;s, mapped to functions. (i.e. &lt;code&gt;@Output() onThing: EventEmitter&amp;lt;string&amp;gt;&lt;/code&gt; will be mapped to prop &lt;code&gt;onThing: (event: string) =&amp;gt; void&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-in"&gt;
  &lt;/a&gt;
  Use ‚öõÔ∏è in üÖ∞Ô∏è
&lt;/h1&gt;

&lt;p&gt;To use a React component in Angular, you'll have to do a tiny bit more work... for instance if you have a React component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;dataChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then magically convert it to its Angular counterpart like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-react-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent_Angular&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;reactBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toAngular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// a bit of extra work: You will have to map the properties yourself &lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;dataChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(the Angular compiler doesnt allow to build dynamic components... so we have to declare them statically)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h1&gt;

&lt;p&gt;Just inject Angular services in React like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyAngularService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;I'll write more about this when I have more time üëâ But please share your thought if you have some :) &lt;/p&gt;

&lt;p&gt;More details on  &lt;a href="https://github.com/oguimbal/ngx-react"&gt;the ngx-react repository&lt;/a&gt; &lt;/p&gt;

</description>
      <category>angular</category>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>ü•ÅCloud 66 Prepress - Build and deploy Jamstack site on your own cloud!</title>
      <author>Kasia</author>
      <pubDate>Tue, 28 Sep 2021 13:07:06 +0000</pubDate>
      <link>https://dev.to/kasia/cloud-66-prepress-build-and-deploy-jamstack-site-on-your-own-cloud-3nhc</link>
      <guid>https://dev.to/kasia/cloud-66-prepress-build-and-deploy-jamstack-site-on-your-own-cloud-3nhc</guid>
      <description>&lt;p&gt;We are happy to announce a release of a new product at Cloud 66, called &lt;a href="https://www.cloud66.com/frameworks/jamstack"&gt;Cloud 66 Prepress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prepress allows you to benefit from the power of the Jamstack without being locked into a proprietary infrastructure solution. Your application is hosted on your own object storage via your own cloud account. We took the advantage of Cloud 66's existing DevOps tools and features, extending them to static site builders. &lt;/p&gt;

&lt;p&gt;Prepress generates static web sites (Jamstack) based on the automatically detected framework with full logs and deploys them to your own cloud. If you have a website, blog, or shop built with Jekyll, Gatsby, or Hugo, you can use Prepress to deploy it to your own AWS account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#without-prepress"&gt;
  &lt;/a&gt;
  Without Prepress
&lt;/h3&gt;

&lt;p&gt;Without Prepress, to host a static site built with Jekyll, Hugo or Gatsby you need to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the static assets by running the tool.&lt;/li&gt;
&lt;li&gt;Create an AWS S3 (or similar) object store and upload the assets to it.&lt;/li&gt;
&lt;li&gt;Configure the storage and the files for public (or private) access.&lt;/li&gt;
&lt;li&gt;Setup conventions like redirecting &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;/index.html&lt;/code&gt; on the storage.&lt;/li&gt;
&lt;li&gt;Configure a CDN like Cloudfront to point to your site if you need SSL (HTTPS) support.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With every iteration of your site, you then need to upload the new files, set the access rights and invalidate the CDN caches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-prepress"&gt;
  &lt;/a&gt;
  With Prepress
&lt;/h3&gt;

&lt;p&gt;Prepress takes care of all of this for you, and much more, in 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect your git repo&lt;/li&gt;
&lt;li&gt;Connect your AWS account&lt;/li&gt;
&lt;li&gt;Press Go!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today's release is our first step towards making hosting static sites developer-friendly, but we are far from done. We have a packed calendar of Prepress feature releases including supporting more cloud providers, more frameworks, and adding many of the other DevOps features that static sites benefit from most.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#watch-2-mins-demo-on-cloud-66-prepress"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=GQ7VRXZrEzo"&gt;Watch 2 mins demo on Cloud 66 Prepress&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>jamstack</category>
      <category>aws</category>
      <category>gatsby</category>
      <category>cloud66</category>
    </item>
    <item>
      <title>Using Jaeger for your microservices</title>
      <author>Ankit Anand ‚ú®</author>
      <pubDate>Tue, 28 Sep 2021 13:02:08 +0000</pubDate>
      <link>https://dev.to/signoz/using-jaeger-for-your-microservices-4goi</link>
      <guid>https://dev.to/signoz/using-jaeger-for-your-microservices-4goi</guid>
      <description>&lt;p&gt;Jaeger is a popular open-source tool used for distributed tracing in a microservice architecture. In a microservice architecture, a user request or transaction can travel across hundreds of services before serving what a user wants. Distributed tracing helps to track the performance of a transaction across multiple services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jaeger is a fantastic open-source tool for distributed tracing. But for effective resolution of production issues, engineering teams need both metrics and traces. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, a full-stack open-source tool, provides a unified UI for both metrics and traces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we deep dive into how Jaeger accomplishes distributed tracing for microservices-based architecture, let's take a short detour to understand distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jaeger"&gt;
  &lt;/a&gt;
  What is Jaeger?
&lt;/h2&gt;

&lt;p&gt;Jaeger is a distributed tracing tool meant to monitor and troubleshoot transactions in a microservice architecture. It was developed by teams at Uber and then open-sourced in 2015. It was accepted as a Cloud Native Computing Foundation (CNCF) Incubation project in 2017 and was promoted to graduate status in 2019.&lt;/p&gt;

&lt;p&gt;With Jaeger you can generate and visualize trace data, which gives you an idea of how your requests are performing across services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-jaeger-track-transactions-across-a-microservice-architecture"&gt;
  &lt;/a&gt;
  How does Jaeger track transactions across a microservice architecture?
&lt;/h2&gt;

&lt;p&gt;There are four key components to a distributed tracing tool. These components together capture transactions into spans and then correlate those spans to form a trace.&lt;/p&gt;

&lt;p&gt;The four key components are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;li&gt;Data pipeline&lt;/li&gt;
&lt;li&gt;Backend Storage&lt;/li&gt;
&lt;li&gt;Web UI/Visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" alt="Jaeger architecture"&gt;&lt;/a&gt;Jaeger architecture (Source: Jaeger Website)&lt;/p&gt;

&lt;p&gt;Let us see in detail what these components are and how these components come together to monitor a microservice architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumentation"&gt;
  &lt;/a&gt;
  Instrumentation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What is instrumentation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instrumentation is the process of generating telemetry data(logs, metrics, and traces) from your application code. It is essentially writing code that enables your application code to emit telemetry data, which can be used later to investigate issues.&lt;/p&gt;

&lt;p&gt;Most distributed tracing tools offer clients libraries, agents, and SDKs to instrument application code. Jaeger's client libraries for instrumentation are based on &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;OpenTracing was an open-source project aimed at providing vendor-neutral APIs and instrumentation for distributed tracing. It later got merged into &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;. Jaeger has official client libraries in the following languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a service is instrumented, it generates spans for incoming transactions and attaches trace context to outgoing transactions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-pipeline"&gt;
  &lt;/a&gt;
  Data pipeline
&lt;/h3&gt;

&lt;p&gt;Once the trace data is collected with the help of client libraries, it can be directly sent to the storage backends for storage and visualization. But it's a good practice to have a tracing pipeline for data buffering as the application scales. The pipeline enables receiving data in multiple formats, manipulation, batching, indexing, and queueing.&lt;/p&gt;

&lt;p&gt;Jaeger provides Jaeger collectors, as seen in the architecture diagram. The collectors validate traces, index them and perform any transformation before storing the trace data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-storage"&gt;
  &lt;/a&gt;
  Backend Storage
&lt;/h3&gt;

&lt;p&gt;Jaeger ships with simple in-memory storage for testing setups. Jaeger supports two popular open-source NoSQL databases as trace storage backends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-uivisualization"&gt;
  &lt;/a&gt;
  Web UI/Visualization
&lt;/h3&gt;

&lt;p&gt;Jaeger's UI is basic but comprehensive when it comes to distributed tracing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI showing services and corresponding traces"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" alt="Jaeger UI showing spans"&gt;&lt;/a&gt;Jaeger's UI showing spans for selected traces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-of-using-jaeger"&gt;
  &lt;/a&gt;
  Challenges of using Jaeger
&lt;/h2&gt;

&lt;p&gt;Jaeger is a preferred choice when it comes to distributed tracing. But engineering teams need more than traces to resolve issues quickly. They need access to both metrics and traces. Metrics such as response times, error rates, request rates, and CPU usage are equally important to understand application performance.&lt;/p&gt;

&lt;p&gt;A few key challenges of using Jaeger as a distributed tracing tool are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only provides trace data. You will have to use another tool for metrics and log management.&lt;/li&gt;
&lt;li&gt;Databases supported by Jaeger need active maintenance.&lt;/li&gt;
&lt;li&gt;Jaeger's web UI is limited with basic visualizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a fast-moving engineering team, you need dashboards that can drive quick insights and resolution. And that's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture. It is a great alternative to Jaeger for distributed tracing in microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signoz-a-jaeger-alternative-for-microservices"&gt;
  &lt;/a&gt;
  SigNoz - a Jaeger alternative for microservices
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of Jaeger. SigNoz is built to support &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt; natively. OpenTelemetry is becoming the world standard to generate and maintain telemetry data(Logs, metrics, and traces).&lt;/p&gt;

&lt;p&gt;SigNoz can be used as a distributed tracing tool for a microservice architecture. &lt;/p&gt;

&lt;p&gt;SigNoz also provides users flexibility in terms of data storage.You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz. Both are industry-proven and highly scalable databases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing"&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitorring</category>
      <category>microservices</category>
      <category>jaeger</category>
    </item>
    <item>
      <title>Picking your tech stack - Canonic vs Strapi</title>
      <author>Arjun</author>
      <pubDate>Tue, 28 Sep 2021 13:01:09 +0000</pubDate>
      <link>https://dev.to/canonic/picking-your-tech-stack-canonic-vs-strapi-1b44</link>
      <guid>https://dev.to/canonic/picking-your-tech-stack-canonic-vs-strapi-1b44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Canonic and Strapi are often compared as direct competitors. However, the two are quite different in terms of intended usage &amp;amp; audience. This article aims to highlight these differences from an unbiased perspective and help &lt;em&gt;you choose&lt;/em&gt; the perfect tool for &lt;em&gt;your particular use case.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woklS0Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ffwvjhir6dw6t4z6o0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woklS0Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ffwvjhir6dw6t4z6o0.jpg" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strapi positions itself as a developer first open-source headless CMS platform; essentially trying to make content management &amp;amp; subsequent development faster and easier. Canonic, on the other hand, positions itself as a low-code backend development platform trying to take care of all your backend requirements in a single place. The two platforms are, therefore, positioned differently which should give you a clear indication of the requirement each platform is trying to fulfil.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pre-requisites"&gt;
  &lt;/a&gt;
  Pre Requisites
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#strapi-requires-certain-softwares-to-be-preinstalled"&gt;
  &lt;/a&gt;
  Strapi requires certain softwares to be pre-installed.
&lt;/h3&gt;

&lt;p&gt;Strapi requires three softwares to be pre-installed on your computer before you can use the platform. These are Node.js, Npm/Yarn and a database (SQLite, PostgreSQL, MySQL, etc). As Strapi is "developer-first", these softwares do have a certain learning curve to them (if you're not a developer) on top of the minimal learning curve of the platform itself. However, the well maintained Docs section or¬†&lt;a href="https://www.youtube.com/watch?v=yH6cQRRWNFI"&gt;these video tutorials&lt;/a&gt;¬†can help you get started in no time.&lt;/p&gt;

&lt;p&gt;Post the installation of the pre-requisites, you can get your Strapi Dashboard up and running!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TLGNdiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im9uktqlxi1w6jsal01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TLGNdiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im9uktqlxi1w6jsal01.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-requires-no-prerequisites"&gt;
  &lt;/a&gt;
  Canonic requires no pre-requisites.
&lt;/h3&gt;

&lt;p&gt;Canonic does not have any pre-requisites. Since¬†&lt;strong&gt;Canonic is a web app&lt;/strong&gt;, it can be accessed through any internet browser, removing the need to switch between applications. Everything created on the platform remains on the platform itself; therefore making it a complete backend development tool. &lt;/p&gt;

&lt;p&gt;The only learning curve here is of the platform itself which can be navigated through by reading the documentation or completing the onboarding. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3j6YWxoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgzsxvo4sbx61b3ew9r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3j6YWxoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgzsxvo4sbx61b3ew9r0.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Canonic dashboard.&lt;/p&gt;

&lt;p&gt;For anyone without substantial development experience, Strapi might be a little overwhelming to get started with, in comparison to Canonic. However, if you are a fully-fledged developer, there is a good chance that you already have the Strapi pre-requisites installed on your computer and can get your project up &amp;amp; running in no time. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hosting-amp-security"&gt;
  &lt;/a&gt;
  Hosting &amp;amp; Security
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#strapi-projects-are-selfhosted"&gt;
  &lt;/a&gt;
  Strapi projects are self-hosted.
&lt;/h3&gt;

&lt;p&gt;Strapi projects are self-hosted which means that the data is hosted on your computer or your server(s). They do have a Cloud Server functionality coming soon; the dates of which haven't yet been released. &lt;br&gt;
Due to the projects being self-hosted, there lies a hidden pre-requisite to use Strapi in terms of DevOps / deployment experience as well as the knowledge of hosting your server. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-projects-are-serverless-backends"&gt;
  &lt;/a&gt;
  Canonic projects are serverless backends.
&lt;/h3&gt;

&lt;p&gt;Canonic, on the other hand, is a cloud-based platform with a server-less architecture. The projects are serverless backends securely hosted on the AWS platform and your data is securely saved on your database; reducing the risk of losing data and allowing you to scale without worrying about the stability (in case of higher traffic or other such cases). &lt;br&gt;
There is no hidden requirement of DevOps experience to use Canonic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#platform"&gt;
  &lt;/a&gt;
  Platform
&lt;/h2&gt;

&lt;p&gt;Both platforms utilise graphical interfaces. However, due to the differences in product orientation, the way data is represented varies immensely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi-uses-a-listbased-view-to-make-content-management-faster"&gt;
  &lt;/a&gt;
  Strapi uses a list-based view to make content management faster.
&lt;/h3&gt;

&lt;p&gt;Strapi uses a list-based view to show the CMS collection types (essentially folders or elements of your database). This is helpful while maintaining a large number of entries as Strapi is more focused on content management as a platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxivuMbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvgyqssogdza4bu2uzo4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxivuMbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvgyqssogdza4bu2uzo4.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-uses-a-graphical-nodebased-representation-for-your-database"&gt;
  &lt;/a&gt;
  Canonic uses a graphical node-based representation for your database.
&lt;/h3&gt;

&lt;p&gt;Canonic, on the other hand, differs completely. It uses a graph-like view to help see your database structure more clearly. With each table having separate nodes for fields, one can see the entire data structure in a single glance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8wGP_-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz31vqrl808bzgronkef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8wGP_-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz31vqrl808bzgronkef.png" alt="5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, a database with many fields of varying field types becomes faster to identify on Canonic as it is inherently a visual interface. The same can become a little difficult on Strapi.&lt;/p&gt;

&lt;p&gt;An instance of this is to see what fields in a table are of the "linked" type in a database. Visual interfaces can afford signifiers, which in this case, Canonic provides with the help of a dotted line to signify a linked table. Therefore, time to locate specific fields is reduced on Canonic's visual interface while the same can become a little tedious on Strapi. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0f4rOov4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7p113mya2prxp956u9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f4rOov4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7p113mya2prxp956u9z.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linked table types (or Relational Fields on Strapi).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MrNt5McX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0zaz1bsvskiet8rowdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MrNt5McX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0zaz1bsvskiet8rowdy.png" alt="7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linked field types on Canonic on the graph-view use a dotted line and show what table the field is linked to. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  APIs
&lt;/h2&gt;

&lt;p&gt;Both platforms offer auto-generated CRUD APIs with the added functionality of adding custom-coded business logic and creating your own APIs. However, here is where a major difference lies between both platforms. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi-uses-a-plugin-to-view-apis-and-is-editable-through-your-code-editor"&gt;
  &lt;/a&gt;
  Strapi uses a plugin to view APIs and is editable through your code editor.
&lt;/h3&gt;

&lt;p&gt;Strapi provides you with a list of APIs by using a plugin built into the platform called Swagger. Since Strapi is developer-first, any modification/creation of APIs has to be done via your code editor. To aid this process, Strapi autogenerates folders inside your preferred code editor where you can meddle around with the APIs. &lt;/p&gt;

&lt;p&gt;The APIs documented on Swagger show up like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xwolBM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymhnhmxhhqbyilavzj2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xwolBM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymhnhmxhhqbyilavzj2q.png" alt="8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API List on Swagger.&lt;/p&gt;

&lt;p&gt;The APIs are then incorporated inside your code editor, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8AoTC8c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8sr8b6tsongdrrdzwdv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AoTC8c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8sr8b6tsongdrrdzwdv.png" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strapi autogenerates folders directly inside your code editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-allows-you-to-createmodify-apis-all-in-one-place"&gt;
  &lt;/a&gt;
  Canonic allows you to create/modify APIs all in one place.
&lt;/h3&gt;

&lt;p&gt;Canonic works a little differently. Even though the platform has an &lt;a href="https://canonic.dev/features/sdk?utm_campaign=canonicvsstrapi"&gt;SDK&lt;/a&gt; to integrate your project directly into your code editor, the true power of the platform lies in the platform itself. Canonic is essentially a one-stop platform for all backend requirements. Your database, CMS, APIs and documentation exists in one place: on the Canonic web app.&lt;/p&gt;

&lt;p&gt;Each API and subsequent trigger/webhook is seen as an endpoint, again in a similar node-like structure. This makes it easy to see webhooks and APIs in logic blocks. However, this preference can be quite subjective. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZJfOByj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbdugfmy7b8mopn1drrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZJfOByj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbdugfmy7b8mopn1drrs.png" alt="10"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The documentation for the APIs exist on the platform itself, as shown below in the screenshot: &lt;/p&gt;

&lt;p&gt;Another point to highlight is that Canonic allows you to create complex workflows straight from the platform itself which you would otherwise have to write in code on Strapi or other headless CMS platforms. &lt;/p&gt;

&lt;p&gt;Therefore, the difference between the platforms also lies in the requirement of DevOps experience. While Strapi requires you to build out your APIs inside your code editor, Canonic allows you to do the same on the platform itself along with the added functionality of creating complex workflows and triggers; all on a visual interface. Custom business logic has to be written in code for both platforms. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2Az0ir9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nokdofr2sn5bdj6cg93m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2Az0ir9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nokdofr2sn5bdj6cg93m.png" alt="11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;Both platforms feature a free forever plan along with several paid options. However, because of the difference in functionality and what each platform has to offer, there are differences in pricing options. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi-is-an-opensource-platform-and-has-a-free-forever-plan"&gt;
  &lt;/a&gt;
  Strapi is an open-source platform and has a "free forever" plan.
&lt;/h3&gt;

&lt;p&gt;Strapi's free forever plan allows you to have a self-hosted Strapi project with unlimited CMS entries and API Calls with 3 default roles. The paid plans offer features to scale up your project with more custom roles and support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7XuBprC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj77rn6ff9cv0wokeyrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7XuBprC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj77rn6ff9cv0wokeyrk.png" alt="12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-features-a-freemium-plan"&gt;
  &lt;/a&gt;
  Canonic features a freemium plan.
&lt;/h3&gt;

&lt;p&gt;Canonic's free plan allows you to create 3 projects with one additional collaborator and 5000 requests a day. Paid pricing plans allow more API calls and CMS entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oV4DPOU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufhhrb1psnzu2sxxmiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oV4DPOU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufhhrb1psnzu2sxxmiq.png" alt="13"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Based on the points above, it becomes evident that Canonic and Strapi are quite different in terms of positioning and what they're striving to do.&lt;/p&gt;

&lt;p&gt;If you are a developer with knowledge about backend systems and DevOps, Strapi integrates into your workflow more easily. It sits inside your code editor; leaving you to dabble between your Strapi CMS and frontend framework straight from your code editor. &lt;/p&gt;

&lt;p&gt;With Canonic, your entire backend system is in one single place complete with your database, CMS, APIs and documentation. This can be created regardless of development experience, making it a better choice for people who lack the knowledge or resources required to create a backend. While Canonic also allows you to use SDKs and incorporate your project with your frontend framework, the true power of the platform lies in the relative ease and rapid speed with which you can make a backend on the Canonic web app.&lt;/p&gt;

&lt;p&gt;The next major point of differentiation is hosting. Strapi allows you to self-host your project which means that the data is only with you (your server) and not on any other place on the internet. Canonic, on the other hand, hosts your backend for you and you can even select the region of deployment. Therefore, API response time is faster and the risk of losing your data becomes next to impossible. A serverless backend also removes the hindrance of unstable systems as you scale up your backend, accommodating higher API calls and CMS entries.&lt;/p&gt;

&lt;p&gt;Finally, the preference of Strapi over Canonic or vice-versa largely depends on your specific use case. If you are looking for a developer-first content management tool, look no further than Strapi. However, if you're looking for a fully-fledged low-code backend development tool, regardless of your development experience, Canonic might be a better fit for you.&lt;/p&gt;

&lt;p&gt;I hope this clarifies some of the confusion surrounding the similarity &amp;amp; differences between the two platforms. Let us know which one would you prefer and why in the comments below. Godspeed to your backends and you!&lt;/p&gt;




</description>
      <category>beginners</category>
      <category>backend</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What are NFTs and why Cryptourism.io is in the field?</title>
      <author>Cryptourism.io</author>
      <pubDate>Tue, 28 Sep 2021 12:55:05 +0000</pubDate>
      <link>https://dev.to/cryptourism/what-are-nfts-and-why-cryptourism-io-is-in-the-field-1g9f</link>
      <guid>https://dev.to/cryptourism/what-are-nfts-and-why-cryptourism-io-is-in-the-field-1g9f</guid>
      <description>&lt;p&gt;Cryptourism.io would like to welcome everyone to the new World of NFTs.&lt;br&gt;
We proudly created our first NFT that will be redeemable for a 3 nights stay in our property from June 31st 2022. It is a unique art of work with a unique serial number impossible to duplicate. The Cryptourism.io NFTs are part of a collection with real world value where you can exchange it from free nights stay, drinks, food and other gifts.&lt;/p&gt;

&lt;p&gt;Visit our full article at Medium &lt;a href="https://medium.com/@cryptourism/what-are-nfts-and-why-cryptourism-io-is-in-the-field-570fb77a1349"&gt;https://medium.com/@cryptourism/what-are-nfts-and-why-cryptourism-io-is-in-the-field-570fb77a1349&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nft</category>
      <category>art</category>
      <category>cryptourism</category>
      <category>ctr</category>
    </item>
    <item>
      <title>DevSecOps notes!</title>
      <author>Bour Abdelhadi</author>
      <pubDate>Tue, 28 Sep 2021 12:31:20 +0000</pubDate>
      <link>https://dev.to/bscript/devsecops-notes-490j</link>
      <guid>https://dev.to/bscript/devsecops-notes-490j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#devsecops-notes"&gt;
  &lt;/a&gt;
  DevSecOps notes!
&lt;/h2&gt;

&lt;p&gt;I spent the last three months reading the &lt;a href="https://www.oreilly.com/library/view/agile-application-security/9781491938836/"&gt;Agile Application Security book,&lt;/a&gt; book, which helped to learn more about how to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add security practices to each stage of the existing &lt;em&gt;SDLC&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Integrate security with planning, requirements, design, and at the code level.&lt;/li&gt;
&lt;li&gt;Implement regulatory compliance in an agile or &lt;em&gt;DevOps&lt;/em&gt; environment.&lt;/li&gt;
&lt;li&gt;Build an effective security program through a culture of empathy, openness, transparency, and collaboration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The software development area is changing every day, and it keeps accelerating. Therefore, The security pioneers should also &lt;em&gt;change&lt;/em&gt; the way how to operate.&lt;/p&gt;

&lt;p&gt;Integrating security in each stage of your existing development lifecycle requires a good plan and a well-documented study on your current environment setup.&lt;/p&gt;

&lt;p&gt;Most organizations face a slowdown issue when it comes to executing security tasks in the &lt;em&gt;SDLC workflow&lt;/em&gt;, and the main problem is the absence of &lt;em&gt;Automation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt; will play a key role in enabling application security to sustain the speed of &lt;em&gt;DevOps&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-devsecops"&gt;
  &lt;/a&gt;
  What is DevSecOps?
&lt;/h2&gt;

&lt;p&gt;Before I say anything, I'd like to mention that &lt;em&gt;DevSecOps&lt;/em&gt; is not a &lt;em&gt;one-person&lt;/em&gt; job; What you see on &lt;a href="https://linkedin.com/"&gt;LinkedIn&lt;/a&gt; and other job listing websites is titles, nothing more than.&lt;/p&gt;

&lt;p&gt;DevSecOps is a &lt;em&gt;culture&lt;/em&gt; or a process where the whole team (Development and IT operations) works &lt;em&gt;collaboratively&lt;/em&gt; to build, test, and release software in a more agile, &lt;em&gt;secure&lt;/em&gt;, and iterative manner than the traditional software development process.&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;em&gt;DevSecOps&lt;/em&gt; means integrating &lt;em&gt;security&lt;/em&gt; into every stage of the software development lifecycle. Some people refer to it as &lt;strong&gt;&lt;em&gt;shift-left&lt;/em&gt;&lt;/strong&gt;, which suggests moving critical testing practices earlier in the &lt;em&gt;SDLC&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;This is a mainly DevSecOps flow chart. On this basis, we can think that the most prominent feature of DevSecOps to SDL is &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asEhHK1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmdddilhru34oi25dx4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asEhHK1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmdddilhru34oi25dx4a.png" alt="DevOps Approach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before moving further with &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, we should divide the testing part into two sections:&lt;/p&gt;

&lt;p&gt;1- &lt;strong&gt;&lt;em&gt;White-box&lt;/em&gt;&lt;/strong&gt; is the practice of testing the code running behind the scene. This kind of testing is typically executed in Static Application Security Testing (SAST), including analyzers and linters in the IDE. Scanning the codebase we write is not enough; nowadays, 80-90% of a software project is third-party code in the form of libraries and packages. Thus we need Software Composition Analysis (SCA) to detect software licenses, deprecated dependencies, and known vulnerabilities.&lt;/p&gt;

&lt;p&gt;2- &lt;strong&gt;&lt;em&gt;Black-box&lt;/em&gt;&lt;/strong&gt; is another way of testing the application while it's &lt;strong&gt;&lt;em&gt;running&lt;/em&gt;&lt;/strong&gt;; it's also known as Dynamic Analysis security testing (DAST). Black box analysis occurs in real-time, finding security issues that an attacker could exploit while the application is running in the production server.&lt;/p&gt;

&lt;p&gt;The most common issue we face as security engineers is a large number of the &lt;strong&gt;&lt;em&gt;false positive rate&lt;/em&gt;&lt;/strong&gt;, which we'd like to reduce by using both &lt;em&gt;black-box&lt;/em&gt; and &lt;em&gt;white-box&lt;/em&gt; test techniques. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#integrate-security-tools-in-your-build-pipeline"&gt;
  &lt;/a&gt;
  Integrate Security tools in your build pipeline
&lt;/h2&gt;

&lt;p&gt;If you'd like to integrate SAST/SCA/DAST/ or RASP tools, all you need to do is to choose a suitable CI/CD tool such as &lt;a href="https://docs.gitlab.com/ee/ci/"&gt;GitLab CI/CD&lt;/a&gt;, &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; or anything else.&lt;/p&gt;

&lt;p&gt;Integrating those security tools is not enough to ensure that we have everything in place. The most challenging job is to review the tool's results and automate that process as well.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;"It's much more useful to think of security as being a vector to follow rather than a point to be reached. Vectors have size and direction, and you should think about the direction you want to go in pursuit of security and how fast you'd like to chase it. However it's path you will continue to walk forever."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/bohr/"&gt;@Bour Abdelhadi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
    </item>
    <item>
      <title>Luos 2.0 is released to the world</title>
      <author>Emanuel Allely</author>
      <pubDate>Tue, 28 Sep 2021 12:20:26 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/luos-2-0-is-released-to-the-world-4go9</link>
      <guid>https://dev.to/emanuel_allely/luos-2-0-is-released-to-the-world-4go9</guid>
      <description>&lt;p&gt;üéâ The whole team is proud to announce the v2.0.0 &lt;strong&gt;release&lt;/strong&gt; of Luos with even more crucial features for &lt;strong&gt;embedded&lt;/strong&gt; developers such as Profiles to simplify user API, Packages to simplify portability, Bootloader, Gate discovering, Pyluos shell, Selftest üÜï&lt;/p&gt;

&lt;p&gt;‚öôÔ∏è Luos is the new way to think, create, maintain and evolve embedded systems. It's an &lt;strong&gt;open-source&lt;/strong&gt; and real-time orchestrator for distributed architectures to easily design, test and deploy embedded applications, like &lt;strong&gt;Tesla&lt;/strong&gt;, &lt;strong&gt;SpaceX&lt;/strong&gt; or &lt;strong&gt;Dyson&lt;/strong&gt; do. ü§ñ&lt;/p&gt;

&lt;p&gt;Discover Luos üëâ &lt;a href="https://docs.luos.io"&gt;https://docs.luos.io&lt;/a&gt; and feel free to contact us to discuss your project üöÄ&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>opensource</category>
      <category>luos</category>
      <category>release</category>
    </item>
    <item>
      <title>DRY Way to Manage Subscriptions in Angular Components</title>
      <author>Marko Stanimiroviƒá</author>
      <pubDate>Tue, 28 Sep 2021 12:10:26 +0000</pubDate>
      <link>https://dev.to/this-is-angular/dry-way-to-manage-subscriptions-in-angular-components-256j</link>
      <guid>https://dev.to/this-is-angular/dry-way-to-manage-subscriptions-in-angular-components-256j</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/eOpewngf68w"&gt;Tim Swaan&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article explains how to manage subscriptions in Angular components without repeating the same teardown logic in each component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-ways"&gt;
  &lt;/a&gt;
  Common Ways
&lt;/h2&gt;

&lt;p&gt;There are two common ways to manage RxJS subscriptions in Angular components to prevent memory leaks:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-subscription"&gt;
  &lt;/a&gt;
  Using Subscription
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./interval.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IntervalComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// initialize `Subscription` object&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// add all subscriptions to it&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`== &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ==`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`=== &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ===`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// unsubscribe from all added subscriptions&lt;/span&gt;
    &lt;span class="c1"&gt;// when component is destroyed&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-destroy-subject"&gt;
  &lt;/a&gt;
  Using Destroy Subject
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./interval.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IntervalComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// initialize destroy subject&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;destroySubject$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`== &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ==`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;// unsubscribe when destroy subject emits an event&lt;/span&gt;
        &lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroySubject$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`=== &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ===`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroySubject$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emit destroy event when component is destroyed&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroySubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both solutions have the same drawback: We have to initialize the additional property, and add teardown logic to the &lt;code&gt;ngOnDestroy&lt;/code&gt; method. However, there is a better way to manage subscriptions in Angular components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;We can put the teardown logic in a single place by creating &lt;code&gt;Destroy&lt;/code&gt; class that extends the &lt;code&gt;Observable&lt;/code&gt; class and implements the &lt;code&gt;OnDestroy&lt;/code&gt; interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Destroy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// initialize destroy subject&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;destroySubject$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ReplaySubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emit destroy event to all subscribers when destroy subject emits&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroySubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emit destroy event when component that injects&lt;/span&gt;
    &lt;span class="c1"&gt;// `Destroy` provider is destroyed&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroySubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroySubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can provide &lt;code&gt;Destroy&lt;/code&gt; at the component level and inject it through the constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// provide `Destroy` at the component level&lt;/span&gt;
  &lt;span class="na"&gt;viewProviders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IntervalComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// inject it through the constructor&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`== &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ==`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;// unsubscribe when `destroy$` Observable emits an event&lt;/span&gt;
        &lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a provider is provided at the component level, it will be tied to the component lifecycle which allows us to use the &lt;code&gt;ngOnDestroy&lt;/code&gt; lifecycle method within it. Therefore, the &lt;code&gt;ngOnDestroy&lt;/code&gt; method of the &lt;code&gt;Destroy&lt;/code&gt; provider will be called when the &lt;code&gt;IntervalComponent&lt;/code&gt; is destroyed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In general, manual (un)subscriptions in Angular components should be avoided. If you need to perform a side effect at the component level, you can do so using the &lt;a href="https://ngrx.io/guide/component-store"&gt;&lt;code&gt;@ngrx/component-store&lt;/code&gt;&lt;/a&gt; effects, and let &lt;code&gt;ComponentStore&lt;/code&gt; take care to prevent memory leaks. However, if you prefer to manage the side effects in the components, consider using the &lt;code&gt;Destroy&lt;/code&gt; provider to avoid repeating the same teardown logic in each component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#peer-reviewers"&gt;
  &lt;/a&gt;
  Peer Reviewers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tim_deschryver"&gt;Tim Deschryver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/LayZeeDK"&gt;Lars Gyrup Brink Nielsen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>rxjs</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Do you need a Automata Library ?</title>
      <author>ZigRazor</author>
      <pubDate>Tue, 28 Sep 2021 11:42:54 +0000</pubDate>
      <link>https://dev.to/zigrazor/do-you-need-a-automata-library-1i6m</link>
      <guid>https://dev.to/zigrazor/do-you-need-a-automata-library-1i6m</guid>
      <description>&lt;p&gt;In this day i see that there is no implementation of an Automata Library in &lt;strong&gt;C++&lt;/strong&gt;.&lt;br&gt;
I think it can be useful for the community start a new open-source project for this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-automaton"&gt;
  &lt;/a&gt;
  What is an Automaton?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;is a relatively self-operating machine, or control mechanism designed to automatically follow a properations, or respond to predetermined instructions. ( &lt;a href="https://en.wikipedia.org/wiki/Automaton"&gt;Wikipedia&lt;/a&gt; ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-automata-theory"&gt;
  &lt;/a&gt;
  What is the Automata Theory?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3J_IYPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywie65p4kcw1ncadjrov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3J_IYPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywie65p4kcw1ncadjrov.png" alt="Classes of Automata"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Automata theory is the study of abstract machines and automata, as well as the computational problems that can be solved using them. ( &lt;a href="https://en.wikipedia.org/wiki/Automata_theory"&gt;Wikipedia&lt;/a&gt; )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-an-automata-library"&gt;
  &lt;/a&gt;
  Why an Automata Library?
&lt;/h2&gt;

&lt;p&gt;There are so much reason to develop an automata library, but the most important is the capability of study and solve computational problem that can be solved with an &lt;strong&gt;Automaton&lt;/strong&gt;. For Example there are a lot of study on &lt;strong&gt;Formal Languages Theory&lt;/strong&gt; that use the Automata.&lt;br&gt;
Moreover Automata find a major role in &lt;strong&gt;theory of computation&lt;/strong&gt;, &lt;strong&gt;compiler construction&lt;/strong&gt;, &lt;strong&gt;artificial intelligence&lt;/strong&gt;, &lt;strong&gt;parsing&lt;/strong&gt; and &lt;strong&gt;formal verification&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-c"&gt;
  &lt;/a&gt;
  Why C++?
&lt;/h2&gt;

&lt;p&gt;I thought about &lt;em&gt;C++&lt;/em&gt; for performance reasons. With large automata the performance of other languages ‚Äã‚Äãcan be a bottleneck, so &lt;em&gt;C++&lt;/em&gt; can be a solution to this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;So do we need an &lt;strong&gt;Automata Library&lt;/strong&gt;? Maybe we do or maybe we don't but either way please let me know if you are interested in this project? I look forward to reading your comments.&lt;/p&gt;

&lt;p&gt;Thank you so much for reading.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>cpp</category>
      <category>opensource</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to use the JavaScript += operator?</title>
      <author>hrishikesh1990</author>
      <pubDate>Tue, 28 Sep 2021 11:33:24 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-the-javascript-operator-1fjh</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-the-javascript-operator-1fjh</guid>
      <description>&lt;p&gt;In this tutorial, we look at how to use the JavaScript += operator. We explain its use-case and break down the code to allow further learning.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-javascript-"&gt;
  &lt;/a&gt;
  Table of Contents - JavaScript +=
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-does-mean-in-javascript"&gt;What does += mean in JavaScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax-code-amp-explanation"&gt;Syntax, Code &amp;amp; Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-javascript-"&gt;Closing thoughts - JavaScript +=&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-does-mean-in-javascript"&gt;
  &lt;/a&gt;
  What does += mean in JavaScript?
&lt;/h2&gt;

&lt;p&gt;The JavaScript += operator takes the values from the right of the operator and adds it to the variable on the left. This is a very concise method to add two values and assign the result to a variable hence it is called the addition assignment operator.&lt;/p&gt;

&lt;p&gt;This operator is not only used to add numerical values but can also be used to concatenate strings together. Essentially it replaces the variable = a + b syntax with a += b.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax-code-amp-explanation"&gt;
  &lt;/a&gt;
  Syntax, Code &amp;amp; Explanation:
&lt;/h2&gt;

&lt;p&gt;The syntax of the assignment operator is quite straightforward and does not require any prerequisites.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you are still confused, I shall break it down even further. This method is just a shorter way of writing the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are again taking the value on the right (y) and adding &amp;amp; assigning it to the value on the left (x). The assignment operator does the same in a more concise method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-using-javascript-"&gt;
  &lt;/a&gt;
  Code using JavaScript +=:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Code using JavaScript +=&lt;/span&gt;
&lt;span class="c1"&gt;//On int values&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;//On strings&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code snippet is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the values of ‚Äòy‚Äô &amp;amp; ‚Äòb‚Äô have been added to the ‚Äòx‚Äô &amp;amp; ‚Äòa‚Äô respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-javascript-"&gt;
  &lt;/a&gt;
  Closing thoughts - JavaScript +=:
&lt;/h2&gt;

&lt;p&gt;Using the JavaScript += operator would help increase code readability, and such minor changes would help while working with a group of senior developers.&lt;/p&gt;

&lt;p&gt;Once you have familiarized yourself with the addition assignment operator (+=) I would recommend practicing the other assignment operators. There are seven in total ( =, +=, -=, &lt;em&gt;=, /=, %=, *&lt;/em&gt;= ), and mastering them all would help you go a long way.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why I can't wait for the :has() pseudo-class in CSS</title>
      <author>Charanjit Chana</author>
      <pubDate>Tue, 28 Sep 2021 11:19:11 +0000</pubDate>
      <link>https://dev.to/cchana/why-i-can-t-wait-for-the-has-pseudo-class-in-css-5een</link>
      <guid>https://dev.to/cchana/why-i-can-t-wait-for-the-has-pseudo-class-in-css-5een</guid>
      <description>&lt;p&gt;This past week I had a great idea for a tiny PWA that would only use JavaScript to make sure it worked offline and nothing more. In the future, I could make use of localStorage to remember preferences, but beyond that there would be no need at all.&lt;/p&gt;

&lt;p&gt;I finally carved out some time after a few days mulling over the idea and was determined to make it work with the &lt;code&gt;:has()&lt;/code&gt; pseudo-class but it turns out that browser support is non-existent! I've seen it talked about for at least a year, maybe more so had assumed it would be safe to use.&lt;/p&gt;

&lt;p&gt;I came to the realisation yesterday that I should give up on the CSS-only approach, for now. I can revisit once &lt;a href="https://caniuse.com/css-has"&gt;browser support&lt;/a&gt; starts ramping up and strip out any JavaScript that's no longer required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-cant-wait-for-has-to-come-to-css"&gt;
  &lt;/a&gt;
  Why I can't wait for :has() to come to CSS
&lt;/h2&gt;

&lt;p&gt;The reason I can't wait for the &lt;code&gt;:has()&lt;/code&gt; pseudo-class is that it's effectively a parent selector for CSS. I've been working professionally with CSS since 2005 and it's something I've wanted for the past 16 years at least. In the days before heavy JavaScript pages where things were just progressively enhanced, adding classes dynamically as you created the HTML was easy enough ‚Äì even if it meant more logic than was ideal.&lt;/p&gt;

&lt;p&gt;Then came along jQuery with its &lt;code&gt;.parent()&lt;/code&gt; function that meant we could progressively enhance the page rather than having to fetch from the server every time. In reality, this meant twice the logic in some cases. Once for the canonical server-side rendered pages and another for how it should be handled in JavaScript.&lt;/p&gt;

&lt;p&gt;When we finally get our hands on &lt;code&gt;:has()&lt;/code&gt;, no longer will we need helper classes or will we need to specify which item is 'active' at a higher level than the developer wants it to be.&lt;/p&gt;

&lt;p&gt;Here's an example of some HTML and where our classes are required right now. We have a menu where a sub-item is selected which needs to be highlighted, but I'd also like to highlight the parent item it belongs too but that also means adding a class:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#" class="active"&amp;gt;Item 2&amp;lt;/a&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#" class="active"&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
             &amp;lt;/ul&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once we get &lt;code&gt;:has()&lt;/code&gt; in CSS though, our HTML changes a little and the parent no longer needs an explicit class to show that it's active:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 2&amp;lt;/a&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#" class="active"&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
             &amp;lt;/ul&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Item 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With just some CSS, we can now do the following to determine that the 'parent' has a child that meets the criteria:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;li:has(.active) &amp;gt; a {
    font-weight: bold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It really would be that simple, now the parent of an element with the class "active" is targeted with its direct descendent styled.&lt;/p&gt;

&lt;p&gt;I would personally prefer 'contains' or 'parent-of' instead of has for the pseudo-class name but I won't complain too much! This is yet another huge step in the right direction.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
