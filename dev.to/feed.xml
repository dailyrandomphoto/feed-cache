<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Apache Camel🦒: How to write First Route.</title>
      <author>ROHAN KADAM</author>
      <pubDate>Tue, 21 Dec 2021 04:07:10 +0000</pubDate>
      <link>https://dev.to/rohan2596/apache-camel-how-to-write-first-route-1cp</link>
      <guid>https://dev.to/rohan2596/apache-camel-how-to-write-first-route-1cp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#apache-camel"&gt;
  &lt;/a&gt;
  Apache Camel
&lt;/h2&gt;

&lt;p&gt;Hello Its Rohan Kadam😊,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-apache-camel"&gt;
  &lt;/a&gt;
  What is Apache Camel🦒?
&lt;/h3&gt;

&lt;p&gt;Apache Camel ™ is a versatile open-source integration framework based on known &lt;a href="https://camel.apache.org/components/latest/eips/enterprise-integration-patterns.html"&gt;Enterprise Integration Patterns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Camel empowers you to define routing and mediation rules in a variety of domain-specific languages (&lt;a href="https://camel.apache.org/manual/latest/dsl.html"&gt;DSL&lt;/a&gt;, such as Java, XML, Groovy, Kotlin, and YAML). This means you get smart completion of routing rules in your IDE, whether in a Java or XML editor.&lt;/p&gt;

&lt;p&gt;Apache Camel uses &lt;a href="https://camel.apache.org/manual/latest/uris.html"&gt;URIs&lt;/a&gt; to work directly with any kind of transport or messaging models such as &lt;a href="https://camel.apache.org/components/latest/http-component.html"&gt;HTTP&lt;/a&gt;, &lt;a href="https://camel.apache.org/components/latest/activemq-component.html"&gt;ActiveMQ&lt;/a&gt;, &lt;a href="https://camel.apache.org/components/latest/jms-component.html"&gt;JMS&lt;/a&gt;, JBI, SCA, &lt;a href="https://camel.apache.org/components/latest/mina-component.html"&gt;MINA&lt;/a&gt; or &lt;a href="https://camel.apache.org/components/latest/cxf-component.html"&gt;CXF&lt;/a&gt;, as well as pluggable &lt;a href="https://camel.apache.org/manual/latest/component.html"&gt;Components&lt;/a&gt; and &lt;a href="https://camel.apache.org/manual/latest/data-format.html"&gt;Data Format&lt;/a&gt; options. Apache Camel is a small library with minimal &lt;a href="https://camel.apache.org/manual/latest/what-are-the-dependencies.html"&gt;dependencies&lt;/a&gt; for easy embedding in any Java application. Apache Camel lets you work with the same &lt;a href="https://camel.apache.org/manual/latest/exchange.html"&gt;API&lt;/a&gt; regardless of which kind of transport is used — so learn the API once and you can interact with all the &lt;a href="https://camel.apache.org/components/latest/index.html"&gt;Components&lt;/a&gt; provided out-of-box.&lt;br&gt;
&lt;a href="https://camel.apache.org/"&gt;&lt;strong&gt;Apache Camel&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwo_fxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2A1JaCfnLsL3IZ0Q-gFRCt6A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwo_fxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2A1JaCfnLsL3IZ0Q-gFRCt6A.png" alt="Apache Camel: How to write First Route" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-spring-boot-project-using-spring-initializer"&gt;
  &lt;/a&gt;
  Step 1: Create Spring Boot Project Using spring initializer.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://start.spring.io/"&gt;&lt;strong&gt;Spring Initializr&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-the-following-dependencies-to-pomxml"&gt;
  &lt;/a&gt;
  Step 2: Add the following dependencies to pom.xml
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOdAwby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2AIheYjbpv2gXmXPVINRN8CQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOdAwby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2AIheYjbpv2gXmXPVINRN8CQ.png" alt="apache-1" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-creating-a-basic-first-route"&gt;
  &lt;/a&gt;
  Step 3: Creating a basic first route.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#apache-camel-routes"&gt;
  &lt;/a&gt;
  Apache Camel Routes:-
&lt;/h3&gt;

&lt;p&gt;A Camel &lt;em&gt;route&lt;/em&gt; is where the integration flow is defined. For example to integrate two systems then a Camel route can be &lt;em&gt;coded&lt;/em&gt; to specify how these systems are integrated.&lt;/p&gt;

&lt;p&gt;An example could be to take files from an FTP server and send them to an ActiveMQ messaging system.&lt;/p&gt;

&lt;p&gt;This can be coded in a route using Java with the &lt;a href="https://camel.apache.org/manual/latest/java-dsl.html"&gt;Java DSL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2td-uhYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2348/1%2A3BojIKoblLKlIHV2DnSZcQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2td-uhYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2348/1%2A3BojIKoblLKlIHV2DnSZcQ.png" alt="Test Route" width="880" height="657"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-on-successfully-creation-on-route-is-registered"&gt;
  &lt;/a&gt;
  Step 4: On Successfully Creation on Route is registered.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1O-GA9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4012/1%2AdTKTcOmw8EfeQ2tEJ6ZPrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1O-GA9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4012/1%2AdTKTcOmw8EfeQ2tEJ6ZPrg.png" alt="Output Route Started" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to understand what is apache camel is and how to implement a basic route using spring boot. It's been used by developers to develop high speed and flexible applications&lt;/p&gt;

&lt;p&gt;Please do share and like 💕if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://camel.apache.org/manual/latest/faq/what-is-camel.html"&gt;&lt;strong&gt;What is Camel?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You -Rohan Kadam" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why I decided to become a full-stack developer in 2022</title>
      <author>Kris Krazy</author>
      <pubDate>Tue, 21 Dec 2021 03:47:48 +0000</pubDate>
      <link>https://dev.to/krisxkrazy/why-i-decided-to-become-a-full-stack-developer-in-2022-25e</link>
      <guid>https://dev.to/krisxkrazy/why-i-decided-to-become-a-full-stack-developer-in-2022-25e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call To Action
&lt;/h3&gt;

&lt;p&gt;Being the most technical in my immediate family I would often get called for bug fixes, and casual errors, to some of the larger thing such as websites using builders such as wix, wordpress, squarespace, and webflow. Naturally as I learned the more intricate details of these programs and became more aware of the outrageous prices of websites, and the inability to transfer websites. I began to look around for a more flexible option. The clear next step was web-development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlL-5LCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnee87s6rb9o8csgiywz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlL-5LCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnee87s6rb9o8csgiywz.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-research"&gt;
  &lt;/a&gt;
  The Research
&lt;/h4&gt;

&lt;p&gt;Researching about web development was a shorter process than expected. It boiled down to 2 sections, front end web development, &amp;amp; back end web development. Front End Web-Development is defined as developing the GUI(Graphical User Interface) with the use of HTML, CSS, &amp;amp; JS. Back End or server side development is development of the code that communicates the database information to the web browser. An example of some frequently used back end languages would be &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Ruby On Rails &lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;.NET&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yRykM7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rjkh4m3j7q8eybppofj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yRykM7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rjkh4m3j7q8eybppofj.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-it-useful"&gt;
  &lt;/a&gt;
  Is It Useful?
&lt;/h4&gt;

&lt;p&gt;In an age of information overload, their are many platforms to share information. Who builds them. Web-developers. From Dev.to, to the most veneered blogs, and forums. Fullstack web-dev is an amazing skill to have in this day, and age. It provides and insane amount of opportunities from being able to get a job at a FAANG company, Freelance, create a startup, ect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--110VH-OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyf5bp2ft73vr3m7dlns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--110VH-OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyf5bp2ft73vr3m7dlns.png" alt="Image description" width="650" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#misc"&gt;
  &lt;/a&gt;
  MISC.
&lt;/h4&gt;

&lt;p&gt;Don't take for granted the soft-skills that you will also develop becoming a dev. Collaborating with others will help to build clear communication skills, you will also learn to ask for help, and clearly communicate to other when helping them. Another underrated skill is that of learning. In the tech space technology is ever evolving meaning devs, are forever learning to keep pace. This will require exemplary research skills, to get to the point as soon as possible. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-the-market-like"&gt;
  &lt;/a&gt;
  What is the The Market like
&lt;/h4&gt;

&lt;p&gt;While looking at sites like fiiver you will notice the market is over saturated with skilled developers from other countries that charge far less than a admissible amount for the average American. A prime example of this is india. They have no national minimum wage but it tends to range from 160 rupees ($2.40) per day in Bihar to 423 rupees ($6.35) per day in Delhi based on Minimum Wages Act,1948 (according to minimum-wage.org). As you can guess the living expenses are also far less their. Now you should have a clear vantage point of the market. However the situation is quite different as far as 9-5, or start-up would go. Their are many large companies and startups looking for developers to build their website and/or maintain it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTOXVU4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko9nk6lt1x9oefh7yxr7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTOXVU4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko9nk6lt1x9oefh7yxr7.jpg" alt="Image description" width="626" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#extra"&gt;
  &lt;/a&gt;
  Extra
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;If you would like to go further in depth on this topic here are some more articles!&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eduvoice.in/scope-computer-science-india/"&gt;https://eduvoice.in/scope-computer-science-india/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pnas.org/content/116/14/6732"&gt;https://www.pnas.org/content/116/14/6732&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nuke.fas.org/guide/india/agency/krithi2.html"&gt;https://nuke.fas.org/guide/india/agency/krithi2.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h5&gt;

&lt;p&gt;As always if you think their is something to be added, or I said something incorrect please correct me in the comments.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Wrapping React Query's useQuery (A Use Case for Wrapping External Libraries)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 21 Dec 2021 03:47:14 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed</link>
      <guid>https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed</guid>
      <description>&lt;p&gt;React Query is a library for fetching and mutating server state via React hooks. In addition to the perk of caching, it also neatly returns metadata representing the various lifecycles of a network request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;isFetched&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This cuts down on the boilerplate when using React local state to track this metadata manually.&lt;/p&gt;

&lt;p&gt;As shown in the example above, the &lt;code&gt;useQuery&lt;/code&gt; hook takes in a "query key" (the key for the data in the cache) and a function that "queries" data via an API.&lt;/p&gt;

&lt;p&gt;There are possibilities to improve the signature of this hook.&lt;/p&gt;

&lt;p&gt;First, there is currently no way of enforcing that all "queries" go through the same API client.&lt;/p&gt;

&lt;p&gt;For example, you could have one instance of &lt;code&gt;useQuery&lt;/code&gt; that uses the native &lt;code&gt;fetch&lt;/code&gt; API and another that uses a custom fetch wrapper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// another-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetchClient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fetch-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given this example, there is a code smell since &lt;code&gt;fetchClient&lt;/code&gt; is the intended way to make API requests as it encapsulates logic, error handling, preferred settings, etc.&lt;/p&gt;

&lt;p&gt;To improve upon this, we can come up with design patterns that help enforce the reusing of the same fetch client.&lt;/p&gt;

&lt;p&gt;One option is to export the custom fetch client and all the modules of React Query from a single file, avoiding the importing/using of React Query directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, we may expose the fetcher via a hook (similar to React Redux's &lt;code&gt;useDispatch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a third option, we could conceal the &lt;code&gt;fetcher&lt;/code&gt; in a wrapper around &lt;code&gt;useQuery&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;baseUseQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useBaseQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second limitation of the plain &lt;code&gt;useQuery&lt;/code&gt; can be seen most clearly in our latest wrapper.&lt;/p&gt;

&lt;p&gt;Here, we can predict that the "query key" is likely a subpath on the API route.&lt;/p&gt;

&lt;p&gt;Because of that, we can derive the "query key" from the query in our abstraction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;kebabCase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;baseUseQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useBaseQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kebabCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/v1/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🎉 Just like we've simplified our API lifecycles by wrapping &lt;code&gt;useQuery&lt;/code&gt; to better fit our needs.&lt;/p&gt;

&lt;p&gt;Regardless of whether this wrapper (as demonstrated) suits your preferences and needs, I hope it helps show the potential value of wrapping modules from shared libraries.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Launched PandaDoc Tech Blog </title>
      <author>Valia Havryliuk</author>
      <pubDate>Tue, 21 Dec 2021 02:28:32 +0000</pubDate>
      <link>https://dev.to/valiahavryliuk/launched-pandadoc-tech-blog-3kek</link>
      <guid>https://dev.to/valiahavryliuk/launched-pandadoc-tech-blog-3kek</guid>
      <description>&lt;p&gt;Just 3 months ago, we launched PandaDoc for Developers. Since then, many developers have created their sandbox accounts and started exploring our API for free. &lt;/p&gt;

&lt;p&gt;We carefully collected all the feedback and feature requests that we received and have been working to continuously improve our API capabilities. &lt;/p&gt;

&lt;p&gt;And today, the first update is available! We are happy to announce the launch of 8 long-awaited API features to speed up and simplify your workflow: &lt;a href="https://medium.com/the-pandadoc-tech-blog/pandadoc-api-enhancements-4978006ae205"&gt;https://medium.com/the-pandadoc-tech-blog/pandadoc-api-enhancements-4978006ae205&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To get updates from our team in the future, please, follow our Medium publication!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>writing</category>
      <category>api</category>
    </item>
    <item>
      <title>Trial Periods... Are they really worth it?</title>
      <author>Wannabe Entrepreneur 🎙️</author>
      <pubDate>Tue, 21 Dec 2021 02:21:57 +0000</pubDate>
      <link>https://dev.to/wbepodcast/trial-periods-are-they-really-worth-it-en6</link>
      <guid>https://dev.to/wbepodcast/trial-periods-are-they-really-worth-it-en6</guid>
      <description>&lt;p&gt;&lt;strong&gt;There is no SaaS without a Trial!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many indie devs are into SaaS nowadays and their monetization strategy normally falls into two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fully paid product with different tiers&lt;/li&gt;
&lt;li&gt;A freemium model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quite often in either of these methods, the creators offer free trials. A way for users to actually try the paid version without credit card is needed! (got to have these last magic words)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have been really enjoying writing my thoughts both here and on indie hackers and from &lt;a href="(https://dev.to/wbepodcast/why-companies-should-support-their-employees-side-projects-lm5)"&gt;yesterday's post&lt;/a&gt; I got a few Devs visiting my &lt;a href="https://wannabe-entrepreneur.com/coworking/"&gt;virtual co-working space for entrepreneurs&lt;/a&gt; and asking me if they could try it for free...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I had already considered a trial in the past but I have always rejected the idea&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My product is a paid community and I have been lucky enough to have found really cool and active first members 💪&lt;/p&gt;

&lt;p&gt;It somehow seemed odd to allow strangers to come into our virtual office just to disappear a few days after (much like my father... 😿). Plus it's a &lt;strong&gt;4 euros subscription that can be canceled at any time...&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If people are not willing to pay that then they probably never will...&lt;/em&gt; - Tiago thinking to himself&lt;/p&gt;

&lt;p&gt;I explained my reasons to this user and then got convinced by the explanation... 😱&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is not about the money but the fact of giving my credit card info and committing to a product without actually knowing if it works...&lt;/em&gt; - user&lt;/p&gt;

&lt;p&gt;I realized that the problem was not losing the 4 euros but rather being tricked by a sketchy podcaster with possibly an empty slack channel!&lt;/p&gt;

&lt;p&gt;I decided then to give it a shot! Here is what I have done...&lt;/p&gt;

&lt;p&gt;1- Get a coffee ofc... ☕&lt;/p&gt;

&lt;p&gt;2- Asked the community members if they were ok with it and like always they were super supportive!&lt;/p&gt;

&lt;p&gt;3- Create a &lt;a href="https://www.buymeacoffee.com/tiagorbf/e/50962"&gt;new extra in the buymeacoffee platform&lt;/a&gt; for a value of ZERO euros and use &lt;a href="https://zapier.com/"&gt;zapier&lt;/a&gt; to store the new user data together with the expiration date into &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt;. #NoCode4TheWinBROOOO&lt;/p&gt;

&lt;p&gt;4- Change the landing page to this beauty...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0rrmfxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yxnqg3eezlk1lqf3rt0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0rrmfxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yxnqg3eezlk1lqf3rt0.png" alt="Image description" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's amazing because since I implemented the trial a grand total of &lt;strong&gt;ZERO new members have joined!!!&lt;/strong&gt; So I was right!&lt;/p&gt;

&lt;p&gt;Or maybe is still too soon to tell... XD I will wait a couple more days to take my conclusions and I will keep you posted! (btw if you prefer listening to these adventures in an audio format you should &lt;a href="https://wannabe-entrepreneur.com/episodes/"&gt;checkout my podcast&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I hope you found this entertaining and I would love to know what are your thoughts on trial periods... Have they been working out for you?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Intro to Machine Learning</title>
      <author>Aya Ebrahim</author>
      <pubDate>Tue, 21 Dec 2021 01:54:18 +0000</pubDate>
      <link>https://dev.to/ayaebrahim/intro-to-machine-learning-fk9</link>
      <guid>https://dev.to/ayaebrahim/intro-to-machine-learning-fk9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Welcome to my third blog!&lt;/strong&gt;&lt;br&gt;
In this blog, I am revising basic concepts in the Kaggle course (Intro to machine learning) and we'll build our very first model here and it's totally basic so, it doesn't require any experience in this topic, Let's start!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Lesson 1 :&lt;/strong&gt;  How models work?&lt;/p&gt;

&lt;p&gt;Let's walk through the example there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your cousin has made millions of dollars speculating on real estate. He's offered to become business partners with you because of your interest in data science. He'll supply the &lt;u&gt;money&lt;/u&gt;, and you'll supply &lt;u&gt;models &lt;/u&gt;that predict how much various houses are worth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you wondered how he predicted the house prices before he said by "intuition", But more questioning reveals that he's identified price patterns from houses he has seen in the past and he uses those patterns to make predictions for new houses he is considering.&lt;/p&gt;

&lt;p&gt;Machine learning works the same way. We'll start with a model called the &lt;strong&gt;Decision Tree&lt;/strong&gt;. There are fancier models that give more accurate predictions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lb8FU6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shkdge6qxtngk33rdyxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lb8FU6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shkdge6qxtngk33rdyxu.png" alt="Decision tree" width="475" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is that?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The DT (decision tree) divides houses into only &lt;u&gt;two categories&lt;/u&gt;.&lt;/li&gt;
&lt;li&gt;We use data to decide how to break the houses into two groups&lt;/li&gt;
&lt;li&gt;Then again to determine the predicted price in each group. This step of capturing patterns from data is called &lt;u&gt;fitting &lt;/u&gt;or &lt;u&gt;training &lt;/u&gt;the model.&lt;/li&gt;
&lt;li&gt;After data has been fit, you can apply it to new data to predict prices of additional new homes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Improving the Decision Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52Lm0Y5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvhw858jq7p7oz3ofrxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52Lm0Y5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvhw858jq7p7oz3ofrxp.png" alt="DT" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, It pops up in your mind that definitely DT 1 makes more sense as when the more no. of bedrooms the higher price it'll be, right?&lt;br&gt;
Well, This not totally true.&lt;br&gt;
As there are extra features (e.g. lot size, crime rate and so on).&lt;br&gt;
This will lead us to the &lt;strong&gt;deeper tree&lt;/strong&gt; that covers more features that definitely affects the predicted price and those are the extra "splits". &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c82lAVWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpmvfdnjfjv5que03m0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c82lAVWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpmvfdnjfjv5que03m0.png" alt="Deep DT" width="709" height="449"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;leaf&lt;/strong&gt; is where we have our predicted price.&lt;/p&gt;

&lt;p&gt;The splits and values at the leaves will be determined by the data, so we need to check out the data we'll be working with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 2 :&lt;/strong&gt; Basic Data Exploration (Examine your data)&lt;br&gt;
To build any ML model we need to be familiar and fully understand our data, In order to do so, One of the well known libraries is "Pandas".&lt;br&gt;
What's pandas?&lt;br&gt;
&lt;strong&gt;Pandas&lt;/strong&gt; is the primary tool used for exploring and manipulating data.&lt;br&gt;
&lt;em&gt;Pandas =&amp;gt; pd&lt;/em&gt;&lt;br&gt;
Let's import it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important part of the Pandas is the "DataFrame".&lt;br&gt;
A &lt;strong&gt;DataFrame&lt;/strong&gt; holds the type of data you might think of as a table. This is similar to a sheet in &lt;u&gt;Excel&lt;/u&gt;, or a table in a &lt;u&gt;SQL &lt;/u&gt;database.&lt;/p&gt;

&lt;p&gt;Pandas has powerful methods for most things we'll want to do with this type of data.&lt;br&gt;
Let's do some code!&lt;br&gt;
Check this dataset : &lt;a href="https://www.kaggle.com/dansbecker/melbourne-housing-snapshot"&gt;Homes in Melbourne, Australia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, Check my &lt;a href="https://colab.research.google.com/drive/1wjJylgRKrS8oz_yqrnv4TPf3x5R7hVWA?usp=sharing"&gt;code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interpreting Data Description&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The results show &lt;strong&gt;8&lt;/strong&gt; numbers for each column in our original dataset. The first number is &lt;u&gt;count&lt;/u&gt; that shows how many rows have non-missing values.&lt;/p&gt;

&lt;p&gt;Missing values arise for many reasons. For example, the size of the 2nd bedroom wouldn't be collected when surveying a 1 bedroom house. We'll come back to the topic of missing data.&lt;/p&gt;

&lt;p&gt;The second value is the &lt;u&gt;mean&lt;/u&gt;, which is the average.&lt;br&gt;
The third value is &lt;u&gt; std &lt;/u&gt;(standard deviation) which measures how numerically spread out the values are.&lt;/p&gt;

&lt;p&gt;To interpret the &lt;strong&gt;min, 25%, 50%, 75% and max values&lt;/strong&gt;, imagine sorting each column from lowest to highest value.&lt;br&gt;
The first (smallest) value is the min.&lt;br&gt;
If you go a quarter way through the list, you'll find a number that is bigger than 25% of the values and smaller than 75% of the values that is the &lt;strong&gt;25%&lt;/strong&gt; value (pronounced "25th percentile").&lt;br&gt;
The 50th and 75th percentiles are defined analogously and the max is the largest number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 3 :&lt;/strong&gt;  Your First Machine Learning Model&lt;/p&gt;

&lt;p&gt;In this lesson, we'll apply what is explained above to build a model. Let's go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting Data for Modeling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have so many variables here so, we'll pick a few of them using our intuition (for now).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To choose variables/columns, we'll need to see a list of all columns in the dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;melbourne_data.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt; Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG','Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car','Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude','Longtitude', 'Regionname', 'Propertycount'],dtype='object')&lt;/p&gt;

&lt;p&gt;We have some missing values&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will take the simplest option for now and &lt;u&gt;drop&lt;/u&gt; houses from our data. (dropna as we can consider for now that "na" means "not available".)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;melbourne_data = melbourne_data.dropna(axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we'll select pieces from our data&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Two approaches to be followed : &lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;- Dot notation, which we use to select the "prediction target"&lt;/li&gt;
&lt;li&gt;- Selecting with a column list, which we use to select the "features"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Selecting The Prediction Target&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can pull out a variable with dot-notation "."&lt;br&gt;
This single column is stored in a Series, which is like a df with only a single column of data.&lt;/p&gt;

&lt;p&gt;We'll use the dot notation to select the column we want to predict, which is called the &lt;strong&gt;prediction target&lt;/strong&gt;.&lt;br&gt;
We'll call the prediction target "y".&lt;br&gt;
So we need to save the house prices in the Melbourne data :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;y = melbourne_data.Price
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Choosing "Features"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The columns or "features." In our case, those would be used to determine the &lt;strong&gt;home price&lt;/strong&gt;. Sometimes, we will use all columns except the target one as features. Other times it'd be better with fewer features.&lt;/p&gt;

&lt;p&gt;For now, we'll build a model with only a few features. Later on we'll see how to iterate and compare models built with different features.&lt;/p&gt;

&lt;p&gt;We select multiple features by providing a list of column names.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Here is an example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll call our data "X"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X = melbourne_data[melbourne_features]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see it more deep :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt;   Rooms   Bathroom    Landsize    Lattitude   Longtitude&lt;br&gt;
count   6196.000000 6196.000000 6196.000000 6196.000000 6196.000000&lt;br&gt;
mean    2.931407    1.576340    471.006940  -37.807904  144.990201&lt;br&gt;
std 0.971079    0.711362    897.449881  0.075850    0.099165&lt;br&gt;
min 1.000000    1.000000    0.000000    -38.164920  144.542370&lt;br&gt;
25% 2.000000    1.000000    152.000000  -37.855438  144.926198&lt;br&gt;
50% 3.000000    1.000000    373.000000  -37.802250  144.995800&lt;br&gt;
75% 4.000000    2.000000    628.000000  -37.758200  145.052700&lt;br&gt;
max 8.000000    8.000000    37000.000000    -37.457090  145.526350&lt;/p&gt;

&lt;p&gt;And&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt; &lt;br&gt;
     Rooms  Bathroom Landsize Lattitude Longtitude&lt;br&gt;
1   2   1.0 156.0   -37.8079    144.9934&lt;br&gt;
2   3   2.0 134.0   -37.8093    144.9944&lt;br&gt;
4   4   1.0 120.0   -37.8072    144.9941&lt;br&gt;
6   3   2.0 245.0   -37.8024    144.9993&lt;br&gt;
7   2   1.0 256.0   -37.8060    144.9954&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Building Our Model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will use the &lt;strong&gt;scikit-learn&lt;/strong&gt; library to create our model.&lt;br&gt;
(sklearn) is the most popular library for modeling the types of data typically stored in DataFrames.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;The steps to building and using a model are:&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define:&lt;/strong&gt; What type of model will it be? A decision tree? Some other type of model? Some other parameters of the model type are specified too.&lt;br&gt;
&lt;strong&gt;Fit:&lt;/strong&gt; Capture patterns from provided data. This is the heart of modeling.&lt;br&gt;
&lt;strong&gt;Predict:&lt;/strong&gt; Just what it sounds like&lt;br&gt;
&lt;strong&gt;Evaluate:&lt;/strong&gt; Determine how accurate the model's predictions are.&lt;/p&gt;

&lt;p&gt;Here is an example of defining a decision tree model with scikit-learn and fitting it with the features and target variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sklearn.tree import DecisionTreeRegressor

# Define model.Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)

# Fit model
melbourne_model.fit(X, y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt;&lt;br&gt;
DecisionTreeRegressor(random_state=1)&lt;/p&gt;

&lt;p&gt;Many machine learning models allow some randomness in model training.&lt;br&gt;
Specifying a number for random_state ensures you get the same results in each run.&lt;br&gt;
We use any number, and model quality won't depend on exactly what value we choose.&lt;/p&gt;

&lt;p&gt;We now have a &lt;strong&gt;fitted model&lt;/strong&gt; that we can use to &lt;strong&gt;make predictions&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")
print(melbourne_model.predict(X.head()))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt; Making predictions for the following 5 houses:&lt;br&gt;
   Rooms  Bathroom  Landsize  Lattitude  Longtitude&lt;br&gt;
1      2       1.0     156.0   -37.8079    144.9934&lt;br&gt;
2      3       2.0     134.0   -37.8093    144.9944&lt;br&gt;
4      4       1.0     120.0   -37.8072    144.9941&lt;br&gt;
6      3       2.0     245.0   -37.8024    144.9993&lt;br&gt;
7      2       1.0     256.0   -37.8060    144.9954&lt;br&gt;
The predictions are&lt;br&gt;
[1035000. 1465000. 1600000. 1876000. 1636000.]&lt;/p&gt;




&lt;p&gt;Check my final code from &lt;a href="https://colab.research.google.com/drive/1cT2Sc8zw3Fiwz6oQ4Srk70kYneTe4VV6?usp=sharing"&gt;Here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's all for today, We covered half of the course and we'll continue in the upcoming blog!&lt;br&gt;
Hope you learnt and know now how to build a model.&lt;/p&gt;




&lt;p&gt;&lt;u&gt;Resources and docs : &lt;/u&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;a href="https://www.kaggle.com/learn/intro-to-machine-learning"&gt;Kaggle Course&lt;/a&gt;&lt;br&gt;
2.&lt;a href="https://www.w3schools.com/python/pandas/pandas_intro.asp"&gt;W3schools&lt;/a&gt;&lt;br&gt;
3.&lt;a href="https://pandas.pydata.org/"&gt;Pandas documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Reactjs tutorial for absolute beginners</title>
      <author>EasyCode Sardar</author>
      <pubDate>Tue, 21 Dec 2021 01:52:01 +0000</pubDate>
      <link>https://dev.to/hardeepcoder/reactjs-tutorial-for-absolute-beginners-4g8g</link>
      <guid>https://dev.to/hardeepcoder/reactjs-tutorial-for-absolute-beginners-4g8g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Email Validation&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reactjs tutorial for absolute beginners&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-5S_HqpJa0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Vendure- The smart Shopify alternative</title>
      <author>mematthew123</author>
      <pubDate>Tue, 21 Dec 2021 01:02:22 +0000</pubDate>
      <link>https://dev.to/mematthew123/vendure-the-smart-shopify-alternative-54k4</link>
      <guid>https://dev.to/mematthew123/vendure-the-smart-shopify-alternative-54k4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XF-nFNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oflz8u20zu6g4ljvfhai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XF-nFNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oflz8u20zu6g4ljvfhai.png" alt="Vendure_logo" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-you-need-nothing-you-dont"&gt;
  &lt;/a&gt;
  &lt;em&gt;Everything you need, nothing you don't&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nodesource.com/products/nsolid"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWgNG-b---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cldup.com/dTxpPi9lDf.thumb.png" alt="N|Solid" width="162" height="32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/joemccann/dillinger"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-WDP5GZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://travis-ci.org/joemccann/dillinger.svg%3Fbranch%3Dmaster" alt="Build Status" width="90" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2022 online sales are expected to continue to grow 16.1% compared to 2021, which was a record-breaking year in its own right. In-person shopping, however, is expected to remain flat for the foreseeable future. This has led to an influx of online stores opening for the first time as many business owners are seeking to capitalize on the benefits of online selling. &lt;/p&gt;

&lt;p&gt;When building an online store for yourself or a client, there are a plethora of options available due to the growing demand. Many clients and business owners want stores that are easy to maintain, built quickly, and are cost-effective. Checking all the boxes on this list is no small task, and many developers and store owners naturally gravitate towards monolithic options such as Shopify or WordPress due to the speed at which they can be built. The issue that many face when using these options is that customization can be non-existent or expensive (Plugins), and they are prone to creating a less than stellar customer service experience. &lt;/p&gt;

&lt;p&gt;On the other hand, customers have higher expectations than ever for their online and mobile shopping experiences. Universally consumers prefer their online shopping experience to be effortless and personal. &lt;/p&gt;

&lt;p&gt;Headless storefronts can be built on traditionally monolithic platforms however, this often still leaves a person depending on expensive plugins to enable standard back-end features. Other, newer options often come with high monthly charges and/or a percentage of your gross sales. This is a major hurdle for many small businesses that don't have the financial resources to hire a full development team. &lt;/p&gt;

&lt;p&gt;An option that I recently discovered that does a better job than either of the two aforementioned options is &lt;a href="//vendure.io"&gt;Vendure.io &lt;/a&gt;which is a headless e-commerce framework that is easy to set up, cheap to host ($5 mo), and you won't have to worry about feeling overwhelmed by the admin dashboard (cough cough wp). The admin dashboard is beautiful and intuitive, perfect to hand off to a client. Vendure was developed by Michael Bromley and released in 2019 and just released version 1.4. I am just getting started using Vendure but have highlighted a few aspects that have stood out in my eyes. Down below, I will also show a quick and easy way to get started with Vendure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with..
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Nestjs&lt;/li&gt;
&lt;li&gt;Graphql&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#-customizable"&gt;
  &lt;/a&gt;
  - Customizable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;In Vendure, this is accomplished easily with a couple of lines of configuration. This is much more involved in other frameworks and can be a costly plugin depending on the platform.&lt;/li&gt;
&lt;li&gt;Custom the shopping experience by bringing your storefront. vendure has starters available for Next as well as Vue!&lt;/li&gt;
&lt;li&gt;Compatible with multiple payment gateways &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-scalable"&gt;
  &lt;/a&gt;
  - Scalable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Sell an unlimited amount of products&lt;/li&gt;
&lt;li&gt;Marketplace capable &lt;/li&gt;
&lt;li&gt;Multi-Tenant capable &lt;/li&gt;
&lt;li&gt;Amazing support and community &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-costeffective"&gt;
  &lt;/a&gt;
  - Cost-effective
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Open-source &lt;/li&gt;
&lt;li&gt;Deployment on the digital ocean is around 5 a month&lt;/li&gt;
&lt;li&gt;No additional fees for using preferred payment gateway
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-approachable"&gt;
  &lt;/a&gt;
  - Approachable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Easy to set up in an afternoon &lt;/li&gt;
&lt;li&gt;Easy to navigate and preconfigured dashboard&lt;/li&gt;
&lt;li&gt;Advanced image control&lt;/li&gt;
&lt;li&gt;Storefront starters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;Step .5: Prerequisites&lt;br&gt;
    Basic understanding of TypeScript&lt;br&gt;
    Basic understanding of Node.js&lt;br&gt;
    Basic understanding of GraphQL&lt;br&gt;
    Basic understanding of SQL and databases &lt;/p&gt;

&lt;p&gt;Keep in mind that this is a beginner's guide and setup, that does not go into the full capabilities of Vendure.io.&lt;/p&gt;

&lt;p&gt;~#~#~#~#~#~#~#~&lt;br&gt;
If you are new to the world of Node.js, &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;. &lt;br&gt;
If you are new to GraphQL, &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;. &lt;br&gt;
If you are new to SQL, &lt;a href="https://www.w3schools.com/sql/"&gt;SQL&lt;/a&gt;.&lt;br&gt;
If you are new to the world of TypeScript, &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;.&lt;br&gt;
~#~#~#~#~#~#~#~&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-we-go"&gt;
  &lt;/a&gt;
  Here we go!
&lt;/h3&gt;

&lt;p&gt;Step 1: Open a new terminal window enter the following command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @vendure/create my-app  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 2: Choose a Database- for this tutorial we will be using an SQLite database. &lt;/p&gt;

&lt;p&gt;Step 3: Choose a Language- for this tutorial we will be using TypeScript&lt;/p&gt;

&lt;p&gt;Step 4: Sample Data? Yes, please  &lt;/p&gt;

&lt;p&gt;Step 5: User name and Password? We will use the default settings provided which is superadmin/superadmin. This can be changed later in the dashboard  &lt;/p&gt;

&lt;p&gt;Step 6: Run the command  &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd my-app
    yarn start  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 7: Since the previous step will take a couple of minutes, this is a good time to get up stretch, grab a &lt;del&gt;beer&lt;/del&gt; coffee, and congratulate yourself on setting up your Vendure server&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nice-work-you-should-now-be-able-to-access-the-following"&gt;
  &lt;/a&gt;
  Nice work! You should now be able to access the following
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The Vendure Admin GraphQL API: http://localhost:3000/admin-api
The Vendure Shop GraphQL API: http://localhost:3000/shop-api
The Vendure Admin UI: http://localhost:3000/admin  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#but-what-does-it-mean"&gt;
  &lt;/a&gt;
  But what does it mean...?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Admin GraphQL API: &lt;a href="http://localhost:3000/admin-api"&gt;http://localhost:3000/admin-api&lt;/a&gt; = Store permissions&lt;br&gt;
GraphQL API: &lt;a href="http://localhost:3000/shop-api"&gt;http://localhost:3000/shop-api&lt;/a&gt; = Putting items on the shelves and general store operations &lt;br&gt;
Admin UI: &lt;a href="http://localhost:3000/admin="&gt;http://localhost:3000/admin=&lt;/a&gt; View from the bosses desk&lt;br&gt;
(high five!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-storefront"&gt;
  &lt;/a&gt;
  Creating a storefront
&lt;/h2&gt;

&lt;p&gt;There are two popular integrations available at the moment: Vue and Next&lt;br&gt;
Since I like Next over Vue~ Let's set up the Next js storefront&lt;/p&gt;

&lt;p&gt;Step 1. Verify that the Vendure server is set up for cookies and not bearer tokens &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFrR1PFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0rnyeo46n1bwjy4b56v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFrR1PFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0rnyeo46n1bwjy4b56v.png" alt="Vendure_config" width="610" height="194"&gt;&lt;/a&gt;&lt;br&gt;
Step 2. Fork and then clone this repo &lt;a href="https://github.com/vercel/commerce"&gt;https://github.com/vercel/commerce&lt;/a&gt;&lt;br&gt;
Step 3. NPM install and then create a .env.local file at the root of the project and add the following   &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    COMMERCE_PROVIDER=vendure
NEXT_PUBLIC_VENDURE_SHOP_API_URL=http://localhost:3000/shop-api 
NEXT_PUBLIC_VENDURE_LOCAL_URL=/vendure-shop-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 4.  Let's now double-check our tsconfig.json file and make sure that the correct framework is set up. It should show Vendure as the framework of choice, replacing "local" on lines 26 through 30. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "@components/*": ["components/*"],
    "@commerce": ["framework/commerce"],
    "@commerce/*": ["framework/commerce/*"],
    "@framework": ["framework/vendure"],
    "@framework/*": ["framework/vendure/*"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 5.  In your terminal  enter the command "npm run dev" to start your storefront&lt;/p&gt;

&lt;p&gt;You should now see a fully populated store full of demo items. Let's go ahead and verify connectivity by going to our Vendure admin dashboard. Once signed we can add products and collections. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_BDF5J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgkw6vlvaycic7a8d8vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_BDF5J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgkw6vlvaycic7a8d8vz.png" alt="adding products" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we go back and check out our storefront we should see any new categories we created listed in the navbar, and a quick search should bring up any new products that are not displayed on the landing page. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5VTu4kpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbud0bayv5hbkq77mu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5VTu4kpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbud0bayv5hbkq77mu1.png" alt="Added items" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Next js storefront comes with Tailwind CSS installed. The only thing left to do is add your personal touch! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tada-you-are-finished"&gt;
  &lt;/a&gt;
  TA-DA YOU ARE FINISHED
&lt;/h2&gt;

&lt;p&gt;If you have any questions about setting up Vendure, the Slack channel is full of helpful and knowledgeable people:  &lt;a href="https://vendure-ecommerce.slack.com"&gt;https://vendure-ecommerce.slack.com&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Starting a Prisma + TypeScript Project</title>
      <author>Sabin Adams 🧑🏻‍💻</author>
      <pubDate>Tue, 21 Dec 2021 00:15:30 +0000</pubDate>
      <link>https://dev.to/sabinthedev/starting-a-prisma-typescript-project-4c3g</link>
      <guid>https://dev.to/sabinthedev/starting-a-prisma-typescript-project-4c3g</guid>
      <description>&lt;p&gt;With such a rich selection of ORMs out there, choosing which one to use for your JavaScript-based project can be tough.  Depending on your goals or stack you have a ton available: libraries like &lt;a href="https://typeorm.io/#/"&gt;TypeORM&lt;/a&gt;,  &lt;a href="https://sequelize.org/"&gt;Sequelize&lt;/a&gt;, and &lt;a href="https://mongoosejs.com/"&gt;Mongoose&lt;/a&gt;, and many more.&lt;/p&gt;

&lt;p&gt;In this article and throughout the rest of this series we'll be taking a deep dive into another option; One that offers tons of cool features, a unique "ORM" experience, and an active, dedicated team of developers supporting and working on it. That option is &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-prisma"&gt;
  &lt;/a&gt;
  What is Prisma?
&lt;/h2&gt;

&lt;p&gt;At the most basic level, Prisma provides a set of tools that enable you to access and interact with your database. While offering many of the same features a traditional ORM would, Prisma describes itself as a &lt;em&gt;next-gen ORM&lt;/em&gt; because of its unique implementation of what is known as the "data-mapper" model of ORM and its careful consideration of Type-Safe interactions. &lt;/p&gt;

&lt;p&gt;Along with offering a great ORM tool (the Prisma Client), Prisma also offers a database migration tool called &lt;code&gt;Prisma Migrate&lt;/code&gt; and a nice GUI that allows you to visualize and update data in your connected database called &lt;code&gt;Prisma Studio&lt;/code&gt;. Our focus in this article and the rest of the series will be on the &lt;code&gt;Prisma Client&lt;/code&gt; and its rich feature-set.&lt;/p&gt;

&lt;p&gt;As we learn more about how Prisma works in this series, we will get to play with a lot of the features that make Prisma so powerful and different from the other tools available.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you'd like to learn more about the different types of ORMs and where Prisma fits in and differs from those, please give  &lt;a href="https://www.prisma.io/docs/concepts/overview/prisma-in-your-stack/is-prisma-an-orm#data-mapper"&gt;this page&lt;/a&gt; a read.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#jumping-in"&gt;
  &lt;/a&gt;
  Jumping In
&lt;/h2&gt;

&lt;p&gt;As much as I'd love to start going through all the benefits, downsides, use-cases, and don't-use-cases (that's a phrase right?) of Prisma, I'm sure you're anxious to get to the good stuff. Let's dive right into a super simple setup of Prisma so we can get some context into what Prisma is and take a look at the whats and why’s later on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This tutorial will assume a basic knowledge of JavaScript and its development ecosystem, TypeScript, and Database Terminology. If you want to brush up on these, check out these pages on &lt;a href="https://nodejs.dev/learn/an-introduction-to-the-npm-package-manager"&gt;npm&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;TypeScript&lt;/a&gt;, and &lt;a href="https://www.tutorialspoint.com/sqlite/index.htm"&gt;SQLite&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the example here we'll connect Prisma to a SQLite database, however Prisma currently also supports Postgres, MySQL, MSSQL, and MongoDB.&lt;/p&gt;

&lt;p&gt;To start things off, let's create a folder for our project and initialize &lt;code&gt;npm&lt;/code&gt; inside of it, which we will be using to install various packages. &lt;em&gt;(For all you yarn-lovers 🐈, feel free to use that instead)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &amp;lt;my-project&amp;gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;my-project&amp;gt;
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll install our development dependencies for TypeScript and Prisma&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-d&lt;/span&gt; prisma typescript ts-node @types/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all of our packages installed, we can now configure TypeScript by adding a &lt;code&gt;tsconfig.json&lt;/code&gt; file, a simple TypeScript file, and a script to our &lt;code&gt;package.json&lt;/code&gt; that we can run to start our development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tsconfig.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;basic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;setup,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;feel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tweak&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;needed&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"esnext"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.ts&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm Running!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;package.json&lt;/code&gt;,  add the following to the &lt;code&gt;"scripts"&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-node main"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in your terminal at the root of your project run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and you should see output similar to the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJAw33Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639886675636/TNExe_Pet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJAw33Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639886675636/TNExe_Pet.png" alt="Screen Shot 2021-12-18 at 8.04.32 PM.png" width="666" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our project is set up with TypeScript and ready to get fancy! Now we'll move on to setting up Prisma.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setting-up-prisma"&gt;
  &lt;/a&gt;
  Setting up Prisma
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#initializing"&gt;
  &lt;/a&gt;
  Initializing
&lt;/h3&gt;

&lt;p&gt;The steps to get Prisma going are pretty simple. We have the dependency installed already, so to start we'll just run Prisma's &lt;code&gt;init&lt;/code&gt; command and tell it we're going to use SQLite as our datasource. For a full list of options available to the &lt;code&gt;init&lt;/code&gt; command, check out these &lt;a href="https://www.prisma.io/docs/reference/api-reference/command-reference#run-prisma-init"&gt;docs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prisma init &lt;span class="nt"&gt;--datasource-provider&lt;/span&gt; sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice a new folder in your project named &lt;code&gt;prisma&lt;/code&gt; as well as a &lt;code&gt;.env&lt;/code&gt; file in your project's root. The contents of that folder should just be a file named &lt;code&gt;schema.prisma&lt;/code&gt;, which is the file where we will define how the &lt;code&gt;Prisma Client&lt;/code&gt; should get generated and model our data.&lt;/p&gt;

&lt;p&gt;Then you'll need to tell Prisma where to output the SQLite db file. In the &lt;code&gt;.env&lt;/code&gt; file let's make sure the &lt;code&gt;DATASOURCE_URL&lt;/code&gt; env variable specifies a file location that makes sense (I'm outputting it directly into the &lt;code&gt;prisma&lt;/code&gt; folder):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL="file:dev.db"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prisma allows us to access &lt;code&gt;.env&lt;/code&gt; variables using the &lt;code&gt;env()&lt;/code&gt; function in a &lt;code&gt;.schema&lt;/code&gt; file. You can see its usage by opening up &lt;code&gt;prisma.schema&lt;/code&gt; and checking out the &lt;code&gt;url&lt;/code&gt; attribute of the &lt;code&gt;datasource&lt;/code&gt; block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-our-data-model"&gt;
  &lt;/a&gt;
  Defining our Data Model
&lt;/h3&gt;

&lt;p&gt;There are various different kinds of blocks in a &lt;code&gt;.schema&lt;/code&gt; file that do different things and have tons of different options. We'll just set up a simple &lt;code&gt;User&lt;/code&gt; model for the purposes of this tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In a future article we'll dive deeper into the contents of this file and how to model out your data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This defines a User table for Prisma so it will know how to generate a nice, typed client that allows us to interact with the data. Right now our database is empty though, we'll need to push our schema into the database to actually create that table. &lt;em&gt;(This command should also generate the &lt;code&gt;Prisma Client&lt;/code&gt; after pushing the schema)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prisma db push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIb-ZXOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640032724523/b3Z6Qpt6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIb-ZXOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640032724523/b3Z6Qpt6u.png" alt="Screen Shot 2021-12-20 at 12.38.41 PM.png" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running that, we can make sure our table was created using &lt;code&gt;Prisma Studio&lt;/code&gt;. Run this command to open up the studio&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should open up a window at &lt;a href="http://localhost:5555"&gt;http://localhost:5555&lt;/a&gt; and look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyhOG46p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640031349057/8ubZjL21f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyhOG46p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640031349057/8ubZjL21f.png" alt="Screen Shot 2021-12-20 at 12.15.42 PM.png" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click on the &lt;code&gt;User&lt;/code&gt; model you should see a nice table view of your database table with options to search and add rows to the table. Pretty sweet! This tool definitely comes in handy working with your data. &lt;/p&gt;

&lt;p&gt;Now that we've got our data modeled, the model available in the database, our datasources set up, AND the client generated, let's put it to use!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#prisma-client"&gt;
  &lt;/a&gt;
  Prisma Client
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Prisma Client&lt;/code&gt; is generated by default into your &lt;code&gt;node_modules&lt;/code&gt; folder under &lt;code&gt;@prisma/client&lt;/code&gt;. To start, go ahead and modify your &lt;code&gt;main.ts&lt;/code&gt;. Import and instantiate the Prisma client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what does this do? This imports and creates an instance of the &lt;code&gt;PrismaClient&lt;/code&gt; class that was generated by Prisma based off of the model definitions you gave it. Right now our &lt;code&gt;main()&lt;/code&gt; function doesn't do anything, this is where we will add some code to interact with our data. &lt;/p&gt;

&lt;p&gt;The ending piece is important. Prisma opens up and handles connections automatically, however we need to tell it that when the application closes or reloads it should disconnect. If not, connections would be generated for each time your application starts and stay alive until manually disconnected. &lt;/p&gt;

&lt;p&gt;If your application gets an error when you try to run it, it is likely the Prisma Client was not generated on the &lt;code&gt;db push&lt;/code&gt;. Go ahead and run the following command to generate the Prisma Client and try again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prisma generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#querying-the-database"&gt;
  &lt;/a&gt;
  Querying the Database
&lt;/h3&gt;

&lt;p&gt;We can now start playing with some data! In your &lt;code&gt;main()&lt;/code&gt; function, lets try to print out all of the &lt;code&gt;users&lt;/code&gt; in our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you type that out, check out the awesome IntelliSense! Prisma generated a set of types and definitions for the Client to help make our lives easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQRhd60R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640033985653/iLXWOjzVq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQRhd60R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640033985653/iLXWOjzVq.gif" alt="ezgif.com-gif-maker (1).gif" width="522" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty awesome! Although you may notice after running this the results are empty... that's because we have no data yet! We can fix that, head back over to the &lt;code&gt;Prisma Studio&lt;/code&gt; and add a record to your User table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQhhQD-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034269631/fUx3tHPGh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQhhQD-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034269631/fUx3tHPGh.gif" alt="Dec-20-2021 13-04-01.gif" width="844" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you run your code again, you should see your user outputted in the console!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLume7bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034343027/Chj02ASpV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLume7bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034343027/Chj02ASpV.png" alt="Screen Shot 2021-12-20 at 1.05.40 PM.png" width="880" height="135"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;This is just the beginning, Prisma has such a rich set of features and potential for so much more. In the coming series we will be taking a deep look at everything Prisma has to offer, design patterns, custom extensions, and more! So if you enjoyed this and Prisma is piqueing your interest, keep an eye out for the coming articles.&lt;/p&gt;

&lt;p&gt;We managed to set up Prisma with TypeScript, a SQLite database, and an entire database client to connect to that database in this article with very little effort. That's pretty awesome to me. If you want to dig deeper and expand on what we talked about, check out the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;&lt;code&gt;Prisma Client&lt;/code&gt;&lt;/a&gt; docs.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>database</category>
    </item>
    <item>
      <title>Passing by Value vs Passing by Reference</title>
      <author>Rodolfo Machirica</author>
      <pubDate>Mon, 20 Dec 2021 23:34:19 +0000</pubDate>
      <link>https://dev.to/rmachirica/passing-by-value-vs-passing-by-reference-ili</link>
      <guid>https://dev.to/rmachirica/passing-by-value-vs-passing-by-reference-ili</guid>
      <description>&lt;p&gt;To talk about passing/copying values in JavaScript we need to talk about data types.&lt;br&gt;
JavaScript data types can be grouped into two categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple data types&lt;/li&gt;
&lt;li&gt;Complex data types&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#simple-data-types-vs-complex-data-types"&gt;
  &lt;/a&gt;
  Simple data types vs complex data types
&lt;/h3&gt;

&lt;p&gt;The concept of copying/passing data by reference or copying/passing data by value occurs in the face of the difference between these two data types when it comes to assigning variables to variables and data mutation.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#copying-by-value"&gt;
  &lt;/a&gt;
  Copying by value
&lt;/h4&gt;

&lt;p&gt;Primitive data types like strings, numbers, Booleans, undefined, null, BigInt and symbol are copied by value; that is, two different variables holding primitive values cannot have the same memory address. Let us observe the example bellow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let myName = "Elijah Gabriel"; // name is pointing at the value "Elijah Gabriel".
let yourName = myName; 
console.log(yourName); //prints =&amp;gt; "Elijah Gabriel", a copy of myName.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, while yourName and myName hold the same value, they aren't the same thing in memory. myName has a unique memory address and so does yourName, have its own unique memory address.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#copying-by-reference"&gt;
  &lt;/a&gt;
  Copying by reference
&lt;/h4&gt;

&lt;p&gt;Unlike primitive types, complex data types like arrays and objects in JavaScript are copied or passed by reference; meaning, two different variable names can point to the same data. When an object intended as an object literal or an array object is created, a reference to that object is created and allocated an address in the memory. So, if you create an object and assign it to a new variable, an object reference will be created and both variables will now be pointing at the reference object in memory address.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let reference = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]; // creates a reference array with a memory address
let refCopy = reference;// now both reference and refCopy are referencing the same array.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Image by Arnav Aggarwal, October 2017.&lt;br&gt;
! &lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/norvt1zz9hnxukgyr8tj.png"&gt;diagram showing a referenced data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;reference and Copy are pointing at the same array (reference) share the same memory address. This allows us to change properties in one objects or entries in one array and the change will be reflected in all variables pointing at the same reference. This is how it would look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copy.pop();// 
console.log(reCopy) //prints to the console =&amp;gt; ["Monday", "Tuesday", "Wednesday", "Thursday"];
console.log(reference); // prints to the console =&amp;gt; ["Monday", "Tuesday", "Wednesday", "Thursday"];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we could see, all changes made to the variable copy affected the variable reference in the same manner, and it would be true vice-versa. &lt;/p&gt;

&lt;p&gt;Let us look at an example with objects intended as object literal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const users = {
   firstUser : {firstName: "Tinache",
                 lastName: "Sabonete",
      },
  secondUser : { firstName: "Clayde",
                  lastName:  "Magarrafa",
     },                       
};

const usersCopy = users;// both users and usersCopy are pointing at the same object in memory address.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we change any of the properties in one of the objects, that change will automatically be made in the other object as well, and this is because these two objects share the same reference at this moment. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;usersCopy.firstUser = "online";
console.log(users);// prints=&amp;gt; {
   firstUser : "online",
  secondUser : { firstName: "Clayde",
                  lastName:  "Magarrafa",
     },                       
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We changed copyUsers, but that change was also reflected on users, and that is because they share a reference.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#breaking-reference-between-arrays-or-object-literals"&gt;
  &lt;/a&gt;
  Breaking reference between arrays or object literals.
&lt;/h4&gt;

&lt;p&gt;Here is a way to break a reference: if the copy variable or the variable reference is assigned to a completely new value, then the reference will be broken, and a new reference-to-be will be created for each of the arrays. Now let's see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reference = [{weekend: ["Saturday", "Sunday"]}];
console.log(reference);//prints=&amp;gt; [{weekend: ["Saturday", "Sunday"]}].
console.log(copy)// prints =&amp;gt; ["Monday", "Tuesday", "Wednesday", "Thursday"].

users = {age: 23, occupation: "student"}
console.log(usersCopy);// prints=&amp;gt; {
   firstUser : "online",
  secondUser : { firstName: "Clayde",
                  lastName:  "Magarrafa",
     },                       
};// users and usersCopy are now totally different objects and are //stored in different addresses in memory.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shared reference data between the variable reference and variable copy was broken; copy is still pointing to what the variable reference pointed to when it was created, and now reference points to a totally new value and have a new address in memory. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Simple data types variables have unique memory address, therefore they are passed by value and don't create a reference variable. Complex data type variables are passed by reference because during the variable assignment phase a reference object or object array is created, allowing for multiple variables to share a dwelling address in memory!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consulted-sources"&gt;
  &lt;/a&gt;
  Consulted sources:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://dustinpfister.github.io/2017/11/13/js-copying-vs-referencing-objects-in-javascript/"&gt;https://dustinpfister.github.io/2017/11/13/js-copying-vs-referencing-objects-in-javascript/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/understanding-by-reference-vs-by-value-d49139beb1c4/"&gt;https://www.freecodecamp.org/news/understanding-by-reference-vs-by-value-d49139beb1c4/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&lt;/a&gt; .&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Alhamdulillah! Successfully Completed</title>
      <author>Saif Al Siam</author>
      <pubDate>Mon, 20 Dec 2021 23:17:01 +0000</pubDate>
      <link>https://dev.to/alsiam/alhamdulillah-successfully-completed-imf</link>
      <guid>https://dev.to/alsiam/alhamdulillah-successfully-completed-imf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZTFout1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6ca1wkvnxzimw3c8imh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZTFout1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6ca1wkvnxzimw3c8imh.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Solving day 20 of Advent of Code 2021 in JavaScript</title>
      <author>Thibaut Patel</author>
      <pubDate>Mon, 20 Dec 2021 23:04:58 +0000</pubDate>
      <link>https://dev.to/thibpat/solving-day-20-of-advent-of-code-2021-in-javascript-pkn</link>
      <guid>https://dev.to/thibpat/solving-day-20-of-advent-of-code-2021-in-javascript-pkn</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1GrRShOr82Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>adventofcode</category>
      <category>javascript</category>
      <category>video</category>
    </item>
  </channel>
</rss>
