<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>6 HTML and CSS Projects For Your Portfolio</title>
      <author>Moemin Mamdouh üë®‚Äçüíª</author>
      <pubDate>Wed, 21 Jul 2021 22:36:04 +0000</pubDate>
      <link>https://dev.to/codewell/6-html-and-css-projects-for-your-portfolio-3kbh</link>
      <guid>https://dev.to/codewell/6-html-and-css-projects-for-your-portfolio-3kbh</guid>
      <description>&lt;p&gt;After speaking to seasoned developers, you will quickly realize that the best way to improve your portfolio is by building projects. It is probably the best way to get better, because along the way, you'll be facing challenges that will require research to solve, and that ultimately improves your skills. &lt;/p&gt;

&lt;p&gt;We've made a list of 6 HTML and CSS Projects you can practice on and include in your portfolio!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h1&gt;

&lt;p&gt;&lt;a href="#1-waitlist-page"&gt;1- Waitlist Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#2-multistep-form"&gt;2- Multi-step Form&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#3-fiber-landing-page"&gt;3- Fiber Landing Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#4-spense-landing-page"&gt;4- Spense Landing Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#5-nested-comments"&gt;5- Nested Comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#6-remix-landing-page-with-darklight-mode"&gt;6- Remix Landing Page with Dark/Light Mode&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-waitlist-page"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/challenges/60b3ea4c0cc72310b5a2494d"&gt;1- Waitlist Page&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mHDKuIZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774043899/gjt7aqMVP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHDKuIZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774043899/gjt7aqMVP.png" alt="Hosterr Codewell Challenge.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS Transforms&lt;/li&gt;
&lt;li&gt;Flex or Grid&lt;/li&gt;
&lt;li&gt;Responsive design&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-multistep-form"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/challenges/60e98bf3a383e41090a3c346"&gt;2- Multi-step Form&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plOYAGo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626773907862/iSMGEIUul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plOYAGo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626773907862/iSMGEIUul.png" alt="Subway Multistep Form Codewell Challenge.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating multi-step forms&lt;/li&gt;
&lt;li&gt;Creating custom components &lt;/li&gt;
&lt;li&gt;Responsive design&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-fiber-landing-page"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/challenges/608a7e639691700015db16d1"&gt;3- Fiber Landing Page&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvordykk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774230522/Wx0UhxC-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvordykk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774230522/Wx0UhxC-l.png" alt="Fiber Codewell Challenge.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Absolute positioning&lt;/li&gt;
&lt;li&gt;Flex/Grid&lt;/li&gt;
&lt;li&gt;Creating cards&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-spense-landing-page"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/challenges/608a7a859691700015db16c5"&gt;4- Spense Landing Page&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njShaJsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774490382/muMMf72dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njShaJsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774490382/muMMf72dw.png" alt="Spense Codewell Challenge.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Absolute positioning&lt;/li&gt;
&lt;li&gt;Flex/Grid&lt;/li&gt;
&lt;li&gt;Creating cards&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-nested-comments"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/challenges/608bc18ee0984a001540d7a6"&gt;5- Nested Comments&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dw72VCwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774571932/thMhkO9Dv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dw72VCwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774571932/thMhkO9Dv.png" alt="Comment Codewell Challenge.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Positioning&lt;/li&gt;
&lt;li&gt;Created nested comments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-remix-landing-page-with-darklight-mode"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/challenges/609f74e13167fa10b79b7b9b"&gt;6- Remix Landing Page with Dark/Light Mode&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf3dexBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774831538/iW12Ay2Aj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf3dexBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626774831538/iW12Ay2Aj.jpeg" alt="Remix Codewell Challenge.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating dark and light mode pages&lt;/li&gt;
&lt;li&gt;Work on a full sign up and onboarding process&lt;/li&gt;
&lt;li&gt;Creating blog cards&lt;/li&gt;
&lt;li&gt;Using variables and mixins to make your life easier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You can also see a walkthrough of Codewell's challenges on &lt;a href="https://www.youtube.com/channel/UCJBJ7trAPcTR3UmSbDDQywg"&gt;Youtube&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using VS Code Teams Toolkit Extension for Teams App Development</title>
      <author>Tomomi Imura üê± </author>
      <pubDate>Wed, 21 Jul 2021 22:12:08 +0000</pubDate>
      <link>https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g</link>
      <guid>https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g</guid>
      <description>&lt;p&gt;In my previous posts related to the Microsoft Teams developer platform, I introduced a few of Teams app types and how to build your first &lt;a href="https://dev.to/azure/beginners-guide-to-ms-teams-development-1-tabs-4e9k/?WT.mc_id=m365-9173-timura"&gt;tabs&lt;/a&gt;, &lt;a href="https://dev.to/azure/beginners-guide-to-ms-teams-development-2-bots-590m/?WT.mc_id=m365-9173-timura"&gt;bots&lt;/a&gt;, and &lt;a href="https://dev.to/azure/beginners-guide-to-ms-teams-development-3-messaging-action-5ejc?WT.mc_id=m365-9173-timura"&gt;message extensions&lt;/a&gt;. These tutorials instructed you to use &lt;strong&gt;App Studio&lt;/strong&gt; for manual configurations and minimal local setup, to focus on familiarizing you with the cencept of Teams app features.&lt;/p&gt;

&lt;p&gt;However, in this tutorial, I am showing another way to develop, using a newly introduced developer tool, called &lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension&amp;amp;WT.mc_id=m365-35901-timura"&gt;&lt;strong&gt;Teams Toolkit&lt;/strong&gt; (Preview)&lt;/a&gt; for VS Code, which was created to help you build and deploy Teams apps with integrated identity, access to cloud storage, data from &lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35901-timura"&gt;Microsoft Graph&lt;/a&gt;, and other services in Azure and M365. &lt;/p&gt;




&lt;p&gt;Before you begin, let's check if you have set up your working environment to develop on Teams. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  üìì Prerequisites
&lt;/h2&gt;

&lt;p&gt;First, make sure if your Teams client allows you to "sideload" custom apps. Check &lt;a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant#enable-custom-teams-apps-and-turn-on-custom-app-uploading"&gt;Enable custom Teams apps and turn on custom app uploading&lt;/a&gt; before you begin.  &lt;/p&gt;

&lt;p&gt;Or you can sign up for &lt;a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program/?WT.mc_id=m365-35901-timura"&gt;&lt;strong&gt;Microsoft 365 developer program&lt;/strong&gt;&lt;/a&gt;, a free, renewable subscription that comes with a developer tenant sandbox and sample data pack, like mock user data!&lt;/p&gt;

&lt;p&gt;And if you haven't using it already, get the latest version of &lt;a href="https://code.visualstudio.com/download"&gt;Visual Studio Code&lt;/a&gt;. (Earlier versions might not work with the toolkit.) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-installing-teams-toolkit"&gt;
  &lt;/a&gt;
  üñ• Installing Teams Toolkit
&lt;/h2&gt;

&lt;p&gt;Launch VS Code and now install an extension that helps you develop Teams apps.  &lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Extensions&lt;/strong&gt; icon on the left Activity Bar and install the &lt;strong&gt;Microsoft Teams Toolkit&lt;/strong&gt;. If you see two different versions of Teams, Toolkit, make sure to select the "Preview" version 2.x for this tutorial: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24hOLruY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oepw07irtbmr2gasa8mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24hOLruY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oepw07irtbmr2gasa8mv.png" alt="Screenshot - Find Toolkit extension in VS Code and install"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-tools"&gt;
  &lt;/a&gt;
  üîß Optional Tools
&lt;/h3&gt;

&lt;p&gt;The following tools will be installed by the Teams Toolkit extension as you need. &lt;em&gt;However, if using Linux (including WSL), you need to install these tools before using&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local"&gt;Azure Functions Core Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/download"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-new-project-with-toolkit"&gt;
  &lt;/a&gt;
  üß∞ Creating New Project with Toolkit
&lt;/h2&gt;

&lt;p&gt;Select &lt;strong&gt;Microsoft Teams&lt;/strong&gt; icon on the left Activity Bar and click &lt;strong&gt;Create New Project&lt;/strong&gt;. At the popup, select &lt;strong&gt;Create a new Teams app&lt;/strong&gt; : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BBD265kN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhx19vq46ir3xemavuoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BBD265kN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhx19vq46ir3xemavuoh.png" alt="Screenshot - Create a new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Select capabilities section, select one. For this tutorial (and for the next upcoming tutorial - TBD), let's pick &lt;strong&gt;Bot&lt;/strong&gt;, and deselect Tab and select &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajSOY3Zu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7xaqwjpc1nb1svqvnwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajSOY3Zu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7xaqwjpc1nb1svqvnwu.png" alt="Screenshot - Create a bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Bot registration section, select &lt;strong&gt;Create a new bot registration&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaWFuzK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91zqldpk9843yuxa02m5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaWFuzK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91zqldpk9843yuxa02m5.png" alt="Screenshot - register a bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Programming Language section, select &lt;strong&gt;JavaScript&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKvhOvLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv1o2j28xzi1pct4wsf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKvhOvLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv1o2j28xzi1pct4wsf2.png" alt="Screenshot - select JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select a workspace. A new folder will be created within your workspace for the project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3fq2Fq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j3fwp8z8ol2m5mtblty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3fq2Fq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j3fwp8z8ol2m5mtblty.png" alt="Screenshot - select workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter some name for your app. Press Enter to continue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3e0SJYGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beextn5rcy9eyxtofalq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3e0SJYGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beextn5rcy9eyxtofalq.png" alt="Screenshot - enter app name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will take some time to set it up for you.&lt;/p&gt;

&lt;p&gt;In this setup process, the toolkit is preparing these for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;registering an Azure Active Directory Application within the M365 tenant&lt;/li&gt;
&lt;li&gt;creating an app manifest&lt;/li&gt;
&lt;li&gt;running API locally using Azure Functions Core Tools to support your app&lt;/li&gt;
&lt;li&gt;installing and setting up &lt;em&gt;ngrok&lt;/em&gt;, to securely tunnel from your localhost to the Teams client&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-a-sample-bot-locally"&gt;
  &lt;/a&gt;
  ü§ñ Running a Sample Bot Locally
&lt;/h2&gt;

&lt;p&gt;Once your project is set up, take a look around and see how the template app looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0E9Q7I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqxamoak9u43z293wls0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0E9Q7I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqxamoak9u43z293wls0.png" alt="Screenshot - code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But for now, let's just build this sample app and run it locally. &lt;/p&gt;

&lt;p&gt;Press &lt;strong&gt;F5&lt;/strong&gt; key to enable the debug mode. &lt;/p&gt;

&lt;p&gt;Alternativelly, click the debug icon from the side menu:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KGVO70S_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay6zkkyuzm0q3qwlzkjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KGVO70S_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay6zkkyuzm0q3qwlzkjx.png" alt="Screenshot - debug and run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can take up a few minutes to complete as all dependencies are downloaded and the app is built for the first time.&lt;/p&gt;

&lt;p&gt;Once it is done, Teams web client will be automatically opened in a browser window. Install it locally by clicking &lt;strong&gt;Add&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Qwcb9IF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgi67d55de01zpucu0fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Qwcb9IF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgi67d55de01zpucu0fs.png" alt="Screenshot - Teams app being installed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the app is intalled, try the bot by typing a command or pick from the menu:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx2DcCIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz6purzuchvxw2cloa5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx2DcCIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz6purzuchvxw2cloa5u.png" alt="Screenshot - Teams app running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#granting-user-permissions"&gt;
  &lt;/a&gt;
  üîè Granting User Permissions
&lt;/h3&gt;

&lt;p&gt;When you try &lt;code&gt;show&lt;/code&gt; command, you should notice the app asks your permission to display your information like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcKNSec9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d2068p9bdq1amrntq5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcKNSec9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d2068p9bdq1amrntq5k.png" alt="Screenshot - Teams app permission"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and once you hit &lt;strong&gt;Continue&lt;/strong&gt;, it will open an authorization screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3bHmAbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r80t4cvr4fdxt9vyx3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3bHmAbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r80t4cvr4fdxt9vyx3k.png" alt="Alt Text - user authorization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, it means that your app (and any 3rd party apps!) just cannot automatically grab a user's information without the user's consent!&lt;/p&gt;




&lt;p&gt;In next tutorial, I will explain about Microsoft Graph to access user information and how you can implement it for Teams, so stay tuned üëã&lt;/p&gt;

</description>
      <category>msteams</category>
      <category>m365</category>
      <category>vscode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Webdev &amp; Research Projects</title>
      <author>Aiden Bai</author>
      <pubDate>Wed, 21 Jul 2021 21:38:08 +0000</pubDate>
      <link>https://dev.to/aidenybai/javascript-libraries-research-projects-4b0l</link>
      <guid>https://dev.to/aidenybai/javascript-libraries-research-projects-4b0l</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Plug: &lt;em&gt;I work on &lt;a href="https://github.com/aidenybai/million"&gt;&lt;strong&gt;Million.js&lt;/strong&gt;&lt;/a&gt;: &amp;lt;1kb virtual DOM - it's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a bit of a short post for me to share my thoughts about JavaScript libraries in research.&lt;/p&gt;

&lt;p&gt;I've been working on various research projects for the past few years in high school, ranging from &lt;a href="https://mst.aidenybai.com/?project=2"&gt;inventing practical methods of reducing microplastic pollution&lt;/a&gt; to creating &lt;a href="https://mst.aidenybai.com/?project=0"&gt;fully fledged JavaScript libraries&lt;/a&gt; and presenting at ISEF.&lt;/p&gt;

&lt;p&gt;From this experience, I've found that many web/JavaScript related research projects are subpar -- in fact, the entire web development field is downright untapped. Most research projects are unfinished, outdated, and so unpractical it has no use in real life.&lt;/p&gt;

&lt;p&gt;Web development needs a lot of improvement in the research space. This allows other researchers to gain insight into new technologies -- in my case, JavaScript libraries. We need more representation to explore more interesting topics, like WASM, compiler-based frameworks, and worker-based libraries.&lt;/p&gt;

&lt;p&gt;So... what should you take away from this? Well, if you have a substantial, practical, and useful library in the web development space, develop a research project in parallel to contribute to the great world of science.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>How To Use AugLy On Image, Video, Audio, and Text?</title>
      <author>Avi Arora</author>
      <pubDate>Wed, 21 Jul 2021 21:24:07 +0000</pubDate>
      <link>https://dev.to/aarora4/how-to-use-augly-on-image-video-audio-and-text-3m57</link>
      <guid>https://dev.to/aarora4/how-to-use-augly-on-image-video-audio-and-text-3m57</guid>
      <description>&lt;p&gt;Read the full article here: &lt;a href="https://analyticsarora.com/how-to-use-augly-on-image-video-audio-and-text/"&gt;https://analyticsarora.com/how-to-use-augly-on-image-video-audio-and-text/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Introduction to Data Augmentation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Facebook just recently released the AugLy package to the public domain. In this article, we will take a dive into the package. Just before data however, let's take some time to understand what data augmentation is about.¬†&lt;/p&gt;

&lt;p&gt;Many coding examples are shown below. You can view the complete notebook on &lt;a href="https://gist.github.com/aarora4/b77107083eb347dbc2224355828281de" rel="noreferrer noopener"&gt;Github&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is data augmentation?&lt;/li&gt;
&lt;li&gt;About AugLy&lt;/li&gt;
&lt;li&gt;How AugLy Works&lt;/li&gt;
&lt;li&gt;Why AugLy&lt;/li&gt;
&lt;li&gt;Image Data Augmentation&lt;/li&gt;
&lt;li&gt;Textual Data Augmentation&lt;/li&gt;
&lt;li&gt;Audio Data Augmentation&lt;/li&gt;
&lt;li&gt;Video Data Augmentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="About-AugLy"&gt;&lt;strong&gt;About AugLy&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;AugLy is a recently released open source project in python that can be used for data augmentation. The aim is to help AI models have an improved robustness during training and evaluation. Data augmentation in images can involve processes such as cropping of images or changing the pitch of a voice in an audio file. AugLy helps to automatically create such variations of the data.¬†&lt;/p&gt;

&lt;p&gt;According to Facebook, AugLy is the first of its kind tool in the open source domain that has several modalities such as images, videos, audio, texts, etc, which is immensely important for emerging AI research. It utilizes real operations that people do to images on Facebook and Instagram to generate over 100 variations of the data. For instance, overlapping emojis, texts or screenshots is a popular thing many individuals do and so AugLy performs such transformations for its data augmentation.¬†&lt;/p&gt;

&lt;p&gt;Another operation humans now perform is the combination of data of different modalities. For instance, the text 'you look good' may sound like a compliment. However, by adding an emoji, say the emoji of a clown, completely changes how the initial text was perceived. The 'compliment' would undoubtedly be seen as an insult. This is just the same way people take in information in today's world and AugLy takes those eventualities into cognizance. As more and more data modalities are combined, there is a need to ensure all the data augmentation and transformation can be done under a library or API.¬†&lt;/p&gt;

&lt;p&gt;Facebook iterates the data augmentation done by the library in consonance with the transformation users of Facebook, Instagram and WhatsApp typically do. Thus, it would be a particularly useful function for folks working on AI models for social media applications.¬†&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>augmentation</category>
    </item>
    <item>
      <title>DEV Community: Ableist Language &amp; Maintaining an Inclusive Environment</title>
      <author>Michael Tharrington (he/him)</author>
      <pubDate>Wed, 21 Jul 2021 21:09:53 +0000</pubDate>
      <link>https://dev.to/devteam/dev-community-ableist-language-maintaining-an-inclusive-environment-37g3</link>
      <guid>https://dev.to/devteam/dev-community-ableist-language-maintaining-an-inclusive-environment-37g3</guid>
      <description>&lt;p&gt;Hello DEV Community! üëã&lt;/p&gt;

&lt;p&gt;In recent months, you have probably seen a few posts from the DEV Community Success team ‚Äî posts like &lt;a href="https://dev.to/devteam/dev-community-how-to-avoid-plagiarism-4kia"&gt;this one&lt;/a&gt; on avoiding plagiarism from &lt;a class="mentioned-user" href="https://dev.to/itscasey"&gt;@itscasey&lt;/a&gt;
 and &lt;a href="https://dev.to/devteam/community-moderation-and-support-on-dev-7me"&gt;this one&lt;/a&gt; by yours truly from a few months back about the various community moderation roles and duties within our community as well as an overall framing of our Code of Conduct.  &lt;/p&gt;

&lt;p&gt;The goal of these posts is to equip you with more context about the decisions we make collectively as moderators/community managers. We hope that showing you all a bit of our thought process and talking about the specific ways that we strive to create a positive environment will be enlightening and encouraging, giving you folks a clear window to better understand how we go about building a kind and inclusive community.&lt;/p&gt;

&lt;p&gt;This post is no exception to the goals above. We hope it teaches you a bit more about our stance on ableist language while also providing some examples of inclusive language and how to use it.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ableism-and-ableist-language"&gt;
  &lt;/a&gt;
  What is Ableism and Ableist Language?
&lt;/h2&gt;

&lt;p&gt;At its core, ableism is discrimination against people with disabilities, rooted in the pervasive belief that people with more typical abilities are ‚Äúbetter‚Äù. Because this belief has persisted throughout society for centuries, ableism can be seen in nearly every community, industry, and facet of the world we live in. &lt;/p&gt;

&lt;p&gt;Ableist &lt;em&gt;language&lt;/em&gt; is a symptom of ableist beliefs in our society: it refers to the words, terms, and phrases we use, frequently unconsciously, that devalue and disenfranchise disabled individuals and communities. In the words of &lt;a href="https://autistichoya.net/"&gt;Lydia X. Z. Brown&lt;/a&gt; (American autistic disability rights activist, writer, attorney, and public speaker), linguistic ableism... &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;"Is part of an entire system of ableism, and doesn't exist simply by itself,"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Signifies how deeply ableist our societies and cultures are by how common and accepted ableism is in language."&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Reinforces and perpetuates ableist social norms that normalize violence and abuse against disabled people."&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Actively creates less safe spaces by re-traumatizing disabled people, and"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"Uses ableism to perpetuate other forms of oppression."&lt;/em&gt; 
[ &lt;a href="https://www.autistichoya.com/2014/02/violence-linguistic-ableism.html"&gt;source&lt;/a&gt; ]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many examples of ableist language to be aware of, but instead of sharing them there, we invite you to look at Lydia X. Z. Brown‚Äôs &lt;a href="https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html"&gt;glossary&lt;/a&gt; of ableist terms. &lt;/p&gt;

&lt;p&gt;DEV Community member &lt;a class="mentioned-user" href="https://dev.to/eevajonnapanula"&gt;@eevajonnapanula&lt;/a&gt;
 also has a fantastic and multi-faceted guide to avoiding ableism/ableist language and improving our approach to accessibility in this article: &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eevajonnapanula" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpXj8uGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CEbP3D7X--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/201004/e005d101-0ca8-4346-86eb-91bf162b30c4.png" alt="eevajonnapanula"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eevajonnapanula/let-s-talk-about-accessibility-c80" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let's Talk About Accessibility&lt;/h2&gt;
      &lt;h3&gt;Eevis (she/her) „Éª May 22 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#gaad&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#why-is-dev-concerned-about-ableist-language"&gt;
  &lt;/a&gt;
  Why is DEV Concerned About Ableist Language?
&lt;/h2&gt;

&lt;p&gt;Web accessibility is an increasingly visible topic in software development, which is a fantastic thing. Every day, we see so many informative and important posts under the &lt;a href="//dev.to/t/a11y"&gt;#a11y&lt;/a&gt; tag right here on DEV and we have the pleasure of learning so much from all of you on this topic. &lt;/p&gt;

&lt;p&gt;But while it‚Äôs critical that we use our position as builders of technology to include and advocate for &lt;em&gt;all&lt;/em&gt; people, it‚Äôs also important that we continuously examine how we demonstrate inclusivity in our daily behavior and communication with one another. &lt;/p&gt;

&lt;p&gt;By now, you probably know that DEV is a community and content-sharing platform for software developers. Because of this, all of us write and distribute words constantly. As moderators of this space, the DEV Community Success team and our site moderators are dedicated to ensuring all content shared here is inclusive and free of ableist language. We appreciate those of you who have &lt;a href="https://dev.to/report-abuse"&gt;submitted reports&lt;/a&gt; of this nature for our attention.&lt;/p&gt;

&lt;p&gt;When you signed up for DEV, you read our &lt;a href="https://dev.to/code-of-conduct"&gt;Code of Conduct&lt;/a&gt;. In it, we describe our commitment to making our community a harassment-free experience for everyone, ‚Äúregardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation‚Äù.&lt;/p&gt;

&lt;p&gt;Ableist language fits neatly into the category of activity that we take a stance against as moderators. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-enforce-the-use-of-ableist-language-on-dev"&gt;
  &lt;/a&gt;
  How We Enforce the Use of Ableist Language on DEV
&lt;/h2&gt;

&lt;p&gt;While the use of ableist language can often be used intentionally to harm others, it is frequently used unintentionally. In reviewing a glossary of ableist terms, you might even find a handful of words that you use regularly without any idea of their implications for disabled people. Your first reaction may even be to get a bit defensive; you may think &lt;em&gt;I'm not using these words to hurt anyone, so why should I censor myself in this way?&lt;/em&gt; We really encourage you to try to see past that initial defensive reaction and think empathetically about how using this language might negatively affect those around you.&lt;/p&gt;

&lt;p&gt;Please understand that our team of moderators considers all reports and examples of ableist language individually. In some cases, we might privately message someone a simple request to replace language that they‚Äôre using for more inclusive language instead. In others, we might decide to warn or suspend a community member if the behavior is found to be intended to harm or demean others. &lt;strong&gt;If you use a term on DEV that our moderators identify as ableist in nature, it does not make you a ‚Äúbad‚Äù person&lt;/strong&gt; and our goal is never to humiliate or alienate you for unintentional use of these terms. We simply share this information (or take steps to moderate an offending discussion or account) to maintain a healthy and safe environment for everyone here. üôÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inclusive-language-and-how-you-can-use-it"&gt;
  &lt;/a&gt;
  Inclusive Language and How You Can Use It.
&lt;/h2&gt;

&lt;p&gt;So, now that we‚Äôve covered ableist language, let‚Äôs talk about the inverse: inclusive language!&lt;/p&gt;

&lt;p&gt;As the Linguistic Society of America &lt;a href="https://www.linguisticsociety.org/resource/guidelines-inclusive-language"&gt;explains&lt;/a&gt;, inclusive language ‚Äúacknowledges diversity, conveys respect to all people, is sensitive to differences, and promotes equal opportunities.‚Äù Using inclusive language is something we should all strive to do and it‚Äôs one of the first bullet points listed in DEV‚Äôs Code of Conduct. &lt;/p&gt;

&lt;p&gt;If you think you might benefit from reviewing some examples of inclusive language and ableist language, there are a number of fantastic resources available to you right here on DEV and on the wider web. Here are a few that our team recommends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://counseling.northwestern.edu/blog/inclusive-language-guide/"&gt;Inclusive Language Guide&lt;/a&gt; ‚Äì Northwestern University&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html"&gt;Ableist Terms and Words to Avoid&lt;/a&gt; ‚Äì Lydia X. Z. Brown&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/meeshkan/how-to-remove-condescending-language-from-documentation-4a5p"&gt;How to remove condescending language from documentation&lt;/a&gt;  ‚Äì @meeshkan&lt;/li&gt;
&lt;li&gt;DevDiscuss S1E9: &lt;a href="https://dev.to/devteam/devdiscuss-episode-9-how-to-develop-for-neurodiversity-and-universal-accessibility-234b"&gt;How to Develop for Neurodiversity and Universal Accessibility&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you so much for being part of the DEV Community and helping us make this a place that all people can enjoy and feel supported by. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have any additional inclusive language resources to share? We‚Äôd love to hear from you in the comments!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>meta</category>
      <category>community</category>
    </item>
    <item>
      <title>Advanced Electron.js architecture</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 21 Jul 2021 20:53:34 +0000</pubDate>
      <link>https://dev.to/logrocket/advanced-electron-js-architecture-cj6</link>
      <guid>https://dev.to/logrocket/advanced-electron-js-architecture-cj6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/alainperkaz/"&gt;Alain Perkaz&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;A while back, I began working on a side project called &lt;a href="https://taggr.ai/"&gt;taggr&lt;/a&gt;, a completely offline, interactive photo exploration app. Developing taggr required me to navigate up from the lowest level of app complexity, trying out multiple architectural approaches and exploring the limitations of each.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll discuss the trade-offs of different architectural approaches for building desktop applications with &lt;a href="https://blog.logrocket.com/building-cross-platform-desktop-apps-with-svelte-electron-and-reloadly/"&gt;Electron&lt;/a&gt;. We‚Äôll analyze the shortcomings of each and introduce an architecture that aims to tackle them.&lt;/p&gt;

&lt;p&gt;The blueprint presented in this article is the outcome of an ongoing effort to find an approach that enables me, a solo developer, to manage the complexity of the app and meet performance requirements by leveraging standard web tooling. Let‚Äôs dive in!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can follow along with this &lt;a href="https://github.com/aperkaz/yarn-workspaces-electron"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-electronjs"&gt;
  &lt;/a&gt;
  Introduction to Electron.js
&lt;/h2&gt;

&lt;p&gt;In the last few years, JavaScript usage has dramatically increased within the browser realm, largely with the help of libraries and frameworks like React, Vue, and Angular. Similarly, we‚Äôve seen JavaScript grow beyond the browser with Node.js, Deno, and React Native.&lt;/p&gt;

&lt;p&gt;Electron.js is one of these frameworks. Since its release in 2013, &lt;a href="https://www.electronjs.org"&gt;Electron&lt;/a&gt; has grown to become one of the most-used frameworks for building cross-platform desktop applications. VS Code, Slack, Twitch, and many other popular desktop applications are built using Electron.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-electron-works"&gt;
  &lt;/a&gt;
  How Electron works
&lt;/h3&gt;

&lt;p&gt;Electron embeds Chromium and Node.js in its binary, enabling web developers to write desktop applications without writing native code. Electron implements a multi-process model composed of the main and renderer processes, which is similar to the Chromium browser.&lt;/p&gt;

&lt;p&gt;Each application‚Äôs window is a render process, which isolates the code execution at window level. The main process is responsible for the application lifecycle management, window management or render process, and native APIs like system menus, notifications, and tray icons.&lt;/p&gt;

&lt;p&gt;Each app is composed of one main process and a variable number of render processes. Render processes can be used for JavaScript code execution and can be hidden without a UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5Tqy_tg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/high-level-electron-arch-two-render-processes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5Tqy_tg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/high-level-electron-arch-two-render-processes.png" alt="High Level Electron Arch Two Render Processes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Electron is not the only option for building cross-platform desktop applications. Other &lt;a href="https://github.com/sudhakar3697/electron-alternatives"&gt;alternatives&lt;/a&gt; offer less resource consumption and lighter executables, but none share the community, learning resources, or the widespread adoption of Electron.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-electron"&gt;
  &lt;/a&gt;
  Getting started with Electron
&lt;/h2&gt;

&lt;p&gt;If you aren‚Äôt already familiar with Electron, it‚Äôs pretty easy to get started, especially because knowledge of Node.js and JavaScript is transferrable.&lt;/p&gt;

&lt;p&gt;Electron provides abstractions and a familiar language, reducing the time to market and development costs. Essentially, what Electron does for desktop app development is similar to what React Native does for mobile development.&lt;/p&gt;

&lt;p&gt;Electron also manages building and deploying app updates, making it easy to keep cross-platform apps in a synced version. You can achieve this with auto-updates and by loading remote assets at runtime.&lt;/p&gt;

&lt;p&gt;However, the benefits of Electron are not without their trade-offs. Electron ships with Chromium and Node.js environments, causing an Electron app to consume more resources than its natively implemented counterparts. As a result, there are mixed opinions about Electron‚Äôs viability.&lt;/p&gt;

&lt;p&gt;In addition, complex Electron apps present performance and developer experience challenges related to the underlying architecture. Let‚Äôs consider these trade-offs in depth by analyzing three different app examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appspecific-tradeoffs"&gt;
  &lt;/a&gt;
  App-specific tradeoffs
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs examine the high-level architectures of three fictional apps with varying complexity. Bear in mind that our app analysis does not aim to be exhaustive, rather, it aims to tease potential apps that you can build with Electron.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lowcomplexity-app"&gt;
  &lt;/a&gt;
  Low-complexity app
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs start with a low-complexity app. For our example, we‚Äôll consider packaging a webpage as a desktop application. Examples could include instant messaging apps, data analysis dashboards, and online streaming apps.&lt;/p&gt;

&lt;p&gt;Many businesses provide desktop versions of their successful web-based apps, making ours a common use case. We‚Äôll use Electron to run the app on Chromium, &lt;a href="https://www.electronjs.org/docs/tutorial/performance#5-unnecessary-polyfills"&gt;eliminating unnecessary polyfills&lt;/a&gt; and providing a unified UI instead of a heterogeneous browser landscape.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lowcomplexity-app-main-features"&gt;
  &lt;/a&gt;
  Low-complexity app main features:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  Code will be shared between the web app and the desktop app&lt;/li&gt;
&lt;li&gt;  The update cycle will be shared between the web app and desktop app&lt;/li&gt;
&lt;li&gt;  The desktop app will load the same assets as the web app and render them within Chromium&lt;/li&gt;
&lt;li&gt;  The backend (if applicable) will stay unchanged&lt;/li&gt;
&lt;li&gt;  The backend will be accessed the same way from both the desktop and web app&lt;/li&gt;
&lt;li&gt;  Features dependent on browser support, like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;WebWorkers&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/WebGL"&gt;WebGL&lt;/a&gt;, will function cross-platform without changes&lt;/li&gt;
&lt;li&gt;  We‚Äôll use standard web development tooling&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#highlevel-architecture-for-lowcomplexity-app"&gt;
  &lt;/a&gt;
  High-level architecture for low-complexity app
&lt;/h4&gt;

&lt;p&gt;As an example architecture, we‚Äôll use a desktop app for the &lt;a href="https://web.telegram.org"&gt;Telegram chat&lt;/a&gt; web app. Electron will act as a wrapper for the existing web app without requiring any changes to the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_Hn6tQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/low-complexity-app-electron-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_Hn6tQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/low-complexity-app-electron-architecture.png" alt="Low Complexity App Electron Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting up Electron is easy for this type of app! There are no changes needed at the web app codebase level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mediumcomplexity-app"&gt;
  &lt;/a&gt;
  Medium-complexity app
&lt;/h3&gt;

&lt;p&gt;A music streaming app like Spotify, which offers offline streaming support using a local cache, is a typical example of an app with a medium level of complexity. The desktop app can use Electron to build a local cache layer.&lt;/p&gt;

&lt;p&gt;Similar to low-complexity apps, a medium-complexity app may also complement a web app. The main difference is the ability to provide offline support. Therefore, these apps are conceptually related to progressive web apps (&lt;a href="https://blog.logrocket.com/why-you-should-turn-your-app-into-a-pwa/"&gt;PWAs&lt;/a&gt;) with offline support.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  Most of the code can be shared between web and desktop apps (i.e., in a UI layer)&lt;/li&gt;
&lt;li&gt;  The desktop app will have a local cache implementation that will intercept the backend requests, populate the cache, and serve cached results when offline&lt;/li&gt;
&lt;li&gt;  We need to use high-level Electron APIs to check if the desktop app is online or offline&lt;/li&gt;
&lt;li&gt;  The update cycle is not necessarily shared between the web and desktop. The desktop will load the UI from static files using its offline UI and create a custom request layer with the cache&lt;/li&gt;
&lt;li&gt;  You can leverage standard web development tooling with the exception of the custom request module, which must be developed and adjusted for Electron&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#highlevel-architecture"&gt;
  &lt;/a&gt;
  High-level architecture
&lt;/h4&gt;

&lt;p&gt;Let‚Äôs imagine that our streaming app plays a song of the day. If there is no internet connection, it will serve the available cached song.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiMafB8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/medium-complexity-app-electron-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiMafB8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/medium-complexity-app-electron-architecture.png" alt="Medium Complexity App Electron Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As outlined in the schema above, the UI will be served from local assets instead of a CDN, and the request layer has to be customized to support caching. While the example is relatively simple, the code-sharing and caching requirements will eventually increase in complexity, requiring custom Electron code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highcomplexity-app"&gt;
  &lt;/a&gt;
  High-complexity app
&lt;/h3&gt;

&lt;p&gt;For the highest level of complexity, let‚Äôs look at a batch image processing app like &lt;a href="https://github.com/lovell/sharp"&gt;sharp&lt;/a&gt;. The app must be able to process thousands of images and work entirely offline.&lt;/p&gt;

&lt;p&gt;Offline apps are significantly different from the previous two examples. Specifically, the typical backend workloads, like image processing, will execute within Electron by creating an offline application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Most of our code will be custom for the desktop app&lt;/li&gt;
&lt;li&gt;  The app will have its own release cycle&lt;/li&gt;
&lt;li&gt;  The backend will run from within Electron (i.e., from a render process)&lt;/li&gt;
&lt;li&gt;  Standard web development tooling can be used, but it depends on the defined architecture&lt;/li&gt;
&lt;li&gt;  We may need to use native modules like database access, image processing, or machine learning&lt;/li&gt;
&lt;li&gt;  Lower-level Electron API access may be needed from multiple processes, especially for &lt;a href="https://blog.logrocket.com/handling-interprocess-communications-in-electron-applications-like-a-pro/"&gt;interprocess communications&lt;/a&gt; (IPC)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#highlevel-architecture"&gt;
  &lt;/a&gt;
  High-level architecture
&lt;/h4&gt;

&lt;p&gt;For the architecture proposal, let‚Äôs consider the offline image processing app described above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5JKD5e4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/high-complexity-electron-app-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5JKD5e4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/high-complexity-electron-app-architecture.png" alt="High Complexity Electron App Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The schema structures the app following the Electron documentation, which brings some limitations. For one, there is noticeable performance degradation when running the long-lived, CPU-intensive operations in a hidden renderer process.&lt;/p&gt;

&lt;p&gt;Note that you should never run the operations &lt;a href="https://www.electronjs.org/docs/tutorial/performance#3-blocking-the-main-process"&gt;in the main process&lt;/a&gt;. Doing so may block the main process, causing your application to freeze or crash.&lt;/p&gt;

&lt;p&gt;Additionally, coupling the business logic and transport layers to Electron APIs limits the options to reuse standard web development tooling. Communications between the main processes and renderer processes use IPC, which requires a main process roundtrip when communicating between two render processes.&lt;/p&gt;

&lt;p&gt;If your app falls in the low or medium-complexity categories, congrats! Many of the headaches that arise in offline apps won't apply to you. However, if your app requirements fall in the high complexity range, there is still hope!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-architecture-proposal"&gt;
  &lt;/a&gt;
  Advanced architecture proposal
&lt;/h2&gt;

&lt;p&gt;When we consider issues in offline apps like performance degradation, roundtrip communication between render processes, and the overall developer experience, we need a specialized architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FCh2IkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/advanced-modularized-architecture-proposal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FCh2IkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/advanced-modularized-architecture-proposal.png" alt="Advanced Modularized Architecture Proposal"&gt;&lt;/a&gt; The proposed architecture is built on the following pillars:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The code shared between the frontend and the backend is extracted into a single module&lt;/li&gt;
&lt;li&gt;  The UI code is Electron agnostic, so web development best practices can be applied&lt;/li&gt;
&lt;li&gt;  The UI and page routing are built using controlled components and a centralized app state&lt;/li&gt;
&lt;li&gt;  The backend is run from a separate Node.js process&lt;/li&gt;
&lt;li&gt;  The frontend and backend modules communicate through message passing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs go through each of the modules in detail!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: parts of the stack are chosen purely due to personal preference and are interchangeable. For example, you can swap TypeScript for JavaScript, React for Vue, Redux for MobX, or npm packages for code sharing instead of Yarn workspaces. As long as the pillars mentioned above are respected, you have freedom of choice across the stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#shared-module"&gt;
  &lt;/a&gt;
  Shared module
&lt;/h2&gt;

&lt;p&gt;The shared module is responsible for the code and types shared by both the frontend and backend modules. It enables you to develop both modules as separate entities while still sharing the domain-relevant code and types.&lt;/p&gt;

&lt;p&gt;Codesharing is achieved using &lt;a href="https://classic.yarnpkg.com/en/docs/workspaces/"&gt;Yarn workspaces&lt;/a&gt;, a simple alternative to publishing the module as an npm package, releasing, and versioning it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  TypeScript codebase&lt;/li&gt;
&lt;li&gt;  Typings for message passing communication: contains payloads and message handlers required in both the frontend and backend&lt;/li&gt;
&lt;li&gt;  Domain models and entities&lt;/li&gt;
&lt;li&gt;  Shared utilities like logging and event reporting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#frontend-module"&gt;
  &lt;/a&gt;
  Frontend module
&lt;/h2&gt;

&lt;p&gt;The frontend module is responsible for all things UI. It contains the components and animations of our app but not the business logic. In production, Electron serves it from generated static files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  TypeScript codebase with access to the shared module&lt;/li&gt;
&lt;li&gt;  Uses React for building the user interface with Create React App as a template&lt;/li&gt;
&lt;li&gt;  Uses Redux as the state manager, which deterministically defines the UI‚Äôs render state&lt;/li&gt;
&lt;li&gt;  Communication with the backend through message passing: the frontend exposes a message handler that listens for messages from the backend and modifies the Redux store accordingly&lt;/li&gt;
&lt;li&gt;  Component development in isolation using Storybook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backend-with-electron-module"&gt;
  &lt;/a&gt;
  Backend with Electron module
&lt;/h2&gt;

&lt;p&gt;The backend module contains the backend codebase and the Electron setup code. The business logic and long-running operations, like image processing, will run in a separate Node.js process so that the UI doesn't suffer from degraded performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  TypeScript codebase, with access to the shared module&lt;/li&gt;
&lt;li&gt;  The backend runs as a forked Node.js process, which improves performance for long-running and computationally expensive tasks&lt;/li&gt;
&lt;li&gt;  Access to native dependencies&lt;/li&gt;
&lt;li&gt;  Performs a pre-build step that matches native dependencies with the Electron version&lt;/li&gt;
&lt;li&gt;  Contains the required Electron configuration and packaging scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#communication-layer"&gt;
  &lt;/a&gt;
  Communication layer
&lt;/h2&gt;

&lt;p&gt;The frontend and backend communicate using interprocess message passing with &lt;a href="https://github.com/RIAEvangelist/node-ipc"&gt;&lt;code&gt;node-ipc&lt;/code&gt;&lt;/a&gt;. The message passing allows for &lt;code&gt;async&lt;/code&gt; and event-based communication.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; communication is best suited for short-lived operations. The frontend can wait until the backend processes the message to get the result right away.&lt;/p&gt;

&lt;p&gt;Event-based communication is better suited for long-lived operations, like batch processing. As the task processes in the backend, it sends events that will modify the frontend‚Äôs app state in Redux. The backend can asynchronously complete long-running tasks and periodically update the progress displayed by the UI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;node-ipc&lt;/code&gt; as the communication library&lt;/li&gt;
&lt;li&gt;  Fully typed message payloads and handlers in the shared module&lt;/li&gt;
&lt;li&gt;  Async and message-based communication support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Electron is a great choice for building cross-platform desktop applications using different web technologies. Although Electron is easy to use in low-complexity apps, performance and developer experience limitations will surface as the complexity increases.&lt;/p&gt;

&lt;p&gt;The proposed architecture aims to provide a sound conceptual foundation for high complexity apps. Of course, it may need to be extended depending on the use case, but I‚Äôve found that it serves as a good foundation for many types of apps.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Angular Vs React ‚Äì The Right Pick For Your Next Project</title>
      <author>GravelSoft</author>
      <pubDate>Wed, 21 Jul 2021 20:46:10 +0000</pubDate>
      <link>https://dev.to/gravelsoft/angular-vs-react-the-right-pick-for-your-next-project-25he</link>
      <guid>https://dev.to/gravelsoft/angular-vs-react-the-right-pick-for-your-next-project-25he</guid>
      <description>&lt;p&gt;JavaScript structures are very common in the advancement commercial center. Such systems are stages which give constructions of utilization plan to creating web applications dependent on JavaScript. &lt;/p&gt;

&lt;p&gt;Then again, the JavaScript libraries are an assortment of capacities and segments that a designer can use to insert in the code. &lt;/p&gt;

&lt;p&gt;A Framework can be an assortment of JavaScript Libraries which give a predefined code to be utilized while creating projects.Since JavaScript is the most every now and again utilized programming language for fostering a site, with not a single other tough substitution to be seen, the structures worked to help these web applications are likewise a significant number. &lt;/p&gt;

&lt;p&gt;A large portion of the significant endeavors managing web administrations have fostered their own altered systems and showcased it further to empower simple arrangement with their code and to give a stage to joint effort with their interfacing applications. Like Angular by Google, React by Facebook, Nodejs by Joyent Cloud Services, to give some examples. &lt;/p&gt;

&lt;p&gt;While the system gives you a fundamental construction through formats to assemble a skeleton for your Web applications, this construction can be restricting to many plan components. JavaScript Libraries give you a variety of activities, without restricting you to a skeleton, yet it implies that you need to fabricate your construction without any preparation. &lt;/p&gt;

&lt;p&gt;Such is the quandary undertakings face when they approach choosing the innovation that ought to be supporting their Web entrances. Two of the significant contenders of this contention are Angular JS versus React JS &lt;/p&gt;

&lt;p&gt;What is Angular? &lt;br&gt;
Precise is a Frontend web structure dependent on JavaScript, which is significantly kept up with by Google. Since Angular is an open source structure, we see a couple of different Communities adding to its turn of events. &lt;/p&gt;

&lt;p&gt;HTML is utilized widely for creating static site pages, yet with regards to having a web application and Dynamic pages, HTML is extremely restricting. Rakish JS grows HTML, to work with ease in building single-page web applications. It does as such by broadening the HTML credits with ng-mandates which is an 'ng' prefix to the HTML ascribes. &lt;/p&gt;

&lt;p&gt;With respect to model, the ng-application order characterizes the beginning of an AngularJS application, ng-model mandate ties the information, select, text region to a property or application information, ng-regulator connects a regulator class to the view. This content is started when the page loads. &lt;/p&gt;

&lt;p&gt;Precise is adaptable and licenses joining of different libraries inside it to work with extensibility.The current rendition of AngularJS is 8 which was as of late delivered on May 28, 2019 and is on Active help. &lt;/p&gt;

&lt;p&gt;What Is React? &lt;br&gt;
Not at all like Angular, React JS is a JavaScript library made open source by Facebook in 2013. It was at first carried out on the Facebook newsfeed in 2011 and later on the Instagram site in 2012, preceding making open to people in general. Respond Native is a variation of React which grants local Android, iOS and UWP improvement with React. Respond is utilized for Single-page dynamic web and portable applications. &lt;/p&gt;

&lt;p&gt;Respond presents another prearranging language JSX which utilizes a variation of XML sentence structure, which makes it simpler to work with. However, JSX isn't obligatory for React and we can utilize the standard JavaScript to code. &lt;/p&gt;

&lt;p&gt;Respond is fundamentally well known for its idea of Virtual DOM which digresses from the standard DOM and works with quicker updates.The most recent variant of React is 16.8 delivered on Feb 6, 2019. &lt;/p&gt;

&lt;p&gt;Size of Application &lt;br&gt;
Being a Framework, Angular is proposed while building Enterprise Solutions. The Built-in apparatuses of Angular make it simpler to insert parts without referring to outer libraries or APIs. With the redid highlights of TypeScript, it is achievable for coding enormous scope projects. For big business level applications as the code develops, Typescripts makes it simple to be coordinated in modules subsequently working with better administration. &lt;/p&gt;

&lt;p&gt;Since React JS is a library, it doesn't offer standard layouts for building a construction. To defeat this, you need to rely upon the open-source commitments made by Community individuals. &lt;/p&gt;

&lt;p&gt;Because of the absence of standard layouts and parts, the time taken for improvement for big business applications utilizing React is more than that of Angular. &lt;/p&gt;

&lt;p&gt;Respond is more helpful while creating lightweight applications, where each single page application can be made physically without the utilization of any standard bundles. Utilizing Angular would be an over the top excess for lightweight applications, where it would restrict the adaptability and increment the size of the task. &lt;/p&gt;

&lt;p&gt;Speed of Application &lt;br&gt;
Because of its Virtual DOM engineering, React is viewed as quicker contrasted with Angular. Likewise, the relative task size created in Angular is imperceptibly higher. &lt;/p&gt;

&lt;p&gt;Refreshing the Virtual DOM is a lot quicker than the standard DOM.In React, the Virtual DOM goes about as a channel between the genuine DOM alteration, to distinguish the real parts adjusted. It then, at that point gradually refreshes just those segments that have been changed as opposed to refreshing the whole DOM, henceforth saving time. &lt;/p&gt;

&lt;p&gt;Two-way Data Binding &lt;br&gt;
The MVC design gives a stage wherein the Model and the View are continually synchronized. Any progressions in the Data are shipped off the Model and the View adjusts to it. To work with this element, designers need to compose extra code to keep the Model and View in a state of harmony. &lt;/p&gt;

&lt;p&gt;This gets overwhelmed with Angular as it is based on the MVC engineering. It likewise keeps the engineers from going into any extra difficulty to synchronize the view with the information. &lt;/p&gt;

&lt;p&gt;Respond is considered as the 'View' in the MVC model and it doesn't work with bi-directional correspondence. To conquer something very similar, Facebook has concocted Flux which later has been improved into Redux by Dan Abramov and Andrew Clark. These work with building the UI or customer side web applications. Despite the fact that they don't give bi-directional correspondence like MVC, they point towards settling the intricacy that starts from the persistent updates in MVC. Henceforth, projects that request a more straightforward engineering can consider React as their simple go-to stage. &lt;/p&gt;

&lt;p&gt;Expectation to absorb information &lt;br&gt;
Despite the fact that all web engineers are familiar with the JavaScript Framework, it is an imperative to appraise the time it takes for a designer to gain proficiency with the highlights presented with a Framework or Library. &lt;/p&gt;

&lt;p&gt;With its NG mandate and typescript, Angular is considered to have a lofty expectation to learn and adapt. Indeed, even with the presentation of TypeScript which is extremely close to JavaScript, the system is exceptionally inflexible and stubborn thus is hard to adjust to the subtleties. It is hard to cover all highlights and alternatives accessible, and one needs to explore as the prerequisite requests. &lt;/p&gt;

&lt;p&gt;Respond JS library concocts successive updates which must be adjusted to, by the engineers, yet the designers consider React simple to learn at work in case you are familiar with JavaScript.Gradually you can advance from learning React to Flux and Redux. &lt;/p&gt;

&lt;p&gt;Use insights &lt;br&gt;
As per the insights given by Statista , among the most utilized JavaScript structures, libraries, and devices by designers around the world, Angular includes 36.9% of the Market. It is promptly trailed by React at 27.8% which is continuously moving as far as notoriety and convenience. NodeJS possesses the best position in these measurements as the most preferred structure at 49.6%.&lt;/p&gt;

&lt;p&gt;Local area Support &lt;br&gt;
Being a straightforward item, React library has significant Community supporters of it. With the presentation of React Native, its adaptability has reached out over cell phones with a segregated arrangement of libraries. &lt;/p&gt;

&lt;p&gt;Precise has negligible donors contrasted with React, however since it a result of Google, they have many Developer apparatuses that help Angular, consequently facilitating the improvement interaction. &lt;/p&gt;

&lt;p&gt;To summarize, there could never be a one-size-fits-all answer for your undertakings. Every stage has its upsides and downsides which can be a significant point in your dynamic interaction. It is prudent to learn both prior to settling on a choice; which gives designers a hang of the time every stage burns-through, and the size the venture results in. Having an encounter of these systems close by, you can respond to the accompanying inquiries regarding your venture. &lt;/p&gt;

&lt;p&gt;Size of the undertaking? &lt;br&gt;
The quantity of designers chipping away at it. &lt;br&gt;
How experienced are your designers? &lt;br&gt;
What stages does the application have to scale to ‚Äì Web, work area, portable? &lt;br&gt;
What number of instant parts do you require prior to beginning? &lt;br&gt;
Is the usefulness of the application obviously characterized and what highlights does it require? &lt;/p&gt;

&lt;p&gt;The wrong methodology here is proceed with a standard system for all activities, either due to related knowledge in it or as you have encountered engineers at hand.Based on the appropriate responses you can proceed with choosing which structure Angular versus React,is best to be utilized for your present undertaking and post for the right specialists who have a careful information on the advancement platform.JavaScript systems are extremely common in the improvement commercial center. Such systems are stages which give constructions of utilization plan to creating web applications dependent on JavaScript. &lt;br&gt;
&lt;a href="https://gravelsoft.com/blog/f/angular-vs-react-%E2%80%93-the-right-pick-for-your-next-project"&gt;https://gravelsoft.com/blog/f/angular-vs-react-%E2%80%93-the-right-pick-for-your-next-project&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to add content recommendations to website</title>
      <author>Fischerbach</author>
      <pubDate>Wed, 21 Jul 2021 20:24:47 +0000</pubDate>
      <link>https://dev.to/fischerbach/how-to-add-content-recommendations-to-website-365</link>
      <guid>https://dev.to/fischerbach/how-to-add-content-recommendations-to-website-365</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-add-content-recommendations-to-website"&gt;
  &lt;/a&gt;
  How to add content recommendations to website
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#show-users-what-they-want-even-though-they-dont-even-know-what-they-want"&gt;
  &lt;/a&gt;
  Show users what they want (even though they don‚Äôt even know what they want)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35rG1ZUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5120/1%2AmYegKS7KJR0FptJH8MyBlA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35rG1ZUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5120/1%2AmYegKS7KJR0FptJH8MyBlA.png" alt="*(Pic. by author. All logos and posters belong to their respective owners and are used for informational or editorial purposes to identify specific products and services.)*"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personalized content proposals are now an established element of the Web. Most social media serve content to their users based on multiple touchpoints of the user‚Äôs interaction with the platform. (Some of them also track the user outside their pages, which has caused a whole discussion about privacy and &lt;a href="https://medium.datadriveninvestor.com/alternatives-to-third-party-cookies-in-2020-857609f8f2bb"&gt;blocking cross-domain tracking&lt;/a&gt;.) Usually, the aim is to increase some interaction rate (i.e. measured by the number of visits, purchases or other actions per user).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lASsgymF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2344/0%2ACKkBfbeVfGs9Fqs7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lASsgymF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2344/0%2ACKkBfbeVfGs9Fqs7" alt="*Amazon utilizes the behaviour of customers to make predictions about what similar customers would like. Can you guess for which book these recommendations appear on? (source: Amazon.com)*"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Online shops increase their revenue with clever recommendations of products that appear at every stage of the sales funnel. But non-retail sites can also benefit from the advantages of recommender systems. If you run a website that provides content, you can use content recommendations to maintain user attention and increase visits.&lt;/p&gt;

&lt;p&gt;In this article, using an example of a movie database web site, I‚Äôll show you how to add content recommendations to your website. We‚Äôll discuss basic approaches to this and then use a SaaS called Pipeless, which allows you to create a database with built-in recommendation algorithms.&lt;/p&gt;

&lt;p&gt;Read More:&lt;br&gt;
&lt;a href="https://levelup.gitconnected.com/how-to-add-content-recommendations-to-a-website-be107c336117"&gt;https://levelup.gitconnected.com/how-to-add-content-recommendations-to-a-website-be107c336117&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What redesigning our product taught us about optimizing video call performance in React</title>
      <author>Jess Mitchell</author>
      <pubDate>Wed, 21 Jul 2021 20:18:19 +0000</pubDate>
      <link>https://dev.to/trydaily/what-redesigning-our-product-taught-us-about-optimizing-video-call-performance-in-react-4hl1</link>
      <guid>https://dev.to/trydaily/what-redesigning-our-product-taught-us-about-optimizing-video-call-performance-in-react-4hl1</guid>
      <description>&lt;p&gt;&lt;em&gt;Recently, one of Daily‚Äôs front-end engineers, Christian Stuff, internally shared several performance improvement tips he discovered while working on Daily Prebuilt. The following discussion is based on that list.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;One of our primary goals at Daily is to help our customers embed reliable and easy-to-use video calls into their apps in the shortest developer time possible. One way we‚Äôve found to do this is by offering &lt;a href="https://www.daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Daily Prebuilt is Daily's ready-to-use, &lt;a href="https://docs.daily.co/docs/embed-the-daily-prebuilt-ui"&gt;embeddable video chat&lt;/a&gt; that can be added to any app with just a few lines of code. This is in comparison to our &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-createcallobject"&gt;call object&lt;/a&gt; option, which enables customers to build their own custom video calls with our core APIs. &lt;/p&gt;

&lt;p&gt;Basically, if Daily Prebuilt is your favourite meal served at a restaurant, Daily's &lt;a href="https://docs.daily.co/docs/build-a-custom-video-chat-interface"&gt;customizable call object&lt;/a&gt; is a bag of groceries and spices with a recipe included. Which one you choose ultimately depends on what your goal is and how many of your own flavours you want to include.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4lOqPki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a585g6skqj6ewx8191zk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4lOqPki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a585g6skqj6ewx8191zk.jpeg" alt="Daily Prebuilt's UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redesigning-and-improving-daily-prebuilt"&gt;
  &lt;/a&gt;
  Redesigning and improving Daily Prebuilt
&lt;/h2&gt;

&lt;p&gt;Recently, we decided to redesign &lt;a href="https://www.daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt; to incorporate some helpful customer feedback we knew would substantially improve Daily Prebuilt‚Äôs UX.&lt;/p&gt;

&lt;p&gt;What some customers might not realize is that Daily Prebuilt is actually built with our &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-createcallobject"&gt;call object&lt;/a&gt;. (Yes, we are one of our own customers!) This new, redesigned version also gave us the opportunity to do a deeper dive on the most performant ways to implement Daily‚Äôs &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-createcallobject"&gt;call object&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Along the way, we‚Äôve found several solutions to drastically improve Daily Prebuilt‚Äôs performance, especially on mobile devices and the problem child of browsers for WebRTC: Safari.&lt;/p&gt;

&lt;p&gt;To help our customers avoid having to learn these lessons on their own, we‚Äôll be covering our most important solutions related to improving performance while using Daily‚Äôs call object mode. Many of these are also applicable to WebRTC development in general.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-will-find-this-tutorial-helpful"&gt;
  &lt;/a&gt;
  Who will find this tutorial helpful?
&lt;/h2&gt;

&lt;p&gt;You‚Äôll find this tutorial useful if you're:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interested in learning more about browser quirks related to video calls&lt;/li&gt;
&lt;li&gt;A current Daily customer building a custom video chat app&lt;/li&gt;
&lt;li&gt;Shopping around for a video API to help you build a custom video experience&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#who-will-find-this-tutorial-helpful-tech-stack-edition"&gt;
  &lt;/a&gt;
  Who will find this tutorial helpful?: Tech stack edition
&lt;/h2&gt;

&lt;p&gt;We‚Äôre fond of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; at Daily, but these performance tips are mostly front-end framework-agnostic. Regardless of what you‚Äôre building your web app with, you can apply these tips to get the most out of your Daily video calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#excuse-me-sir-what-exactly-is-the-problem"&gt;
  &lt;/a&gt;
  Excuse me, sir: What exactly is the problem?
&lt;/h2&gt;

&lt;p&gt;Before we dive into all the performance optimizations we used to improve Daily Prebuilt, let‚Äôs first take a look at how we knew we had a problem. &lt;/p&gt;

&lt;p&gt;One of the main motivators for improving performance has been due to our push to increase call sizes. (1000 participants now, have you heard? üòé) All these additional participants create a new problem: loading participant media. For example, if you‚Äôre in a Daily call in speaker mode and scroll through the participant list, videos should load efficiently as they come into view to create a positive user experience. &lt;/p&gt;

&lt;p&gt;Here‚Äôs an example of participant bar scrolling in one of the earliest internal versions of the new Daily Prebuilt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Khn7aWwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rds0v06a36yzkpybetdc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Khn7aWwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rds0v06a36yzkpybetdc.gif" alt="Video lagging while scrolling an early version of Daily Prebuilt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We felt the participant bar needed to load the videos faster and more reliably, as a user scrolls through. (Imagine that call with 1000 participants; no one‚Äôs got time for that!)&lt;/p&gt;

&lt;p&gt;For comparison‚Äôs sake, let‚Äôs take a look at the participant bar after we implemented the following performance improvements. It quickly recovers from a scroll much more efficiently. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhuuPMes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lmw87ys5axeu5w6yac5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhuuPMes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lmw87ys5axeu5w6yac5.gif" alt="Quick video loading on scroll after making performance improvements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example of slow performance while the new Daily Prebuilt was in development was on mobile. We noticed issues like flickering videos, crackling audio, and delays to user interactions, like button presses. (We might have even heard the word ‚Äújanky‚Äù a couple times during internal testing and cringed.)&lt;/p&gt;

&lt;p&gt;We knew we could do better!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#improving-performance-in-video-call-apps"&gt;
  &lt;/a&gt;
  Improving performance in video call apps
&lt;/h2&gt;

&lt;p&gt;In this tutorial we'll cover 7 main lessons we learned about improving performance in a custom video chat app. These lessons include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Batching&lt;/strong&gt; &lt;code&gt;daily-js&lt;/code&gt; events, i.e. participant-related events that trigger re-renders&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Manually subscribing&lt;/strong&gt; to media tracks in specific use cases&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;virtual scrolling&lt;/strong&gt; in scrollable elements containing videos&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;pagination&lt;/strong&gt; to limit the number of videos shown at a time&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memoizing&lt;/strong&gt; elements prone to re-renders&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reducing&lt;/strong&gt; how often media elements are added and removed from the DOM&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Checking if a video is paused&lt;/strong&gt; before playing it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-batching-dailyjs-events"&gt;
  &lt;/a&gt;
  1. Batching daily-js events
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.daily.co/reference#using-the-dailyco-front-end-library"&gt;daily-js&lt;/a&gt; is an &lt;a href="https://docs.daily.co/reference#events"&gt;events-based&lt;/a&gt; library. Whenever a participant joins a call, updates their device, becomes the active speaker, or anything in between, &lt;code&gt;daily-js&lt;/code&gt; sends an event so you can decide how to update your call UI. (Check out our docs to see a full &lt;a href="https://docs.daily.co/reference#events"&gt;list of Daily events&lt;/a&gt;. üëÄ)&lt;/p&gt;

&lt;p&gt;For example, you can use the &lt;code&gt;participant-joined&lt;/code&gt; event if you want to listen for when a new participant joins the current call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// add another video tile for the new participant &lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The event payload itself will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participantJoinedEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;callFrameId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;16257681634230.996506976694651&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;audioTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cam_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;joined_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thu Jul 08 2021 14:18:21 GMT-0400 (Eastern Daylight Time)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;screenTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;screen_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d8c55cfb-5eff-4f92-ccee-004989f6b077&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;screenVideo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;screenAudio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d8c55cfb-5eff-4f92-ccee-004989f6b077&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;will_eject_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wed Dec 31 1969 19:00:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a bunch of people all join a meeting you‚Äôre in at the same time, you‚Äôll receive a &lt;code&gt;participant-joined&lt;/code&gt; event for each and every one of them. It can be a lot to handle in calls with dozens (or hundreds!) of people! üò±&lt;/p&gt;

&lt;p&gt;Now let‚Äôs say you‚Äôre updating a data store for each of these &lt;code&gt;participant-joined&lt;/code&gt; events, such as updating a &lt;code&gt;participants&lt;/code&gt; array in a React store. Updating the state for every &lt;code&gt;participant-joined&lt;/code&gt; event would trigger a re-render for each one, which is not ideal. Instead, you can avoid this by batching &lt;code&gt;participant-joined&lt;/code&gt; events and only update your state every 250ms with all the newly joined participants at once.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at how this could look in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinBatchInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Update participants list in React state based on the `joinedSubscriptionQueue` array of new participants&lt;/span&gt;
  &lt;span class="c1"&gt;// Reset queue&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this solution, the &lt;code&gt;participant-joined&lt;/code&gt; event triggers the &lt;code&gt;joinedSubscriptionQueue&lt;/code&gt; to update. Then, an interval is set that waits 250ms for any other new participants to be added to the &lt;code&gt;joinedSubscriptionQueue&lt;/code&gt; before actually triggering any state changes. &lt;/p&gt;

&lt;p&gt;Even with such a small interval of 250ms, batching event-based changes can improve performance, especially in large calls.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind, too, is that when you should actually use event batching will depend on how you are responding to Daily events in your app. Your own implementation will vary based on what is triggering the most avoidable re-renders or UI updates.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;participant-joined&lt;/code&gt;, batching is useful in other Daily events that are triggered often in calls, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;participant-updated&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;participant-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;track-started&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;track-stopped&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advanced-daily-events-batching-manual-track-subscriptions"&gt;
  &lt;/a&gt;
  Advanced Daily events batching: Manual track subscriptions
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs take a look at a more advanced example of Daily event batching that uses &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;manual track subscriptions&lt;/a&gt;. This is considered more advanced because Daily manages track subscriptions for you by default; turning on manual track subscriptions will add quite a bit of complexity to your state management and is only recommended in specific use cases. &lt;/p&gt;

&lt;p&gt;If we take the example from above, we can update it for implementing &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;manual track subscriptions&lt;/a&gt; for new participants. Let‚Äôs say we want to turn on track subscriptions for every new participant when they join, batching the subscriptions could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinBatchInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;subscribed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;subscribed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;setSubscribedTracks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;screenAudio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;screenVideo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

    &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateParticipants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet above, we create a queue of new participants every 250ms and use the &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-updateparticipants"&gt;&lt;code&gt;updateParticipants&lt;/code&gt;&lt;/a&gt; method to update all the new participants‚Äô subscribed tracks at the same time.&lt;/p&gt;

&lt;p&gt;This version of event batching helps avoid updating each and every new participant individually without creating any noticeable UI delays in displaying participant videos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-manual-track-subscriptions-only-subscribe-to-visible-participants"&gt;
  &lt;/a&gt;
  2. Manual track subscriptions: Only subscribe to visible participants
&lt;/h3&gt;

&lt;p&gt;You may be wondering about when to use the example right above, which demonstrates manual track subscription. By default, Daily will handle track subscriptions for you and, for the most part, this is the best solution; let us do the work for you.&lt;/p&gt;

&lt;p&gt;In some situations, however, you may want to take advantage of Daily‚Äôs &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;call object option to manually subscribe&lt;/a&gt; to media tracks for participants. This can be useful for improving performance in large calls, as well as certain features like ‚Äúbreakout rooms‚Äù where a call is broken into sub-groups. (But, again, most apps do not need to use this feature!)&lt;/p&gt;

&lt;p&gt;In terms of performance, manually subscribing or unsubscribing from tracks is useful in large calls where many videos are not visible. Since the video is not visible, you can unsubscribe from receiving the video tracks from those participants and reduce the amount of data being sent and received related to the call. Only when the participant is moved to being on-screen will you need to re-subscribe to the participant video track.&lt;/p&gt;

&lt;p&gt;Using manual track subscription requires two main Daily methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;&lt;code&gt;setSubscribeToTracksAutomatically(false)&lt;/code&gt;&lt;/a&gt;: Be sure to pass &lt;code&gt;false&lt;/code&gt; as a parameter to override the default, which will automatically subscribe to all tracks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.daily.co/reference#%EF%B8%8F-updateparticipant"&gt;&lt;code&gt;updateParticipant()&lt;/code&gt;&lt;/a&gt; or updateParticipants(), which updates several participants at once. To update which the tracks are subscribed to for a participants, pass a &lt;code&gt;setSubscribedTracks&lt;/code&gt; value like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, 
  {
    setSubscribedTracks: {
      audio: true,
      video: false,
      screenVideo: false,
    },
  }
);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: If you‚Äôre not sure if using manual track subscriptions is a good option for your app, feel free to &lt;a href="https://www.daily.co/contact/support"&gt;ask our team&lt;/a&gt;. We‚Äôre happy to help!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-virtual-lists-to-reduce-how-many-raw-ltvideogt-endraw-elements-are-rendered"&gt;
  &lt;/a&gt;
  3. Using virtual lists to reduce how many &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements are rendered
&lt;/h3&gt;

&lt;p&gt;One major update with the new Daily Prebuilt design was making the participant bar vertically scrollable. As Daily increases the call size limits, only rendering participant tiles that are actually visible provides a huge performance win. This can be achieved with virtualized lists.&lt;/p&gt;

&lt;p&gt;Virtualized lists (or virtualized scrolling) refers to a list of items where only the visible subset of items is actually rendered in the DOM. As the list is scrolled through, new items (DOM elements) are rendered as they are scrolled into view (or into a ‚Äúpre-render‚Äù area). Conversely, as DOM elements are scrolled out of view, they are destroyed. The goal here is to only render what is visually relevant to the user, and update the list as it is scrolled through.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FX_6Xt7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf0na7wpmh8rgtnqqkqv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FX_6Xt7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf0na7wpmh8rgtnqqkqv.jpeg" alt="Virtualized scrolling"&gt;&lt;/a&gt;&lt;br&gt;
The Daily Prebuilt participant bar is a good candidate for virtualized scrolling because there can be dozens or even hundreds of participants in the participant bar. Depending on the size of your browser window, you may only actually see 5-10 participants at a time. &lt;/p&gt;

&lt;p&gt;To implement virtualized scrolling, there are thankfully several options. If you don‚Äôt mind doing some math, you can calculate where you expect the item to be on the screen based on its position in the list, the size of the element, the scroll position, and the height of the container element. If it is visible, you can render it and otherwise not. (Check out this &lt;a href="https://blog.logrocket.com/virtual-scrolling-core-principles-and-basic-implementation-in-react/"&gt;blog post on virtualized lists&lt;/a&gt; that explains this well.)&lt;/p&gt;

&lt;p&gt;To simplify virtualized scrolling even more, you can also use one of the many libraries that will handle the rendering logic for you. React, for example, has several available libraries, like &lt;a href="https://www.npmjs.com/package/react-virtualized"&gt;react-virtualized&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Lastly, if you‚Äôre using Daily‚Äôs React Native library, &lt;a href="https://github.com/daily-co/react-native-daily-js#readme"&gt;react-native-daily-js&lt;/a&gt;, you can use React Native‚Äôs &lt;a href="https://reactnative.dev/docs/flatlist"&gt;&lt;code&gt;FlatList&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;SectionList&lt;/code&gt; components. They are both wrapper components for React Native‚Äôs &lt;a href="https://reactnative.dev/docs/virtualizedlist"&gt;Virtualized List&lt;/a&gt; component and will handle all the rendering logic for you, as well. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-limiting-video-feeds-with-pagination"&gt;
  &lt;/a&gt;
  4. Limiting video feeds with pagination
&lt;/h3&gt;

&lt;p&gt;In Daily Prebuilt on desktop, we limit the rendered participant tiles in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Virtualized lists&lt;/li&gt;
&lt;li&gt;Pagination&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In speaker mode, we used virtualized scrolling, as mentioned, to manage the participant bar videos. In grid mode, however, we use pagination to limit how many videos are on the screen at any given time. This allows all participants to be viewable, just not all at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SxPODH9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49tr2iu5tawk71odqzn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SxPODH9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49tr2iu5tawk71odqzn7.png" alt="Daily Prebuilt on desktop with pagination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The number of videos and the grid‚Äôs tile dimensions ultimately depend on the browser window size and what fits best based on our video aspect ratio requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18O03ZPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6id3lnftld9ry83acvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18O03ZPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6id3lnftld9ry83acvw.png" alt="Daily Prebuilt on mobile with pagination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Daily Prebuilt‚Äôs mobile designs, we‚Äôre a lot stricter with our grid layout and never render more than three remote participant tiles at a time. This is because mobile devices (especially iOS devices) use a noticeable amount of CPU resources to decode video. We‚Äôve found mobile devices often can‚Äôt handle more than three (or so) videos at a time. Pagination helps manage this CPU bottleneck by allowing users to page through all participants while never rendering more than three remote videos.&lt;/p&gt;

&lt;p&gt;To see an example of how pagination can be implemented with a grid of videos in Daily‚Äôs call object, let‚Äôs take a look at an example from a React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gridRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePrevClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Back&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tiles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tiles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleNextClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Next&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code block above, we render a parent &lt;code&gt;div&lt;/code&gt; element. Inside the &lt;code&gt;div&lt;/code&gt;, there‚Äôs a &lt;code&gt;Back&lt;/code&gt; button conditionally rendered if you‚Äôre not on the first page. (Alternatively, you could render the button and disable it instead.) Next, we render the participant video tiles. Lastly, there‚Äôs another conditional &lt;code&gt;Next&lt;/code&gt; button if you‚Äôre not on the last page.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs take a look at the tiles being rendered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visibleParticipants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;visibleParticipants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Video&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visibleParticipants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we calculate which participants are visible by taking the total number of participants, the page number, and the number of participants per page. With those numbers, we can determine which participants should have tiles rendered for them. &lt;/p&gt;

&lt;p&gt;Once we know the visible tiles, we can render a tile for each one. Each time the page number is increased or decreased by clicking the &lt;code&gt;Next&lt;/code&gt; or &lt;code&gt;Back&lt;/code&gt; buttons, the visible participants can be recalculated and the tile updates.&lt;/p&gt;

&lt;p&gt;By restricting the number of tiles‚Äî and, therefore, the number of videos‚Äî being rendered at any given time, we can reduce the CPU load of a Daily video call substantially.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-memoizing-components-that-rerender-too-often"&gt;
  &lt;/a&gt;
  5. Memoizing components that re-render too often
&lt;/h3&gt;

&lt;p&gt;You may have noticed in the example above, we‚Äôre using a React hook called &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;&lt;code&gt;useMemo&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const tiles = useMemo(() =&amp;gt; {...}, [dependency1, dependency2]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; is an example of how to ‚Äúmemoize‚Äù React components. Memoization is an effective way to avoid re-computing potentially ‚Äúexpensive‚Äù calculations by using the cached computed value until one of the dependencies has changed. (A dependency is a value that affects the rendered output.) Memoization is used here to only update the &lt;code&gt;tiles&lt;/code&gt; value when the dependencies‚Äî the values in the second parameter, the array‚Äî change. &lt;/p&gt;

&lt;p&gt;Let‚Äôs look at another example to see how memoization works. In React, if you have a paragraph element (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) that displays the sum of two numbers that are each passed as props to a component, you could represent it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayedSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can say pretty confidently that if &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt;‚Äôs values don‚Äôt change, the &lt;code&gt;displayedSum&lt;/code&gt; element won‚Äôt change. (2+2=4, right?) &lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;useMemo&lt;/code&gt;, we‚Äôre telling React that it doesn‚Äôt need to keep re-rendering this element unless &lt;code&gt;num1&lt;/code&gt; or &lt;code&gt;num2&lt;/code&gt; change, because then it will actually need to calculate the total again.&lt;/p&gt;

&lt;p&gt;In the case of &lt;code&gt;displayedSum&lt;/code&gt;, adding two numbers is probably not a very ‚Äùexpensive‚Äù calculation in terms of CPU usage; however, with a grid of &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements, re-renders can get expensive fairly quickly, especially on mobile devices. &lt;/p&gt;

&lt;p&gt;Preventing expensive re-renders via memoization (or any other methods) is one of the fastest ways to improve performance in your video or audio-only calls. If you‚Äôve noticed any performance issues in your own Daily app, this is a great place to start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-avoid-unnecessarily-removing-and-adding-back-videos"&gt;
  &lt;/a&gt;
  6. Avoid unnecessarily removing and adding back videos
&lt;/h3&gt;

&lt;p&gt;This one might sound contrary to what we‚Äôve been saying so far but hear us out.&lt;/p&gt;

&lt;p&gt;While it‚Äôs important to remove &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements that aren‚Äôt visible, you should avoid unnecessarily adding or tearing down media (video and audio) elements as much as possible. In React, for example, this could mean making sure your React hook dependencies are not too broad and you are not re-rendering media elements when you don‚Äôt need to.&lt;/p&gt;

&lt;p&gt;This is especially important on iOS, which will have a noticeable CPU hit when adding and removing media elements unnecessarily. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-only-play-paused-raw-ltvideogt-endraw-elements"&gt;
  &lt;/a&gt;
  7. Only play paused &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements
&lt;/h3&gt;

&lt;p&gt;You might be starting to notice a pattern here and, well, you‚Äôd be right. If we could sum up our suggestions in one (possibly condescending) sentence, it would be, ‚ÄúDon‚Äôt do anything you don‚Äôt need to do.‚Äù&lt;/p&gt;

&lt;p&gt;This is also the case for playing videos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaStream&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleCanPlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleCanPlay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleCanPlay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this snippet from Daily Prebuilt mobile code, we set the &lt;code&gt;srcObject&lt;/code&gt; for the video element (represented by &lt;code&gt;videoRef&lt;/code&gt;) if there‚Äôs a video track (&lt;code&gt;videoTrack&lt;/code&gt;) available. Otherwise, the source is set to &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We then add an event listener for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event"&gt;&lt;code&gt;canplay&lt;/code&gt;&lt;/a&gt; event. The video element is then played as soon as it‚Äôs available if it is not already playing. For example, the video may get paused when disconnecting a Bluetooth audio device, so adding this event listener will help ensure the video is resumed as soon as its media stream is ready again.&lt;/p&gt;

&lt;p&gt;You might be wondering if it really matters if you call &lt;code&gt;play()&lt;/code&gt; on a video that‚Äôs not paused. It turns out checking if a video is actually paused before playing it does help performance, especially on iOS Safari.&lt;/p&gt;

&lt;p&gt;As we discovered rewriting Daily Prebuilt for mobile, playing a video that is already playing on iOS Safari is not a "no-op". The action of playing a video, even if it is already playing, takes about 300ms to complete.&lt;/p&gt;

&lt;p&gt;This means adding a simple check to see if the video is paused before playing will actually reduce the CPU usage of your Daily call on mobile.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;If there‚Äôs one thing we appreciate about WebRTC video calls at Daily, it‚Äôs that getting performance right across browsers and devices is tough. Hopefully, these lessons we‚Äôve learned along the way help you customize your Daily calls even faster. &lt;/p&gt;

&lt;p&gt;To learn more about building a custom Daily video call, check out our &lt;a href="https://github.com/daily-demos/call-object-react"&gt;React demo repo&lt;/a&gt;, as well as our &lt;a href="https://www.daily.co/blog/building-a-custom-video-chat-app-with-react/"&gt;tutorial&lt;/a&gt; that goes along with it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webrtc</category>
      <category>javascript</category>
      <category>video</category>
    </item>
    <item>
      <title>Logistic Regression at a glance</title>
      <author>Mansi Saxena</author>
      <pubDate>Wed, 21 Jul 2021 19:56:15 +0000</pubDate>
      <link>https://dev.to/saxenamansi/logistic-regression-at-a-glance-5h50</link>
      <guid>https://dev.to/saxenamansi/logistic-regression-at-a-glance-5h50</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Logistic Regression?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In problems where a discrete value (0, 1, 2...) is to be predicted based on some input values, Logistic Regression can be very handy. Examples of such problems are - detecting if a student will be selected in a graduate program depending on his profile, or if an Instagram account has been hacked depending on its recent activity. These problems can be solved by "Supervised Classification Models", one of which is Logistic Regression. &lt;/p&gt;

&lt;p&gt;To build such a model, we need to supply the model with some training data, ie, samples of various data values as inputs and their corresponding discrete valued outputs. The input can be defined in terms of several independent features on which the output depends. For instance, if we take the problem of predicting if an Instagram account has been hacked, we can define some independent features such as "activity time", "5 recent texts", "5 recent comments", "10 recently liked posts" and so on. Using this input training data, the model essentially "learns" what the traits of a hacked Instagram account and uses this knowledge to make predictions on other accounts to check if they are hacked. &lt;/p&gt;

&lt;p&gt;However, you and I both know it is not that simple. So what goes on behind this black box?  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diving into the math!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let us set some notations. &lt;/p&gt;

&lt;p&gt;If we have "n" features and "m" training samples, they can be arranged in an "n*m" matrix consisting of training samples as column vectors horizontally stacked together as given in the image below. Let us call this matrix X. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zc8wqMg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rs0szss5ef4e569omgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zc8wqMg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rs0szss5ef4e569omgj.png" alt="Training Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has a corresponding vector which contains the discrete valued outputs for each training sample. It is a single column vector of dimension 1*m. Let us call this vector Y. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yr7Bd6BE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo7wgklqnf5dnqd8cot.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yr7Bd6BE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo7wgklqnf5dnqd8cot.jpg" alt="Alt Text Output Labels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the notations set and out of the way, let's get to the heart of logistic regression! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The equations&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We first calculate the probability that the output value of a particular input is 1 (given that the set of output labels = {0, 1}), which is also denoted as given below - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Bj56cyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4288biofb66tr6w6liw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Bj56cyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4288biofb66tr6w6liw.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;First, a hypothesis value Z is calculated by finding the transpose of a parameter W (row vector of dimensions n*1) multiplied with the matrix X (matrix of dimensions n*m), and then added to another column matrix b (column vector of dimension 1*m). &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8p-T9c_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwau1diey64hlf7ulc4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p-T9c_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwau1diey64hlf7ulc4q.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, an irregularity function "sigmoid" is applied to Z to give us the predicted probability for that particular input set. It outputs a value between 0 and 1 as shown in the figure below. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbywUo8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76ujn3m07be35vygbskj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbywUo8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76ujn3m07be35vygbskj.png" alt="Sigmoid"&gt;&lt;/a&gt;&lt;br&gt;
The equation for the sigmoid function is - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnGZGEkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q70xfmmkbdl0bivx4af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnGZGEkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q70xfmmkbdl0bivx4af.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thus, our final equation becomes - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJF53sxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53w95a1a5ce56in69jra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJF53sxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53w95a1a5ce56in69jra.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, the parameters W and b are trained and set to optimal values that give the highest accuracy in predicting probability that the output is 1. A loss value is calculated for each training example, and depending on the value, the parameters are adjusted to give better results and reduce this loss value. This is essentially what is referred to as "training" a model. A low loss value suggests that the model has been successfully trained (or that the model is overfitting, but that is a concept for another blog üòÅ). This loss value is calculated by the equation - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCh7scrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjclegn71q8et5h4ak3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCh7scrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjclegn71q8et5h4ak3k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus, we see that - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02sArAiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx5f46or44l50visahwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02sArAiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx5f46or44l50visahwi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the loss function, we calculate the cost function, which is an addition of all the loss function values over all the training examples. It is calculated using the formula below - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHc7gnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr0jctkf6x78j52lzsk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHc7gnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr0jctkf6x78j52lzsk6.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, to adjust the values of the parameters W and b, we use the famous gradient descent algorithm (which is also for another blog üòÅ). This formula is given below - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4ReLsyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwmaoyre9oqlj6wa2r54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4ReLsyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwmaoyre9oqlj6wa2r54.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This formula comes from the gradient descent algorithm. Here, the parameter alpha is called learning rate. A large learning rate causes large adjustments in parameters while a small learning rate causes smaller adjustments. It can be tuned according to our requirements. &lt;/p&gt;

&lt;p&gt;And viola! That wraps up one iteration of training our Logistic Regression Model! Connect enough of these together with slight modification, and we get a neural net!&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading this, thank you for reading till the end!&lt;/p&gt;

</description>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Flatiron School Final Project: My Portfolio Website</title>
      <author>Danielle Ellis</author>
      <pubDate>Wed, 21 Jul 2021 19:43:59 +0000</pubDate>
      <link>https://dev.to/thedanielleellis/flatiron-school-final-project-my-portfolio-website-2ef</link>
      <guid>https://dev.to/thedanielleellis/flatiron-school-final-project-my-portfolio-website-2ef</guid>
      <description>&lt;p&gt;For my final project at Flatiron School I choose to create my very own portfolio website to add to my resume as I enter the Software Engineering job market. As I reflect over the journey I have had at Flatiron, I am excited to showcase the languages and frameworks that this experience has brought me:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Language/Frameworks I learned
* Ruby / Rails
* Sinatra
* SQLite
* HTML
* CSS
* JavaScript
* React.js
* Readux.js 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The requirements for this final project is to use a Rails API backend and a React &amp;amp; Redux frontend. I started my project by establishing goals, creating my user stories, and organizing my models. I like to create tables in GoogleDoc so that I can refer back to my steps without using space on my computer. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stazU_63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03jlbb5tmfqvqglxs71b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stazU_63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03jlbb5tmfqvqglxs71b.png" alt="Project Prep"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rails-setup"&gt;
  &lt;/a&gt;
  Rails Setup
&lt;/h2&gt;

&lt;p&gt;In the same GoogleDoc I like to organize some code before I launch my VS code. I am very analytical and huge notetaker, so this helps me gather my thoughts and prevents errors in the set up process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8Nf4d7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n6owcaplkzq33ybq583.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8Nf4d7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n6owcaplkzq33ybq583.png" alt="Project Start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-setup"&gt;
  &lt;/a&gt;
  Frontend Setup
&lt;/h2&gt;

&lt;p&gt;In prepping for my project, the instructor led videos we have access to in Flatiron Learn Instruct has help me with some things that may not have stuck with me. I like to jot down some notes in the set-up stage so that in the event I have to start over, I already have a foundation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Swt_cBXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vikdf2tusgsrh0nybwx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Swt_cBXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vikdf2tusgsrh0nybwx3.png" alt="Frontend Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-react-amp-redux"&gt;
  &lt;/a&gt;
  Using React &amp;amp; Redux
&lt;/h2&gt;

&lt;p&gt;After taking a few notes and establishing my backend I was able to jump right into React by using create-react-app. I found it interesting that React was created by Facebook developers and some of the features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A virtual DOM&lt;/li&gt;
&lt;li&gt;Declarative writing&lt;/li&gt;
&lt;li&gt;Babel&lt;/li&gt;
&lt;li&gt;Webpack&lt;/li&gt;
&lt;li&gt;Built in ESLint functionality &lt;/li&gt;
&lt;li&gt;the create-react-app mentioned above&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Tailwind CSS Badge Examples</title>
      <author>larainfo</author>
      <pubDate>Wed, 21 Jul 2021 19:38:30 +0000</pubDate>
      <link>https://dev.to/larainfo/tailwind-css-badge-examples-3deh</link>
      <guid>https://dev.to/larainfo/tailwind-css-badge-examples-3deh</guid>
      <description>&lt;p&gt;In this section we will see few tailwind CSS badge examples. badge is use show status, message,notification, inbox etc .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tailwind-css-badge-examples"&gt;
  &lt;/a&gt;
  Tailwind CSS Badge Examples
&lt;/h4&gt;

&lt;p&gt;üëâ &lt;a href="https://larainfo.com/blogs/tailwind-css-badge-examples"&gt;View Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setup Project&lt;br&gt;
Using CDN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or &lt;/p&gt;

&lt;p&gt;&lt;a href="https://larainfo.com/blogs/the-easiest-way-to-install-tailwind-css-with-tailwind-cli"&gt;The Easiest way to install Tailwind CSS with Tailwind CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://larainfo.com/blogs/how-to-install-tailwind-css-with-npm"&gt;How to Install Tailwind CSS with NPM&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-badge"&gt;
  &lt;/a&gt;
  Simple Badge
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-xs px-2 py-0.5 font-bold bg-gray-100 text-gray-600 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Default
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-2 py-0.5 text-xs font-bold bg-red-500 text-white rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Danger
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-2 py-0.5 text-xs font-bold bg-yellow-300 text-black rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Warning
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-xs px-2 py-0.5 rounded font-bold bg-green-500 text-white "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Success
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-xs px-2 font-bold bg-blue-500 text-white rounded py-0.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    info
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C7BGjcxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrtd9bnyk35knarmxu7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7BGjcxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrtd9bnyk35knarmxu7c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#button-with-badge"&gt;
  &lt;/a&gt;
  Button with Badge
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-4 py-2 mr-2 text-white bg-blue-500 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Button &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-2 py-1 text-sm text-black bg-white rounded-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ssDkwDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv4rsjajp9qnre7qoxvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ssDkwDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv4rsjajp9qnre7qoxvt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#icon-with-badge"&gt;
  &lt;/a&gt;
  Icon with Badge
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative inline-block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-16 h-16 text-gray-200"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt;
        &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;
            &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 right-0 px-2 py-1 text-xs font-bold leading-none text-red-100 transform bg-red-600 rounded-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfI0pOVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9j3ewnzt0vilkwru4q1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfI0pOVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9j3ewnzt0vilkwru4q1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://larainfo.com/tailwind-css"&gt;For more tailwind css&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
