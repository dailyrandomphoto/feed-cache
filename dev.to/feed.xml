<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Script para abrir webcam com Python utilizando OpenCV</title>
      <author>Maria Eduarda de Azevedo Silva</author>
      <pubDate>Mon, 19 Jul 2021 17:07:49 +0000</pubDate>
      <link>https://dev.to/opendevufcg/script-para-abrir-webcam-com-python-utilizando-opencv-f26</link>
      <guid>https://dev.to/opendevufcg/script-para-abrir-webcam-com-python-utilizando-opencv-f26</guid>
      <description>&lt;p&gt;Já pensou em desenvolver algum projetinho que precisa de uma captura de imagem em tempo real, mas não sabe por onde começar? Nesse post vamos trazer uma solução simples de como fazer um script utilizando &lt;strong&gt;Python3&lt;/strong&gt; e &lt;strong&gt;OpenCV&lt;/strong&gt; para abrir a sua webcam!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwFlR4XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/5ee541edd1960466e4f30bd90a3d0590/tenor.gif%3Fitemid%3D3780800" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwFlR4XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/5ee541edd1960466e4f30bd90a3d0590/tenor.gif%3Fitemid%3D3780800"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-pouco-sobre-a-biblioteca-opencv"&gt;
  &lt;/a&gt;
  Um pouco sobre a biblioteca OpenCV
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://opencv.org/"&gt;&lt;strong&gt;OpenCV&lt;/strong&gt;&lt;/a&gt; é uma biblioteca de código aberto desenvolvida pela Intel nos anos 2000, inicialmente nas linguagens C e C++, com o objetivo de melhorar o aparato disponível para o desenvolvimento de aplicações, assim como nos estudos e pesquisas na área de &lt;a href="https://pt.wikipedia.org/wiki/Vis%C3%A3o_computacional"&gt;&lt;strong&gt;Visão Computacional&lt;/strong&gt;&lt;/a&gt;. Hoje em dia ela ainda é referência e se tornou multiplataforma e multilinguagem, isto é, podemos utilizá-la em aplicações nos mais diversos sistemas operacionais e linguagens de programação.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opencv-python-perfei%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  OpenCV + Python == "PERFEIÇÃO"
&lt;/h2&gt;

&lt;p&gt;O OpenCV não foi apenas desenvolvido para melhorar a experiência em questão de otimização das técnicas e dos algoritmos de processamento de imagem, mas também para fácil utilização da biblioteca pelos interessados. &lt;br&gt;
Quando unimos isso ao Python temos um ambiente perfeito para explorar a criatividade utilizando imagens: biblioteca simples e linguagem de sintaxe simples!&lt;br&gt;
Quer provas? Continua lendo este post!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#instalando-o-opencv-na-sua-m%C3%A1quina"&gt;
  &lt;/a&gt;
  Instalando o OpenCV na sua máquina
&lt;/h2&gt;

&lt;p&gt;Para iniciar, precisaremos instalar o OpenCV na nossa máquina. Para isso, você pode instalar o pacote via pip com o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ou&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Lembrando que é sempre bom considerar a criação de um &lt;strong&gt;ambiente virtual&lt;/strong&gt; para seus projetos! Assim, caso você queira compartilhar e receber contribuições, irá ajudar bastante na configuração local do projeto na máquina do contribuidor, além de evitar que alguns erros se tornem incapazes de serem resolvidos. Caso não saiba como fazê-lo, consulte este &lt;a href="https://docs.python.org/pt-br/3/library/venv.html"&gt;link&lt;/a&gt; da documentação do Python para saber mais. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A3o-na-massa"&gt;
  &lt;/a&gt;
  Mão na massa!
&lt;/h2&gt;

&lt;p&gt;Com o OpenCV instalado na máquina podemos partir para o código! Crie um arquivo .py, abra o editor de sua preferência e vamos começar!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10r4muTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/3ccc0e15cbf9bee22c30701649065643/tenor.gif%3Fitemid%3D3393582" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10r4muTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/3ccc0e15cbf9bee22c30701649065643/tenor.gif%3Fitemid%3D3393582"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Antes de tudo, vamos importar a nossa biblioteca:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com o pacote devidamente importado, poderemos partir para a captura da imagem pela webcam do seu computador!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abrindo-a-webcam-com-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Abrindo a webcam com código!
&lt;/h3&gt;

&lt;p&gt;Abrir a webcam com um script Python é mais fácil do que você imagina! Vamos utilizar OpenCV para capturar imagens em tempo real.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passo-1"&gt;
  &lt;/a&gt;
  Passo 1:
&lt;/h4&gt;

&lt;p&gt;O primeiro passo é instanciar um objeto &lt;a href="https://docs.opencv.org/master/dd/d43/tutorial_py_video_display.html"&gt;&lt;strong&gt;VideoCapture&lt;/strong&gt;&lt;/a&gt;. Essa classe do OpenCV é responsável por realizar a captura de frames em um vídeo, o qual passamos o caminho como parâmetro na criação do objeto. No caso da leitura da webcam, precisamos passar o seu ID de referência (se você usa um laptop, o ID da sua câmera primária é 0):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#passo-2"&gt;
  &lt;/a&gt;
  Passo 2:
&lt;/h4&gt;

&lt;p&gt;Para iniciar o segundo passo, é importante que você entenda &lt;strong&gt;o que é um vídeo&lt;/strong&gt;. De uma forma bem genérica, &lt;strong&gt;um vídeo é uma sucessão de imagens que imprimem uma sensação de movimento&lt;/strong&gt;. A cada uma dessas imagens damos o nome de &lt;strong&gt;quadros (ou frames)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Fazendo o paralelo disso com lógica de programação, &lt;strong&gt;qual a estrututa que utilizamos para fazer uma repetição sucessiva de alguma coisa?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRC_OFV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/7ffd2774603c1aac0d09704ec29d1255/tenor.gif%3Fitemid%3D11731609" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRC_OFV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/7ffd2774603c1aac0d09704ec29d1255/tenor.gif%3Fitemid%3D11731609"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Se você respondeu &lt;strong&gt;laço&lt;/strong&gt;, está mais que correto! Mas, qual laço escolher, &lt;strong&gt;for&lt;/strong&gt; ou &lt;strong&gt;while&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9W819YY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/d727553135e15b67eaee12ad00b4e213/tenor.gif%3Fitemid%3D7528656" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9W819YY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/d727553135e15b67eaee12ad00b4e213/tenor.gif%3Fitemid%3D7528656"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Vamos pensar: estamos fazendo uma captura de vídeo em &lt;strong&gt;tempo real&lt;/strong&gt; com a nossa webcam, então &lt;strong&gt;não sabemos quando a captura irá parar&lt;/strong&gt;, desse modo &lt;strong&gt;enquanto estiver rodando nosso script eu capturo um frame novo&lt;/strong&gt;. Matamos a charada e vamos de &lt;strong&gt;loop while&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Passando essa ideia para Python, temos algo do tipo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rodando&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Captura um frame
&lt;/span&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#passo-3"&gt;
  &lt;/a&gt;
  Passo 3:
&lt;/h4&gt;

&lt;p&gt;Agora podemos partir para todo o código dentro do loop!&lt;/p&gt;

&lt;p&gt;Para fazer a captura do frame da vez, usaremos o método &lt;strong&gt;read()&lt;/strong&gt; no nosso objeto &lt;strong&gt;VideoCapture&lt;/strong&gt;. Esse método retorna uma tupla com dois valores: um booleano referente ao &lt;strong&gt;status de captura&lt;/strong&gt; e o próprio &lt;strong&gt;frame no formato de um array NumPy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O valor do &lt;strong&gt;status&lt;/strong&gt; é muito útil para quando estamos &lt;strong&gt;lendo um vídeo passado por um caminho&lt;/strong&gt;, visto que, quando chegamos no último frame do mesmo, o próximo não poderá ser capturado, o retorno desse valor será False e poderemos parar a execução do loop sem o lançamento de uma exceção. Além disso, pode haver algum problema na captura da webcam e isso ser indicado por esse retorno, por isso, vamos utilizá-lo. &lt;/p&gt;

&lt;p&gt;Já o &lt;strong&gt;frame&lt;/strong&gt; é essencial, já que é o que mais nos interessa! A &lt;strong&gt;imagem retornada&lt;/strong&gt; será o alvo dos &lt;strong&gt;processamentos&lt;/strong&gt; feitos durante a iteração do loop e também será jogada na saída.&lt;/p&gt;

&lt;p&gt;Faremos isso da seguinte forma, dissociando os valores retornados em duas variáveis:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rodando&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#passo-4"&gt;
  &lt;/a&gt;
  Passo 4:
&lt;/h4&gt;

&lt;p&gt;Chegou o momento de falarmos das &lt;strong&gt;condições de parada&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOXDIySM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/4e765a33c88071c8c321f3ce5e12ff8d/tenor.gif%3Fitemid%3D14191522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOXDIySM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/4e765a33c88071c8c321f3ce5e12ff8d/tenor.gif%3Fitemid%3D14191522"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Queremos parar a captura em &lt;strong&gt;dois casos&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Em casos de erro &lt;/li&gt;
&lt;li&gt;Caso eu apenas queira parar de executar o script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vamos unir essas duas condições de parada em apenas uma condição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_jzzMaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/86f3b65249fbaca12e142281558c06ac/tenor.gif%3Fitemid%3D4486363" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_jzzMaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/86f3b65249fbaca12e142281558c06ac/tenor.gif%3Fitemid%3D4486363"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Parece estranho, mas não é difícil de entender. O que estamos querendo dizer é basicamente "&lt;strong&gt;se deu algo errado na captura da imagem ou o usuário apertou a tecla 'q', então pare o script!&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;A função &lt;a href="https://docs.opencv.org/master/d7/dfc/group__highgui.html#ga5628525ad33f52eab17feebcfba38bd7"&gt;&lt;strong&gt;cv.waitKey(1)&lt;/strong&gt;&lt;/a&gt; espera que um evento de tecla acionada aconteça e, caso ocorra, ela retorna o valor da tecla pressionada segundo o padrão UTF-8. Para comparar se a tecla pressionada foi a 'q', combinamos o retorno dessa função com a constante hexadecimal &lt;strong&gt;0xff&lt;/strong&gt; e utilizamos a função padrão de python &lt;strong&gt;ord('q')&lt;/strong&gt;, que retorna o valor de uma string passada como parâmetro em UTF-8.&lt;/p&gt;

&lt;p&gt;Caso &lt;strong&gt;ao menos uma dessas condições seja satisfeita&lt;/strong&gt;, a nossa variável &lt;strong&gt;rodando&lt;/strong&gt; passa a receber &lt;strong&gt;False&lt;/strong&gt; e na próxima iteração há a &lt;strong&gt;parada do loop&lt;/strong&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passo-5"&gt;
  &lt;/a&gt;
  Passo 5:
&lt;/h4&gt;

&lt;p&gt;Nesse estágio já temos o objeto que captura nossa imagem da webcam, a imagem capturada devidamente lida e também uma condição de parada do nosso loop. Só nos resta uma coisa: &lt;strong&gt;jogar essa imagem na saída&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4i52zXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/55bf09e811c9fb48f27afcdb5dfe295b/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4i52zXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/55bf09e811c9fb48f27afcdb5dfe295b/tenor.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Para isso utilizaremos a função &lt;strong&gt;cv.imshow()&lt;/strong&gt; do OpenCV. Essa função cria recebe dois parâmetros: uma string referente ao &lt;strong&gt;nome da janela&lt;/strong&gt; e o array que se refere a &lt;strong&gt;imagem&lt;/strong&gt; que queremos mostrar. Temos tudo que precisamos!&lt;/p&gt;

&lt;p&gt;Para finalmente enxergarmos a captura em tempo real, escrevemos a seguinte linha dentro do loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Camera"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finalmente-o-script"&gt;
  &lt;/a&gt;
  Finalmente, o script!
&lt;/h2&gt;

&lt;p&gt;Tudo isso resulta em um script de &lt;strong&gt;apenas 8 linhas&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-5dSBU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/774f034a3348256ebc3032b8c166d15f/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-5dSBU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/774f034a3348256ebc3032b8c166d15f/tenor.gif"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt; 

&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rodando&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Camera"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso temos tudo que você precisa para capturar imagens em tempo real utilizando um &lt;strong&gt;script simples em Python junto com OpenCV&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;E o que fazer com esse script?&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50IngGUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/b200fc13a785faf7d8589748b1794b27/tenor.gif%3Fitemid%3D13895777" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50IngGUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/b200fc13a785faf7d8589748b1794b27/tenor.gif%3Fitemid%3D13895777"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Existem várias possibilidades de aproveitar essa base, que vão desde &lt;strong&gt;detectores&lt;/strong&gt; até registros de imagens para alguma &lt;strong&gt;aplicação ou sistema feito em Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Muito obrigada por ter lido até o fim! Se esse post te inspirou a criar alguma coisa, não se esquece de postar nas tuas redes e me marcar, que eu quero ver ~e quem sabe eu volte aqui com mais coisas legais para fazer com OpenCV~!&lt;/p&gt;

&lt;p&gt;Minhas redes:&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/MariaEduardaDeAzevedo/"&gt;LinkedIn: Maria Eduarda de Azevedo Silva&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/ddt_azevedo"&gt;Twitter: @ddt_azevedo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/MariaEduardaDeAzevedo"&gt;GitHub: MariaEduardaDeAzevedo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>opencv</category>
      <category>python</category>
      <category>visaocomputacional</category>
    </item>
    <item>
      <title>iOS App Review on iPhone: Resume Builder - Professionals on App Store Connect</title>
      <author>Orestis Pantazos</author>
      <pubDate>Mon, 19 Jul 2021 17:05:33 +0000</pubDate>
      <link>https://dev.to/orestispantazos/ios-app-review-on-iphone-resume-builder-professionals-on-app-store-connect-1oji</link>
      <guid>https://dev.to/orestispantazos/ios-app-review-on-iphone-resume-builder-professionals-on-app-store-connect-1oji</guid>
      <description>&lt;p&gt;App Store Connect: &lt;br&gt;
&lt;a href="https://apps.apple.com/gr/app/resume-builder-professionals/id1569380836"&gt;https://apps.apple.com/gr/app/resume-builder-professionals/id1569380836&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YouTube Video: &lt;br&gt;
&lt;a href="https://youtu.be/089SGaIYFOw"&gt;https://youtu.be/089SGaIYFOw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS App Review on #iPhone: Resume Builder - Professionals on App Store Connect&lt;/p&gt;

&lt;p&gt;The Resume Builder for #LinkedIn users is an iOS mobile application that offers a great user experience for building your ideal template to earn your job of your preference.&lt;/p&gt;

&lt;p&gt;LinkedIn has a lot of jobs worldwide, but it is needed to upload a great material including in your #CV with no time.&lt;/p&gt;

&lt;p&gt;Your job-hunting is already started on LinkedIn. Good luck!&lt;/p&gt;

&lt;p&gt;Resume Builder - Professionals is the next social network for professionals that like LinkedIn networks and groups. Build your professional network based on Resume Builder, connect with anyone, and use your professional profile as an online resume with Apple Sign-In, Google Sign-In, Microsoft Sign-In and GitHub for developer professionals.&lt;/p&gt;

&lt;p&gt;JOB SEARCH&lt;/p&gt;

&lt;p&gt;• Search and apply to millions of job openings including your responsive resume&lt;br&gt;
• Upload and easily submit your resume to jobs that fit on LinkedIn jobs&lt;br&gt;
• Save searches and create alerts to be the first to know about new job openings and worldwide events&lt;/p&gt;

&lt;p&gt;The Resume Builder - Professionals app has a low cost to use and download.&lt;/p&gt;




&lt;p&gt;There are no additional subscriptions or premium plans. Find a job, create your business, find and hire the new talented persons worldwide with a really low cost on 4.99 $ all over the world.&lt;/p&gt;

&lt;p&gt;Privacy Policy: &lt;a href="https://opendevops.dev/"&gt;https://opendevops.dev/&lt;/a&gt;&lt;br&gt;
Terms of Service: &lt;a href="https://opendevops.dev/"&gt;https://opendevops.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>ipad</category>
      <category>swift</category>
      <category>appstore</category>
    </item>
    <item>
      <title>tmux choose-tree</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 19 Jul 2021 16:55:50 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-choose-tree-13pj</link>
      <guid>https://dev.to/waylonwalker/tmux-choose-tree-13pj</guid>
      <description>&lt;p&gt;Choose tree is a powerful tmux utility that provides a graphical interface to&lt;br&gt;
preview all sessions, windows, and panes, move between them kill them, move&lt;br&gt;
them and much more.&lt;/p&gt;

&lt;p&gt;The default keybinding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key &lt;span class="nt"&gt;-T&lt;/span&gt; prefix s choose-tree &lt;span class="nt"&gt;-s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;my preferred keybinding to open sessions and windows collapsed and Zoomed in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key &lt;span class="nt"&gt;-T&lt;/span&gt; prefix s choose-tree &lt;span class="nt"&gt;-s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the man page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;choose-tree &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-GNrswZ&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-F&lt;/span&gt; format] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-f&lt;/span&gt; filter] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-K&lt;/span&gt; key-format] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-O&lt;/span&gt; sort-order] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-t&lt;/span&gt; target-pane] &lt;span class="o"&gt;[&lt;/span&gt;template]
        Put a pane into tree mode, where a session, window or pane may be chosen interactively from a tree.  Each session, window or pane is shown on
        one line.  A shortcut key is shown on the left &lt;span class="k"&gt;in &lt;/span&gt;brackets allowing &lt;span class="k"&gt;for &lt;/span&gt;immediate choice, or the tree may be navigated and an item chosen or
        otherwise manipulated using the keys below.  &lt;span class="nt"&gt;-s&lt;/span&gt; starts with sessions collapsed and &lt;span class="nt"&gt;-w&lt;/span&gt; with windows collapsed.  &lt;span class="nt"&gt;-Z&lt;/span&gt; zooms the pane.  The follow‐
        ing keys may be used &lt;span class="k"&gt;in &lt;/span&gt;tree mode:

            Key    Function
            Enter  Choose selected item
            Up     Select previous item
            Down   Select next item
            +      Expand selected item
            -      Collapse selected item
            M-+    Expand all items
            M--    Collapse all items
            x      Kill selected item
            X      Kill tagged items
            &amp;lt;      Scroll list of previews left
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      Scroll list of previews right
            C-s    Search by name
            m      Set the marked pane
            M      Clear the marked pane
            n      Repeat last search
            t      Toggle &lt;span class="k"&gt;if &lt;/span&gt;item is tagged
            T      Tag no items
            C-t    Tag all items
            :      Run a &lt;span class="nb"&gt;command &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;each tagged item
            f      Enter a format to filter items
            H      Jump to the starting pane
            O      Change &lt;span class="nb"&gt;sort &lt;/span&gt;field
            r      Reverse &lt;span class="nb"&gt;sort &lt;/span&gt;order
            v      Toggle preview
            q      Exit mode

        After a session, window or pane is chosen, ‘%%’ is replaced by the target &lt;span class="k"&gt;in &lt;/span&gt;template and the result executed as a command.  If template is
        not given, &lt;span class="s2"&gt;"switch-client -t '%%'"&lt;/span&gt; is used.

        &lt;span class="nt"&gt;-O&lt;/span&gt; specifies the initial &lt;span class="nb"&gt;sort &lt;/span&gt;field: one of ‘index’, ‘name’, or ‘time’.  &lt;span class="nt"&gt;-r&lt;/span&gt; reverses the &lt;span class="nb"&gt;sort &lt;/span&gt;order.  &lt;span class="nt"&gt;-f&lt;/span&gt; specifies an initial filter: the fil‐
        ter is a format - &lt;span class="k"&gt;if &lt;/span&gt;it evaluates to zero, the item &lt;span class="k"&gt;in &lt;/span&gt;the list is not shown, otherwise it is shown.  If a filter would lead to an empty list,
        it is ignored.  &lt;span class="nt"&gt;-F&lt;/span&gt; specifies the format &lt;span class="k"&gt;for &lt;/span&gt;each item &lt;span class="k"&gt;in &lt;/span&gt;the tree and &lt;span class="nt"&gt;-K&lt;/span&gt; a format &lt;span class="k"&gt;for &lt;/span&gt;each shortcut key&lt;span class="p"&gt;;&lt;/span&gt; both are evaluated once &lt;span class="k"&gt;for &lt;/span&gt;each
        line.  &lt;span class="nt"&gt;-N&lt;/span&gt; starts without the preview.  &lt;span class="nt"&gt;-G&lt;/span&gt; includes all sessions &lt;span class="k"&gt;in &lt;/span&gt;any session &lt;span class="nb"&gt;groups &lt;/span&gt;&lt;span class="k"&gt;in &lt;/span&gt;the tree rather than only the first.  This &lt;span class="nb"&gt;command
        &lt;/span&gt;works only &lt;span class="k"&gt;if &lt;/span&gt;at least one client is attached.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://waylonwalker.com/tmux-nav-2021/"&gt;https://waylonwalker.com/tmux-nav-2021/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>techtalks</category>
      <category>tmux</category>
      <category>linux</category>
    </item>
    <item>
      <title>A Cloud Migration Questionnaire</title>
      <author>Chirag Modi</author>
      <pubDate>Mon, 19 Jul 2021 16:53:13 +0000</pubDate>
      <link>https://dev.to/chiragdm/a-cloud-migration-questionnaire-17ng</link>
      <guid>https://dev.to/chiragdm/a-cloud-migration-questionnaire-17ng</guid>
      <description>&lt;p&gt;The questions you must ask your customers before migrating their on-premise workload to AWS Cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e?source=friends_link&amp;amp;sk=accffce9d79a29769a908036b90f9845"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbPYz9pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cxy6ft4fd59xlkg9e01.png" alt="Cloud Migration Questionnaire. Image by author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#28dc"&gt;Why do you want to migrate to the cloud?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#06f8"&gt;How many code changes can you afford as part of migration?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#edbe"&gt;What type of database are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#fe49"&gt;What type of load balancers are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#69e0"&gt;What application servers and versions are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#f325"&gt;What operating system are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#f6b2"&gt;Is your application public facing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#6e29"&gt;Is your application stateful or stateless?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#afeb"&gt;Is your application containerized?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#63e2"&gt;What are the current resource requirements of the servers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#86c2"&gt;How is your workload variation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#0b9e"&gt;What are your logging and monitoring requirements?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#ecab"&gt;What is your current backup strategy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at a detailed &lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e?source=friends_link&amp;amp;sk=accffce9d79a29769a908036b90f9845"&gt;post&lt;/a&gt; to know why these questions are important and how it helps to lay the foundation for future design solutions and plan migrations better.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>migration</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Azure Nibble - How to get TcpPing on Linux Azure App Service</title>
      <author>Marcel.L</author>
      <pubDate>Mon, 19 Jul 2021 16:34:17 +0000</pubDate>
      <link>https://dev.to/pwd9000/azure-nibble-how-to-get-tcpping-on-linux-azure-app-service-2dap</link>
      <guid>https://dev.to/pwd9000/azure-nibble-how-to-get-tcpping-on-linux-azure-app-service-2dap</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ping-vs-tcpping"&gt;
  &lt;/a&gt;
  Ping vs. TcpPing?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ping&lt;/strong&gt; is a computer network administration software utility used to test the reachability of a host on an Internet Protocol (IP) network using Internet Control Message Protocol (ICMP).&lt;/p&gt;

&lt;p&gt;There can be instances where a remote host, has blocked ICMP traffic, which in turn means we cannot test/check to connectivity to the remote host. In this kind of a situation, what you can do to check the host's presence is to telnet to a known port or to try making a TCP connection to the host.&lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;tcpping&lt;/strong&gt; comes in and is a TCP oriented &lt;strong&gt;ping&lt;/strong&gt; alternative. It is used to test the reachability of a service on a host using TCP/IP and measure the time it takes to connect to the specified port. It is a very useful tool to help with diagnosing network related issues on Azure App Service.&lt;/p&gt;

&lt;p&gt;Windows based app services in Azure automatically have &lt;strong&gt;tcpping&lt;/strong&gt; enabled, however this valuable tool is missing on linux based app services, so in todays tutorial we will look at how we can get and run &lt;strong&gt;tcpping&lt;/strong&gt; on linux based app services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to your app service Kudu site: &lt;strong&gt;https://[sitename].scm.azurewebsites.net/webssh/host&lt;/strong&gt; to establish a SSH web session. Or use the azure portal to navigate to the kudu site as follow:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LL4Wuj-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/aznav.png" alt="aznav"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IU5IivaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/kudu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IU5IivaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/kudu2.png" alt="kudu2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;apt-get install tcptraceroute&lt;/code&gt; (&lt;strong&gt;Required:&lt;/strong&gt; if not already present)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apt-get install bc&lt;/code&gt; (&lt;strong&gt;Required:&lt;/strong&gt; if minimal Linux Runtime used, e.g. docker)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /usr/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget http://www.vdberg.org/~richard/tcpping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod 755 tcpping&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tcpping [-d] [-c] [-r sec] [-x count] ipaddress [port]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[-d]: print timestamp before each result.&lt;/li&gt;
&lt;li&gt;[-c]: use columned output for easy parsing.&lt;/li&gt;
&lt;li&gt;[-r]: interval in seconds between consecutive probes (1 second by default).&lt;/li&gt;
&lt;li&gt;[-x]: repeat n times (unlimited by default).&lt;/li&gt;
&lt;li&gt;[port]: target port (80 by default).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwMaTpBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/tcpping1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwMaTpBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/tcpping1.png" alt="tcpping1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Marcel.L - &lt;a href="mailto:pwd9000@hotmail.co.uk"&gt;pwd9000@hotmail.co.uk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
    <item>
      <title>Your Product Shouldn't Be an App</title>
      <author>Zack Sheppard</author>
      <pubDate>Mon, 19 Jul 2021 15:48:57 +0000</pubDate>
      <link>https://dev.to/zackdotcomputer/your-product-shouldn-t-be-an-app-447k</link>
      <guid>https://dev.to/zackdotcomputer/your-product-shouldn-t-be-an-app-447k</guid>
      <description>&lt;p&gt;Recently, I've run into a few big ideas that make me feel like it's 2010 all over again. In the worst way. They remind me that back in the heady days of 2010, we were &lt;em&gt;fools&lt;/em&gt; for apps.&lt;/p&gt;

&lt;p&gt;Need to know what song is playing on the radio right now? App! Are new-hires lost in your office and you want to give them a map? Enterprise app! Need to order a sandwich from the independent deli on the corner? Whitelabel app!&lt;/p&gt;

&lt;p&gt;Ultimately these all fail the core test of making a product: they have identified a real need but fail to fulfill it better than the competition.&lt;/p&gt;

&lt;p&gt;What do I mean by that? Well, let's look at our examples: if I want to know what's on the radio right now, does it make more sense for me to open an app and see it or should I just &lt;strong&gt;turn on the radio?&lt;/strong&gt; If I need to help new-hires orient themselves in my office, should I hire someone to make a map app, get an enterprise distribution certificate for the app store, and debug issues people have installing that app, or should I &lt;strong&gt;draw a map and give them a photocopy?&lt;/strong&gt; If I want to order a sandwich from the deli, do I install their one-off app, make an account, and place an order or do I just &lt;strong&gt;walk down the street?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In all of these cases, the competition isn't another app, it's a better way of solving the problem. Even though the wild crappy-app days of the 20-teens are behind us, this lesson still holds true when we think about designing products today.&lt;/p&gt;

&lt;p&gt;What's wonderful about this is that you can usually find a way to achieve your goals far quicker and cheaper than by building a full app. Here are some alternatives you need to consider before you dive into the world of designing and developing a full-fledged app:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-infoproducts"&gt;
  &lt;/a&gt;
  1. Info-products
&lt;/h2&gt;

&lt;p&gt;If the goal of your app is to communicate something to your users, the first question to ask yourself is whether that could be better accomplished by written words or videos. Simplifying your product to an info-product like this has two big advantages. First, larger media platforms like  &lt;a href="https://substack.com"&gt;Substack&lt;/a&gt;,  &lt;a href="https://www.skillshare.com/teach"&gt;Skillshare&lt;/a&gt;,  &lt;a href="https://teachable.com"&gt;Teachable&lt;/a&gt;,  &lt;a href="https://gumroad.com"&gt;Gumroad&lt;/a&gt;, or even Youtube are almost guaranteed to reach a larger market than a purpose-built app or site. Second, you can often communicate your ideas and make a sellable product in drastically less time than if you were trying to capture those same ideas in the framework of an app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-communities"&gt;
  &lt;/a&gt;
  2. Communities
&lt;/h2&gt;

&lt;p&gt;If your app is trying to bring people together but not necessarily to form a market, you might be better off hosting a private Discord or building a community site on top of a platform like  &lt;a href="https://circle.so"&gt;Circle&lt;/a&gt;,  &lt;a href="https://tribe.so"&gt;Tribe&lt;/a&gt;, or Dev.to's own &lt;a href="https://www.forem.com"&gt;Forem&lt;/a&gt;. Communities especially are an interesting opportunity when added on top of info-products, as they give you the chance to keep your customers engaged with you between releases of new content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-webapps"&gt;
  &lt;/a&gt;
  3. Webapps
&lt;/h2&gt;

&lt;p&gt;While still &lt;em&gt;kind of&lt;/em&gt; an app, web apps are much easier to build, maintain, and distribute to users than a native app (especially given the wealth of  &lt;a href="https://www.nocode.tech/category/web-app-builders"&gt;Nocode tools&lt;/a&gt; for building them). Let me stress this point, the simplicity and speed of launching a website makes the stress of launching a true native app feel like hiking Everest. Web based apps can also make much more sense depending on the context you expect your users to be in when they need whatever solution you provide. If you think a user is going to be at work on their computer, for example, it makes more sense for your product to be a website rather than an app that will require they switch contexts to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-nontech-products"&gt;
  &lt;/a&gt;
  4. Non-tech Products
&lt;/h2&gt;

&lt;p&gt;Finally, does your product need to be a tech product at all? Let's take a hypothetical product of "&lt;a href="https://kern.al/idea/covid-safe-office-bonding?new_idea=true"&gt;COVID-friendly activities for office bonding&lt;/a&gt;" for example. For version one, you could jump straight to building this as a productized digital app experience that can lead customers on group tours or scavenger hunts. But, you will be able to execute more quickly, get more feedback, and generate revenue immediately if you instead take the old-school route and lead your first few experiences personally. Once you have run a couple sessions, you'll have money in the bank and a much better sense for the pacing and content that leads to a good experience, and from there you'll be in a much stronger position to think about app-ifying your product.&lt;/p&gt;

&lt;p&gt;And therein lies the last, most important lesson here. Choosing not to app-ify your product from day one doesn't mean you'll &lt;strong&gt;never&lt;/strong&gt; turn it into an app or other digital product. Rather, this is about developing your product intelligently. If you jump straight to an app without validating your guesses about what will solve your users' problems most effectively, it's likely you'll build the wrong thing and wind up wasting all that effort. The App Store is already littered with the abandoned corpses of apps that failed to learn this lesson, don't be another one of them.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>mobile</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How To Deploy Python Scrapy Spiders for Free on Cloud</title>
      <author>Jerry Ng</author>
      <pubDate>Mon, 19 Jul 2021 15:25:28 +0000</pubDate>
      <link>https://dev.to/jerrynsh/how-to-deploy-python-scrapy-spiders-for-free-on-cloud-3l83</link>
      <guid>https://dev.to/jerrynsh/how-to-deploy-python-scrapy-spiders-for-free-on-cloud-3l83</guid>
      <description>&lt;p&gt;Running &lt;em&gt;&lt;a href="https://github.com/scrapy/scrapy"&gt;Scrapy&lt;/a&gt;&lt;/em&gt; spiders in your local machine can be very convenient during the early stage of development. But, we would eventually need to deploy and run our spiders in the cloud periodically.&lt;/p&gt;

&lt;p&gt;In search of &lt;strong&gt;free&lt;/strong&gt; options for running periodic crawling jobs, I have come across a few options available in the market such as &lt;em&gt;&lt;a href="https://docs.scrapy.org/en/latest/topics/deploy.html#deploy-scrapy-cloud"&gt;Zyte Scrapy Cloud&lt;/a&gt;&lt;/em&gt; where you can easily deploy, run and scale your web crawlers.&lt;/p&gt;

&lt;p&gt;However, if you intend to multiple spiders &lt;a href="https://support.zyte.com/support/solutions/articles/22000200419-scheduling-periodic-jobs"&gt;periodically&lt;/a&gt;, you would have to start paying.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;By the end of this article, you should be able to deploy your &lt;em&gt;Scrapy&lt;/em&gt; project and schedule a periodic job to crawl data from your target site for &lt;strong&gt;free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that this &lt;strong&gt;might&lt;/strong&gt; &lt;strong&gt;not be an ideal solution for large-scale&lt;/strong&gt; crawler applications where you would need to manage hundreds of spiders.&lt;/p&gt;

&lt;p&gt;In that case, using paid service to scale and manage your spiders (with &lt;a href="https://docs.scrapy.org/en/latest/topics/practices.html#distributed-crawls"&gt;distributed crawling&lt;/a&gt;) should be part of your considerations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;To follow, I would expect you to have your &lt;em&gt;Scrapy&lt;/em&gt; project ready to be deployed and running &lt;code&gt;scrapy crawl examplespider&lt;/code&gt; command should work.&lt;/p&gt;

&lt;p&gt;Your project root directory should contain either one of these — &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;Pipfile&lt;/code&gt; or &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If none of these files is present in your app’s root directory, the Python buildpack will fail to identify your application correctly. (source)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#enters-heroku"&gt;
  &lt;/a&gt;
  Enters Heroku
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zq3WTjLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hj1nd4cecgfflgjpe5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zq3WTjLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hj1nd4cecgfflgjpe5t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Heroku is a container-based cloud Platform as a Service (PaaS)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-heroku-account-registration"&gt;
  &lt;/a&gt;
  1. Heroku account registration
&lt;/h3&gt;

&lt;p&gt;First, you would need to register an account with &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; it’s free!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-installing-heroku-cli"&gt;
  &lt;/a&gt;
  2. Installing Heroku CLI
&lt;/h3&gt;

&lt;p&gt;After your account registration, let’s use &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt; to create and manage our project. You may check out the installation steps for other OS &lt;a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For macOS:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;brew tap heroku/brew &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew &lt;span class="nb"&gt;install &lt;/span&gt;heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-login"&gt;
  &lt;/a&gt;
  3. Login
&lt;/h3&gt;

&lt;p&gt;To log in using Heroku’s CLI, simply &lt;code&gt;cd&lt;/code&gt; to your project folder and run &lt;code&gt;heroku login&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku: Press any key to open up the browser to login or q to &lt;span class="nb"&gt;exit&lt;/span&gt;:

Opening browser to https://cli-auth.heroku.com/auth/cli/browser/xxxx-xxxx-xxxx-xxxx-xxxx?requestor&lt;span class="o"&gt;=&lt;/span&gt;xxxx.xxxx.xxxxLogging &lt;span class="k"&gt;in&lt;/span&gt;... &lt;span class="k"&gt;done
&lt;/span&gt;Logged &lt;span class="k"&gt;in &lt;/span&gt;asjerry@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-git"&gt;
  &lt;/a&gt;
  4. Git
&lt;/h3&gt;

&lt;p&gt;At this stage, you should already have set up your project with &lt;code&gt;git init&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;The next steps are to turn your project into a git repository and push it to Heroku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# i. To create a Heroku application:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;heroku apps:create scrapy_example_project

&lt;span class="c"&gt;# ii. Add a remote to your local repository:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;heroku git:remote &lt;span class="nt"&gt;-a&lt;/span&gt; scrapy_example_project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we’re done here, let’s open up our Heroku &lt;a href="https://dashboard.heroku.com/apps"&gt;dashboard&lt;/a&gt; page for your newly created Heroku application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-setup-free-tier-managed-postgresql-service-on-heroku"&gt;
  &lt;/a&gt;
  Optional: Setup free tier managed PostgreSQL service on Heroku
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You would only need this step if your Scrapy project has a pipeline that stores scraped items in a PostgreSQL database. Take note that the free tier only has a limit of 10,000 rows at the time of writing this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWjg_D-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i00y5tr6jphunobskm2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWjg_D-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i00y5tr6jphunobskm2a.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Select Application → ‘Resources’ tab → Find ‘Heroku Postgres’ → Select your plan &amp;amp; ‘Submit Order Form’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This step is fairly simple, simply go to the ‘Resources’ tab on your Heroku dashboard and look for ‘&lt;a href="https://www.heroku.com/postgres"&gt;Heroku Postgres&lt;/a&gt;’, select the free tier (or whichever you deem fit).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDLLcyRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9xh1drkt5rjpfp05wi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDLLcyRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9xh1drkt5rjpfp05wi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Select ‘View Credentials’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To look for your database credentials, simply click on your ‘Heroku Postgres’ add-on → select ‘Settings’ → ‘View Credentials’&lt;/p&gt;

&lt;p&gt;Finally, configure your &lt;em&gt;Scrapy&lt;/em&gt; project’s connection to your database accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# settings.py&lt;/span&gt;
&lt;span class="c"&gt;# This is just an example, you might be using a different variable name&lt;/span&gt;

DATABASE_CONNECTION_STRING &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{drivername}://{user}:{password}@{host}:{port}/{db_name}'&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;drivername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'postgresql'&lt;/span&gt;,
    &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_USERNAME'&lt;/span&gt;, &lt;span class="s1"&gt;'postgres'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_PASSWORD'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_HOST'&lt;/span&gt;, &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_PORT'&lt;/span&gt;, &lt;span class="s1"&gt;'5432'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_DATABASE'&lt;/span&gt;, &lt;span class="s1"&gt;'burplist'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Or alternatively:&lt;/span&gt;
DATABASE_CONNECTION_STRING &lt;span class="o"&gt;=&lt;/span&gt; ‘postgres://xxxx:xxxx@ec2-xx-xxx-xxx-xx.compute-1.amazonaws.com:5432/xxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-end-results"&gt;
  &lt;/a&gt;
  5. End Results
&lt;/h3&gt;

&lt;p&gt;By the end of this, if you were to visit your Heroku dashboard activity feed, you should see your application there where the latest activity says that your app has been deployed.&lt;/p&gt;

&lt;p&gt;If you try to run &lt;code&gt;heroku run scrapy crawl examplespider&lt;/code&gt; on your local terminal, you should see that it will attempt to run the crawler on your Heroku server.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#heroku-scheduler"&gt;
  &lt;/a&gt;
  Heroku Scheduler
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This section of the article shows you how you can run your crawlers/spiders periodically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though Heroku offers several different schedulers that could run your application periodically, I personally prefer ‘&lt;a href="https://devcenter.heroku.com/articles/scheduler"&gt;Heroku Scheduler&lt;/a&gt;’ as it has a free tier and it is super simple to use.&lt;/p&gt;

&lt;p&gt;To use the free tier of this add-on, Heroku requires you to &lt;strong&gt;add a payment method&lt;/strong&gt; to your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IT53gvrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7trz36dle94pt6flbc4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT53gvrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7trz36dle94pt6flbc4k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Select Application → ‘Resources’ tab → Find ‘Heroku Scheduler → Select your plan &amp;amp; ‘Submit Order Form’&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-configuration"&gt;
  &lt;/a&gt;
  1. Configuration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oOW6n2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v21opkafo091jz8s6y2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oOW6n2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v21opkafo091jz8s6y2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;This is how the ‘Add Job’ screen would look like&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inside your newly added ‘Heroku Scheduler’ add-on, simply select ‘Add Job’ on the top right corner and you should see the screen as shown in the picture beside.&lt;/p&gt;

&lt;p&gt;To run the &lt;code&gt;scrapy crawl examplespider&lt;/code&gt; command periodically, simply select a time interval and save job.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-how-do-i-run-all-my-spiders-in-one-single-command"&gt;
  &lt;/a&gt;
  2. How do I run all my spiders in one single command?
&lt;/h3&gt;

&lt;p&gt;Locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 scrapy crawl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On &lt;em&gt;Heroku&lt;/em&gt; from your local terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 heroku run scrapy crawl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-how-do-i-schedule-a-weekly-monthly-job"&gt;
  &lt;/a&gt;
  3. How do I schedule a weekly, monthly job?
&lt;/h3&gt;

&lt;p&gt;Simply configure our ‘Heroku Scheduler’ to run a bash script &lt;strong&gt;every day&lt;/strong&gt; at a time where the bash script checks if today is the day of the week before running your actual &lt;code&gt;scrapy crawl examplespider&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Example bash script. E.g.: run &lt;code&gt;bash task.sh weekly 3&lt;/code&gt; to run on every Wednesday&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Currently Heroku Scheduler only supports scheduling at every 10min/hour/day interval&lt;/span&gt;
&lt;span class="c"&gt;# Reference: https://dashboard.heroku.com/apps/burplist/scheduler&lt;/span&gt;

&lt;span class="c"&gt;# To run every Monday&lt;/span&gt;
&lt;span class="c"&gt;# ./task.sh weekly 1&lt;/span&gt;

&lt;span class="c"&gt;# To run now&lt;/span&gt;
&lt;span class="c"&gt;# ./task.sh&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"weekly"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Frequency: &amp;lt;Weekly&amp;gt; | Day of the week: &amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +%u&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Starting 🕷 to get data from the 🕸..."&lt;/span&gt;
        scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 scrapy crawl
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Finished running all 🕷."&lt;/span&gt;
    &lt;span class="k"&gt;fi
else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Frequency: &amp;lt;Now&amp;gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Starting 🕷 to get data from the 🕸..."&lt;/span&gt;
    scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 scrapy crawl
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Finished running all 🕷."&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OhJP7Tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7wrx3dxnh6m8rtau5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OhJP7Tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7wrx3dxnh6m8rtau5a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;To wrap things up, I have found a lot of success in deploying and running my spiders periodically with this method. The only downside here is the free tier version of ‘Heroku Postgres’ which only supports up to 10,000 database rows.&lt;/p&gt;

&lt;p&gt;In this case, we can easily opt-in for the paid version of it and scale our database accordingly based on our demand. On a side note, we could also easily swap out our &lt;em&gt;Scrapy&lt;/em&gt; project’s database instance to use another cloud RDS solution such as &lt;a href="https://aws.amazon.com/rds/"&gt;Amazon RDS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On top of these, you can also easily opt-in for other available Heroku &lt;a href="https://devcenter.heroku.com/categories/add-ons"&gt;add-ons&lt;/a&gt; for logging and monitoring purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-free-alternative-method"&gt;
  &lt;/a&gt;
  Another Free Alternative Method
&lt;/h2&gt;

&lt;p&gt;While I am aware that we could use &lt;em&gt;&lt;a href="https://github.com/scrapy/scrapyd"&gt;Scrapyd&lt;/a&gt;&lt;/em&gt; to host your spiders and actually send requests, alongside with &lt;em&gt;&lt;a href="https://github.com/my8100/scrapydweb/"&gt;ScrapydWeb&lt;/a&gt;&lt;/em&gt;, I personally prefer to keep my scraper deployment simple, quick, and free.&lt;/p&gt;

&lt;p&gt;Thank you for reading and take care!&lt;/p&gt;

</description>
      <category>python</category>
      <category>heroku</category>
      <category>cloud</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Smart Pointers in Rust: What, why and how?</title>
      <author>Roger Torres (he/him/ele)</author>
      <pubDate>Mon, 19 Jul 2021 15:25:22 +0000</pubDate>
      <link>https://dev.to/rogertorres/smart-pointers-in-rust-what-why-and-how-oma</link>
      <guid>https://dev.to/rogertorres/smart-pointers-in-rust-what-why-and-how-oma</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; I will cover some of Rust's smart pointers: &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;Cell&lt;/code&gt;, &lt;code&gt;RefCell&lt;/code&gt;, &lt;code&gt;Rc&lt;/code&gt;, &lt;code&gt;Arc&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems pretty obvious that smart pointers are pointers that are... &lt;em&gt;smart&lt;/em&gt;. But &lt;strong&gt;what&lt;/strong&gt; exactly does this "smart" means? &lt;strong&gt;When&lt;/strong&gt; should we use them? &lt;strong&gt;How&lt;/strong&gt; do they work? &lt;/p&gt;

&lt;p&gt;These are the questions I will begin to answer here. And that is it: &lt;em&gt;the beginning of an answer&lt;/em&gt;, nothing more. I expect that this article will give you a "background of understanding" (something like "familiarity" with the concept) that will help you accommodate a real understanding of the topic, which will come from reading the official documentation and, of course, practice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you are already familiar with it, you may use this text as a list of relevant reading. Look for the "useful links" at the beginning of each section.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Index:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#box"&gt;Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cell"&gt;Cell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refcell"&gt;RefCell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rc"&gt;Rc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arc"&gt;Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rwlock"&gt;RwLock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mutex"&gt;Mutex&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#smart-points-in-general"&gt;
  &lt;/a&gt;
  Smart points in general
&lt;/h2&gt;

&lt;p&gt;As explained in &lt;a href="https://doc.rust-lang.org/book/ch15-00-smart-pointers.html"&gt;&lt;em&gt;The Book&lt;/em&gt;&lt;/a&gt;, pointers are variables containing an address that "points at" some other data. The usual pointer in Rust is the reference (&lt;code&gt;&amp;amp;&lt;/code&gt;). Smart pointers are pointers that "have additional metadata and capabilities", e.g., they may count how many times the value was borrowed, provide methods to manage read and write locks, etc.&lt;/p&gt;

&lt;p&gt;Technically speaking, &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Vec&lt;/code&gt; are also smart pointers, but I will not cover them here as they are quite common and are usually thought of as types rather than pointers.&lt;/p&gt;

&lt;p&gt;~I will spare myself of mentioning how to create a pointer, as all of them have the same method: &lt;code&gt;new()&lt;/code&gt;.~&lt;/p&gt;

&lt;p&gt;Also note that, from this list, only &lt;code&gt;Arc&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt;, and &lt;code&gt;Mutex&lt;/code&gt; are thread-safe.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#boxlttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Box&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"&gt;Documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/rust-by-example/std/box.html"&gt;Box, stack and heap&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; allows you to store &lt;code&gt;T&lt;/code&gt; on the heap. So, if you have, say, a &lt;code&gt;u64&lt;/code&gt; that would be stored on the stack, &lt;code&gt;Box&amp;lt;u64&amp;gt;&lt;/code&gt; will store it on the heap.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are not comfortable with the concepts of stack and heap, read &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html?highlight=stack#the-stack-and-the-heap"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;Values stored on the stack cannot grow, as Rust needs to know its size at compile time. The best example of how this may affect your programming that I know is in &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html?highlight=recursion#enabling-recursive-types-with-boxes"&gt;&lt;em&gt;The Book&lt;/em&gt;&lt;/a&gt;: &lt;strong&gt;recursion&lt;/strong&gt;. Consider the code below (and its comments).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// This does not compile. The List contains itself,  &lt;/span&gt;
&lt;span class="c"&gt;// being recursive and therefore having an infinite size.&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="nf"&gt;Cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="nb"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// This does compile because the size of a pointer&lt;/span&gt;
&lt;span class="c"&gt;// does not change according to the size of the pointed value.&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="nf"&gt;Cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="nb"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to read &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html?highlight=recursion#enabling-recursive-types-with-boxes"&gt;this section on &lt;em&gt;The Book's&lt;/em&gt;&lt;/a&gt; to understand the details.&lt;/p&gt;

&lt;p&gt;On a more general note, &lt;code&gt;Box&lt;/code&gt; is useful when your value is too big to be kept on the stack or when you need to &lt;a href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html"&gt;own&lt;/a&gt; it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;To get the value &lt;code&gt;T&lt;/code&gt; inside &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; you just have to deref it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;boxed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#celllttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Cell&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/std/cell/"&gt;Module documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"&gt;Pointer documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; gives a shared reference to &lt;code&gt;T&lt;/code&gt; while allowing you to change &lt;code&gt;T&lt;/code&gt;.  This is one of the  "shareable mutable containers" provided by the module &lt;a href="https://doc.rust-lang.org/std/cell/"&gt;&lt;code&gt;std::cell&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;In Rust, shared references are immutable. This guarantees that when you access the inner value you are not getting something different than expected, as well as assure that you are not trying to access the value after it was freed (which is a big chunk of those &lt;a href="https://www.zdnet.com/article/chrome-70-of-all-security-bugs-are-memory-safety-issues/"&gt;70% of security bugs that are memory safety issues&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;What &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; does is provide functions that control our access to &lt;code&gt;T&lt;/code&gt;. You can find them all &lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html"&gt;here&lt;/a&gt;, but for our explanation we just need two: &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Basically, &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; allows you to freely change &lt;code&gt;T&lt;/code&gt; with &lt;code&gt;T.set()&lt;/code&gt; because when you use &lt;code&gt;T.get()&lt;/code&gt;, you retrieve &lt;a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;T&lt;/code&gt;, not a reference. That way, even if you change &lt;code&gt;T&lt;/code&gt;, the copied value you got with &lt;code&gt;get()&lt;/code&gt; will remain the same, and if you destroy &lt;code&gt;T&lt;/code&gt;, no pointer will dangle.&lt;/p&gt;

&lt;p&gt;One last note is that &lt;code&gt;T&lt;/code&gt; has to implement &lt;code&gt;Copy&lt;/code&gt; as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;eleven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;twelve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eleven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twelve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#refcelllttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;RefCell&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch15-05-interior-mutability.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; also gives shared reference to &lt;code&gt;T&lt;/code&gt;, but while &lt;code&gt;Cell&lt;/code&gt; is statically checked (Rust checks it at compile time), &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is dynamically checked (Rust checks it at run time).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;Because &lt;code&gt;Cell&lt;/code&gt; operates with copies, you should restrict yourself to using small values with it, which means that you need references once again, which leads us back to the problem that &lt;code&gt;Cell&lt;/code&gt; solved. &lt;/p&gt;

&lt;p&gt;The way &lt;code&gt;RefCell&lt;/code&gt; deals with it is by keeping track of who is reading and who writing  &lt;code&gt;T&lt;/code&gt;. That's why &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is dynamically checked: because &lt;strong&gt;you&lt;/strong&gt; are going to code this check. But fear not, Rust will still make sure you don't mess up at compile time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; has methods that borrow either a mutable or immutable reference to  &lt;code&gt;T&lt;/code&gt;; methods that will not allow you to do so if this action would be unsafe. As with &lt;code&gt;Cell&lt;/code&gt;, there are several methods in &lt;code&gt;RefCell&lt;/code&gt;, but these two are enough to illustrate the concept: &lt;code&gt;borrow()&lt;/code&gt;, which gets an immutable reference; and &lt;code&gt;borrow_mut()&lt;/code&gt;, which gets a mutable reference. The logic used by &lt;code&gt;RefCell&lt;/code&gt; goes something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is &lt;strong&gt;no reference&lt;/strong&gt; (either mutable or immutable) to &lt;code&gt;T&lt;/code&gt;, you may get either a mutable or immutable reference to it;&lt;/li&gt;
&lt;li&gt;If there is already a &lt;strong&gt;mutable reference&lt;/strong&gt; to &lt;code&gt;T&lt;/code&gt;, you may get nothing and got to wait until this reference is dropped;&lt;/li&gt;
&lt;li&gt;If there are one or more &lt;strong&gt;immutable references&lt;/strong&gt; to &lt;code&gt;T&lt;/code&gt;, you may get an immutable reference to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there is no way to get both mutable and immutable references to &lt;code&gt;T&lt;/code&gt; at the same time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remember:&lt;/strong&gt; this is &lt;strong&gt;not&lt;/strong&gt; thread-safe. When I say "no way", I am talking about a single thread.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another way to think about is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mutable&lt;/strong&gt; references are &lt;strong&gt;shared&lt;/strong&gt; references;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Immutable&lt;/strong&gt; references are &lt;strong&gt;exclusive&lt;/strong&gt; references.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is worth to say that the functions mentioned above have variants that do not panic, but returns &lt;code&gt;Result&lt;/code&gt; instead: &lt;code&gt;try_borrow()&lt;/code&gt; and &lt;code&gt;try_borrow_mut()&lt;/code&gt;;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.borrow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c"&gt;// You may borrow as immutable as many times as you want,...&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_ok&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="c"&gt;// ...but cannot borrow as mutable because &lt;/span&gt;
    &lt;span class="c"&gt;// it is already borrowed as immutable.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="c"&gt;// After the first borrow as mutable...&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.borrow_mut&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c"&gt;// ...you cannot borrow in any way.&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#rclttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Rc&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch15-04-rc.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/rc/index.html"&gt;Module documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"&gt;Pointer documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/rust-by-example/std/rc.html"&gt;Rust by example&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;I will quote the documentation on this one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The type &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated on the heap. Invoking &lt;a href="https://doc.rust-lang.org/std/clone/trait.Clone.html#tymethod.clone"&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Rc&lt;/code&gt; produces a new pointer to the same allocation on the heap. When the last &lt;code&gt;Rc&lt;/code&gt; pointer to a given allocation is destroyed, the value stored in that allocation (often referred to as “inner value”) is also dropped.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, like a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; allocates &lt;code&gt;T&lt;/code&gt; on the heap. The difference is that cloning &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; will give you another &lt;code&gt;T&lt;/code&gt; inside another &lt;code&gt;Box&lt;/code&gt; while cloning &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; gives you another &lt;code&gt;Rc&lt;/code&gt; to the &lt;strong&gt;same&lt;/strong&gt; &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another important remark is that we don't have interior mutability in &lt;code&gt;Rc&lt;/code&gt; as we had in &lt;code&gt;Cell&lt;/code&gt; or &lt;code&gt;RefCell&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;You want to have shared access to some value (without making copies of it), but you want to let it go once it is no longer used, i.e., when there is no reference to it.&lt;/p&gt;

&lt;p&gt;As there is no interior mutability in &lt;code&gt;Rc&lt;/code&gt;, it is common to use it alongside &lt;code&gt;Cell&lt;/code&gt; or &lt;code&gt;RefCell&lt;/code&gt;, for example, &lt;code&gt;Rc&amp;lt;Cell&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, you are using the &lt;code&gt;clone()&lt;/code&gt; method. Behind the scene, it will count the number of references you have and, when it goes to zero, it drops &lt;code&gt;T&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c"&gt;// After borrwing as immutable...&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// ...you can no longer borrow as mutable,...&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// ...but can still borrow as immutable.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// Here we have 3 pointer ("c", "_first" and "_second").&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// After we drop the last two, we remain only with "c" itself.&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;// And now we can borrow it as mutable.&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#arclttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Arc&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"&gt;Documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/rust-by-example/std/arc.html"&gt;Rust by example&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Arc&lt;/code&gt; is the thread-safe version of &lt;code&gt;Rc&lt;/code&gt;, as its counter is managed through atomic operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;I think the reason why you would use &lt;code&gt;Arc&lt;/code&gt; instead of &lt;code&gt;Rc&lt;/code&gt; is clear (thread-safety), so the pertinent question becomes: why not just use &lt;code&gt;Arc&lt;/code&gt; &lt;em&gt;every&lt;/em&gt; time? The answer is that these extra controls provided by &lt;code&gt;Arc&lt;/code&gt; come with an overhead cost. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;Just like &lt;code&gt;Rc&lt;/code&gt;,  with &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; you will be using &lt;code&gt;clone()&lt;/code&gt; to get a pointer to the same value &lt;code&gt;T&lt;/code&gt;, which will be destroyed once the last pointer is dropped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// You could not do this with "Rc"&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"Value: {:?} / Active pointers: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#rwlocklttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;RwLock&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful link: &lt;a href="https://doc.rust-lang.org/std/sync/struct.RwLock.html"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;RwLock&lt;/code&gt; is also provided by the &lt;a href="https://docs.rs/parking_lot/0.10.2/parking_lot/type.RwLock.html"&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;As a reader-writer lock, &lt;code&gt;RwLock&amp;lt;T&amp;gt;&lt;/code&gt; will only give access to &lt;code&gt;T&lt;/code&gt; once you are holding one of the locks: &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;, which are given following these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;To read&lt;/strong&gt;: If you want a lock to read, you may get it as long as &lt;em&gt;no writer&lt;/em&gt; is holding the lock; otherwise, you have to wait until it gets dropped;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To write&lt;/strong&gt;: If you want a lock to write, you may get as long as &lt;em&gt;no one&lt;/em&gt;, reader or writer, is holding the lock; otherwise, you have to wait until it gets dropped;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RwLock&lt;/code&gt; allows you to read and write the same data from multiple threads. Different from &lt;code&gt;Mutex&lt;/code&gt; (see below), it distinguishes the kind of lock, so you may have several &lt;code&gt;read&lt;/code&gt; locks as far as you do not have any &lt;code&gt;write&lt;/code&gt; lock.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;When you want to read a &lt;code&gt;RwLock&lt;/code&gt;, you got to use the function &lt;code&gt;read()&lt;/code&gt;—or &lt;code&gt;try_read()&lt;/code&gt;—that will return a &lt;code&gt;LockResult&lt;/code&gt; that contains a &lt;code&gt;RwLockReadGuard&lt;/code&gt;. If it is successful, you will be able to access the value inside &lt;code&gt;RwLockReadGuard&lt;/code&gt; by using deref. If a writer is holding the lock, the thread will be blocked until it can take hold of the lock. &lt;/p&gt;

&lt;p&gt;Something similar happens when you try to use &lt;code&gt;write()&lt;/code&gt;—or &lt;code&gt;try_write()&lt;/code&gt;. The difference is that it will not only wait for a writer holding the lock, but for any reader holding the lock as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c"&gt;// You may pile as many read locks as you want.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.try_read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_ok&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="c"&gt;// But you cannot write.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.try_write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="c"&gt;// Note that if you use "write()" instead of "try_write()"&lt;/span&gt;
    &lt;span class="c"&gt;// it will wait until all the other locks are release&lt;/span&gt;
    &lt;span class="c"&gt;// (in this case, never).&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c"&gt;// If you grab the write lock, you may easily change it&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If some thread holding the lock panics, further attempts to get the loc will return a &lt;a href="https://doc.rust-lang.org/std/sync/struct.PoisonError.html"&gt;&lt;code&gt;PoisonError&lt;/code&gt;&lt;/a&gt;, which means that from then on every attempt to read &lt;code&gt;RwLock&lt;/code&gt; will return the same &lt;code&gt;PoisonError&lt;/code&gt;. You may recover from a poisoned &lt;code&gt;RwLock&lt;/code&gt; using &lt;code&gt;into_inner()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c_lock&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// the lock gets poisoned&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="nf"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poisoned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;poisoned&lt;/span&gt;&lt;span class="nf"&gt;.into_inner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;// It will be 12 because it was recovered from the poisoned lock&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#mutexlttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Mutex&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch16-03-shared-state.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt; is also provided by the &lt;a href="https://docs.rs/parking_lot/0.10.0/parking_lot/type.Mutex.html"&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt; is similar to &lt;code&gt;RwLock&lt;/code&gt;, but it only allows one lock-holder, does not matter if it is a reader or a writer. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;One reason to prefer &lt;code&gt;Mutex&lt;/code&gt; over &lt;code&gt;RwLock&lt;/code&gt; is that &lt;code&gt;RwLock&lt;/code&gt;  may lead to writer starvation (when the readers pile on and the writer never gets a chance to take the lock, waiting forever), something the does not happen with &lt;code&gt;Mutex&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Of course, we are diving into deeper seas here, so the real-life choice falls on more advanced considerations, such as how many readers you expect at the same time, how the operating system implements the locks, and so on...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt; and &lt;code&gt;RwLock&lt;/code&gt; work in a similar fashion, the difference is that because &lt;code&gt;Mutex&lt;/code&gt; does not differentiate between readers and writers, you just use &lt;code&gt;lock()&lt;/code&gt; or &lt;code&gt;try_lock&lt;/code&gt; to get the &lt;code&gt;MutexGuard&lt;/code&gt;. The poisoning logic also happens here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c"&gt;// It does not matter if you are locking the Mutex to read or write,&lt;/span&gt;
&lt;span class="c"&gt;// you can only lock it once.&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c"&gt;// You may change it just like you did with RwLock&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can deal with poisoned &lt;code&gt;Mutex&lt;/code&gt; in the same way as you deal with poisoned &lt;code&gt;RwLock&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Thank you for reading! :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>rust</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>The techniques to help simplify CSS</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 19 Jul 2021 15:00:10 +0000</pubDate>
      <link>https://dev.to/melnik909/the-techniques-to-help-simplify-css-39gj</link>
      <guid>https://dev.to/melnik909/the-techniques-to-help-simplify-css-39gj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mobile-first-without-overrides"&gt;
  &lt;/a&gt;
  Mobile First without overrides
&lt;/h2&gt;

&lt;p&gt;There is the mobile first approach dictates we should create interfaces from small (such as cell phones, watch, etc) to large devices (desktop, tv, etc). &lt;/p&gt;

&lt;p&gt;So developers use the min-width media feature. As a result, they'll get a lot of overrides. For example, I add paddings with overriding. &lt;/p&gt;

&lt;p&gt;I think it will become not readable when you have a lot of code. So I propose to save the idea of the mobile first approach but think about ranges of devices and add styles only when they're needed using the min-width and max-width features. &lt;/p&gt;

&lt;p&gt;For example, I use different paddings but the ranges help to avoid overrides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;481px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;961px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;481px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;960px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;961px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-shorthands-as-needed"&gt;
  &lt;/a&gt;
  Using shorthands as needed
&lt;/h2&gt;

&lt;p&gt;Usually, developers like to use the CSS shorthand syntax. Yes, it will work. But you don't think shorthand always defines values for a few properties. For example, the background sets the value for 10 properties! &lt;/p&gt;

&lt;p&gt;Thus that will lead to overrides of properties and difficult maintaining in the future. So just don't use the shorthand syntax, if you aren't sure that is really needed. For example, just use the background-color property to change the element's background color.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#margin-and-padding-without-0-values"&gt;
  &lt;/a&gt;
  margin and padding without 0 values
&lt;/h2&gt;

&lt;p&gt;A lot of time there is the practice of using the margin and padding shorthand that leads to complication of code maintaining in the future. The problem is people set 0 value when it doesn't need. For example, if they have to set top and bottom margins to 1rem they'll write padding: 1rem 0;&lt;/p&gt;

&lt;p&gt;In this case, the 0 value will lead to you have to override it in the future. And do that every time. So you will go to overrides hell. &lt;/p&gt;

&lt;p&gt;As a solution, I recommend using margin and padding shorthand only when you have to set values for all sides. And if you have to set value for specific sides use single margin-* and padding-* properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
If you like this post, please, &lt;a href="//twitter.com/intent/tweet?text=Stas%20Melnikov%20(%40melnik909)%20shared%20The%20techniques%20to%20help%20simplify%20CSS%20on%20%40ThePracticalDev%20Let%27s%20go%20to%20read%20it%20dev.to/melnik909/the-techniques-to-help-simplify-css-39gj"&gt;share it on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm always open to any opportunities to share knowledge about CSS and HTML with you. So I can:&lt;br&gt;
🖐 answer any of your questions about CSS and HTML (&lt;em&gt;free&lt;/em&gt;)&lt;br&gt;
💻 make written code review of your projects (&lt;em&gt;paid&lt;/em&gt;)&lt;br&gt;
👨‍🎓 tell about what you should learn (&lt;em&gt;paid&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Just chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also you can say thank you:&lt;br&gt;
👘 Buy a shirt, stickers, or other goods for frontenders: &lt;a href="https://www.redbubble.com/shop/ap/79109127"&gt;https://www.redbubble.com/shop/ap/79109127&lt;/a&gt;&lt;br&gt;
🥇 Support my work: &lt;a href="https://www.patreon.com/melnik909"&gt;https://www.patreon.com/melnik909&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me:&lt;br&gt;
🦜 Twitter: &lt;a href="https://twitter.com/melnik909"&gt;https://twitter.com/melnik909&lt;/a&gt;&lt;br&gt;
🦉 Facebook: &lt;a href="https://www.facebook.com/melnik909/"&gt;https://www.facebook.com/melnik909/&lt;/a&gt;&lt;br&gt;
🐞 Instagram: &lt;a href="https://www.instagram.com/s.melnik909/"&gt;https://www.instagram.com/s.melnik909/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Integrate your React App with Smart Contracts</title>
      <author>Nazeeh Vahora</author>
      <pubDate>Mon, 19 Jul 2021 14:57:34 +0000</pubDate>
      <link>https://dev.to/nazeeh21/integrate-your-react-app-with-smart-contracts-4o3m</link>
      <guid>https://dev.to/nazeeh21/integrate-your-react-app-with-smart-contracts-4o3m</guid>
      <description>&lt;p&gt;In the &lt;a href="https://nazeeh.hashnode.dev/develop-your-first-dapp"&gt;previous blog&lt;/a&gt;, we discussed writing a Smart Contract using Solidity and interacting with it using &lt;a href="http://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt;. Now, we'll deploy our &lt;strong&gt;Lottery contract&lt;/strong&gt; wrote in &lt;a href="https://nazeeh.hashnode.dev/develop-your-first-dapp"&gt;previous blog&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#note-you-can-refer-this-repo-to-follow-along"&gt;
  &lt;/a&gt;
  Note: You can refer &lt;a href="https://github.com/Nazeeh21/Lottery-Contract"&gt;this repo&lt;/a&gt; to follow along.
&lt;/h5&gt;

&lt;p&gt;Initialize an empty react project namely &lt;em&gt;Lottery-Contract&lt;/em&gt; using the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;contract&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add &lt;em&gt;Typescript&lt;/em&gt; support to your project by following the steps mentioned &lt;a href="https://create-react-app.dev/docs/adding-typescript/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;lottery-contract&lt;/code&gt; directory, create a directory namely &lt;code&gt;contracts&lt;/code&gt;.  In &lt;code&gt;contracts&lt;/code&gt; directory, create new file namely &lt;code&gt;Lottery.sol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Copy the Smart contract from the Remix IDE and paste it in the &lt;code&gt;Lottery.sol&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Previously in Remix, we tested our Smart Contract by deploying it locally. Now, to interact with our Contract from the frontend, we need to deploy it to a public blockchain network i.e. &lt;strong&gt;Rinkeby Test Network&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For deploying a Contract to a public network, we first need to have the &lt;strong&gt;Metamask extension&lt;/strong&gt; installed. If you don't have Metamask, you can install it from &lt;a href="https://metamask.io/"&gt;here&lt;/a&gt; and Sign in. While signing in, you will be prompted to copy the &lt;em&gt;Backup Phrase&lt;/em&gt;. Copy that &lt;em&gt;Backup Phrase&lt;/em&gt; and save it for future reference. After signing in, get some free ethers from public faucets.&lt;/p&gt;

&lt;p&gt;Now, to deploy our contract we first need to compile our Solidity Contract.&lt;/p&gt;

&lt;p&gt;To deploy our Contract, we need to add *&lt;em&gt;Solidity *&lt;/em&gt; compiler to our project by running the following command. We also need &lt;code&gt;fs&lt;/code&gt; (file-system) module for reading the files, along with the Solidity compiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;extra&lt;/span&gt; &lt;span class="nx"&gt;solc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the project directory, create a &lt;code&gt;compile.js&lt;/code&gt; file, for writing the logic to compile our Solidity contract.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code&gt;compile.js&lt;/code&gt; file and paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lotteryPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contracts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lottery.sol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lotteryPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;source&lt;/code&gt; variable, we have stored Solidity Contract by reading the Contract using &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; module (&lt;code&gt;path&lt;/code&gt; is a native js library).&lt;/p&gt;

&lt;p&gt;Now, we have to compile this contract and export it. For that, paste the code from below in the &lt;code&gt;compile.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contracts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:Lottery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we have used &lt;code&gt;solc.compile()&lt;/code&gt; which compiles our Solidity Contract and returns &lt;code&gt;interface&lt;/code&gt; and &lt;code&gt;bytecode&lt;/code&gt;,  which we will use to deploy our Contract on Rinkeby Test Network.&lt;/p&gt;

&lt;p&gt;You can see the compiled Contract by logging the output from &lt;code&gt;solc.compile()&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;Now, in the root directory, create a &lt;code&gt;deploy.js&lt;/code&gt; file, which will contain our deployment logic.&lt;/p&gt;

&lt;p&gt;To deploy our contract, we need to add 2 libraries i.e. &lt;code&gt;truffle-hdwallet-provider&lt;/code&gt; and &lt;code&gt;web3&lt;/code&gt;. For that, run the following code in the root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;truffle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hdwallet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added the library packages required to deploy our Contract. But apart from the libraries, we'll need to access a &lt;em&gt;Blockchain node&lt;/em&gt; to deploy our contract on a live public network. This node will be provided by &lt;a href="https://infura.io/"&gt;infura&lt;/a&gt; to us.&lt;/p&gt;

&lt;p&gt;To get access to &lt;em&gt;node&lt;/em&gt; for our project, &lt;em&gt;singup&lt;/em&gt; on &lt;a href="https://infura.io/"&gt;infura.io&lt;/a&gt; and navigate to &lt;strong&gt;Ethereum&lt;/strong&gt; tab on the left Navbar. &lt;br&gt;
Under the &lt;strong&gt;Ethereum&lt;/strong&gt; tab, click on &lt;em&gt;Create New Project&lt;/em&gt; for creating a new project.&lt;/p&gt;

&lt;p&gt;After &lt;em&gt;creating new project&lt;/em&gt;, under the &lt;strong&gt;KEYS&lt;/strong&gt; section, expand the &lt;strong&gt;ENDPOINTS&lt;/strong&gt; and select &lt;strong&gt;Rinkeby&lt;/strong&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_7KNgB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626432039782/ksLgyj_8mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_7KNgB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626432039782/ksLgyj_8mp.png" alt="infura-endpoint.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecting the &lt;strong&gt;Rinkeby&lt;/strong&gt; network will change the 2 URLs displayed below the &lt;em&gt;ENDPOINTS&lt;/em&gt; dropdown. Copy the second URL from the two and save it, as we'll use it after some time to deploy our Contract.&lt;/p&gt;

&lt;p&gt;Navigate back to the &lt;code&gt;deploy.js&lt;/code&gt; file in our project and paste the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HDWalletProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truffle-hdwallet-provider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Getting the output of our compiled Solidity Contract&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bytecode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./compile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deploy a Contract to Rinkeby, we first need to set up a &lt;em&gt;wallet provider&lt;/em&gt; to connect our &lt;em&gt;Infura node&lt;/em&gt; with our &lt;em&gt;Metamask wallet&lt;/em&gt;. For that, copy the below code and paste in the &lt;code&gt;deploy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HDWalletProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// `$YOUR_METAMASK_RECOVERY_CODE`,&lt;/span&gt;
  &lt;span class="c1"&gt;// `$RINKEBY_INFURA_API`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;$YOUR_METAMASK_RECOVERY_CODE&lt;/code&gt; and &lt;code&gt;$RINKEBY_INFURA_API&lt;/code&gt; with your &lt;em&gt;Metamask recovery phrase&lt;/em&gt; and your &lt;em&gt;Infura API&lt;/em&gt; respectively.&lt;/p&gt;

&lt;p&gt;For interacting with the BlockChain Network and deploying our Contract, we are going to use &lt;code&gt;web3&lt;/code&gt;. To initialize an instance of &lt;code&gt;web3&lt;/code&gt; paste the below code in the &lt;code&gt;deploy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While creating an instance of web3, we are providing &lt;code&gt;provider&lt;/code&gt; as an argument to &lt;code&gt;Web3()&lt;/code&gt; function. Note, that we have configured our &lt;code&gt;provider&lt;/code&gt; with our &lt;em&gt;Metamask's recovery phrase&lt;/em&gt; and &lt;em&gt;Infura URL&lt;/em&gt;. Due to this, our Contract will get deployed using Ethers from our &lt;em&gt;Metamask wallet&lt;/em&gt; and our &lt;em&gt;Infura Node URL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, let's move to our deploy function. For that, paste the below code to the &lt;code&gt;deploy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// getting accounts from our Metamask wallet&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Attempting to deploy from account&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// deploying our contract&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bytecode&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1000000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Contract deployed to&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's discuss our &lt;code&gt;deploy&lt;/code&gt; function. Firstly, we have fetched the accounts connected to our &lt;em&gt;Metamask wallet&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Now, each &lt;strong&gt;Metamask wallet&lt;/strong&gt; comprises of &lt;em&gt;12 Ethereum wallets&lt;/em&gt;. Thus &lt;code&gt;web3.eth.getAccounts()&lt;/code&gt; will return an array comprising of &lt;strong&gt;12 wallet addresses&lt;/strong&gt;.&lt;br&gt;
Among these 12 addresses, we'll deploy from our &lt;em&gt;first account&lt;/em&gt;. Thus, we have used &lt;code&gt;accounts[0]&lt;/code&gt; for deploying our contract.&lt;/p&gt;

&lt;p&gt;Following that, we have declared a &lt;code&gt;result&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;In that, we have stored the returned data from our deployed Contract. &lt;/p&gt;

&lt;p&gt;To deploy our Contract, we need to call &lt;code&gt;new web3.eth.Contract(JSON.parse(interface))&lt;/code&gt; and in the &lt;code&gt;.Contract()&lt;/code&gt; method, we need to provide our Contract's &lt;code&gt;instance&lt;/code&gt; in JSON form as an argument.&lt;/p&gt;

&lt;p&gt;Following the &lt;code&gt;.Contract()&lt;/code&gt;, we have called &lt;code&gt;.deploy({ data: bytecode})&lt;/code&gt; and &lt;code&gt;.send({ gas: '1000000', from: accounts[0] })&lt;/code&gt; methods respectively. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;.deploy()&lt;/code&gt; function will take &lt;code&gt;bytecode&lt;/code&gt; of our contract as an argument and &lt;code&gt;.send()&lt;/code&gt; function will take &lt;strong&gt;gas&lt;/strong&gt; value and &lt;strong&gt;account address&lt;/strong&gt; as an argument.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gas&lt;/code&gt; is the amount of ether we need to send along with the deployment of our Contract and its unit is &lt;strong&gt;Wei&lt;/strong&gt;. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#note-gas-value-wont-get-stored-as-a-contract-ethers-on-the-rinkeby-network"&gt;
  &lt;/a&gt;
  Note: Gas value won't get stored as a Contract Ether's on the Rinkeby Network.
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;from&lt;/code&gt; attribute specifies the account from which we want to deploy our contract.&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;node deploy.js&lt;/code&gt; in the terminal. &lt;/p&gt;

&lt;p&gt;After a successful deployment of the Contract, &lt;strong&gt;interface&lt;/strong&gt; and &lt;strong&gt;Address&lt;/strong&gt; of the Contract will be logged in the console. Copy both the values and keep them for future reference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We have completed the deployment, now let's head on to the frontend interaction.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For that, we need to create a local instance of our contract, using our &lt;em&gt;Contract's interface&lt;/em&gt; and &lt;em&gt;blockchain Address&lt;/em&gt; on which our Contract is deployed.&lt;/p&gt;

&lt;p&gt;For that, in the &lt;code&gt;src&lt;/code&gt; folder, create an empty &lt;code&gt;web3.js&lt;/code&gt; file. In that file, copy the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethereum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;web3&lt;/code&gt; configuration, we have used &lt;code&gt;window.web3.currentProvider&lt;/code&gt; as a provider which uses the &lt;strong&gt;provider&lt;/strong&gt; from the &lt;strong&gt;Metamask&lt;/strong&gt; extension in the browser.&lt;/p&gt;

&lt;p&gt;But before using the Metamask provider, we need to enable it by writing &lt;code&gt;window.ethereum.enable();&lt;/code&gt;. This will allow us to use the Metamask provider in our browser.&lt;/p&gt;

&lt;p&gt;Now, let's create a local instance of our Contract using the Configuration of &lt;code&gt;web3&lt;/code&gt; we just configured above.&lt;/p&gt;

&lt;p&gt;Create an empty &lt;code&gt;lottery.ts&lt;/code&gt; file and copy the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* Your Contract's address */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
 &lt;span class="c1"&gt;//  Your Contract's abi code&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, get your Contract's &lt;em&gt;abi&lt;/em&gt; and &lt;em&gt;address&lt;/em&gt; which we logged in the terminal while deploying our Contract. Using both the values, export a new instance of &lt;code&gt;web3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, let's interact with our contract. Head on to the &lt;code&gt;App.tsx&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; folder.  Declare 3 variables shown below and Copy the &lt;code&gt;useEffect()&lt;/code&gt; function into the &lt;code&gt;App.tsx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPlayers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;contractBalance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setContractBalance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlayers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;setManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setPlayers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setContractBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For using the instance of our locally deployed &lt;strong&gt;Lottery&lt;/strong&gt; Contract, we need to import it. Thus, copy the &lt;code&gt;import&lt;/code&gt; statements from below to &lt;code&gt;App.tsx&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./lottery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;useEffect()&lt;/code&gt;, we are fetching the &lt;strong&gt;manager&lt;/strong&gt; of the Contract by calling &lt;code&gt;await lottery.methods.manager().call()&lt;/code&gt; method. Similarly, we can get &lt;strong&gt;players&lt;/strong&gt; in the Contract by calling &lt;code&gt;.getPlayers().call()&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;But, for getting the &lt;strong&gt;balance&lt;/strong&gt; of the Contract, we need to call &lt;code&gt;web3.eth.getBalance(lottery.options.address);&lt;/code&gt;. This function will use an instance of &lt;code&gt;web3&lt;/code&gt; and get the balance at the specified &lt;strong&gt;address&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These all functions will return &lt;code&gt;Promise&lt;/code&gt;. Thus, we need to make this function &lt;em&gt;asynchronous&lt;/em&gt;. After fetching all the values, update their respective states.&lt;/p&gt;

&lt;p&gt;Following, in the &lt;code&gt;src&lt;/code&gt; create an &lt;code&gt;App.css&lt;/code&gt; file. In &lt;code&gt;App.css&lt;/code&gt; add the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefers&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reduced&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;preference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spin&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="nx"&gt;c34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="nx"&gt;dafb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import this css in the &lt;code&gt;App.js&lt;/code&gt; file using the following import statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following code in the return statement of &lt;code&gt;App.tsx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;managed&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;currently&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;entered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;competing&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contractBalance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;ether&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submitForm&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;luck&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Amount&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ether&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1vw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1vh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Enter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Ready&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;pick&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onPickWinner&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pick&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above &lt;strong&gt;return&lt;/strong&gt; statement, it is clear that we are displaying the Contract's data and providing a form to enter the Contract.&lt;/p&gt;

&lt;p&gt;But, for our Frontend to get functional, we need to define &lt;code&gt;submitForm&lt;/code&gt; and &lt;code&gt;onPickWinner&lt;/code&gt; functions. So let's define it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting on transaction success...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You have been entered!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;submitForm()&lt;/code&gt; function, we are initially fetching the accounts. Following that, we are calling &lt;code&gt;lottery.methods.enter().send()&lt;/code&gt; method to enter the lottery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Here, we need to call the &lt;code&gt;.send()&lt;/code&gt; method as we are creating a transaction on the blockchain network and also need to specify the &lt;code&gt;account&lt;/code&gt; from which we want to make a transaction. Also, making a transaction on the blockchain network requires some amount of fee as a gas value and its unit is &lt;code&gt;Wei&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, declare &lt;code&gt;PickWinner()&lt;/code&gt; function as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onPickWinner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting on transaction success...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pickWinner&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A winner has been picked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, we have allowed only the manager of the contract to pick a winner. Thus, calling &lt;code&gt;pickWinner&lt;/code&gt; function from accounts other than the &lt;em&gt;manager's account&lt;/em&gt; will throw an error. Also sending a transaction on the blockchain will take about 15 - 20 s to get executed.&lt;/p&gt;

&lt;p&gt;Congratulations! You have successfully developed your first Dapp.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>solidity</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>When it Pays to Choose Microservices</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 19 Jul 2021 14:53:31 +0000</pubDate>
      <link>https://dev.to/typeable/when-it-pays-to-choose-microservices-12h5</link>
      <guid>https://dev.to/typeable/when-it-pays-to-choose-microservices-12h5</guid>
      <description>&lt;p&gt;Author: Victoriia Zaripova&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qTHaWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qTHaWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi everybody! My name is Victoria. Here at Typeable, I deal with the issues of application architecture, so I couldn't help asking the perennial question: To be or not to be? Specifically, is it worthwhile switching our solutions to microservices or not? To understand this, I've done small research of potential pros and cons. Here are my findings.&lt;/p&gt;

&lt;p&gt;Microservices started gaining popularity in 2011-2014, smoothly replacing heavyweight SOA and monolithic solutions, where the architecture obstructed access to the rapidly growing market of cloud applications.&lt;/p&gt;

&lt;p&gt;The approach itself evolved at the intersection of technologies out of the competitive need to bring the business to the next level instantaneously. Because of this, the solutions developed avalanche-like and quickly acquired add-ons, patterns, and CI/CD accessories. These reasons are still relevant for the business, and the interest in microservices has not declined over the last decade. At the same time, developing a microservice-based solution is a creative intellectual task for an IT team. It allows trying out state-of-the-art approaches and pinning down the conservatism dragons of previous solutions. That is, the challenge is quite noble.&lt;/p&gt;

&lt;p&gt;However, the benefit of giving in to this magic is highly questionable.&lt;/p&gt;

&lt;p&gt;Like any other fancy solution, microservices aren't always beneficial. Neither do they give a plaster for all sores.&lt;/p&gt;

&lt;p&gt;Nevertheless, let's look into the matter.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#history-of-the-solution-and-microservices"&gt;
  &lt;/a&gt;
  History of the solution and microservices
&lt;/h1&gt;

&lt;p&gt;The evolution of a typical IT solution can take the following path:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;MVP startup&lt;/strong&gt; is a solution mainly aimed to try the market and decide whether this concept works altogether. Complex technologies, advanced interfaces and high-load services are not needed here. Cost minimization and time to market are valued most of all at this stage. At times, MVP fails as early as at the stage of the focus group interview. Does it make sense to start building a microservice-based solution right away? My answer is no, don't give it a second thought. Time will be lost while you're thinking over the architecture and setting up the infrastructure. And this is the most valuable resource for a startup. Besides, it would be difficult to use the key profit factor of microservices – parallel development – with the startup team.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Newborn monolithic solution.&lt;/strong&gt; The application architecture is not fully verified, all internal and external services that will be used are not defined. The goals and objectives of end-users are not quite known. The data structure and functionality development strategy is not clear. Definitely, here it also doesn't make sense to start heading toward microservices, unless your team consists of profs for whom microservices are as easy as a pie.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;An old commercially available and stable monolithic solution&lt;/strong&gt; with a thoroughly verified functionality; any arising issues are solved by skilful refactoring; the development is expected to be smooth, without any competition between functional blocks. Does it make sense to switch to microservices? Probably, this needs to be thought if the aim is to provide integration with external services, increase the load on the existing functional blocks, ensure their independent development and market launch or if you want to cut corners on the technology stack or improve the solution characteristics by reusing components. In this case, you should be ready to reinforce your team with necessary specialists and spend time to break the monolith down into independent or very loosely coupled functional blocks and then bring these blocks out from the monolith as separate services. This will definitely require additional resources, as well as time to train the team and search for suitable technologies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multilevel monolith in DDD concept&lt;/strong&gt;. The functionality is split into logically grouped isolated or loosely coupled blocks, which are still located within a monolithic structure; the logic is separated from the infrastructure. This is a good starting point for the migration to microservices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Distributed monolith.&lt;/strong&gt; The development team has almost succeeded in breaking down the monolith, but something has obviously gone wrong. The services are too tightly connected to each other; explicit and implicit dependencies exist; the business is suffering because it sets forth requirements for one module, but it turns out that several modules need to be reworked; it's difficult to trace the effect of changes; testing and deployment require individual non-trivial approaches. Stop here and just think about it. Do you need microservices? Are there really any problems that cannot be solved by an initially monolithic solution? If you do need it, you should rebuild this pyramid but in the correct order.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SOA solution.&lt;/strong&gt; You shouldn't take microservices as the next step of the SOA evolution. It must be kept in mind that the main difference between the bus and the message exchange channel between services is that it is the bus that carries a significant portion of data conversion and orchestration logic. The message exchange channel between microservices, in its turn, must be fully reliable and straightforward. Its aim is to transmit a message. Implementing microservices in such solutions can be very costly because the supposedly "independent" modules can be closely coupled through the bus logic, and a simple replacement of this logic with aggregating patterns won't be sufficient. Moreover, the existing SOA solutions mostly use heterogeneous technologies and constructs which are difficult to adapt. Does it make sense to think about such migration at all? Usually, it doesn't. Most probably, the choice of SOA was driven by the complexity and diversity of the applications to be integrated into, the application scale, and the need to provide data consistency and the complex logic of data conversion. In this case, the choice is right. The microservices as an alternative should be considered only if the main part of the solution has become obsolete; when it's no more necessary to integrate with heavyweight application; if removing legacy code and migrating to simpler web solutions are on the agenda; if there is no need to maintain the high level of abstraction and data consistency but the speed of developing individual modules is still critical or it is necessary to enable independent work of separate teams.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monstrous monolith.&lt;/strong&gt; The monolith full of legacy code and built on patches. The monolith developed so long ago that it's turned into a huge structure resistant to changes. The monolith consisting almost completely of spaghetti code. This is probably the only case when it makes sense to raze everything to the ground, sweep up the debris, and build a new solution on the ruins. Probably, based on microservices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a rule, the development team starts thinking about the microservices at the stage of startup or monstrous monolith. And maybe, this thought just jumps to the minds on the back of the microservice boom.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-when-to-choose-microservices"&gt;
  &lt;/a&gt;
  Now, when to choose microservices?
&lt;/h1&gt;

&lt;p&gt;If:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the aim is to develop a medium-sized non-trivial web application consisting of a set of loosely coupled or completely isolated modules;&lt;/li&gt;
&lt;li&gt;there are critical requirements for the application's resistance to loads and/or support of integration with external services (payment systems, banks, external storages etc.);&lt;/li&gt;
&lt;li&gt;the business requires significant acceleration of the development right now, plans to launch the changes on the market in all areas at once, and is not ready to wait for the sequential implementation of key changes in each area;&lt;/li&gt;
&lt;li&gt;it's necessary to use a heterogeneous technology stack (for the purposes of renovation, adaptation to market conditions, acceleration of internal processes, etc.);&lt;/li&gt;
&lt;li&gt;it's possible to distinguish the modules that allow reuse and support calls by various channels (authorization and authentication services, search engines, audit, etc.);&lt;/li&gt;
&lt;li&gt;the business sets forth requirements for the system blocks at different rates; the importance of the quick release of the individual block also varies;&lt;/li&gt;
&lt;li&gt;there's a commercial need to make frequent changes in an individual block in the future (to follow a trend or the marketing strategy);&lt;/li&gt;
&lt;li&gt;strategic business objectives require or will require a point-like scaling or different rates of changes in various points of the application;&lt;/li&gt;
&lt;li&gt;tactic business objectives require making multiple micro-changes in different modules of the system on the fly without disrupting the application as a whole (24/7 access and high probability of bugs due to the system complexity);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then you probably need to think about developing a solution using microservices.&lt;/p&gt;

&lt;p&gt;Note that almost in every case it's not the development team who drives the decision-making but the business, and this is important. If microservices don't solve the business tasks, this is a waste of time and money. If the development team or the business itself has no idea of the current and strategic paradigm of the product, this is also a waste of time and money.&lt;/p&gt;

&lt;p&gt;For example, interesting findings are provided in the &lt;a href="https://dzone.com/articles/new-research-shows-63-percent-of-enterprises-are-a"&gt;research&lt;/a&gt; conducted by Camunda in 2018 among 354 companies in different countries and industries. Though the research revealed that 63% of enterprises support the adoption of microservices or are already adopting them, only 45% explicitly document the business processes. It creates a certain problem for evaluating the influence of microservice architecture on the implementation of these processes. At the same time, companies report that the top reasons for adopting a microservices architecture are: improved scalability of applications (64%), shortened development cycle (60%), support of digital transformation trends and integration with next-generation applications (54%), greater autonomy for development teams (54%); improved application resilience (50%).&lt;/p&gt;

&lt;p&gt;However, based on the data provided by O'Reilly that ran a similar &lt;a href="https://www.oreilly.com/radar/microservices-adoption-in-2020/"&gt;survey&lt;/a&gt; in 2020 among 1052 companies, 77% of respondents are using microservices and about one-third of respondents have been using them for the last three years. Of course, these two pieces of research cannot be compared, but the increasing popularity of microservices is obvious. Here similar issues were also found: incorrect decomposition and complexity of both the solution itself and the microservices management. Nevertheless, the surveys figuratively show that corporate culture takes the center stage. However, when it comes to the adoption of microservices, it's also an inhibitive factor.&lt;/p&gt;

&lt;p&gt;Besides, there are some constraints you should take into account:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a large team that has nothing to do :) It's a joke but it has a grain of truth. The minimum pool for one microservice is a team of six to nine persons, including developers, testers, and, advisably, an analyst. These people must not be occupied with anything else than their microservice or, as the last resort, two microservices. You can say, where there are two, there are three, and where there are three, there are four and so on. But this is a wrong path. Where there are two, there are no more than two. Period.&lt;/li&gt;
&lt;li&gt;Your DevOps architecture is configured to support independent development or you are ready to allocate resources and time for this. To start with, you do have DevOps. Make sure that you have.&lt;/li&gt;
&lt;li&gt;You are ready to organize test environments suitable for independent testing of microservices, as well as for testing of the microservices interaction, and you are ready to migrate from the concept of pure end-to-end testing to the structure consisting of modular, integration, component and end-to-end tests including placeholders development and contract publication.&lt;/li&gt;
&lt;li&gt;You are ready to spend time on failures or you've already fallen into all traps while developing your monolith and know exactly into which isolated services you can break it down without impairing the data quality, its processing speed and application reliability in general. At the very least, you clearly understand the data structure in each domain, know the business needs and can identify loosely coupled or completely independent domains. In no case should you link the microservice structure to the enterprise structure. Hierarchical schemes look pretty on paper, but in real life they often hide the pitfalls of poorly organized business processes.&lt;/li&gt;
&lt;li&gt;And, finally, make sure that the development doesn't involve legacy applications that must be integrated with, and that the data transactionality support is not critical in the domains you've identified (unless you know and are ready to use SAGA, the distributed transactions pattern).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Microservices are always associated with a degree of complexity, so if the business has no issues which could be resolved by microservices, don't add them, as the business will not appreciate this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ive-already-selected-the-microservices-whats-gone-wrong"&gt;
  &lt;/a&gt;
  I've already selected the microservices, what's gone wrong?
&lt;/h3&gt;

&lt;p&gt;Alas, if the time to release hasn't been reduced, everything has gone wrong.&lt;/p&gt;

&lt;p&gt;Most probably, you need to assess once again the potential sources of the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Too many microservices. Probably, it makes sense to replace the seven microservices overburdening five teams with only five? Or even two. In fact, the opinion that there must be many microservices is erroneous. In most cases, the company is neither Amazon nor Netflix.&lt;/li&gt;
&lt;li&gt;Poor analysis of business domains. There exist implicit dependencies, transactionality is required, there's no common solution for the architecture.&lt;/li&gt;
&lt;li&gt;Preliminary agreements on API development, testing, CI/CD cycle setup are missing/violated.&lt;/li&gt;
&lt;li&gt;The teams are either not autonomous or too autonomous, and the practice of experience exchange and retrospective is missing.&lt;/li&gt;
&lt;li&gt;The team's life activities are not managed and supported properly. There are conflicts over resources, there is no clear vision of the business purposes of both the application as a whole and individual services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, a situation may occur when it seems that something is going wrong but you're not quite sure of this.&lt;/p&gt;

&lt;p&gt;To save you the trouble of reading another long text, I'm just placing a picture here with a number of examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9tvMyoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9tvMyoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Here let me finish my post and make brief conclusions on this subject:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There's no use destroying what is working well just for the sake of fashion.&lt;/li&gt;
&lt;li&gt;If you've decided on destroying something, consult the property (business) owner first and explain all potential consequences. First of all, it's necessary to analyze whether this will produce a positive effect on the business processes and whether there are any needs that cannot be satisfied by an existing solution. Don't draw a nice model over the ruins. First of all, this will have negative consequences for the development teams.&lt;/li&gt;
&lt;li&gt;If the business approached you with this praiseworthy initiative, also explain the consequences. Business is business, they don't have to know about all pitfalls.&lt;/li&gt;
&lt;li&gt;Before you start, make sure that you have all resources and clearly understand the path.&lt;/li&gt;
&lt;li&gt;Don't miss the warning signs indicating that you've taken the wrong turn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally. Most teams who have succeeded in using microservices had to rebuild their architecture on multiple occasions and followed the path of sequential monolith breakdown. So keep your head up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#credits-and-additional-materials"&gt;
  &lt;/a&gt;
  Credits and additional materials
&lt;/h1&gt;

&lt;p&gt;As a final point, I would like to recommend several articles on this topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dzone.com/articles/chaos-engineering-make-disciplined-microservices"&gt;Сhaos engineering make disciplined microservices&lt;/a&gt; by Shamik Mitra, Jun. 24, 21 · &lt;a href="https://dzone.com/microservices-news-tutorials-tools"&gt;Microservices Zone&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://containerjournal.com/topics/container-ecosystems/when-to-use-and-not-to-use-microservices/"&gt;When to use and not to use microservices&lt;/a&gt; by Hardik Shah, Dec. 24, 20 · &lt;a href="https://containerjournal.com/"&gt;Container Journal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bmc.com/blogs/microservice-vs-nanoservice/"&gt;Microservices vs Nanoservices: Weighing Framework Options&lt;/a&gt; by Sudip Sengupta, Mar.10, 21 · &lt;a href="https://www.bmc.com/"&gt;BMC blogs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://page.camunda.com/wp-building-scalable-business-automation-with-microservices"&gt;Camunda Whitepaper Building Scalable Business Automation with Microservices&lt;/a&gt; by Sandy Kemsley, Dec. 2019 · &lt;a href="https://camunda.com/"&gt;Camunda&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found these materials interesting and worth noticing.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>software</category>
    </item>
    <item>
      <title>Detecting and Visualizing Twitter Sentiment during COVID-19 Pandemic using AWS Comprehend and Quicksight</title>
      <author>Vivek0712</author>
      <pubDate>Mon, 19 Jul 2021 14:50:15 +0000</pubDate>
      <link>https://dev.to/aws-builders/detecting-and-visualizing-twitter-sentiment-during-covid-19-pandemic-using-aws-comprehend-and-quicksight-2a9p</link>
      <guid>https://dev.to/aws-builders/detecting-and-visualizing-twitter-sentiment-during-covid-19-pandemic-using-aws-comprehend-and-quicksight-2a9p</guid>
      <description>&lt;p&gt;People are experiencing a prolonged state of physical isolation from their friends, as well as teachers, extended family, and community networks due to COVID-19 lockdown. While quarantining adults has generally led to negative psychological effects, including confusion, anger, and post-traumatic distress, it is unknown how these measures have impacted children.&lt;/p&gt;

&lt;p&gt;The twitter consumer sentiment is the most common text classification tool that analyzes an incoming tweet and conveys if the underlying sentiment is positive negative or neutral from the public.&lt;/p&gt;

&lt;p&gt;Taking India as a case study, we are going to analyze the sentiment of people during each phase of COVID-19 Pandemic. The three phases are Pre-lockdown, Lockdown and Unlock phases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--os7NdK0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oirk35fncwh9sbctllsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--os7NdK0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oirk35fncwh9sbctllsx.png" alt="Lockdown Phases"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets orchestrate AWS services to access the data, identify the sentiment and then visualise the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfKLuA5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiznv5l2027p4ytwh0nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfKLuA5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiznv5l2027p4ytwh0nl.png" alt="AWS Services Solution System Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tweet-processing-and-upload"&gt;
  &lt;/a&gt;
  Tweet Processing and Upload
&lt;/h2&gt;

&lt;p&gt;The tweets were collected on three bases: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keyword&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Date range &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Only tweets in English were collected for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Keyword&lt;/em&gt; : 15 trending keywords related to COVID-19.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Location&lt;/em&gt; : Chennai, Bangalore, Hyderabad, Delhi, Mumbai, Kolkata.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Date Range&lt;/em&gt; : Three phases — Pre-lockdown, Lockdown, Unlock.&lt;br&gt;
The GetOldTweets3 python library was used to collect the tweets based on the above three criteria. To preprocess the data, NLTK packages were used.&lt;/p&gt;

&lt;p&gt;To save you from the hassle, I have uploaded the dataset in my &lt;a href="https://github.com/Vivek0712/covidtwitterdataset/tree/master/dataset/processed"&gt;Github repo&lt;/a&gt;. The techniques used for data collection and preprocessing is explained in the readme file.&lt;br&gt;
All dataset contains three features: tweet text, location, phase.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-aws-account-and-iam-roles-and-users"&gt;
  &lt;/a&gt;
  Setting up AWS Account and IAM roles and users
&lt;/h2&gt;

&lt;p&gt;If you are new to AWS, then you create your &lt;a href="https://aws.amazon.com/free/"&gt;free AWS account&lt;/a&gt; here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-creating-a-new-role"&gt;
  &lt;/a&gt;
  1. Creating a new role
&lt;/h3&gt;

&lt;p&gt;Go to IAM Console and then click roles. Give a name for the role (s3-lambda-role) and then select Lambda as the use case. Under permission, attach the following policies as mentioned in the picture below and create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aG555GSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44ychbxiyaht1mrmb45w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aG555GSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44ychbxiyaht1mrmb45w.png" alt="IAM Role"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-creating-a-new-user"&gt;
  &lt;/a&gt;
  2. Creating a new user
&lt;/h3&gt;

&lt;p&gt;We are creating a user to export the Dynamo DB data. Click Users in the side pane of IAM console. Create a new user and attach “AmazonDynamoDBFullAccess” permission. Also, under the security tab, generate an access key and secret key (Keep it safe as we need it in later part of the tutorial)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#orchestrating-the-aws-services"&gt;
  &lt;/a&gt;
  Orchestrating the AWS services
&lt;/h2&gt;

&lt;p&gt;Now we all are all set to proceed with the next step. So, whenever a file gets uploaded in the bucket, we need to send it to AWS Comprehend and receive the sentiment of each tweet and populate the data in Dynamo DB. So we need three things here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An S3 Bucket&lt;/li&gt;
&lt;li&gt;Dynamo DB table&lt;/li&gt;
&lt;li&gt;A Lambda function&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#create-an-s3-bucket"&gt;
  &lt;/a&gt;
  Create an S3 bucket
&lt;/h3&gt;

&lt;p&gt;Navigate to S3 console and create new bucket name it as “covidsentimenttwitter” or any name as you wish. This is where our dataset will be uploaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qILupV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdxvig8g0etfh499aeg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qILupV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdxvig8g0etfh499aeg5.png" alt="S3 Bucket Creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-dynamodb-table"&gt;
  &lt;/a&gt;
  Create a DynamoDB table
&lt;/h3&gt;

&lt;p&gt;Navigate to DynamoDB console and on the side navigation pane, click Tables. Create a new table with “text” as the partition key. Also, note down the region where the table is created. In this tutorial, my table “covidsentiment” is created in “us-east-2” region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFLxY0Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcpizyadmuuoc2uouwbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFLxY0Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcpizyadmuuoc2uouwbz.png" alt="DynamoDB Table"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lambda-function"&gt;
  &lt;/a&gt;
  Lambda Function
&lt;/h3&gt;

&lt;p&gt;The lambda function is going to act as a bridge between S3 object and Dynamo DB table.&lt;br&gt;
Navigate to Lambda function console and click create function.&lt;br&gt;
Give a suitable name and choose Python 3.8 as runtime. Under Permissions, click “Use an existing role” and select the role which we had created earlier in this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jkBtXj78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2kqmekabgsooiy3oqs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jkBtXj78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2kqmekabgsooiy3oqs8.png" alt="Lambda Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the function is created, navigate inside it. In the Designer Pane, click Add Trigger. In Trigger Configuration, select S3 and select the bucket name which we had created earlier. Set the event type as “All Object create event”. So whenever a new object is created in the S3 bucket, this lambda function will be triggered.&lt;br&gt;
Also, set the execution timeout for lambda function as 15 minutes.&lt;br&gt;
Now we need to identify the sentiment of the tweet in the uploaded file and write the data to Dynamo DB. Run the following code under the function code of the lambda function. Replace the name of the bucket, table name as per your configuration and save the function. The lambda function code is as below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now you can upload all three dataset files in S3 bucket. You can monitor the lambda function and view the output logs by switching to the Monitoring tab in the lambda function. You can view the populated items in the Dynamo DB under Items tab in Dynamo DB console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#export-dynamodb-data"&gt;
  &lt;/a&gt;
  Export DynamoDB Data
&lt;/h3&gt;

&lt;p&gt;Once the data is populated, we can simply export the whole Dynamo DB data as CSV. Install the AWS CLI, and jq library in your local machine, if you don't have it.&lt;br&gt;
In your terminal, type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the Access ID, Secret key, Region name which we had created earlier.&lt;br&gt;
Execute the following command to export the Dynamo DB. Replace the table name as per your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws dynamodb scan — table-name covidsentiment — select ALL_ATTRIBUTES — page-size 500 — max-items 100000 — output json | jq -r “.Items” | jq -r “(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ].S])[] | @csv” &amp;gt; table.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visualizing-the-sentiment-dataset-using-aws-quicksight"&gt;
  &lt;/a&gt;
  Visualizing the sentiment dataset using AWS QuickSight
&lt;/h2&gt;

&lt;p&gt;Navigate to AWS QuickSight. Under the Analysis tab, click New Analysis -&amp;gt; New Dataset -&amp;gt; Upload a file. Click and upload the exported Dynamo DB data CSV file.&lt;br&gt;
Once the dataset is imported, Click Add Visual and then select your preferred graph and set the relevant Axis, filters and play with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WEGUdlRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsxnvf2nx67a95kxdpkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WEGUdlRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsxnvf2nx67a95kxdpkf.png" alt="AWS Quicksight Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CAnaW4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrycvnhq28exf6fzx21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CAnaW4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrycvnhq28exf6fzx21.png" alt="AWS Quicksight Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have derived meaningful insights with the data, you can publish the QuickSight dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-enhancement"&gt;
  &lt;/a&gt;
  Future Enhancement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can use AWS Firehose to stream real-time data from Twitter to S3.&lt;/li&gt;
&lt;li&gt;You can build a data pipeline between Dynamo DB / or any other DB to Quicksight Data source.&lt;/li&gt;
&lt;li&gt;Host the dashboard as a web app using Elastic Beanstalk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voila, we have built a dashboard to visualize the sentiment of the twitter during COVID-19 pandemic.&lt;/p&gt;

&lt;p&gt;If you have reached this part of the article, do like and share and follow me for more articles on AI and Cloud.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ai</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
