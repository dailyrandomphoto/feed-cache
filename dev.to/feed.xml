<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTML 5 - The Brainstorm!</title>
      <author>Manu Martinez</author>
      <pubDate>Wed, 19 Jan 2022 17:44:36 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html-5-the-brainstorm-188n</link>
      <guid>https://dev.to/whitehatdevv/html-5-the-brainstorm-188n</guid>
      <description>&lt;p&gt;Hello tribe! today we are going to talk about the html tags that go inside the head of the document! Bring out the umbrella because it's raining brains! halleluyah! üéº&lt;/p&gt;

&lt;p&gt;As we had mentioned so far, in the structure of an HTML document there are two main HTML tags: "head" and "body" . The head tag contains the metadata tags (information about the document) as well as making connections or relationships with other documents and the body tag allows us to display the content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connection-tags"&gt;
  &lt;/a&gt;
  "Connection" tags:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Title : title of the web page&lt;/li&gt;
&lt;li&gt;meta: where you set data such as the language developed on the page. &lt;/li&gt;
&lt;li&gt;Script: to load js &lt;/li&gt;
&lt;li&gt;Style: to load css on the current page &lt;/li&gt;
&lt;li&gt;Link:In my opinion the most important because it allows to load css, improves SEO, establishes relationships with other pages, or alternative versions of our website etc...  It is the Swiss knife of tags! &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My cute page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"document-en.html"&lt;/span&gt; &lt;span class="na"&gt;hreflang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; //create a alternative page
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üëÅ  Script is best placed in the body and Style with a link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meta-tag"&gt;
  &lt;/a&gt;
  Meta tag:
&lt;/h2&gt;

&lt;p&gt;Perhaps the tag with the greatest number of possibilities in the header of an HTML document is the  tag. In it, and through attributes, we can indicate a large amount of metadata to the document.&lt;/p&gt;

&lt;p&gt;Meta has the following attributes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;keywords&lt;/li&gt;
&lt;li&gt;author&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;li&gt;generator&lt;/li&gt;
&lt;li&gt;theme-color
&lt;/li&gt;
&lt;li&gt;viewport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want me to go deeper into tags, let me know in the comments! Well tribe that's all for now, see you in the next post and remember to always be the best version of you!&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Arjditor</title>
      <author>Archan Banerjee</author>
      <pubDate>Wed, 19 Jan 2022 17:30:00 +0000</pubDate>
      <link>https://dev.to/archan9/arjditor-4h9a</link>
      <guid>https://dev.to/archan9/arjditor-4h9a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isgeeuz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpoocofmdyeiunjnr3gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isgeeuz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpoocofmdyeiunjnr3gh.png" alt="Screenshot" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-visit-arjditor-click-here"&gt;
  &lt;/a&gt;
  To visit &lt;em&gt;Arjditor&lt;/em&gt;, click &lt;a href="https://arjditor.herokuapp.com/"&gt;here&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#to-check-out-the-github-repo-click-here"&gt;
  &lt;/a&gt;
  To check out the &lt;em&gt;Github Repo&lt;/em&gt;, click &lt;a href="https://youtu.be/WegpX5JICYA"&gt;here&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#to-watch-the-demo-video-click-here"&gt;
  &lt;/a&gt;
  To watch the &lt;em&gt;Demo Video&lt;/em&gt;, click &lt;a href="https://youtu.be/WegpX5JICYA"&gt;here&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#developed-by"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Developed By&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;‚û§ &lt;a href="https://github.com/jaydip1235"&gt;Jaydip Dey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚û§ &lt;a href="https://github.com/ArchanJS"&gt;Archan Banerjee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;strong&gt;Feature&lt;/strong&gt;&lt;br&gt;
‚úÖ Supports 7 programming languages including C, C++, Java, Python etc.&lt;/p&gt;

&lt;p&gt;‚úÖ Users can select themes (github, monokai etc.) according to their choices .&lt;/p&gt;

&lt;p&gt;‚úÖ They can also choose the font size.&lt;/p&gt;

&lt;p&gt;‚úÖ It also serves the purpose of running the code with or without input as per the user's choice.&lt;/p&gt;

&lt;p&gt;‚úÖ Users can generate the URL using the &lt;em&gt;Run and Generate URL&lt;/em&gt; button and can share their codes to others. Others can view the the same code with the URL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-run-locally"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to run locally&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;‚û°Ô∏è Clone the repository&lt;/p&gt;

&lt;p&gt;‚û°Ô∏è Create a config.env file and add MONGO_URI and PORT with your own credentials.&lt;/p&gt;

&lt;p&gt;‚û°Ô∏èRun &lt;strong&gt;npm install&lt;/strong&gt; both inside the client folder and the root folder.&lt;/p&gt;

&lt;p&gt;‚û°Ô∏èRun &lt;strong&gt;node server&lt;/strong&gt; in the root folder and &lt;strong&gt;npm start&lt;/strong&gt; in the client folder.&lt;/p&gt;

&lt;p&gt;‚û°Ô∏èApp starts running on port 3000. You are good to code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-the-repo-if-you-like-and-feel-free-to-contribute-by-pr"&gt;
  &lt;/a&gt;
  Do ‚≠ê the repo if you like and feel free to contribute by PR
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>mongodb</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Effortless App State Sync across different JS sandboxes (Inline Frames, Web Workers, Worker Threads, or VS Code Webviews)</title>
      <author>Sebastian Tiedtke</author>
      <pubDate>Wed, 19 Jan 2022 17:15:41 +0000</pubDate>
      <link>https://dev.to/sourishkrout/effortless-app-state-sync-across-different-js-sandboxes-inline-frames-web-workers-worker-threads-or-vs-code-webviews-768</link>
      <guid>https://dev.to/sourishkrout/effortless-app-state-sync-across-different-js-sandboxes-inline-frames-web-workers-worker-threads-or-vs-code-webviews-768</guid>
      <description>&lt;p&gt;&lt;em&gt;In this post you will learn how to use the new JS/TS module &lt;a href="https://github.com/stateful/tangle"&gt;Tangle&lt;/a&gt; to implement seamless event handling and app state sync across multiple JavaScript sandboxes without getting caught up in postMessage &amp;amp; onMessage synchronization dilemmas.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You've played it with your friends as a child: the telephone game, a little interactive exercise where it is important to understand a message from your left partner and transmit it correctly to your right one. The catch: you have to whisper it so that no one, other than the actual receiver understands the message. It feels a lot like trying to share events or a app state across different JavaScript sandboxes, e.g. between &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;Inline Frames&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API#web_workers_concepts_and_usage"&gt;Web Workers&lt;/a&gt;, &lt;a href="https://nodejs.org/api/worker_threads.html"&gt;Worker Threads&lt;/a&gt; or webviews in &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; extensions.&lt;/p&gt;

&lt;p&gt;The latter use case is particularly interesting for VS Code extension developers who work with multiple extension webviews and have to organise how app state is kept in sync between them. An all too common use case for custom editor implementations or views outside the native VS Code UI toolbox. Let‚Äôs say our example extension offers a todo list as a panel in the left sidebar of the workbench. The same todo list could also be viewed as a webview within the IDE editor area. Now both todo lists are rendered as separate webviews within their own respective sandbox environment. No shared javascript objects, no shared renderer, no shared memory.&lt;/p&gt;

&lt;p&gt;This, without much effort, quickly becomes quite complex if you want to ensure that adding a todo item in one list immediately updates all other webviews. After all swift interaction responsiveness is a staple of excellent UX design. At &lt;a href="https://stateful.com/"&gt;Stateful&lt;/a&gt; we faced this exact problem when we built &lt;a href="https://marketplace.visualstudio.com/items?itemName=activecove.marquee"&gt;Marquee&lt;/a&gt;, the missing homescreen for VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NV-8QL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/HLTh3fPfQPS42DGLcb4Q" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NV-8QL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/HLTh3fPfQPS42DGLcb4Q" alt="Screen Shot 2021-12-13 at 7.18.56 PM.png" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Illustrate sync of app state across webviews and workbench (native-vscode) JS sandboxes as implemented in &lt;a href="https://marketplace.visualstudio.com/items?itemName=activecove.marquee"&gt;Marquee&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After solving this problem not just once, we wound up generalizing our implementation, packaged it up for you, to provide you with a high-level API to solve event/state sync for arbitrary JavaScript environments. With &lt;a href="https://www.npmjs.com/package/tangle"&gt;Tangle&lt;/a&gt; you can initiate channels to manage state and/or event updates across multiple JavaScript sandboxes. It‚Äôs like an event emitter on steroids that is able to look beyond the universe of a single JavaScript sandbox. Once initialized you can both emit and listen to events as well as broadcast and subscribe to different state updates, in which state is just an arbitrary object with properties. If you wish, you can optionally use a TypeScript interface to formalize the state contract.&lt;/p&gt;

&lt;p&gt;Let‚Äôs stick with the example mentioned above and share a list of todos across multiple webviews within a VS Code extension. Given that webviews, and their instances that allow us to post messages between them and the extension, are initialized at a random point in time, we found that working with observables is a perfect use case here, as it allows us to initialize the communication channel once webviews become available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;WebviewViewProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;WebviewView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Webview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PanelViewProvider&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;WebviewViewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_webview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Webview&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;resolveWebviewView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webviewView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WebviewView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/**
         * trigger channel initiation
         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_webview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webviewView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webview&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;panelProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PanelViewProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerWebviewViewProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;panelProvider&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;panelProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * expose webview subject as observable to that the Tangle channel is
     * initiated once the webview exists
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;webview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_webview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we create our webview panels in our extension &lt;code&gt;activate&lt;/code&gt; method we just pass in all webviews into the Tangle initialization method to help it understand how to pass along messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;activate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;examplePanel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TodoAppPanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Panel1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webviewPanel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWebviewPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example WebView Panel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ViewColumn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;One&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;webviewOptions&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-message-channel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPromise&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="nx"&gt;examplePanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;webviewPanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we just need to initiate a Tangle channel within our webview and everything is managed out of the box. The channel initiated in our main extension file acts as a hub and propagates messages from one webview to another. Within our webview we can access the instance by calling &lt;code&gt;acquireVsCodeApi&lt;/code&gt;. Given this method can only be called once, you have pass in the result when initiating the communication channel, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;AppState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;acquireVsCodeApi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Channel&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// channel name&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-message-channel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// default state&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... update todo list&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// add new todo&lt;/span&gt;
&lt;span class="nx"&gt;$button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;tangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to TypeScript we can formalize the contract of our app state via an TS interface to be sure that we emit only properties that have the correct type. There are two distinct differences between sharing events and sharing state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing a state requires to provide a default state&lt;/li&gt;
&lt;li&gt;To listen and emit to state changes you have to use &lt;code&gt;listen&lt;/code&gt; and &lt;code&gt;broadcast&lt;/code&gt; while for events you have to use the event emitter interface where you have &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;once&lt;/code&gt; and &lt;code&gt;emit&lt;/code&gt; methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have experimented with various use cases which you can all find in our &lt;a href="https://github.com/stateful/tangle/tree/main/examples"&gt;examples&lt;/a&gt; directory on GitHub. For example we applied the todo list use case to the well known TodoMVC example app which we put in separate iFrames. Updating the list in one frame automatically updates all other frames:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLXKHuuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/8jvad9kFQuyl6RJHolNx" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLXKHuuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/8jvad9kFQuyl6RJHolNx" alt="iframe.gif" width="880" height="742"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ideas how we can extend Tangle to serve more use cases where sharing data is a problem, please &lt;a href="https://github.com/stateful/tangle/issues/new"&gt;let us know&lt;/a&gt;. For more documentation you can find the package on &lt;a href="https://www.npmjs.com/package/tangle"&gt;NPM&lt;/a&gt; or &lt;a href="https://github.com/stateful/tangle"&gt;GitHub&lt;/a&gt;. We hope it will help some of you that have been dealing with this kind of edge case. It certainly helped us develop our Stateful VS Code extension where we help developers to understand their productivity through flow state. Come &lt;a href="https://marketplace.visualstudio.com/items?itemName=stateful.edge"&gt;check it out&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>vscode</category>
    </item>
    <item>
      <title>1 line of code: How to replace multiple space with one space</title>
      <author>martin krause</author>
      <pubDate>Wed, 19 Jan 2022 17:02:25 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-replace-multiple-space-with-one-space-5gja</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-replace-multiple-space-with-one-space-5gja</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiToSingleSpace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/  +/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#returns-the-string-with-multiple-spaces-reduced-to-one-space"&gt;
  &lt;/a&gt;
  Returns the string with multiple spaces reduced to one space
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>3D game engine in web - part 1</title>
      <author>Ioannis Noukakis</author>
      <pubDate>Wed, 19 Jan 2022 17:00:27 +0000</pubDate>
      <link>https://dev.to/ioannisnoukakis/3d-game-engine-in-web-part-1-4i4k</link>
      <guid>https://dev.to/ioannisnoukakis/3d-game-engine-in-web-part-1-4i4k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this blog post series, I'm going to craft using various libs a small 3d game engine and possibly an actual game with it.&lt;/p&gt;

&lt;p&gt;In this part, I'm going to create a simple entity-component system (basis of all modern games), then I'll make a basic scene using ThreeJs as graphic lib with some entities in it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#entity-component-system-ecs"&gt;
  &lt;/a&gt;
  Entity Component System (ECS)
&lt;/h1&gt;

&lt;p&gt;If you already know gamedev or played with Unity or any other commercial game engine you've already seen how easy it is to modify a game object by adding or removing a component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKmx2yqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63qxi6j29o46u6n68e1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKmx2yqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63qxi6j29o46u6n68e1w.png" alt="Image description" width="582" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But why do we even need such architecture? Can we just use simple OOP for this purpose instead?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well yes, but actually no&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An ECS is a great way to decouple the responsibilities of aspects of an entity. Without it, traditional OOP will block you in terms of flexibility and maintainability.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-chickens-and-robot-chickens"&gt;
  &lt;/a&gt;
  About chickens and robot chickens
&lt;/h1&gt;

&lt;p&gt;Say you are making a game about chickens vs robot chickens (actually I need to save this idea...) and you need to model the abilities of both entities. Here is a table that summarizes the differences between those two:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Eat&lt;/th&gt;
&lt;th&gt;Detonate&lt;/th&gt;
&lt;th&gt;Move&lt;/th&gt;
&lt;th&gt;Attack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;chicken&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;robot-chicken&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So you may be tempted to write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Chicken&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foodValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_hp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;foodValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RobotChicken&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Chicken&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;        
    &lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foodValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unsupported operation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;attack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Chicken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyDmg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_dmg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But don't, you broke the &lt;a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov principle&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So lets cut our functionalities into multiple interfaces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Living&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isLiving&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;applyDmg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dmg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;applyHeal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;AbleToEat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foodValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Chicken&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Living&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AbleToEat&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;_hp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foodValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyHeal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foodValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;applyDmg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dmg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_hp&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;dmg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;applyHeal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_hp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;heal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;isLiving&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_hp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RobotChicken&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_dmg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;attack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Living&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyDmg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_dmg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's better but still bad: If you need to change dynamically attributes of your chicken its gonna get messy. Say you need to implement times where your robots will get invincible, where you want to deactivate their IA, where you want to change their texture, etc. OFC you can write all this rules in the classes and interfaces like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAOnlyWhen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAActivationResolver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then inject whatever IAActivationResolver you want in. Works but lack the ability to totally change behavior at runtime. What if we want to allow an IA controlled entity to be briefly controlled by the player? &lt;/p&gt;

&lt;p&gt;With an ECS it would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;EntityManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeComponentForEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;entit1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GenericEnnemyIA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;EntityManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addComponentForEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;entity1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PlayerControls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is my personal belief that you get more flexibility and maintainability that way.&lt;/p&gt;

&lt;p&gt;Now lets implement it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#actually-writing-the-ecs"&gt;
  &lt;/a&gt;
  Actually writing the ECS
&lt;/h1&gt;

&lt;p&gt;So we have components and entities... ANNNND we need to model all that! &lt;a href="http://bitsquid.blogspot.com/2014/08/building-data-oriented-entity-system.html"&gt;After reading this&lt;/a&gt; I've decided to create a use-case that would drive all the add/remove/update of the components and classes that would contain the instances of said components (like the TransformSystem would track which entities have a transform).&lt;/p&gt;

&lt;p&gt;So the base of a component system (which I've named EntitySystem) would be like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TArg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="na"&gt;_entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EntityId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="nx"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SceneUseCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;TType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;addEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SceneUseCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;hasEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntityId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EntityId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_entities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I'm passing the &lt;code&gt;SceneUseCase&lt;/code&gt; as parameter to the &lt;code&gt;createEntity&lt;/code&gt; method so i can query the scene for an other entity system. For instance if want to get the transform for an entity I would call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRefToExternalEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to implement the scene object that will hold all those entity systems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;EntitySystemIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SceneUseCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EntitySystemIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_idProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IdProviderPort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;registerSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SceneValidationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;] is already registered`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;addEntityForSystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TArg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntitySystemIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_idProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SceneValidationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`System [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;] isn't registered, cannot add entity [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;].`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;hasEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SceneValidationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Entity [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;] for system [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;] is already registered`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;addEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sys&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SceneUseCase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instanceOfUpdatable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;systems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EntitySystemIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;instanceOfUpdatable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Updatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;getRefToExternalEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntitySystemIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntityId&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;TReturn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_systems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't show it here but ofc I used the TDD sauce along the way so now I have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9KX1JnhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9o6vuhheu81bfm3u34p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KX1JnhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9o6vuhheu81bfm3u34p.png" alt="Image description" width="860" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QmN2RUnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnd6cpiju7anvaq1ccwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QmN2RUnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnd6cpiju7anvaq1ccwx.png" alt="Image description" width="275" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.noukakis.ch/smallworld/smallworldsclient/-/blob/main/src/engine/scene/usecase/SceneUseCase.spec.ts"&gt;Here are the tests btw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can probably do better, by implementing heterogeneous lists or something to avoid theses nasty "any" but for now I deem it "GOOD ENOUGH". &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-threejs-and-some-basic-entity-systems"&gt;
  &lt;/a&gt;
  Adding ThreeJs and some basic entity systems
&lt;/h1&gt;

&lt;p&gt;This is good and all but! We don't display anything at the moment. So let's get a basic ThreeJs scene going really quickly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ThreeJSContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// helpers&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AxesHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course we need an transform system before anything else:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;RotationQuaternion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RotationQuaternion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TransformSystem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TRANSFORM_SYS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is really convenient to represent rotation as a quaternion. If you don't know what it is they explain it really well here: &lt;a href="https://eater.net/quaternions"&gt;https://eater.net/quaternions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now we can add the ThreeJs sauce as an entity system to represent meshes in the scene:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BufferGeometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;material&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Material&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsEntity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsDynamicMeshSystem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThreeJsEntity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Updatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THREE_RENDERER_SYS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ThreeJSContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsDynamicMeshSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsArgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EntityId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SceneUseCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsEntity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRefToExternalEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quaternion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quaternion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quaternion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quaternion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now lets just bind everything together!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;idProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UuidV4IdProviderPort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SceneUseCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;threeJsContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ThreeJSContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ThreeJsDynamicMeshSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;threeJsContext&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UpAndDownSinSystem&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// cube&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cubeId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cube&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEntityForSystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
    &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;cubeId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEntityForSystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThreeJsArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThreeJsDynamicMeshSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;material&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xE6E1C5&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;cubeId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// floor&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floorId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;floor1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEntityForSystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
    &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;floorId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEntityForSystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThreeJsArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThreeJsDynamicMeshSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;material&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xBCD3F2&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;floorId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ANNNND&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rp7c5BSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mbh8wyftpqq7ge9tka1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rp7c5BSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mbh8wyftpqq7ge9tka1.png" alt="Image description" width="880" height="684"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bravo! But our scene is BOOORING because nothing is happening. And when we show it to our relatives, they ask why we didn't make the last call of duty despite our great feat of engineering!&lt;/p&gt;

&lt;p&gt;So lets make a "wiggling system":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UpAndDownSinEntity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UpAndDownSinSystem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EntitySystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UpAndDownSinEntity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Updatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UP_AND_DOWN_SINE_SYS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;UpAndDownSinSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SceneUseCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UpAndDownSinEntity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRefToExternalEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TransformSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And make the cube wiggle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEntityForSystem&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UpAndDownSinSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cubeId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d4Qe76rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqqbd2iqptl9wj5mk4zz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4Qe76rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqqbd2iqptl9wj5mk4zz.gif" alt="Image description" width="808" height="713"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazing!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Of course this is but a simple implementation of an ECS and I am by no means an expert but I enjoyed doing it! In the next post we are going to test our threeJs scene with automated tools and other convoluted things!&lt;/p&gt;

&lt;p&gt;Here is the code: &lt;a href="https://gitlab.noukakis.ch/smallworld/smallworldsclient"&gt;https://gitlab.noukakis.ch/smallworld/smallworldsclient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time ^^&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMKYmQ9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7j6uqkxszv1v2sqd3oz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMKYmQ9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7j6uqkxszv1v2sqd3oz.png" alt="Image description" width="498" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>3d</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Get Started with OpenTelemetry Python: A Practical Guide</title>
      <author>Tom Zach</author>
      <pubDate>Wed, 19 Jan 2022 16:51:44 +0000</pubDate>
      <link>https://dev.to/aspecto/get-started-with-opentelemetry-python-a-practical-guide-3d3i</link>
      <guid>https://dev.to/aspecto/get-started-with-opentelemetry-python-a-practical-guide-3d3i</guid>
      <description>&lt;p&gt;This is a practical guide that gives you just what you need to get started with OpenTelemetry in Python without any prior knowledge in OpenTelemetry.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#intro-to-opentelemetry"&gt;
  &lt;/a&gt;
  Intro to OpenTelemetry
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; is a CNCF project (same folks responsible for Kubernetes), which, among other things, allows the collection of traces, logs, and metrics (also known as the three pillars of observability). &lt;/p&gt;

&lt;p&gt;It enables us to instrument our distributed services, meaning, to collect data from the events that happen in our systems which ultimately help us understand our software‚Äôs performance and behavior.&lt;/p&gt;

&lt;p&gt;OpenTelemetry has been widely covered in various posts ‚Äì You can learn more about OpenTelemetry and distributed tracing here.&lt;/p&gt;

&lt;p&gt;For this guide (and for using OpenTelemetry), &lt;strong&gt;here are the relevant terms you must be familiar with:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Span&lt;/strong&gt;: The basic building block (I like to call it the ‚Äúatom‚Äù) of OpenTelemetry.&lt;br&gt;
A span is an action that occurs in our system, like a POST/GET request or a db.insert operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trace&lt;/strong&gt;: A trace is a tree of spans representing the progression of a single request as it is handled by the different services of your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ue4rlSz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3katx4dzq8grtk2ttck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ue4rlSz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3katx4dzq8grtk2ttck.png" alt="distributed traces in Aspecto" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exporter&lt;/strong&gt;: Once we have created a span we need to send it to some backend. It may be in memory, Jaeger, or even as console output. The exporter handles sending the data to our backend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manual / Automatic instrumentation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manual: manually creating a span inside the application code&lt;/li&gt;
&lt;li&gt;Automatic: using instrumentation libraries (like pymongo for mongodb), to automatically create spans for us and send them to the backend through the exporter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more terms, you can see the official documentation related to this here: &lt;a href="https://opentelemetry.io/docs/concepts/data-sources/"&gt;https://opentelemetry.io/docs/concepts/data-sources/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn about the advantages of tracing and their comparison to logs, &lt;a href="https://www.aspecto.io/blog/logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;check out this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/blog/logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hb4cYAY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzz4fzat68ajwk4fykvf.png" alt="distributed tracing vs logging" width="743" height="211"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hello-world-opentelemetry-python"&gt;
  &lt;/a&gt;
  Hello World: OpenTelemetry Python
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#create-spans-and-see-them-in-the-console-output"&gt;
  &lt;/a&gt;
  Create spans and see them in the console output:
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs begin by writing some simple code that creates manual spans and logs them to console output.&lt;/p&gt;

&lt;p&gt;1.Start a new python project (python 3.6+ is supported by OpenTelemetry)&lt;/p&gt;

&lt;p&gt;2.Make the following installs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install opentelemetry-api
pip install opentelemetry-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Create a tracing.py file with 2 manual spans created ‚Äì rootSpan and childSpan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# tracing.py
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import (
   BatchSpanProcessor,
   ConsoleSpanExporter,
)

provider = TracerProvider()
processor = BatchSpanProcessor(ConsoleSpanExporter())
provider.add_span_processor(processor)
trace.set_tracer_provider(provider)

tracer = trace.get_tracer(__name__)

with tracer.start_as_current_span("rootSpan"):
   with tracer.start_as_current_span("childSpan"):
           print("Hello world!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Launch the tracing.py file and this is the output you should see ‚Äì 2 manual spans:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "childSpan",
    "context": {
        "trace_id": "0x6a37f0f0678f07485a01ba001b1119b0",
        "span_id": "0x4c162caa4e6d10c4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xdaf18d32c6af7c38",
    "start_time": "2022-01-03T14:10:46.601440Z",
    "end_time": "2022-01-03T14:10:46.601490Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {},
    "events": [],
    "links": [],
    "resource": {
        "telemetry.sdk.language": "python",
        "telemetry.sdk.name": "opentelemetry",
        "telemetry.sdk.version": "1.8.0",
        "service.name": "unknown_service"
    }
}
{
    "name": "rootSpan",
    "context": {
        "trace_id": "0x6a37f0f0678f07485a01ba001b1119b0",
        "span_id": "0xdaf18d32c6af7c38",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": null,
    "start_time": "2022-01-03T14:10:46.601349Z",
    "end_time": "2022-01-03T14:10:46.601515Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {},
    "events": [],
    "links": [],
    "resource": {
        "telemetry.sdk.language": "python",
        "telemetry.sdk.name": "opentelemetry",
        "telemetry.sdk.version": "1.8.0",
        "service.name": "unknown_service"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-with-opentelemetry-python-and-jaeger-advancing"&gt;
  &lt;/a&gt;
  Getting Started with OpenTelemetry Python and Jaeger ‚Äì Advancing
&lt;/h2&gt;

&lt;p&gt;Even though our newly created spans are really beautiful in the console, you are (rightfully) not satisfied just by having them. You most likely want to get some visualization of how they play out together.&lt;/p&gt;

&lt;p&gt;That‚Äôs probably what got you interested in distributed tracing in the first place.&lt;/p&gt;

&lt;p&gt;You‚Äôll be happy to know about the open-source &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt;, which is a storage backend for telemetry data that also contains a basic UI for visualizing spans and traces.&lt;/p&gt;

&lt;p&gt;You‚Äôll even be happier to know that exporting spans to Jaeger is almost as easy as it was to send to our console output.&lt;/p&gt;

&lt;p&gt;To send the spans to Jaeger, we‚Äôd use the OpenTelemetry Jaeger exporter instead of the console span exporter we used before.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how it‚Äôs done:&lt;/p&gt;

&lt;p&gt;1.Start a new python project (or keep the same one, as you wish)&lt;/p&gt;

&lt;p&gt;2.Run installs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install opentelemetry-exporter-jaeger
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Run Jaeger locally&lt;/p&gt;

&lt;p&gt;4.Create a jaeger_tracing.py file with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# jaeger_tracing.py
from opentelemetry import trace
from opentelemetry.exporter.jaeger.thrift import JaegerExporter
from opentelemetry.sdk.resources import SERVICE_NAME, Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor

trace.set_tracer_provider(
   TracerProvider(
       resource=Resource.create({SERVICE_NAME: "my-hello-service"})
   )
)

jaeger_exporter = JaegerExporter(
   agent_host_name="localhost",
   agent_port=6831,
)

trace.get_tracer_provider().add_span_processor(
   BatchSpanProcessor(jaeger_exporter)
)

tracer = trace.get_tracer(__name__)

with tracer.start_as_current_span("rootSpan"):
   with tracer.start_as_current_span("childSpan"):
           print("Hello world!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5.Run the jaeger_tracing.py file &lt;/p&gt;

&lt;p&gt;6.Use a browser to go to &lt;a href="http://localhost:16686/"&gt;http://localhost:16686/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.You can now see the Jaeger UI. Select my-hello-service and click on Find traces. You should see your trace with &lt;code&gt;rootSpan&lt;/code&gt; and &lt;code&gt;childSpan&lt;/code&gt; here on the right:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKCRIgk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifos3tw5ki0squcfgd7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKCRIgk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifos3tw5ki0squcfgd7d.png" alt="rootSpan and childSpan in Jaeger Tracing UI&amp;lt;br&amp;gt;
" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.After clicking on our &lt;code&gt;rootSpan&lt;/code&gt; from the list you can see more details about it which you can further investigate on your own:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7i82AgwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmy6shqam98zhgtpn2ms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7i82AgwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmy6shqam98zhgtpn2ms.png" alt="Jaeger tracing" width="880" height="345"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#an-auto-instrumentation-example"&gt;
  &lt;/a&gt;
  An auto instrumentation example
&lt;/h3&gt;

&lt;p&gt;In real life, you would most likely use auto instrumentation more than you would use manual ones. I chose to start with the manual ones as it‚Äôs simpler, to begin with, and understand.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we have a small script that writes data to a MongoDB database using the PyMongo library.&lt;/p&gt;

&lt;p&gt;For us to create and visualize these spans in Jaeger, we would use an automatic instrumentation library forPyMongo. &lt;/p&gt;

&lt;p&gt;In this case, it‚Äôs called opentelemetry-pymongo-instrumentation. &lt;/p&gt;

&lt;p&gt;First, let‚Äôs start mongo locally using docker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 27017:27017 mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have updated our script from before to connect to a DB I created called pytest, and saved a post document in a collection called posts. &lt;/p&gt;

&lt;p&gt;After that, it tries to find the exact same document using mongo &lt;code&gt;find_one&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the updated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import (
   BatchSpanProcessor,
   ConsoleSpanExporter,
)
from opentelemetry.exporter.jaeger.thrift import JaegerExporter
from opentelemetry.sdk.resources import SERVICE_NAME, Resource
from pymongo import MongoClient
from opentelemetry.instrumentation.pymongo import PymongoInstrumentor
import datetime

# Setup tracing
provider = TracerProvider(
       resource=Resource.create({SERVICE_NAME: "my-mongo-service"})
)
jaeger_exporter = JaegerExporter(
   agent_host_name="localhost",
   agent_port=6831,
)
processor = BatchSpanProcessor(ConsoleSpanExporter())
provider.add_span_processor(BatchSpanProcessor(jaeger_exporter))
PymongoInstrumentor().instrument(tracer_provider=provider)

client = MongoClient('mongodb://localhost:27017')
db = client.pytest

posts = db.posts

# insert post
post = {"author": "Tom",
       "text": "My blog post",
       "date": datetime.datetime.utcnow()}
print('inserting post')
post_id = posts.insert_one(post).inserted_id
print('Inserted post with ID:', post_id)

# find our newly created post
found_post = posts.find_one({"_id":post_id})
print('post is', found_post)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we head back to our Jaeger UI and query for ‚Äò&lt;em&gt;my-mongo-service&lt;/em&gt;‚Äô service, we will see 2 spans have been created. One for inserting the post, and another for finding it. &lt;/p&gt;

&lt;p&gt;All are created automatically by the pymongo instrumentation library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56reNE42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tig2o40t5ey071yavkom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56reNE42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tig2o40t5ey071yavkom.png" alt="Jaeger tracing" width="880" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-they-not-in-the-same-trace"&gt;
  &lt;/a&gt;
  Why are they not in the same trace?
&lt;/h3&gt;

&lt;p&gt;Well, simply because there was no piece of code that was meant to create any span for our script runner.&lt;/p&gt;

&lt;p&gt;In real life, you would most likely use some web app framework like Django and instrument it, so that a span would be created for a call to your endpoint, becoming the root span and containing these 2 spans under it. But that use-case is out of the scope of this tutorial.&lt;/p&gt;

&lt;p&gt;This is what it would look like if we selected the &lt;code&gt;find.posts&lt;/code&gt; span in Jaeger:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--832ujJoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xn4t601ciqv4i98fqv1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--832ujJoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xn4t601ciqv4i98fqv1n.png" alt="selected the find.posts span in Jaeger" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-advanced-visualization-with-aspecto"&gt;
  &lt;/a&gt;
  Bonus: Advanced Visualization with Aspecto
&lt;/h2&gt;

&lt;p&gt;By now you should have a basic understanding of what a span is and how OpenTelemetry can be used to add distributed tracing for code written in Python.&lt;/p&gt;

&lt;p&gt;But you probably reached distributed tracing because you wanted to visualize your distributed services and understand them better, which is exactly what &lt;a href="https://www.aspecto.io/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;Aspecto&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;Give our &lt;a href="https://app.aspecto.io/play/search?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;Live Playground&lt;/a&gt; a try to get a better idea ‚Äì it‚Äôs free and no sign-up is required.&lt;/p&gt;

&lt;p&gt;At the time of writing this, Aspecto has a &lt;a href="https://www.aspecto.io/pricing/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;free forever plan&lt;/a&gt; that you could start using today.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how to do it:&lt;/p&gt;

&lt;p&gt;1.First, create a new free account at &lt;a href="https://www.aspecto.io/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;www.aspecto.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Then, let‚Äôs install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install opentelemetry-instrumentation
pip install opentelemetry-distro
pip install opentelemetry-exporter-otlp-proto-grpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Modify your python file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main.py
from pymongo import MongoClient
import datetime

client = MongoClient('mongodb://localhost:27017')
db = client.pytest

posts = db.posts

# insert post
post = {"author": "Tom",
       "text": "My blog post",
       "date": datetime.datetime.utcnow()}
print('inserting post')
post_id = posts.insert_one(post).inserted_id
print('Inserted post with ID:', post_id)

# find our newly created post
found_post = posts.find_one({"_id":post_id})
print('post is',found_post)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to Aspecto settings and copy your API keys.&lt;/p&gt;

&lt;p&gt;Run like this so that spans are sent to Aspecto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_SERVICE_NAME=your-service-name 
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://otelcol.aspecto.io:4317 
OTEL_EXPORTER_OTLP_HEADERS=Authorization=your-aspecto-api-key-here opentelemetry-instrument python main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSpPPuxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih4wzz06ey35jhoueu66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSpPPuxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih4wzz06ey35jhoueu66.png" alt="Aspecto distributed tracing Python" width="880" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You got yourself a clean list of traces with easy-to-use filters.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs dive into one of the traces by selecting it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIm-hH1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tx42dhql7w1gye3960n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIm-hH1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tx42dhql7w1gye3960n.png" alt="Aspecto distributed services in Python" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See how you got a nice visualization that your service (a python file in this case) has made a call to mongo with the query ‚Äòfind.posts‚Äô?&lt;/p&gt;

&lt;p&gt;Just imagine how it would look in your production, giving you complete visibility on all your microservices as you troubleshoot issues ü§Ø&lt;/p&gt;

&lt;p&gt;And that would be it! If you have any questions, feel free to &lt;a href="https://twitter.com/thetomzach"&gt;reach out at any time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.S. If you want to learn more about OpenTelemetry, you can check out this free, 6 episodes, &lt;a href="https://www.aspecto.io/opentelemetry-bootcamp/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;OpenTelemetry Bootcamp&lt;/a&gt; (vendor-neutral). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/opentelemetry-bootcamp/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtLTblnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv2dlchpgyub7k14gb2b.png" alt="Learn OpenTelemetry with the OpenTelemetry Bootcamp" width="743" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs basically your &lt;a href="https://www.aspecto.io/opentelemetry-bootcamp/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=getting-started-with-opentelemetry-python"&gt;OpenTelemetry playbook&lt;/a&gt; where you will learn everything, from the very basics to scaling and deploying to production:&lt;/p&gt;

&lt;p&gt;Episode 1: OpenTelemetry Fundamentals&lt;br&gt;
Episode 2: Integrate Your Code (logs, metrics and traces)&lt;br&gt;
Episode 3: Deploy to Production + Collector&lt;br&gt;
Episode 4: Sampling and Dealing with High Volumes&lt;br&gt;
Episode 5: Custom Instrumentation&lt;br&gt;
Episode 6: Testing with OpenTelemetry&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>microservices</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>A Brief History Of JavaScript</title>
      <author>enigma6174</author>
      <pubDate>Wed, 19 Jan 2022 16:50:42 +0000</pubDate>
      <link>https://dev.to/enigma6174/a-brief-history-of-javascript-4oo8</link>
      <guid>https://dev.to/enigma6174/a-brief-history-of-javascript-4oo8</guid>
      <description>&lt;p&gt;The first version of &lt;strong&gt;JavaScript&lt;/strong&gt; was released under the name &lt;strong&gt;LiveScript&lt;/strong&gt; by Netscape in &lt;strong&gt;1995&lt;/strong&gt;. However, due to the growing popularity of Java, the langauge was later renamed.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;1996&lt;/strong&gt;, Microsoft also released it's own version of JavaScript that was extensively supported on it's own IE Browser. Same idea, somewhat similar syntax to the Netscape version but still had it's issues. The biggest issue was the fact that developers had to write different scripts for different browsers!&lt;/p&gt;

&lt;p&gt;This fragmentation of the language led to JavaScript being submitted to &lt;strong&gt;ECMA International&lt;/strong&gt; &lt;em&gt;(European Computer Manufacturers Association)&lt;/em&gt; to start the process of &lt;strong&gt;standrdization&lt;/strong&gt;. This meant that JavaScript would now confirm to fixed set of rules, regulations, best practices etc. (in short standards) to prevent the headache of fragmentation and allow developers to write single code that would run on multiple browsers.&lt;/p&gt;

&lt;p&gt;The period from &lt;strong&gt;1997 - 2005&lt;/strong&gt; saw huge standardisation efforts of JavaScript and the language quickly gained popularity in web development. Microsoft however, stayed away from this process.&lt;/p&gt;

&lt;p&gt;From &lt;strong&gt;2006 - 2011&lt;/strong&gt; there was huge progress in the JavaScript ecosystem followed by Microsoft joining the forces. It also saw the release of JavaScript based web development frameworks like &lt;em&gt;AngularJS, Ember, Backbone.js&lt;/em&gt; etc. which completely changed how web development was looked at.&lt;/p&gt;

&lt;p&gt;Though the timeline ends at &lt;strong&gt;2011&lt;/strong&gt; the development and standardization of JavaScript does not. Though the inital standardization efforts led to a clunky language with many different versions, what we have now, is a much more streamlined, standardized language that at the core, is supported by most browsers! Each browser however implements it's own verison of this standardized language to support different features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecmascript-and-javascript"&gt;
  &lt;/a&gt;
  ECMAScript And JavaScript
&lt;/h3&gt;

&lt;p&gt;Through the continous efforts of ECMA International, they were able to create a standardized language that at it's core is supported by most browsers. &lt;strong&gt;ECMAScript&lt;/strong&gt; is the actual language that was evolved by ECMA International and this ECMAScript is implemented as JavaScript by most browser vendors. Other examples of ECMAScript implementations include &lt;strong&gt;ActionScript&lt;/strong&gt; and &lt;strong&gt;JScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;ECMAScript is more of a set of guidelines and standards that need to be followed and JavaScript is the programmable implementation of the same. Therefore, ECMAScript isn't directly used but the standards that it specifies get implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TU7Qf4fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bck9b3y9f2vb9823b1j2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TU7Qf4fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bck9b3y9f2vb9823b1j2.png" alt="javascript-history" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked this article and want to stay updated with more such articles, support me by following me on DEV and &lt;a href="https://twitter.com/enigma6174"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I write about web development, AI, cloud, entrepreneurship, technology and anything else that excites me!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basic data preparation for Machine Learning</title>
      <author>AiFlow</author>
      <pubDate>Wed, 19 Jan 2022 16:37:29 +0000</pubDate>
      <link>https://dev.to/aiflowltd/basic-data-preparation-for-machine-learning-1f7c</link>
      <guid>https://dev.to/aiflowltd/basic-data-preparation-for-machine-learning-1f7c</guid>
      <description>&lt;p&gt;The very core of every learning algorithm is data. The more, the better. Experiments show that for a learning algorithm to reach its full potential, the data that we feed to it must be as qualitative as it is quantitative. To achieve state of the art results in data science projects, the main material, namely data, has to be ready to be shaped and moulded as our particular situation demands. Algorithms that accept data as raw and unprocessed as it is are scarce and often fail to leverage the full potential of machine learning and of the dataset itself.&lt;/p&gt;

&lt;p&gt;The road between raw data and the actual training of one model is far from straight and often requires various techniques of data processing to reveal insights and to emphasize certain distributions of the features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rS-XEJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajht5lt6qd58uei6bzhh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rS-XEJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajht5lt6qd58uei6bzhh.png" alt="Demo dataset" width="880" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take for example this dataset from the real estate business. It is by far an easy job to be able to accurately predict the final acquisition price of a house considering only the raw data. There is no way a generic algorithm could make a difference between ‚Äò1Story‚Äô and ‚Äò2Story‚Äô from the HouseStyle column or differentiate between two different value scales, like the year in the YearBuilt column and the mark in the OverallQual column.&lt;/p&gt;

&lt;p&gt;Data preparation has the duty of building an adequate value distribution for each column so that a generic algorithm could learn features from it.&lt;br&gt;
Some examples are rescaling the values, turning text information into categorical or extracting tokens from continuous string values, like product descriptions. This post will give some insights into how to transform raw data into formats that make the most out of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-missing-data"&gt;
  &lt;/a&gt;
  Handling missing data
&lt;/h3&gt;

&lt;p&gt;As the data producing sources are rarely perfect, raw datasets have missing values. Since generic algorithms cannot handle such cases and replacing them with a random value opens the possibility of obtaining any random output, methods have been implemented to replace them while keeping the data distribution in place, unmodified.&lt;/p&gt;

&lt;p&gt;The basic solution is dropping the rows or columns that contain an excessive amount of missing fields, since replacing all the empty fields with the same default value might bias the model rather than create valuable insights. You might imagine that this approach is not optimal, since we don‚Äôt want to delete data that might prove itself valuable. Instead, setting missing values to the median of the column has, experimentally, provided good results, since it keeps a similar data distribution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-outliers"&gt;
  &lt;/a&gt;
  Handling outliers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUqC65XX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o43h6zqo6hpmr5s2di98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUqC65XX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o43h6zqo6hpmr5s2di98.png" alt="Outliers" width="641" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outliers are data points that lie far away from the majority of data samples in the geometrical space of the distribution. Since these observations are far from the mean, they can influence the learning algorithm in an unwanted way, biasing it towards the tails of the distribution. A common way to handle outliers is Outlier Capping, which limits the range, casting a value X in the range [ m - std * delta , m + std * delta ], where m is the median value of the distribution, std the standard deviation and delta an arbitrarily chosen scale factor. This is how we would write this more formally: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spv9P-Dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxq096ujr7hdar1p03y0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spv9P-Dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxq096ujr7hdar1p03y0.png" alt="Outliers math equation" width="535" height="86"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-polynomial-features"&gt;
  &lt;/a&gt;
  Creating polynomial features
&lt;/h3&gt;

&lt;p&gt;There is often the case in machine learning when a feature is not linearly separable. Although more complex algorithms cope with the problem of non linearly separable search spaces, they might sacrifice accuracy over covering all the nonlinearities. Thus, creating polynomial features can help learning algorithms separate the search space with more ease, yielding better results in the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZ3IW24l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvyn3mjlz13qdkckcd5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZ3IW24l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvyn3mjlz13qdkckcd5b.png" alt="Polynomial features" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generating the second degree polynomial of feature 1 and adding it to the dataset yields a better representation of the geometrical data space, thus making it easier to be split. Although this is a shallow example, it clearly illustrates the importance of polynomial features in machine learning. On a large scale, polynomials of multi-feature combinations are taken into consideration for generating even more insights from the data.&lt;/p&gt;




&lt;p&gt;Those were just a few data processing steps to consider. At &lt;a href="https://www.aiflow.ltd/"&gt;aiflow.ltd&lt;/a&gt;, we automatically process the data with many more steps, to make sure the prediction quality of our automated algorithms is the best we can achieve. If you‚Äôre curios to find out more, subscribe to our newsletter on &lt;a href="https://www.aiflow.ltd/"&gt;aiflow.ltd&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>cloud</category>
      <category>machinelearning</category>
      <category>startup</category>
    </item>
    <item>
      <title>JavaScript¬†?? operator</title>
      <author>Lorenzo Zarantonello</author>
      <pubDate>Wed, 19 Jan 2022 16:35:34 +0000</pubDate>
      <link>https://dev.to/this-is-learning/javascript-operator-4o9c</link>
      <guid>https://dev.to/this-is-learning/javascript-operator-4o9c</guid>
      <description>&lt;p&gt;JavaScript double question mark (??) operator is called the nullish coalescing operator and it provides a default value when a variable or an expression evaluates to null or undefined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;MDN&lt;/a&gt; defines the nullish coalescing operator (??) as "&lt;em&gt;a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;This might seem complex but it is actually very simple!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-javascript%C2%A0%C2%A0operator"&gt;
  &lt;/a&gt;
  Understanding the JavaScript¬†??¬†operator
&lt;/h2&gt;

&lt;p&gt;We will see two examples that you MUST know. Then, I will leave a &lt;a href="https://medium.com/@lorenzozar/5d3bd92e835e"&gt;few other examples&lt;/a&gt; using the JavaScript ?? operator as optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const favoriteFruit = null;
const result = favoriteFruit ?? 'You did not tell me';
console.log(result); // "You did not tell me"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We start by declaring the variable favoriteFruit and we make it null.¬†&lt;/li&gt;
&lt;li&gt;Then, let's read the next line like this: IF favoriteFruit is null, THEN the default value is 'You did not tell me'. The default value is assigned to the result variable.¬†&lt;/li&gt;
&lt;li&gt;Finally,  we log result and we see "You did not tell me".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if the value of the first variable (the one on the left side of the nullish coaleshing operator i.e.¬†??) is null, use the default value i.e. the one on the right side of the¬†?? operator.&lt;/p&gt;

&lt;p&gt;Let's have another example and then I will explain why these two specific examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const favoriteFruit_1 = undefined;
const result = favoriteFruit_1 ?? 'You did not tell me, again!';
console.log(result); // "You did not tell me, again!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following the previous example,¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We start by declaring the favoriteFruit_1 variable but this time we make it undefined.¬†&lt;/li&gt;
&lt;li&gt;Then, let's read the next line like this: IF favoriteFruit_1 is undefined, THEN the default value is 'You did not tell me, again!'. The default value is assigned to the result variable.¬†&lt;/li&gt;
&lt;li&gt;Finally,  we log result and we see "You did not tell me, again!".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if the value of the first variable (the one on the left side of the¬†?? operator) is undefined, use the default value i.e. the one on the right side of the¬†?? operator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-two-examples-to-explain-the-javascript%C2%A0-operator"&gt;
  &lt;/a&gt;
  Why two examples to explain the JavaScript¬†?? operator?
&lt;/h3&gt;

&lt;p&gt;Because that is all you need!¬†&lt;/p&gt;

&lt;p&gt;In fact, you can read ANY JavaScript¬†?? operator like this: &lt;strong&gt;IF the first value is null/undefined THEN use the default value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIBzt3iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdlzpcfyhff9em87gl7r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIBzt3iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdlzpcfyhff9em87gl7r.PNG" alt="Image description" width="852" height="351"&gt;&lt;/a&gt;&lt;br&gt;
This is what a nullish coalescing operator (??) will return.&lt;/p&gt;

&lt;p&gt;It is important to remember that &lt;strong&gt;null and undefined are the only two cases that will prompt the use of the default value&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;It doesn't matter if you are tinkering with your first portfolio project or if you are starting with React. The nullish coalescing operator may come useful anytime.&lt;/p&gt;

&lt;p&gt;Whenever you use the nullish coalescing operator, an empty string like "" or a 0 will not trigger the default value.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://medium.com/@lorenzozar/5d3bd92e835e"&gt;other cases using the JavaScript¬†??¬†operator&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using the nullish coalescing operator, or double question mark, is fairly straightforward.&lt;/p&gt;

&lt;p&gt;When you see the JavaScript¬†?? operator, follow this logic: &lt;strong&gt;IF the first value is null/undefined THEN use the default value&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The breakpoints we tested in 2021, and the ones to test in 2022</title>
      <author>Kilian Valkhof</author>
      <pubDate>Wed, 19 Jan 2022 16:23:26 +0000</pubDate>
      <link>https://dev.to/polypane/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022-2mll</link>
      <guid>https://dev.to/polypane/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022-2mll</guid>
      <description>&lt;p&gt;Which screen sizes to design, build and test on is a perennial topic in web development. While well-built responsive websites will work at any size, during development it's easier to use a small number of sizes to check with (even in Polypane!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what sizes to use?&lt;/strong&gt; There's a number of different approaches we'll go over in this article, all updated to be relevant in 2022.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Base it off device groups: mobile, tablet, laptop and desktop.&lt;/li&gt;
&lt;li&gt;Use the breakpoints from &lt;a href="https://polypane.app/blog/css-breakpoints-used-by-popular-css-frameworks/"&gt;popular CSS frameworks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://polypane.app/create-workspace/"&gt;the dimensions your visitors use&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Using the most used breakpoints of 2021.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#based-on-device-sizes"&gt;
  &lt;/a&gt;
  Based on device sizes
&lt;/h3&gt;

&lt;p&gt;There's mobile phones, tablets, laptops and desktops, so if you use size for each of that category, you cover them:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mobile&lt;/td&gt;
&lt;td&gt;375px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tablet&lt;/td&gt;
&lt;td&gt;768px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Laptop&lt;/td&gt;
&lt;td&gt;1280px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Desktop&lt;/td&gt;
&lt;td&gt;1920px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This gives a good overview, but you run the risk of &lt;a href="https://polypane.app/blog/overlooked-breakpoints-in-responsive-design/"&gt;missing the in-between sizes&lt;/a&gt;, smaller than 375px and between 900 and 1000px wide.&lt;/p&gt;

&lt;p&gt;Both of those are often forgotten, but still see quite a bit of real-life usage. The first one in older mobile phones, and the second one on tablets, laptops and desktops in unmaximized browser windows.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#based-on-popular-css-frameworks"&gt;
  &lt;/a&gt;
  Based on popular CSS frameworks
&lt;/h3&gt;

&lt;p&gt;We've written about &lt;a href="https://polypane.app/blog/css-breakpoints-used-by-popular-css-frameworks/"&gt;the breakpoints that popular CSS frameworks use&lt;/a&gt; before. These are excellent when you're also using the rest of the framework, or as a starting-off point. For example, here's the breakpoints in Tailwind CSS 3.0:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sm&lt;/td&gt;
&lt;td&gt;640px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;md&lt;/td&gt;
&lt;td&gt;768px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lg&lt;/td&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xl&lt;/td&gt;
&lt;td&gt;1280px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2xl&lt;/td&gt;
&lt;td&gt;1536px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This gives a nice spread, though with a relatively high starting point you run the risk of having to do extra work after implementing the design to make sure everything fit on mobile devices.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#based-on-your-visitor-data"&gt;
  &lt;/a&gt;
  Based on your visitor data
&lt;/h3&gt;

&lt;p&gt;If you use Google Analytics, your visitors browser dimensions are stored as well. This means you can retrieve them from the Google Analytics dashboard and use those to test on.&lt;/p&gt;

&lt;p&gt;For example, here's the 5 most used dimension on this site:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Width&lt;/th&gt;
&lt;th&gt;Height&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4.55%&lt;/td&gt;
&lt;td&gt;1900px&lt;/td&gt;
&lt;td&gt;940px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.13%&lt;/td&gt;
&lt;td&gt;1900px&lt;/td&gt;
&lt;td&gt;970px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.02%&lt;/td&gt;
&lt;td&gt;1520px&lt;/td&gt;
&lt;td&gt;750px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.99%&lt;/td&gt;
&lt;td&gt;1350px&lt;/td&gt;
&lt;td&gt;660px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.95%&lt;/td&gt;
&lt;td&gt;1350px&lt;/td&gt;
&lt;td&gt;630px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;While you can use the above it's important to realize that &lt;strong&gt;our&lt;/strong&gt; audience probably isn't &lt;strong&gt;your&lt;/strong&gt; audience. Polypane is a tool for web developers, so the vast majority of our visitors are viewing our site on a desktop device, and fairly large ones at that.&lt;/p&gt;

&lt;p&gt;Notice too that none of the most popular sizes here map to the traditional device widths mentioned above. Every audience is different, and it's best to cater to yours.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-a-polypane-workspace-based-on-google-analytics"&gt;
  &lt;/a&gt;
  Create a Polypane workspace based on Google Analytics
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also use &lt;a href="https://polypane.app/create-workspace/"&gt;our GA workspace creator&lt;/a&gt; to automate the process, select how many panes you want and how to sort them, and then opening them in Polypane with a single click.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#the-breakpoints-we-tested-in-2021"&gt;
  &lt;/a&gt;
  The breakpoints we tested in 2021
&lt;/h3&gt;

&lt;p&gt;That leaves us with the last method: using the breakpoints that have been used the most in 2021. For that we can use two sources: the Web Almanac and Polypane.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#from-the-web-almanac"&gt;
  &lt;/a&gt;
  From the Web Almanac
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://almanac.httparchive.org/en/2021/"&gt;Web Almanac&lt;/a&gt; analysed 8.2 million websites, old and new, to make an overview of the most used web features, including breakpoints. That also includes all the sites in the web almanacs testing data that existed (well) before this year.&lt;/p&gt;

&lt;p&gt;It has &lt;a href="https://almanac.httparchive.org/en/2021/css"&gt;a chapter on CSS&lt;/a&gt; that includes a list of &lt;a href="https://almanac.httparchive.org/en/2021/css#common-breakpoints"&gt;common breakpoints&lt;/a&gt;. It's worth reading the analysis: they make a split between &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; media queries because you can see a clear difference in sizes used (&lt;code&gt;min-width&lt;/code&gt; is more often used for &lt;code&gt;767px&lt;/code&gt; while &lt;code&gt;max-width&lt;/code&gt; for &lt;code&gt;768px&lt;/code&gt;, for example). We're splitting those out in the overview below as well, as they give a nice contrast.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#minwidth"&gt;
  &lt;/a&gt;
  Min-width
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;57%&lt;/td&gt;
&lt;td&gt;768px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;44%&lt;/td&gt;
&lt;td&gt;1200px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40%&lt;/td&gt;
&lt;td&gt;992px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31%&lt;/td&gt;
&lt;td&gt;600px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;782px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24%&lt;/td&gt;
&lt;td&gt;480px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16%&lt;/td&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9%&lt;/td&gt;
&lt;td&gt;767px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8%&lt;/td&gt;
&lt;td&gt;800px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3%&lt;/td&gt;
&lt;td&gt;991px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#maxwidth"&gt;
  &lt;/a&gt;
  Max-width
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;52%&lt;/td&gt;
&lt;td&gt;767px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38%&lt;/td&gt;
&lt;td&gt;600px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38%&lt;/td&gt;
&lt;td&gt;768px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36%&lt;/td&gt;
&lt;td&gt;480px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30%&lt;/td&gt;
&lt;td&gt;991px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27%&lt;/td&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26%&lt;/td&gt;
&lt;td&gt;800px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18%&lt;/td&gt;
&lt;td&gt;1200px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13%&lt;/td&gt;
&lt;td&gt;992px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;782px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;When it comes to the difference between &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt;, apart from the 1px differences here and there, is&lt;br&gt;
that the spread for &lt;code&gt;max-width&lt;/code&gt; is much more diverse. For &lt;code&gt;min-width&lt;/code&gt;, the top 10 goes from 57% usage to 3%, while max-width starts lower, at 52%, and ends higher, at 10%.&lt;/p&gt;

&lt;p&gt;Min-widths means &lt;a href="https://polypane.app/blog/responsive-design-ground-rules/#rule-2-mobile-first"&gt;you're &lt;em&gt;adding&lt;/em&gt; styling as you get wider&lt;/a&gt;, while max-widths usually disable styling as they get smaller. Because of this, you frequently need less min-widths, and your styling works for a longer time before you need a new breakpoint.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#the-mostused-breakpoints-in-polypane-in-2021"&gt;
  &lt;/a&gt;
  The most-used breakpoints in Polypane in 2021
&lt;/h4&gt;

&lt;p&gt;We can also look at the most used pane sizes in Polypane in 2021. The sizes that &lt;strong&gt;real developers have used the most in the past year&lt;/strong&gt; to develop websites with.&lt;/p&gt;

&lt;p&gt;This gives the most accurate look at what sizes modern sites are optimized for. Here is the top 10 for 2021:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5.48%&lt;/td&gt;
&lt;td&gt;320px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.49%&lt;/td&gt;
&lt;td&gt;1280px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.41%&lt;/td&gt;
&lt;td&gt;768px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.41%&lt;/td&gt;
&lt;td&gt;1920px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.19%&lt;/td&gt;
&lt;td&gt;500px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.89%&lt;/td&gt;
&lt;td&gt;568px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.86%&lt;/td&gt;
&lt;td&gt;800px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.81%&lt;/td&gt;
&lt;td&gt;375px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.69%&lt;/td&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.25%&lt;/td&gt;
&lt;td&gt;1440px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If we look at these sizes we see a nice spread between device sizes, breakpoints from CSS Frameworks and the many &lt;a href="https://polypane.app/docs/workspace-management/"&gt;presets&lt;/a&gt; that Polypane ships with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-breakpoints-to-develop-on-in-2022"&gt;
  &lt;/a&gt;
  The breakpoints to develop on in 2022
&lt;/h3&gt;

&lt;p&gt;As you can see from the relatively low percentages, there are thousands of other sizes being used in Polypane. There is no single right set of dimensions.&lt;/p&gt;

&lt;p&gt;So the best answer? Pick a set you like and adapt it. Any of the ones on this page are a good choice.&lt;/p&gt;

&lt;p&gt;If you notice you often make errors at a size you're not currently developing for, make sure to add it. And if you find yourself fixing the same issue at multiple sizes, maybe you can hide one of them during development.&lt;/p&gt;

&lt;p&gt;Regardless of which default sizes you choose to develop on, &lt;strong&gt;it's best to see all of them in one overview.&lt;/strong&gt; That's what Polypane lets you do. All the other parts of your browser are synced as well: your interactions happen in all panes, our elements panel lets you edit and inspect elements in all&lt;br&gt;
panes at the same time, and our console intelligently combines messages from each pane.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://polypane.app"&gt;Polypane has a free 14 trial available&lt;/a&gt;. Check it out!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>ux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>320+ free resources for learning fullstack, frontend and backend</title>
      <author>Dev Write Ups</author>
      <pubDate>Wed, 19 Jan 2022 16:20:37 +0000</pubDate>
      <link>https://dev.to/devwriteups/320-free-resources-for-learning-fullstack-frontend-and-backend-50cd</link>
      <guid>https://dev.to/devwriteups/320-free-resources-for-learning-fullstack-frontend-and-backend-50cd</guid>
      <description>&lt;p&gt;You only need this post to become a Developer because this post has nearly unlimited amount of every type of resources covering everything you will need. &lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#blog-your-journey"&gt;
  &lt;/a&gt;
  Blog your Journey
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://hashnode.com/@RAHULISM/joinme"&gt;Hashnode&lt;/a&gt;  - Hashnode is the easiest way to start a developer blog on your personal domain üåè for free and connect with the readers through our global dev community! üë©‚Äçüíªüë®‚Äçüíª&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/"&gt; Dev.to&lt;/a&gt; - DEV is a community of software developers getting together to help one another out. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://hackernoon.com/"&gt;Hackernoon &lt;/a&gt; - An Independent Tech Media Site&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#must-have-chrome-extensions"&gt;
  &lt;/a&gt;
  Must have Chrome extensions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://api.daily.dev/get?r=rahxul"&gt;DailyDev&lt;/a&gt; - Get the latest new about the Dev community in your chrome default tab.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm"&gt;WhatFont&lt;/a&gt; - Get to know which font is the website using. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg"&gt;ColorPick Eyedropper&lt;/a&gt;  - Get to know which color is the website using by just dropping the pen.
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg"&gt;Wappalyzer &lt;/a&gt; - Get to know the tech stack of any website&lt;/li&gt;
&lt;li&gt; &lt;a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm"&gt;Web Developer&lt;/a&gt;  -  Amazing amount of tools this extensions has. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React developer tools&lt;/a&gt;  - React Developer Tools is a Chrome DevTools extension for the open-source React JavaScript library. It allows you to inspect the React component hierarchies in the Chrome Developer Tools.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#vs-code-must-have-extensions"&gt;
  &lt;/a&gt;
  VS Code Must have extensions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script"&gt;NPM &lt;/a&gt; -  This extension helps you to manage your Package.json and will provide warnings if dependencies are not installed also will help with the version control.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier &lt;/a&gt; - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets"&gt;Rainbow Brackets&lt;/a&gt;  - Find that missing tag with ease by color-coding every bracket set in your environment.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=emmanuelbeziat.vscode-great-icons"&gt;VS Code Great Icons&lt;/a&gt;  - Organize your environment by applying an appropriate icon set to visually identify files by type.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=JakeWilson.vscode-placeholder-images"&gt;Placeholder Images&lt;/a&gt;  - Services like unsplash.it and placehold.it are extremely useful. Now you can save time by adding placeholder images right from within VS Code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt; - The official VueJS extension&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt; - The extension uses the ESLint library installed in the opened workspace folder.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt; - Launch a development local Server with live reload feature for static &amp;amp; dynamic pages. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode"&gt;Visual Studio IntelliCode&lt;/a&gt; - This extension will move the most relevant completion suggestions to the top. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome"&gt;Debugger For Chrome&lt;/a&gt; - This extension allows you to debug your JavaScript code running in the Chrome browser, from inside of VS Code.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-edge"&gt;Debugger for Microsoft Edge&lt;/a&gt;  - Debug your JavaScript code in the Microsoft Edge browser&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=firefox-devtools.vscode-firefox-debug"&gt;Debugger for Firefox&lt;/a&gt;  - Debug your web application or browser extension in Firefox&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt; Bracket Pair Colorizer 2&lt;/a&gt;  - A customizable extension for colorizing matching brackets&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#vs-code-themes"&gt;
  &lt;/a&gt;
  VS Code themes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"&gt;One Dark Pro&lt;/a&gt; - Atom's iconic One Dark theme for Visual Studio Code&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"&gt;Material Theme&lt;/a&gt; - The most epic theme now for Visual Studio Code&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=jolaleye.horizon-theme-vscode"&gt;Horizon Theme&lt;/a&gt; - A beautifully warm dual theme for Visual Studio Code&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#general-resources"&gt;
  &lt;/a&gt;
  General Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all you will need a check list for marking what all you have learned. You can see the below image for how the checklist will look like.  &lt;br&gt;&lt;br&gt;
Link -&amp;gt;  &lt;a href="https://frontendchecklist.io/"&gt;The Front-End Checklist&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lsUMEkIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608173033183/RTWMoCY5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsUMEkIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608173033183/RTWMoCY5a.png" alt="image.png" width="880" height="1977"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://roadmap.sh/frontend"&gt;Frontend Development Roadmap&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2R8KNqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608173416316/Z0Jacl94l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2R8KNqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608173416316/Z0Jacl94l.png" alt="image.png" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-resources"&gt;
  &lt;/a&gt;
  Learning Resources üìò
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#docs-and-cheat-sheets"&gt;
  &lt;/a&gt;
  DOCS and Cheat sheets üòÅ
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Web Docs&lt;/a&gt;  - The MDN Web Docs site provides information about Open Web technologies including HTML, CSS, and APIs for both Web sites and progressive web apps.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://devdocs.io/"&gt;DevDocs&lt;/a&gt;  - Fast, offline, and free documentation browser for developers. Search 100+ docs in one web app.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://devhints.io/"&gt;DEVHINTS&lt;/a&gt;  - A modest collection of cheatsheets.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://flexbox.malven.co/"&gt;FLEX - Malven&lt;/a&gt;  - A visual cheatsheet for CSS flex layout.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://grid.malven.co/"&gt;GRID - Malven&lt;/a&gt;  - A visual cheatsheet for CSS grid layout.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-works"&gt;
  &lt;/a&gt;
  üåê HOW DOES IT WORKS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=x3c1ih2NJEg"&gt;How the Internet Works Video&lt;/a&gt; - How does the Internet Works?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLzdnOPI1iJNfMRZm5DDxco3UdsFegvuB7"&gt;How the Internet Works Brief Videos&lt;/a&gt; - A brief explanations on, how does the Internet works?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://howdns.works"&gt;DNS&lt;/a&gt; - How DNS works?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://howhttps.works"&gt;HTTPS&lt;/a&gt; - How HTTPS works?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-html-and-css"&gt;
  &lt;/a&gt;
  For HTML and CSS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.freecodecamp.org/learn"&gt;freeCodeCamp&lt;/a&gt;  - Free course to learn Web Development.&lt;/li&gt;
&lt;li&gt;Flexbox Froggy - A game that helps you to learn CSS Flex.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;CSS TRICKS - Flexbox&lt;/a&gt;  - A Complete Guide to Flexbox.&lt;/li&gt;
&lt;li&gt;Grid Garden - A game for learning CSS Grid.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;CSS TRICKS - A Complete Guide to Grid&lt;/a&gt;  - A comprehensive guide to CSS grid, focusing on all the settings both for the grid parent container and the grid child elements.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://learncssgrid.com/"&gt;Learn CSS Grid&lt;/a&gt;  - A comprehensive guide to help you understand and learn CSS Grid Layout, by Jonathan Suh.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://caniuse.com/"&gt;Can I Use&lt;/a&gt;  - Up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://htmldog.com/"&gt;HTML Dog &lt;/a&gt; - Simple and to the point explanations. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://marksheet.io/"&gt;Marksheet&lt;/a&gt;  - Unlimited amount of tutorials&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.theodinproject.com/"&gt;The ODIN Project &lt;/a&gt; - Amazing way of learning.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://emilkowalski.github.io/css-effects-snippets/"&gt;CSS Effects&lt;/a&gt;  - CSS Animations.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://keyframes.app/"&gt;Keyframes&lt;/a&gt;  - Create basic or complex CSS &lt;a class="mentioned-user" href="https://dev.to/keyframe"&gt;@keyframe&lt;/a&gt; animations with a visual timeline editor.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://animista.net/"&gt;Animista &lt;/a&gt; - Play with a collection of ready to use CSS animations.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.internetingishard.com/"&gt;Interneting Is Hard&lt;/a&gt;  - Friendly web development tutorials for complete beginners.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://9elements.com/bem-cheat-sheet/"&gt;BEM&lt;/a&gt;  - BEM naming cheat sheet.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://autoprefixer.github.io/"&gt;Autoprefixer&lt;/a&gt;  - Autoprefixer is a PostCSS plugin which parses your CSS and adds vendor prefixes.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.cleancss.com/css-beautify/"&gt;CSS Formatter &lt;/a&gt; - Online CSS Formatter, CSS Beautifier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://placeholder.com/"&gt; Placeholder&lt;/a&gt;  - How To Use Our Placeholders. Just specify the image size after our URL and you'll get a placeholder image.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#online-ide-editor"&gt;
  &lt;/a&gt;
  üìù ONLINE IDE, EDITOR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://ide.goorm.io/"&gt;goormIDE&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://repl.it/"&gt; Repl.it &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#image-resources"&gt;
  &lt;/a&gt;
  üì∑ IMAGE RESOURCES
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.slazzer.com/"&gt;Slazzer&lt;/a&gt; - Image  &lt;a href="https://www.slazzer.com/"&gt;Background Remover&lt;/a&gt; 
Automatically and Free&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;  - Free images and photos.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;  - Free stock photos.&lt;/li&gt;
&lt;li&gt;Remove Photo Data - Remove personal data from photos before sharing them on the internet.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://lottiefiles.com/"&gt;LottieFiles&lt;/a&gt;  - LottieFiles is a collection of animations designed for - Lottie - gone are the days of bugging your developer.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt;  - Free image or video.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  üëì ACCESSIBILITY
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://uxdesign.cc/designing-for-accessibility-is-not-that-hard-c04cc4779d94"&gt;Accessibility Blog - Medium&lt;/a&gt;  - Seven easy-to-implement - guidelines to design a more accessible web.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://moritzgiessmann.de/accessibility-cheatsheet/"&gt;Accessibility Cheatsheet &lt;/a&gt; - Practical approaches to Universal Design for making your website/webapp accessible to everyone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#terminals-for-windows"&gt;
  &lt;/a&gt;
  üìÑ TERMINALS FOR WINDOWS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab"&gt;Windows Terminal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/felixse/FluentTerminal"&gt;FluentTerminal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#youtube-channels"&gt;
  &lt;/a&gt;
  üì∫ YOUTUBE CHANNELS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;freeCodeCamp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC80PWRj_ZU8Zu0HSMNVwKWw"&gt;Codevolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA"&gt;Fireship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg"&gt;The Net Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCoebwHSTvwalADTJhps0emA"&gt;Wes Bos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%96%8B-fonts-and-typography"&gt;
  &lt;/a&gt;
  üñã FONTS AND TYPOGRAPHY
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com"&gt;Google Fonts&lt;/a&gt; - The #1 resource for free and easy-to-use webfonts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fontpair.co"&gt;FontPair&lt;/a&gt; - Font Pair helps designers pair Google Fonts together. Beautiful Google Font combinations and pairs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fontjoy.com"&gt;Fontjoy&lt;/a&gt; - Fontjoy helps designers choose the best font combinations. Mix and match different fonts for the perfect pairing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fontsarena.com"&gt;Fonts Arena&lt;/a&gt; - Free fonts, free alternatives to premium fonts, done-for-you-research articles.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  üé® ILLUSTRATIONS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://undraw.co/illustrations"&gt;unDraw&lt;/a&gt; - Browse to find the illustrations that fit your needs and click to download.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freepik.com"&gt;freepik&lt;/a&gt; - Free graphic resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.drawkit.io"&gt;DrawKit&lt;/a&gt; - Hand-drawn vector illustration and icon resources, perfect for your next project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  üíß ICONS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://fontawesome.com"&gt;Font Awesome&lt;/a&gt; - Vector icons and social logos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ionicons.com"&gt;Ionicons&lt;/a&gt; - Open-Sourced and MIT licensed icon pack.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://icons8.com/icons"&gt;icons8&lt;/a&gt; - Download free icons in PNG and SVG.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.flaticon.com"&gt;flaticon&lt;/a&gt; - Free vector icons in SVG, PSD, PNG, EPS format or as ICON FONT.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://simpleicons.org"&gt;Simple Icons&lt;/a&gt; - 1463 Free SVG icons for popular brands.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#frontend-framework-learning-resources"&gt;
  &lt;/a&gt;
  Front-end Framework Learning Resources
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  ‚ö° JAVASCRIPT
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/learn"&gt;freeCodeCamp&lt;/a&gt; - Best free resource to learn JavaScript interactively.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://javascript.info"&gt;JavaScript.info&lt;/a&gt; - Modern JavaScript Tutorial.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;JavaScript Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference"&gt;JavaScript Reference By MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eloquentjavascript.net"&gt;Eloquent JavaScript&lt;/a&gt; - This is a book about JavaScript, programming, and the wonders of the digital. You can read it online here.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://javascript30.com"&gt;JavaScript30&lt;/a&gt; - 30 days vanilla JS coding challenge. Build 30 things in 30 days with 30 tutorials.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://youmightnotneedjquery.com"&gt;DOM Manipulation Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5"&gt;How JavaScript works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events"&gt;JavaScript Event Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/"&gt;Mostly Adequate Guide to Functional Programming&lt;/a&gt; - Excellent primer to functional programming using JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/getify/Functional-Light-JS"&gt;Functional-Light JavaScript&lt;/a&gt; - This book explores the core principles of functional programming (FP) as they are applied to JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codeschool.com/learn/javascript"&gt;Code School&lt;/a&gt; - From Basics to Best Practices. Different courses related to JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://reactivex.io/learnrx/"&gt;Functional programming&lt;/a&gt; - Learn basic principles of functional programming in an interactive way by using map, filter, concatAll, reduce and zip.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learnjavascript.online"&gt;Learn JavaScript Online&lt;/a&gt; - Interactive JavaScript course with spaced repetiton flashcards app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://exercism.io/tracks/javascript"&gt;Exercism JavaScript Track&lt;/a&gt; - Exercism provides individual practice and mentor-based learning for free.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  ‚ö° REACT
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#why-react"&gt;
  &lt;/a&gt;
  Why React?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GW0rj4sNH2w"&gt;JS Apps at Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=x7cQ3mrcKaY"&gt;React: Rethinking best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://facebook.github.io/react/docs/installation.html"&gt;React Docs - Quick Start section&lt;/a&gt; &lt;code&gt;basic&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://leanpub.com/the-road-to-learn-react"&gt;The Road to learn React&lt;/a&gt; &lt;code&gt;basic&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#es2015"&gt;
  &lt;/a&gt;
  ES2015+
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://egghead.io/courses/learn-es6-ecmascript-2015"&gt;Learn ES6 (ECMAScript 2015)&lt;/a&gt; &lt;code&gt;basic&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://exploringjs.com/es6/"&gt;Exploring ES6&lt;/a&gt; &lt;code&gt;advanced&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://leanpub.com/exploring-es2016-es2017/read"&gt;Exploring ES2016 and ES2017&lt;/a&gt; &lt;code&gt;advanced&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://react-router.now.sh/"&gt;React Router Docs&lt;/a&gt; &lt;code&gt;basic&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  &lt;a href="http://redux.js.org/"&gt;Redux&lt;/a&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://egghead.io/courses/getting-started-with-redux"&gt;Getting Started with Redux&lt;/a&gt; &lt;code&gt;basic&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux"&gt;Building React Applications with Idiomatic Redux&lt;/a&gt; &lt;code&gt;advanced&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#bundlers"&gt;
  &lt;/a&gt;
  Bundlers
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#webpack"&gt;
  &lt;/a&gt;
  &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webpack.js.org/get-started/"&gt;Get Started with Webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#build-stuff"&gt;
  &lt;/a&gt;
  Build Stuff
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://react.rocks/"&gt;Several project ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://todomvc.com/examples/react/#/"&gt;React - TodoMVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/blog/bootstrapping-a-react-project/"&gt;Bootstrapping a React project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://academy.plot.ly/react/1-introduction/"&gt;Build a Weather app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.robinwieruch.de/the-soundcloud-client-in-react-redux/"&gt;The SoundCloud Client in React + Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Primer on the React Ecosystem: &lt;a href="http://patternhatch.com/2016/07/06/a-primer-on-the-react-ecosystem-part-1-of-3/"&gt;1&lt;/a&gt;, &lt;a href="http://patternhatch.com/2016/08/02/a-primer-on-the-react-ecosystem-part-2-of-3/"&gt;2&lt;/a&gt; and 3.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.slatepeak.com/build-a-react-redux-app-with-json-web-token-jwt-authentication/"&gt;Building a React/Redux App with JSON Web Token (JWT) Authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to goo deep in React? Visit  &lt;a href="https://github.com/ericdouglas/react-learning"&gt;React-Learning&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  üéÆ APIs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://quotes.rest"&gt;Quotes REST API&lt;/a&gt; - They Said So has more than 1 million+ quotes in the database, the largest such database in the world. And Quotes API gives easy way to access the data.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://openweathermap.org/guide"&gt;OpenWeather&lt;/a&gt; - Simple and fast and free weather API from OpenWeatherMap you have access to current weather data, hourly, 5- and 16-day forecasts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://public-apis.io"&gt;Public APIs&lt;/a&gt; - A collective list of more than 1000 Free Public and Open REST APIs for developers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://swapi.dev"&gt;SWAPI&lt;/a&gt; - The Star Wars API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jsonplaceholder.typicode.com"&gt;JSONPlaceholder&lt;/a&gt; - Free to use fake Online REST API for testing and prototyping.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  ‚ö° NODEJS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jsz4LDYc6kv3ymONOKxwBU"&gt;Node.js Tutorial&lt;/a&gt; - Node.js Crash Course Tutorial by Net Ninja.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/azat-co/you-dont-know-node"&gt;You Don't Know Node.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/maxogden/art-of-node#readme"&gt;The Art of Node&lt;/a&gt; - Introductory tutorial covering the basics. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodeschool.io"&gt;NodeSchool&lt;/a&gt; - Interactive self guided workshops you can also do on your own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodepatternsbooks.com"&gt;Node Patterns&lt;/a&gt; - Short books about code and networking patterns related to Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://learnnode.com"&gt;Learn Node&lt;/a&gt; - A premium training course to learn to build apps with Node.js, Express, MongoDB.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://thenodeway.io"&gt;The Node Way&lt;/a&gt; - An entire philosophy of Node.js best practices and guiding principles exists for writing maintainable modules, scalable applications, and code that is actually pleasant to read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/express-js-security-tips/"&gt;Express.js Security Tips&lt;/a&gt; - How You Can Save and Secure Your App.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome-nodejs"&gt;Awesome Nodejs&lt;/a&gt; - Delightful Node.js packages and resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;nodebestpractices&lt;/a&gt; - Huge list of best practices for building node apps. Important for big projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#learn-git"&gt;
  &lt;/a&gt;
  üòê Learn GIT
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://guides.github.com/introduction/git-handbook/"&gt; Git Handbook&lt;/a&gt; 
Git, GitHub, DVCS, oh my! Learn all the lingo and the basics of Git.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://training.github.com/"&gt;Cheat Sheets&lt;/a&gt; &lt;br&gt;
Keep these handy! Reference sheets covering Git commands, features, SVN migrations, and bash. Available in a multiple languages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://learngitbranching.js.org/"&gt;Learn Git branching&lt;/a&gt; &lt;br&gt;
Try Git commands right from your web browser. Featuring some of your soon-to-be favorites: branch, add, commit, merge, revert, cherry-pick, rebase!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://git-school.github.io/visualizing-git/"&gt;Visualizing Git&lt;/a&gt; &lt;br&gt;
Look under the hood! Explore how Git commands affect the structure of a repository within your web browser with a free explore mode, and some constructed scenarios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/jlord/git-it-electron#what-to-install"&gt;Git-It&lt;/a&gt; &lt;br&gt;
You‚Äôve downloaded Git, now what? Download Git-It to your machine and you‚Äôll get a hands-on tutorial that teaches you to use Git right from your local environment, using commands on real repositories.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#prepare-for-interview-questions"&gt;
  &lt;/a&gt;
  Prepare for Interview (Questions)
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://h5bp.org/Front-end-Developer-Interview-Questions/"&gt;Front-end Developer Interview Questions&lt;/a&gt;  - A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://yangshun.github.io/front-end-interview-handbook/en/html-questions/"&gt;Front End Interview Handbook&lt;/a&gt; - Go from zero to front end interview hero with this handbook. No prior interview experience needed.&lt;/li&gt;
&lt;li&gt; &lt;a href="http://flowerszhong.github.io/"&gt;Front-end Developer Interview Questions&lt;/a&gt; - A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore. &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I have gathered all the resources that you will require to become a MERN or MEAN stack developer. All these resources will include Articles, Videos, Course, Websites, Tutorials, Books etc. And everything is FREE&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MERN - MongoDB, Express, React, NodeJS&lt;/li&gt;
&lt;li&gt;MEAN - MongoDB, Express, Angular, NodeJS&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ò¢ You should know the basics of HTML, CSS AND JS&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#learn-mongodb"&gt;
  &lt;/a&gt;
  Learn MongoDB
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#courses"&gt;
  &lt;/a&gt;
  Courses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://university.mongodb.com/courses/catalog"&gt;MongoDB University&lt;/a&gt; -&amp;gt; This website has many course for free that will definitely take you from Zero to Hero&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/mongodb-essentials/"&gt;Understanding the basics of MongoDB&lt;/a&gt; -&amp;gt; Udemy free course for learning the basics
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.coursera.org/learn/server-side-nodejs"&gt;Server-side Development with NodeJS express and MongoDB&lt;/a&gt; - Coursera course starting from 7th Febüòâ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#blogs-tutorials-docs-ebooks"&gt;
  &lt;/a&gt;
  Blogs  /  Tutorials /  Docs /  eBooks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ü•É &lt;a href="https://www.guru99.com/mongodb-tutorials.html"&gt;Guru99 MongoDB in 7 days Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìö &lt;a href="https://docs.mongodb.com/manual/"&gt;MongoDB Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ &lt;a href="https://www.openmymind.net/2011/3/28/The-Little-MongoDB-Book/"&gt;The little MongoDB book&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;‚è≤ &lt;a href="https://www.koderhq.com/tutorial/mongodb/"&gt;Intro to MongoDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t4wPUQ5RElY"&gt;MongoDB tutorial Intellipat  2Hrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOFJ9JcVW9u4PlSWO-VFoao"&gt;MongoDB - noSql database&lt;/a&gt; [Playlist]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=-56x56UppqQ"&gt;MongoDB Crash Course&lt;/a&gt; by Traversy Media [40mins Apprx]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLS1QulWo1RIZtR6bncmSaH8fB81oRl6MP"&gt;MongoDB Tutorial for beginners&lt;/a&gt; Playlist. Contains small videos and informative&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jpvoYriLI0bY8DOgWZfi6u"&gt;MongoDB Tutorial for beginners&lt;/a&gt; Playlist. &lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-express"&gt;
  &lt;/a&gt;
  Learn Express
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#%E2%96%B6-videos"&gt;
  &lt;/a&gt;
  ‚ñ∂ Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L72fhGm1tfE"&gt;ExpressJS Crash Course by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lab.github.com/everydeveloper/introduction-to-node-with-express"&gt;Introduction to Node with Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tutorials-ebooks-blogs"&gt;
  &lt;/a&gt;
  Tutorials / eBooks / Blogs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ü¶ø&lt;a href="https://www.tutorialspoint.com/expressjs/index.htm"&gt;Tutorials Point - ExpressJS tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìö&lt;a href="https://www.pdfdrive.com/expressjs-guide-leanpub-e5912929.html"&gt;MongoDB Guide eBook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ&lt;a href="https://www.hacksparrow.com/webdev/express"&gt;Hacksparrow Blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ&lt;a href="https://www.rosehosting.com/blog/tag/express/"&gt;RoseHosting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ&lt;a href="https://codewithhugo.com/tags/express/"&gt;Code with Hugo - Express&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìö&lt;a href="https://flaviocopes.com/page/express-handbook"&gt;Express Handbook by Flavio&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-react"&gt;
  &lt;/a&gt;
  Learn React
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#blogs-ebooks-tutorials-docs"&gt;
  &lt;/a&gt;
  Blogs / eBooks / Tutorials / Docs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/series/what-the-react-ckj29pch203pw25s1hkr8as0w"&gt;What the React - Blog Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hello-world.html"&gt;React DOCS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/jsx-in-depth.html"&gt;JSX in Depts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactpatterns.com/"&gt;React Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33 JavaScript Concepts Every DEV Should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;High Order Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;Refs and DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/courses/getting-started-with-redux"&gt;EggheadIO Redux Course by Dan Abarmov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/react-composition/"&gt;React Compositon - Flavio Copes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/page/react-handbook/"&gt;React Handbook by Flavio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#course"&gt;
  &lt;/a&gt;
  Course
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://egghead.io/lessons/react-introduction-to-the-beginner-s-guide-to-reactjs"&gt;EggheadIO React for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ui.dev/free-react-bootcamp/"&gt;Free React Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnreact"&gt;Learn React for free - Scrima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/react-basic-in-just-1-hour/?LSNPUBID=JVFxdTr9V80&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranMID=39197&amp;amp;ranSiteID=JVFxdTr9V80-p4Roao8.OesVvhckLdQGBA&amp;amp;utm_medium=udemyads&amp;amp;utm_source=aff-campaign"&gt;React basics in 1 hr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/react-tutorial/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-IC2uTX64TKt5E9lwqC47fg&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt; React JS Frontend Web Development for Beginners &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/learning-react-and-redux-decoupling-with-stateless-components/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-FG1Z7z7TrlLvROsK9JIUJw&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;React and Redux MASTERCLASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/front-end-libraries/react/"&gt;FreeCodeCamp React Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-cheatsheets"&gt;
  &lt;/a&gt;
  React cheatsheets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devhints.io/react"&gt;Ultimate React cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-interview-questions"&gt;
  &lt;/a&gt;
  React Interview Questions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/react/interview-questions"&gt;13 Essential React Interview Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sudheerj/reactjs-interview-questions"&gt;List of React interview Questions and Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-styling"&gt;
  &lt;/a&gt;
  React Styling
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/styled-components/styled-components"&gt;styled-components&lt;/a&gt; - Visual primitives for the component age&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/emotion-js/emotion"&gt;emotion&lt;/a&gt; - Library designed for writing CSS styles with JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FormidableLabs/radium"&gt;radium&lt;/a&gt; - Tool for React component styling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-and-typescript"&gt;
  &lt;/a&gt;
  React and TypeScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/react-&amp;amp;-webpack.html"&gt;TypeScript, React and Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/jsx.html"&gt;JSX in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet"&gt;Cheatsheets for experienced React developers getting started with TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactbyexample.github.io/"&gt;React by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-angular"&gt;
  &lt;/a&gt;
  Learn Angular
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#course-videos"&gt;
  &lt;/a&gt;
  Course / Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/angular-for-beginners-course/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-agWnLiSdmEvistlFmFWgmA&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;Angular for beginners Course + Free eBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i9MHigUZKEM"&gt;AngularJS fundamentals in 60mins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Fdf5aTYRW0E"&gt;Anngular crash course by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/want-to-learn-angular-heres-our-free-33-part-course-by-dan-wahlin-fc2ff27ab451/"&gt;33-part course Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/angularjs"&gt;AngularJS on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tutorials-docs-blogs-ebooks"&gt;
  &lt;/a&gt;
  Tutorials / Docs / Blogs / eBooks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/angular/"&gt;W3Schools Angular Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thinkster.io/a-better-way-to-learn-angularjs"&gt;A better way to learn AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgechev.com/"&gt;Minko Gechev Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;üìö&lt;a href="https://www.syncfusion.com/ebooks/angular-succinctly/introduction"&gt;Angular Succinctly&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecraft.tv/courses/"&gt;Angular from theory to courses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cheatsheets"&gt;
  &lt;/a&gt;
  Cheatsheets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/guide/cheatsheet"&gt;Angular CheatSheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-nodejs"&gt;
  &lt;/a&gt;
  Learn NODEJS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webapplog.com/node-js-fundamentals-a-concise-overview-of-the-main-concepts"&gt;Node.js FUNdamentals: A Concise Overview of The Main Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why Node.js&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js"&gt;Why The Hell Would I Use Node.js? A Case-by-Case Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pettergraff.blogspot.com/2013/01/why-node.html"&gt;Why I use Node.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://webapplog.com/php-vs-node-js/"&gt;PHP vs. Node.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/"&gt;Dismantling the Monoliths&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/"&gt;Node.js at PayPal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodejs.org/api/"&gt;Official Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodejs.org/api/modules.html"&gt;Node.js Modules Official Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://howtonode.org/managing-module-dependencies"&gt;Managing module dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://code.tutsplus.com/tutorials/using-nodes-event-module--net-35941"&gt;Using Node's Event Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://openmymind.net/2012/2/3/Node-Require-and-Exports/"&gt;Understanding exports vs. module.exports&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jsz4LDYc6kv3ymONOKxwBU"&gt;Node.js Tutorial&lt;/a&gt; - Node.js Crash Course Tutorial by Net Ninja.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/azat-co/you-dont-know-node"&gt;You Don't Know Node.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/maxogden/art-of-node#readme"&gt;The Art of Node&lt;/a&gt; - Introductory tutorial covering the basics. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodeschool.io"&gt;NodeSchool&lt;/a&gt; - Interactive self guided workshops you can also do on your own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodepatternsbooks.com"&gt;Node Patterns&lt;/a&gt; - Short books about code and networking patterns related to Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://learnnode.com"&gt;Learn Node&lt;/a&gt; - A premium training course to learn to build apps with Node.js, Express, MongoDB.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://thenodeway.io"&gt;The Node Way&lt;/a&gt; - An entire philosophy of Node.js best practices and guiding principles exists for writing maintainable modules, scalable applications, and code that is actually pleasant to read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/express-js-security-tips/"&gt;Express.js Security Tips&lt;/a&gt; - How You Can Save and Secure Your App.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome-nodejs"&gt;Awesome Nodejs&lt;/a&gt; - Delightful Node.js packages and resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;nodebestpractices&lt;/a&gt; - Huge list of best practices for building node apps. Important for big projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#misc-resources"&gt;
  &lt;/a&gt;
  üìñMISC RESOURCESüòâ
&lt;/h2&gt;

&lt;p&gt;(THIS HAS ALL THE RESOURCES OTHER THEN THE ABOVE ONES, Some fundamentals and important)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-a-bit-advanced"&gt;
  &lt;/a&gt;
  JavaScript (A bit advanced)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript30.com/"&gt;30 Days VanillaJS project challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rithmschool.com/courses/advanced-javascript"&gt;Advanced JavaScript Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=4mf_yNLlgic"&gt;Become a JavaScript Console Power-User&lt;/a&gt; - Introduction to the browsers JavaScript console.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=HF1luRD4Qmk"&gt;Debugging The Web&lt;/a&gt; - Learn state of the art in debugging using Chrome dev tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udacity.com/course/javascript-basics--ud804"&gt;Udacity JavaScript Basics&lt;/a&gt; - They also offer more advanced courses.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codeschool.com/learn/javascript"&gt;Code School&lt;/a&gt; - From Basics to Best Practices. Different courses related to JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://reactivex.io/learnrx/"&gt;Functional programming&lt;/a&gt; - Learn basic principles of functional programming in an interactive way by using map, filter, concatAll, reduce and zip.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#monetize-your-work"&gt;
  &lt;/a&gt;
  Monetize Your Work
&lt;/h1&gt;

&lt;p&gt;You can join the amazing website Buy Me A Coffee and get support and also start a membership if you're a content writer.&lt;/p&gt;

&lt;p&gt;Link -&amp;gt; &lt;a href="https://buymeacoff.ee/?via=rahxuls"&gt;BUYMEACOFFEE&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thanks For Seeing this post. &lt;br&gt;&lt;br&gt;
If you didn't liked this post let me know in the comments&lt;br&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building a GIF search Engine in just 10 mins </title>
      <author>Kumar Kalyan </author>
      <pubDate>Wed, 19 Jan 2022 16:10:15 +0000</pubDate>
      <link>https://dev.to/kumarkalyan/building-a-gif-search-engine-in-just-10-mins-lbd</link>
      <guid>https://dev.to/kumarkalyan/building-a-gif-search-engine-in-just-10-mins-lbd</guid>
      <description>&lt;p&gt;Hi everyone in this article I will explain about how you can build your own gif search engine using Html, CSS and JavaScript in just 10 mins and don't worry this is a beginner friendly tutorial. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;HTML, CSS3, JavaScript &lt;/li&gt;
&lt;li&gt;GIF API key &lt;/li&gt;
&lt;li&gt;little knowledge of html events and Ajax will be preferred &lt;/li&gt;
&lt;li&gt;Your time and patience ((The most important)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-html"&gt;
  &lt;/a&gt;
  The Html
&lt;/h2&gt;

&lt;p&gt;Html or &lt;code&gt;Hyper Text Markup Language&lt;/code&gt; which defines the structure of webpage, like headings, paragraphs, line breaks, etc. just like a skeleton in Human body. So, in our gif search engine we also need a structure like a placeholder which will let us know about which type of GIF's user wants to see and a button for submitting the input.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, we need to create a file named &lt;code&gt;index.html&lt;/code&gt; (let me tell you that we will be using internal CSS and JavaScript, i.e. we will have our CSS and JavaScript code within our index.html file using &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script &amp;gt;&lt;/code&gt; tags)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let's add the boiler plate&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;title&amp;gt;GIF Search Engine&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      /*this will contain our styles */
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script&amp;gt;
      /*this will contain our JavaScript code */
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here we have&lt;code&gt;&amp;lt;style &amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;script &amp;gt;&lt;/code&gt; where we will define CSS and JavaScript &lt;/p&gt;

&lt;p&gt;Now let's add some HTML tags to structure our web page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;div class="container"&amp;gt;
      &amp;lt;h1&amp;gt;GIF Search engine&amp;lt;/h1&amp;gt;
      &amp;lt;div class="inputfiled"&amp;gt;
        &amp;lt;input
          type="text"
          class="input userinput"
          placeholder="enter something"
        /&amp;gt;
        &amp;lt;button class="go"&amp;gt;GO !&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;

      &amp;lt;div class="output"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add these in the body tag &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxZ92xKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reaj1c9g74iwtqiq1tqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxZ92xKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reaj1c9g74iwtqiq1tqs.png" alt="html" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see that our structure is ready now let's add some styles to it &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  the CSS
&lt;/h2&gt;

&lt;p&gt;CSS will bring styles to our webpage, just like adding taste to food&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .container {
        text-align: center;
        font-family: sans-serif;
      }
      .input {
        width: 50%;
        padding: 15px;
        margin: 2px;
        font-size: 16px;
        color: blueviolet;
        font-weight: 300;
        border: 2px solid rgb(233, 173, 173);
      }
      button {
        width: 10%;
        padding: 15px;
        margin: 2px;
        color: white;
        background-color: purple;
        border: 2px solid purple;
        cursor: pointer;
      }
      img {
        margin: 3px;
      }
      .inputfiled {
        padding: 20px;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add these within the &lt;code&gt;style&lt;/code&gt; tag &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIz-Tceu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv75m0w7ww1ps3v95ko9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIz-Tceu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv75m0w7ww1ps3v95ko9.png" alt="added styles" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-javascript"&gt;
  &lt;/a&gt;
  the JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript brings dynamicity to a web page, like you may set some instructions on clicking a button or every time when the user requests for a new category of GIF we need to return a new output or as we are using the GIF API JavaScript will help us to get data form the GIF server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#todos"&gt;
  &lt;/a&gt;
  todos
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Grab the input form the user &lt;/li&gt;
&lt;li&gt;Get data using the GIF API &lt;/li&gt;
&lt;li&gt;Display the data to the user &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;now let's add JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; /*this will contain our JavaScript code */
      /*Grab the input from teh user */
      var input = document.querySelector("input");
      document.querySelector("input").addEventListener("keyup", (e) =&amp;gt; {
        /*only works when Enter key is clicked */
        clearOutput();
        if (e.which === 13) {
          getData(input.value);
        }
      });
      document.querySelector("button").addEventListener("click", (e) =&amp;gt; {
        clearOutput();
        getData(input.value);
      });
      /*Get data from the API*/
      function getData(input) {
        var API_KEY = "Your api key ";
        var url =
          "https://api.giphy.com/v1/gifs/search?api_key=" +
          API_KEY +
          "&amp;amp;q=" +
          input +
          "&amp;amp;limit=25&amp;amp;offset=0&amp;amp;rating=g&amp;amp;lang=en"; /*this will only return maximum  25 gifs at a time*/
        fetch(url)
          .then((response) =&amp;gt; response.json())
          .then((data) =&amp;gt; showData(data.data))
          .catch((e) =&amp;gt; {
            console.log(e);
          });
      }
      /*Display the output*/
      function showData(data) {
        data.forEach((element) =&amp;gt; {
          var src = element.images.fixed_height.url;
          var output = document.querySelector(".output");
          output.innerHTML += "&amp;lt;img src=" + src + " &amp;gt;";
        });
      }
      /*clearing the ouptut*/
      function clearOutput() {
        var output = document.querySelector(".output");
        output.innerHTML = "";
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see that I have added two event listeners to grab the input form the user and then I am passing the input to the &lt;code&gt;getData()&lt;/code&gt;so that using the input we can fetch or bring required data from the GIF server &lt;code&gt;the fetch() APIO returns a promise and we are resolving  it via then() and catch ()&lt;/code&gt; Now as we got the data form the API now I am passing it to &lt;code&gt;showData()&lt;/code&gt; where I am looping through an array named data and then extracting the &lt;code&gt;image url&lt;/code&gt; from an element and storing it to an variable named &lt;code&gt;src&lt;/code&gt;and at the end we are just dynamically adding an image tag to the output  &lt;code&gt;div&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now you must be thinking about the &lt;code&gt;clearOutput()&lt;/code&gt;. let me tell you if  you enter "dog" in the input then you will get maximum 25 dog GIF images so basically we are adding &lt;code&gt;img&lt;/code&gt; tags , now when you again enter another input like "cat " we need to clear everything from our output div or else the &lt;code&gt;"cat"&lt;/code&gt; GIF's will be concatenated with the &lt;code&gt;dog&lt;/code&gt; GIF's &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1RCdHdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bexv73lc7hixk56e6p6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1RCdHdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bexv73lc7hixk56e6p6w.png" alt="gif serarch engine " width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-it-together"&gt;
  &lt;/a&gt;
  put it together
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;title&amp;gt;GIF Search Engine&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      /*this will contain our styles */
      .container {
        text-align: center;
        font-family: sans-serif;
      }
      .input {
        width: 50%;
        padding: 15px;
        margin: 2px;
        font-size: 16px;
        color: blueviolet;
        font-weight: 300;
        border: 2px solid rgb(233, 173, 173);
      }
      button {
        width: 10%;
        padding: 15px;
        margin: 2px;
        color: white;
        background-color: purple;
        border: 2px solid purple;
        cursor: pointer;
      }
      img {
        margin: 3px;
      }
      .inputfiled {
        padding: 20px;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
      &amp;lt;h1&amp;gt;GIF Search engine&amp;lt;/h1&amp;gt;
      &amp;lt;div class="inputfiled"&amp;gt;
        &amp;lt;input
          type="text"
          class="input userinput"
          placeholder="enter something"
        /&amp;gt;
        &amp;lt;button class="go"&amp;gt;GO !&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;

      &amp;lt;div class="output"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
      /*this will contain our JavaScript code */
      /*Grab the input from teh user */
      var input = document.querySelector("input");
      document.querySelector("input").addEventListener("keyup", (e) =&amp;gt; {
        /*only works when Enter key is clicked */
        clearOutput();
        if (e.which === 13) {
          getData(input.value);
        }
      });
      document.querySelector("button").addEventListener("click", (e) =&amp;gt; {
        clearOutput();
        getData(input.value);
      });
      /*Get data from the API*/
      function getData(input) {
        var API_KEY = "your API key";
        var url =
          "https://api.giphy.com/v1/gifs/search?api_key=" +
          API_KEY +
          "&amp;amp;q=" +
          input +
          "&amp;amp;limit=25&amp;amp;offset=0&amp;amp;rating=g&amp;amp;lang=en"; /*this will only return maximum  25 gifs at a time*/
        fetch(url)
          .then((response) =&amp;gt; response.json())
          .then((data) =&amp;gt; showData(data.data))
          .catch((e) =&amp;gt; {
            console.log(e);
          });
      }
      /*Display the output*/
      function showData(data) {
        data.forEach((element) =&amp;gt; {
          let src = element.images.fixed_height.url;
          var output = document.querySelector(".output");
          output.innerHTML += "&amp;lt;img src=" + src + " &amp;gt;";
        });
      }
      /*clearing the ouptut*/
      function clearOutput() {
        var output = document.querySelector(".output");
        output.innerHTML = "";
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h2&gt;

&lt;p&gt;Congrads yo just learned to create a GIF search engine. Feel free to ask me if you have any queries .. Stay happy Stay safe &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect"&gt;
  &lt;/a&gt;
  Connect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kumarkalyan_"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wgrai2sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%40v3/icons/twitter.svg" width="24" height="24"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
