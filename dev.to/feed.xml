<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Highlight text in paragraphs with a simple directive in Angular</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Tue, 01 Jun 2021 04:44:44 +0000</pubDate>
      <link>https://dev.to/angular/highlight-text-in-paragraphs-with-a-simple-directive-in-angular-2da</link>
      <guid>https://dev.to/angular/highlight-text-in-paragraphs-with-a-simple-directive-in-angular-2da</guid>
      <description>&lt;p&gt;How to highlight text in a paragraph with the help of directives in Angular. Especially helpful in highlighting text matching the search term. You could have come across this in your browser or IDE when you search for something, the matching items will be highlighted to point you to the exact place of occurrence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-highlighting"&gt;
  &lt;/a&gt;
  Text Highlighting
&lt;/h2&gt;

&lt;p&gt;Here is what we are going to build in this post. A very simple and straightforward highlight directive in Angular. We see something similar in chrome dev tools.&lt;/p&gt;

&lt;p&gt;The idea is pretty simple. We just have to match the searched term and somehow wrap the matched text in a &lt;code&gt;span&lt;/code&gt; or &lt;code&gt;mark&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark"&gt;ref&lt;/a&gt;) tag so that we can style them later according to our needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-highlight-matched-text"&gt;
  &lt;/a&gt;
  How to highlight matched text?
&lt;/h2&gt;

&lt;p&gt;We are going to use &lt;code&gt;Regex&lt;/code&gt; to find matches in our paragraph. Regex makes it very simple to do operations like this on strings. The directive should be ideally added only to elements with text in it.&lt;br&gt;
This is what we are building:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--np4rmiS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwnk0edw49mhfspfn2wu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--np4rmiS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwnk0edw49mhfspfn2wu.png" alt="Highlight text directive"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's plan out our directive.&lt;br&gt;
The main input to the directive is the term that needs to be highlighted. So yeah, we will use &lt;code&gt;@Input()&lt;/code&gt; to pass the term to our directive. I think that is pretty much what we need inside the directive.&lt;/p&gt;

&lt;p&gt;So now we need to get hold of the actual paragraph to search in. So there is an easy way to get the text from an &lt;code&gt;HTMLElement&lt;/code&gt;. We can use the &lt;code&gt;textContent&lt;/code&gt;(&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"&gt;ref&lt;/a&gt;) which should give us the text to search in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-highlight-directive"&gt;
  &lt;/a&gt;
  Building the Highlight directive
&lt;/h2&gt;

&lt;p&gt;As always, I would recommend you create a new module only for the directive. And If you really properly manage your code base, you can consider creating it as a library within the project as well.&lt;/p&gt;

&lt;p&gt;To keep things simple, we put our code in a &lt;code&gt;lib&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;lib/
├── highlight/
│   ├── highlight.module.ts
│   ├── highlight.directive.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#highlight-module"&gt;
  &lt;/a&gt;
  Highlight Module
&lt;/h3&gt;

&lt;p&gt;This module would be simply declaring our directive and exporting it. Nothing much is needed here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CommonModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/common&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HighlightDirective&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./highligh.directive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HighlightDirective&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CommonModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HighlightDirective&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HighlightModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#highlight-directive"&gt;
  &lt;/a&gt;
  Highlight Directive
&lt;/h3&gt;

&lt;p&gt;Now that our setup is complete, we can start creating our directive where all our magic is going to happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;HostBinding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SecurityContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DomSanitizer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SafeHtml&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[highlight]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HighlightDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;caseSensitive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;customClasses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;HostBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;innerHtml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;sanitizer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DomSanitizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchTerm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;caseSensitive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;caseSensitive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;mark class="highlight &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customClasses&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/mark&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sanitzed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sanitizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sanitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;SecurityContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;newText&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sanitzed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's do a code breakdown.&lt;/p&gt;

&lt;p&gt;The first thing that we need is the Inputs in our directive. We only actually need the search term, but I have added some extra functionalities to our directive. We have an option to provide &lt;code&gt;customClasses&lt;/code&gt; for the highlighted text, and another flag &lt;code&gt;caseSensitive&lt;/code&gt; which will decide whether we have to match the case or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;caseSensitive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;customClasses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we add a &lt;code&gt;HostBinding&lt;/code&gt; (&lt;a href="https://angular.io/api/core/HostBinding"&gt;ref&lt;/a&gt;) which can be used to add value to a property on the host element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;HostBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;innerHtml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We bind to the &lt;code&gt;innerHtml&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"&gt;ref&lt;/a&gt;) property of the host element. We can also do it in this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get access to the host element, we inject &lt;code&gt;ElementRef&lt;/code&gt; in the constructor, and also since we are going to be playing around with direct HTML manipulation, I have also injected &lt;code&gt;DomSanitizer&lt;/code&gt; (&lt;a href="https://angular.io/api/platform-browser/DomSanitizer"&gt;ref&lt;/a&gt;) to sanitize the HTML before we inject it into the element.&lt;/p&gt;

&lt;p&gt;So now we move on to the actual logic which we can write in the &lt;code&gt;ngOnChanges&lt;/code&gt; (&lt;a href="https://angular.io/api/core/OnChanges"&gt;ref&lt;/a&gt;) lifecycle hook. So when our search term changes, we can update the highlights. The interesting part is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;caseSensitive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;mark class="highlight &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customClasses&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/mark&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sanitzed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sanitizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sanitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;SecurityContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;newText&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sanitzed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we set up the regex to help us find the matches. based on the &lt;code&gt;caseSensitive&lt;/code&gt; condition we just add different Regex Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;g - search for all matches.&lt;/li&gt;
&lt;li&gt;gi -search for all matches while ignoring case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We just wrap the matches with &lt;code&gt;mark&lt;/code&gt; tag using the &lt;code&gt;replace&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"&gt;ref&lt;/a&gt;) method on the string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;mark class="highlight &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customClasses&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/mark&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that the newText, which is a HTML string needs to be sanitized before we can bind it to the innerHTML. We use the &lt;code&gt;sanitize&lt;/code&gt; (&lt;a href="https://angular.io/api/platform-browser/DomSanitizer#sanitize"&gt;ref&lt;/a&gt;) method on the &lt;code&gt;DomSanitizer&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sanitzed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sanitizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sanitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;SecurityContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;newText&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we just assign the sanitized value to our &lt;code&gt;content&lt;/code&gt; property which gets added to the &lt;code&gt;innerHTML&lt;/code&gt; via &lt;code&gt;HostBinding&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;This is how we can use it in our component. Make sure to import our &lt;code&gt;HighlightModule&lt;/code&gt; to make our directive available for use in the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;[highlight]=&lt;/span&gt;&lt;span class="s"&gt;"searchTerm"&lt;/span&gt; &lt;span class="na"&gt;[caseSensitive]=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;customClasses=&lt;/span&gt;&lt;span class="s"&gt;"my-highlight-class"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Lorem Ipsum has been the industry's standard dummy text ever since the
      1500s, when an unknown printer took a galley of type and scrambled it to
      make a type specimen book.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all! We've successfully created a very simple text highlighter in Angular using directives. As always, please don't directly reuse the code above, try to optimize it and you can always add or remove features to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-and-code"&gt;
  &lt;/a&gt;
  Demo and Code
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/11hii"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;CodeSandbox: &lt;a href="https://codesandbox.io/s/ng-highlight-11hii"&gt;https://codesandbox.io/s/ng-highlight-11hii&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Angular : How to automate angular deployment for AWS S3 Angular Website??</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Tue, 01 Jun 2021 03:31:38 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-automate-angular-deployment-for-aws-s3-angular-website-4g2d</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-automate-angular-deployment-for-aws-s3-angular-website-4g2d</guid>
      <description>&lt;p&gt;If you have hosted your angular app to AWS S3 then you can automate your ng build -prod and drag and drop to S3 bucket by simply following below steps -  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1 - Add &lt;a class="mentioned-user" href="https://dev.to/jefiozie"&gt;@jefiozie&lt;/a&gt;
/ngx-aws-deploy to your project and for this run below command (your angular CLI should be up-to-date)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng add @jefiozie/ngx-aws-deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2 - Provide necessary details to the terminal while step 1 is in progress.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
You will be prompted for a couple of questions:&lt;br&gt;&lt;br&gt;
Your AWS Region&lt;br&gt;&lt;br&gt;
The bucket you would like the files to be uploaded.&lt;br&gt;&lt;br&gt;
The Secret Access Key&lt;br&gt;&lt;br&gt;
The Access key Id&lt;br&gt;&lt;br&gt;
The folder where the files should be uploaded (optional)  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3 - Verify the details you have provided is correct, open angular.json and search for deploy and should be able to see below code&lt;/strong&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@jefiozie/ngx-aws-deploy:deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;region&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR REGION&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bucket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR BUCKET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secretAccessKey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR SECRET ACCESSKEY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accessKeyId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR ACCESS KEY ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get your access key id and secret access key in your AWS console. Region you can see in your S3 url and bucket name you already know but if you can see it in your url.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4 - Run ng deploy command and it will build and deploy your app to S3&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;All Done  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extra Bits-&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
If after following all above steps you run into trouble and get below error -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="nx"&gt;Forbidden&lt;/span&gt;
&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AccessDenied&lt;/span&gt;
&lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Access&lt;/span&gt; &lt;span class="nx"&gt;Denied&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the solution is to specify bucket policy, for this go to S3 and then your bucket and then permission, there you will find bucket policy, just paste below code and click save.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2012-10-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PublicReadGetObject&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Effect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Allow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Principal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s3:GetObject&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arn:aws:s3:::your-bucket-name-here/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code replace the word your-bucket-name-here with your bucket name and click on save.  &lt;/p&gt;

&lt;p&gt;All done, refresh the page and your app will up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 10 Important Full-Stack Web Development Tools in 2021</title>
      <author>Elijah Trillionz</author>
      <pubDate>Tue, 01 Jun 2021 02:26:28 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/the-10-important-full-stack-web-development-tools-in-2021-1d77</link>
      <guid>https://dev.to/elijahtrillionz/the-10-important-full-stack-web-development-tools-in-2021-1d77</guid>
      <description>&lt;p&gt;There is a saying "as a full-stack developer, you need to learn everything" - pirple.&lt;/p&gt;

&lt;p&gt;As it is true for you to learn everything as a full-stack web developer, you also need to be familiar with a lot of tools that will make your job easier and faster.&lt;/p&gt;

&lt;p&gt;Full-Stack web development covers both front-end and back-end web development. So this article spans across front-end and back-end web development tools.&lt;/p&gt;

&lt;p&gt;For each of the tools I outline, I will not fail to tell you what specific part of web development that tool belongs to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#vscode"&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postman"&gt;Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chrome"&gt;Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bootstrap"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vue"&gt;Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#figma"&gt;Figma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#npm"&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sass"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-vscode-text-editor"&gt;
  &lt;/a&gt;
  1. &lt;a&gt;VSCode - Text Editor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIssoTzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/vscode-web-development-tools.png" alt="web development tools - vscode" title="web development tools - vscode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;&lt;strong&gt;VSCode (Visual Studio Code)&lt;/strong&gt;&lt;/a&gt; is a &lt;strong&gt;text editor&lt;/strong&gt; that is used to write and manage code. A text editor falls into both a front-end and back-end tool.&lt;/p&gt;

&lt;p&gt;VSCode is the most popular text editor so far, is the most used text editor according to the &lt;a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments"&gt;2019 Stack Overflow Developer Survey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is most popular because of its unending extensions that just keep getting better. Its UX is no different as it is very customizable.&lt;/p&gt;

&lt;p&gt;VSCode enables &lt;a href="https://code.visualstudio.com/docs/editor/intellisense"&gt;intellisense&lt;/a&gt;. Intellisense provides smart completions, code hints and suggestions, snippets.&lt;/p&gt;

&lt;p&gt;VScode also enables a &lt;a href="https://code.visualstudio.com/docs/editor/debugging"&gt;built-in debugger&lt;/a&gt;, built-in &lt;a href="https://code.visualstudio.com/docs/editor/versioncontrol"&gt;Git management&lt;/a&gt; (Git management is discussed below), &lt;a href="https://code.visualstudio.com/docs/editor/integrated-terminal"&gt;Integrated Terminal&lt;/a&gt; with multiple terminal support.&lt;/p&gt;

&lt;p&gt;Other text editors are &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;, &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;. &lt;a href="https://geekflare.com/code-text-editors/"&gt;Geekflare has an extensive list of the best text editors in 2021&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-github-git-repository-manager"&gt;
  &lt;/a&gt;
  2. &lt;a&gt;GitHub - Git repository manager&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://github.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGmQsR6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/githuboauth.jpg" alt="web development tools - github" title="web development tools - github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; is the most popular and most used &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository manager. It is so because of its numerous features and its accessibilities.&lt;/p&gt;

&lt;p&gt;GitHub is where big companies like Facebook, Google, Twitter, Microsoft, etc host their source codes, build, ship, and maintain their software.&lt;/p&gt;

&lt;p&gt;It was voted as the most used collaboration tool in the &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-collaboration-tools"&gt;2020 Stack Overflow Developer Survery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;GitHub has tools for issue tracking, code review, collaboration, continuous integration, and general code management.&lt;/p&gt;

&lt;p&gt;GitHub is for both front-end and back-end web development.&lt;/p&gt;

&lt;p&gt;As we have said, GitHub is a Git repository manager. And Git is a distributive &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control"&gt;version control system&lt;/a&gt;. A &lt;strong&gt;version control system also called source code management&lt;/strong&gt; is a software utility that manages and tracks changes to your source code.&lt;/p&gt;

&lt;p&gt;Git is the most used version control system. A lot of developers are so used to it that they don't even know that there are others. I didn't know before doing this research.&lt;/p&gt;

&lt;p&gt;Other Git repository managers are &lt;a href="https://about.gitlab.com"&gt;GitLab&lt;/a&gt;, &lt;a href="https://bitbucket.org/product"&gt;BitBucket&lt;/a&gt;. &lt;a href="https://www.cyberciti.biz/open-source/github-alternatives-open-source-seflt-hosted/"&gt;See a list of others&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-postman-api-testing"&gt;
  &lt;/a&gt;
  3. &lt;a&gt;Postman - API Testing&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuQlPJ3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-postman.png" alt="web development tools - postman" title="web development tools - postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;&lt;strong&gt;Postman&lt;/strong&gt;&lt;/a&gt; is an API testing tool used to test if APIs meet expectations.&lt;/p&gt;

&lt;p&gt;Postman is beyond a testing tool, with Postman you can collaborate to build APIs. This really benefits teams who are building an API.&lt;/p&gt;

&lt;p&gt;With tools like this, you do not need to build a front-end interface to test if your APIs are as expected.&lt;/p&gt;

&lt;p&gt;An API testing tool is a back-end tool. &lt;a href="https://nordicapis.com/top-25-api-testing-tools/"&gt;Nordic APIs has a good list with pros and cons of API testing tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some APIs like &lt;a href="https://developers.facebook.com/tools/explorer/"&gt;Facebook API&lt;/a&gt; and &lt;a href="https://webdeverguide.com/api-to-spice-up-your-clients-website"&gt;Spurwing API&lt;/a&gt; that enables testing in their API documentation. That can save you the stress of getting an API testing tool to test their APIs.&lt;/p&gt;

&lt;p&gt;Also, there is some very good API testing tool available as extensions in the VSCode text editor like &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Thunder Client&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-chrome-devtools-browser-devtools"&gt;
  &lt;/a&gt;
  4. &lt;a&gt;Chrome DevTools - Browser DevTools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/docs/devtools/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wb-_zhHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-chrome-devtools.jpg" alt="web development tools - chrome devtools" title="web development tools - chrome devtools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/docs/devtools/"&gt;Chrome DevTools&lt;/a&gt; is a set of web development tools built into the &lt;a href="https://www.google.com/chrome/"&gt;Google Chrome browser&lt;/a&gt;. It is common amongst all other browsers, but the features in that of Chrome are exceptional.&lt;/p&gt;

&lt;p&gt;With these tools, you can&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;View and change the DOM,&lt;/li&gt;
&lt;li&gt;View and change a page's style,&lt;/li&gt;
&lt;li&gt;Debug JavaScript in the console,&lt;/li&gt;
&lt;li&gt;Debug JavaScript with the built-in debugger&lt;/li&gt;
&lt;li&gt;Run and see messages JavaScript in the console,&lt;/li&gt;
&lt;li&gt;Optimize website speed,&lt;/li&gt;
&lt;li&gt;View and change web storage and cookies.&lt;/li&gt;
&lt;li&gt;Inspect network activity,&lt;/li&gt;
&lt;li&gt;Optimize websites for different devices.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other web browsers with the DevTools are &lt;a href="https://developer.mozilla.org/en-US/docs/Tools"&gt;Mozilla Firefox&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/beginners/html"&gt;Edge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Chrome DevTools is a front-end tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-bootstrap-css-frameworks"&gt;
  &lt;/a&gt;
  5. &lt;a&gt;Bootstrap - CSS Frameworks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://getbootstrap.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z56NYEOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-bootsrap.png" alt="web development tools - bootsrap" title="web development tools - bootsrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://geekflare.com/best-css-frameworks/"&gt;&lt;strong&gt;CSS framework&lt;/strong&gt;&lt;/a&gt; is a library that eases and speeds up design with the CSS language.&lt;/p&gt;

&lt;p&gt;Center aligning a div in CSS has being a pain in the ass for many developers and/or designers. But with CSS frameworks you can do that within a split second.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; is one of the most popular CSS frameworks developed by Twitter, Bootstrap has a large community that you can run to for help if there be a need for that.&lt;/p&gt;

&lt;p&gt;One beautiful thing about Bootstrap and other CSS frameworks is that it is easy to learn and to adapt to.&lt;/p&gt;

&lt;p&gt;Other notable CSS frameworks are &lt;a href="https://tailwindcss.com/"&gt;TailWind&lt;/a&gt;, &lt;a href="https://get.foundation/"&gt;Foundation&lt;/a&gt;. &lt;a href="https://geekflare.com/best-css-frameworks/"&gt;Geekflare has an insightful list of CSS frameworks with pros and cons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bootstrap is a front-end tool.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might be interested in &lt;a href="https://webdeverguide.com/20-places-to-learn-programming-for-free"&gt;20+ Places to Learn Programming for Free&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-react-javascript-libraries"&gt;
  &lt;/a&gt;
  6. &lt;a&gt;React - JavaScript Libraries&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ALmxs6FQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-react.png" alt="web development tools - react" title="web development tools - react"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/a&gt; is a popular &lt;a href="https://generalassemb.ly/blog/what-is-a-javascript-library/"&gt;JavaScript library&lt;/a&gt; that is used to build user interfaces (both web and mobile) and single-page applications.&lt;/p&gt;

&lt;p&gt;With React a collection of prewritten code snippets can be used and reused to perform common JavaScript functions.&lt;/p&gt;

&lt;p&gt;Specifically and elaborately, React allows us to create reusable UI components. These components are what make up our website.&lt;/p&gt;

&lt;p&gt;There are maintained supporting packages and libraries that make building complex applications with React possible.&lt;/p&gt;

&lt;p&gt;These packages can be accessed with NPM and/or yarn - discussed in this article.&lt;/p&gt;

&lt;p&gt;Other JavaScript Libraries are &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;, &lt;a href="https://alvarotrigo.com/fullPage/"&gt;fullPageJS&lt;/a&gt;. &lt;a href="https://www.freecodecamp.org/news/10-javascript-libraries-you-should-try/"&gt;Here are others you would find useful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;React is a front-end tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-vuejs-javascript-frameworks"&gt;
  &lt;/a&gt;
  7. &lt;a&gt;Vue.js - JavaScript Frameworks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vuejs.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x7eyrra3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-vuejs.png" alt="web development tools - vuejs" title="web development tools - vuejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/"&gt;&lt;strong&gt;Vue.js&lt;/strong&gt;&lt;/a&gt; is a popular &lt;a href="https://skillcrush.com/blog/what-is-a-javascript-framework/"&gt;JavaScript framework&lt;/a&gt; for building user interfaces (web, mobile and desktop) and single-page applications.&lt;/p&gt;

&lt;p&gt;Vue.js is a very light framework that has a positive impact on your SEO. Altexspot has an outlined pros and cons of VueJS.&lt;/p&gt;

&lt;p&gt;Vue.js may be for one-page applications, but complex applications that will require routing, state management, and building tooling are offered through officially maintained supporting libraries and packages.&lt;/p&gt;

&lt;p&gt;Other frameworks are &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;. You can find a list of some others &lt;a href="https://hackr.io/blog/best-javascript-frameworks"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vue.js is a front-end tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-figma-design-tools"&gt;
  &lt;/a&gt;
  8. &lt;a&gt;Figma - Design Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://figma.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVc-H-v8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-figma.jpg" alt="web development tools - figma" title="web development tools - figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; is a design tool that helps with mockups, prototyping, and testing. While Figma may not be the best design tool out there, but it is the best option to start with.&lt;/p&gt;

&lt;p&gt;Apart from personal use, Figma is reliable because of its enabled real-time collaboration. As a team of designers, you can make use of Figma to collaborate and design great things.&lt;/p&gt;

&lt;p&gt;Other design tools that may be best options for personal and professional use are &lt;a href="https://www.adobe.com/products/xd.html"&gt;Adobe XD&lt;/a&gt;, &lt;a href="https://www.invisionapp.com/studio"&gt;InVision Studio&lt;/a&gt;, &lt;a href="https://www.sketch.com/"&gt;Sketch&lt;/a&gt;. &lt;a href="https://www.creativebloq.com/features/best-web-design-tools"&gt;Creativeblog has listed 22 web design tools in this article.&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might be interested in &lt;a href="https://webdeverguide.com/how-to-become-a-web-developer-in-2021"&gt;How to Become a Web Developer in 2021&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-npm-package-managers"&gt;
  &lt;/a&gt;
  9. &lt;a&gt;NPM - Package Managers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://npmjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4cJQETh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/web-development-tools-npm.png" alt="web development tools - npm" title="web development tools - npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://npmjs.com"&gt;NPM&lt;/a&gt; which stands for Node Package Manager is a package manager for JavaScript and NodeJS (a JavaScript run-time environment).&lt;/p&gt;

&lt;p&gt;NodeJs is a JavaScript runtime environment that basically extends JavaScript into a server-side scripting language (&lt;a href="https://en.wikipedia.org/wiki/Server-side_scripting"&gt;https://en.wikipedia.org/wiki/Server-side_scripting&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;With NodeJS, we can execute JavaScript outside of the browser. And with that, we can build awesome servers for our websites using JavaScript.&lt;/p&gt;

&lt;p&gt;NPM is where we can find packages to use for our apps, both front-end, and back-end. These packages can also be installed into our projects via NPM CLI.&lt;/p&gt;

&lt;p&gt;Other package managers for JavaScript and NodeJs are &lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt;, and &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yarn is also a very popular package manager, and developers often find it difficult to decide which to use between NPM and yarn. &lt;a href="https://blog.logrocket.com/javascript-package-managers-compared/"&gt;Logrocket has made a comparison between these two package managers.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-sass-css-preprocessors"&gt;
  &lt;/a&gt;
  10. &lt;a&gt;Sass - CSS PreProcessors&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://sass-lang.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLl_XAlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/web-development-tools-sass.png" alt="web development tools - sass" title="web development tools - sass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With tools like &lt;a href="https://sass-lang.com/"&gt;Sass (Syntactically Awesome Style Sheet)&lt;/a&gt;, CSS has had an increase in its simplicity and readability. Sass is a &lt;a href="https://raygun.com/blog/css-preprocessors-examples/"&gt;CSS preprocessor&lt;/a&gt; which enable us to use logic in CSS.&lt;/p&gt;

&lt;p&gt;CSS preprocessors are programs that add new features in CSS such as variables, nesting, mixins, inheritance selector, functions, and mathematical operations.&lt;/p&gt;

&lt;p&gt;Other CSS Preprocessors are &lt;a href="https://lesscss.org/"&gt;Less&lt;/a&gt; and &lt;a href="https://stylus-lang.com/"&gt;Stylus&lt;/a&gt;. See a comparison &lt;a href="https://raygun.com/blog/css-preprocessors-examples/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sass is a front-end tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;A farmer without his tools is just another man. But a farmer with his tools but has no idea how it works is yet another dumb man. As a developer you are no different, get acquainted with the tools you &lt;strong&gt;NEED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Alright, have a nice time trying these tools out and sticking with the needed ones. Until next time, if you find this article useful and would love to see more of this, you can support me by becoming a &lt;a href="https://www.patreon.com/elijahtrillionz"&gt;Patron&lt;/a&gt;. Or you can &lt;a href="https://www.buymeacoffee.com/dashboard"&gt;buy me a coffee&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>LeetCode 146. LRU Cache (javascript solution)
</title>
      <author>codingpineapple</author>
      <pubDate>Tue, 01 Jun 2021 02:19:46 +0000</pubDate>
      <link>https://dev.to/cod3pineapple/leetcode-146-lru-cache-javascript-solution-5a24</link>
      <guid>https://dev.to/cod3pineapple/leetcode-146-lru-cache-javascript-solution-5a24</guid>
      <description>&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;p&gt;Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.&lt;/p&gt;

&lt;p&gt;Implement the LRUCache class:&lt;/p&gt;

&lt;p&gt;LRUCache(int capacity) Initialize the LRU cache with positive size capacity.&lt;br&gt;
int get(int key) Return the value of the key if the key exists, otherwise return -1.&lt;br&gt;
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LRUCache&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// keys().next().value returns first item's key&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>add phpinsights in your laravel project</title>
      <author>Ariel Mejia</author>
      <pubDate>Tue, 01 Jun 2021 01:51:58 +0000</pubDate>
      <link>https://dev.to/arielmejiadev/add-phpinsights-in-your-laravel-project-269l</link>
      <guid>https://dev.to/arielmejiadev/add-phpinsights-in-your-laravel-project-269l</guid>
      <description>&lt;p&gt;phpinsights is a helpful package to add code quality analysis, it measure the code in four areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code (code reliable, loosely coupled, simple, and clean).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Complexity (check the statements and methods complexity).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Architecture (check the patterns and directories that you add, traits, interfaces, etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Style (check how you follow PSR-4 or PSR-12).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it makes sense right?, lets install it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-it"&gt;
  &lt;/a&gt;
  How to install it
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require nunomaduro/phpinsights --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#publish-config-file"&gt;
  &lt;/a&gt;
  Publish config file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --provider="NunoMaduro\PhpInsights\Application\Adapters\Laravel\InsightsServiceProvider"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execute-phpinsights"&gt;
  &lt;/a&gt;
  Execute PHPinsights
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;insights&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#customize-it"&gt;
  &lt;/a&gt;
  Customize it
&lt;/h3&gt;

&lt;p&gt;On Laravel there are some code standards that could mismatch on how PHPInsights works, so you can edit the config file to adjust to your project/needs/packages etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#here-an-example-of-how-i-use-it-with-a-laravel-project-with-jetstream"&gt;
  &lt;/a&gt;
  Here an example of how I use it with a Laravel project with Jetstream.
&lt;/h4&gt;

&lt;p&gt;You can exclude files by typing the full path name, as an array item.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;config/insights.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="s1"&gt;'exclude'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'app/Actions/Jetstream'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'HandleInertiaRequests.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'_ide_macros.php'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add custom rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="s1"&gt;'add'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nc"&gt;Classes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nc"&gt;ForbiddenFinalClasses&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can even remove rules that does not make sense, you can customize it as you need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="s1"&gt;'remove'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nc"&gt;AlphabeticallySortedUsesSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;DeclareStrictTypesSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;DisallowMixedTypeHintSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ForbiddenDefineFunctions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ForbiddenNormalClasses&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ForbiddenTraits&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ParameterTypeHintSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;PropertyTypeHintSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ReturnTypeHintSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;UselessFunctionDocCommentSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;UnusedParameterSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;LineLengthSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;DocCommentSpacingSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ClassInstantiationSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;NewWithBracesFixer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;NullableTypeForNullDefaultValueSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;DisallowArrayTypeHintSyntaxSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;NoEmptyCommentFixer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;DisallowShortTernaryOperatorSniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;ForbiddenPublicPropertySniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;DisallowEmptySniff&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another cool feature that you can customize is the "level" of qualification to print it as "green", "yellow" for example, you can customize it on &lt;code&gt;requirements&lt;/code&gt; key, but if you comment, all the content it will work as it is designed by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="s1"&gt;'requirements'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="c1"&gt;//        'min-quality' =&amp;gt; 0,&lt;/span&gt;
&lt;span class="c1"&gt;//        'min-complexity' =&amp;gt; 0,&lt;/span&gt;
&lt;span class="c1"&gt;//        'min-architecture' =&amp;gt; 0,&lt;/span&gt;
&lt;span class="c1"&gt;//        'min-style' =&amp;gt; 0,&lt;/span&gt;
&lt;span class="c1"&gt;//        'disable-security-check' =&amp;gt; false,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This are some useful customizations, if you want to run automatically &lt;code&gt;PHPInsights&lt;/code&gt; on every commit or push you can install husky and configure it to run PHPInsights on the husky hooks, is just a cool idea to make your work easier.&lt;/p&gt;

&lt;p&gt;That is all for this post, thanks for reading!&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>this</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Tue, 01 Jun 2021 01:44:42 +0000</pubDate>
      <link>https://dev.to/amritanshu/this-51dn</link>
      <guid>https://dev.to/amritanshu/this-51dn</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
There is a Car class -&amp;gt; Car{this.something}&lt;/li&gt;
&lt;li&gt;
There is 2 objects of Car class -&amp;gt; car1, car2&lt;/li&gt;
&lt;li&gt;
When I access Car with car1 -&amp;gt; 
[this == car1][this.something == car1.something]&lt;/li&gt;
&lt;li&gt;
When I access Car with car2 -&amp;gt; 
[this == car2] [this.something == car2.something]&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>java</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Behaviours em Elixir</title>
      <author>Willian Frantz</author>
      <pubDate>Tue, 01 Jun 2021 01:42:39 +0000</pubDate>
      <link>https://dev.to/wlsf/behaviours-em-elixir-25i3</link>
      <guid>https://dev.to/wlsf/behaviours-em-elixir-25i3</guid>
      <description>&lt;p&gt;Assim como &lt;code&gt;Protocols&lt;/code&gt;, &lt;code&gt;Behaviours&lt;/code&gt; também são uma forma de manter um padrão de &lt;em&gt;interface/herança&lt;/em&gt; e até mesmo &lt;em&gt;polimorfismo&lt;/em&gt; no &lt;strong&gt;Elixir&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Vale lembrar que Elixir é uma linguagem de programação funcional, portanto, não é o nosso forte o conceito de objeto, classe e métodos. No final, sempre estaremos falando sobre &lt;strong&gt;módulos&lt;/strong&gt; e &lt;strong&gt;funções&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Então de que me serve possuir uma &lt;em&gt;abstração&lt;/em&gt; para criar interfaces em uma tecnologia como esta?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cen%C3%A1rio"&gt;
  &lt;/a&gt;
  Cenário
&lt;/h1&gt;

&lt;p&gt;Imaginem que vamos desenvolver uma aplicação onde a pessoa insere seus dados para consultar todos seus cartões de crédito, verificar se as faturas estão em dia, e inclusive gerar possíveis estratégias financeiras, etc...&lt;/p&gt;

&lt;p&gt;Para isso precisamos criar uma &lt;em&gt;API REST&lt;/em&gt; que irá consultar de diversas fontes de cartões para validar os dados e processar as respostas finais.&lt;/p&gt;

&lt;p&gt;Você consegue identificar um padrão nisso? Se precisamos consultar mais de uma API externa para reunir os dados para a resposta final, isso significa que nosso código terá muitos módulos que serão correspondentes a provedores diferentes (ex: Itaú, Nubank, etc...)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problema"&gt;
  &lt;/a&gt;
  Problema
&lt;/h1&gt;

&lt;p&gt;Como iremos mapear todos esses módulos de provedores que vamos criar dentro do nosso sistema então? Como garantir que eles precisam ter uma execução semelhante, retornando os dados processados da mesma forma? &lt;/p&gt;

&lt;p&gt;Tendo em vista que as APIs externas podem ser distintas, possuir dados diferentes e respostas diferentes, isso pode se tornar um problema e pode nos levar a criar códigos aleatórios para solucionar cada tipo de API de uma forma desnecessária.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#behaviours"&gt;
  &lt;/a&gt;
  Behaviours
&lt;/h1&gt;

&lt;p&gt;Com &lt;strong&gt;behaviours&lt;/strong&gt; conseguimos criar um padrão comportamental, definindo uma assinatura pré-exigida pelo módulo, garantindo que todos os módulos subsequentes que irão herdar daquela especialidade precisarão implementar aqueles requisitos.&lt;/p&gt;

&lt;p&gt;Em outras palavras, considere sendo essa a nossa interface de acesso à APIs externas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;API&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@moduledoc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Este módulo é responsável por definir uma interface 
  padrão para os demais módulos de acesso ao 
  Banco implementarem.
  """&lt;/span&gt;

  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;

  &lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Este método irá acessar a base externa e
  retornar os dados bancários da pessoa usuária
  """&lt;/span&gt;
  &lt;span class="nv"&gt;@callback&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ignorando os &lt;em&gt;moduledocs&lt;/em&gt; e &lt;em&gt;typespecs&lt;/em&gt; do nosso módulo, nos resta essa &lt;code&gt;@callback&lt;/code&gt;, que é exatamente o comando utilizado para definir as funções que deverão ser implementadas pelo módulo que pretende se especializar nessa API.&lt;/p&gt;

&lt;p&gt;Perceba o quão genérico nossa interface ficou, ela só da a entender que é uma API de Banco, com uma função de chamada. Em momento algum foi especificado qual o tipo de banco, ou como essa chamada será feita (via: API, gRPC, SOAP, etc...), isso será total responsabilidade de quem for implementar essa interface.&lt;/p&gt;

&lt;p&gt;Agora com nosso &lt;strong&gt;behaviour&lt;/strong&gt; bem definido, podemos seguir para a implementação do primeiro Client que iremos utilizar em nossa aplicação para consultar os dados:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Nubank&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@moduledoc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Módulo que implementa a requisição para a API do Nubank.
  """&lt;/span&gt;

  &lt;span class="nv"&gt;@behaviour&lt;/span&gt; &lt;span class="no"&gt;Bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;API&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;user_id:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nubank_url&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;HTTPoison&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;status_code:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;nubank_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="no"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:my_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:nubank&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="ss"&gt;:url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"/user/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(a requisição acima é meramente ilustrativa 😅)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;@behaviour Bank.API&lt;/code&gt; descreve que nosso módulo &lt;code&gt;Nubank&lt;/code&gt; irá se especializar no &lt;code&gt;Bank.API&lt;/code&gt;, logo, ele deverá implementar a seguinte função: &lt;code&gt;call/1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Com isto, temos nosso primeiro provedor implementado, yaay 🚀!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h1&gt;

&lt;p&gt;Gosto de dizer que estamos definindo padrões comportamentais, com isso, quando vemos que um módulo específico implementa um &lt;strong&gt;Behaviour&lt;/strong&gt;, já dá para ter uma ideia de quais funções ele roda, qual o seu propósito, como ele deve ser implementado em termos de &lt;em&gt;input&lt;/em&gt; e &lt;em&gt;output&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esse tipo de padronização ajuda a escalar nosso código, diminuir a curva de aprendizagem para novas pessoas desenvolvedoras e inclusive é uma ótima ferramenta para auto-documentar nosso código, deixa tudo mais descritivo e explícito!&lt;/p&gt;

&lt;p&gt;E você, o que acha de &lt;strong&gt;behaviours&lt;/strong&gt;? Gostaria de complementar, adicionar ou remover alguma informações deste tópico? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4pTjOu0NsrLApt0Q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4pTjOu0NsrLApt0Q/giphy.gif" alt="that's all"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Adding custom Docker containers to Appwrite</title>
      <author>Alex Weininger</author>
      <pubDate>Tue, 01 Jun 2021 01:24:40 +0000</pubDate>
      <link>https://dev.to/streamlux/adding-custom-docker-containers-to-appwrite-2chp</link>
      <guid>https://dev.to/streamlux/adding-custom-docker-containers-to-appwrite-2chp</guid>
      <description>&lt;p&gt;In my second post to dev.to, I'll describe how you can add your very own Docker containers to Appwrite!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;While exploring different backend infrastructure options at &lt;a href="https://streamlux.com"&gt;Streamlux&lt;/a&gt;, we decided it would be best to add our own containers to the Appwrite Traefik network. This way we could host completely custom web servers on the same machine as Appwrite. Allowing for extremely low latency between the server and Appwrite, and allowing us to have 100% flexibility in terms of API.&lt;/p&gt;

&lt;p&gt;If you haven't heard of Appwrite, taken from &lt;a href="https://appwrite.io"&gt;Appwrite.io&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is a self-hosted solution that provides developers with a set of easy-to-use and integrate REST APIs to manage their core backend needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From one developer to another, check it out, it's awesome!&lt;/p&gt;

&lt;p&gt;Now let's get back to the task at hand. Adding custom Docker containers to Appwrite is relatively straight forward. However, if you're new to Docker or Traefik it can be a bit daunting.&lt;/p&gt;

&lt;p&gt;The majority of the changes we have to make will be to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file located in the folder where Appwrite has been installed. For me it was in a folder named &lt;code&gt;appwrite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I'll go into a little more detail on the changes we will be making to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, but feel free to skip the background section and get right into the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file handles the startup of all the Docker containers Appwrite consists of. Appwrite uses Traefik as a reverse proxy to route incoming network requests to the correct containers.&lt;/p&gt;

&lt;p&gt;When adding our own container, we usually want to be able to handle incoming network requests. To tell Traefik we want requests that are pointed to a specific endpoint like &lt;code&gt;www.mydomain.com/customApi&lt;/code&gt; to be routed to our container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes"&gt;
  &lt;/a&gt;
  Changes
&lt;/h2&gt;

&lt;p&gt;The first change will be at the very top of your &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;providers.docker.exposedByDefault&lt;/code&gt; from &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;traefik&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik:2.3&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appwrite-traefik&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.file.directory=/storage/config&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.file.watch=true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.docker=true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.docker.exposedByDefault=true&lt;/span&gt; &lt;span class="c1"&gt;# default is false, change it to true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, your appwrite service labels section needs to be updated to include:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.enable=true"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.constraint-label-stack=appwrite"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.docker.network=appwrite"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.services.appwrite-service.loadbalancer.server.port=80"&lt;/span&gt;
&lt;span class="c1"&gt;# http&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.entrypoints=web&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.rule=PathPrefix(`/`)&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.service=appwrite-service&lt;/span&gt;
&lt;span class="c1"&gt;# https&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.entrypoints=websecure&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.rule=PathPrefix(`/`)&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.service=appwrite-service&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.tls=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the appwrite service will now look like this (leave everything after the labels section as it is).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;appwrite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appwrite/appwrite:0.8.0&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
    &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.enable=true"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.constraint-label-stack=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.docker.network=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.services.appwrite-service.loadbalancer.server.port=80"&lt;/span&gt;
        &lt;span class="c1"&gt;#http&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.entrypoints=web&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.rule=PathPrefix(`/`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.service=appwrite-service&lt;/span&gt;
        &lt;span class="c1"&gt;# https&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.entrypoints=websecure&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.rule=PathPrefix(`/`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.service=appwrite-service&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.tls=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all the changes we have to make to the appwrite configuration. Now we can add our own service.&lt;/p&gt;

&lt;p&gt;Here is an example Node.js service definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;appwrite-customApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;node:12-alpine"&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.middlewares.portainerpathstrip.stripprefix.prefixes=/customApi/"&lt;/span&gt; &lt;span class="c1"&gt;# requests to this endpoint will be routed to our container &lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.middlewares.portainerpathstrip.stripprefix.forceSlash=false"&lt;/span&gt;

        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.enable=true"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.constraint-label-stack=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.docker.network=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.services.appwrite-customApi-loadbalancer.server.port=8081"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.middlewares=portainerpathstrip"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto = https&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.entrypoints=web&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.rule=PathPrefix(`/customApi`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.service=appwrite-customApi&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.middlewares=portainerpathstrip"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.entrypoints=websecure&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.rule=PathPrefix(`/customApi`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.service=appwrite-customApi&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.tls=true&lt;/span&gt;

    &lt;span class="c1"&gt;# customize the following properties based on your docker container&lt;/span&gt;

    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;node"&lt;/span&gt;
    &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/node/app&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=production&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PORT=8081&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../customApi/:/home/node/app&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;prod"&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be able to copy and paste this, and then change the properties to be able to start your container properly. One thing to note is the port. I have it running on port 8081, so when starting your web server in your container you should start it on port 8081. If you change the port, make sure you change it in all the places it's references in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;After you're done, you can run &lt;code&gt;docker-compose up -d&lt;/code&gt; to restart the docker containers that have had configuration changes. &lt;/p&gt;

&lt;p&gt;You can run &lt;code&gt;docker ps&lt;/code&gt; to view the containers and make sure your new container has started. &lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;docker logs [CONTAINER NAME]&lt;/code&gt; to view the logs from your container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-notes"&gt;
  &lt;/a&gt;
  Finishing notes
&lt;/h2&gt;

&lt;p&gt;I would love to know if you have success adding your own container to the Appwrite Traefik proxy. It would be awesome to compile some example &lt;code&gt;docker-compose.yml&lt;/code&gt; files to make it easier for other users.&lt;/p&gt;

&lt;p&gt;Please reach out to me with any questions you have or things I missed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;First and foremost I have to give credit to Appwrite. And specifically the absolutely amazing Appwrite team. Go check them out and show your support for their awesome work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/appwrite"&gt;Appwrite on Dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io"&gt;Appwrite.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Join the Appwrite discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;VS Code extension&lt;/a&gt; - maintained with ❤️ by the Streamlux team!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#streamlux"&gt;
  &lt;/a&gt;
  Streamlux
&lt;/h2&gt;

&lt;p&gt;And finally, if you found this post helpful, I am posting today on behalf of my company &lt;a href="https://streamlux.com"&gt;Streamlux&lt;/a&gt;. After months of hard work we've recently released a public beta of our desktop app. If you are a Twitch streamer or viewer come check out what we have in store.&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>docker</category>
      <category>backend</category>
    </item>
    <item>
      <title>La propiedad display en CSS</title>
      <author>Lupita Code 🌄</author>
      <pubDate>Tue, 01 Jun 2021 00:56:13 +0000</pubDate>
      <link>https://dev.to/lupitacode/la-propiedad-display-en-css-1b6a</link>
      <guid>https://dev.to/lupitacode/la-propiedad-display-en-css-1b6a</guid>
      <description>&lt;p&gt;¡Hola gente bonita!👋&lt;/p&gt;

&lt;p&gt;En este articulo voy a explicar sobre la propiedad &lt;code&gt;display&lt;/code&gt; y los diferentes valores que esta contiene, antes de empezar es necesario comprender algunos conceptos, como el modelo de caja (box-model) o incluso el &lt;a href="https://dev.to/lupitacode/que-es-el-box-sizing-en-css-2pi9"&gt;box-sizing&lt;/a&gt; ya que considero que estos temas (tal como en la serie Dark 📺) están conectados 😂. Vamos a empezar a repasar algunas cosas importantes.&lt;/p&gt;

&lt;p&gt;Es importante que entiendas que cada elemento HTML en una pagina web es una caja rectangular, esta es la forma en que se representan todos los elementos, no existen elementos triangulares, redondos, poligonales etc. Todos los elementos en HTML por defecto son rectangulares ya que internamente el navegador dibuja un rectángulo.&lt;/p&gt;

&lt;p&gt;Aunque usted visualice en un sitio web algún elemento redondo diseñado en CSS, ese elemento seguirá siendo rectangular y esto es porque como he dicho anteriormente cada elemento del diseño web es una caja, el navegador renderiza cada elemento de la página web como un elemento rectangular y con CSS nosotros definimos las propiedades como el tamaño, el color, los estilos, el margen y mucho más de estos elementos rectangulares.&lt;/p&gt;

&lt;p&gt;Esto puedes comprobarlo con el siguiente ejemplo, con ayuda de la propiedad &lt;code&gt;outline&lt;/code&gt;, podemos ver todos los elementos de la pagina de inicio de Google de forma rectangular y esto lo puedes hacer con cualquier otro sitio web.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
    outline: 1px solid red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD-tIhUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyykfbzrr25abrxbmmio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD-tIhUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyykfbzrr25abrxbmmio.png" alt="Página de inicio de Google."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entonces cada elemento HTML es una caja formada por 4 áreas: &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt; y &lt;code&gt;margin&lt;/code&gt;. Estas áreas se apilan para formar el modelo de caja (box model).&lt;/p&gt;

&lt;p&gt;Cuando se establece una anchura o una altura en un elemento, esto sólo se aplica al área de contenido (content) de la caja, no a la caja completa. El padding y border se añaden a la anchura y la altura para obtener el tamaño total de la caja, si quieres profundizar mas en este tema, te invito a leer mi articulo de &lt;a href="https://dev.to/lupitacode/que-es-el-box-sizing-en-css-2pi9"&gt;box-sizing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#la-propiedad-display"&gt;
  &lt;/a&gt;
  La propiedad Display
&lt;/h2&gt;

&lt;p&gt;De forma natural existen elementos HTML en línea y elementos de bloque, esto quiere decir que muchas etiquetas HTML tienen asignado un estilo CSS por defecto aunque no lo hayas especificado, todos los elementos tienen establecido un valor de la propiedad &lt;code&gt;display&lt;/code&gt; que puede ser &lt;code&gt;inline&lt;/code&gt; o puede ser &lt;code&gt;block&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La documentación de la MDN define la propiedad display de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;La propiedad CSS display especifica si un elemento es tratado como &lt;code&gt;block&lt;/code&gt; o &lt;code&gt;inline&lt;/code&gt; y el diseño usado por sus hijos, como flow layout, grid (Cuadricula) o flex (Flexible). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Formalmente la propiedad display establece los tipos de &lt;strong&gt;visualización interna y externa de un elemento&lt;/strong&gt;. La de tipo externa establece la participación de un elemento en el flujo normal; la tipo interna establece el layout (Diseño) de los hijos.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flujo-normal-normal-flow"&gt;
  &lt;/a&gt;
  Flujo Normal (normal flow)
&lt;/h4&gt;

&lt;p&gt;El flujo normal en HTML es el orden natural en el que los elementos aparecen en pantalla, es decir, los elementos aparecerán colocados tal como estén ordenados en el código HTML solo si no se aplica ningún CSS que cambie la forma en la que se comportan.&lt;/p&gt;

&lt;p&gt;Como ya hemos mencionado anteriormente estos elementos en HTML por defecto son elementos "en línea" o elementos "en bloque".&lt;/p&gt;

&lt;p&gt;Conociendo esto, la documentación de la MDN define el flujo normal de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El flujo normal, o flow Layout, es la forma en que los elementos de bloque y en línea se muestran en una página antes de que se realicen cambios en su diseño.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¿Cómo se comportan los elementos Block e Inline cuando forman parte del flujo normal?&lt;/p&gt;

&lt;p&gt;En el flujo normal, los elementos en línea se muestran en la dirección en línea, es decir, se muestran uno tras otro, comenzando por la izquierda. Los elementos en bloque se muestran uno detrás de otro, es decir, comienzan en la parte superior y se mueven hacia abajo en la página.&lt;/p&gt;

&lt;p&gt;📖 Esto lo podemos comprender cuando leemos un libro, siempre vamos a leer de arriba hacia abajo y de izquierda a derecha.&lt;/p&gt;

&lt;p&gt;La propiedad display aparte de tener los valores anteriores también tiene un valor llamado: &lt;code&gt;inline-block&lt;/code&gt; que junto con los demás nos sirve para definir la colocación de elementos individuales, también tiene otros valores importantes como: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;flex&lt;/code&gt; y &lt;code&gt;grid&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-inline"&gt;
  &lt;/a&gt;
  🍫 display: inline
&lt;/h2&gt;

&lt;p&gt;Los elementos en línea no admiten dimensiones (width, height) pero si admiten margin, padding y border, solo ocupan lo que tengan en su contenido, es decir, aunque quieras declarar un ancho y alto a un elemento de línea no podrá tener efecto ya que estos elementos no aceptan dimensiones, así también lo explica la documentación de la MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los elementos en línea tienen su altura y anchura determinados por su contenido. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si hay varios elementos en línea estarán colocados de izquierda a derecha (uno al lado de otro).&lt;/p&gt;

&lt;p&gt;Por ejemplo, el elemento HTML &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; es un elemento de línea por defecto y no importa cuántas etiquetas &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; haya, siempre aparecerán en línea o, en otras palabras, una inmediatamente después de la otra, produciendo una cadena continua de texto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;span class="inline"&amp;gt;Soy un elemento de linea&amp;lt;/span&amp;gt;
 &amp;lt;span class="inline"&amp;gt;Soy otro elemento de linea&amp;lt;/span&amp;gt;
 &amp;lt;span class="inline"&amp;gt;Soy otro elemento más de linea&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.inline {
    background-color: khaki;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFPV2GP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xr8rpxh6rxk8eb8898.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFPV2GP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xr8rpxh6rxk8eb8898.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si quieres cambiar el tamaño, tienes que tener en cuenta que no podrás hacerlo porque recuerda que los elementos de línea no admiten dimensiones, esto lo puedes cambiar por &lt;code&gt;display: block&lt;/code&gt; o &lt;code&gt;display: inline-block&lt;/code&gt; de esta forma ya podrás cambiar el tamaño de tus elementos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1les-son-los-elementos-de-l%C3%ADnea"&gt;
  &lt;/a&gt;
  🤔 ¿Cuáles son los elementos de línea?
&lt;/h3&gt;

&lt;p&gt;La siguiente es una lista de los elementos en línea de HTML, podemos ver algunos de estos elementos en los cuales colocamos contenido en forma de texto:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;tt&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;abbr&lt;/code&gt;, &lt;code&gt;acronym&lt;/code&gt;, &lt;code&gt;cite&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;dfn&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;kbd&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;samp&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;bdo&lt;/code&gt;, &lt;code&gt;br&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;img&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;sup&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;button&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;😰 ¿Debo aprender de memoria todos los elementos de línea? La respuesta es que no es necesario, simplemente con la practica lograras identificar que elementos son de línea o de bloque. Recuerda que la practica hace al maestro. 🤓 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#display-block"&gt;
  &lt;/a&gt;
  📄 display: block
&lt;/h2&gt;

&lt;p&gt;Un elemento de bloque es un elemento que ocupa el ancho máximo disponible. Tal y como dice la documentación de la MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;De manera predeterminada, el contenido de un elemento de nivel de bloque es el 100% del ancho de su elemento padre y su altura viene determinada por su contenido.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esto nos quiere decir que los elementos de tipo bloque abarcan el 100% del espacio que tengan disponible, es decir, se estiran por todo el ancho de la página.&lt;/p&gt;

&lt;p&gt;Cabe mencionar que estos elementos si admiten dimensiones pero no pueden tener otro elemento a su lado ya que abarcan todo el espacio que tengan disponible por lo tanto estarán colocados de arriba hacia abajo, aunque este comportamiento por defecto puede ser modificado colocando &lt;code&gt;display: inline-block&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cuando hay varios elementos, estos están separados por sus márgenes, como vemos en la siguiente imagen, esto tiene que ver con un tema fundamental llamado: Colapso de márgenes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;p class="block"&amp;gt;Soy un elemento de bloque&amp;lt;/p&amp;gt;
 &amp;lt;p class="block"&amp;gt;Soy otro elemento de bloque&amp;lt;/p&amp;gt;
 &amp;lt;p class="block"&amp;gt;Soy otro elemento más de bloque&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.block {
    background-color: khaki;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--444M8d5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhhg516qhqvtnkitr90c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--444M8d5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhhg516qhqvtnkitr90c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En general, los elementos en bloque también pueden contener elementos en línea y otros elementos en bloque, así que los elementos en bloque crean estructuras "más grandes" que los elementos en línea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1les-son-los-elementos-de-bloque"&gt;
  &lt;/a&gt;
  🤔 ¿Cuáles son los elementos de bloque?
&lt;/h3&gt;

&lt;p&gt;La siguiente es una lista de los elementos en bloque, alguno de ellos los podemos ver como contenedores:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;hgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;...&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Recuerda que no es necesario que memorices cada uno de estos elementos, ya que con la practica lograras identificarlos fácilmente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-inlineblock"&gt;
  &lt;/a&gt;
  ⏸️ display: inline-block
&lt;/h2&gt;

&lt;p&gt;Es una combinación entre los dos tipos de elementos mencionados anteriormente (block e inline), los elementos con el valor &lt;code&gt;inline-block&lt;/code&gt; admiten dimensiones pero todavía son elementos de línea, es decir estarán colocados uno al lado de otro.&lt;/p&gt;

&lt;p&gt;Un dato curioso es que según la documentación oficial de la MDN el elemento HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; es un elemento inline, pero una imagen es como cualquier otro elemento de bloque porque puede contener: &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt; y también puedes modificar su altura y anchura.&lt;/p&gt;

&lt;p&gt;🤯 Para ser precisos una imagen es en realidad un elemento de línea y de bloque al mismo tiempo, en otras palabras: &lt;code&gt;display: inline-block&lt;/code&gt;. ¡Vamos a comprobarlo!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img class="image" src="http://lorempixel.com/200/200/technics/" alt="" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.image {
    width: 300px;
    height: 300px;
    padding: 20px;
    margin: 30px;
    border: 5px solid red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjna0ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpddhnrg3l97psdi2mcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjna0ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpddhnrg3l97psdi2mcp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-none"&gt;
  &lt;/a&gt;
  👻 display: none
&lt;/h2&gt;

&lt;p&gt;Lo que hace el valor &lt;code&gt;none&lt;/code&gt; de la propiedad &lt;code&gt;display&lt;/code&gt; es que oculta un elemento, por lo que no ocupara ningún espacio. El elemento estará oculto y la pagina será desplegada como si el elemento no estuviera allí.&lt;/p&gt;

&lt;p&gt;Este valor se utiliza constantemente cuando en los dispositivos móviles no queremos que haya elementos que tengan que mostrarse al usuario por el espacio que ocupan, pero que en pantallas grandes si tengan que aparecer.&lt;/p&gt;

&lt;p&gt;Hay que tener cuidado con este valor, porque sabemos que si oculta el elemento pero se sigue renderizando, por ejemplo, si en un sitio web al &lt;code&gt;body&lt;/code&gt; le colocáramos la declaración: &lt;code&gt;display: none&lt;/code&gt; no se mostraría nada pero los recursos se seguirían cargando, por lo tanto hay que utilizarlo con cuidado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-flex-y-display-grid"&gt;
  &lt;/a&gt;
  ↕️↔️ display: flex y display: grid
&lt;/h2&gt;

&lt;p&gt;Los últimos valores mas importantes de la propiedad display es &lt;code&gt;grid&lt;/code&gt; y &lt;code&gt;flex&lt;/code&gt;. No voy a profundizar en estos temas porque considero que merecen un articulo propio e incluso un tutorial completo, bien explicado y con muchos ejercicios ya que son temas extensos.&lt;/p&gt;

&lt;p&gt;De manera general podemos decir que el valor &lt;code&gt;flex&lt;/code&gt; se usa para maquetar componentes como por ejemplo, un menú de navegación y &lt;code&gt;grid&lt;/code&gt; se usa para maquetar el layout. Se que estoy generalizando y esto, no es 100% así, porque pueden haber componentes complejos en los que es necesario usar &lt;code&gt;grid&lt;/code&gt; y algunos layouts son simples y otros no, todo depende de lo que estés diseñando.&lt;/p&gt;

&lt;p&gt;De todas maneras comparto una infografía de un gran desarrollador llamado Addy Osmani (Ingeniero en Google Chrome) que se basó en el articulo de Ahmad Shadeed para realizar esta comparación.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4M3CTyd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EaWSLbWUcAESEGu.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBF-1ZJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1053159168197111808/8eipWrau_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "Use Grid for layout, Flexbox for components": &lt;a href="https://t.co/yNDwQFSWdq"&gt;bit.ly/gr-fl&lt;/a&gt; Great tips on how to decide what fits your use-case by &lt;a href="https://twitter.com/shadeed9"&gt;@shadeed9&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:00 AM - 15 Jun 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1272423597550657537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1272423597550657537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1272423597550657537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;No te preocupes, realizare todo un articulo para ver en profundidad flexbox y grid, pero por ahora es necesario que comprendas como funciona la propiedad display.&lt;/p&gt;

&lt;p&gt;Antes de correr, aprende a caminar 🚶‍♀️....🏃‍♀️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  📋 Conclusión
&lt;/h2&gt;

&lt;p&gt;☑️ Todas las etiquetas HTML tienen configuraciones de estilo CSS por defecto, incluso si ninguna es proporcionada por usted.&lt;br&gt;
☑️ Los elementos en HTML usualmente son elementos "en línea" o elementos "en bloque". Pero este comportamiento por defecto puede ser modificado.&lt;br&gt;
☑️ Los elementos en línea no admiten dimensiones (width, height) aunque si admiten margin, padding y border.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursos"&gt;
  &lt;/a&gt;
  🔎Recursos:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout/Normal_Flow"&gt;Flujo normal | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/HTML/Inline_elements"&gt;Elementos en línea | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/HTML/Block-level_elements"&gt;Elementos en bloque | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer🦸🏻‍♀️&lt;br&gt;
Mis redes sociales donde comparto notas de código:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/lupitacode"&gt;▶️Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/lupitacode"&gt;📷Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/lupitacode"&gt;🐦Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/lupitacode"&gt;🔵Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/lupitacode/"&gt;🔲Codepen&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lupitacode.medium.com/"&gt;✍️Medium&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@lupitacode"&gt;🎵Tik Tok&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>spanish</category>
      <category>latam</category>
    </item>
    <item>
      <title>Angular meetup videos from April, 2021</title>
      <author>MeetupFeed</author>
      <pubDate>Tue, 01 Jun 2021 00:08:11 +0000</pubDate>
      <link>https://dev.to/meetupfeedio/angular-meetup-videos-from-april-2021-odl</link>
      <guid>https://dev.to/meetupfeedio/angular-meetup-videos-from-april-2021-odl</guid>
      <description>&lt;p&gt;MeetupFeed is back with a summary of all the exciting Angular meetup videos from April, 2021. Below you’ll find great meetup videos about different aspects of Angular, useful tips and some great tricks as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://meetupfeed.io/talk/systemizing-router-animations"&gt;Systemizing Router Animations | Zack DeRose&lt;/a&gt;&lt;br&gt;
Zack DeRose will be building an ‘animation system’ for an Angular application, where our top-level routes will slide to the right or the left, based on an order configuration property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://meetupfeed.io/talk/ngrx-data-websockets"&gt;NgRx Data and Websockets | Jay Bell&lt;/a&gt;&lt;br&gt;
We will be using NgRx data and websockets to build a real-time app to communicates with a Nestjs backend. By leveraging the NgRx library alongside an NgRx websocket library built by me we will reduce the client side boilerplate to near zero for hooking up and configuring an entity to use websockets as a transport mechanism instead of HTTP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://meetupfeed.io/talk/angular-app-debugging"&gt;Debugging an Angular app | David Müllerchen&lt;/a&gt;&lt;br&gt;
At ngLeipzig, David Müllerchen talked about debugging an Angular app – learn the most important aspects and tricks from him here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://meetupfeed.io/talk/angular-app-debugging"&gt;Token security and ESLint in Angular | Philippe De Ryck &amp;amp; James Henry&lt;/a&gt;&lt;br&gt;
First, Philippe De Ryck talked about Token security in Angular. Here are some of the questions you’re probably asking yourself now, with the answers included. &lt;/p&gt;

&lt;p&gt;Can an Angular application store tokens in localStorage?&lt;/p&gt;

&lt;p&gt;– Yes, of course! LocalStorage is persistent storage, so the token is available to all tabs and windows. It even survives a browser restart.&lt;/p&gt;

&lt;p&gt;– No, absolutely not! LocalStorage is insecure, and an attacker will be able to steal the token.&lt;/p&gt;

&lt;p&gt;Believe it or not, but both answers are correct. As simple as this question is, the answer is far from straightforward.&lt;/p&gt;

&lt;p&gt;In this session, Philippe dives into the security properties of Angular applications. He uncovers why localStorage is insecure and discuss potential alternatives.&lt;/p&gt;

&lt;p&gt;By the end of this session, you will be able to decide where to store tokens in your applications.&lt;/p&gt;

&lt;p&gt;Even better, you’ll be able to argue why your decision is the right one.&lt;/p&gt;

&lt;p&gt;Then, James Henry followed with a presentation, titled Angular and ESLint, together at last&lt;/p&gt;

&lt;p&gt;James Henry is a Microsoft MVP for TypeScript, Consultant Architect for Nrwl, and the creator of typescript-eslint and angular-eslint.&lt;/p&gt;

&lt;p&gt;In this session, James teaches us about the evolution of linting in Angular projects and how we can use Angular and ESLint together today.&lt;/p&gt;

&lt;p&gt;James covers starting a brand new project from scratch, as well as migrating existing projects from TSLint to ESLint and what the future of the Angular CLI’s linting support looks like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://meetupfeed.io/talk/sustainable-angular-architectures"&gt;Sustainable Angular Architectures | Manfred Steyer&lt;/a&gt;&lt;br&gt;
Monorepos allow huge enterprise applications to be subdivided into small and maintainable libraries. This is, however, only one side of the coin: We need to first define criteria for slicing our application into individual parts and we must establish rules for communication between them.&lt;/p&gt;

&lt;p&gt;This webinar looks at a solution provided by Strategic Domain-Driven Design. Using an Angular-based case study, we investigate the idea of the ubiquitous language and the bounded context, sub-domains, and context mapping. Building on this, you will learn how to implement these ideas for Angular using Nx monorepos. We also discuss approaches for reducing coupling between the specific parts of our monorepo and for enforcing your architecture.&lt;/p&gt;

&lt;p&gt;By the end, you will have a technical solution and appropriate methodology to build sustainable Angular solutions.&lt;/p&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>The .NET Stacks #52: 🎂 Happy birthday to us</title>
      <author>Dave Brock</author>
      <pubDate>Mon, 31 May 2021 23:44:41 +0000</pubDate>
      <link>https://dev.to/daveabrock/the-net-stacks-52-happy-birthday-to-us-3ogh</link>
      <guid>https://dev.to/daveabrock/the-net-stacks-52-happy-birthday-to-us-3ogh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgCK2VBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daveabrock.com/content/images/size/w1384/2021/05/dotnet-stacks-birthday.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgCK2VBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daveabrock.com/content/images/size/w1384/2021/05/dotnet-stacks-birthday.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This is a special extended edition of The .NET Stacks, available to the community right away! (The community usually receives the issues a week after email subscribers.) If you like what you read, subscribe at &lt;a href="https://dotnetstacks.com"&gt;dotnetstacks.com&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As if the completely ridiculous banner image didn't tip it off, it's true: today is the 1st birthday of &lt;em&gt;The .NET Stacks&lt;/em&gt;! I'd like to thank &lt;a href="https://www.daveabrock.com/2020/06/13/dev-discussions-isaac-levin/"&gt;our friend Isaac Levin&lt;/a&gt;—our first interview guest—for being such a good sport. If you haven't seen the &lt;a href="https://www.youtube.com/watch?v=EWYYgEkGJfs"&gt;wonderful "Application Development" keynote from Build&lt;/a&gt;, you should (and the picture will all make sense).&lt;/p&gt;

&lt;p&gt;But most of all, I'd like to thank all of you for your support. Honestly, this little project started as a way to keep my mind busy during a pandemic lockdown and I really wasn't sure how things would go. (Looking back &lt;a href="https://www.daveabrock.com/2020/05/24/dotnet-stacks-1/"&gt;at the first issue&lt;/a&gt; ... that was very evident.) I'm thrilled it's been able to have the impact it has, and I'm grateful to all of you for that.&lt;/p&gt;

&lt;p&gt;With all that out of the way, what are we talking about this week? In this extended issue, there's a &lt;em&gt;lot&lt;/em&gt; here:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build 2021 recap&lt;/li&gt;
&lt;li&gt;.NET 6 Preview 4 has arrived&lt;/li&gt;
&lt;li&gt;Visual Studio updates&lt;/li&gt;
&lt;li&gt;System.Console in .NET 7&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#build-2021-recap"&gt;
  &lt;/a&gt;
  Build 2021 recap
&lt;/h2&gt;

&lt;p&gt;Last week, Microsoft rolled out Build 2021. You can check out the 330 sessions &lt;a href="https://mybuild.microsoft.com/sessions"&gt;at the Build website&lt;/a&gt;, and there's a YouTube playlist at the &lt;a href="https://www.youtube.com/watch?v=KQt0v950h6k&amp;amp;list=PLlrxD0HtieHgMGEnTzEEfkADbaG8aAWRp"&gt;Microsoft Developer YouTube channel&lt;/a&gt;. It's no secret that these days Build is heavy on promoting Azure services, but .NET got a lot of love last week, too.&lt;/p&gt;

&lt;p&gt;Your mileage may vary, but my favorite sessions included the &lt;a href="https://www.youtube.com/watch?v=EWYYgEkGJfs&amp;amp;ab_channel=MicrosoftDeveloper"&gt;application development keynote&lt;/a&gt;, a &lt;a href="https://www.youtube.com/watch?v=SMz_QDZYZCw"&gt;.NET "Ask the Experts" session&lt;/a&gt;,  &lt;a href="http://www.youtube.com/watch?v=Ok-csh6FLL0"&gt;increasing productivity with Visual Studio&lt;/a&gt;, &lt;a href="http://www.youtube.com/watch?v=DyKYB76SDx0"&gt;microservices with Dapr&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=2Ky28Et3gy0"&gt;modern app development with .NET&lt;/a&gt;, and a .NET 6 &lt;a href="https://www.youtube.com/watch?v=GJ_PaRNDe9E"&gt;deep-dive session with Scott Hunter&lt;/a&gt;. (Hunter is Microsoft's CSO—the Chief Scott Officer. He also runs .NET.)&lt;/p&gt;

&lt;p&gt;I want to call out a few interesting details from that session: updates on C# 10 and a new Blazor FluentUI component library that's taking shape. (There were other nice updates on .NET MAUI and Minimal APIs that we'll surely address in depth in later issues.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-10-updates"&gt;
  &lt;/a&gt;
  C# 10 updates
&lt;/h3&gt;

&lt;p&gt;In Scott Hunter's talk, Mads Torgersen and Dustin Campbell walked through some updates coming to C# 10. C# 10 looks to be focused on productivity and simplicity features. I want to show off record structs, required object initializers, auto-implemented property improvements, null parameter checking, global usings, and file-scoped namespaces.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#record-structs"&gt;
  &lt;/a&gt;
  Record structs
&lt;/h4&gt;

&lt;p&gt;C# 9 &lt;a href="https://www.daveabrock.com/2020/07/06/c-sharp-9-deep-dive-records/"&gt;brought us records&lt;/a&gt;, which gives you the ability to enforce immutability with the benefits of "value-like" behavior. While the C# 9 records are really just a class under the covers and accessed by reference, the "value-like" behaviors ensure that default equality checking works with your object's data (as opposed to reference equality). A good use case is with DTOs and other objects that benefit from immutability.&lt;/p&gt;

&lt;p&gt;With all reference types, though, passing around a lot of records can create a lot of pressure on the garbage collector. If you couple that with using &lt;code&gt;with&lt;/code&gt; expressions, copying and GC pressure &lt;a href="https://twitter.com/MadsTorgersen/status/1327033065168748545"&gt;can become an issue&lt;/a&gt; if you go crazy with records. Can we use structs with records? With C# 10, you can with the &lt;code&gt;record struct&lt;/code&gt; syntax. It'll behave similarly, with the only key difference being that record structs aren't heap-allocated. This will also work with tuples, expressions, or any other struct types.&lt;/p&gt;

&lt;p&gt;Let's look at some code, shall we? Let's say you have a &lt;code&gt;Person&lt;/code&gt; record in C# 9:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use a record struct, change it to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default &lt;code&gt;record&lt;/code&gt; declaration will still be a reference type. If you want to make that explicit, you can use the new &lt;code&gt;class struct&lt;/code&gt; syntax. They are the same.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#required-object-initializers"&gt;
  &lt;/a&gt;
  Required object initializers
&lt;/h4&gt;

&lt;p&gt;I enjoy the flexibility of object initializers. You can use them to initialize objects however you want: you can initialize just a few properties, in whatever order you want, or none at all! Unfortunately, this flexibility can also bite you in the rear end if you aren't careful.&lt;/p&gt;

&lt;p&gt;With C# 10, you can set fields to be required when performing object initialization, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its early days on this feature, but it might also help to enforce whether types can be instantiated by positional syntax (constructors) or object initialization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#autoimplemented-property-improvements"&gt;
  &lt;/a&gt;
  Auto-implemented property improvements
&lt;/h4&gt;

&lt;p&gt;In the Build talk, Dustin and Mads talked about &lt;em&gt;the cliff&lt;/em&gt;: let's say you want to change one little thing about an auto-implemented property. The next thing you know, you're creating a backing field, adding bodies for your getters and setters, and you're left wondering why it takes so much work to change one little thing.&lt;/p&gt;

&lt;p&gt;With C# 10, you can refer to the auto-generated backing field without all that nonsense. You'll be able to work with a &lt;code&gt;field&lt;/code&gt; keyword in your getters, setters, or even both.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This change provides better encapsulation and fewer lines of boilerplate code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#null-parameter-checks"&gt;
  &lt;/a&gt;
  Null parameter checks
&lt;/h4&gt;

&lt;p&gt;We've seen many nullability improvements over the last few C# releases, but null parameter checking can still be a manual chore—even with null reference types, you have to depend on the caller to do null checks.&lt;/p&gt;

&lt;p&gt;With C# 10, this is taken care of with the &lt;code&gt;!!&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DoAThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;!!)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry, you aren't seeing double—this doesn't mean you're super excited about the &lt;code&gt;text&lt;/code&gt; argument. Personally, I'm not a fan of the &lt;code&gt;!!&lt;/code&gt;—at this rate, the C# team will need to start inventing new characters—but I &lt;em&gt;am&lt;/em&gt; a fan of removing a bunch of this boilerplate nonsense.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#global-usings-and-filebased-namespaces"&gt;
  &lt;/a&gt;
  Global usings and file-based namespaces
&lt;/h4&gt;

&lt;p&gt;Lastly, the team introduced a few enhancements to help simplify your C# codebase.&lt;/p&gt;

&lt;p&gt;With global usings, you can use the &lt;code&gt;global using&lt;/code&gt; keywords to signify usings should be accessible throughout every &lt;em&gt;.cs&lt;/em&gt; file in your project.&lt;/p&gt;

&lt;p&gt;Here's a typical example of using statements you might want to use in your global using file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I wonder if we could use Roslyn analyzers to shake out unused global usings for individual files. Anyway, I think this is a feature I will originally hate, then learn to love. It's nice to see what is being used, but after a while, it's a maintenance headache. This will be nice. (Not to mention ASP.NET Core developers are familiar with a similar approach with Razor files.) In any case, in many files, you might wind up with a global usings file, then individual usings for references that aren't scattered across your projects.&lt;/p&gt;

&lt;p&gt;Lastly, the team introduced file-scoped namespaces. It allows you to go from this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyNamespace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyNamespace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you could use top-level statements to remove namespaces completely—however, there are plenty of reasons why you don't want to abstract away your namespace declarations. In those cases, it's a nice, clean approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-blazor-component-library"&gt;
  &lt;/a&gt;
  New Blazor component library
&lt;/h3&gt;

&lt;p&gt;So here's something interesting that isn't getting a lot of attention: Microsoft is &lt;a href="https://github.com/microsoft/fast-blazor"&gt;working on a component library for Blazor&lt;/a&gt;. Technically, these are wrappers around Microsoft's existing FluentUI Web Components and are &lt;a href="https://www.fast.design/"&gt;built on FAST&lt;/a&gt;. You can fork the repository and browse to the &lt;em&gt;examples&lt;/em&gt; app for a test page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYHln8Z_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daveabrock.com/content/images/2021/05/fast-components.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYHln8Z_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daveabrock.com/content/images/2021/05/fast-components.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is early, but I'd recommend taking a look—while it comes with the Blazor name, these are technically Razor components. This means you use them in other ASP.NET Core web apps, such as Razor Pages and MVC.&lt;/p&gt;

&lt;p&gt;Microsoft customers have been asking for an in-house, free component library for a while—this will fill the need. While Microsoft will eventually introduce this as yet another tool at your disposal, they'll need to be careful here: the .NET community has a rich community of open-source and third-party component libraries (both free and paid), and they'll need to avoid the perception they're trying to replace these options. (To be abundantly clear, they definitely are not.)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#net-6-preview-4-has-arrived"&gt;
  &lt;/a&gt;
  .NET 6 Preview 4 has arrived
&lt;/h2&gt;

&lt;p&gt;Just minutes into Build, Microsoft announced the official release of .NET 6 Preview 4. We've teased a few features in the last month or so, but it's nice to see the official news. Richard Lander &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/"&gt;wrote up the blog post&lt;/a&gt;. As a reminder, .NET 6 will be an LTS release.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-net-hot-reload/"&gt;.NET Hot Reload&lt;/a&gt; is a big .NET 6 feature (as is improving the developer inner loop in general). I've &lt;a href="https://www.telerik.com/blogs/instant-feedback-is-here-introducing-hot-reload-in-dotnet-6"&gt;written about&lt;/a&gt; how you can use it by running &lt;code&gt;dotnet watch&lt;/code&gt; with ASP.NET Core web apps (that is, Blazor, Razor Pages, and MVC). With Preview 4, &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/#tools-hot-reload-with-the-visual-studio-debugger-and-dotnet-cli"&gt;you can also use it&lt;/a&gt; with other project types like WPF, Windows Forms, WinUI, console apps and "other frameworks that are running on top of the CoreCLR runtime." It's now integrated with the Visual Studio debugger as well—to do this, you need to download VS 2019 16.11 Preview 1.&lt;/p&gt;

&lt;p&gt;In Lander's post, we also see much of what we've discussed previously: check out the official details on &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/#system-text-json-support-for-iasyncenumerable"&gt;&lt;code&gt;System.Text.Json&lt;/code&gt; improvements&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/#system-linq-enhancements"&gt;LINQ enhancements&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/#significantly-improved-filestream-performance-on-windows"&gt;FileStream performance improvements on Windows&lt;/a&gt;, and &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/#enhanced-date-time-and-time-zone-support"&gt;new &lt;code&gt;DateOnly&lt;/code&gt; and &lt;code&gt;TimeOnly&lt;/code&gt; structs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What about ASP.NET Core? ASP.NET Core is bringing it in this release—there's &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#introducing-minimal-apis"&gt;Minimal APIs&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#async-streaming"&gt;async streaming&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#http-logging-middleware"&gt;HTTP logging middleware&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#improved-single-page-app-spa-templates"&gt;improved SPA templates&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#blazor-error-boundaries"&gt;Blazor error boundaries&lt;/a&gt;, and ... drum roll ... &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#blazor-webassembly-ahead-of-time-aot-compilation"&gt;Blazor WebAssembly ahead-of-time (AOT) compilation&lt;/a&gt;! You can also start building &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#blazor-webassembly-ahead-of-time-aot-compilation"&gt;.NET MAUI client-side apps with Blazor&lt;/a&gt;. Speaking of MAUI, &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-4/"&gt;there's a separate post outlining its Preview 4 updates&lt;/a&gt;. If you're using Entity Framework, make sure to check out that team's Preview 4 post &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-4-performance-edition/"&gt;to see all the wonderful perf improvements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Preview 4 is a big one. Even with a little under six months to go, we'll only have a few previews to go until the focus turns to bug fixes. .NET 6 is coming along nicely.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#visual-studio-updates"&gt;
  &lt;/a&gt;
  Visual Studio updates
&lt;/h2&gt;

&lt;p&gt;Last week, Microsoft also released &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/"&gt;Visual Studio 2019 v16.10 and v16.11 Preview 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With 16.10, we're seeing some more &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/"&gt;Git workflow improvements&lt;/a&gt;. The initial improvements to Git workflow in Visual Studio 2019 were a little rough, if we're being honest. It's nice to see the Visual Studio team listening to customer feedback and making it better. You can also now &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/"&gt;remove unused references&lt;/a&gt;—a long-adored ReSharper feature. In other news, there's &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/#containers"&gt;improvements to Docker container tooling&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/#containers"&gt;IntelliSense completion improvements&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/#test-explorer-accessibility-improvements"&gt;Test Explorer improvements&lt;/a&gt;, and more. If F# is your jam, Phillip Carter &lt;a href="https://devblogs.microsoft.com/dotnet/f-and-f-tools-update-for-visual-studio-16-10/"&gt;announced some tooling updates for 16.10&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, if you're developing Azure Functions with the isolated worker in .NET 5, Azure Functions PM Anthony Chu has an update for you:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsvCTIeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2VY8IuVoAAZ-60.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOGne-nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/815479197002891264/TyUPsG3r_normal.jpg" alt="Anthony Chu profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Anthony Chu
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @nthonychu
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you're building .NET 5 isolated &lt;a href="https://twitter.com/AzureFunctions"&gt;@AzureFunctions&lt;/a&gt; apps and want to use &lt;a href="https://twitter.com/VisualStudio"&gt;@VisualStudio&lt;/a&gt;, update to VS 2019 v16.10 for full support for templates, local debug, and deployment.&lt;br&gt;&lt;br&gt;We'll be updating our tutorial and docs shortly. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:30 PM - 26 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1397621201191665666" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1397621201191665666" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1397621201191665666" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With 16.11 Preview 1, the big news is supporting &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/#net-hot-reload"&gt;hot reload in Visual Studio&lt;/a&gt;. We're &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/#net-hot-reload"&gt;also seeing .NET MAUI support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the topic of IDEs, JetBrains released its roadmaps for &lt;a href="https://blog.jetbrains.com/dotnet/2021/05/25/resharper-2021-2-roadmap/"&gt;ReSharper 2021.2&lt;/a&gt; and &lt;a href="https://blog.jetbrains.com/dotnet/2021/05/26/rider-2021-2-roadmap/"&gt;Rider 2021.2&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#rethinking-systemconsole-in-net-7"&gt;
  &lt;/a&gt;
  Rethinking System.Console in .NET 7
&lt;/h2&gt;

&lt;p&gt;With .NET 7—yes, .NET 7!—Microsoft is taking a look at redesigning &lt;code&gt;System.Console&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://github.com/dotnet/runtime/issues/52374#issue-877319518"&gt;Adam Sitnik describes it&lt;/a&gt;, the initial design was driven by Windows OS capabilities and APIs. With .NET going cross-platform, it introduced a number of issues since there wasn't a good way to map Windows concepts to Unix. You're encouraged to &lt;a href="https://github.com/dotnet/runtime/issues/52374"&gt;follow the discussion and provide feedback&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We've seen a lot of community innovation in this space. For example, Patrik Svensson's &lt;a href="https://github.com/spectreconsole/spectre.console"&gt;Spectre.Console library&lt;/a&gt; shows us that the developer console experience can be productive &lt;em&gt;and&lt;/em&gt; beautiful. This &lt;a href="https://github.com/dotnet/runtime/issues/52374#issuecomment-834159352"&gt;isn't lost&lt;/a&gt; and I'm interested to see how this work evolves.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#last-week-in-the-net-world"&gt;
  &lt;/a&gt;
  🌎 Last week in the .NET world
&lt;/h2&gt;

&lt;p&gt;Welcome to Build week, where announcements are everywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-top-3"&gt;
  &lt;/a&gt;
  🔥 The Top 3
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft Build 2021 came and went—&lt;a href="https://blogs.microsoft.com/blog/2021/05/24/from-developers-to-inspired-creators/"&gt;Amanda Silver&lt;/a&gt; and &lt;a href="https://blogs.microsoft.com/blog/2021/05/25/microsoft-loves-developers-welcome-to-build-2021/"&gt;Scott Guthrie&lt;/a&gt; welcome you, and Microsoft &lt;a href="https://news.microsoft.com/build-2021-book-of-news/"&gt;provides the Build 2021 Book of News&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Richard Lander &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4"&gt;announces .NET 6 Preview 4&lt;/a&gt;, Dan Roth &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4"&gt;announces ASP.NET Core updates&lt;/a&gt;, Shay Rojansky &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-4-performance-edition"&gt;does the same for EF Core&lt;/a&gt;, and David Ortinau &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-4"&gt;announces .NET MAUI Preview 4&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Khalid Abuhakmeh &lt;a href="https://blog.jetbrains.com/dotnet/2021/05/25/resharper-2021-2-roadmap/"&gt;announces the roadmap for ReSharper 2021.2&lt;/a&gt; and also for &lt;a href="https://blog.jetbrains.com/dotnet/2021/05/26/rider-2021-2-roadmap/"&gt;Rider 2021.2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  📢 Announcements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today"&gt;releases Visual Studio 2019 v16.10 and v16.11 Preview 1&lt;/a&gt;, and Phillip Carter &lt;a href="https://devblogs.microsoft.com/dotnet/f-and-f-tools-update-for-visual-studio-16-10"&gt;announces F# and F# tools updates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dmitry Lyalin &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-net-hot-reload"&gt;introduces the .NET Hot Reload experience for editing code at runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Windows Package Manager &lt;a href="https://devblogs.microsoft.com/commandline/windows-package-manager-1-0"&gt;goes 1.0&lt;/a&gt;, and Kayla Cinnamon &lt;a href="https://devblogs.microsoft.com/commandline/windows-terminal-preview-1-9-release"&gt;releases Windows Terminal Preview 1.9&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Troy Hunt &lt;a href="https://www.troyhunt.com/pwned-passwords-open-source-in-the-dot-net-foundation-and-working-with-the-fbi/"&gt;announces that Have I Been Pwned is part of the .NET Foundation and a partnership with the FBI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sam Basu &lt;a href="https://www.telerik.com/blogs/aloha-from-telerik-ui-for-maui"&gt;announces Telerik UI for MAUI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#community-and-events"&gt;
  &lt;/a&gt;
  📅 Community and events
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;David Ramel &lt;a href="https://visualstudiomagazine.com/articles/2021/05/24/vs-2022-roadmap.aspx"&gt;writes about the Visual Studio 2022 roadmap&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The .NET Docs Show &lt;a href="https://www.youtube.com/watch?v=jLJVMD2GBAA"&gt;talks to Christos Matskas about Microsoft Identity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Wolfgang Hennerbichler &lt;a href="https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/"&gt;writes about how GitHub is adopting OpenTelemetry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Because of Build, no community standups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-development"&gt;
  &lt;/a&gt;
  🌎 Web development
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The Code Maze blog &lt;a href="https://code-maze.com/structured-logging-in-asp-net-core-with-serilog/"&gt;uses Serilog with ASP.NET Core&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cody Merritt Anhorn &lt;a href="https://codyanhorn.tech/blog/blazor/2021/05/21/Blazor-and-SignalR.html"&gt;uses Blazor with SignalR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Matthew Groves &lt;a href="https://blog.couchbase.com/sql-nosql-comparison-aspnet-application/"&gt;compares SQL and NoSQL in ASP.NET&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeremy Likness &lt;a href="https://www.grapecity.com/blogs/10-blazor-features-you-probably-didnt-know"&gt;writes about 10 Blazor features you might not know about&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jay Krishna Reddy &lt;a href="https://www.c-sharpcorner.com/article/odata-in-net-5/"&gt;writes about using OData in .NET 5&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mark Downie &lt;a href="https://www.poppastring.com/blog/disable-floc-in-aspnet"&gt;disables FLoC in ASP.NET&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Joydip Kanjilal &lt;a href="https://auth0.com/blog/implementing-nanoservices-in-aspnet-core/"&gt;implements nanoservices in ASP.NET Core&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Adam Storr &lt;a href="https://adamstorr.azurewebsites.net/blog/simple-example-of-calling-rest-api-with-httpclient-in-net5.0"&gt;calls a REST API with HttpClient in .NET 5.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;David McCarter &lt;a href="https://www.c-sharpcorner.com/article/architecture-processing-data-with-microservices/"&gt;processes data with microservices&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-net-platform"&gt;
  &lt;/a&gt;
  🥅 The .NET platform
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Patrick Smacchia &lt;a href="https://blog.ndepend.com/migrating-delegate-begininvoke-calls-to-net-core-net-5-and-net-6/"&gt;migrates Delegate.BeginInvoke Calls to .NET Core, .NET 5 and .NET 6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Maarten Balliauw &lt;a href="https://blog.maartenballiauw.be/post/2021/05/25/running-a-net-application-as-a-service-on-linux-with-systemd.html"&gt;runs a .NET application as a service on Linux with Systemd&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Steve Gordon &lt;a href="https://www.stevejgordon.co.uk/using-dateonly-and-timeonly-in-dotnet-6"&gt;uses DateOnly and TimeOnly in .NET 6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;David Ramel &lt;a href="https://visualstudiomagazine.com/articles/2021/05/27/build-win-dev.aspx"&gt;provides updates on Project Reunion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Khalid Abuhakmeh &lt;a href="https://khalidabuhakmeh.com/the-difference-between-html-and-url-encode-in-dotnet"&gt;explains the difference between HTML and URL Encode in .NET&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Paula Fahmy &lt;a href="https://dev.to/paulafahmy/asynchronous-c-making-a-simple-cup-of-tea-13i"&gt;begins a series on async C#&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jonathan Allen &lt;a href="https://www.infoq.com/articles/CSharp-Source-Generator"&gt;builds a source generator in C#&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-cloud"&gt;
  &lt;/a&gt;
  ⛅ The cloud
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Daniel Krzyczkowski &lt;a href="https://daniel-krzyczkowski.github.io/Auth0-Actions-With-Azure-Function-App/"&gt;uses Auth0 Actions with Azure Functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Aaron Powell &lt;a href="https://dev.to/azure/leveling-up-static-web-apps-with-the-cli-5g5h"&gt;works with the Azure Static Web Apps CLI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  🔧 Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Andrew Lock &lt;a href="https://andrewlock.net/how-to-stop-visual-studio-from-creating-launchsettings-json/"&gt;stops Visual Studio from creating launchsettings.json&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Steve Smith &lt;a href="https://ardalis.com/vs-code-disable-logging-loading-symbols/"&gt;disables logging loading symbols in VS Code&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#xamarin"&gt;
  &lt;/a&gt;
  📱 Xamarin
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Mark Allibone &lt;a href="https://mallibone.com/post/xamarin-oidc-refresh"&gt;uses the OIDC client in Xamarin Forms to refresh an access token&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sam Basu &lt;a href="https://www.telerik.com/blogs/sands-of-maui-issue-9"&gt;provides his weekly MAUI update&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  🎤 Podcasts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The .NET Rocks podcast &lt;a href="https://www.dotnetrocks.com/default.aspx?ShowNum=1741"&gt;talks to Scott Hunter about Build 2021 announcements&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Adventures in .NET podcast &lt;a href="https://devchat.tv/adventures-in-dotnet/youve-been-blazored-net-070/"&gt;talks to Chris Sainty about Blazor&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Azure DevOps Podcast &lt;a href="http://azuredevopspodcast.clear-measure.com/david-ortinau-on-multi-platform-app-development-using-net-maui-episode-142"&gt;talks to David Ortinau about MAUI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Coding Blocks Podcast &lt;a href="https://www.codingblocks.net/podcast/some-fun-apis/"&gt;talks through some fun APIs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The 6-Figure Developer podcast &lt;a href="https://6figuredev.com/podcast/episode-197-net-data-with-jeremy-likness/"&gt;talks about .NET Data with Jeremy Likness&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  🎥 Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Azure Friday &lt;a href="https://channel9.msdn.com/Shows/Azure-Friday/Azure-Cosmos-DB-update-MongoDB-40-notebooks-and-continuous-backup"&gt;provides an update on Azure Cosmos DB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The On .NET Show &lt;a href="https://channel9.msdn.com/Shows/On-NET/Clustering-in-Orleans"&gt;talks about clustering in Orleans&lt;/a&gt; and also &lt;a href="https://www.youtube.com/watch?v=l3ynBm6X_IM&amp;amp;t=49s"&gt;C# exception filters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;One Dev Question asks: &lt;a href="https://channel9.msdn.com/Blogs/One-Dev-Minute/Who-at-Microsoft-is-using-WinUI--One-Dev-Question"&gt;who at Microsoft is using WinUI?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The Xamarin Show &lt;a href="https://channel9.msdn.com/Shows/XamarinShow/Improving-Accessibility-with-Xamarin-Community-Toolkit"&gt;improves accessibility with the Xamarin Community Toolkit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>azure</category>
    </item>
    <item>
      <title>Start Kubernetes Live Stream: Pods, ReplicaSets, and Deployments </title>
      <author>Peter Jausovec</author>
      <pubDate>Mon, 31 May 2021 22:58:17 +0000</pubDate>
      <link>https://dev.to/peterj/start-kubernetes-live-stream-pods-replicasets-and-deployments-4cgb</link>
      <guid>https://dev.to/peterj/start-kubernetes-live-stream-pods-replicasets-and-deployments-4cgb</guid>
      <description>&lt;p&gt;I did my first YouTube live stream this weekend. I took a couple of days to edit the video - not because there was a lot of edits, but because it takes 8+ hours for YouTube to process the changes :)&lt;/p&gt;

&lt;p&gt;In the first video I am talking about Kubernetes Pods, ReplicaSets, and Deployments.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tsAH_Vv8GOI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here are the topics covered in the video:&lt;/p&gt;

&lt;p&gt;00:00 Introduction&lt;br&gt;
05:22 Container orchestration&lt;br&gt;
08:32 Kubernetes introduction&lt;br&gt;
10:21 Kubernetes architecture&lt;br&gt;
18:37 Kubernetes resources&lt;br&gt;
22:40 Anatomy of a resource&lt;br&gt;
26:56 Labels&lt;br&gt;
27:27 Selectors&lt;br&gt;
29:19 Annotations&lt;br&gt;
31:46 Namespaces&lt;br&gt;
34:53 Pods&lt;br&gt;
47:17 Creating a cluster in GCP&lt;br&gt;
01:02:04 Pods Demo&lt;br&gt;
01:09:40 ReplicaSet&lt;br&gt;
01:16:40 ReplicaSet Demo&lt;br&gt;
01:34:14 Deployments&lt;br&gt;
01:37:11 Deployment strategies&lt;br&gt;
01:44:57 Deployments Demo&lt;br&gt;
01:53:50 Deployment strategies Demo&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
