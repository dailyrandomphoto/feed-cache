<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>DISK PARTITIONING</title>
      <author>sravya288</author>
      <pubDate>Sun, 25 Apr 2021 06:27:01 +0000</pubDate>
      <link>https://dev.to/sravya288/disk-partitioning-444g</link>
      <guid>https://dev.to/sravya288/disk-partitioning-444g</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is disk partitioning?&lt;/strong&gt; &lt;strong&gt;Disk partitioning&lt;/strong&gt; is the process of splitting a disk into one or more regions called partitions. A &lt;strong&gt;partition table&lt;/strong&gt; is located in the first sector of a disk and stores information about the size and location of created partitions. In other words, disk partitioning allows for the splitting of one physical drive into smaller, logical drives called volumes. To an operating system, these drives are completely separate, so you can carry out operations on one volume without affecting the others.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1lGOMXDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr0xg7zcogozpca90fys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1lGOMXDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr0xg7zcogozpca90fys.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Why partition a disk?&lt;/strong&gt;&lt;br&gt;
Most users won’t ever encounter the need to partition disks, but disk partitioning can be useful in some cases.&lt;/p&gt;

&lt;p&gt;1.A new hard drive is practically unusable unless it is partitioned to save data.&lt;br&gt;
2.Partitions can be used to organize data according to their type. For instance, you can have one partition that stores all your documents and another that stores all your music files.&lt;br&gt;
3.Windows can easily be reinstalled without affecting the installed programs since the boot files are safely stored in the ​system partition. The system partition is kept separate from the rest of the partitions that store installed applications.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bapq1Kbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vfahv9hgji1rmliivan.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bapq1Kbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vfahv9hgji1rmliivan.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
4.If you want to back up a certain subset of data, the partition it is stored in can be backed up rather than the whole physical drive.&lt;br&gt;
5.Partitions make data recovery convenient and efficient.&lt;/p&gt;

</description>
      <category>diskpartitioning</category>
      <category>operatingsystem</category>
    </item>
    <item>
      <title>10 Simple Navigation Bar Hover Animations</title>
      <author>Kiran Raj R</author>
      <pubDate>Sun, 25 Apr 2021 04:09:34 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/10-simple-navigation-bar-hover-animations-1980</link>
      <guid>https://dev.to/kiranrajvjd/10-simple-navigation-bar-hover-animations-1980</guid>
      <description>&lt;p&gt;One of the main components of a web page is the navigation menu, it help us to quickly navigate to the page we want. Some navigation bar contains many links/menu items which make it a complex element, sometimes it will be difficult to understand in which link we are or which link we clicked to get here. In such a situation a visual indication of our current location in the web page will be a great help, here I list 10 simple beginner level hover effects which can be used to show on which menu item we are pointing to. Or this can be used to show the active menu item. On the code I commented briefly what method I used to get the effect, I don't do much styling, you can use your creative ideas. I just want to show some methods to animate menu elements on hover. All these are simple animation easy for a beginner, please comment the mistakes you found in the code or any new ideas you like to share. Happy Coding.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/LYxqOzJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/mdRvqMY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9HawTiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1Hvny-t9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/312f532e-2252-4e12-88a4-d0425041c3cc.jpeg" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/7-simple-menu-icon-animation-for-beginners-25oa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Simple Menu Icon Animation For Beginners &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 24 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#animation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9HawTiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1Hvny-t9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/312f532e-2252-4e12-88a4-d0425041c3cc.jpeg" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/15-awesome-css-animation-resources-4mhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;15+ Awesome CSS Animation Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>20+ Places to Learn Programming for Free</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sun, 25 Apr 2021 03:56:09 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/20-places-to-learn-programming-for-free-28e8</link>
      <guid>https://dev.to/elijahtrillionz/20-places-to-learn-programming-for-free-28e8</guid>
      <description>&lt;p&gt;Programming is hard, now imagine teaching what is hard. You would need an in-depth understanding to be able to break it down for others to learn it.&lt;/p&gt;

&lt;p&gt;Making a &lt;em&gt;Programming course&lt;/em&gt; takes time, sacrifice. So for you to get a course will require money, of course, to compensate the author of the course for his/her time.&lt;/p&gt;

&lt;p&gt;Times have changed (though programming is still hard), and some persons in the world of programming have decided to teach it for free. Wow! Isn't that generous?.&lt;/p&gt;

&lt;p&gt;So in today's article am going to show you &lt;strong&gt;20+ places you can learn programming for free&lt;/strong&gt;. Am also going to give you a little tip on using any of these platforms. Let's dive in&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-w3schools"&gt;
  &lt;/a&gt;
  #1: W3Schools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://w3schools.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNn1QCvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_w3schools.png" alt="Learn Programming for free" title="Learn Programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.w3schools.com"&gt;&lt;strong&gt;W3Schools&lt;/strong&gt;&lt;/a&gt; is the #1 free tutorial website online. All its tutorials are free and well structured. It is also one of the biggest &lt;em&gt;Web Dev reference tools&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Each tutorial is divided into different topics, and for almost all topics there are exercises to assess yourself. There are also quizzes for almost all tutorials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt; HTML, CSS, JavaScript, SQL, PHP, Python, Web Front-End Frameworks &amp;amp; Libraries etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-freecodecamp"&gt;
  &lt;/a&gt;
  #2: FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://freecodecamp.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnsw5nAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_freecodecamp.png" alt="freecodecamp " title="learn-programming-for-free-freecodecamp "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="//freecodecamp.org"&gt;&lt;strong&gt;FreeCodeCamp&lt;/strong&gt;&lt;/a&gt; is a non-profit organization that will teach you programming for free. FreeCodeCamp has thousands of &lt;strong&gt;useful&lt;/strong&gt; videos, articles, and coding lessons all for free. Simply select your preference, your highness.&lt;/p&gt;

&lt;p&gt;The beautiful thing about these guys is that they engage you with projects at the end of each course. You definitely have to give it a try. // TWEET THIS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses:&lt;/strong&gt; HTML, CSS, JavaScript, ReGex, Object-Oriented Programming, JavaScript Algorithms, and Data Structures, Data Analysis with Python, Machine learning, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-codecademy"&gt;
  &lt;/a&gt;
  #3: Codecademy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://codecademy.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVJ2DCGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_codecademy.png" alt="CodeCademy" title="Learn-programming-for-free-CodeCademy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codecademy.com"&gt;&lt;strong&gt;Codecademy&lt;/strong&gt;&lt;/a&gt; is an online platform where you can &lt;em&gt;learn how to code&lt;/em&gt; in your desired language for free.&lt;/p&gt;

&lt;p&gt;Codecademy has one of the best systems to teach you &lt;em&gt;how to code.&lt;/em&gt; Apart from its website it also has a follow-up app to follow up and revise what you have been learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses&lt;/strong&gt;: HTML, CSS, JavaScript, Web Development, Machine Learning, Python, Java, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-edx"&gt;
  &lt;/a&gt;
  #4 Edx
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://edx.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCq3QRLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_edx.png" alt="learn programming for free: edx" title="learn programming for free: edx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://edx.org"&gt;&lt;strong&gt;Edx&lt;/strong&gt;&lt;/a&gt; is one of the founding platforms of &lt;em&gt;learning programming for free.&lt;/em&gt; It gives you free access to programming courses from more than 160 Universities including the prestigious MIT and Harvard and companies as well.&lt;/p&gt;

&lt;p&gt;You are not abandoned by Edx after you have been given a course, there are all other activities from Edx like practicing with quizzes, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses:&lt;/strong&gt; HTML, CSS, Cloud Development, Python, Data Science, etc&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-khan-academy"&gt;
  &lt;/a&gt;
  #5 Khan Academy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://khanacademy.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY-aTAXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_khanacademy.jpg" alt="khanacademy" title="khanacademy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://khanacadamy.org"&gt;&lt;strong&gt;Khan Acadamy&lt;/strong&gt;&lt;/a&gt; is yet another non-profit organization you can trust to get good courses on programming from. They have a mission to provide free world-class education for anyone, anywhere.&lt;/p&gt;

&lt;p&gt;They are the guys Elon Musk supported with $5 Million U.S Dollars early this year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses&lt;/strong&gt;: HTML, CSS, SQL, JavaScript, Computers and the Internet etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-coursera"&gt;
  &lt;/a&gt;
  #6: Coursera
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://coursera.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2i3kH1as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/coursera-homepage.png" alt="learn programming for free at coursera" title="learn programming for free at coursera"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://coursera.org"&gt;&lt;strong&gt;Coursera&lt;/strong&gt;&lt;/a&gt; is an online learning platform that offers courses from over 200 Universities and companies. Some of which are Google, IBM, Illinois, Stanford, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses&lt;/strong&gt;: Python, HTML, CSS, JavaScript, Java etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-lyndacom"&gt;
  &lt;/a&gt;
  #7: Lynda.com
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://lynda.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRxavtQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_lynda.png" alt="Learn programming for free" title="Learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lynda.com"&gt;&lt;strong&gt;Lynda.com&lt;/strong&gt;&lt;/a&gt; is a LinkedIn learning platform that offers courses in programming. Software Development has over 600 courses, Web Development with over 700 courses, etc.&lt;/p&gt;

&lt;p&gt;Lynda.com is a very popular tool with great resources from a lot of great instructors. Lynda.com may not be free but they do offer a 1-month free trial.&lt;/p&gt;

&lt;p&gt;With a 1 month free trial, you could finish one or two courses or even more. From then on you can decide whether to continue or opt out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses:&lt;/strong&gt; PHP, HTML, CSS, JavaScript, ASP.NET, SQL, VueJs, NodeJs, C# etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-mdn-tutorials"&gt;
  &lt;/a&gt;
  #8: MDN Tutorials
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://developer.mozilla.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ9x--PN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_mdn.png" alt="mdn" title="mdn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org"&gt;&lt;strong&gt;MDN&lt;/strong&gt;&lt;/a&gt; as a lot of developers know is good web documentation and web reference tool. But something that some of them don't know is that they have tutorials too for web development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt; HTML, CSS &amp;amp; JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-udemy"&gt;
  &lt;/a&gt;
  #9: Udemy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://udemy.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gt4VIs73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_udemy.png" alt="Udemy" title="Udemy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://udemy.com"&gt;&lt;strong&gt;Udemy&lt;/strong&gt;&lt;/a&gt; is by far the most popular learning platform for programmers. It is packed full of skilled and experienced instructors all around the globe.&lt;/p&gt;

&lt;p&gt;Most courses in Udemy are paid courses. As a result, it is almost not possible to find a good free course. Nevertheless, you may find. I don't fully attribute it as a free learning platform though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Categories:&lt;/strong&gt; Cyber Security, Ethical Hacking, Web Development, Machine Learning, etc&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-sololearn"&gt;
  &lt;/a&gt;
  #10: SoloLearn
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://sololearn.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTB-O7KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_sololearn.jpg" alt="SoloLearn" title="SoloLearn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sololearn.com"&gt;&lt;strong&gt;SoloLearn&lt;/strong&gt;&lt;/a&gt; is a well-structured, beginner-friendly, project-oriented learning platform to learn to program for free. SoloLearn is also very interactive and competitive due to features like quizzes, code showcase (called code bits in the app).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses:&lt;/strong&gt; HTML, CSS, Python, C++, JavaScript, Java, Front-End Web Frameworks, Machine learning, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-w3resource"&gt;
  &lt;/a&gt;
  #11: W3resource
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://w3resource.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_VObKhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_w3resource.png" alt="w3resource" title="w3resource"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://w3resource.com"&gt;&lt;strong&gt;W3resource&lt;/strong&gt;&lt;/a&gt; is a tutorial website to learn to program for free. One beautiful thing about this website is its exercises for tutorials on the website. Hundreds and Hundreds of tasks with detailed explanations to every solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;: HTML, CSS, JavaScript, PHP, Front-End Web Frameworks, Python, Ruby, NodeJs, ASP.Net, NoSQL Systems etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-real-python"&gt;
  &lt;/a&gt;
  #12: Real Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://realpython.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJNwyErq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_real_python.jpg" alt="real python free tutorials" title="real python free tutorials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want to be a Pythonista, or you want a great community of Pythonistas, give &lt;a href="https://realpython.com"&gt;&lt;strong&gt;Real Python&lt;/strong&gt;&lt;/a&gt; a try. Real Python has tutorials and courses that are for python only.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tutorials are free&lt;/em&gt;, as well as access to their community. But the courses are not. There are also quizzes available to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-tutorialspoint"&gt;
  &lt;/a&gt;
  #13: TutorialsPoint
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://tutorialspoint.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lZBny7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_tutorialspoint.png" alt="TutorialsPoint" title="TutorialsPoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently discovered this site when I was making research on some programming languages syntax. For almost all languages that I searched for, &lt;a href="https://tutorialspoint.com"&gt;&lt;strong&gt;TutorialsPoint&lt;/strong&gt;&lt;/a&gt; always popped up.&lt;/p&gt;

&lt;p&gt;I was like how many languages do these people have in this tiny little website. Long story short, I discovered they had everything.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Machine learning tutorials&lt;/em&gt;, &lt;em&gt;Computer science tutorials&lt;/em&gt;, &lt;em&gt;Web development tutorials&lt;/em&gt;, &lt;em&gt;Programming tutorials&lt;/em&gt; with languages like Python, Java, C++, etc, &lt;em&gt;Mobile App tutorials&lt;/em&gt; with languages like Swift, Kotlin, React Native, &lt;em&gt;Database Tutorials&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;All these tutorials are completely free, only courses from this website are not. Oh, almost forgot to mention, they have a free online IDE and Terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-grasshopper"&gt;
  &lt;/a&gt;
  #14: Grasshopper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://grasshopper.app"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lB9dYf2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_grasshopper.png" alt="Learn programming for free" title="Learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://grasshopper.app"&gt;&lt;strong&gt;Grasshopper&lt;/strong&gt;&lt;/a&gt; is a very interactive learning platform to learn the basics of programming. With it, you can learn concepts that apply to any programming language.&lt;/p&gt;

&lt;p&gt;Concepts like &lt;em&gt;Functions*or *Methods&lt;/em&gt;, &lt;em&gt;Variables&lt;/em&gt;, &lt;em&gt;Loops&lt;/em&gt;, &lt;em&gt;Arrays&lt;/em&gt; etc. These are all applicable to any programming language. So learning with this platform puts you ahead by the time you take a course/tutorial in any programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-programming-hub"&gt;
  &lt;/a&gt;
  #15: Programming Hub
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://programminghub.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBCSepwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/programming-hub.png" alt="Learn programming for free" title="Learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://programminghub.io"&gt;&lt;strong&gt;Programming hub&lt;/strong&gt;&lt;/a&gt; is a simple and interactive platform to learn the basics and more of programming. There are free courses and paid courses on this platform.&lt;/p&gt;

&lt;p&gt;Some &lt;em&gt;free courses&lt;/em&gt; are on HTML, AI, Android development, Machine learning, CSS, Data Science, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-mimo"&gt;
  &lt;/a&gt;
  #16: Mimo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://getmimo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ss-p9Zm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_mimo.png" alt="Learn programming for free" title="Learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getmimo.com"&gt;&lt;strong&gt;Mimo&lt;/strong&gt;&lt;/a&gt; is a fun and easy platform to learn the basics and more programming for free. It is also a very interactive platform that can help you plan out a project to build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-code-avengers"&gt;
  &lt;/a&gt;
  #17: Code Avengers
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://codeacengers.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7xKOPYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_codeavengers.png" alt="Learn Programming for free" title="Learn Programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah, that's the name. On this website, they fight the Thanos and Aliens of programming. Just kidding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeavengers.com"&gt;&lt;strong&gt;Code Avengers&lt;/strong&gt;&lt;/a&gt; is an online digital education service for learning programming essentials for kids.&lt;/p&gt;

&lt;p&gt;If you're a parent and you would want your child to play around coding, code avengers are what you need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses&lt;/strong&gt;: Python, HTML, CSS, JavaScript etc&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-mitcourseware"&gt;
  &lt;/a&gt;
  #18: MITCourseWare
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://ocw.mit.edu"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPj-XG9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_mitopencourseware.jpg" alt="Learn programming for free" title="Learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://ocw.mit.edu"&gt;&lt;strong&gt;MITOPENCOURSEWARE&lt;/strong&gt;&lt;/a&gt; is an MIT platform where they publish some of their courses online free and widely available to everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ocw.mit.edu/search/ocwsearch.htm?q=programming"&gt;Here is a list of their programming courses&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-agupieware"&gt;
  &lt;/a&gt;
  #19: aGupieWare
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://blog.agupieware.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY1FOJw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_agupieware.png" alt="Learn programming for free" title="Learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.agupieware.com"&gt;&lt;strong&gt;aGupieWare&lt;/strong&gt;&lt;/a&gt; is an independent app developer with a blog that contains programming tutorials available to all for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses:&lt;/strong&gt; Python, Swift, Hacking &amp;amp; Security testing, Angular, Linux, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-wibitnet"&gt;
  &lt;/a&gt;
  #20: Wibit.net
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://wibit.net"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qq9ClQEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_wibit_net.png" alt="learn programming for free" title="learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wibit.net"&gt;&lt;strong&gt;Wibit.Net&lt;/strong&gt;&lt;/a&gt; is a video tutorial website offering fun/entertaining programming courses.&lt;/p&gt;

&lt;p&gt;It is a great place to start learning programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courses&lt;/strong&gt;: Objective-C, Java, C#, C++, Object-Oriented Programming, C, Python, Scripting Languages, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-class-central"&gt;
  &lt;/a&gt;
  #21: Class Central
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://classcentral.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIiL_gNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/learn_programming_for_free_class_central.jpg" alt="learn programming for free" title="learn programming for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://classcentral.com"&gt;&lt;strong&gt;Class Central&lt;/strong&gt;&lt;/a&gt; is our list's 21 and 20+. It is an online platform to search for free courses from any platform. Courses from universities like MIT, Havard, Stanford, and 1000 others.&lt;/p&gt;

&lt;p&gt;Not to be confused with Coursera or Edx listed above. While Coursera or Edx gives you a course for free, class central will tell you* Coursera has a free course on this programming language* or topic or subject.&lt;/p&gt;

&lt;p&gt;Simply visit classcentral.com, then search and programming language or subject.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;It's amazing how these platforms teach you programming for free and in a fun and interactive way. Most courses that people pay for are not as good as some courses from the above list.&lt;/p&gt;

&lt;p&gt;But I must advise you to take learning programming seriously while using any of these platforms. You may not want to place a high value on it because it's free, which will make you not take it seriously.&lt;/p&gt;

&lt;p&gt;There you have it. You can join my &lt;a href="http://discord.gg/vrBHsSdnd6"&gt;&lt;strong&gt;Discord Community for programmers for free&lt;/strong&gt;&lt;/a&gt;. Thank you for reading, let me know what you think in the comment section.&lt;/p&gt;

&lt;p&gt;If you found this article useful and helpful, how about a &lt;a href="https://www.buymeacoffee.com/elijahtrillionz"&gt;&lt;strong&gt;Coffee&lt;/strong&gt;&lt;/a&gt; for me.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.buymeacoffee.com/elijahtrillionz"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9p4v01q1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/anothercoffeepls.gif" alt="Buy Elijah a Coffee" title="Buy Elijah a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>JavaScript Execution Context</title>
      <author>Luigi Cruz</author>
      <pubDate>Sun, 25 Apr 2021 03:32:45 +0000</pubDate>
      <link>https://dev.to/luigircruz/javascript-execution-context-38cn</link>
      <guid>https://dev.to/luigircruz/javascript-execution-context-38cn</guid>
      <description>&lt;blockquote&gt;It is important to view knowledge as sort of a semantic tree — make sure you understand the fundamental principles, ie the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on to.
 — &lt;cite&gt;Elon Musk on &lt;a href="https://www.reddit.com/r/IAmA/comments/2rgsan/i_am_elon_musk_ceocto_of_a_rocket_company_ama/cnfre0a/"&gt;reddit&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article we will take a look at the most important concept or the fundamental principle of the JavaScript language, that is the Execution Context. The reason for that is because if you have a good understanding of the JavaScript Execution Context, you'll have a much easier time understanding some more advanced topics like hoisting, scopes, scope chains, and closures.&lt;/p&gt;

&lt;p&gt;Now with that in mind let's dive right into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-execution-context"&gt;
  &lt;/a&gt;
  The Execution Context
&lt;/h2&gt;

&lt;p&gt;Execution context is an abstract concept of an environment where the JavaScript code is executed. You can think of the execution context as a large container that can be used to hold or load things in and process. Within the large container are other smaller containers. Now the question you might ask is, who manages those containers?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-javascript-engine"&gt;
  &lt;/a&gt;
  The JavaScript Engine
&lt;/h2&gt;

&lt;p&gt;The thing that is responsible for managing the JavaScript execution context is the JavaScript Engine. Each browser has its version of the JavaScript engine. Chrome uses &lt;a href="https://v8.dev/"&gt;V8 Engine&lt;/a&gt;, Firefox uses &lt;a href="https://spidermonkey.dev/"&gt;SpiderMonkey&lt;/a&gt;, and Safari uses &lt;a href="https://trac.webkit.org/wiki/JavaScriptCore"&gt;JavaScriptCore&lt;/a&gt;. The first thing the JS engine does is it downloads the JS source code. Once the code is received, it runs into a parser and creates an &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree (AST)&lt;/a&gt; — a tree-like representation of JS code. After that, it then enters into a global execution context by default. And each invocation or calls to a function on the JS code from this point on will result in the creation of a new local execution context. Every execution context has 2 phases which we will take a look at later in this article. The JS engine also manages the memory allocation (heap memory), garbage collection (Orinoco), code conversion to bytecode (V8 Ignition), and optimization to machine code (V8 TurboFan). The JS engine is another topic of its own so we won't cover that in this article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-execution-context"&gt;
  &lt;/a&gt;
  Types of Execution Context
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Global Execution Context (The large container) &lt;/li&gt;
&lt;li&gt;Local/Function Execution Context (The small container)&lt;/li&gt;
&lt;li&gt;Eval Function Execution Context (The small container)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#global-execution-context"&gt;
  &lt;/a&gt;
  Global Execution Context
&lt;/h4&gt;

&lt;p&gt;This is the default execution context that the JS engine enters after it loads and parses the JS code. Once the JS engine is inside the global execution context it will create two properties in the global memory by default, the &lt;code&gt;window&lt;/code&gt; object (in the case of browsers) and the &lt;code&gt;this&lt;/code&gt; object. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;window&lt;/code&gt; object points to or is wired to the &lt;code&gt;global&lt;/code&gt; object — an object that is always created before the JS engine enters the global execution context which has properties and methods such as localStorage, innerWidth, event handlers, etc.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; object (in the global execution context) is an object that points to or is wired to the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;So, what will happen if there are variables and functions declared in the JS code? What it will do is it will scan through all the code and look for every variable and function declarations (variables and functions that are not nested to any other function) and store it in the global memory together with &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt; objects.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Global Memory&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;window&lt;/td&gt;
&lt;td&gt;&amp;lt; ref. to Global Obj. &amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td&gt;&amp;lt; ref. to window Obj. &amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;var_identifier&lt;/td&gt;
&lt;td&gt;var_value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fn_identifier&lt;/td&gt;
&lt;td&gt;&amp;lt; fn Obj. &amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;NOTE: The function object is the snapshot of the whole function stored in the memory.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#localfunction-execution-context"&gt;
  &lt;/a&gt;
  Local/Function Execution Context
&lt;/h4&gt;

&lt;p&gt;Every time a function is called or invoked, a brand new execution context is created for that function. Every function has its local execution context which is created once the JS engine encounters a function call. Inside the local execution context, the JS engine will create an &lt;code&gt;arguments&lt;/code&gt; object and a &lt;code&gt;this&lt;/code&gt; object by default.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;arguments&lt;/code&gt; object contains a key:value pair of parameters expected inside a function. It also contains a default property called &lt;code&gt;length&lt;/code&gt;, that counts the numbers of parameters for that function. The &lt;code&gt;arguments&lt;/code&gt; object defaults to &lt;code&gt;{ length: 0 }&lt;/code&gt; when the function's argument is empty. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; object inside the function execution context varies depending on how the function is called. If it is called by an object reference, then the value of &lt;code&gt;this&lt;/code&gt; is set to that object. Otherwise, the value of &lt;code&gt;this&lt;/code&gt; is set to the &lt;code&gt;window&lt;/code&gt; object or will be of value "undefined" (in strict mode).&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Local Memory&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;arguments&lt;/td&gt;
&lt;td&gt;{ length: 0 }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td&gt;&amp;lt; ref. to window Obj. &amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;var_identifier&lt;/td&gt;
&lt;td&gt;var_value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fn_identifier&lt;/td&gt;
&lt;td&gt;&amp;lt; fn Obj. &amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#eval-function-execution-context"&gt;
  &lt;/a&gt;
  Eval Function Execution Context
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; function is a dangerous function. Whenever the JS engine encounters an &lt;code&gt;eval()&lt;/code&gt; function, an execution context is created and is pushed into the call stack. It accepts a string as a parameter and evaluates it. So if you accidentally passed a malicious code in its argument, or a malicious party exploits this part of your code, then your website could potentially be severely damaged. It is not recommended to use this function as there are better alternatives to it. You can learn more about &lt;code&gt;eval&lt;/code&gt; function &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-js-engine-know-the-currently-running-execution-context"&gt;
  &lt;/a&gt;
  How does the JS engine know the currently running Execution Context?
&lt;/h2&gt;

&lt;p&gt;JavaScript is a single-threaded language which means that it can only run a single task at a time. An example of a task is declaring a variable, assigning a value to a variable, or calling a function. We already know that a function call sets up a local/function execution context. Under the hood when the JS engine encounters a function call its task is to push that execution context into memory and pops it off when the code inside of it is done. That memory is called the &lt;strong&gt;Execution Stack&lt;/strong&gt; also known as the &lt;strong&gt;&lt;em&gt;"Call Stack"&lt;/em&gt;&lt;/strong&gt;. It is an array of execution contexts that uses a LIFO (Last In First Out) data structure. It is used by the JS engine to keep track of execution context by storing each call into the memory. The global execution context is present by default in the call stack and it is at the bottom of the stack. While executing the global execution context code, if the JS engine finds a function call, it creates a local execution context for that function and pushes it to the top of the call stack. The JS engine then executes the function whose execution context is at the top of the call stack. Once all the code of the function is executed, JS engine takes out that function execution context and start’s executing the function which is below it.&lt;/p&gt;

&lt;p&gt;Let us try to understand that with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Initially I am inside the global execution context.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Heyyow!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am inside the first function execution context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am again inside the first function execution context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am inside the second function execution context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am back at the global execution context.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f72VpghM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://luigicruz.dev/static/images/2021/execution-context/call-stack.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f72VpghM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://luigicruz.dev/static/images/2021/execution-context/call-stack.gif" alt="Call stack process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View a PDF copy of the Call stack process &lt;a href="https://luigicruz.dev/static/pdf/call-stack.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the JS engine is done loading and parsing the JS code, it will set up a &lt;code&gt;global()&lt;/code&gt; execution context and pushes it to the call stack. When it sees the function call &lt;code&gt;first()&lt;/code&gt;, it will set up a new function execution context for that function and pushes it to the top of the call stack. When the JS engine encounters the function call &lt;code&gt;second()&lt;/code&gt; inside the first execution context, it will create another execution context for that function and pushes it to the top of the call stack. Once the &lt;strong&gt;&lt;em&gt;second()&lt;/em&gt;&lt;/strong&gt; function finishes, its execution context is popped off from the call stack, and the control is transferred to its parent execution context &lt;strong&gt;&lt;em&gt;first()&lt;/em&gt;&lt;/strong&gt;. When the first execution context is finished, its execution context is removed from the call stack, and the control is transferred to its parent execution context &lt;strong&gt;&lt;em&gt;global()&lt;/em&gt;&lt;/strong&gt;. Once all the code is executed, the JS engine removes the global execution context from the call stack and exits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-happens-inside-an-execution-context"&gt;
  &lt;/a&gt;
  What exactly happens inside an Execution Context?
&lt;/h2&gt;

&lt;p&gt;Now that we already know that the JS engine uses the call stack to keep track of the currently running execution context, let us now understand what exactly is happening inside an execution context.&lt;/p&gt;

&lt;p&gt;The execution context has two phases: 1) the &lt;strong&gt;Creation Phase&lt;/strong&gt; and 2) the &lt;strong&gt;Execution Phase&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creation-phase"&gt;
  &lt;/a&gt;
  Creation Phase
&lt;/h2&gt;

&lt;p&gt;This is the stage that the JS engine enters after the JS code is loaded and has been parsed. Every execution context has a Creation Phase. The creation of an execution context is part of the creation phase. Two &lt;a href="https://tc39.es/ecma262/#table-additional-state-components-for-ecmascript-code-execution-contexts"&gt;state components&lt;/a&gt; are created during the creation phase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lexical Environment&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable Environment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conceptually, the execution context is represented as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;GlobalExecutionContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;LexicalEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;VariableEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;Lexical Environment&lt;/strong&gt; component is a structure that defines the association of identifiers to the values of variables and functions based upon the lexical nesting structure of JS code. This association of identifier to the values of variables and functions is called &lt;code&gt;binding&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Variable Environment&lt;/strong&gt; component is also a &lt;strong&gt;Lexical Environment&lt;/strong&gt; that defines the association of identifiers to the values of variables but not functions.&lt;/p&gt;

&lt;p&gt;The difference between the two is in the variable that the identifier is bounded. The &lt;em&gt;Lexical Environment&lt;/em&gt; is used to store bindings of an identifier to the values of the variables (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;) and functions, while the &lt;em&gt;Variable Environment&lt;/em&gt; is used to store bindings of an identifier to the values of the variable (&lt;code&gt;var&lt;/code&gt;) only.&lt;/p&gt;

&lt;p&gt;I'm confused. What is exactly inside the Lexical Environment?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-record"&gt;
  &lt;/a&gt;
  Environment Record
&lt;/h3&gt;

&lt;p&gt;Each &lt;em&gt;Lexical Environment&lt;/em&gt; has an &lt;a href="https://tc39.es/ecma262/#sec-environment-records"&gt;Environment Record&lt;/a&gt;. The &lt;em&gt;Environment Record&lt;/em&gt; records the identifier bindings that are created within the scope of the lexical environment. Each time a JS code is evaluated (var/func declarations or assignments), a new Environment Record is created to record the identifier bindings that are created by that code. This environment in JavaScript is called the &lt;code&gt;scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Every &lt;strong&gt;Environment Record&lt;/strong&gt; has an &lt;strong&gt;[[OuterEnv]]&lt;/strong&gt; field, which is either &lt;em&gt;null&lt;/em&gt; or a reference to an outer Environment Record. The reason why a child function has access to its parent's scope is because of the outer environment object. For example, when the JS engine sees a variable inside a function, it will try to find the variable's value from the current function's environment record (local memory). If it could not find the variable inside of it, it will look into the outer scope (its parent environment record) up to the global scope until it finds that variable. This lookup process is called the &lt;code&gt;scope chain&lt;/code&gt;. We'll try to take a look at the scope chain and dig deeper in future articles.&lt;/p&gt;

&lt;p&gt;There are three type subclasses inside of the Environment Record:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://tc39.es/ecma262/#sec-declarative-environment-records"&gt;Declarative Environment Record&lt;/a&gt; — As its name suggests stores variables, classes, modules, and/or function declarations. A declarative Environment Record binds the set of identifiers defined by the declarations contained within its scope.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tc39.es/ecma262/#sec-object-environment-records"&gt;Object Environment Record&lt;/a&gt; — This environment record in the global execution context contains the bindings for all built-in globals. This is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;window object&lt;/a&gt; that references the &lt;a href="https://tc39.es/ecma262/#sec-global-object"&gt;global object&lt;/a&gt;. Variables and functions that are of global scope are added to the global execution context's object environment record that is why you can access global variables such as &lt;em&gt;&lt;code&gt;window.localStorage&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code&gt;window.var_name&lt;/code&gt;&lt;/em&gt;. In the local/function execution context the object environment record is composed of the &lt;code&gt;arguments&lt;/code&gt; object and the &lt;code&gt;this&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tc39.es/ecma262/#sec-global-environment-records"&gt;Global Environment Record&lt;/a&gt; — A global Environment Record is logically a single record but it is specified as a composite encapsulating an &lt;strong&gt;&lt;em&gt;object Environment Record&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;declarative Environment Record&lt;/em&gt;&lt;/strong&gt;. It does not have an outer environment; it's &lt;strong&gt;[[OuterEnv]]&lt;/strong&gt; is null. It may be prepopulated with identifier bindings and it includes an associated global object whose properties provide some of the global environment's identifier bindings. As JS code is executed, additional properties may be added to the global object and the initial properties may be modified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let us conceptually visualize the execution context inside the &lt;strong&gt;Creation Phase&lt;/strong&gt;. Take a look at this JS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luigi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; says &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that when I say &lt;strong&gt;&lt;em&gt;conceptually&lt;/em&gt;&lt;/strong&gt;, it means that the pseudocode below is not the concrete representation of the environment the JS engine creates, but only to learn the concept by trying to visualize it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;GlobalExecutionContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;LexicalEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;EnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DeclarativeEnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;uninitialized&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; says &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// Bindings of identifier to variables (`let` and `const`) and identifier to function objects&lt;/span&gt;
      &lt;span class="na"&gt;ObjectEnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Global&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;OuterEnv&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// ref. to parent env. record (null in here since global has no parent execution context)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;VariableEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;EnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DeclarativeEnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// Bindings of identifier to variables (`var`)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to go through each step of what's happening inside the &lt;strong&gt;Creation Phase&lt;/strong&gt; using the code snippet above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The JS engine enters the Creation Phase.&lt;/li&gt;
&lt;li&gt;Creates a global execution context and pushes it into the call stack.&lt;/li&gt;
&lt;li&gt;Create bindings for the &lt;strong&gt;window object&lt;/strong&gt; to the &lt;strong&gt;Global object&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create bindings for the &lt;strong&gt;this object&lt;/strong&gt; to the &lt;strong&gt;window object&lt;/strong&gt;. Note that &lt;strong&gt;this object&lt;/strong&gt; binding will vary depending on how the function is called and on &lt;em&gt;strict mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;global memory&lt;/em&gt; and initializes it with a value of &lt;code&gt;undefined&lt;/code&gt;. This process is called &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;hoisting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;global memory&lt;/em&gt; without initializing it or no initial value set.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;code&gt;broadcast&lt;/code&gt; in the &lt;em&gt;global memory&lt;/em&gt; and store the whole function definition of the broadcast function in it. This function is also hoisted.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, we'll talk about how does the JS code gets executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-phase"&gt;
  &lt;/a&gt;
  Execution Phase
&lt;/h2&gt;

&lt;p&gt;This is the stage that the JS engine enters after all variables and functions are declared and necessary objects have bounded. Every execution context has an Execution Phase. Few things are happening inside this phase, the variable binding initializations, variable assignments, mutability and immutability checking, variable binding deletions, function call execution, etc.&lt;/p&gt;

&lt;p&gt;Let's try to understand that by continuing the steps we wrote from the Creation Phase:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The JS engine enters the Creation Phase.&lt;/li&gt;
&lt;li&gt;Creates a global execution context and pushes it into the call stack.&lt;/li&gt;
&lt;li&gt;Create bindings for the &lt;strong&gt;window object&lt;/strong&gt; to the &lt;strong&gt;Global object&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create bindings for the &lt;strong&gt;this object&lt;/strong&gt; to the &lt;strong&gt;window object&lt;/strong&gt;. Note that &lt;strong&gt;this object&lt;/strong&gt; binding will vary depending on how the function is called and on &lt;em&gt;strict mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;global memory&lt;/em&gt; and initializes it with a value of &lt;code&gt;undefined&lt;/code&gt;. This process is called &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;hoisting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;global memory&lt;/em&gt; without initializing it or no initial value set.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;code&gt;broadcast&lt;/code&gt; in the &lt;em&gt;global memory&lt;/em&gt; and store the whole function definition of the broadcast function in it. This function is also hoisted.&lt;/li&gt;
&lt;li&gt;The JS engine enters the Execution Phase.&lt;/li&gt;
&lt;li&gt;Take the value of variable &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; and bind that value to the identifier inside the memory.&lt;/li&gt;
&lt;li&gt;Take the value of variable &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt; and bind that value to the identifier inside the memory.&lt;/li&gt;
&lt;li&gt;Encounters a console log method, immediately evaluate the arguments inside it.&lt;/li&gt;
&lt;li&gt;Sees a function call named &lt;code&gt;broadcast&lt;/code&gt;, immediately creates a new local execution context for that function, and pushes it into the top of the call stack.&lt;/li&gt;
&lt;li&gt;Enters the Creation Phase of the broadcast function execution context.&lt;/li&gt;
&lt;li&gt;Creates &lt;strong&gt;arguments object&lt;/strong&gt;, in the function's &lt;em&gt;local memory&lt;/em&gt; with an initial value of &lt;code&gt;{ length: 0 }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the passed parameter &lt;strong&gt;&lt;em&gt;message&lt;/em&gt;&lt;/strong&gt; to the first index of the arguments object.&lt;/li&gt;
&lt;li&gt;Creates an identifier &lt;strong&gt;&lt;em&gt;message&lt;/em&gt;&lt;/strong&gt; in the function's &lt;em&gt;local memory&lt;/em&gt; and store the value that is passed to the function call's argument.&lt;/li&gt;
&lt;li&gt;Goes inside the function block and evaluates the return statement.&lt;/li&gt;
&lt;li&gt;Sees a variable &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt;, it then performs a lookup of that variable inside the function's &lt;em&gt;local memory&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It couldn't find the identifier &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;local memory&lt;/em&gt; so it then continues to look for it from its parent scope (&lt;em&gt;global memory&lt;/em&gt;). &lt;/li&gt;
&lt;li&gt;It finds the identifier &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;global memory&lt;/em&gt; so it takes that value and swap it to the variable reference.&lt;/li&gt;
&lt;li&gt;Sees a variable &lt;strong&gt;&lt;em&gt;message&lt;/em&gt;&lt;/strong&gt;, it then performs a lookup of that variable inside the function's &lt;em&gt;local memory&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It finds the identifier &lt;strong&gt;&lt;em&gt;message&lt;/em&gt;&lt;/strong&gt; in the &lt;em&gt;local memory&lt;/em&gt; so it takes that value and swaps it to the variable reference.&lt;/li&gt;
&lt;li&gt;Returns the evaluated result of the broadcast function execution context and is popped off from the call stack.&lt;/li&gt;
&lt;li&gt;Pass the control to its calling context (the global execution context) with the returned result.&lt;/li&gt;
&lt;li&gt;Displays &lt;code&gt;Luigi says Hello, World!&lt;/code&gt; in the console.&lt;/li&gt;
&lt;li&gt;Global execution context is popped off from the call stack and then the JS engine exits.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whew, that's a lot! There's a lot more that is happening inside the Execution Phase like object mutability and immutability checking, etc... but I tried to simplify the steps so that I won't complicate the main idea in this article. But if you wanted to dig more though, you can read through at those from the &lt;a href="https://tc39.es/ecma262/#sec-executable-code-and-execution-contexts"&gt;JavaScript Spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So with all of that here's an updated pseudocode for all the execution context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;GlobalExecutionContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;LexicalEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;EnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DeclarativeEnvironmentRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;LocalExecutionContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;LexicalEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;EnvironmentRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;DeclarativeEnvironmentRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;ObjectEnvironmentRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="nl"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;OuterEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;LexicalEnvironment&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;GlobalExecutionContext&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;ObjectEnvironmentRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Global&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;OuterEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;VariableEnvironment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;EnvironmentRecord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DeclarativeEnvironmentRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luigi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To further explain the whole concept, I've created a high-level representation of the step-by-step process of the Execution Context using a GIF below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeP_uzxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://luigicruz.dev/static/images/2021/execution-context/execution-context.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeP_uzxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://luigicruz.dev/static/images/2021/execution-context/execution-context.gif" alt="Step by step execution process of JavaScript source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View a PDF copy of the Execution context process &lt;a href="https://luigicruz.dev/static/pdf/execution-context.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are few interesting topics that we didn't try to dive into deeper in this article. These are the &lt;code&gt;this object&lt;/code&gt;, &lt;code&gt;scope chain&lt;/code&gt;, &lt;code&gt;hoisting&lt;/code&gt;, &lt;code&gt;garbage collection&lt;/code&gt;, etc. We'll try to discuss those in future articles. &lt;/p&gt;

&lt;p&gt;I know that's a lot of things to absorb. You'll probably have to revisit this post multiple times to understand. While you don't need to learn all these concepts to be a good JavaScript developer, having a decent understanding of the above concepts will help you clear out those fogs at the more advanced topics. As Elon Musk said, focus on understanding the fundamental principles of things first, and later on you'll be surprised by the topic that you thought doesn't make sense — actually, isn't so hard at all.&lt;/p&gt;

&lt;p&gt;Anyways, that's all I could share. I'll see you in my next post!&lt;/p&gt;

</description>
      <category>executioncontext</category>
      <category>javascript</category>
      <category>es6</category>
    </item>
    <item>
      <title>Supercharge Your Website Using PWA: Deferred Installation</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 25 Apr 2021 03:04:32 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-deferred-installation-nhb</link>
      <guid>https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-deferred-installation-nhb</guid>
      <description>&lt;p&gt;This is continuation of the &lt;a href="https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-installable-website-32i3"&gt;previous blog&lt;/a&gt; on making a website installable, you are highly encouraged to check it out before continuing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-raw-deferred-installation-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;deferred installation&lt;/code&gt;?
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Installation Prompt&lt;/code&gt;, makes it easy for users to install a &lt;strong&gt;Progressive Web App&lt;/strong&gt; (&lt;code&gt;PWA&lt;/code&gt;) on their mobile or desktop device. Installing a &lt;code&gt;PWA&lt;/code&gt; adds it to a user's launcher, allowing it to be run like any other installed app. &lt;code&gt;Deferred installation&lt;/code&gt; allows the developer to display the &lt;code&gt;installation prompt&lt;/code&gt; only when the user performs certain action, like clicking a button or hitting the bottom of the page (something to indicate that they are &lt;strong&gt;engaging with your site&lt;/strong&gt;, makes it more likely that the user will install the &lt;code&gt;PWA&lt;/code&gt; when prompted to do so).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;We will be continuing from where we left off in the &lt;a href="https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-installable-website-32i3"&gt;previous blog&lt;/a&gt;. But we require a small change in &lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;PWA: Installable website&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- CHANGE: BUTTON ADDED --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serviceWorker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Service worker is not supported&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-raw-deferred-installation-endraw-"&gt;
  &lt;/a&gt;
  Setting up &lt;code&gt;deferred installation&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;To set up &lt;code&gt;deferred installation&lt;/code&gt; we need to add a script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deferredPrompt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Storing the installation prompt&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beforeinstallprompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;deferredPrompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Displaying the prompt on button click&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;deferredPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nx"&gt;deferredPrompt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Link the script in &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Voila! That's all you need to defer the &lt;code&gt;Installation Prompt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can display the &lt;code&gt;Installation Prompt&lt;/code&gt; only on user interaction like: &lt;em&gt;click&lt;/em&gt;, &lt;em&gt;scroll&lt;/em&gt;, &lt;em&gt;form submit&lt;/em&gt;, etc.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#project-using-this-implementation"&gt;
  &lt;/a&gt;
  Project using this Implementation
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Smartsapp&lt;/strong&gt; (&lt;code&gt;deferred prompt&lt;/code&gt; on &lt;strong&gt;Google OAuth&lt;/strong&gt; button click, &lt;strong&gt;login&lt;/strong&gt; and &lt;strong&gt;registration&lt;/strong&gt; )&lt;/p&gt;

&lt;p&gt;Web-app: &lt;a href="https://smartsapp-ba40f.firebaseapp.com/"&gt;https://smartsapp-ba40f.firebaseapp.com&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/SmartsApp"&gt;
        SmartsApp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💬📱 An End to End Encrypted Cross Platform messenger app.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Smartsapp&lt;/h1&gt;
&lt;div&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns_GzKXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/logo.svg"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;A fully &lt;strong&gt;cross-platform messenger&lt;/strong&gt; app with &lt;strong&gt;End to End Encryption (E2EE)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
Demo&lt;/h2&gt;

&lt;div&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyjN1v8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/demo.gif"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The features shown in the demo is not exhaustive. Only the core features are showcased in the demo.&lt;/p&gt;

&lt;h2&gt;
Platforms Supported&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Desktop:&lt;/strong&gt; Windows, Linux, MacOS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mobile:&lt;/strong&gt; Android, iOS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Website:&lt;/strong&gt; Any device with a browser&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
Back-end Setup&lt;/h2&gt;

&lt;p&gt;The back-end of the app is handled by &lt;code&gt;Firebase&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
Basic Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to firebase console and create a new project with the name &lt;code&gt;Smartsapp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Google Analylitics&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
App Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create an &lt;code&gt;App&lt;/code&gt; for the project from the overview page&lt;/li&gt;
&lt;li&gt;Copy and paste the configurations in the required location (given in the readme of the respective apps)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
Auth Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the project &lt;code&gt;Authentication&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Sign-in method&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Email/Password&lt;/code&gt; and &lt;code&gt;Google&lt;/code&gt; sign in&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
Firestore Setup&lt;/h3&gt;


&lt;ol&gt;
&lt;li&gt;Go to the project &lt;code&gt;Firestore&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Create firestore provisions for the project (choose the server nearest to your location)&lt;/li&gt;
&lt;li&gt;Go to the &lt;code&gt;Rules&lt;/code&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ruppysuppy/SmartsApp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Reach out to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt; (For freelance projects, reach out through the contact form)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>pwa</category>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Best Options For Recurring Developer Income?</title>
      <author>Jack Harner 🚀</author>
      <pubDate>Sun, 25 Apr 2021 02:01:18 +0000</pubDate>
      <link>https://dev.to/jackharner/best-options-for-recurring-developer-income-4m46</link>
      <guid>https://dev.to/jackharner/best-options-for-recurring-developer-income-4m46</guid>
      <description>&lt;p&gt;As a Freelance developer, what's the best way to get recurring income? &lt;/p&gt;

&lt;p&gt;Things like maintenance plans, monthly hosting packages, etc. I'd love to hear what's worked and what didn't for you!&lt;/p&gt;

</description>
      <category>career</category>
      <category>freelance</category>
      <category>money</category>
      <category>discuss</category>
    </item>
    <item>
      <title>LeetCode 221. Maximal Square
(javascript solution)</title>
      <author>codingpineapple</author>
      <pubDate>Sun, 25 Apr 2021 01:35:32 +0000</pubDate>
      <link>https://dev.to/cod3pineapple/leetcode-221-maximal-square-javascript-solution-1243</link>
      <guid>https://dev.to/cod3pineapple/leetcode-221-maximal-square-javascript-solution-1243</guid>
      <description>&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;p&gt;Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;Time Complexity : O(n^2)&lt;br&gt;
Space Complexity: O(n^2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maximalSquare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Create dp array&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="c1"&gt;// Keep trac of the max square length&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;maxsqlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Only check cells that have a 1 in the original array&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="c1"&gt;// Check if the current cell is part of a square&lt;/span&gt;
                    &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="nx"&gt;maxsqlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxsqlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Return the area of the square&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;maxsqlen&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxsqlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ruby 101: Strings</title>
      <author>Eric Chapman</author>
      <pubDate>Sun, 25 Apr 2021 00:42:42 +0000</pubDate>
      <link>https://dev.to/ericchapman/ruby-101-strings-2l0n</link>
      <guid>https://dev.to/ericchapman/ruby-101-strings-2l0n</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;h2&gt;You want to learn Ruby or your Ruby is a bit rusty?&lt;/h2&gt; 

&lt;p&gt;In this series we will start from the beginning and will learn every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Strings Declaration&lt;/h2&gt;

&lt;p&gt;String variable represent any text data. A key point for the syntax of strings declaration is that they have to be enclosed in single or double quotes. The program will throw an error if they are not wrapped inside quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Mike&lt;/span&gt; &lt;span class="c1"&gt;# Will throw a error&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Mike"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Number can also be represent as string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;text_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"45"&lt;/span&gt;
&lt;span class="n"&gt;number_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable text_age is a string variable. It cannot be process in Ruby as a number like be use in addition or multiplication etc. &lt;/p&gt;

&lt;p&gt;The number_age variable is integer number so that variable can be part of any Ruby number manipulations methods.&lt;/p&gt;

&lt;h2&gt;String Interpolation&lt;/h2&gt;

&lt;p&gt;String interpolation is replacing placeholders with values in a string literal. &lt;/p&gt;

&lt;p&gt;For string interpolation to work. String have to be wrapped inside double quotation mark. Here a example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;span class="c1"&gt;# Hello Mike&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the last code snippet, the message variable will be process by Ruby before assignment. The #{name} placeholder will be replace by the containing variable value.&lt;/p&gt;

&lt;p&gt;Inside placeholder #{} any Ruby expression can be use...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Your age in 2 years will be &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;# Your age in 2 years will be 47&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;In Ruby everything is an object!&lt;/h2&gt;

&lt;p&gt;You maybe have ear this before. What that mean for us the developer?&lt;/p&gt;

&lt;p&gt;First, what is an object? An object refers to a particular instance of a class with their own methods and properties.&lt;/p&gt;

&lt;p&gt;In Ruby type are define as classes, so for example if you have a string variable, it's an instance of the String class.&lt;/p&gt;

&lt;p&gt;For example take this variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This 'message' variable will be dynamically type by Ruby as a string. That string is a class. So message is an instance of the class string. &lt;/p&gt;

&lt;p&gt;In Ruby the String class already have many methods to help do basic and advance string manipulations.&lt;/p&gt;

&lt;p&gt;That's also mean that 'message' variable will inherits all the methods and properties of his parent class (String).&lt;/p&gt;

&lt;p&gt;Example of method call (syntax: object.method)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'upcase' is a method of the String class. This method convert all the string characters to uppercase.&lt;/p&gt;

&lt;p&gt;For now if you don't understand all that class instance thing THAT'S NORMAL! We will cover class and object later. &lt;/p&gt;

&lt;p&gt;The only thing we need to understand for now is variable like a string variable have methods we can call to do some stuff automatically.&lt;/p&gt;

&lt;p&gt;Here are some string methods available in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
&lt;span class="c1"&gt;# Mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="c1"&gt;# ekiM&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;
&lt;span class="c1"&gt;# 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how those methods name are self descriptive. We do not need any comments and any explanation to understand what each method do... Welcome to Ruby world!&lt;/p&gt;

&lt;h2&gt;More String methods&lt;/h2&gt;

&lt;p&gt;Now that we understand the basic we will start to learn more advance string methods. &lt;/p&gt;

&lt;h3&gt;The sub and gsub method&lt;/h3&gt;

&lt;p&gt;Ruby have a handy string method to replace part of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the method call have no parentheses to enclose parameters. In Ruby those are optionals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;

&lt;span class="c1"&gt;# Also valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The convention is to omit the parentheses unless the code seem clearer with them.&lt;/p&gt;

&lt;p&gt;The sub method replace the first occurrence. The gsub method replace all the occurrences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue and the car is also blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red and the car is also red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Strip method&lt;/h3&gt;

&lt;p&gt;Remove white space before or after string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'  Welcome to Ruby World  '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;
&lt;span class="c1"&gt;# 'Welcome to Ruby World'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Chaining methods&lt;/h3&gt;

&lt;p&gt;It is possible to chain string methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'   Mike Taylor '&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# paul taylor&lt;/span&gt;
&lt;span class="c1"&gt;# In that specific situation, using the parentheses make the code easier to read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercice&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input the user name and store the result in a variable&lt;/li&gt;
&lt;li&gt;Input the user password and store the result in a variable&lt;/li&gt;
&lt;li&gt;Remove password before or after white space&lt;/li&gt;
&lt;li&gt;Convert the password to lowercase&lt;/li&gt;
&lt;li&gt;Display user name and password but replace the password letter 'e' with a star
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _Mike
Enter user password: _secret

The user name is Mike and his password is s*cr*t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user password: '&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The user name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and his password is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Have you tried using JŌTAI with React yet?</title>
      <author>Marius Espejo</author>
      <pubDate>Sat, 24 Apr 2021 23:42:01 +0000</pubDate>
      <link>https://dev.to/marius/have-you-tried-using-jotai-with-react-yet-404p</link>
      <guid>https://dev.to/marius/have-you-tried-using-jotai-with-react-yet-404p</guid>
      <description>&lt;p&gt;&lt;a href="https://youtu.be/oKFj5gBeauw"&gt;In this video&lt;/a&gt; we're going to explore the &lt;a href="https://github.com/pmndrs/jotai"&gt;Jōtai&lt;/a&gt; library! &lt;/p&gt;

&lt;p&gt;In the ReactJS ecosystem you've got so many state management solutions to pick from. You've got useState, useReducer, context API, recoil, redux, zustand, and so many more! &lt;/p&gt;

&lt;p&gt;Jotai provides a very simple minimalistic API and focuses on composing "atoms" as a bottom-up model/approach to managing state in a frontend application. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Jotai is pronounced "joe-tie" and means "state" in Japanese.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'll be walking you through a basic ReactJS tutorial of Jotai as well as some notes on my own first impressions of using the library. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have any of you used Jotai in production? What are your thoughts about it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Code with me and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oKFj5gBeauw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you're interested, I also recently made content on Zustand, &lt;em&gt;another&lt;/em&gt; approach to state management from the same authors as Jotai.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UcHkC5sJPWw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I've completely replaced the need for Postman with this one extension in VS Code!</title>
      <author>Philip Mutua</author>
      <pubDate>Sat, 24 Apr 2021 23:10:51 +0000</pubDate>
      <link>https://dev.to/pmutua/i-ve-completely-replaced-the-need-for-postman-with-this-one-extension-in-vs-code-1oa9</link>
      <guid>https://dev.to/pmutua/i-ve-completely-replaced-the-need-for-postman-with-this-one-extension-in-vs-code-1oa9</guid>
      <description>&lt;p&gt;I've completely replaced the need for Postman with this one extension in VS Code! The &lt;a href="https://www.thunderclient.io/"&gt;Thunder Client extension&lt;/a&gt; for &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; can do everything I need to when testing HTTP Requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;create and send requests&lt;/li&gt;
&lt;li&gt;group requests into collections&lt;/li&gt;
&lt;li&gt;use variables&lt;/li&gt;
&lt;li&gt;much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.thunderclient.io/"&gt;Thunder Client&lt;/a&gt; &lt;/p&gt;

</description>
      <category>thunder</category>
      <category>client</category>
      <category>vscode</category>
      <category>extensions</category>
    </item>
    <item>
      <title>6 Great podcasts for Frontend Developers
</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 24 Apr 2021 22:57:30 +0000</pubDate>
      <link>https://dev.to/jordienr/6-great-podcasts-for-frontend-developers-1mf5</link>
      <guid>https://dev.to/jordienr/6-great-podcasts-for-frontend-developers-1mf5</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@juja_han?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Juja Han&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/podcast?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyxsuNaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://layout.fm/static/ccbda74b7edb4fd36bcc1c900e1ebfba/46604/artwork-spec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyxsuNaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://layout.fm/static/ccbda74b7edb4fd36bcc1c900e1ebfba/46604/artwork-spec.png" alt="Layout.fm logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layoutfm"&gt;
  &lt;/a&gt;
  Layout.fm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://layout.fm/"&gt;https://layout.fm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A weekly podcast about design, technology, programming and everything else.&lt;br&gt;
By @rafahari previously Netlify, currently superlist.com and &lt;br&gt;
 @vernalkick Senior UX Manager at @Shopify&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khsdOYVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dbs.radioline.fr/pictures/podcast_774f88f5bf8f3aad35d8a0d8c8918a21/logo200.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khsdOYVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dbs.radioline.fr/pictures/podcast_774f88f5bf8f3aad35d8a0d8c8918a21/logo200.jpg" alt="Codepen Radio Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codepen-radio"&gt;
  &lt;/a&gt;
  Codepen Radio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.codepen.io/radio/"&gt;https://blog.codepen.io/radio/&lt;/a&gt;&lt;br&gt;
Chris Coyier, Alex Vazquez, and Tim Sabat, the co-founders of CodePen talk about the ins and outs of running a web software business.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpqgdkt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.sndcdn.com/avatars-000287353351-tdlqh4-t240x240.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpqgdkt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.sndcdn.com/avatars-000287353351-tdlqh4-t240x240.jpg" alt="Frontend HH Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-happy-hour"&gt;
  &lt;/a&gt;
  Frontend Happy Hour
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://frontendhappyhour.com/"&gt;http://frontendhappyhour.com/&lt;/a&gt;&lt;br&gt;
A podcast featuring a panel of Software Engineers from Netflix, Twitch, &amp;amp; Atlassian talking over drinks about all things Front End development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnR0mn8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143042724070907904/a0IYZ0uW.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnR0mn8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143042724070907904/a0IYZ0uW.jpg" alt="Ladybug Podcast Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ladybug"&gt;
  &lt;/a&gt;
  Ladybug
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.ladybug.dev/"&gt;https://www.ladybug.dev/&lt;/a&gt;&lt;br&gt;
By Kelly Vaughn, Emma Bostian, Sidney Buckner &amp;amp; Ali Spittel share their thoughts and stories from working in tech. They also share some really fun and interesting interviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4ob5cnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/875075946096676864/MEEwGMpY.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4ob5cnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/875075946096676864/MEEwGMpY.jpg" alt="Syntax FM Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax-fm"&gt;
  &lt;/a&gt;
  Syntax FM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://syntax.fm/"&gt;https://syntax.fm/&lt;/a&gt;&lt;br&gt;
By Wes Bos &amp;amp; Scott Tolinski&lt;br&gt;
"Full Stack Developers Wes Bos and Scott Tolinski dive deep into web development topics, explaining how they work and talking about their own experiences."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UGRKNgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.scdn.co/image/88ca4712d7edf416343a6b4ffd5d2b5b7f111a9b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UGRKNgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.scdn.co/image/88ca4712d7edf416343a6b4ffd5d2b5b7f111a9b" alt="Fullstack Radio Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fullstack-radio"&gt;
  &lt;/a&gt;
  Fullstack Radio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fullstackradio.com/"&gt;https://fullstackradio.com/&lt;/a&gt;&lt;br&gt;
A podcast for developers interested in building great software products. Hosted by Adam Wathan.&lt;/p&gt;

&lt;p&gt;And that's it! If you ask me my favorite I recommend Frontend Happy Hour.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; or subscribe to my newsletter for more resources and tools for Frontend Developers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zero-to-frontend"&gt;
  &lt;/a&gt;
  &lt;a href="https://zerotofrontend.dev/"&gt;Zero to Frontend&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Cool CSS tips And Tricks</title>
      <author>Kinanee Samson</author>
      <pubDate>Sat, 24 Apr 2021 22:49:40 +0000</pubDate>
      <link>https://dev.to/kalashin1/cool-css-tips-and-tricks-5bd8</link>
      <guid>https://dev.to/kalashin1/cool-css-tips-and-tricks-5bd8</guid>
      <description>&lt;p&gt;Good day guys, css is to a website what beauty is to a woman and you cannot get away with writing bad css, i'm going to share with you some cool css tips and tricks today. I saw a video on youtube that &lt;a href="//fireship.io/tags/css"&gt;fireship.io&lt;/a&gt; made on a similar topic, i learnt some cool css tips that can make writing css much easier. There are also a few tips i use personally, i thought i should share with you guys, let's get to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-variables"&gt;
  &lt;/a&gt;
  Use Variables
&lt;/h3&gt;

&lt;p&gt;You wouldn't believe it but if you can define some variables in your CSS that will hold a certain value that you might use in more than one rule or over several lines. Rather than hard coding the value each time, you can just call the variable, Later you can just change the value of the variable and it will take effect in all rules it is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* syntax */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;/* example */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;
&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--danger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--danger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--min-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a simple use case but it might come in hand when you want to manage your css file, maybe update or change something, you can just do that once and it takes effect over multiple lines rather than manually having to change all values by yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clamp-function"&gt;
  &lt;/a&gt;
  Clamp function
&lt;/h3&gt;

&lt;p&gt;In the example above i used media queries, but css now has a clamp function that will reduce the amount of media queries in your code. The clamp function accepts three values, the first is the lowest possible value, the next is the default value while the last is the maximum value. As the screen size changes the values will automatically switch, with the minimum being used for small screen sizes while the maximum for large screens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;font-Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* rather than */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* and again, thank God for clamp() */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-relative-units"&gt;
  &lt;/a&gt;
  use relative units
&lt;/h3&gt;

&lt;p&gt;Keeping in mind that your website needs to be as responsive as hell, you should do away with static units like px, inch or cm and use rems, ems as much as possible, you can combime this with the clamp function to achieve heaven while writing css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;rem&lt;/span&gt; &lt;span class="c"&gt;/* and now its fully fluid */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And relative units are not only em and rem, you have fr, which represents a fraction of a container size although you can only use this with grid, talking about grids.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-grid-for-layout"&gt;
  &lt;/a&gt;
  using Grid for layout
&lt;/h3&gt;

&lt;p&gt;If you still use floats or table to define a grid system for your web project then you should be hanging out with internet explorer. Css has a grid value that you pass to the display property and now you have god like control over the structure of your layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;john&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;doe&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* grid container */&lt;/span&gt;
&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* this specifies the width of each item in the grid */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is more to css grid than i can explain here because that would take us outside the scope of this article and it deserves it's own article so i might make one in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-emoji-characters-for-class-names"&gt;
  &lt;/a&gt;
  using emoji characters for class names
&lt;/h3&gt;

&lt;p&gt;This might sound wierd but you should probably use emoji characters as your class names to style up your elements rather than using complex class names that might lead to typos or is too long and disconnected from what you're tying to style, emoji characters are short and there's no spelling anything so the risk of making a typo is virtually eliminated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"😂"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Foo bar
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;😂&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will agree with me thst this is shorter and makes reviewing your code much more fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exadiv"&gt;
  &lt;/a&gt;
  exadiv
&lt;/h3&gt;

&lt;p&gt;This is a chrome extension you can download from the chrome web store and it's totally free, you can click on an element and exadiv will give you a rundown of the styles of that element. I use this a lot when i want to copy some styles from another website. It also highlights the element so you can see it's width, border and padding. It will really increase your css skills and make you more productive, so you should definitely try it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visbug"&gt;
  &lt;/a&gt;
  visbug
&lt;/h3&gt;

&lt;p&gt;This is another chrome extension and this also gives u god-like control over the elements on a website, you can use this extension to visually interact with a website and do stuffs like drag an element to a new position, see the styles associated with the element, change its z-index with button press on your keyboard, measure the element, see it's box-model representation and more. It might take you some time to learn all the features of the extension but it is worth having and i would advice you to get it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colorsco"&gt;
  &lt;/a&gt;
  colors.co
&lt;/h3&gt;

&lt;p&gt;This is an amazing website that can help you generate a color palette that you can use accross your application, it has a fun to use UI and you can just press space on your pc to generate a random color, once you find one you like, you can lock it in and continue till you have your palette all selected, then you can download it as an image or svg or pdf, or whatever format suits you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-scss-instead-of-css"&gt;
  &lt;/a&gt;
  write SCSS instead of CSS
&lt;/h3&gt;

&lt;p&gt;SCSS is to CSS what TypeScript is to javascript, all valid CSS is valid SCSS because it compiles down to CSS. And like TypeScript, browsers cannot directly understand SCSS so we need to compile it to CSS, we can easily do that from vs code by installing SCSS compiler extension from the vs code extension marketplace. I will not go into SCSS here because it is outsids the scope of this article but if you want to learn about SCSS then you should check &lt;a href="//thenetninja.co.uk"&gt;the net ninja scss tutorial&lt;/a&gt; on youtube.&lt;/p&gt;

&lt;p&gt;That's it for this article, i hope you find it useful, untill the next one it's bye for now. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
