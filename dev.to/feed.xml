<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Component to Smooth Scroll to the Top.</title>
      <author>Pranav Birajdar</author>
      <pubDate>Wed, 17 Mar 2021 03:56:56 +0000</pubDate>
      <link>https://dev.to/prnvbirajdar/react-hooks-component-to-smooth-scroll-to-the-top-35fd</link>
      <guid>https://dev.to/prnvbirajdar/react-hooks-component-to-smooth-scroll-to-the-top-35fd</guid>
      <description>&lt;p&gt;It's kinda rare to find a smooth scrolling button that takes you to the top of the page on modern blogging websites, especially the ones that are a long 15 minute read! &lt;/p&gt;

&lt;p&gt;However, whenever I come across one, I always tend to use it and  appreciate the elegance of this simple button that has such a specific job.&lt;/p&gt;

&lt;p&gt;After perusing &lt;em&gt;Stack Overflow&lt;/em&gt; and &lt;em&gt;GitHub&lt;/em&gt; for solution, I came across an elegant React Hook component and wanted to share it with this community!&lt;/p&gt;

&lt;p&gt;Our button should function like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1r2jaLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsx9qm4z7eb350x9duw1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1r2jaLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsx9qm4z7eb350x9duw1.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are following test-cases for our component:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Button should always be at the right bottom of the page&lt;/li&gt;
&lt;li&gt;Button should be hidden and should only appear when we scroll for a certain height&lt;/li&gt;
&lt;li&gt;On clicking it, we should be smoothly taken to the top of the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hook component achieves the following functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ScrollToTop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Top: 0 takes us all the way back to the top of the page&lt;/span&gt;
  &lt;span class="c1"&gt;// Behavior: smooth keeps it smooth!&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollToTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;smooth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Button is displayed after scrolling for 500 pixels&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageYOffset&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="c1"&gt;//scroll-to-top classes: fixed, bottom:0, right:0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll-to-top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;scrollToTop&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're almost done! Just import this component in your react file and stick it at the very end.&lt;/p&gt;

&lt;p&gt;And voila, it should work!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/sharp-archimedes-iz2mq?file=/src/App.js"&gt;Here&lt;/a&gt; is a basic, quick, and ugly demo of how it should function!&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Modern Javascript - III</title>
      <author>Piyush Sinha</author>
      <pubDate>Tue, 16 Mar 2021 22:45:21 +0000</pubDate>
      <link>https://dev.to/sinhapiyush/modern-javascript-iii-2opm</link>
      <guid>https://dev.to/sinhapiyush/modern-javascript-iii-2opm</guid>
      <description>&lt;p&gt;Every year, Javascript update adds new features. ES2021 &lt;em&gt;(also known as ES12)&lt;/em&gt; is planned to be released in June this year. New features that are added each year go through a four-stage process. All the features listed below, at the time of writing have already reached the last stage and are very much ready for the release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stringprototypereplaceall" class="anchor"&gt;
  &lt;/a&gt;
  String.prototype.replaceAll
&lt;/h3&gt;

&lt;p&gt;In Javascript, &lt;code&gt;replace()&lt;/code&gt; method only replaces the first occurrence of a pattern in a string. If we want to replace all the matches of a pattern in a string, the only way to achieve that is we supply the pattern as a &lt;code&gt;regular expression&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;macOS is way better than windows. I love macOS.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;macOS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Linux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Linux is way better than windows. I love macOS.&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/macOS/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Linux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Linux is way better than windows. I love Linux.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The proposed method &lt;code&gt;replaceAll()&lt;/code&gt; returns a new string with all matches of a pattern replaced by a replacement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;macOS is way better than windows. I love macOS.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;macOS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Linux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Linux is way better than windows. I love Linux.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-assignment-operator" class="anchor"&gt;
  &lt;/a&gt;
  Logical Assignment Operator
&lt;/h3&gt;

&lt;p&gt;With the newly proposed logical assignment operators - &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt; and &lt;code&gt;??=&lt;/code&gt;, we can assign a value to a variable based on a logical operation. It combines the logical operation with the assignment expression. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#logical-and-assignment-ampamp" class="anchor"&gt;
  &lt;/a&gt;
  Logical AND assignment (&amp;amp;&amp;amp;=)
&lt;/h4&gt;

&lt;p&gt;The Logical AND assignment operator performs the assignment only when the left operand is &lt;code&gt;truthy&lt;/code&gt;. Otherwise, if the left operand is &lt;code&gt;falsy&lt;/code&gt; (&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;0n&lt;/code&gt;, &lt;code&gt;“”&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;), the assignment is not performed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Equivalent: x &amp;amp;&amp;amp; (x = y)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it’s hard to grasp the operator, think of it as &lt;code&gt;if(x) { x = y; }&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#logical-or-assignment-" class="anchor"&gt;
  &lt;/a&gt;
  Logical OR assignment (||=)
&lt;/h4&gt;

&lt;p&gt;The Logical OR assignment operator performs the assignment only when the left operand is &lt;code&gt;falsy&lt;/code&gt;(&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;0n&lt;/code&gt;, &lt;code&gt;“”&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;). Otherwise, if the left operand is &lt;code&gt;truthy&lt;/code&gt;, the assignment is not performed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Equivalent: x || (x = y)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it’s hard to grasp the operator, think of it as &lt;code&gt;if(!x) { x = y; }&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#logical-nullish-assignment-" class="anchor"&gt;
  &lt;/a&gt;
  Logical Nullish assignment (??=)
&lt;/h4&gt;

&lt;p&gt;The Logical Nullish assignment operator performs the assignment only when the left operand is &lt;code&gt;nullish&lt;/code&gt;(&lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;). Otherwise, the assignment is not performed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Equivalent: x ?? (x = y)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it’s hard to grasp the operator, think of it as &lt;code&gt;if(x == null || x == undefined) { x = y; }&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numeric-separators" class="anchor"&gt;
  &lt;/a&gt;
  Numeric Separators
&lt;/h3&gt;

&lt;p&gt;Large numeric literals are difficult for the human eye to parse quickly. For example, consider the number &lt;code&gt;1019436871.42&lt;/code&gt;. We have to pay close attention to see that it’s billion something. &lt;/p&gt;

&lt;p&gt;To improve the readability, this new addition to Javascript language enables &lt;code&gt;underscores&lt;/code&gt; as separators in numeric literals. We can re-write the same number as &lt;code&gt;1_019_436_871.42&lt;/code&gt;. And it works for all kinds of numeric literals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A decimal integer literal with its digits grouped per thousand:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000_000&lt;/span&gt;
&lt;span class="c1"&gt;// A decimal literal with its digits grouped per thousand:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="nx"&gt;_720&lt;/span&gt;
&lt;span class="c1"&gt;// A binary integer literal with its bits grouped per octet:&lt;/span&gt;
&lt;span class="mb"&gt;0b01010110_00111000&lt;/span&gt;
&lt;span class="c1"&gt;// A binary integer literal with its bits grouped per nibble:&lt;/span&gt;
&lt;span class="mb"&gt;0b0101_0110_0011_1000&lt;/span&gt;
&lt;span class="c1"&gt;// A hexadecimal integer literal with its digits grouped by byte:&lt;/span&gt;
&lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="nx"&gt;_76_38_6A_73&lt;/span&gt;
&lt;span class="c1"&gt;// A BigInt literal with its digits grouped per thousand:&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;_642_473_943_484_686_707n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: It does not affect the outcome. Just improves readability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#intllistformat" class="anchor"&gt;
  &lt;/a&gt;
  Intl.ListFormat
&lt;/h3&gt;

&lt;p&gt;The Intl.ListFormat object enables language-sensitive list formatting. The ListFormat object takes two parameters, both of them are optional. The first parameter is &lt;code&gt;language (locale)&lt;/code&gt; and the second parameter is an &lt;code&gt;options&lt;/code&gt; object that has two properties — &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The Intl.ListFormat has a method called &lt;code&gt;format()&lt;/code&gt;, which receives an array as an argument and format it in different ways that are language-dependent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Motorcycle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// English&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;conjunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//  Motorcycle, Bus and Car&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disjunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//  Motorcycle, Bus or Car&lt;/span&gt;

&lt;span class="c1"&gt;// Dutch&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;conjunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//  Motorcycle, Bus en Car&lt;/span&gt;

&lt;span class="c1"&gt;// German&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;conjunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Motorcycle, Bus und Car&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promiseany" class="anchor"&gt;
  &lt;/a&gt;
  Promise.any
&lt;/h3&gt;

&lt;p&gt;ES2021 will introduce &lt;code&gt;Promise.any()&lt;/code&gt; method which short-circuits and returns a value, as soon as it hits the &lt;code&gt;first resolved promise&lt;/code&gt; from the list/array of promises. If all the promises are rejected then it will throw an &lt;code&gt;AggregateError&lt;/code&gt;, a new subclass of &lt;code&gt;Error&lt;/code&gt; that groups together individual errors.&lt;/p&gt;

&lt;p&gt;Unlike the &lt;code&gt;Promise.race()&lt;/code&gt; method which focuses on the promise which &lt;code&gt;settles&lt;/code&gt; the first, the &lt;code&gt;Promise.any()&lt;/code&gt; method focuses on the promise which &lt;code&gt;resolves&lt;/code&gt; the first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// quick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// AggregateError: All promises were rejected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As a developer, it is important to stay up to date with the new features of a language. I hope I was able to introduce you to some of the new features coming to Javascript with ES2021. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Generic Approach to Consume REST API in Angular</title>
      <author>Nichola Alkhouri</author>
      <pubDate>Tue, 16 Mar 2021 18:51:32 +0000</pubDate>
      <link>https://dev.to/nicholaalkhouri/generic-approach-to-consume-rest-api-in-angular-4poj</link>
      <guid>https://dev.to/nicholaalkhouri/generic-approach-to-consume-rest-api-in-angular-4poj</guid>
      <description>&lt;p&gt;In this article, I will show you how to create a generic solution to Consume REST API in Angular. I will utilize Typescript Generics in combination with Angular HTTPClient service to eliminate any code redundant, be as &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;DRY&lt;/a&gt; as possible, and follow the &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;Open–closed principle&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#communicating-with-backend-services-using-httpclient" class="anchor"&gt;
  &lt;/a&gt;
  Communicating with backend services using HTTPClient
&lt;/h2&gt;

&lt;p&gt;Most applications need to communicate with a remote server over the HTTP protocol, in order to perform the basic &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; operations. With Angular, you can use &lt;code&gt;HTTPClient&lt;/code&gt; service to achieve this communication easily. As an example, if you need to manage the Posts of your blog, you may have the following service to handle all the operations on the Post resource:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This solution is simple and clean, and it even follows the best practices according to the official &lt;a href="https://angular.io/guide/http"&gt;Angular Documentation&lt;/a&gt;. However, applications usually have many resources to manage, for our example, we may have users, comments, reviews, etc. Ideally, each of these resources should have a separate service to handle CRUD operations and communicate with the server, at the end we will have UserService, CommentService, ReviewService. Let's take a look at how the CommentService would look like:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Although the above implementation is very common and widely acceptable, it suffers from two cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code redundant (breaking of the DRY principle): If you compare the &lt;code&gt;PostService&lt;/code&gt; and the &lt;code&gt;CommentService&lt;/code&gt; you will notice how redundant the code is.&lt;/li&gt;
&lt;li&gt;Changes in the server-side, or changes in the way to communicate to the server, require changes in many files (in our case we need to change both &lt;code&gt;PostService&lt;/code&gt; and &lt;code&gt;CommentService&lt;/code&gt; files)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#typescript-generics-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  Typescript Generics To The Rescue
&lt;/h2&gt;

&lt;p&gt;To solve the above issues let's go ahead and build the following abstract class which will be the base of all the other services:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The new service class is &lt;code&gt;abstract&lt;/code&gt;, which means it can't be instantiated and used directly, but it needs to be extended by other classes.&lt;/li&gt;
&lt;li&gt;We provide one abstract method &lt;code&gt;getResourceUrl&lt;/code&gt;, The class which extends this abstract class must implement this method, and return the URL of the resource as we will see in the following section.&lt;/li&gt;
&lt;li&gt;This is a Generic Class, it is not tied to a specific type, rather the class which extends this abstract class will define the exact type used.&lt;/li&gt;
&lt;li&gt;It has all the needed CRUD operations which we need and used before in the previous service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now after we have our abstract generic class, whenever we need a new service we can simply extend this class and implement the only one abstract method &lt;code&gt;getResourceUrl&lt;/code&gt;. so the PostService and CommentService will be as the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#server-vs-frontend-model" class="anchor"&gt;
  &lt;/a&gt;
  Server vs Front-end Model
&lt;/h2&gt;

&lt;p&gt;In most applications, the front-end model doesn't match %100 the server-side model. In other words, the REST API will respond with json object that doesn't match exactly the interface or the class defined in the front-end application. In this case, you need a mapping function to convert between server and front-side mode. This sometimes referred to as serializing/deserializing. &lt;/p&gt;

&lt;p&gt;So, let us extend our base class to provide this mapping functionality. To do so I updated the &lt;code&gt;ResourceService&lt;/code&gt; to look as the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;I added two new methods:&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;toServerModel&lt;/code&gt;: to convert from the Front-end model to the Server Model, It accepts the resource generic type &lt;code&gt;T&lt;/code&gt; and return &lt;code&gt;any&lt;/code&gt; (json)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fromServerModel&lt;/code&gt;: to convert from the Server model to the Front-end Model, it accepts a parameter of the type &lt;code&gt;any&lt;/code&gt; which represent the server response, and return the generic type &lt;code&gt;T&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;I provided a default implementation for both of the two methods &lt;code&gt;toServerModel&lt;/code&gt;, &lt;code&gt;fromServerModel&lt;/code&gt;, so in case no mapping needed, the same object returned by the server will be used as a front-end model. Also since I added a  default implementation, the consumer of this service doesn't have to override or even implement these two methods at all.&lt;/li&gt;
&lt;li&gt;In both &lt;code&gt;getList&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; methods, I am using the new method &lt;code&gt;fromServerModel&lt;/code&gt;, to map the server response to the front-end Model.&lt;/li&gt;
&lt;li&gt;In both &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; methods, I am using &lt;code&gt;toServerModel&lt;/code&gt; to map the front-model to the server model before posting the data to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now to consume the new changes we have two cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is no mapping needed between the server and the front-end model, in this case, we don't have to change anything in the class that extends the &lt;code&gt;resourceService&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There is some kind of mapping needed between the server and the front-end model, all we need to do is to override &lt;code&gt;toServerModel&lt;/code&gt; and &lt;code&gt;fromServerModel&lt;/code&gt; models in the derived class to address our requirement mappings. For example let's assume, that the &lt;code&gt;PostsService&lt;/code&gt; implemented previously needs to map from timestamp to a js Date object, the PostsService implementation would look like the following:&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;To communicate with a server using the HTTP protocol, you need to use the Angular HTTPClient service. In this article, we implemented a generic extendable solution to allow us to achieve this communication. Our solution is clean, &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;, and follows the &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;Open–closed principle&lt;/a&gt;. We utilized Typescrip Generics, Generic Classes, and we even took into consideration a required mapping between server and front-end model.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Keep your commit history clean: Learn the git interactive rebase!</title>
      <author>Fahad Imran 👨‍💻</author>
      <pubDate>Tue, 16 Mar 2021 18:34:27 +0000</pubDate>
      <link>https://dev.to/fahadimran371/keep-your-commit-history-clean-learn-the-git-interactive-rebase-3ej0</link>
      <guid>https://dev.to/fahadimran371/keep-your-commit-history-clean-learn-the-git-interactive-rebase-3ej0</guid>
      <description>&lt;p&gt;In this blog post, I will show you how to use one of my favorite git commands i.e. the &lt;strong&gt;interactive rebase&lt;/strong&gt;. Since I have been using git and GitHub quite extensively for the past week, I have found myself using this command over and over. So, I thought about writing a blog to explain how to use this command. This would not only &lt;strong&gt;help others&lt;/strong&gt; but also serve as a &lt;strong&gt;guide&lt;/strong&gt; in case I have to reference it later. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started!&lt;/strong&gt; 💡&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  🐧 The Problem
&lt;/h2&gt;

&lt;p&gt;If you've used git as a version control tool in the past chances are that you've encountered a problem like this. You're in the process of implementing a small feature and are making small commits as you work on it. Now you're git &lt;strong&gt;commit history&lt;/strong&gt; looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Add Navbar markup
Make Navbar responsive for mobile layout
Tweak Navbar theme
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see all these commits are related to a single feature i.e. the navbar. It would be much better if these commits could be merged into a single commit, wouldn't it? That's where the &lt;code&gt;rebase&lt;/code&gt; command comes into play. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-git-rebase-endraw-command" class="anchor"&gt;
  &lt;/a&gt;
  🤖 The &lt;code&gt;git rebase&lt;/code&gt; command
&lt;/h2&gt;

&lt;p&gt;The interactive rebase command allows you to &lt;strong&gt;merge multiple commits into one&lt;/strong&gt;. This keeps the changes made by the individual commits but re-applies the commits one by one. Here's how you can use it:&lt;/p&gt;

&lt;p&gt;👉 Say I have made the &lt;strong&gt;last 2 commits&lt;/strong&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Fix typo in README
Update README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I want to squash these 2 commits together into a single commit &lt;code&gt;Update README.md&lt;/code&gt;. Here's the command I'll use (from the git bash or terminal):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase -i HEAD~n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;rebase&lt;/code&gt; means you're using the &lt;code&gt;git rebase&lt;/code&gt; command on the last 2 commits. &lt;code&gt;-i&lt;/code&gt; is short for an interactive mode which means that you'll be able to complete the rebase process in your editor. &lt;code&gt;HEAD~n&lt;/code&gt; means the lastest n commits that you've made. Since I am rebasing the last 2 commits, you'll change the command to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase -i HEAD~2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command, an editor window will open as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQ-r8fp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c941oq5szggnge2vlx0l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQ-r8fp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c941oq5szggnge2vlx0l.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shows the commits that you've chosen to rebase with commit id and commit message &lt;strong&gt;(Older commit on top)&lt;/strong&gt;. You may notice the words &lt;code&gt;pick&lt;/code&gt; written before each commit. By default, the rebase will pick both the commits and would reapply as is. Saving and closing the editor like this will make no changes to the repository.&lt;/p&gt;

&lt;p&gt;Since we want to squash the 2 commits together we'll replace the pick with &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; for short. So, in this example, I'll pick the older commit and squash the newer one with it. This would give me a single commit instead of 2 separate ones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTMwAp1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daloib1gemuhdh8zhbfr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTMwAp1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daloib1gemuhdh8zhbfr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then save and close the editor window. Once you do it, another editor window will open with the commit messages &lt;strong&gt;(Older message on top)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gED8pF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umr7xu4inr112x9dqjvd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gED8pF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umr7xu4inr112x9dqjvd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now enter the commit message for the single commit. This is the commit message you're final squashed commit will have. &lt;/p&gt;

&lt;p&gt;So, in this case, we want to have the message &lt;code&gt;Update README.md&lt;/code&gt; for the final commit. So I will change the message accordingly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAhZLCvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qlc8nlqj690zoob121v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAhZLCvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qlc8nlqj690zoob121v.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then save the changes and close the editor. You'll see a message like this in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pVJnfZMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyxhi3dwxfs9nxvj7h1q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pVJnfZMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyxhi3dwxfs9nxvj7h1q.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you've rebased the 2 commits into a single commit and have chosen a commit message for it too, the next step is pushing these changes to GitHub. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dangerous-part-raw-git-push-origin-force-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  🛑 The dangerous part &lt;code&gt;git push origin --force&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is the dangerous part. In order to push these changes, you have to do a &lt;strong&gt;forced update&lt;/strong&gt;. The command is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin [your_branch_name] --force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--force&lt;/code&gt; flag means you're doing a forced update. This is dangerous because you're &lt;strong&gt;rewriting the repo's history&lt;/strong&gt;. If you're the only one working on the repo, this is perfectly fine. But if other people are working on it, their branches will get &lt;strong&gt;out of sync&lt;/strong&gt; and they will have to &lt;strong&gt;re-merge&lt;/strong&gt; their work on top of your rebased one. &lt;/p&gt;

&lt;p&gt;The reason being that the &lt;code&gt;git rebase&lt;/code&gt; command basically created &lt;strong&gt;new commits&lt;/strong&gt; that may appear the same but are different than the previous ones. So, be very careful while using this command. &lt;strong&gt;You've been warned.&lt;/strong&gt; 🚧&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  🙏 That's all folks!
&lt;/h2&gt;

&lt;p&gt;That's it! You've successfully rebased the last 2 commits into a single one and your commit history now looks cleaner than ever. The same process can be followed for any number of commits. If you want to learn more about interactive rebase, have a look at &lt;a href="https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed reading this blog, feel free to read my other blogs &lt;a class="comment-mentioned-user" href="https://dev.to/fahadimran371"&gt;@fahadimran371&lt;/a&gt;
. Thanks for reading and happy coding! 😊&lt;/p&gt;

&lt;p&gt;🌎 Follow me online: &lt;a href="https://github.com/fahadimran371"&gt;GitHub&lt;/a&gt; | &lt;a href="https://dev.to/fahadimran371"&gt;DEV&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/fahadimran371/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Beginner’s Guide into the field of DevOps</title>
      <author>Adit Modi</author>
      <pubDate>Tue, 16 Mar 2021 17:07:01 +0000</pubDate>
      <link>https://dev.to/aditmodi/beginner-s-guide-into-the-field-of-devops-17kk</link>
      <guid>https://dev.to/aditmodi/beginner-s-guide-into-the-field-of-devops-17kk</guid>
      <description>&lt;p&gt;What do companies like Flipkart, Amazon, Spotify, Netflix, Hotstar and Uber have in common apart from the fact that they are multibillion-dollar giants? They all run their businesses via the internet, if not just apps.&lt;/p&gt;

&lt;p&gt;But do you know what constitutes their success more than their predecessors and competitors? It’s the ability to solve any and every technical issue within minutes and roll-out changes or features while continuously testing different things simultaneously.&lt;/p&gt;

&lt;p&gt;How are these companies able to pull it off? Of course, they have teams but then they do not end up over-hiring people either. What serves as the ‘backbone’ to their technical success is their use of a method known as ‘DevOps’. This magical method helps them automate their day to day processes to increase efficiency and improve delivery time.&lt;/p&gt;

&lt;p&gt;But before your mind starts feeding you with “But they are rich enough to afford these fancy methods and we aren’t” let me interrupt your flow of thoughts by informing you that it’s not expensive if it’s saving you a lot in the long term. So, without further ado let’s get you to know about this actually-not-so-fancy term called ‘DevOps’.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39dzdJ5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flf1hitn93v42fa5bu2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39dzdJ5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flf1hitn93v42fa5bu2h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DevOps is the combination of cultural philosophies, practices, and tools that increases an organization’s ability to deliver applications and services at high velocity: evolving and improving products at a faster pace than organizations using traditional software development and infrastructure management processes. This speed enables organizations to better serve their customers and compete more effectively in the market.&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-devops-matters" class="anchor"&gt;
  &lt;/a&gt;
  Why DevOps Matters
&lt;/h4&gt;

&lt;p&gt;Software and the Internet have transformed the world and its industries, from shopping to entertainment to banking. Software no longer merely supports a business; rather it becomes an integral component of every part of a business. Companies interact with their customers through software delivered as online services or applications and on all sorts of devices. They also use software to increase operational efficiencies by transforming every part of the value chain, such as logistics, communications, and operations. &lt;/p&gt;

&lt;p&gt;In a similar way that physical goods companies transformed how they design, build, and deliver products using industrial automation throughout the 20th century, companies in today’s world must transform how they build and deliver software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-devops" class="anchor"&gt;
  &lt;/a&gt;
  Benefits of DevOps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uzX4Xgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j55kr4skwqc5b1zc63so.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uzX4Xgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j55kr4skwqc5b1zc63so.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#speed" class="anchor"&gt;
  &lt;/a&gt;
  Speed
&lt;/h4&gt;

&lt;p&gt;Move at high velocity so you can innovate for customers faster, adapt to changing markets better, and grow more efficient at driving business results. The DevOps model enables your developers and operations teams to achieve these results. For example, microservices and continuous delivery let teams take ownership of services and then release updates to them quicker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2iz7lvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc5noupnl72jpzn9ycmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2iz7lvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc5noupnl72jpzn9ycmf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rapid-delivery" class="anchor"&gt;
  &lt;/a&gt;
  Rapid Delivery
&lt;/h4&gt;

&lt;p&gt;Increase the frequency and pace of releases so you can innovate and improve your product faster. The quicker you can release new features and fix bugs, the faster you can respond to your customers’ needs and build competitive advantage. Continuous integration and continuous delivery are practices that automate the software release process, from build to deploy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AG-XOmuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doqurz75jedcxzh6ur3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AG-XOmuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doqurz75jedcxzh6ur3f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reliability" class="anchor"&gt;
  &lt;/a&gt;
  Reliability
&lt;/h4&gt;

&lt;p&gt;Ensure the quality of application updates and infrastructure changes so you can reliably deliver at a more rapid pace while maintaining a positive experience for end users. Use practices like continuous integration and continuous delivery to test that each change is functional and safe. Monitoring and logging practices help you stay informed of performance in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4494bSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b32s8w4a82bjegvrgnb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4494bSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b32s8w4a82bjegvrgnb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scale" class="anchor"&gt;
  &lt;/a&gt;
  Scale
&lt;/h4&gt;

&lt;p&gt;Operate and manage your infrastructure and development processes at scale. Automation and consistency help you manage complex or changing systems efficiently and with reduced risk. For example, infrastructure as code helps you manage your development, testing, and production environments in a repeatable and more efficient manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1aB_Xgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36so987p99powc4r8w93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1aB_Xgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36so987p99powc4r8w93.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#improved-collaboration" class="anchor"&gt;
  &lt;/a&gt;
  Improved Collaboration
&lt;/h4&gt;

&lt;p&gt;Build more effective teams under a DevOps cultural model, which emphasizes values such as ownership and accountability. Developers and operations teams collaborate closely, share many responsibilities, and combine their workflows. This reduces inefficiencies and saves time (e.g. reduced handover periods between developers and operations, writing code that takes into account the environment in which it is run).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRauqmqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t47j68kid4wnixbldzec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRauqmqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t47j68kid4wnixbldzec.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h4&gt;

&lt;p&gt;Move quickly while retaining control and preserving compliance. You can adopt a DevOps model without sacrificing security by using automated compliance policies, fine-grained controls, and configuration management techniques. For example, using infrastructure as code and policy as code, you can define and then track compliance at scale.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#devops-practices" class="anchor"&gt;
  &lt;/a&gt;
  DevOps Practices
&lt;/h4&gt;

&lt;p&gt;The following are DevOps best practices:&lt;br&gt;
Continuous Integration&lt;br&gt;
Continuous Delivery&lt;br&gt;
Microservices&lt;br&gt;
Infrastructure as Code&lt;br&gt;
Monitoring and Logging&lt;br&gt;
Communication and Collaboration&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHyEuwhj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h71udx3xmi9lgbxwcpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHyEuwhj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h71udx3xmi9lgbxwcpm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#continuous-integration" class="anchor"&gt;
  &lt;/a&gt;
  Continuous Integration
&lt;/h4&gt;

&lt;p&gt;Continuous integration is a software development practice where developers regularly merge their code changes into a central repository, after which automated builds and tests are run. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate and release new software updates.&lt;br&gt;
Learn more about continuous integration »&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W88dk8NF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gmpp72i40cwpddwv2j9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W88dk8NF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gmpp72i40cwpddwv2j9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#continuous-delivery" class="anchor"&gt;
  &lt;/a&gt;
  Continuous Delivery
&lt;/h4&gt;

&lt;p&gt;Continuous delivery is a software development practice where code changes are automatically built, tested, and prepared for a release to production. It expands upon continuous integration by deploying all code changes to a testing environment and/or a production environment after the build stage. When continuous delivery is implemented properly, developers will always have a deployment-ready build artifact that has passed through a standardized test process.&lt;/p&gt;

&lt;p&gt;Learn more about continuous delivery and AWS CodePipeline »&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmAftYuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1s8mw0pgz589eq7jvr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmAftYuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1s8mw0pgz589eq7jvr2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#microservices" class="anchor"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h4&gt;

&lt;p&gt;The microservices architecture is a design approach to build a single application as a set of small services. Each service runs in its own process and communicates with other services through a well-defined interface using a lightweight mechanism, typically an HTTP-based application programming interface (API). &lt;/p&gt;

&lt;p&gt;Microservices are built around business capabilities; each service is scoped to a single purpose. You can use different frameworks or programming languages to write microservices and deploy them independently, as a single service, or as a group of services.&lt;/p&gt;

&lt;p&gt;Learn more about Amazon Container Service (Amazon ECS) »&lt;/p&gt;

&lt;p&gt;Learn more about AWS Lambda »&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmAftYuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1s8mw0pgz589eq7jvr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmAftYuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1s8mw0pgz589eq7jvr2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#infrastructure-as-code" class="anchor"&gt;
  &lt;/a&gt;
  Infrastructure as Code
&lt;/h4&gt;

&lt;p&gt;Infrastructure as code is a practice in which infrastructure is provisioned and managed using code and software development techniques, such as version control and continuous integration. The cloud’s API-driven model enables developers and system administrators to interact with infrastructure programmatically, and at scale, instead of needing to manually set up and configure resources. Thus, engineers can interface with infrastructure using code-based tools and treat infrastructure in a manner similar to how they treat application code. Because they are defined by code, infrastructure and servers can quickly be deployed using standardized patterns, updated with the latest patches and versions, or duplicated in repeatable ways.&lt;/p&gt;

&lt;p&gt;Learn to manage your infrastructure as code with AWS CloudFormation »&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuration-management" class="anchor"&gt;
  &lt;/a&gt;
  Configuration Management
&lt;/h4&gt;

&lt;p&gt;Developers and system administrators use code to automate operating system and host configuration, operational tasks, and more. The use of code makes configuration changes repeatable and standardized. It frees developers and systems administrators from manually configuring operating systems, system applications, or server software.&lt;/p&gt;

&lt;p&gt;Learn how you can configure and manage Amazon EC2 and on-premises systems with Amazon EC2 Systems Manager »&lt;/p&gt;

&lt;p&gt;Learn to use configuration management with AWS OpsWorks »&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#policy-as-code" class="anchor"&gt;
  &lt;/a&gt;
  Policy as Code
&lt;/h4&gt;

&lt;p&gt;With infrastructure and its configuration codified with the cloud, organizations can monitor and enforce compliance dynamically and at scale. Infrastructure that is described by code can thus be tracked, validated, and reconfigured in an automated way. &lt;/p&gt;

&lt;p&gt;This makes it easier for organizations to govern changes over resources and ensure that security measures are properly enforced in a distributed manner (e.g. information security or compliance with PCI-DSS or HIPAA). This allows teams within an organization to move at higher velocity since non-compliant resources can be automatically flagged for further investigation or even automatically brought back into compliance.&lt;/p&gt;

&lt;p&gt;Learn how you can use AWS Config and Config Rules to monitor and enforce compliance for your infrastructure »&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9Zxb-tB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3rcnwn3xoc3ss69ilpo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9Zxb-tB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3rcnwn3xoc3ss69ilpo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#monitoring-and-logging" class="anchor"&gt;
  &lt;/a&gt;
  Monitoring and Logging
&lt;/h4&gt;

&lt;p&gt;Organizations monitor metrics and logs to see how application and infrastructure performance impacts the experience of their product’s end user. By capturing, categorizing, and then analyzing data and logs generated by applications and infrastructure, organizations understand how changes or updates impact users, shedding insights into the root causes of problems or unexpected changes. &lt;/p&gt;

&lt;p&gt;Active monitoring becomes increasingly important as services must be available 24/7 and as application and infrastructure update frequency increases. Creating alerts or performing real-time analysis of this data also helps organizations more proactively monitor their services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QbkjMjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqc1iy1g73ic47my08a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QbkjMjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqc1iy1g73ic47my08a5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn how you can use Amazon CloudWatch to monitor your infrastructure metrics and logs »&lt;/p&gt;

&lt;p&gt;Learn how you can use AWS CloudTrail to record and log AWS API calls »&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#communication-and-collaboration" class="anchor"&gt;
  &lt;/a&gt;
  Communication and Collaboration
&lt;/h4&gt;

&lt;p&gt;Increased communication and collaboration in an organization is one of the key cultural aspects of DevOps. The use of DevOps tooling and automation of the software delivery process establishes collaboration by physically bringing together the workflows and responsibilities of development and operations. Building on top of that, these teams set strong cultural norms around information sharing and facilitating communication through the use of chat applications, issue or project tracking systems, and wikis. &lt;/p&gt;

&lt;p&gt;This helps speed up communication across developers, operations, and even other teams like marketing or sales, allowing all parts of the organization to align more closely on goals and projects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-much-does-devops-engineer-make" class="anchor"&gt;
  &lt;/a&gt;
  How much does DevOps engineer make?
&lt;/h4&gt;

&lt;p&gt;DevOps is one of the most trending IT profession. That is why there is plenty of opportunities out there. As a result, pay scale even for junior level DevOps engineer is quite high. Approximate salary of Junior DevOps engineer in India is $11,000 to $15,801 per year. The average salary for junior DevOps Engineer is $78,696 per year in the United States of America.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-future-of-devops" class="anchor"&gt;
  &lt;/a&gt;
  What is the future of DevOps?
&lt;/h4&gt;

&lt;p&gt;They are lots of Change likely to happens in the DevOps world some most prominent are:&lt;br&gt;
Organizations are shifting in their needs to weeks and months instead of years.&lt;/p&gt;

&lt;p&gt;We will see soon that DevOps engineers have more access and control of the end user than any other person in the enterprise.&lt;br&gt;
DevOps is becoming a valued skill for IT people. For example, a survey conducted by Linux hiring found that 25% of respondent’s job seeker is DevOps expertise.&lt;/p&gt;

&lt;p&gt;DevOps and continuous delivery are here to stay. Therefore companies need to change as they have no choice but to evolve. However, the mainstreaming the notion of DevOps will take 5 to 10 years.&lt;/p&gt;

&lt;p&gt;I hope that this guide helps you in building your career with DevOps.&lt;/p&gt;

&lt;p&gt;If you have any doubt or unable to understand any concept feel free to contact me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning DevOps then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The key in such a transition to continuous delivery is to expect things to get worse before you’ll be able to make them better.” ~ Matthias Marschall&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>devops</category>
      <category>devjournal</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>JavaScript Exercises - Conditional Statements</title>
      <author>bo-iliev</author>
      <pubDate>Tue, 16 Mar 2021 16:58:50 +0000</pubDate>
      <link>https://dev.to/boiliev/javascript-exercises-conditional-statements-1jle</link>
      <guid>https://dev.to/boiliev/javascript-exercises-conditional-statements-1jle</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;When you start by learning JavaScript programming basics, it can be quite hard to think of stuff to do to practice your code knowledge skills. Well, don't worry. &lt;/p&gt;

&lt;p&gt;I am going to give you a few coding exercises to practice your code skills. They won't be as hard for some of you, but for those that are only just starting to get into coding, these exercises will be super helpful. They will mainly consist of logical thinking and math solving. The point of this is to focus on the instructions that are given to you and following them.&lt;/p&gt;

&lt;p&gt;These tasks are going to be about &lt;strong&gt;conditional statements&lt;/strong&gt;. You can think of this as your &lt;code&gt;level one&lt;/code&gt; tasks. &lt;/p&gt;

&lt;p&gt;If you enjoy these tasks and want me to make some more &lt;code&gt;levels&lt;/code&gt;, let me know so that I can bring them to you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-speed-test" class="anchor"&gt;
  &lt;/a&gt;
  Task #1 - Speed Test
&lt;/h1&gt;

&lt;p&gt;You need to write a function that receives an argument. This argument is going to be our speed.  If our speed meets a certain condition, it should return a certain string.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If our speed is under 10 or equal - return &lt;code&gt;slow&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 10 and up to 40 - return &lt;code&gt;average&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 40 and is up to 100 - return &lt;code&gt;fast&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 100 and up to 180 - return &lt;code&gt;very fast&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 180 - return &lt;code&gt;extremely fast&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how the output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1
&amp;lt;------------------------------&amp;gt;
speed(30)       //Input
average         //Output

Example 2
&amp;lt;------------------------------&amp;gt;
speed(97)       //Input
fast            //Output

Example 3
&amp;lt;------------------------------&amp;gt;
speed(180)       //Input
very fast        //Output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-bonus-score" class="anchor"&gt;
  &lt;/a&gt;
  Task #2 - Bonus Score
&lt;/h1&gt;

&lt;p&gt;You will be given one number - your score. This score will get some bonus points if some conditions are met. You have to write a function which counts all the bonus points which this score gets and  return the new score (&lt;code&gt;your score + bonus points&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the score is under 100 or equal, the bonus points are &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the score is over 100, the bonus points are &lt;code&gt;30%&lt;/code&gt; from the score.&lt;/li&gt;
&lt;li&gt;If the score is over 1000, the bonus points are &lt;code&gt;20%&lt;/code&gt; from the score.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The extra bonus points(added after the previous bonus point are already applied):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the score is &lt;code&gt;even&lt;/code&gt;, you get +4 bonus points.&lt;/li&gt;
&lt;li&gt;If the score ends on a &lt;code&gt;5&lt;/code&gt;, you get +5 bonus points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to return the number of the bonus points and the new score. Here are some examples of how the output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1
&amp;lt;------------------------------&amp;gt;
score(30);  // Original Score
14          // Bonus Points
44          // New Score

Example 2
&amp;lt;------------------------------&amp;gt;
score(3343) //Original Score
668.6      //Bonus Points
4011.6     //New Score
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-3-time-25" class="anchor"&gt;
  &lt;/a&gt;
  Task #3 - Time + 25
&lt;/h1&gt;

&lt;p&gt;In this task, you have to write a function, which receives an &lt;code&gt;array as an argument with two string numbers in it&lt;/code&gt;. The first number is the hours, and the second is the minutes. Our time will be in the 24-hour time clock. Our function will calculate what the time will be in 25 minutes. &lt;/p&gt;

&lt;p&gt;You have to make the strings into numbers. Your output for the hours should always be between &lt;code&gt;0-23&lt;/code&gt; and your minutes should always be between &lt;code&gt;0-59&lt;/code&gt;. Your minutes should always be with &lt;code&gt;two digits&lt;/code&gt;. This means that in some cases it should start with a 0.&lt;/p&gt;

&lt;p&gt;In&lt;/p&gt;

&lt;p&gt;Here are some examples of how your output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1
&amp;lt;------------------------------&amp;gt;
time(['16', '15'])  //Input
16:40               //Output

Example 2
&amp;lt;------------------------------&amp;gt;
time(['3', '58'])   //Input
4:23                //Output

Example 3
&amp;lt;------------------------------&amp;gt;
time(['23', '52'])  //Input
0:17                //Output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are the little fun exercises to practice your &lt;code&gt;if&lt;/code&gt; statement skill. If you have any feedback or you need some help, be sure to comment down below. I'd be happy to chat and help! I hope you liked it and if you want me to do some more of these let me know.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 16 Mar 2021 16:54:23 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-2gd4</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-2gd4</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diy-react-router" class="anchor"&gt;
  &lt;/a&gt;
  DIY React Router
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/thomascullen"&gt;@thomascullen&lt;/a&gt;
 walks us through building a simplified version of React-router, based on the newer v6 APIs 🙌 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thomascullen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzgTQNVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tj1UaA5z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/34656/a8884c47-eb5d-4608-98eb-3f8233b9451f.jpeg" alt="thomascullen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thomascullen/build-a-react-router-clone-from-scratch-38dp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a react-router clone from scratch&lt;/h2&gt;
      &lt;h3&gt;Thomas Cullen ・ Mar 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-make-a-webrtc-video-chat-setup-work-in-a-production-environment" class="anchor"&gt;
  &lt;/a&gt;
  How to make a WebRTC video chat setup work in a production environment
&lt;/h2&gt;

&lt;p&gt;"Our path to functioning video chat was long and winding; I want to outline what we learned to save other people from spending the same time and effort we did to come to that understanding."&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="comment-mentioned-user" href="https://dev.to/lazerwalker"&gt;@lazerwalker&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Super interesting and helpful!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lazerwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfrs4EKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ABVWSFac--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/279624/fe461835-3dcc-4370-99f3-ce5154d7bac4.png" alt="lazerwalker image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lazerwalker/why-video-chat-is-a-hard-technical-problem-43gj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Video Chat is a Hard Technical Problem&lt;/h2&gt;
      &lt;h3&gt;Em Lazer-Walker ・ Mar 12 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webrtc&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#sometimes-tutorials-arent-enough" class="anchor"&gt;
  &lt;/a&gt;
  Sometimes tutorials aren't enough
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/vascoalramos"&gt;@vascoalramos&lt;/a&gt;
 shares the first installment in their periodic log of learning the concepts and tools behind Kubernetes orchestration. This is a great supplement to all those Kubernetes tutorials you've bookmarked!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vascoalramos" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRwiVheq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ofrxEHpQ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/325980/05f84796-7065-4430-8194-5b758d1b67a3.jpg" alt="vascoalramos image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vascoalramos/learning-kubernetes-concepts-part-1-pb0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learning Kubernetes - Part I: Introduction&lt;/h2&gt;
      &lt;h3&gt;Vasco Ramos ・ Mar 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#no-regrets-just-lessons" class="anchor"&gt;
  &lt;/a&gt;
  No regrets, just lessons
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/abdulbasit313"&gt;@abdulbasit313&lt;/a&gt;
 shares some insights from the past two years they've spent learning software development. It's always helpful to learn from others' "mistakes". &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abdulbasit313" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XTNBOX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uT-vgE3R--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/143883/09804435-2bdd-49cd-aef8-8184987bd80a.jpg" alt="abdulbasit313 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abdulbasit313/5-mistakes-i-wish-i-didn-t-make-as-a-self-taught-developer-gjk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Mistakes I Wish I Didn't Make As A Self-Taught Developer&lt;/h2&gt;
      &lt;h3&gt;Abdul Basit ・ Mar 13 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#be-a-twitchstar-with-this-setup" class="anchor"&gt;
  &lt;/a&gt;
  Be a TwitchStar with this setup
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;
 was kind enough to share how exactly they set up their Twitch stream for maximized quality and efficiency. 🤩 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt="whitep4nth3r image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/my-twitch-live-coding-setup-in-obs-4he0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Twitch live coding setup in OBS&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Mar 14 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#twitch&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#easybase-for-easier-project-backend-processes" class="anchor"&gt;
  &lt;/a&gt;
  Easybase for easier project backend processes.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/mbagley1020"&gt;@mbagley1020&lt;/a&gt;
 explains how the React library for Easybase.io provides developers with the ability to streamline their project backend processes visually. Find out how the free-tier makes serverless frameworks and scalable databases more accessible for all kinds of developers.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mbagley1020" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RT-NU0ZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--q38hHRdz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/507252/61203df5-4717-401d-937e-bb209c395e92.jpeg" alt="mbagley1020 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mbagley1020/adding-serverless-user-authentication-to-your-react-projects-jbe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Adding Serverless User Authentication to Your React Projects&lt;/h2&gt;
      &lt;h3&gt;Michael Bagley ・ Mar 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#its-ok-to-hesitate-along-the-way" class="anchor"&gt;
  &lt;/a&gt;
  It's ok to hesitate along the way
&lt;/h2&gt;

&lt;p&gt;This diary entry-esque video and article by &lt;a class="comment-mentioned-user" href="https://dev.to/kethmars"&gt;@kethmars&lt;/a&gt;
 shares insights for those of you who are looking to get more serious about software development — or those of you who want to reach the next level in your career.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kethmars" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcjFDq4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4W84d8qj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/191155/4f698e5c-1c92-4a97-b3bb-b4afa81e9e26.jpg" alt="kethmars image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kethmars/my-first-4-years-as-a-professional-developer-in-a-dream-company-and-why-i-left-166d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My first 4 years as a professional developer in a dream company. And why I left.&lt;/h2&gt;
      &lt;h3&gt;kethmars ・ Mar 13 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#startup&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Monday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Why So Serverless? </title>
      <author>Margo McCabe</author>
      <pubDate>Tue, 16 Mar 2021 16:34:09 +0000</pubDate>
      <link>https://dev.to/harperdb/why-so-serverless-55cl</link>
      <guid>https://dev.to/harperdb/why-so-serverless-55cl</guid>
      <description>&lt;p&gt;Since we’re hosting a &lt;a href="https://harperdb.io/build-a-serverless-next-js-app-with-harperdb-and-vercel/?utm_source=devto"&gt;livestream next week on building a serverless Next.js app with HarperDB and Vercel&lt;/a&gt;, I thought it might make sense to do a debrief on “serverless.” We’re starting to see the word more and more, but do we really know what it means or why it’s growing in popularity? Let’s look into this. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52IoiL8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8vdseltbdq3wnm6r0hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52IoiL8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8vdseltbdq3wnm6r0hw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoworld.com/article/3406501/what-is-serverless-serverless-computing-explained.html"&gt;One author&lt;/a&gt; states that: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Serverless computing is an execution model for the cloud in which a cloud provider dynamically allocates—and then charges the user for—only the compute resources and storage needed to execute a particular piece of code. Naturally, there are still servers involved, but their provisioning and maintenance are entirely taken care of by the provider. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.zdnet.com/article/what-serverless-computing-really-means-and-everything-else-you-need-to-know/"&gt;Another article&lt;/a&gt; describes: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Serverless architecture refers to a kind of illusion, originally made for the sake of developers whose software will be hosted in the public cloud, but which extends to the way people eventually use that software. Its main objective is to make it easier for a software developer to compose code, intended to run on a cloud platform, that performs a clearly-defined job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, &lt;a href="https://martinfowler.com/articles/serverless.html"&gt;another author&lt;/a&gt; claims that serverless doesn’t really mean one thing, but that it encompasses two overlapping areas. Originally the definition of serverless was a broad generalization, but the term has evolved into a more precise definition like the second point below: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Applications that incorporate third-party, cloud-hosted applications and services, to manage server-side logic and state. &lt;br&gt;
2) Applications where server-side logic is still written by the application developer, but, unlike traditional architectures, it’s run in stateless compute containers that are event-triggered, ephemeral, and fully managed by a third party.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, serverless doesn’t &lt;em&gt;really&lt;/em&gt; mean “without a server.” It refers to software that’s hosted in the cloud, or a stateless container, where the user does not need to worry about management, hosting, or maintenance. Servers are still used, but serverless vendors generally provide backend services that are charged based on usage, instead of charging by a fixed amount of bandwidth or number of servers. In the simplest terms, a serverless system is a way to build an application without having to manage the infrastructure. The overall goal of serverless architectures is to reduce administration and maintenance headaches while enabling increased flexibility and innovation. Sounds like a dream come true! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wH62L9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbauvo9e6eb0f4jb3pt9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wH62L9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbauvo9e6eb0f4jb3pt9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;You might be familiar with AWS' serverless service model called Lambda. Or maybe you’re more of an Azure Functions or Google Cloud Functions fan. Vercel is another cloud platform that enables you to deploy serverless functions. For example, let’s look at HarperDB Cloud instance provisioning. We utilize a serverless architecture that uses AWS Lambda functions for instance provisioning, including allocating AWS resources and metadata creation, with backend data services powered entirely by HarperDB. HarperDB utilizes a REST API as the native interface, making it ideal for serverless functions to consume, as connection limits aren't a problem. There are certainly other examples of serverless - just think of any software that runs when called and disappears when it’s done. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-and-drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Benefits and Drawbacks
&lt;/h3&gt;

&lt;p&gt;As with any technology or architecture, there are pros and cons to serverless computing. &lt;a href="https://martinfowler.com/articles/serverless.html"&gt;Martin Fowler&lt;/a&gt; points out that, “Serverless architectures may benefit from significantly reduced operational cost, complexity, and engineering lead time, at a cost of increased reliance on vendor dependencies and comparatively immature supporting services.” &lt;a href="https://www.zdnet.com/article/what-serverless-computing-really-means-and-everything-else-you-need-to-know/"&gt;This article&lt;/a&gt; also provides some great insights, but I’ll summarize from a few different sources below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros" class="anchor"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simplicity&lt;/strong&gt;; remove the need for infrastructure setup, configuration, provisioning and management&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost savings&lt;/strong&gt;; new economic model of cloud computing provides opportunity for increased efficiency and reduced cost; only pay for resources you use; less overhead&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability and latency&lt;/strong&gt;; the cloud distributes the workload for you so it’s easier to scale horizontally; global access points reduce transmission time &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increased productivity&lt;/strong&gt;; developers can focus on their code or their project instead of administration and housekeeping &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improved security&lt;/strong&gt;; developer may be more likely to produce code that conforms with best practices because they are constrained to code constructs that work within the serverless context&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Save time&lt;/strong&gt;; reduce the number of steps involved in production, development, and deployment&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improved utilization&lt;/strong&gt;; usage based fee structure, customer leases a function instead of a server
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HzfSWDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kae5n1p2a3ofv5w0pl99.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cloud lock-in&lt;/strong&gt;; many services are specific to one cloud provider, which locks the cloud provider’s customers into one infrastructure and prevents redundancy and cost savings (learn more about this &lt;a href="https://dev.to/harperdb/enhance-your-hybrid-cloud-strategy-with-a-new-edge-36c4"&gt;here&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security / risk&lt;/strong&gt;; no longer own or control the OS, container, or application runtime&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Uncertain service levels&lt;/strong&gt;; some service level agreements are not yet fully defined for serverless architectures&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monolithic tendency&lt;/strong&gt;; organizations tend to deploy all functions on one platform, sharing the same context, which can make it difficult to scale &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Communication&lt;/strong&gt;; developers and operators may lack communication as developers no longer need to understand the requirements of the systems hosting their code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Well, there you have it folks!&lt;/em&gt; The definition of serverless computing has evolved over the past few years, and &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Wikipedia&lt;/a&gt; currently summarizes it well, as “a cloud computing model where the cloud provider allocates machine resources on demand, taking care of the servers on behalf of their customers.” All in all, as long as each individual team or organization works to understand which serverless architecture or technology is the best fit for their unique goals, it seems that the serverless pros outweigh the cons. However, if you don’t do your due diligence and get locked in with a specific cloud provider, you may end up with high costs and a lack of redundancy. Put in the time upfront for technological decisioning in order to reap the benefits later on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-wait-theres-more" class="anchor"&gt;
  &lt;/a&gt;
  But wait, there’s more!
&lt;/h2&gt;

&lt;p&gt;HarperDB is hosting a &lt;a href="https://harperdb.io/build-a-serverless-next-js-app-with-harperdb-and-vercel/?utm_source=devto"&gt;workshop on March 23rd&lt;/a&gt; where you can build your own serverless application! We are excited to host &lt;a href="https://twitter.com/leeerob"&gt;Lee Robinson&lt;/a&gt;, who works at Vercel as a Solutions Architect and leads DevRel for Next.js, for this fun interactive event. &lt;strong&gt;Lee will build a serverless Next.js application using HarperDB, and deploy it to Vercel&lt;/strong&gt;. The application will utilize Next.js API Routes, which get deployed as serverless functions on Vercel, to connect to HarperDB via our REST API. Vercel is a cloud platform for static sites and serverless Functions. It enables developers to host websites and web services that deploy instantly, scale automatically, and require no supervision; all with no configuration. Next.js is an open-source React framework for web development for both server-rendered and static web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All are welcome to this free virtual code along!&lt;/strong&gt; The event will be followed by Q&amp;amp;A with Lee and the HarperDB team, so bring your questions. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rsvp-here-lets-get-serverless" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://harperdb.io/build-a-serverless-next-js-app-with-harperdb-and-vercel/?utm_source=devto#serverless_rsvp"&gt;RSVP here, let's get serverless&lt;/a&gt;!
&lt;/h3&gt;

</description>
      <category>serverless</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting started with Node JS</title>
      <author>Pooja Gupta</author>
      <pubDate>Tue, 16 Mar 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</link>
      <guid>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</guid>
      <description>&lt;p&gt;Hey folks! I just started learning node JS and thought to share with all of you who are new to node JS and wanted to learn node JS.&lt;br&gt;
so we are gonna see little insights of node JS and after that we will write our first code in node JS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-what-is-node-js" class="anchor"&gt;
  &lt;/a&gt;
  So What is Node JS?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js is a cross-platform JavaScript runtime environment that allows developers to build server-side and network applications with JavaScript.&lt;/li&gt;
&lt;li&gt;NPM is a package manager which comes bundled with node JS which helps in downloading packages into a node_modules folder.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use npm init command to initialize your project which will ask basic information about your project and creates one file package.json which will have all information you provide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So package.json file is face of your project which will contain all the information about your project as well as all those dependencies needed for your project with their version name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Their are a lot of frameworks available which will ease our work while writing our code like express, sails, Hapi, Koa etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But first let we use simple Node JS without any framework to understand it in depth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In your folder create index.js and do npm init after that write this code in index.js file and do node index.js from the command line from the same path where your index file exists.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(request, response) {
  console.log("Request received.");
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.write("Welcome to node.js World");
  response.end();
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, on each and every url, you found “welcome to node.js world”. Now we will send different response, according to requested url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(req, res) {
    if (req.url == "/") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the homepage!");
    }

    // About page
    else if (req.url == "/contact") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the contact page!");
    }

    // 404'd!
    else {
        res.writeHead(404, { "Content-Type": "text/plain" });
        res.end("404 error! File not found.");
    }
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
console.log("Server has started.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we track requested url and respectively show that content on that url, and handle 404 condition in all other cases. &lt;br&gt;
I hope this article helps you getting started with node JS, don't forget to tell me in comment section how much you liked this post and in case any query reach me out !&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>100 underline/overlay  animations | The ultimate CSS collection 🥇</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 16 Mar 2021 15:11:39 +0000</pubDate>
      <link>https://dev.to/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40</link>
      <guid>https://dev.to/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40</guid>
      <description>&lt;p&gt;Get tired searching animations for your menu items and links? Search no more! Here is a list of more than 100 different animations. From the simple one to the more complex one, you will for sure find what you want.&lt;/p&gt;

&lt;p&gt;No SVG, No JS, No extra tag, No pseudo element, No keyframes ... All of them are done using backgrounds, transition and only one element. Simply add a class and enjoy.&lt;/p&gt;

&lt;p&gt;I am not relying on pseudo element so you can easily use them with elements like &lt;code&gt;input&lt;/code&gt; (where we cannot have pseudo element).&lt;/p&gt;

&lt;p&gt;In order to understand the logic of each animation, I highly recommend my previous article about &lt;code&gt;background-position&lt;/code&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/all-you-need-to-know-about-background-position-3aac" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;All you need to know about background-position&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Mar 13 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#table-of-content" class="anchor"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-basic"&gt;The Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-continuous"&gt;The Continuous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-double"&gt;The Double&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-two-steps"&gt;The Two Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unexpected"&gt;The Unexpected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-rounded"&gt;The Rounded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fading"&gt;The Fading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-infinite"&gt;The Infinite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-all-sides"&gt;The All Sides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-thick"&gt;The Thick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-sliding"&gt;The Sliding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fancy"&gt;The Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-inverted"&gt;The Inverted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-3d"&gt;The 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-basic" class="anchor"&gt;
  &lt;/a&gt;
  The Basic
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/oNYOpBe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentColor&lt;/code&gt; will use the color defined inside &lt;code&gt;color&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I am using CSS variables to make the code shorter. &lt;code&gt;var(--d, 0)&lt;/code&gt; means that the default value is &lt;code&gt;0&lt;/code&gt; then I change it on hover.&lt;/li&gt;
&lt;li&gt;The syntax &lt;code&gt;0 100% /var(--d, 0) 3px&lt;/code&gt; means &lt;code&gt;background-position / background-size&lt;/code&gt;. We adjust the &lt;code&gt;3px&lt;/code&gt; to control the height/thickness of the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-continuous" class="anchor"&gt;
  &lt;/a&gt;
  The Continuous
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKNYZoK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-double" class="anchor"&gt;
  &lt;/a&gt;
  The Double
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJbGzrG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-two-steps" class="anchor"&gt;
  &lt;/a&gt;
  The Two Steps
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWNQZJa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-unexpected" class="anchor"&gt;
  &lt;/a&gt;
  The Unexpected
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYyMdKP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rounded" class="anchor"&gt;
  &lt;/a&gt;
  The Rounded
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYbvQLX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fading" class="anchor"&gt;
  &lt;/a&gt;
  The Fading
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWGPQxp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-infinite" class="anchor"&gt;
  &lt;/a&gt;
  The Infinite
&lt;/h3&gt;

&lt;p&gt;Keep the hover for too long here.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWGPQzg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-all-sides" class="anchor"&gt;
  &lt;/a&gt;
  The All Sides
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEBZxEj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thick" class="anchor"&gt;
  &lt;/a&gt;
  The Thick
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKNYoMo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-sliding" class="anchor"&gt;
  &lt;/a&gt;
  The Sliding
&lt;/h3&gt;

&lt;p&gt;The below requires us to know the width of the element so it's more suitable for monospace fonts where we can use the &lt;code&gt;ch&lt;/code&gt; unit&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PobgRJj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fancy" class="anchor"&gt;
  &lt;/a&gt;
  The Fancy
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BaQEVqz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;sup&gt;(2) and (5) use some hardcoded values that need to be adjusted based on the element width&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-inverted" class="anchor"&gt;
  &lt;/a&gt;
  The Inverted
&lt;/h3&gt;

&lt;p&gt;The below doesn't work on Firefox due to a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1571244"&gt;known bug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzpMvbz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-3d" class="anchor"&gt;
  &lt;/a&gt;
  The 3D
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; the below uses some advanced CSS but I considered CSS variables to make it easy to control&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzpMjWy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Tell me what do you think and which one is your favorite. 👇&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>How to Add Tailwind CSS to Your Angular Application 2021</title>
      <author>Godwin Daniel</author>
      <pubDate>Tue, 16 Mar 2021 14:47:52 +0000</pubDate>
      <link>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</link>
      <guid>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</guid>
      <description>&lt;p&gt;According to the official documentation, Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces. I like to think of it as a cool way to write inline styling and achieve an awesome interface without writing a single line of your own CSS.   Angular, on the other hand, is a platform that allows you to build high-quality enterprise applications. Combine Angular with Tailwind CSS and you have a perfect stack for building top-notch web applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, I will walk you through how you can add &lt;br&gt;
       Tailwind CSS to your Angular application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🚩  This article assumes that you're using the Angular CLI &lt;br&gt;
       version 11.2.0 or higher.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-generate-a-new-angular-application" class="anchor"&gt;
  &lt;/a&gt;
  1. Generate a new Angular application
&lt;/h1&gt;

&lt;p&gt;Let's start by creating a new Angular project using the ng new command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng new my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the CLI asks you "which stylesheet format would you like to use?" choose CSS because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With Tailwind, you don't need a CSS preprocessor like Sass. &lt;br&gt;
 You'll rarely need to write custom CSS anyway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your CSS will compile much faster because it won't need to &lt;br&gt;
 pass through multiple compilation pipelines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-install-the-needed-tailwind-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  2. Install the needed tailwind dependencies
&lt;/h1&gt;

&lt;p&gt;Now, install the required dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng add @ngneat/tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;follow the instructions below:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to enable dark mode?

     none
     class
     media
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;class&lt;/strong&gt;  then click (enter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to use tailwind directives and functions in 
     component styles? (might increase build time) (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? What @tailwindcss plugins do you want to enable?

     ⭕ aspect-ratio
     ⭕ forms ✔
     ⭕ Line-clamp
     ⭕ typography ✔
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;forms&lt;/strong&gt; &amp;amp; &lt;strong&gt;typography&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The command above install all needed packages and update the &lt;br&gt;
  project files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#3-enjoy" class="anchor"&gt;
  &lt;/a&gt;
  3. Enjoy
&lt;/h1&gt;

&lt;p&gt;You can now start your Angular application and enjoy using Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng serve --open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;code&gt;If you enjoyed this article, follow [@CodeBase__](https://twitter.com/CodeBase__) on Twitter for more content like this.&lt;/code&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>angular</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to publish an unscoped npm package to Github Package Registry</title>
      <author>Akinwunmi Aguda</author>
      <pubDate>Tue, 16 Mar 2021 13:25:24 +0000</pubDate>
      <link>https://dev.to/akinaguda/how-to-publish-an-unscoped-npm-package-to-github-package-registry-19mg</link>
      <guid>https://dev.to/akinaguda/how-to-publish-an-unscoped-npm-package-to-github-package-registry-19mg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-scenario" class="anchor"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h2&gt;

&lt;p&gt;I created a project, bootstrapped with &lt;a href="https://tsdx.io/#quick-start"&gt;tsdx&lt;/a&gt;, and deployed it to npm. I achieved this by logging into npm in my terminal and running&lt;br&gt;
&lt;code&gt;npm publish&lt;/code&gt; or &lt;code&gt;npm publish --access public&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-challenge" class="anchor"&gt;
  &lt;/a&gt;
  The challenge
&lt;/h2&gt;

&lt;p&gt;Subsequently, I decided to publish to the &lt;a href="https://github.com/features/packages"&gt;github package registry&lt;/a&gt;. That's when I realized that to publish to the github registry, the name of my package needed to be scoped (unlike with npm where this is optional).&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/scope"&gt;npm&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scopes are a way of grouping related packages together, and also affect a few things about the way npm treats the package.&lt;/p&gt;

&lt;p&gt;Each npm user/organization has their own scope, and only you can add packages in your scope. This means you don't have to worry about someone taking your package name ahead of you. Thus it is also a good way to signal official packages for organizations. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In summary, scoping a package allows two packages with the same name to co-exist, as long as they are scoped differently. Typically, a scoped package would be have the &lt;code&gt;name&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt; be something like: &lt;code&gt;@someuser/common-package-name&lt;/code&gt; or &lt;code&gt;@someorganization/common-package-name&lt;/code&gt; but mine was more like &lt;code&gt;common-package-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that your package does not have to be &lt;code&gt;@someuser&lt;/code&gt; on github package registry. It could be &lt;code&gt;@anything&lt;/code&gt; but in my case, it seemed like a good idea to just scope it to my username.&lt;/p&gt;

&lt;p&gt;Naturally this would not be a problem if your npm package was already scoped like &lt;code&gt;@someuser/common-package-name&lt;/code&gt; on npm. In my case it was not&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;After some googling, I found this &lt;a href="https://github.com/formium/tsdx/issues/854"&gt;closed issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, &lt;a href="https://github.com/formium/tsdx/issues/854#issuecomment-688474830"&gt;alehechka&lt;/a&gt; created a great github action to so solve this problem.&lt;/p&gt;

&lt;p&gt;The only issue with it was, if your github username had any uppercase characters in it, it will not successfully deploy to the github package registry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
While you could manually do all of this each time you want to deploy, using github actions would be a better and more efficient way to do this.&lt;/p&gt;

&lt;p&gt;So, I made some slight modifications to his solution, and with just two steps, you could deploy your package to the github registry and npm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: add this to your package.json
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"publishConfig": {
   "registry": "https://registry-url"
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Step 2: create a workflow file. For instance, &lt;strong&gt;deploy.yml&lt;/strong&gt; and paste in:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: npm-publish
on:
  push:
    branches:
      - master # Change this to your default branch
jobs:
  npm-publish:
    name: npm-publish
    runs-on: ubuntu-latest

    steps:
      # Publish to Node Package Manager
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Setup Node.js (NPM)
        uses: actions/setup-node@master
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Update Publish Config
        run: sed -i 's^registry-url^registry.npmjs.org^' package.json

      - name: Publish to NPM
        run: npm publish --access public
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  gpr-publish:
    name: gpr-publish
    runs-on: ubuntu-latest

    steps:
      # Publish to GitHub Package Registry
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Store lowercase actor name
        run: |
          echo 'actor_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
          echo ${{ github.actor }} | tr "A-Z" "a-z" &amp;gt;&amp;gt; $GITHUB_ENV
          echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV

      - name: Store package name
        run: |
          echo 'package_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
          grep -Po '"name": *\K"[^"]*"' package.json | grep -oP '"\K[^"\047]+(?=["\047])' &amp;gt;&amp;gt; $GITHUB_ENV
          echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV

      - name: Setup Node.js (GPR)
        uses: actions/setup-node@master
        with:
          node-version: '12.x'
          registry-url: https://npm.pkg.github.com/
          scope: '${{ env.actor_name }}'

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Update Package Name
        run: |
          sed -i 's,"name": "${{ env.package_name }}","name": "@${{ env.actor_name }}/${{ env.package_name }}",' package.json
          cat package.json

      - name: Update Publish Config
        run: |
          sed -i 's^registry-url^npm.pkg.github.com/@${{ env.actor_name }}^' package.json
          cat package.json

      - name: Publish to GitHub Package Registry
        run: npm publish --access public
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's really all you need.&lt;/p&gt;

&lt;p&gt;The changes I made to &lt;a href="https://github.com/formium/tsdx/issues/854#issuecomment-688474830"&gt;this&lt;/a&gt; are:&lt;/p&gt;

&lt;p&gt;Adding the following script to convert the username to lowercase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Store lowercase actor name
   run: |
    echo 'actor_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
    echo ${{ github.actor }} | tr "A-Z" "a-z" &amp;gt;&amp;gt; $GITHUB_ENV
    echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this to get the package name from the package.json and store in an environment variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Store package name
   run: |
    echo 'package_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
    grep -Po '"name": *\K"[^"]*"' package.json | grep -oP '"\K[^"\047]+(?=["\047])' &amp;gt;&amp;gt; $GITHUB_ENV
    echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then updated to the github action to change the name of the package in the package.json, to a scoped version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Update Package Name
   run: |
    sed -i 's,"name": "${{ env.package_name }}","name": "@${{ env.actor_name }}/${{ env.package_name }}",' package.json
    cat package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and finally, I switched out every use of &lt;code&gt;${{ github.actor }}&lt;/code&gt; with &lt;code&gt;@${{ env.actor_name }}&lt;/code&gt; which is the author's name in lowercase.&lt;/p&gt;

</description>
      <category>npm</category>
      <category>github</category>
      <category>actions</category>
      <category>tsdx</category>
    </item>
  </channel>
</rss>
